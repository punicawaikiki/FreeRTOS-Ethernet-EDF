
FreeRTOS Ethernet EDF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107a8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  080109a8  080109a8  000209a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115b0  080115b0  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080115b0  080115b0  000215b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115b8  080115b8  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115b8  080115b8  000215b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080115bc  080115bc  000215bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080115c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c7a4  20000200  080117c0  00030200  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2000c9a4  080117c0  0003c9a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ecf3  00000000  00000000  0003022e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b50  00000000  00000000  0005ef21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f78  00000000  00000000  00064a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001da8  00000000  00000000  000669f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035e1f  00000000  00000000  00068798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e53f  00000000  00000000  0009e5b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001328ec  00000000  00000000  000bcaf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ef3e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008728  00000000  00000000  001ef460  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000200 	.word	0x20000200
 800021c:	00000000 	.word	0x00000000
 8000220:	08010990 	.word	0x08010990

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000204 	.word	0x20000204
 800023c:	08010990 	.word	0x08010990

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_ETH_Init+0x88>)
 8000616:	4a21      	ldr	r2, [pc, #132]	; (800069c <MX_ETH_Init+0x8c>)
 8000618:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_ETH_Init+0x88>)
 800061c:	2201      	movs	r2, #1
 800061e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ETH_Init+0x88>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_ETH_Init+0x88>)
 800062a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800062e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_ETH_Init+0x88>)
 8000632:	2201      	movs	r2, #1
 8000634:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_ETH_Init+0x88>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_ETH_Init+0x88>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	3301      	adds	r3, #1
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_ETH_Init+0x88>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	3302      	adds	r3, #2
 800064e:	22e1      	movs	r2, #225	; 0xe1
 8000650:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_ETH_Init+0x88>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	3303      	adds	r3, #3
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_ETH_Init+0x88>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	3304      	adds	r3, #4
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_ETH_Init+0x88>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	3305      	adds	r3, #5
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_ETH_Init+0x88>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_ETH_Init+0x88>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_ETH_Init+0x88>)
 800067e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000682:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_ETH_Init+0x88>)
 8000686:	f000 fe25 	bl	80012d4 <HAL_ETH_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ETH_Init+0x84>
  {
    Error_Handler();
 8000690:	f000 fb04 	bl	8000c9c <Error_Handler>
  }

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000c708 	.word	0x2000c708
 800069c:	40028000 	.word	0x40028000

080006a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	; 0x38
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a44      	ldr	r2, [pc, #272]	; (80007d0 <HAL_ETH_MspInit+0x130>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	f040 8081 	bne.w	80007c6 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006c4:	4b43      	ldr	r3, [pc, #268]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a42      	ldr	r2, [pc, #264]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 80006ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
 80006d0:	4b40      	ldr	r3, [pc, #256]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006d8:	623b      	str	r3, [r7, #32]
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	4a3c      	ldr	r2, [pc, #240]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 80006e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006e6:	6313      	str	r3, [r2, #48]	; 0x30
 80006e8:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006f0:	61fb      	str	r3, [r7, #28]
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	4a36      	ldr	r2, [pc, #216]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 80006fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000700:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800070c:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 8000712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <HAL_ETH_MspInit+0x134>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8000754:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	230b      	movs	r3, #11
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	4619      	mov	r1, r3
 8000770:	4819      	ldr	r0, [pc, #100]	; (80007d8 <HAL_ETH_MspInit+0x138>)
 8000772:	f001 fce3 	bl	800213c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000776:	2332      	movs	r3, #50	; 0x32
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	4619      	mov	r1, r3
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <HAL_ETH_MspInit+0x13c>)
 8000792:	f001 fcd3 	bl	800213c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000796:	2386      	movs	r3, #134	; 0x86
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a6:	230b      	movs	r3, #11
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <HAL_ETH_MspInit+0x140>)
 80007b2:	f001 fcc3 	bl	800213c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2107      	movs	r1, #7
 80007ba:	203d      	movs	r0, #61	; 0x3d
 80007bc:	f000 fd60 	bl	8001280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80007c0:	203d      	movs	r0, #61	; 0x3d
 80007c2:	f000 fd79 	bl	80012b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007c6:	bf00      	nop
 80007c8:	3738      	adds	r7, #56	; 0x38
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40028000 	.word	0x40028000
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40021800 	.word	0x40021800
 80007dc:	40020800 	.word	0x40020800
 80007e0:	40020000 	.word	0x40020000

080007e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <MX_GPIO_Init+0x104>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a3a      	ldr	r2, [pc, #232]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a34      	ldr	r2, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <MX_GPIO_Init+0x104>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a2e      	ldr	r2, [pc, #184]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_GPIO_Init+0x104>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_GPIO_Init+0x104>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f242 0120 	movw	r1, #8224	; 0x2020
 8000890:	4816      	ldr	r0, [pc, #88]	; (80008ec <MX_GPIO_Init+0x108>)
 8000892:	f001 fe15 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_USER3_GPIO_Port, LD_USER3_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x10c>)
 800089e:	f001 fe0f 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|LD_USER2_Pin;
 80008a2:	f242 0320 	movw	r3, #8224	; 0x2020
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_GPIO_Init+0x108>)
 80008bc:	f001 fc3e 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_USER3_Pin;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_USER3_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_GPIO_Init+0x10c>)
 80008da:	f001 fc2f 	bl	800213c <HAL_GPIO_Init>

}
 80008de:	bf00      	nop
 80008e0:	3730      	adds	r7, #48	; 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40022400 	.word	0x40022400
 80008f0:	40020000 	.word	0x40020000

080008f4 <pcApplicationHostnameHook>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
const char *pcApplicationHostnameHook( void )
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <pcApplicationHostnameHook+0x10>)
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	080109a8 	.word	0x080109a8

08000908 <prvSRand>:

static void prvSRand( UBaseType_t ulSeed )
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	/* Utility function to seed the pseudo random number generator. */
	ulNextRand = ulSeed;
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <prvSRand+0x1c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	2000021c 	.word	0x2000021c

08000928 <uxRand>:

UBaseType_t uxRand( void )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
const uint32_t ulMultiplier = 0x015a4e35UL, ulIncrement = 1UL;
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <uxRand+0x6c>)
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
static BaseType_t xInitialised = pdFALSE;

	/* Don't initialise until the scheduler is running, as the timeout in the
	random number generator uses the tick count. */
	if( xInitialised == pdFALSE )
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <uxRand+0x70>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d117      	bne.n	800096e <uxRand+0x46>
	{
		if( xTaskGetSchedulerState() !=  taskSCHEDULER_NOT_STARTED )
 800093e:	f005 fd6d 	bl	800641c <xTaskGetSchedulerState>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d012      	beq.n	800096e <uxRand+0x46>
		RNG_HandleTypeDef xRND;
		uint32_t ulSeed;

			/* Generate a random number with which to seed the local pseudo random
			number generating function. */
			HAL_RNG_Init( &xRND );
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	4618      	mov	r0, r3
 800094e:	f002 ff13 	bl	8003778 <HAL_RNG_Init>
			HAL_RNG_GenerateRandomNumber( &xRND, &ulSeed );
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f002 ff36 	bl	80037cc <HAL_RNG_GenerateRandomNumber>
			prvSRand( ulSeed );
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ffd0 	bl	8000908 <prvSRand>
			xInitialised = pdTRUE;
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <uxRand+0x70>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
		}
	}

	/* Utility function to generate a pseudo random number. */

	ulNextRand = ( ulMultiplier * ulNextRand ) + ulIncrement;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <uxRand+0x74>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	fb02 f203 	mul.w	r2, r2, r3
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	4413      	add	r3, r2
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <uxRand+0x74>)
 800097e:	6013      	str	r3, [r2, #0]
	return( ( int ) ( ulNextRand >> 16UL ) & 0x7fffUL );
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <uxRand+0x74>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	0c1b      	lsrs	r3, r3, #16
 8000986:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 800098a:	4618      	mov	r0, r3
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	015a4e35 	.word	0x015a4e35
 8000998:	20000220 	.word	0x20000220
 800099c:	2000021c 	.word	0x2000021c

080009a0 <vLoggingPrintf>:

void vLoggingPrintf( const char *pcFormatString, ... ){
 80009a0:	b40f      	push	{r0, r1, r2, r3}
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
	return;
 80009a6:	bf00      	nop
}
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	b004      	add	sp, #16
 80009b0:	4770      	bx	lr
	...

080009b4 <xApplicationDNSQueryHook>:

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 80009bc:	f7ff ff9a 	bl	80008f4 <pcApplicationHostnameHook>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4619      	mov	r1, r3
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f00f fbcd 	bl	8010164 <strcasecmp>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 80009d0:	2301      	movs	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e00b      	b.n	80009ee <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <xApplicationDNSQueryHook+0x44>)
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f00f fbc3 	bl	8010164 <strcasecmp>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 80009e4:	2301      	movs	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e001      	b.n	80009ee <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	080109b4 	.word	0x080109b4

080009fc <xApplicationGetRandomNumber>:
 * Supply a random number to FreeRTOS+TCP stack.
 * THIS IS ONLY A DUMMY IMPLEMENTATION THAT RETURNS A PSEUDO RANDOM NUMBER
 * SO IS NOT INTENDED FOR USE IN PRODUCTION SYSTEMS.
 */
BaseType_t xApplicationGetRandomNumber(uint32_t* pulNumber)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	*(pulNumber) = uxRand();
 8000a04:	f7ff ff90 	bl	8000928 <uxRand>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
													uint16_t usSourcePort,
													uint32_t ulDestinationAddress,
													uint16_t usDestinationPort ){
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	461a      	mov	r2, r3
 8000a24:	460b      	mov	r3, r1
 8000a26:	817b      	strh	r3, [r7, #10]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	813b      	strh	r3, [r7, #8]
	return 306;
 8000a2c:	f44f 7399 	mov.w	r3, #306	; 0x132
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
static BaseType_t xTasksAlreadyCreated = pdFALSE;
    /* Both eNetworkUp and eNetworkDown events can be processed here. */
    if( eNetworkEvent == eNetworkUp )
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10c      	bne.n	8000a66 <vApplicationIPNetworkEventHook+0x2a>
    {
    	HAL_GPIO_WritePin(LD_USER2_GPIO_Port, LD_USER2_Pin, 1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2120      	movs	r1, #32
 8000a50:	480e      	ldr	r0, [pc, #56]	; (8000a8c <vApplicationIPNetworkEventHook+0x50>)
 8000a52:	f001 fd35 	bl	80024c0 <HAL_GPIO_WritePin>
        /* Create the tasks that use the TCP/IP stack if they have not already
        been created. */
        if( xTasksAlreadyCreated == pdFALSE )
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <vApplicationIPNetworkEventHook+0x54>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d111      	bne.n	8000a82 <vApplicationIPNetworkEventHook+0x46>
            /*
             * For convenience, tasks that use FreeRTOS+TCP can be created here
             * to ensure they are not created before the network is usable.
             */

            xTasksAlreadyCreated = pdTRUE;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <vApplicationIPNetworkEventHook+0x54>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
    	if (HAL_GPIO_ReadPin(LD_USER1_GPIO_Port, LD_USER1_Pin) != 1)
    	{
    		HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
    	}
    }
}
 8000a64:	e00d      	b.n	8000a82 <vApplicationIPNetworkEventHook+0x46>
    	if (HAL_GPIO_ReadPin(LD_USER1_GPIO_Port, LD_USER1_Pin) != 1)
 8000a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <vApplicationIPNetworkEventHook+0x50>)
 8000a6c:	f001 fd10 	bl	8002490 <HAL_GPIO_ReadPin>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d005      	beq.n	8000a82 <vApplicationIPNetworkEventHook+0x46>
    		HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <vApplicationIPNetworkEventHook+0x50>)
 8000a7e:	f001 fd1f 	bl	80024c0 <HAL_GPIO_WritePin>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022400 	.word	0x40022400
 8000a90:	20000224 	.word	0x20000224

08000a94 <vAssertCalled>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8000aa2:	f006 fda1 	bl	80075e8 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 8000aa6:	e000      	b.n	8000aaa <vAssertCalled+0x16>
		{
			__NOP();
 8000aa8:	bf00      	nop
		while( ul == 0 )
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0fb      	beq.n	8000aa8 <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8000ab0:	f006 fdc6 	bl	8007640 <vPortExitCritical>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <vLEDFlashTask_LD_USER1>:

void vLEDFlashTask_LD_USER1( void *pvParameters )
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  portTickType xLastWakeTime;
  const portTickType xFrequency = 100;
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	60fb      	str	r3, [r7, #12]
  xLastWakeTime=xTaskGetTickCount();
 8000ac8:	f005 f930 	bl	8005d2c <xTaskGetTickCount>
 8000acc:	4603      	mov	r3, r0
 8000ace:	60bb      	str	r3, [r7, #8]
    for( ;; )
    {
      HAL_GPIO_TogglePin(LD_USER3_GPIO_Port, LD_USER3_Pin);
 8000ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <vLEDFlashTask_LD_USER1+0x2c>)
 8000ad6:	f001 fd0c 	bl	80024f2 <HAL_GPIO_TogglePin>
      vTaskDelayUntil(&xLastWakeTime,xFrequency);
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	68f9      	ldr	r1, [r7, #12]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 ff91 	bl	8005a08 <xTaskDelayUntil>
      HAL_GPIO_TogglePin(LD_USER3_GPIO_Port, LD_USER3_Pin);
 8000ae6:	e7f3      	b.n	8000ad0 <vLEDFlashTask_LD_USER1+0x14>
 8000ae8:	40020000 	.word	0x40020000

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 fabe 	bl	8001072 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f82b 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f7ff fe73 	bl	80007e4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000afe:	f7ff fd87 	bl	8000610 <MX_ETH_Init>
  MX_RNG_Init();
 8000b02:	f000 f8cf 	bl	8000ca4 <MX_RNG_Init>
  MX_USART1_UART_Init();
 8000b06:	f000 f9f9 	bl	8000efc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  FreeRTOS_IPInit( ucIPAddress,
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <main+0x48>)
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <main+0x4c>)
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <main+0x50>)
 8000b12:	490b      	ldr	r1, [pc, #44]	; (8000b40 <main+0x54>)
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <main+0x58>)
 8000b16:	f008 fc75 	bl	8009404 <FreeRTOS_IPInit>
                   ucNetMask,
                   ucGatewayAddress,
                   ucDNSServerAddress,
                   ucMACAddress );

  xTaskCreate( vLEDFlashTask_LD_USER1, "LED", configMINIMAL_STACK_SIZE, NULL, mainLED_TASK_PRIORITY, NULL );
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	2282      	movs	r2, #130	; 0x82
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <main+0x5c>)
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <main+0x60>)
 8000b2a:	f004 fe2b 	bl	8005784 <xTaskCreate>
  vTaskStartScheduler();
 8000b2e:	f005 f809 	bl	8005b44 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <main+0x46>
 8000b34:	080113c0 	.word	0x080113c0
 8000b38:	080113d4 	.word	0x080113d4
 8000b3c:	080113d0 	.word	0x080113d0
 8000b40:	080113cc 	.word	0x080113cc
 8000b44:	080113c8 	.word	0x080113c8
 8000b48:	080109bc 	.word	0x080109bc
 8000b4c:	08000abd 	.word	0x08000abd

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0b8      	sub	sp, #224	; 0xe0
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b5a:	2234      	movs	r2, #52	; 0x34
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00f fac3 	bl	80100ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2290      	movs	r2, #144	; 0x90
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f00f fab4 	bl	80100ea <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <SystemClock_Config+0x11c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a39      	ldr	r2, [pc, #228]	; (8000c6c <SystemClock_Config+0x11c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <SystemClock_Config+0x11c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9a:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <SystemClock_Config+0x120>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a34      	ldr	r2, [pc, #208]	; (8000c70 <SystemClock_Config+0x120>)
 8000ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <SystemClock_Config+0x120>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bce:	2319      	movs	r3, #25
 8000bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000bd4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000be2:	2309      	movs	r3, #9
 8000be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 fceb 	bl	80025c8 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bf8:	f000 f850 	bl	8000c9c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bfc:	f001 fc94 	bl	8002528 <HAL_PWREx_EnableOverDrive>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c06:	f000 f849 	bl	8000c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c10:	2302      	movs	r3, #2
 8000c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c30:	2107      	movs	r1, #7
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 ff76 	bl	8002b24 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000c3e:	f000 f82d 	bl	8000c9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <SystemClock_Config+0x124>)
 8000c44:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c46:	2300      	movs	r3, #0
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 f969 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000c60:	f000 f81c 	bl	8000c9c <Error_Handler>
  }
}
 8000c64:	bf00      	nop
 8000c66:	37e0      	adds	r7, #224	; 0xe0
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000
 8000c74:	00200040 	.word	0x00200040

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8a:	f000 f9ff 	bl	800108c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40001000 	.word	0x40001000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <Error_Handler+0x6>

08000ca4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_RNG_Init+0x20>)
 8000caa:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <MX_RNG_Init+0x24>)
 8000cac:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_RNG_Init+0x20>)
 8000cb0:	f002 fd62 	bl	8003778 <HAL_RNG_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000cba:	f7ff ffef 	bl	8000c9c <Error_Handler>
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000c750 	.word	0x2000c750
 8000cc8:	50060800 	.word	0x50060800

08000ccc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_RNG_MspInit+0x44>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d113      	bne.n	8000d06 <HAL_RNG_MspInit+0x3a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_RNG_MspInit+0x48>)
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <HAL_RNG_MspInit+0x48>)
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce8:	6353      	str	r3, [r2, #52]	; 0x34
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_RNG_MspInit+0x48>)
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2050      	movs	r0, #80	; 0x50
 8000cfc:	f000 fac0 	bl	8001280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000d00:	2050      	movs	r0, #80	; 0x50
 8000d02:	f000 fad9 	bl	80012b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	50060800 	.word	0x50060800
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	; 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	2036      	movs	r0, #54	; 0x36
 8000d76:	f000 fa83 	bl	8001280 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d7a:	2036      	movs	r0, #54	; 0x36
 8000d7c:	f000 fa9c 	bl	80012b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <HAL_InitTick+0xa0>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <HAL_InitTick+0xa0>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_InitTick+0xa0>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d98:	f107 0210 	add.w	r2, r7, #16
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 f890 	bl	8002ec8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000da8:	f002 f866 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8000dac:	4603      	mov	r3, r0
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db4:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <HAL_InitTick+0xa4>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	0c9b      	lsrs	r3, r3, #18
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_InitTick+0xac>)
 8000dc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dcc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_InitTick+0xa8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <HAL_InitTick+0xa8>)
 8000de2:	f002 fdad 	bl	8003940 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d104      	bne.n	8000df6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <HAL_InitTick+0xa8>)
 8000dee:	f002 fddd 	bl	80039ac <HAL_TIM_Base_Start_IT>
 8000df2:	4603      	mov	r3, r0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3730      	adds	r7, #48	; 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	431bde83 	.word	0x431bde83
 8000e08:	2000c760 	.word	0x2000c760
 8000e0c:	40001000 	.word	0x40001000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM6_DAC_IRQHandler+0x10>)
 8000e42:	f002 fddd 	bl	8003a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000c760 	.word	0x2000c760

08000e50 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <RNG_IRQHandler+0x10>)
 8000e56:	f002 fd08 	bl	800386a <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000c750 	.word	0x2000c750

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f00f f8cc 	bl	8010030 <__errno>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20080000 	.word	0x20080000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	20000228 	.word	0x20000228
 8000ecc:	2000c9a8 	.word	0x2000c9a8

08000ed0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <SystemInit+0x28>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <SystemInit+0x28>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SystemInit+0x28>)
 8000ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eea:	609a      	str	r2, [r3, #8]
#endif
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f02:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <MX_USART1_UART_Init+0x5c>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_USART1_UART_Init+0x58>)
 8000f40:	f002 ff64 	bl	8003e0c <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f4a:	f7ff fea7 	bl	8000c9c <Error_Handler>
  }

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000c7a0 	.word	0x2000c7a0
 8000f58:	40011000 	.word	0x40011000

08000f5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a25      	ldr	r2, [pc, #148]	; (8001010 <HAL_UART_MspInit+0xb4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d144      	bne.n	8001008 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <HAL_UART_MspInit+0xb8>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a24      	ldr	r2, [pc, #144]	; (8001014 <HAL_UART_MspInit+0xb8>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_UART_MspInit+0xb8>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_UART_MspInit+0xb8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <HAL_UART_MspInit+0xb8>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_UART_MspInit+0xb8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_UART_MspInit+0xb8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <HAL_UART_MspInit+0xb8>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_UART_MspInit+0xb8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <HAL_UART_MspInit+0xbc>)
 8000fe2:	f001 f8ab 	bl	800213c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <HAL_UART_MspInit+0xc0>)
 8001004:	f001 f89a 	bl	800213c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40011000 	.word	0x40011000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	40020000 	.word	0x40020000

08001020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001058 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001026:	e003      	b.n	8001030 <LoopCopyDataInit>

08001028 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800102a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800102c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800102e:	3104      	adds	r1, #4

08001030 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001038:	d3f6      	bcc.n	8001028 <CopyDataInit>
  ldr  r2, =_sbss
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800103c:	e002      	b.n	8001044 <LoopFillZerobss>

0800103e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800103e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001040:	f842 3b04 	str.w	r3, [r2], #4

08001044 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001046:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001048:	d3f9      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800104a:	f7ff ff41 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104e:	f00e fff5 	bl	801003c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001052:	f7ff fd4b 	bl	8000aec <main>
  bx  lr    
 8001056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001058:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800105c:	080115c0 	.word	0x080115c0
  ldr  r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001064:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8001068:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 800106c:	2000c9a4 	.word	0x2000c9a4

08001070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC_IRQHandler>

08001072 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001076:	2003      	movs	r0, #3
 8001078:	f000 f8f7 	bl	800126a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff fe6f 	bl	8000d60 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001082:	f7ff fe49 	bl	8000d18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	2000c820 	.word	0x2000c820

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	2000c820 	.word	0x2000c820

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_Delay+0x40>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000008 	.word	0x20000008

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <__NVIC_SetPriorityGrouping+0x40>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	4313      	orrs	r3, r2
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x40>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	05fa0000 	.word	0x05fa0000

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff4c 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001292:	f7ff ff61 	bl	8001158 <__NVIC_GetPriorityGrouping>
 8001296:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	6978      	ldr	r0, [r7, #20]
 800129e:	f7ff ffb1 	bl	8001204 <NVIC_EncodePriority>
 80012a2:	4602      	mov	r2, r0
 80012a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff80 	bl	80011b0 <__NVIC_SetPriority>
}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff54 	bl	8001174 <__NVIC_EnableIRQ>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80012e4:	4ba9      	ldr	r3, [pc, #676]	; (800158c <HAL_ETH_Init+0x2b8>)
 80012e6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e183      	b.n	8001602 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff f9c6 	bl	80006a0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001314:	4b9e      	ldr	r3, [pc, #632]	; (8001590 <HAL_ETH_Init+0x2bc>)
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	4a9d      	ldr	r2, [pc, #628]	; (8001590 <HAL_ETH_Init+0x2bc>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131e:	6453      	str	r3, [r2, #68]	; 0x44
 8001320:	4b9b      	ldr	r3, [pc, #620]	; (8001590 <HAL_ETH_Init+0x2bc>)
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800132c:	4b99      	ldr	r3, [pc, #612]	; (8001594 <HAL_ETH_Init+0x2c0>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a98      	ldr	r2, [pc, #608]	; (8001594 <HAL_ETH_Init+0x2c0>)
 8001332:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001336:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001338:	4b96      	ldr	r3, [pc, #600]	; (8001594 <HAL_ETH_Init+0x2c0>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4994      	ldr	r1, [pc, #592]	; (8001594 <HAL_ETH_Init+0x2c0>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0201 	orr.w	r2, r2, #1
 8001358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800135e:	f7ff fea9 	bl	80010b4 <HAL_GetTick>
 8001362:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001364:	e011      	b.n	800138a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001366:	f7ff fea5 	bl	80010b4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001374:	d909      	bls.n	800138a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e13b      	b.n	8001602 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e4      	bne.n	8001366 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f023 031c 	bic.w	r3, r3, #28
 80013aa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013ac:	f001 fd58 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 80013b0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4a78      	ldr	r2, [pc, #480]	; (8001598 <HAL_ETH_Init+0x2c4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d908      	bls.n	80013cc <HAL_ETH_Init+0xf8>
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4a77      	ldr	r2, [pc, #476]	; (800159c <HAL_ETH_Init+0x2c8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d804      	bhi.n	80013cc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	e027      	b.n	800141c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	4a73      	ldr	r2, [pc, #460]	; (800159c <HAL_ETH_Init+0x2c8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d908      	bls.n	80013e6 <HAL_ETH_Init+0x112>
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	4a72      	ldr	r2, [pc, #456]	; (80015a0 <HAL_ETH_Init+0x2cc>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d804      	bhi.n	80013e6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f043 030c 	orr.w	r3, r3, #12
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	e01a      	b.n	800141c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4a6d      	ldr	r2, [pc, #436]	; (80015a0 <HAL_ETH_Init+0x2cc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d903      	bls.n	80013f6 <HAL_ETH_Init+0x122>
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4a6c      	ldr	r2, [pc, #432]	; (80015a4 <HAL_ETH_Init+0x2d0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d911      	bls.n	800141a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4a6a      	ldr	r2, [pc, #424]	; (80015a4 <HAL_ETH_Init+0x2d0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d908      	bls.n	8001410 <HAL_ETH_Init+0x13c>
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4a69      	ldr	r2, [pc, #420]	; (80015a8 <HAL_ETH_Init+0x2d4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d804      	bhi.n	8001410 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e005      	b.n	800141c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	e000      	b.n	800141c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800141a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001424:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001428:	2100      	movs	r1, #0
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f9c7 	bl	80017be <HAL_ETH_WritePHYRegister>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fb7d 	bl	8001b3c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0d9      	b.n	8001602 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800144e:	20ff      	movs	r0, #255	; 0xff
 8001450:	f7ff fe3c 	bl	80010cc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a7 	beq.w	80015ac <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800145e:	f7ff fe29 	bl	80010b4 <HAL_GetTick>
 8001462:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	461a      	mov	r2, r3
 800146a:	2101      	movs	r1, #1
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f93e 	bl	80016ee <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001472:	f7ff fe1f 	bl	80010b4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d90f      	bls.n	80014a4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fb56 	bl	8001b3c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e0ae      	b.n	8001602 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0da      	beq.n	8001464 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014b2:	2100      	movs	r1, #0
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f982 	bl	80017be <HAL_ETH_WritePHYRegister>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014c4:	6939      	ldr	r1, [r7, #16]
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fb38 	bl	8001b3c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014d4:	2301      	movs	r3, #1
 80014d6:	e094      	b.n	8001602 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014d8:	f7ff fdec 	bl	80010b4 <HAL_GetTick>
 80014dc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	461a      	mov	r2, r3
 80014e4:	2101      	movs	r1, #1
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f901 	bl	80016ee <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014ec:	f7ff fde2 	bl	80010b4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d90f      	bls.n	800151e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001502:	6939      	ldr	r1, [r7, #16]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 fb19 	bl	8001b3c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e071      	b.n	8001602 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f003 0320 	and.w	r3, r3, #32
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0da      	beq.n	80014de <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	461a      	mov	r2, r3
 800152e:	211f      	movs	r1, #31
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f8dc 	bl	80016ee <HAL_ETH_ReadPHYRegister>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00b      	beq.n	8001554 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fafa 	bl	8001b3c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001550:	2301      	movs	r3, #1
 8001552:	e056      	b.n	8001602 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	e002      	b.n	800156e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	e037      	b.n	80015f0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	e032      	b.n	80015f0 <HAL_ETH_Init+0x31c>
 800158a:	bf00      	nop
 800158c:	03938700 	.word	0x03938700
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800
 8001598:	01312cff 	.word	0x01312cff
 800159c:	02160ebf 	.word	0x02160ebf
 80015a0:	039386ff 	.word	0x039386ff
 80015a4:	05f5e0ff 	.word	0x05f5e0ff
 80015a8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015bc:	4313      	orrs	r3, r2
 80015be:	b29b      	uxth	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f8fa 	bl	80017be <HAL_ETH_WritePHYRegister>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00b      	beq.n	80015e8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015d4:	6939      	ldr	r1, [r7, #16]
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fab0 	bl	8001b3c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e00c      	b.n	8001602 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015e8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80015ec:	f7ff fd6e 	bl	80010cc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80015f0:	6939      	ldr	r1, [r7, #16]
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 faa2 	bl	8001b3c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop

0800160c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f241 0314 	movw	r3, #4116	; 0x1014
 800161c:	4413      	add	r3, r2
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001624:	2b40      	cmp	r3, #64	; 0x40
 8001626:	d112      	bne.n	800164e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f00d fc77 	bl	800ef1c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	f241 0314 	movw	r3, #4116	; 0x1014
 8001636:	4413      	add	r3, r2
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800164c:	e01b      	b.n	8001686 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f241 0314 	movw	r3, #4116	; 0x1014
 8001656:	4413      	add	r3, r2
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b01      	cmp	r3, #1
 8001660:	d111      	bne.n	8001686 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f00d fc88 	bl	800ef78 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001670:	4413      	add	r3, r2
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f241 0314 	movw	r3, #4116	; 0x1014
 800168e:	4413      	add	r3, r2
 8001690:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001694:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	f241 0314 	movw	r3, #4116	; 0x1014
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016aa:	d112      	bne.n	80016d2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f814 	bl	80016da <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	f241 0314 	movw	r3, #4116	; 0x1014
 80016ba:	4413      	add	r3, r2
 80016bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016c0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	460b      	mov	r3, r1
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b82      	cmp	r3, #130	; 0x82
 800170e:	d101      	bne.n	8001714 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001710:	2302      	movs	r3, #2
 8001712:	e050      	b.n	80017b6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2282      	movs	r2, #130	; 0x82
 8001718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 031c 	and.w	r3, r3, #28
 800172a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8a1b      	ldrh	r3, [r3, #16]
 8001730:	02db      	lsls	r3, r3, #11
 8001732:	b29b      	uxth	r3, r3
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800173a:	897b      	ldrh	r3, [r7, #10]
 800173c:	019b      	lsls	r3, r3, #6
 800173e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f023 0302 	bic.w	r3, r3, #2
 800174e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001760:	f7ff fca8 	bl	80010b4 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001766:	e015      	b.n	8001794 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001768:	f7ff fca4 	bl	80010b4 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001776:	d309      	bcc.n	800178c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e014      	b.n	80017b6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1e4      	bne.n	8001768 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	460b      	mov	r3, r1
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b42      	cmp	r3, #66	; 0x42
 80017de:	d101      	bne.n	80017e4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80017e0:	2302      	movs	r3, #2
 80017e2:	e04e      	b.n	8001882 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2242      	movs	r2, #66	; 0x42
 80017e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f003 031c 	and.w	r3, r3, #28
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8a1b      	ldrh	r3, [r3, #16]
 8001800:	02db      	lsls	r3, r3, #11
 8001802:	b29b      	uxth	r3, r3
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800180a:	897b      	ldrh	r3, [r7, #10]
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	b29a      	uxth	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800183a:	f7ff fc3b 	bl	80010b4 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001840:	e015      	b.n	800186e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001842:	f7ff fc37 	bl	80010b4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d309      	bcc.n	8001866 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e00d      	b.n	8001882 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1e4      	bne.n	8001842 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ETH_Start+0x16>
 800189c:	2302      	movs	r3, #2
 800189e:	e01f      	b.n	80018e0 <HAL_ETH_Start+0x56>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fb45 	bl	8001f40 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fb7c 	bl	8001fb4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fc13 	bl	80020e8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fbb0 	bl	8002028 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fbdd 	bl	8002088 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_ETH_Stop+0x16>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e01f      	b.n	800193e <HAL_ETH_Stop+0x56>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fba2 	bl	8002058 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fbcf 	bl	80020b8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fb67 	bl	8001fee <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fbe1 	bl	80020e8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fb27 	bl	8001f7a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_ETH_ConfigMAC+0x1c>
 8001960:	2302      	movs	r3, #2
 8001962:	e0e4      	b.n	8001b2e <HAL_ETH_ConfigMAC+0x1e6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80b1 	beq.w	8001ade <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4b6c      	ldr	r3, [pc, #432]	; (8001b38 <HAL_ETH_ConfigMAC+0x1f0>)
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001994:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800199a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80019a0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80019a6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80019ac:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80019b2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80019b8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80019be:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80019c4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80019ca:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80019d0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80019d6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fb6c 	bl	80010cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a04:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001a0a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001a10:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001a16:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001a1c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001a22:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001a2e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a30:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff fb46 	bl	80010cc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a50:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a5a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001a78:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001a7e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001a84:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001a8a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001a90:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff fb0f 	bl	80010cc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7ff fafc 	bl	80010cc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	61da      	str	r2, [r3, #28]
 8001adc:	e01e      	b.n	8001b1c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001aec:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7ff fadc 	bl	80010cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	ff20810f 	.word	0xff20810f

08001b3c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0b0      	sub	sp, #192	; 0xc0
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b58:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b60:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b86:	663b      	str	r3, [r7, #96]	; 0x60
 8001b88:	e001      	b.n	8001b8e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b92:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ba8:	2340      	movs	r3, #64	; 0x40
 8001baa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001c10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c14:	4bab      	ldr	r3, [pc, #684]	; (8001ec4 <ETH_MACDMAConfig+0x388>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c20:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001c24:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001c28:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001c2e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001c32:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001c36:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001c3c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001c40:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001c44:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001c46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001c48:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001c4c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001c50:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001c52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c56:	4313      	orrs	r3, r2
 8001c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c64:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff fa2b 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c7e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c84:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c88:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c8e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c94:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c9a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001ca0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ca4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001cac:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001cae:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fa06 	bl	80010cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cc8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001cd2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001cdc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ce8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cec:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cfa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001cfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d00:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001d06:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001d0c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001d12:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001d14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001d18:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001d1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d2c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff f9c7 	bl	80010cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d46:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d48:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001d4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7ff f9b2 	bl	80010cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d70:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d7a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d84:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d96:	2304      	movs	r3, #4
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001da6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001dc6:	4413      	add	r3, r2
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001dce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <ETH_MACDMAConfig+0x38c>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dda:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dde:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001de0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001de2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001de4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001de6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001de8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001dea:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001dec:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001dee:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001df0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001df2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001df6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001dfa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e0e:	4413      	add	r3, r2
 8001e10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e14:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e1e:	4413      	add	r3, r2
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff f950 	bl	80010cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e34:	4413      	add	r3, r2
 8001e36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e3a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e40:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001e44:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e48:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001e4c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e50:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001e52:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001e56:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e64:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7ff f929 	bl	80010cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e86:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10d      	bne.n	8001eac <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	f241 031c 	movw	r3, #4124	; 0x101c
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6811      	ldr	r1, [r2, #0]
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <ETH_MACDMAConfig+0x390>)
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	f241 031c 	movw	r3, #4124	; 0x101c
 8001ea8:	440b      	add	r3, r1
 8001eaa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f80b 	bl	8001ed0 <ETH_MACAddressConfig>
}
 8001eba:	bf00      	nop
 8001ebc:	37c0      	adds	r7, #192	; 0xc0
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	ff20810f 	.word	0xff20810f
 8001ec8:	f8de3f23 	.word	0xf8de3f23
 8001ecc:	00010040 	.word	0x00010040

08001ed0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3305      	adds	r3, #5
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	3204      	adds	r2, #4
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <ETH_MACAddressConfig+0x68>)
 8001ef2:	4413      	add	r3, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3303      	adds	r3, #3
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	061a      	lsls	r2, r3, #24
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3302      	adds	r3, #2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	4313      	orrs	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <ETH_MACAddressConfig+0x6c>)
 8001f22:	4413      	add	r3, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	6013      	str	r3, [r2, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40028040 	.word	0x40028040
 8001f3c:	40028044 	.word	0x40028044

08001f40 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0208 	orr.w	r2, r2, #8
 8001f5a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7ff f8b1 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	601a      	str	r2, [r3, #0]
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff f894 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0204 	orr.w	r2, r2, #4
 8001fce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7ff f877 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0204 	bic.w	r2, r2, #4
 8002008:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002012:	2001      	movs	r0, #1
 8002014:	f7ff f85a 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	f241 0318 	movw	r3, #4120	; 0x1018
 8002038:	4413      	add	r3, r2
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6811      	ldr	r1, [r2, #0]
 8002040:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002044:	f241 0318 	movw	r3, #4120	; 0x1018
 8002048:	440b      	add	r3, r1
 800204a:	601a      	str	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f241 0318 	movw	r3, #4120	; 0x1018
 8002068:	4413      	add	r3, r2
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6811      	ldr	r1, [r2, #0]
 8002070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002074:	f241 0318 	movw	r3, #4120	; 0x1018
 8002078:	440b      	add	r3, r1
 800207a:	601a      	str	r2, [r3, #0]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	f241 0318 	movw	r3, #4120	; 0x1018
 8002098:	4413      	add	r3, r2
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6811      	ldr	r1, [r2, #0]
 80020a0:	f043 0202 	orr.w	r2, r3, #2
 80020a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80020a8:	440b      	add	r3, r1
 80020aa:	601a      	str	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80020c8:	4413      	add	r3, r2
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6811      	ldr	r1, [r2, #0]
 80020d0:	f023 0202 	bic.w	r2, r3, #2
 80020d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80020d8:	440b      	add	r3, r1
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80020fc:	4413      	add	r3, r2
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6811      	ldr	r1, [r2, #0]
 8002104:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002108:	f241 0318 	movw	r3, #4120	; 0x1018
 800210c:	440b      	add	r3, r1
 800210e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	f241 0318 	movw	r3, #4120	; 0x1018
 8002118:	4413      	add	r3, r2
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800211e:	2001      	movs	r0, #1
 8002120:	f7fe ffd4 	bl	80010cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	f241 0318 	movw	r3, #4120	; 0x1018
 800212e:	440b      	add	r3, r1
 8002130:	601a      	str	r2, [r3, #0]
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e175      	b.n	8002448 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8164 	bne.w	8002442 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d00b      	beq.n	800219a <HAL_GPIO_Init+0x5e>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800218e:	2b11      	cmp	r3, #17
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b12      	cmp	r3, #18
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x100>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b12      	cmp	r3, #18
 800223a:	d123      	bne.n	8002284 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	69b9      	ldr	r1, [r7, #24]
 8002280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80be 	beq.w	8002442 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b65      	ldr	r3, [pc, #404]	; (800245c <HAL_GPIO_Init+0x320>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a64      	ldr	r2, [pc, #400]	; (800245c <HAL_GPIO_Init+0x320>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b62      	ldr	r3, [pc, #392]	; (800245c <HAL_GPIO_Init+0x320>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022de:	4a60      	ldr	r2, [pc, #384]	; (8002460 <HAL_GPIO_Init+0x324>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a57      	ldr	r2, [pc, #348]	; (8002464 <HAL_GPIO_Init+0x328>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d037      	beq.n	800237a <HAL_GPIO_Init+0x23e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a56      	ldr	r2, [pc, #344]	; (8002468 <HAL_GPIO_Init+0x32c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d031      	beq.n	8002376 <HAL_GPIO_Init+0x23a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a55      	ldr	r2, [pc, #340]	; (800246c <HAL_GPIO_Init+0x330>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d02b      	beq.n	8002372 <HAL_GPIO_Init+0x236>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a54      	ldr	r2, [pc, #336]	; (8002470 <HAL_GPIO_Init+0x334>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d025      	beq.n	800236e <HAL_GPIO_Init+0x232>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a53      	ldr	r2, [pc, #332]	; (8002474 <HAL_GPIO_Init+0x338>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01f      	beq.n	800236a <HAL_GPIO_Init+0x22e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_GPIO_Init+0x33c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d019      	beq.n	8002366 <HAL_GPIO_Init+0x22a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a51      	ldr	r2, [pc, #324]	; (800247c <HAL_GPIO_Init+0x340>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_GPIO_Init+0x226>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a50      	ldr	r2, [pc, #320]	; (8002480 <HAL_GPIO_Init+0x344>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00d      	beq.n	800235e <HAL_GPIO_Init+0x222>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4f      	ldr	r2, [pc, #316]	; (8002484 <HAL_GPIO_Init+0x348>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <HAL_GPIO_Init+0x21e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4e      	ldr	r2, [pc, #312]	; (8002488 <HAL_GPIO_Init+0x34c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_GPIO_Init+0x21a>
 8002352:	2309      	movs	r3, #9
 8002354:	e012      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002356:	230a      	movs	r3, #10
 8002358:	e010      	b.n	800237c <HAL_GPIO_Init+0x240>
 800235a:	2308      	movs	r3, #8
 800235c:	e00e      	b.n	800237c <HAL_GPIO_Init+0x240>
 800235e:	2307      	movs	r3, #7
 8002360:	e00c      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002362:	2306      	movs	r3, #6
 8002364:	e00a      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002366:	2305      	movs	r3, #5
 8002368:	e008      	b.n	800237c <HAL_GPIO_Init+0x240>
 800236a:	2304      	movs	r3, #4
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x240>
 800236e:	2303      	movs	r3, #3
 8002370:	e004      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002372:	2302      	movs	r3, #2
 8002374:	e002      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x240>
 800237a:	2300      	movs	r3, #0
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f002 0203 	and.w	r2, r2, #3
 8002382:	0092      	lsls	r2, r2, #2
 8002384:	4093      	lsls	r3, r2
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800238c:	4934      	ldr	r1, [pc, #208]	; (8002460 <HAL_GPIO_Init+0x324>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <HAL_GPIO_Init+0x350>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023be:	4a33      	ldr	r2, [pc, #204]	; (800248c <HAL_GPIO_Init+0x350>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_GPIO_Init+0x350>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e8:	4a28      	ldr	r2, [pc, #160]	; (800248c <HAL_GPIO_Init+0x350>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_GPIO_Init+0x350>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002412:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_GPIO_Init+0x350>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_GPIO_Init+0x350>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_GPIO_Init+0x350>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3301      	adds	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	f67f ae86 	bls.w	800215c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002450:	bf00      	nop
 8002452:	3724      	adds	r7, #36	; 0x24
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40023800 	.word	0x40023800
 8002460:	40013800 	.word	0x40013800
 8002464:	40020000 	.word	0x40020000
 8002468:	40020400 	.word	0x40020400
 800246c:	40020800 	.word	0x40020800
 8002470:	40020c00 	.word	0x40020c00
 8002474:	40021000 	.word	0x40021000
 8002478:	40021400 	.word	0x40021400
 800247c:	40021800 	.word	0x40021800
 8002480:	40021c00 	.word	0x40021c00
 8002484:	40022000 	.word	0x40022000
 8002488:	40022400 	.word	0x40022400
 800248c:	40013c00 	.word	0x40013c00

08002490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	887b      	ldrh	r3, [r7, #2]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
 80024ac:	e001      	b.n	80024b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024dc:	e003      	b.n	80024e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	041a      	lsls	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002512:	e002      	b.n	800251a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002514:	887a      	ldrh	r2, [r7, #2]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002556:	f7fe fdad 	bl	80010b4 <HAL_GetTick>
 800255a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800255c:	e009      	b.n	8002572 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800255e:	f7fe fda9 	bl	80010b4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800256c:	d901      	bls.n	8002572 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e022      	b.n	80025b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257e:	d1ee      	bne.n	800255e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800258c:	f7fe fd92 	bl	80010b4 <HAL_GetTick>
 8002590:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002592:	e009      	b.n	80025a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002594:	f7fe fd8e 	bl	80010b4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025a2:	d901      	bls.n	80025a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e007      	b.n	80025b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025b4:	d1ee      	bne.n	8002594 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40007000 	.word	0x40007000

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e29b      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ec:	4b96      	ldr	r3, [pc, #600]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d00c      	beq.n	8002612 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f8:	4b93      	ldr	r3, [pc, #588]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d112      	bne.n	800262a <HAL_RCC_OscConfig+0x62>
 8002604:	4b90      	ldr	r3, [pc, #576]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002610:	d10b      	bne.n	800262a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	4b8d      	ldr	r3, [pc, #564]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d06c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x130>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d168      	bne.n	80026f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e275      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x7a>
 8002634:	4b84      	ldr	r3, [pc, #528]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a83      	ldr	r2, [pc, #524]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e02e      	b.n	80026a0 <HAL_RCC_OscConfig+0xd8>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x9c>
 800264a:	4b7f      	ldr	r3, [pc, #508]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a7e      	ldr	r2, [pc, #504]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b7c      	ldr	r3, [pc, #496]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7b      	ldr	r2, [pc, #492]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800265c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e01d      	b.n	80026a0 <HAL_RCC_OscConfig+0xd8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0xc0>
 800266e:	4b76      	ldr	r3, [pc, #472]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a75      	ldr	r2, [pc, #468]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b73      	ldr	r3, [pc, #460]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a72      	ldr	r2, [pc, #456]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xd8>
 8002688:	4b6f      	ldr	r3, [pc, #444]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6e      	ldr	r2, [pc, #440]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b6c      	ldr	r3, [pc, #432]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a6b      	ldr	r2, [pc, #428]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fd04 	bl	80010b4 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7fe fd00 	bl	80010b4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e229      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b61      	ldr	r3, [pc, #388]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xe8>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fcf0 	bl	80010b4 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fcec 	bl	80010b4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e215      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b57      	ldr	r3, [pc, #348]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x110>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d069      	beq.n	80027da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002706:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002712:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b08      	cmp	r3, #8
 800271c:	d11c      	bne.n	8002758 <HAL_RCC_OscConfig+0x190>
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x17a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e1e9      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	493d      	ldr	r1, [pc, #244]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	e040      	b.n	80027da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d023      	beq.n	80027a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002760:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a38      	ldr	r2, [pc, #224]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fca2 	bl	80010b4 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe fc9e 	bl	80010b4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1c7      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4929      	ldr	r1, [pc, #164]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
 80027a6:	e018      	b.n	80027da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a26      	ldr	r2, [pc, #152]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fc7e 	bl	80010b4 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027bc:	f7fe fc7a 	bl	80010b4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1a3      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d038      	beq.n	8002858 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d019      	beq.n	8002822 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	4a15      	ldr	r2, [pc, #84]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe fc5b 	bl	80010b4 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002802:	f7fe fc57 	bl	80010b4 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e180      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x23a>
 8002820:	e01a      	b.n	8002858 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	4a08      	ldr	r2, [pc, #32]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7fe fc41 	bl	80010b4 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe fc3d 	bl	80010b4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d903      	bls.n	800284c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e166      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
 8002848:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	4b92      	ldr	r3, [pc, #584]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ee      	bne.n	8002836 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a4 	beq.w	80029ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b8c      	ldr	r3, [pc, #560]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10d      	bne.n	800288e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4b89      	ldr	r3, [pc, #548]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a88      	ldr	r2, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b86      	ldr	r3, [pc, #536]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288e:	4b83      	ldr	r3, [pc, #524]	; (8002a9c <HAL_RCC_OscConfig+0x4d4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800289a:	4b80      	ldr	r3, [pc, #512]	; (8002a9c <HAL_RCC_OscConfig+0x4d4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7f      	ldr	r2, [pc, #508]	; (8002a9c <HAL_RCC_OscConfig+0x4d4>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7fe fc05 	bl	80010b4 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe fc01 	bl	80010b4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	; 0x64
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e12a      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c0:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x4d4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x31a>
 80028d4:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a6f      	ldr	r2, [pc, #444]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	e02d      	b.n	800293e <HAL_RCC_OscConfig+0x376>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x33c>
 80028ea:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a6a      	ldr	r2, [pc, #424]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a67      	ldr	r2, [pc, #412]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	e01c      	b.n	800293e <HAL_RCC_OscConfig+0x376>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x35e>
 800290c:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a61      	ldr	r2, [pc, #388]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0x376>
 8002926:	4b5c      	ldr	r3, [pc, #368]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a5b      	ldr	r2, [pc, #364]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
 8002932:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d015      	beq.n	8002972 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe fbb5 	bl	80010b4 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fbb1 	bl	80010b4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0d8      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ee      	beq.n	800294e <HAL_RCC_OscConfig+0x386>
 8002970:	e014      	b.n	800299c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7fe fb9f 	bl	80010b4 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe fb9b 	bl	80010b4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e0c2      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ee      	bne.n	800297a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a3c      	ldr	r2, [pc, #240]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80ae 	beq.w	8002b14 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b8:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d06d      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d14b      	bne.n	8002a64 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80029d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fb6c 	bl	80010b4 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fb68 	bl	80010b4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e091      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	071b      	lsls	r3, r3, #28
 8002a2a:	491b      	ldr	r1, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fb3a 	bl	80010b4 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe fb36 	bl	80010b4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e05f      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x47c>
 8002a62:	e057      	b.n	8002b14 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fb20 	bl	80010b4 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fb1c 	bl	80010b4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e045      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4b0>
 8002a96:	e03d      	b.n	8002b14 <HAL_RCC_OscConfig+0x54c>
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002aa0:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <HAL_RCC_OscConfig+0x558>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d030      	beq.n	8002b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d129      	bne.n	8002b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d122      	bne.n	8002b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ad6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d119      	bne.n	8002b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d10f      	bne.n	8002b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0d0      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d910      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 020f 	bic.w	r2, r3, #15
 8002b52:	4965      	ldr	r1, [pc, #404]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0b8      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b9c:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b50      	ldr	r3, [pc, #320]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	494d      	ldr	r1, [pc, #308]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d040      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d115      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be6:	4b41      	ldr	r3, [pc, #260]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e073      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06b      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f023 0203 	bic.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4936      	ldr	r1, [pc, #216]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c18:	f7fe fa4c 	bl	80010b4 <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f7fe fa48 	bl	80010b4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e053      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 020c 	and.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1eb      	bne.n	8002c20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d210      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 020f 	bic.w	r2, r3, #15
 8002c5e:	4922      	ldr	r1, [pc, #136]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e032      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4916      	ldr	r1, [pc, #88]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	490e      	ldr	r1, [pc, #56]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb6:	f000 f821 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002cba:	4601      	mov	r1, r0
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8002cc8:	5cd3      	ldrb	r3, [r2, r3]
 8002cca:	fa21 f303 	lsr.w	r3, r1, r3
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1d4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe f842 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	080113d8 	.word	0x080113d8
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d12:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d007      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x32>
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d008      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0x38>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 808d 	bne.w	8002e42 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002d2a:	60bb      	str	r3, [r7, #8]
      break;
 8002d2c:	e08c      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d2e:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d30:	60bb      	str	r3, [r7, #8]
      break;
 8002d32:	e089      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d34:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d3e:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d023      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4a:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	f04f 0400 	mov.w	r4, #0
 8002d54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	ea03 0501 	and.w	r5, r3, r1
 8002d60:	ea04 0602 	and.w	r6, r4, r2
 8002d64:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d66:	fb02 f106 	mul.w	r1, r2, r6
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	fb02 f205 	mul.w	r2, r2, r5
 8002d70:	440a      	add	r2, r1
 8002d72:	493a      	ldr	r1, [pc, #232]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d74:	fba5 0101 	umull	r0, r1, r5, r1
 8002d78:	1853      	adds	r3, r2, r1
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f04f 0400 	mov.w	r4, #0
 8002d82:	461a      	mov	r2, r3
 8002d84:	4623      	mov	r3, r4
 8002d86:	f7fd fac3 	bl	8000310 <__aeabi_uldivmod>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e049      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	f04f 0400 	mov.w	r4, #0
 8002d9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	ea03 0501 	and.w	r5, r3, r1
 8002da8:	ea04 0602 	and.w	r6, r4, r2
 8002dac:	4629      	mov	r1, r5
 8002dae:	4632      	mov	r2, r6
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	f04f 0400 	mov.w	r4, #0
 8002db8:	0154      	lsls	r4, r2, #5
 8002dba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dbe:	014b      	lsls	r3, r1, #5
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	1b49      	subs	r1, r1, r5
 8002dc6:	eb62 0206 	sbc.w	r2, r2, r6
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	f04f 0400 	mov.w	r4, #0
 8002dd2:	0194      	lsls	r4, r2, #6
 8002dd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dd8:	018b      	lsls	r3, r1, #6
 8002dda:	1a5b      	subs	r3, r3, r1
 8002ddc:	eb64 0402 	sbc.w	r4, r4, r2
 8002de0:	f04f 0100 	mov.w	r1, #0
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	00e2      	lsls	r2, r4, #3
 8002dea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dee:	00d9      	lsls	r1, r3, #3
 8002df0:	460b      	mov	r3, r1
 8002df2:	4614      	mov	r4, r2
 8002df4:	195b      	adds	r3, r3, r5
 8002df6:	eb44 0406 	adc.w	r4, r4, r6
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	02a2      	lsls	r2, r4, #10
 8002e04:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e08:	0299      	lsls	r1, r3, #10
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	4621      	mov	r1, r4
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f04f 0400 	mov.w	r4, #0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4623      	mov	r3, r4
 8002e1c:	f7fd fa78 	bl	8000310 <__aeabi_uldivmod>
 8002e20:	4603      	mov	r3, r0
 8002e22:	460c      	mov	r4, r1
 8002e24:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	3301      	adds	r3, #1
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	60bb      	str	r3, [r7, #8]
      break;
 8002e40:	e002      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e44:	60bb      	str	r3, [r7, #8]
      break;
 8002e46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e48:	68bb      	ldr	r3, [r7, #8]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	017d7840 	.word	0x017d7840

08002e60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e7c:	f7ff fff0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e80:	4601      	mov	r1, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0a9b      	lsrs	r3, r3, #10
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8e:	5cd3      	ldrb	r3, [r2, r3]
 8002e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	080113e8 	.word	0x080113e8

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea4:	f7ff ffdc 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4601      	mov	r1, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0b5b      	lsrs	r3, r3, #13
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4a03      	ldr	r2, [pc, #12]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	080113e8 	.word	0x080113e8

08002ec8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ed8:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_RCC_GetClockConfig+0x5c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	08db      	lsrs	r3, r3, #3
 8002f02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <HAL_RCC_GetClockConfig+0x60>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 020f 	and.w	r2, r3, #15
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	601a      	str	r2, [r3, #0]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40023c00 	.word	0x40023c00

08002f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d012      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f54:	4b69      	ldr	r3, [pc, #420]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4a68      	ldr	r2, [pc, #416]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f5e:	6093      	str	r3, [r2, #8]
 8002f60:	4b66      	ldr	r3, [pc, #408]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	4964      	ldr	r1, [pc, #400]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d017      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f86:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	4959      	ldr	r1, [pc, #356]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fa4:	d101      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d017      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fc2:	4b4e      	ldr	r3, [pc, #312]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	494a      	ldr	r1, [pc, #296]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 808b 	beq.w	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003010:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	4a39      	ldr	r2, [pc, #228]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	6413      	str	r3, [r2, #64]	; 0x40
 800301c:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003028:	4b35      	ldr	r3, [pc, #212]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a34      	ldr	r2, [pc, #208]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003034:	f7fe f83e 	bl	80010b4 <HAL_GetTick>
 8003038:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7fe f83a 	bl	80010b4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e38d      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800304e:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800305a:	4b28      	ldr	r3, [pc, #160]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003062:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d035      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	429a      	cmp	r2, r3
 8003076:	d02e      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003080:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a1a      	ldr	r2, [pc, #104]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d114      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe f802 	bl	80010b4 <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	e00a      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fd fffe 	bl	80010b4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e34f      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0ee      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e2:	d111      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030f2:	400b      	ands	r3, r1
 80030f4:	4901      	ldr	r1, [pc, #4]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
 80030fa:	e00b      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000
 8003104:	0ffffcff 	.word	0x0ffffcff
 8003108:	4bb3      	ldr	r3, [pc, #716]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4ab2      	ldr	r2, [pc, #712]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800310e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003112:	6093      	str	r3, [r2, #8]
 8003114:	4bb0      	ldr	r3, [pc, #704]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	49ad      	ldr	r1, [pc, #692]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003122:	4313      	orrs	r3, r2
 8003124:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d010      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003132:	4ba9      	ldr	r3, [pc, #676]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003138:	4aa7      	ldr	r2, [pc, #668]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003142:	4ba5      	ldr	r3, [pc, #660]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003144:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	49a2      	ldr	r1, [pc, #648]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003160:	4b9d      	ldr	r3, [pc, #628]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800316e:	499a      	ldr	r1, [pc, #616]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003182:	4b95      	ldr	r3, [pc, #596]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003190:	4991      	ldr	r1, [pc, #580]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031a4:	4b8c      	ldr	r3, [pc, #560]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b2:	4989      	ldr	r1, [pc, #548]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031c6:	4b84      	ldr	r3, [pc, #528]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4980      	ldr	r1, [pc, #512]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e8:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f023 0203 	bic.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	4978      	ldr	r1, [pc, #480]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800320a:	4b73      	ldr	r3, [pc, #460]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	f023 020c 	bic.w	r2, r3, #12
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003218:	496f      	ldr	r1, [pc, #444]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	4967      	ldr	r1, [pc, #412]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800324e:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325c:	495e      	ldr	r1, [pc, #376]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003270:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	4956      	ldr	r1, [pc, #344]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003292:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	494d      	ldr	r1, [pc, #308]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80032b4:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	4945      	ldr	r1, [pc, #276]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e4:	493c      	ldr	r1, [pc, #240]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032f8:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003306:	4934      	ldr	r1, [pc, #208]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d011      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003328:	492b      	ldr	r1, [pc, #172]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003338:	d101      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003368:	491b      	ldr	r1, [pc, #108]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00b      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800338c:	4912      	ldr	r1, [pc, #72]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00b      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b0:	4909      	ldr	r1, [pc, #36]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00f      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	e002      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	4985      	ldr	r1, [pc, #532]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033f0:	4b80      	ldr	r3, [pc, #512]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003400:	497c      	ldr	r1, [pc, #496]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d005      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003416:	f040 80d6 	bne.w	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003420:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003426:	f7fd fe45 	bl	80010b4 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800342e:	f7fd fe41 	bl	80010b4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	; 0x64
 800343a:	d901      	bls.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e194      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003440:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d021      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345c:	2b00      	cmp	r3, #0
 800345e:	d11d      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003460:	4b64      	ldr	r3, [pc, #400]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800346e:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003474:	0e1b      	lsrs	r3, r3, #24
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	019a      	lsls	r2, r3, #6
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	431a      	orrs	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	061b      	lsls	r3, r3, #24
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	071b      	lsls	r3, r3, #28
 8003494:	4957      	ldr	r1, [pc, #348]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d02e      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c6:	d129      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034c8:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034dc:	0f1b      	lsrs	r3, r3, #28
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	019a      	lsls	r2, r3, #6
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	431a      	orrs	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	071b      	lsls	r3, r3, #28
 80034fc:	493d      	ldr	r1, [pc, #244]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003504:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800350a:	f023 021f 	bic.w	r2, r3, #31
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	3b01      	subs	r3, #1
 8003514:	4937      	ldr	r1, [pc, #220]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800352e:	0e1b      	lsrs	r3, r3, #24
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003536:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353c:	0f1b      	lsrs	r3, r3, #28
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	019a      	lsls	r2, r3, #6
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	431a      	orrs	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	431a      	orrs	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	071b      	lsls	r3, r3, #28
 800355c:	4925      	ldr	r1, [pc, #148]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d011      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	019a      	lsls	r2, r3, #6
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	071b      	lsls	r3, r3, #28
 800358c:	4919      	ldr	r1, [pc, #100]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800359a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800359e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fd fd88 	bl	80010b4 <HAL_GetTick>
 80035a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035a8:	f7fd fd84 	bl	80010b4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0d7      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035ba:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 80cd 	bne.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035da:	f7fd fd6b 	bl	80010b4 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035e2:	f7fd fd67 	bl	80010b4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b64      	cmp	r3, #100	; 0x64
 80035ee:	d903      	bls.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0ba      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80035f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035f8:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003604:	d0ed      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02e      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d12a      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	0f1b      	lsrs	r3, r3, #28
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	019a      	lsls	r2, r3, #6
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	061b      	lsls	r3, r3, #24
 800365c:	431a      	orrs	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	071b      	lsls	r3, r3, #28
 8003662:	4944      	ldr	r1, [pc, #272]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800366a:	4b42      	ldr	r3, [pc, #264]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003670:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	493d      	ldr	r1, [pc, #244]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d022      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003698:	d11d      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	0e1b      	lsrs	r3, r3, #24
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	0f1b      	lsrs	r3, r3, #28
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	019a      	lsls	r2, r3, #6
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	041b      	lsls	r3, r3, #16
 80036c2:	431a      	orrs	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	4929      	ldr	r1, [pc, #164]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d028      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	0e1b      	lsrs	r3, r3, #24
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036f0:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	019a      	lsls	r2, r3, #6
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	431a      	orrs	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	071b      	lsls	r3, r3, #28
 8003716:	4917      	ldr	r1, [pc, #92]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	4911      	ldr	r1, [pc, #68]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800373a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003740:	f7fd fcb8 	bl	80010b4 <HAL_GetTick>
 8003744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003748:	f7fd fcb4 	bl	80010b4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e007      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003766:	d1ef      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e01c      	b.n	80037c4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	795b      	ldrb	r3, [r3, #5]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fa96 	bl	8000ccc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0204 	orr.w	r2, r2, #4
 80037b4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	791b      	ldrb	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e03d      	b.n	8003862 <HAL_RNG_GenerateRandomNumber+0x96>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	795b      	ldrb	r3, [r3, #5]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d12c      	bne.n	8003850 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037fc:	f7fd fc5a 	bl	80010b4 <HAL_GetTick>
 8003800:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003802:	e011      	b.n	8003828 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003804:	f7fd fc56 	bl	80010b4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d90a      	bls.n	8003828 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e01c      	b.n	8003862 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d1e6      	bne.n	8003804 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	715a      	strb	r2, [r3, #5]
 800384e:	e004      	b.n	800385a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2204      	movs	r2, #4
 8003854:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	711a      	strb	r2, [r3, #4]

  return status;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b20      	cmp	r3, #32
 8003882:	d105      	bne.n	8003890 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2210      	movs	r2, #16
 8003888:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800388a:	2301      	movs	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e00b      	b.n	80038a8 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b40      	cmp	r3, #64	; 0x40
 800389c:	d104      	bne.n	80038a8 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2208      	movs	r2, #8
 80038a2:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80038a4:	2301      	movs	r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10a      	bne.n	80038c4 <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f839 	bl	800392c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0260 	mvn.w	r2, #96	; 0x60
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d11d      	bne.n	800390e <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0208 	bic.w	r2, r2, #8
 80038e0:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	795b      	ldrb	r3, [r3, #5]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d00b      	beq.n	800390e <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f804 	bl	8003916 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e01d      	b.n	800398e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f815 	bl	8003996 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 f986 	bl	8003c90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_TIM_Base_Start_IT+0x50>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d00b      	beq.n	80039ee <HAL_TIM_Base_Start_IT+0x42>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d007      	beq.n	80039ee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	00010007 	.word	0x00010007

08003a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0202 	mvn.w	r2, #2
 8003a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f905 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8f7 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f908 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0204 	mvn.w	r2, #4
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8db 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8cd 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8de 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0208 	mvn.w	r2, #8
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8b1 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8a3 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8b4 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0210 	mvn.w	r2, #16
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f887 	bl	8003c52 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f879 	bl	8003c3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f88a 	bl	8003c66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10e      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0201 	mvn.w	r2, #1
 8003b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd f87a 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f91a 	bl	8003de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbe:	d10e      	bne.n	8003bde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d107      	bne.n	8003bde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f90d 	bl	8003df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d10e      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d107      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f838 	bl	8003c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d10e      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d107      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0220 	mvn.w	r2, #32
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8cd 	bl	8003dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a40      	ldr	r2, [pc, #256]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cae:	d00f      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a3d      	ldr	r2, [pc, #244]	; (8003da8 <TIM_Base_SetConfig+0x118>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a3c      	ldr	r2, [pc, #240]	; (8003dac <TIM_Base_SetConfig+0x11c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <TIM_Base_SetConfig+0x120>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a3a      	ldr	r2, [pc, #232]	; (8003db4 <TIM_Base_SetConfig+0x124>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d108      	bne.n	8003ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a2f      	ldr	r2, [pc, #188]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d02b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d027      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	; (8003da8 <TIM_Base_SetConfig+0x118>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d023      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2b      	ldr	r2, [pc, #172]	; (8003dac <TIM_Base_SetConfig+0x11c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01f      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2a      	ldr	r2, [pc, #168]	; (8003db0 <TIM_Base_SetConfig+0x120>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a29      	ldr	r2, [pc, #164]	; (8003db4 <TIM_Base_SetConfig+0x124>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d017      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a28      	ldr	r2, [pc, #160]	; (8003db8 <TIM_Base_SetConfig+0x128>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <TIM_Base_SetConfig+0x12c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00f      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <TIM_Base_SetConfig+0x130>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <TIM_Base_SetConfig+0x134>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d007      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a24      	ldr	r2, [pc, #144]	; (8003dc8 <TIM_Base_SetConfig+0x138>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a23      	ldr	r2, [pc, #140]	; (8003dcc <TIM_Base_SetConfig+0x13c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0xf8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <TIM_Base_SetConfig+0x124>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	615a      	str	r2, [r3, #20]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	40001800 	.word	0x40001800
 8003dc8:	40001c00 	.word	0x40001c00
 8003dcc:	40002000 	.word	0x40002000

08003dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e040      	b.n	8003ea0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd f894 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f82c 	bl	8003ea8 <UART_SetConfig>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e022      	b.n	8003ea0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 faca 	bl	80043fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fb51 	bl	8004540 <UART_CheckIdleState>
 8003e9e:	4603      	mov	r3, r0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4bb1      	ldr	r3, [pc, #708]	; (800419c <UART_SetConfig+0x2f4>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	6939      	ldr	r1, [r7, #16]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a9f      	ldr	r2, [pc, #636]	; (80041a0 <UART_SetConfig+0x2f8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d121      	bne.n	8003f6c <UART_SetConfig+0xc4>
 8003f28:	4b9e      	ldr	r3, [pc, #632]	; (80041a4 <UART_SetConfig+0x2fc>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d816      	bhi.n	8003f64 <UART_SetConfig+0xbc>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <UART_SetConfig+0x94>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f59 	.word	0x08003f59
 8003f44:	08003f53 	.word	0x08003f53
 8003f48:	08003f5f 	.word	0x08003f5f
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e151      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f52:	2302      	movs	r3, #2
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e14e      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e14b      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f5e:	2308      	movs	r3, #8
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e148      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f64:	2310      	movs	r3, #16
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	bf00      	nop
 8003f6a:	e144      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a8d      	ldr	r2, [pc, #564]	; (80041a8 <UART_SetConfig+0x300>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d134      	bne.n	8003fe0 <UART_SetConfig+0x138>
 8003f76:	4b8b      	ldr	r3, [pc, #556]	; (80041a4 <UART_SetConfig+0x2fc>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b0c      	cmp	r3, #12
 8003f82:	d829      	bhi.n	8003fd8 <UART_SetConfig+0x130>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0xe4>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fc1 	.word	0x08003fc1
 8003f90:	08003fd9 	.word	0x08003fd9
 8003f94:	08003fd9 	.word	0x08003fd9
 8003f98:	08003fd9 	.word	0x08003fd9
 8003f9c:	08003fcd 	.word	0x08003fcd
 8003fa0:	08003fd9 	.word	0x08003fd9
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08003fd9 	.word	0x08003fd9
 8003fac:	08003fc7 	.word	0x08003fc7
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fd9 	.word	0x08003fd9
 8003fbc:	08003fd3 	.word	0x08003fd3
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e117      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e114      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e111      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e10e      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	bf00      	nop
 8003fde:	e10a      	b.n	80041f6 <UART_SetConfig+0x34e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a71      	ldr	r2, [pc, #452]	; (80041ac <UART_SetConfig+0x304>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d120      	bne.n	800402c <UART_SetConfig+0x184>
 8003fea:	4b6e      	ldr	r3, [pc, #440]	; (80041a4 <UART_SetConfig+0x2fc>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d00f      	beq.n	8004018 <UART_SetConfig+0x170>
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d802      	bhi.n	8004002 <UART_SetConfig+0x15a>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <UART_SetConfig+0x164>
 8004000:	e010      	b.n	8004024 <UART_SetConfig+0x17c>
 8004002:	2b20      	cmp	r3, #32
 8004004:	d005      	beq.n	8004012 <UART_SetConfig+0x16a>
 8004006:	2b30      	cmp	r3, #48	; 0x30
 8004008:	d009      	beq.n	800401e <UART_SetConfig+0x176>
 800400a:	e00b      	b.n	8004024 <UART_SetConfig+0x17c>
 800400c:	2300      	movs	r3, #0
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e0f1      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004012:	2302      	movs	r3, #2
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e0ee      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004018:	2304      	movs	r3, #4
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e0eb      	b.n	80041f6 <UART_SetConfig+0x34e>
 800401e:	2308      	movs	r3, #8
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	e0e8      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004024:	2310      	movs	r3, #16
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	bf00      	nop
 800402a:	e0e4      	b.n	80041f6 <UART_SetConfig+0x34e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a5f      	ldr	r2, [pc, #380]	; (80041b0 <UART_SetConfig+0x308>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d120      	bne.n	8004078 <UART_SetConfig+0x1d0>
 8004036:	4b5b      	ldr	r3, [pc, #364]	; (80041a4 <UART_SetConfig+0x2fc>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d00f      	beq.n	8004064 <UART_SetConfig+0x1bc>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d802      	bhi.n	800404e <UART_SetConfig+0x1a6>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <UART_SetConfig+0x1b0>
 800404c:	e010      	b.n	8004070 <UART_SetConfig+0x1c8>
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d005      	beq.n	800405e <UART_SetConfig+0x1b6>
 8004052:	2bc0      	cmp	r3, #192	; 0xc0
 8004054:	d009      	beq.n	800406a <UART_SetConfig+0x1c2>
 8004056:	e00b      	b.n	8004070 <UART_SetConfig+0x1c8>
 8004058:	2300      	movs	r3, #0
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e0cb      	b.n	80041f6 <UART_SetConfig+0x34e>
 800405e:	2302      	movs	r3, #2
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	e0c8      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004064:	2304      	movs	r3, #4
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e0c5      	b.n	80041f6 <UART_SetConfig+0x34e>
 800406a:	2308      	movs	r3, #8
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e0c2      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004070:	2310      	movs	r3, #16
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	bf00      	nop
 8004076:	e0be      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a4d      	ldr	r2, [pc, #308]	; (80041b4 <UART_SetConfig+0x30c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d124      	bne.n	80040cc <UART_SetConfig+0x224>
 8004082:	4b48      	ldr	r3, [pc, #288]	; (80041a4 <UART_SetConfig+0x2fc>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004090:	d012      	beq.n	80040b8 <UART_SetConfig+0x210>
 8004092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004096:	d802      	bhi.n	800409e <UART_SetConfig+0x1f6>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <UART_SetConfig+0x204>
 800409c:	e012      	b.n	80040c4 <UART_SetConfig+0x21c>
 800409e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a2:	d006      	beq.n	80040b2 <UART_SetConfig+0x20a>
 80040a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a8:	d009      	beq.n	80040be <UART_SetConfig+0x216>
 80040aa:	e00b      	b.n	80040c4 <UART_SetConfig+0x21c>
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e0a1      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e09e      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040b8:	2304      	movs	r3, #4
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e09b      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040be:	2308      	movs	r3, #8
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e098      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040c4:	2310      	movs	r3, #16
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	bf00      	nop
 80040ca:	e094      	b.n	80041f6 <UART_SetConfig+0x34e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a39      	ldr	r2, [pc, #228]	; (80041b8 <UART_SetConfig+0x310>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d124      	bne.n	8004120 <UART_SetConfig+0x278>
 80040d6:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <UART_SetConfig+0x2fc>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e4:	d012      	beq.n	800410c <UART_SetConfig+0x264>
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ea:	d802      	bhi.n	80040f2 <UART_SetConfig+0x24a>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <UART_SetConfig+0x258>
 80040f0:	e012      	b.n	8004118 <UART_SetConfig+0x270>
 80040f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f6:	d006      	beq.n	8004106 <UART_SetConfig+0x25e>
 80040f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040fc:	d009      	beq.n	8004112 <UART_SetConfig+0x26a>
 80040fe:	e00b      	b.n	8004118 <UART_SetConfig+0x270>
 8004100:	2301      	movs	r3, #1
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e077      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004106:	2302      	movs	r3, #2
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e074      	b.n	80041f6 <UART_SetConfig+0x34e>
 800410c:	2304      	movs	r3, #4
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e071      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004112:	2308      	movs	r3, #8
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e06e      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	bf00      	nop
 800411e:	e06a      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a25      	ldr	r2, [pc, #148]	; (80041bc <UART_SetConfig+0x314>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d124      	bne.n	8004174 <UART_SetConfig+0x2cc>
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <UART_SetConfig+0x2fc>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004130:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004138:	d012      	beq.n	8004160 <UART_SetConfig+0x2b8>
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d802      	bhi.n	8004146 <UART_SetConfig+0x29e>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <UART_SetConfig+0x2ac>
 8004144:	e012      	b.n	800416c <UART_SetConfig+0x2c4>
 8004146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414a:	d006      	beq.n	800415a <UART_SetConfig+0x2b2>
 800414c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004150:	d009      	beq.n	8004166 <UART_SetConfig+0x2be>
 8004152:	e00b      	b.n	800416c <UART_SetConfig+0x2c4>
 8004154:	2300      	movs	r3, #0
 8004156:	77fb      	strb	r3, [r7, #31]
 8004158:	e04d      	b.n	80041f6 <UART_SetConfig+0x34e>
 800415a:	2302      	movs	r3, #2
 800415c:	77fb      	strb	r3, [r7, #31]
 800415e:	e04a      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004160:	2304      	movs	r3, #4
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e047      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004166:	2308      	movs	r3, #8
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e044      	b.n	80041f6 <UART_SetConfig+0x34e>
 800416c:	2310      	movs	r3, #16
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	bf00      	nop
 8004172:	e040      	b.n	80041f6 <UART_SetConfig+0x34e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <UART_SetConfig+0x318>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d139      	bne.n	80041f2 <UART_SetConfig+0x34a>
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <UART_SetConfig+0x2fc>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418c:	d027      	beq.n	80041de <UART_SetConfig+0x336>
 800418e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004192:	d817      	bhi.n	80041c4 <UART_SetConfig+0x31c>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01c      	beq.n	80041d2 <UART_SetConfig+0x32a>
 8004198:	e027      	b.n	80041ea <UART_SetConfig+0x342>
 800419a:	bf00      	nop
 800419c:	efff69f3 	.word	0xefff69f3
 80041a0:	40011000 	.word	0x40011000
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40004400 	.word	0x40004400
 80041ac:	40004800 	.word	0x40004800
 80041b0:	40004c00 	.word	0x40004c00
 80041b4:	40005000 	.word	0x40005000
 80041b8:	40011400 	.word	0x40011400
 80041bc:	40007800 	.word	0x40007800
 80041c0:	40007c00 	.word	0x40007c00
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d006      	beq.n	80041d8 <UART_SetConfig+0x330>
 80041ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041ce:	d009      	beq.n	80041e4 <UART_SetConfig+0x33c>
 80041d0:	e00b      	b.n	80041ea <UART_SetConfig+0x342>
 80041d2:	2300      	movs	r3, #0
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e00e      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041d8:	2302      	movs	r3, #2
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e00b      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041de:	2304      	movs	r3, #4
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e008      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041e4:	2308      	movs	r3, #8
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e005      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041ea:	2310      	movs	r3, #16
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	bf00      	nop
 80041f0:	e001      	b.n	80041f6 <UART_SetConfig+0x34e>
 80041f2:	2310      	movs	r3, #16
 80041f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fe:	d17f      	bne.n	8004300 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004200:	7ffb      	ldrb	r3, [r7, #31]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d85c      	bhi.n	80042c0 <UART_SetConfig+0x418>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0x364>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004231 	.word	0x08004231
 8004210:	08004251 	.word	0x08004251
 8004214:	08004271 	.word	0x08004271
 8004218:	080042c1 	.word	0x080042c1
 800421c:	08004289 	.word	0x08004289
 8004220:	080042c1 	.word	0x080042c1
 8004224:	080042c1 	.word	0x080042c1
 8004228:	080042c1 	.word	0x080042c1
 800422c:	080042a9 	.word	0x080042a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004230:	f7fe fe22 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8004234:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	005a      	lsls	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	441a      	add	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	b29b      	uxth	r3, r3
 800424c:	61bb      	str	r3, [r7, #24]
        break;
 800424e:	e03a      	b.n	80042c6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004250:	f7fe fe26 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 8004254:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	005a      	lsls	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	441a      	add	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	b29b      	uxth	r3, r3
 800426c:	61bb      	str	r3, [r7, #24]
        break;
 800426e:	e02a      	b.n	80042c6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	085a      	lsrs	r2, r3, #1
 8004276:	4b5f      	ldr	r3, [pc, #380]	; (80043f4 <UART_SetConfig+0x54c>)
 8004278:	4413      	add	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6852      	ldr	r2, [r2, #4]
 800427e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004282:	b29b      	uxth	r3, r3
 8004284:	61bb      	str	r3, [r7, #24]
        break;
 8004286:	e01e      	b.n	80042c6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004288:	f7fe fd38 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 800428c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	005a      	lsls	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	441a      	add	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	61bb      	str	r3, [r7, #24]
        break;
 80042a6:	e00e      	b.n	80042c6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	61bb      	str	r3, [r7, #24]
        break;
 80042be:	e002      	b.n	80042c6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	75fb      	strb	r3, [r7, #23]
        break;
 80042c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d916      	bls.n	80042fa <UART_SetConfig+0x452>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d2:	d212      	bcs.n	80042fa <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f023 030f 	bic.w	r3, r3, #15
 80042dc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	897a      	ldrh	r2, [r7, #10]
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	e070      	b.n	80043dc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
 80042fe:	e06d      	b.n	80043dc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004300:	7ffb      	ldrb	r3, [r7, #31]
 8004302:	2b08      	cmp	r3, #8
 8004304:	d859      	bhi.n	80043ba <UART_SetConfig+0x512>
 8004306:	a201      	add	r2, pc, #4	; (adr r2, 800430c <UART_SetConfig+0x464>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	08004331 	.word	0x08004331
 8004310:	0800434f 	.word	0x0800434f
 8004314:	0800436d 	.word	0x0800436d
 8004318:	080043bb 	.word	0x080043bb
 800431c:	08004385 	.word	0x08004385
 8004320:	080043bb 	.word	0x080043bb
 8004324:	080043bb 	.word	0x080043bb
 8004328:	080043bb 	.word	0x080043bb
 800432c:	080043a3 	.word	0x080043a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004330:	f7fe fda2 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8004334:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	085a      	lsrs	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	441a      	add	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	b29b      	uxth	r3, r3
 800434a:	61bb      	str	r3, [r7, #24]
        break;
 800434c:	e038      	b.n	80043c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800434e:	f7fe fda7 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 8004352:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	085a      	lsrs	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	441a      	add	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	b29b      	uxth	r3, r3
 8004368:	61bb      	str	r3, [r7, #24]
        break;
 800436a:	e029      	b.n	80043c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	085a      	lsrs	r2, r3, #1
 8004372:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <UART_SetConfig+0x550>)
 8004374:	4413      	add	r3, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6852      	ldr	r2, [r2, #4]
 800437a:	fbb3 f3f2 	udiv	r3, r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	61bb      	str	r3, [r7, #24]
        break;
 8004382:	e01d      	b.n	80043c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004384:	f7fe fcba 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8004388:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	085a      	lsrs	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	b29b      	uxth	r3, r3
 800439e:	61bb      	str	r3, [r7, #24]
        break;
 80043a0:	e00e      	b.n	80043c0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	61bb      	str	r3, [r7, #24]
        break;
 80043b8:	e002      	b.n	80043c0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
        break;
 80043be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d908      	bls.n	80043d8 <UART_SetConfig+0x530>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d204      	bcs.n	80043d8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	e001      	b.n	80043dc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	01e84800 	.word	0x01e84800
 80043f8:	00f42400 	.word	0x00f42400

080043fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01a      	beq.n	8004512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fa:	d10a      	bne.n	8004512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	605a      	str	r2, [r3, #4]
  }
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af02      	add	r7, sp, #8
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800454e:	f7fc fdb1 	bl	80010b4 <HAL_GetTick>
 8004552:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b08      	cmp	r3, #8
 8004560:	d10e      	bne.n	8004580 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004562:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f82a 	bl	80045ca <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e020      	b.n	80045c2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d10e      	bne.n	80045ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800458e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f814 	bl	80045ca <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e00a      	b.n	80045c2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	e05d      	b.n	8004698 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d059      	beq.n	8004698 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e4:	f7fc fd66 	bl	80010b4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <UART_WaitOnFlagUntilTimeout+0x30>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11b      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004608:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e042      	b.n	80046b8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d02b      	beq.n	8004698 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464e:	d123      	bne.n	8004698 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004658:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004668:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e00f      	b.n	80046b8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4013      	ands	r3, r2
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d092      	beq.n	80045dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80046c6:	201c      	movs	r0, #28
 80046c8:	f002 fcba 	bl	8007040 <pvPortMalloc>
 80046cc:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f8e4 	bl	80048ac <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80046e4:	687b      	ldr	r3, [r7, #4]
    }
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <xEventGroupClearBits>:
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <xEventGroupClearBits+0x1e>
 8004704:	4910      	ldr	r1, [pc, #64]	; (8004748 <xEventGroupClearBits+0x58>)
 8004706:	f240 10df 	movw	r0, #479	; 0x1df
 800470a:	f7fc f9c3 	bl	8000a94 <vAssertCalled>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <xEventGroupClearBits+0x32>
 8004718:	490b      	ldr	r1, [pc, #44]	; (8004748 <xEventGroupClearBits+0x58>)
 800471a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800471e:	f7fc f9b9 	bl	8000a94 <vAssertCalled>

    taskENTER_CRITICAL();
 8004722:	f002 ff61 	bl	80075e8 <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60bb      	str	r3, [r7, #8]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	43db      	mvns	r3, r3
 8004734:	401a      	ands	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 800473a:	f002 ff81 	bl	8007640 <vPortExitCritical>

    return uxReturn;
 800473e:	68bb      	ldr	r3, [r7, #8]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	080109c0 	.word	0x080109c0

0800474c <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08c      	sub	sp, #48	; 0x30
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004756:	2300      	movs	r3, #0
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <xEventGroupSetBits+0x26>
 8004768:	4938      	ldr	r1, [pc, #224]	; (800484c <xEventGroupSetBits+0x100>)
 800476a:	f240 201f 	movw	r0, #543	; 0x21f
 800476e:	f7fc f991 	bl	8000a94 <vAssertCalled>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d004      	beq.n	8004786 <xEventGroupSetBits+0x3a>
 800477c:	4933      	ldr	r1, [pc, #204]	; (800484c <xEventGroupSetBits+0x100>)
 800477e:	f44f 7008 	mov.w	r0, #544	; 0x220
 8004782:	f7fc f987 	bl	8000a94 <vAssertCalled>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	3304      	adds	r3, #4
 800478a:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	3308      	adds	r3, #8
 8004790:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 8004792:	f001 fa25 	bl	8005be0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 80047a8:	e03c      	b.n	8004824 <xEventGroupSetBits+0xd8>
        {
            pxNext = listGET_NEXT( pxListItem );
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047c8:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d108      	bne.n	80047e6 <xEventGroupSetBits+0x9a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <xEventGroupSetBits+0xac>
                {
                    xMatchFound = pdTRUE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
 80047e4:	e008      	b.n	80047f8 <xEventGroupSetBits+0xac>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4013      	ands	r3, r2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d101      	bne.n	80047f8 <xEventGroupSetBits+0xac>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d010      	beq.n	8004820 <xEventGroupSetBits+0xd4>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <xEventGroupSetBits+0xc4>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8004808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004818:	4619      	mov	r1, r3
 800481a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800481c:	f001 fc46 	bl	80060ac <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
        while( pxListItem != pxListEnd )
 8004824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	429a      	cmp	r2, r3
 800482a:	d1be      	bne.n	80047aa <xEventGroupSetBits+0x5e>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	43db      	mvns	r3, r3
 8004834:	401a      	ands	r2, r3
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 800483a:	f001 f9df 	bl	8005bfc <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	681b      	ldr	r3, [r3, #0]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3730      	adds	r7, #48	; 0x30
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	080109c0 	.word	0x080109c0

08004850 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60fb      	str	r3, [r7, #12]
    const List_t * pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3304      	adds	r3, #4
 8004860:	60bb      	str	r3, [r7, #8]

    vTaskSuspendAll();
 8004862:	f001 f9bd 	bl	8005be0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8004866:	e011      	b.n	800488c <vEventGroupDelete+0x3c>
        {
            /* Unblock the task, returning 0 as the event list is being deleted
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3308      	adds	r3, #8
 8004870:	429a      	cmp	r2, r3
 8004872:	d104      	bne.n	800487e <vEventGroupDelete+0x2e>
 8004874:	490c      	ldr	r1, [pc, #48]	; (80048a8 <vEventGroupDelete+0x58>)
 8004876:	f240 207f 	movw	r0, #639	; 0x27f
 800487a:	f7fc f90b 	bl	8000a94 <vAssertCalled>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fc10 	bl	80060ac <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e9      	bne.n	8004868 <vEventGroupDelete+0x18>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
            {
                /* The event group can only have been allocated dynamically - free
                 * it again. */
                vPortFree( pxEventBits );
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f002 fc8d 	bl	80071b4 <vPortFree>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
    ( void ) xTaskResumeAll();
 800489a:	f001 f9af 	bl	8005bfc <xTaskResumeAll>
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	080109c0 	.word	0x080109c0

080048ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f103 0208 	add.w	r2, r3, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f04f 32ff 	mov.w	r2, #4294967295
 80048c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f103 0208 	add.w	r2, r3, #8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f103 0208 	add.w	r2, r3, #8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d103      	bne.n	800496e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e00c      	b.n	8004988 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3308      	adds	r3, #8
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e002      	b.n	800497c <vListInsert+0x2e>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	d2f6      	bcs.n	8004976 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6892      	ldr	r2, [r2, #8]
 80049d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6852      	ldr	r2, [r2, #4]
 80049e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d103      	bne.n	80049f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	1e5a      	subs	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <xQueueGenericReset+0x1e>
 8004a28:	492a      	ldr	r1, [pc, #168]	; (8004ad4 <xQueueGenericReset+0xc0>)
 8004a2a:	f240 100d 	movw	r0, #269	; 0x10d
 8004a2e:	f7fc f831 	bl	8000a94 <vAssertCalled>

    taskENTER_CRITICAL();
 8004a32:	f002 fdd9 	bl	80075e8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	441a      	add	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	3b01      	subs	r3, #1
 8004a64:	68f9      	ldr	r1, [r7, #12]
 8004a66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	441a      	add	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	22ff      	movs	r2, #255	; 0xff
 8004a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	22ff      	movs	r2, #255	; 0xff
 8004a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d114      	bne.n	8004ab2 <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01a      	beq.n	8004ac6 <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3310      	adds	r3, #16
 8004a94:	4618      	mov	r0, r3
 8004a96:	f001 faab 	bl	8005ff0 <xTaskRemoveFromEventList>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d012      	beq.n	8004ac6 <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <xQueueGenericReset+0xc4>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	e009      	b.n	8004ac6 <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fef8 	bl	80048ac <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3324      	adds	r3, #36	; 0x24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fef3 	bl	80048ac <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004ac6:	f002 fdbb 	bl	8007640 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004aca:	2301      	movs	r3, #1
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	080109ec 	.word	0x080109ec
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	; 0x28
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <xQueueGenericCreate+0x1e>
 8004af0:	491c      	ldr	r1, [pc, #112]	; (8004b64 <xQueueGenericCreate+0x88>)
 8004af2:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8004af6:	f7fb ffcd 	bl	8000a94 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <xQueueGenericCreate+0x3c>
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d101      	bne.n	8004b1c <xQueueGenericCreate+0x40>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <xQueueGenericCreate+0x42>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <xQueueGenericCreate+0x50>
 8004b22:	4910      	ldr	r1, [pc, #64]	; (8004b64 <xQueueGenericCreate+0x88>)
 8004b24:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8004b28:	f7fb ffb4 	bl	8000a94 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	3354      	adds	r3, #84	; 0x54
 8004b30:	4618      	mov	r0, r3
 8004b32:	f002 fa85 	bl	8007040 <pvPortMalloc>
 8004b36:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <xQueueGenericCreate+0x7e>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	3354      	adds	r3, #84	; 0x54
 8004b46:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b48:	79fa      	ldrb	r2, [r7, #7]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f807 	bl	8004b68 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
    }
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	080109ec 	.word	0x080109ec

08004b68 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e002      	b.n	8004b8a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b96:	2101      	movs	r1, #1
 8004b98:	69b8      	ldr	r0, [r7, #24]
 8004b9a:	f7ff ff3b 	bl	8004a14 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <xQueueCreateCountingSemaphore+0x1a>
 8004bc4:	490f      	ldr	r1, [pc, #60]	; (8004c04 <xQueueCreateCountingSemaphore+0x50>)
 8004bc6:	f240 20ea 	movw	r0, #746	; 0x2ea
 8004bca:	f7fb ff63 	bl	8000a94 <vAssertCalled>
        configASSERT( uxInitialCount <= uxMaxCount );
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d904      	bls.n	8004be0 <xQueueCreateCountingSemaphore+0x2c>
 8004bd6:	490b      	ldr	r1, [pc, #44]	; (8004c04 <xQueueCreateCountingSemaphore+0x50>)
 8004bd8:	f240 20eb 	movw	r0, #747	; 0x2eb
 8004bdc:	f7fb ff5a 	bl	8000a94 <vAssertCalled>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004be0:	2202      	movs	r2, #2
 8004be2:	2100      	movs	r1, #0
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ff79 	bl	8004adc <xQueueGenericCreate>
 8004bea:	60f8      	str	r0, [r7, #12]

        if( xHandle != NULL )
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <xQueueCreateCountingSemaphore+0x44>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
    }
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	080109ec 	.word	0x080109ec

08004c08 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <xQueueGenericSend+0x26>
 8004c24:	4978      	ldr	r1, [pc, #480]	; (8004e08 <xQueueGenericSend+0x200>)
 8004c26:	f240 3009 	movw	r0, #777	; 0x309
 8004c2a:	f7fb ff33 	bl	8000a94 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <xQueueGenericSend+0x34>
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <xQueueGenericSend+0x38>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <xQueueGenericSend+0x3a>
 8004c40:	2300      	movs	r3, #0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <xQueueGenericSend+0x48>
 8004c46:	4970      	ldr	r1, [pc, #448]	; (8004e08 <xQueueGenericSend+0x200>)
 8004c48:	f240 300a 	movw	r0, #778	; 0x30a
 8004c4c:	f7fb ff22 	bl	8000a94 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d103      	bne.n	8004c5e <xQueueGenericSend+0x56>
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <xQueueGenericSend+0x5a>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <xQueueGenericSend+0x5c>
 8004c62:	2300      	movs	r3, #0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <xQueueGenericSend+0x6a>
 8004c68:	4967      	ldr	r1, [pc, #412]	; (8004e08 <xQueueGenericSend+0x200>)
 8004c6a:	f240 300b 	movw	r0, #779	; 0x30b
 8004c6e:	f7fb ff11 	bl	8000a94 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c72:	f001 fbd3 	bl	800641c <xTaskGetSchedulerState>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <xQueueGenericSend+0x7a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <xQueueGenericSend+0x7e>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <xQueueGenericSend+0x80>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <xQueueGenericSend+0x8e>
 8004c8c:	495e      	ldr	r1, [pc, #376]	; (8004e08 <xQueueGenericSend+0x200>)
 8004c8e:	f240 300e 	movw	r0, #782	; 0x30e
 8004c92:	f7fb feff 	bl	8000a94 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004c96:	f002 fca7 	bl	80075e8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <xQueueGenericSend+0xa4>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d145      	bne.n	8004d38 <xQueueGenericSend+0x130>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	61fb      	str	r3, [r7, #28]

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	6a38      	ldr	r0, [r7, #32]
 8004cb8:	f000 fb68 	bl	800538c <prvCopyDataToQueue>
 8004cbc:	61b8      	str	r0, [r7, #24]

                        if( pxQueue->pxQueueSetContainer != NULL )
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d014      	beq.n	8004cf0 <xQueueGenericSend+0xe8>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d102      	bne.n	8004cd2 <xQueueGenericSend+0xca>
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d12e      	bne.n	8004d30 <xQueueGenericSend+0x128>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004cd2:	6a38      	ldr	r0, [r7, #32]
 8004cd4:	f000 fcfe 	bl	80056d4 <prvNotifyQueueSetContainer>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d028      	beq.n	8004d30 <xQueueGenericSend+0x128>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004cde:	4b4b      	ldr	r3, [pc, #300]	; (8004e0c <xQueueGenericSend+0x204>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	e01f      	b.n	8004d30 <xQueueGenericSend+0x128>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <xQueueGenericSend+0x112>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	3324      	adds	r3, #36	; 0x24
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 f977 	bl	8005ff0 <xTaskRemoveFromEventList>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <xQueueGenericSend+0x128>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8004d08:	4b40      	ldr	r3, [pc, #256]	; (8004e0c <xQueueGenericSend+0x204>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	e00a      	b.n	8004d30 <xQueueGenericSend+0x128>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <xQueueGenericSend+0x128>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004d20:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <xQueueGenericSend+0x204>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004d30:	f002 fc86 	bl	8007640 <vPortExitCritical>
                return pdPASS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e063      	b.n	8004e00 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d3e:	f002 fc7f 	bl	8007640 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e05c      	b.n	8004e00 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d4c:	f107 0310 	add.w	r3, r7, #16
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 fa25 	bl	80061a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004d5a:	f002 fc71 	bl	8007640 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004d5e:	f000 ff3f 	bl	8005be0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004d62:	f002 fc41 	bl	80075e8 <vPortEnterCritical>
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d103      	bne.n	8004d7c <xQueueGenericSend+0x174>
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d103      	bne.n	8004d92 <xQueueGenericSend+0x18a>
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d92:	f002 fc55 	bl	8007640 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d96:	1d3a      	adds	r2, r7, #4
 8004d98:	f107 0310 	add.w	r3, r7, #16
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fa14 	bl	80061cc <xTaskCheckForTimeOut>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d124      	bne.n	8004df4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004daa:	6a38      	ldr	r0, [r7, #32]
 8004dac:	f000 fbf3 	bl	8005596 <prvIsQueueFull>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d018      	beq.n	8004de8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	3310      	adds	r3, #16
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 f8ce 	bl	8005f60 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004dc4:	6a38      	ldr	r0, [r7, #32]
 8004dc6:	f000 fb71 	bl	80054ac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004dca:	f000 ff17 	bl	8005bfc <xTaskResumeAll>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f47f af60 	bne.w	8004c96 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <xQueueGenericSend+0x204>)
 8004dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	e756      	b.n	8004c96 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004de8:	6a38      	ldr	r0, [r7, #32]
 8004dea:	f000 fb5f 	bl	80054ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004dee:	f000 ff05 	bl	8005bfc <xTaskResumeAll>
 8004df2:	e750      	b.n	8004c96 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004df4:	6a38      	ldr	r0, [r7, #32]
 8004df6:	f000 fb59 	bl	80054ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004dfa:	f000 feff 	bl	8005bfc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004dfe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3728      	adds	r7, #40	; 0x28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	080109ec 	.word	0x080109ec
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08c      	sub	sp, #48	; 0x30
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <xQueueGenericSendFromISR+0x22>
 8004e28:	494e      	ldr	r1, [pc, #312]	; (8004f64 <xQueueGenericSendFromISR+0x154>)
 8004e2a:	f240 30dd 	movw	r0, #989	; 0x3dd
 8004e2e:	f7fb fe31 	bl	8000a94 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <xQueueGenericSendFromISR+0x30>
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <xQueueGenericSendFromISR+0x34>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <xQueueGenericSendFromISR+0x36>
 8004e44:	2300      	movs	r3, #0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <xQueueGenericSendFromISR+0x44>
 8004e4a:	4946      	ldr	r1, [pc, #280]	; (8004f64 <xQueueGenericSendFromISR+0x154>)
 8004e4c:	f240 30de 	movw	r0, #990	; 0x3de
 8004e50:	f7fb fe20 	bl	8000a94 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d103      	bne.n	8004e62 <xQueueGenericSendFromISR+0x52>
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <xQueueGenericSendFromISR+0x56>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <xQueueGenericSendFromISR+0x58>
 8004e66:	2300      	movs	r3, #0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <xQueueGenericSendFromISR+0x66>
 8004e6c:	493d      	ldr	r1, [pc, #244]	; (8004f64 <xQueueGenericSendFromISR+0x154>)
 8004e6e:	f240 30df 	movw	r0, #991	; 0x3df
 8004e72:	f7fb fe0f 	bl	8000a94 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e76:	f002 fc91 	bl	800779c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e7e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004e82:	b672      	cpsid	i
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	b662      	cpsie	i
 8004e92:	61ba      	str	r2, [r7, #24]
 8004e94:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004e96:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <xQueueGenericSendFromISR+0x9c>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d14f      	bne.n	8004f4c <xQueueGenericSendFromISR+0x13c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec2:	f000 fa63 	bl	800538c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004ec6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d129      	bne.n	8004f24 <xQueueGenericSendFromISR+0x114>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d012      	beq.n	8004efe <xQueueGenericSendFromISR+0xee>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d102      	bne.n	8004ee4 <xQueueGenericSendFromISR+0xd4>
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d130      	bne.n	8004f46 <xQueueGenericSendFromISR+0x136>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee6:	f000 fbf5 	bl	80056d4 <prvNotifyQueueSetContainer>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d02a      	beq.n	8004f46 <xQueueGenericSendFromISR+0x136>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d027      	beq.n	8004f46 <xQueueGenericSendFromISR+0x136>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e023      	b.n	8004f46 <xQueueGenericSendFromISR+0x136>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01f      	beq.n	8004f46 <xQueueGenericSendFromISR+0x136>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	3324      	adds	r3, #36	; 0x24
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 f870 	bl	8005ff0 <xTaskRemoveFromEventList>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d017      	beq.n	8004f46 <xQueueGenericSendFromISR+0x136>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d014      	beq.n	8004f46 <xQueueGenericSendFromISR+0x136>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e010      	b.n	8004f46 <xQueueGenericSendFromISR+0x136>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004f24:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004f28:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2a:	d104      	bne.n	8004f36 <xQueueGenericSendFromISR+0x126>
 8004f2c:	490d      	ldr	r1, [pc, #52]	; (8004f64 <xQueueGenericSendFromISR+0x154>)
 8004f2e:	f44f 608d 	mov.w	r0, #1128	; 0x468
 8004f32:	f7fb fdaf 	bl	8000a94 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	b25a      	sxtb	r2, r3
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004f46:	2301      	movs	r3, #1
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 8004f4a:	e001      	b.n	8004f50 <xQueueGenericSendFromISR+0x140>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3730      	adds	r7, #48	; 0x30
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	080109ec 	.word	0x080109ec

08004f68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <xQueueReceive+0x24>
 8004f82:	495f      	ldr	r1, [pc, #380]	; (8005100 <xQueueReceive+0x198>)
 8004f84:	f240 502c 	movw	r0, #1324	; 0x52c
 8004f88:	f7fb fd84 	bl	8000a94 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <xQueueReceive+0x32>
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <xQueueReceive+0x36>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <xQueueReceive+0x38>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <xQueueReceive+0x46>
 8004fa4:	4956      	ldr	r1, [pc, #344]	; (8005100 <xQueueReceive+0x198>)
 8004fa6:	f44f 60a6 	mov.w	r0, #1328	; 0x530
 8004faa:	f7fb fd73 	bl	8000a94 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fae:	f001 fa35 	bl	800641c <xTaskGetSchedulerState>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <xQueueReceive+0x56>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <xQueueReceive+0x5a>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <xQueueReceive+0x5c>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <xQueueReceive+0x6a>
 8004fc8:	494d      	ldr	r1, [pc, #308]	; (8005100 <xQueueReceive+0x198>)
 8004fca:	f240 5035 	movw	r0, #1333	; 0x535
 8004fce:	f7fb fd61 	bl	8000a94 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004fd2:	f002 fb09 	bl	80075e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01f      	beq.n	8005022 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	6a38      	ldr	r0, [r7, #32]
 8004fe6:	f000 fa3b 	bl	8005460 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00f      	beq.n	800501a <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	3310      	adds	r3, #16
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fff6 	bl	8005ff0 <xTaskRemoveFromEventList>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800500a:	4b3e      	ldr	r3, [pc, #248]	; (8005104 <xQueueReceive+0x19c>)
 800500c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800501a:	f002 fb11 	bl	8007640 <vPortExitCritical>
                return pdPASS;
 800501e:	2301      	movs	r3, #1
 8005020:	e069      	b.n	80050f6 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005028:	f002 fb0a 	bl	8007640 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800502c:	2300      	movs	r3, #0
 800502e:	e062      	b.n	80050f6 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005036:	f107 0314 	add.w	r3, r7, #20
 800503a:	4618      	mov	r0, r3
 800503c:	f001 f8b0 	bl	80061a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005044:	f002 fafc 	bl	8007640 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005048:	f000 fdca 	bl	8005be0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800504c:	f002 facc 	bl	80075e8 <vPortEnterCritical>
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005056:	b25b      	sxtb	r3, r3
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d103      	bne.n	8005066 <xQueueReceive+0xfe>
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800506c:	b25b      	sxtb	r3, r3
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d103      	bne.n	800507c <xQueueReceive+0x114>
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800507c:	f002 fae0 	bl	8007640 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005080:	1d3a      	adds	r2, r7, #4
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	4611      	mov	r1, r2
 8005088:	4618      	mov	r0, r3
 800508a:	f001 f89f 	bl	80061cc <xTaskCheckForTimeOut>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d123      	bne.n	80050dc <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005094:	6a38      	ldr	r0, [r7, #32]
 8005096:	f000 fa68 	bl	800556a <prvIsQueueEmpty>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d017      	beq.n	80050d0 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	3324      	adds	r3, #36	; 0x24
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 ff59 	bl	8005f60 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80050ae:	6a38      	ldr	r0, [r7, #32]
 80050b0:	f000 f9fc 	bl	80054ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80050b4:	f000 fda2 	bl	8005bfc <xTaskResumeAll>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d189      	bne.n	8004fd2 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 80050be:	4b11      	ldr	r3, [pc, #68]	; (8005104 <xQueueReceive+0x19c>)
 80050c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	e780      	b.n	8004fd2 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80050d0:	6a38      	ldr	r0, [r7, #32]
 80050d2:	f000 f9eb 	bl	80054ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80050d6:	f000 fd91 	bl	8005bfc <xTaskResumeAll>
 80050da:	e77a      	b.n	8004fd2 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80050dc:	6a38      	ldr	r0, [r7, #32]
 80050de:	f000 f9e5 	bl	80054ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80050e2:	f000 fd8b 	bl	8005bfc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050e6:	6a38      	ldr	r0, [r7, #32]
 80050e8:	f000 fa3f 	bl	800556a <prvIsQueueEmpty>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f43f af6f 	beq.w	8004fd2 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80050f4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3728      	adds	r7, #40	; 0x28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	080109ec 	.word	0x080109ec
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005112:	2300      	movs	r3, #0
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800511a:	2300      	movs	r3, #0
 800511c:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <xQueueSemaphoreTake+0x26>
 8005124:	4971      	ldr	r1, [pc, #452]	; (80052ec <xQueueSemaphoreTake+0x1e4>)
 8005126:	f240 50be 	movw	r0, #1470	; 0x5be
 800512a:	f7fb fcb3 	bl	8000a94 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <xQueueSemaphoreTake+0x38>
 8005136:	496d      	ldr	r1, [pc, #436]	; (80052ec <xQueueSemaphoreTake+0x1e4>)
 8005138:	f240 50c2 	movw	r0, #1474	; 0x5c2
 800513c:	f7fb fcaa 	bl	8000a94 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005140:	f001 f96c 	bl	800641c <xTaskGetSchedulerState>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <xQueueSemaphoreTake+0x48>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <xQueueSemaphoreTake+0x4c>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <xQueueSemaphoreTake+0x4e>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <xQueueSemaphoreTake+0x5c>
 800515a:	4964      	ldr	r1, [pc, #400]	; (80052ec <xQueueSemaphoreTake+0x1e4>)
 800515c:	f240 50c7 	movw	r0, #1479	; 0x5c7
 8005160:	f7fb fc98 	bl	8000a94 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005164:	f002 fa40 	bl	80075e8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d024      	beq.n	80051be <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <xQueueSemaphoreTake+0x86>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005184:	f001 fad2 	bl	800672c <pvTaskIncrementMutexHeldCount>
 8005188:	4602      	mov	r2, r0
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00f      	beq.n	80051b6 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3310      	adds	r3, #16
 800519a:	4618      	mov	r0, r3
 800519c:	f000 ff28 	bl	8005ff0 <xTaskRemoveFromEventList>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80051a6:	4b52      	ldr	r3, [pc, #328]	; (80052f0 <xQueueSemaphoreTake+0x1e8>)
 80051a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80051b6:	f002 fa43 	bl	8007640 <vPortExitCritical>
                return pdPASS;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e091      	b.n	80052e2 <xQueueSemaphoreTake+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xQueueSemaphoreTake+0xd4>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <xQueueSemaphoreTake+0xcc>
 80051ca:	4948      	ldr	r1, [pc, #288]	; (80052ec <xQueueSemaphoreTake+0x1e4>)
 80051cc:	f240 600d 	movw	r0, #1549	; 0x60d
 80051d0:	f7fb fc60 	bl	8000a94 <vAssertCalled>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80051d4:	f002 fa34 	bl	8007640 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80051d8:	2300      	movs	r3, #0
 80051da:	e082      	b.n	80052e2 <xQueueSemaphoreTake+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80051e2:	f107 030c 	add.w	r3, r7, #12
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 ffda 	bl	80061a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80051f0:	f002 fa26 	bl	8007640 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80051f4:	f000 fcf4 	bl	8005be0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80051f8:	f002 f9f6 	bl	80075e8 <vPortEnterCritical>
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005202:	b25b      	sxtb	r3, r3
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d103      	bne.n	8005212 <xQueueSemaphoreTake+0x10a>
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005218:	b25b      	sxtb	r3, r3
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d103      	bne.n	8005228 <xQueueSemaphoreTake+0x120>
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005228:	f002 fa0a 	bl	8007640 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800522c:	463a      	mov	r2, r7
 800522e:	f107 030c 	add.w	r3, r7, #12
 8005232:	4611      	mov	r1, r2
 8005234:	4618      	mov	r0, r3
 8005236:	f000 ffc9 	bl	80061cc <xTaskCheckForTimeOut>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d132      	bne.n	80052a6 <xQueueSemaphoreTake+0x19e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005240:	69f8      	ldr	r0, [r7, #28]
 8005242:	f000 f992 	bl	800556a <prvIsQueueEmpty>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d026      	beq.n	800529a <xQueueSemaphoreTake+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <xQueueSemaphoreTake+0x160>
                        {
                            taskENTER_CRITICAL();
 8005254:	f002 f9c8 	bl	80075e8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4618      	mov	r0, r3
 800525e:	f001 f8fb 	bl	8006458 <xTaskPriorityInherit>
 8005262:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 8005264:	f002 f9ec 	bl	8007640 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fe75 	bl	8005f60 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005276:	69f8      	ldr	r0, [r7, #28]
 8005278:	f000 f918 	bl	80054ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800527c:	f000 fcbe 	bl	8005bfc <xTaskResumeAll>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	f47f af6e 	bne.w	8005164 <xQueueSemaphoreTake+0x5c>
                {
                    portYIELD_WITHIN_API();
 8005288:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <xQueueSemaphoreTake+0x1e8>)
 800528a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	e764      	b.n	8005164 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800529a:	69f8      	ldr	r0, [r7, #28]
 800529c:	f000 f906 	bl	80054ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80052a0:	f000 fcac 	bl	8005bfc <xTaskResumeAll>
 80052a4:	e75e      	b.n	8005164 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80052a6:	69f8      	ldr	r0, [r7, #28]
 80052a8:	f000 f900 	bl	80054ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80052ac:	f000 fca6 	bl	8005bfc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052b0:	69f8      	ldr	r0, [r7, #28]
 80052b2:	f000 f95a 	bl	800556a <prvIsQueueEmpty>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f43f af53 	beq.w	8005164 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00d      	beq.n	80052e0 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 80052c4:	f002 f990 	bl	80075e8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80052c8:	69f8      	ldr	r0, [r7, #28]
 80052ca:	f000 f847 	bl	800535c <prvGetDisinheritPriorityAfterTimeout>
 80052ce:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	6979      	ldr	r1, [r7, #20]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 f9a4 	bl	8006624 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80052dc:	f002 f9b0 	bl	8007640 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80052e0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3728      	adds	r7, #40	; 0x28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	080109ec 	.word	0x080109ec
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <uxQueueMessagesWaiting+0x18>
 8005302:	4908      	ldr	r1, [pc, #32]	; (8005324 <uxQueueMessagesWaiting+0x30>)
 8005304:	f240 70be 	movw	r0, #1982	; 0x7be
 8005308:	f7fb fbc4 	bl	8000a94 <vAssertCalled>

    taskENTER_CRITICAL();
 800530c:	f002 f96c 	bl	80075e8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005316:	f002 f993 	bl	8007640 <vPortExitCritical>

    return uxReturn;
 800531a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	080109ec 	.word	0x080109ec

08005328 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <vQueueDelete+0x1c>
 800533a:	4907      	ldr	r1, [pc, #28]	; (8005358 <vQueueDelete+0x30>)
 800533c:	f240 70eb 	movw	r0, #2027	; 0x7eb
 8005340:	f7fb fba8 	bl	8000a94 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f967 	bl	8005618 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The queue can only have been allocated dynamically - free it
             * again. */
            vPortFree( pxQueue );
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f001 ff32 	bl	80071b4 <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005350:	bf00      	nop
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	080109ec 	.word	0x080109ec

0800535c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b00      	cmp	r3, #0
 800536a:	d006      	beq.n	800537a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1c3 0305 	rsb	r3, r3, #5
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e001      	b.n	800537e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800537e:	68fb      	ldr	r3, [r7, #12]
    }
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d14d      	bne.n	800544e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 f8c4 	bl	8006544 <xTaskPriorityDisinherit>
 80053bc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	e043      	b.n	800544e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d119      	bne.n	8005400 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6858      	ldr	r0, [r3, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	461a      	mov	r2, r3
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	f00a fe63 	bl	80100a2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	441a      	add	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d32b      	bcc.n	800544e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	e026      	b.n	800544e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68d8      	ldr	r0, [r3, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	461a      	mov	r2, r3
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	f00a fe49 	bl	80100a2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	425b      	negs	r3, r3
 800541a:	441a      	add	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d207      	bcs.n	800543c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	425b      	negs	r3, r3
 8005436:	441a      	add	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d105      	bne.n	800544e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	3b01      	subs	r3, #1
 800544c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005456:	697b      	ldr	r3, [r7, #20]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d018      	beq.n	80054a4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	441a      	add	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	d303      	bcc.n	8005494 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68d9      	ldr	r1, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	461a      	mov	r2, r3
 800549e:	6838      	ldr	r0, [r7, #0]
 80054a0:	f00a fdff 	bl	80100a2 <memcpy>
    }
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80054b4:	f002 f898 	bl	80075e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80054c0:	e01e      	b.n	8005500 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f902 	bl	80056d4 <prvNotifyQueueSetContainer>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 80054d6:	f000 fed5 	bl	8006284 <vTaskMissedYield>
 80054da:	e00d      	b.n	80054f8 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d012      	beq.n	800550a <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3324      	adds	r3, #36	; 0x24
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fd81 	bl	8005ff0 <xTaskRemoveFromEventList>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 80054f4:	f000 fec6 	bl	8006284 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005504:	2b00      	cmp	r3, #0
 8005506:	dcdc      	bgt.n	80054c2 <prvUnlockQueue+0x16>
 8005508:	e000      	b.n	800550c <prvUnlockQueue+0x60>
                            break;
 800550a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	22ff      	movs	r2, #255	; 0xff
 8005510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005514:	f002 f894 	bl	8007640 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005518:	f002 f866 	bl	80075e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005522:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005524:	e011      	b.n	800554a <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d012      	beq.n	8005554 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3310      	adds	r3, #16
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fd5c 	bl	8005ff0 <xTaskRemoveFromEventList>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 800553e:	f000 fea1 	bl	8006284 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	3b01      	subs	r3, #1
 8005546:	b2db      	uxtb	r3, r3
 8005548:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800554a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800554e:	2b00      	cmp	r3, #0
 8005550:	dce9      	bgt.n	8005526 <prvUnlockQueue+0x7a>
 8005552:	e000      	b.n	8005556 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8005554:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	22ff      	movs	r2, #255	; 0xff
 800555a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800555e:	f002 f86f 	bl	8007640 <vPortExitCritical>
}
 8005562:	bf00      	nop
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005572:	f002 f839 	bl	80075e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800557e:	2301      	movs	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e001      	b.n	8005588 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005588:	f002 f85a 	bl	8007640 <vPortExitCritical>

    return xReturn;
 800558c:	68fb      	ldr	r3, [r7, #12]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800559e:	f002 f823 	bl	80075e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d102      	bne.n	80055b4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80055ae:	2301      	movs	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e001      	b.n	80055b8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80055b8:	f002 f842 	bl	8007640 <vPortExitCritical>

    return xReturn;
 80055bc:	68fb      	ldr	r3, [r7, #12]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	e014      	b.n	8005602 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055d8:	4a0e      	ldr	r2, [pc, #56]	; (8005614 <vQueueAddToRegistry+0x4c>)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055e4:	490b      	ldr	r1, [pc, #44]	; (8005614 <vQueueAddToRegistry+0x4c>)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <vQueueAddToRegistry+0x4c>)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80055fa:	e005      	b.n	8005608 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b07      	cmp	r3, #7
 8005606:	d9e7      	bls.n	80055d8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	2000c824 	.word	0x2000c824

08005618 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e016      	b.n	8005654 <vQueueUnregisterQueue+0x3c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005626:	4a10      	ldr	r2, [pc, #64]	; (8005668 <vQueueUnregisterQueue+0x50>)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	4413      	add	r3, r2
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	d10b      	bne.n	800564e <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8005636:	4a0c      	ldr	r2, [pc, #48]	; (8005668 <vQueueUnregisterQueue+0x50>)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2100      	movs	r1, #0
 800563c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005640:	4a09      	ldr	r2, [pc, #36]	; (8005668 <vQueueUnregisterQueue+0x50>)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	2200      	movs	r2, #0
 800564a:	605a      	str	r2, [r3, #4]
                break;
 800564c:	e005      	b.n	800565a <vQueueUnregisterQueue+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3301      	adds	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b07      	cmp	r3, #7
 8005658:	d9e5      	bls.n	8005626 <vQueueUnregisterQueue+0xe>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	2000c824 	.word	0x2000c824

0800566c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800567c:	f001 ffb4 	bl	80075e8 <vPortEnterCritical>
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005686:	b25b      	sxtb	r3, r3
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d103      	bne.n	8005696 <vQueueWaitForMessageRestricted+0x2a>
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800569c:	b25b      	sxtb	r3, r3
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d103      	bne.n	80056ac <vQueueWaitForMessageRestricted+0x40>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ac:	f001 ffc8 	bl	8007640 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	3324      	adds	r3, #36	; 0x24
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fc6d 	bl	8005fa0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80056c6:	6978      	ldr	r0, [r7, #20]
 80056c8:	f7ff fef0 	bl	80054ac <prvUnlockQueue>
    }
 80056cc:	bf00      	nop
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e0:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d104      	bne.n	80056f6 <prvNotifyQueueSetContainer+0x22>
 80056ec:	4924      	ldr	r1, [pc, #144]	; (8005780 <prvNotifyQueueSetContainer+0xac>)
 80056ee:	f640 3097 	movw	r0, #2967	; 0xb97
 80056f2:	f7fb f9cf 	bl	8000a94 <vAssertCalled>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	429a      	cmp	r2, r3
 8005700:	d304      	bcc.n	800570c <prvNotifyQueueSetContainer+0x38>
 8005702:	491f      	ldr	r1, [pc, #124]	; (8005780 <prvNotifyQueueSetContainer+0xac>)
 8005704:	f640 3098 	movw	r0, #2968	; 0xb98
 8005708:	f7fb f9c4 	bl	8000a94 <vAssertCalled>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	429a      	cmp	r2, r3
 8005716:	d22e      	bcs.n	8005776 <prvNotifyQueueSetContainer+0xa2>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800571e:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	2200      	movs	r2, #0
 8005724:	4619      	mov	r1, r3
 8005726:	6938      	ldr	r0, [r7, #16]
 8005728:	f7ff fe30 	bl	800538c <prvCopyDataToQueue>
 800572c:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 800572e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d10e      	bne.n	8005756 <prvNotifyQueueSetContainer+0x82>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01a      	beq.n	8005776 <prvNotifyQueueSetContainer+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3324      	adds	r3, #36	; 0x24
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fc53 	bl	8005ff0 <xTaskRemoveFromEventList>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d012      	beq.n	8005776 <prvNotifyQueueSetContainer+0xa2>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	e00f      	b.n	8005776 <prvNotifyQueueSetContainer+0xa2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8005756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575a:	2b7f      	cmp	r3, #127	; 0x7f
 800575c:	d104      	bne.n	8005768 <prvNotifyQueueSetContainer+0x94>
 800575e:	4908      	ldr	r1, [pc, #32]	; (8005780 <prvNotifyQueueSetContainer+0xac>)
 8005760:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005764:	f7fb f996 	bl	8000a94 <vAssertCalled>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	3301      	adds	r3, #1
 800576c:	b2db      	uxtb	r3, r3
 800576e:	b25a      	sxtb	r2, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005776:	697b      	ldr	r3, [r7, #20]
    }
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	080109ec 	.word	0x080109ec

08005784 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08c      	sub	sp, #48	; 0x30
 8005788:	af04      	add	r7, sp, #16
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4618      	mov	r0, r3
 800579a:	f001 fc51 	bl	8007040 <pvPortMalloc>
 800579e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00e      	beq.n	80057c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057a6:	2058      	movs	r0, #88	; 0x58
 80057a8:	f001 fc4a 	bl	8007040 <pvPortMalloc>
 80057ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
 80057ba:	e005      	b.n	80057c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80057bc:	6978      	ldr	r0, [r7, #20]
 80057be:	f001 fcf9 	bl	80071b4 <vPortFree>
 80057c2:	e001      	b.n	80057c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d013      	beq.n	80057f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9303      	str	r3, [sp, #12]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f80f 	bl	8005808 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80057ea:	69f8      	ldr	r0, [r7, #28]
 80057ec:	f000 f89e 	bl	800592c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80057f0:	2301      	movs	r3, #1
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	e002      	b.n	80057fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
 80057fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80057fc:	69bb      	ldr	r3, [r7, #24]
    }
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	461a      	mov	r2, r3
 8005820:	21a5      	movs	r1, #165	; 0xa5
 8005822:	f00a fc62 	bl	80100ea <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005830:	440b      	add	r3, r1
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f023 0307 	bic.w	r3, r3, #7
 800583e:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <prvInitialiseNewTask+0x4c>
 800584a:	4937      	ldr	r1, [pc, #220]	; (8005928 <prvInitialiseNewTask+0x120>)
 800584c:	f240 305e 	movw	r0, #862	; 0x35e
 8005850:	f7fb f920 	bl	8000a94 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01f      	beq.n	800589a <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	e012      	b.n	8005886 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	4413      	add	r3, r2
 8005866:	7819      	ldrb	r1, [r3, #0]
 8005868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	3334      	adds	r3, #52	; 0x34
 8005870:	460a      	mov	r2, r1
 8005872:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	4413      	add	r3, r2
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	3301      	adds	r3, #1
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b09      	cmp	r3, #9
 800588a:	d9e9      	bls.n	8005860 <prvInitialiseNewTask+0x58>
 800588c:	e000      	b.n	8005890 <prvInitialiseNewTask+0x88>
            {
                break;
 800588e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005898:	e003      	b.n	80058a2 <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d901      	bls.n	80058ac <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058a8:	2304      	movs	r3, #4
 80058aa:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	6a3a      	ldr	r2, [r7, #32]
 80058b0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	2200      	movs	r2, #0
 80058bc:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	3304      	adds	r3, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff f812 	bl	80048ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	3318      	adds	r3, #24
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff f80d 	bl	80048ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	f1c3 0205 	rsb	r2, r3, #5
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	3350      	adds	r3, #80	; 0x50
 80058ec:	2204      	movs	r2, #4
 80058ee:	2100      	movs	r1, #0
 80058f0:	4618      	mov	r0, r3
 80058f2:	f00a fbfa 	bl	80100ea <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	3354      	adds	r3, #84	; 0x54
 80058fa:	2201      	movs	r2, #1
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f00a fbf3 	bl	80100ea <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	6938      	ldr	r0, [r7, #16]
 800590a:	f001 fd67 	bl	80073dc <pxPortInitialiseStack>
 800590e:	4602      	mov	r2, r0
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800591e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005920:	bf00      	nop
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	08010a10 	.word	0x08010a10

0800592c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005934:	f001 fe58 	bl	80075e8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005938:	4b2c      	ldr	r3, [pc, #176]	; (80059ec <prvAddNewTaskToReadyList+0xc0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	4a2b      	ldr	r2, [pc, #172]	; (80059ec <prvAddNewTaskToReadyList+0xc0>)
 8005940:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005942:	4b2b      	ldr	r3, [pc, #172]	; (80059f0 <prvAddNewTaskToReadyList+0xc4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800594a:	4a29      	ldr	r2, [pc, #164]	; (80059f0 <prvAddNewTaskToReadyList+0xc4>)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005950:	4b26      	ldr	r3, [pc, #152]	; (80059ec <prvAddNewTaskToReadyList+0xc0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d110      	bne.n	800597a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005958:	f000 fcb8 	bl	80062cc <prvInitialiseTaskLists>
 800595c:	e00d      	b.n	800597a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800595e:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <prvAddNewTaskToReadyList+0xc8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005966:	4b22      	ldr	r3, [pc, #136]	; (80059f0 <prvAddNewTaskToReadyList+0xc4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	429a      	cmp	r2, r3
 8005972:	d802      	bhi.n	800597a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005974:	4a1e      	ldr	r2, [pc, #120]	; (80059f0 <prvAddNewTaskToReadyList+0xc4>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800597a:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <prvAddNewTaskToReadyList+0xcc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <prvAddNewTaskToReadyList+0xcc>)
 8005982:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005984:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <prvAddNewTaskToReadyList+0xcc>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	2201      	movs	r2, #1
 8005992:	409a      	lsls	r2, r3
 8005994:	4b19      	ldr	r3, [pc, #100]	; (80059fc <prvAddNewTaskToReadyList+0xd0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4313      	orrs	r3, r2
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <prvAddNewTaskToReadyList+0xd0>)
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <prvAddNewTaskToReadyList+0xd4>)
 80059ac:	441a      	add	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe ffa6 	bl	8004906 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80059ba:	f001 fe41 	bl	8007640 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80059be:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <prvAddNewTaskToReadyList+0xc8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00e      	beq.n	80059e4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <prvAddNewTaskToReadyList+0xc4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d207      	bcs.n	80059e4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <prvAddNewTaskToReadyList+0xd8>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20000304 	.word	0x20000304
 80059f0:	2000022c 	.word	0x2000022c
 80059f4:	20000310 	.word	0x20000310
 80059f8:	20000320 	.word	0x20000320
 80059fc:	2000030c 	.word	0x2000030c
 8005a00:	20000230 	.word	0x20000230
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <xTaskDelayUntil+0x1e>
 8005a1c:	492d      	ldr	r1, [pc, #180]	; (8005ad4 <xTaskDelayUntil+0xcc>)
 8005a1e:	f240 40e7 	movw	r0, #1255	; 0x4e7
 8005a22:	f7fb f837 	bl	8000a94 <vAssertCalled>
        configASSERT( ( xTimeIncrement > 0U ) );
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <xTaskDelayUntil+0x2e>
 8005a2c:	4929      	ldr	r1, [pc, #164]	; (8005ad4 <xTaskDelayUntil+0xcc>)
 8005a2e:	f44f 609d 	mov.w	r0, #1256	; 0x4e8
 8005a32:	f7fb f82f 	bl	8000a94 <vAssertCalled>
        configASSERT( uxSchedulerSuspended == 0 );
 8005a36:	4b28      	ldr	r3, [pc, #160]	; (8005ad8 <xTaskDelayUntil+0xd0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <xTaskDelayUntil+0x40>
 8005a3e:	4925      	ldr	r1, [pc, #148]	; (8005ad4 <xTaskDelayUntil+0xcc>)
 8005a40:	f240 40e9 	movw	r0, #1257	; 0x4e9
 8005a44:	f7fb f826 	bl	8000a94 <vAssertCalled>

        vTaskSuspendAll();
 8005a48:	f000 f8ca 	bl	8005be0 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8005a4c:	4b23      	ldr	r3, [pc, #140]	; (8005adc <xTaskDelayUntil+0xd4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	4413      	add	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d20b      	bcs.n	8005a7e <xTaskDelayUntil+0x76>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d211      	bcs.n	8005a94 <xTaskDelayUntil+0x8c>
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d90d      	bls.n	8005a94 <xTaskDelayUntil+0x8c>
                {
                    xShouldDelay = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e00a      	b.n	8005a94 <xTaskDelayUntil+0x8c>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d303      	bcc.n	8005a90 <xTaskDelayUntil+0x88>
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d901      	bls.n	8005a94 <xTaskDelayUntil+0x8c>
                {
                    xShouldDelay = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d006      	beq.n	8005aae <xTaskDelayUntil+0xa6>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 ff53 	bl	8006954 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005aae:	f000 f8a5 	bl	8005bfc <xTaskResumeAll>
 8005ab2:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d107      	bne.n	8005aca <xTaskDelayUntil+0xc2>
        {
            portYIELD_WITHIN_API();
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <xTaskDelayUntil+0xd8>)
 8005abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8005aca:	697b      	ldr	r3, [r7, #20]
    }
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	08010a10 	.word	0x08010a10
 8005ad8:	2000032c 	.word	0x2000032c
 8005adc:	20000308 	.word	0x20000308
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d011      	beq.n	8005b1a <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <vTaskDelay+0x54>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <vTaskDelay+0x24>
 8005afe:	490f      	ldr	r1, [pc, #60]	; (8005b3c <vTaskDelay+0x58>)
 8005b00:	f240 503f 	movw	r0, #1343	; 0x53f
 8005b04:	f7fa ffc6 	bl	8000a94 <vAssertCalled>
            vTaskSuspendAll();
 8005b08:	f000 f86a 	bl	8005be0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 ff20 	bl	8006954 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005b14:	f000 f872 	bl	8005bfc <xTaskResumeAll>
 8005b18:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d107      	bne.n	8005b30 <vTaskDelay+0x4c>
        {
            portYIELD_WITHIN_API();
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <vTaskDelay+0x5c>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	2000032c 	.word	0x2000032c
 8005b3c:	08010a10 	.word	0x08010a10
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005b4a:	4b1d      	ldr	r3, [pc, #116]	; (8005bc0 <vTaskStartScheduler+0x7c>)
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2300      	movs	r3, #0
 8005b54:	2282      	movs	r2, #130	; 0x82
 8005b56:	491b      	ldr	r1, [pc, #108]	; (8005bc4 <vTaskStartScheduler+0x80>)
 8005b58:	481b      	ldr	r0, [pc, #108]	; (8005bc8 <vTaskStartScheduler+0x84>)
 8005b5a:	f7ff fe13 	bl	8005784 <xTaskCreate>
 8005b5e:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d102      	bne.n	8005b6c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005b66:	f000 ff5b 	bl	8006a20 <xTimerCreateTimerTask>
 8005b6a:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d117      	bne.n	8005ba2 <vTaskStartScheduler+0x5e>
        __asm volatile
 8005b72:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005b76:	b672      	cpsid	i
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	b662      	cpsie	i
 8005b86:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005b88:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <vTaskStartScheduler+0x88>)
 8005b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005b90:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <vTaskStartScheduler+0x8c>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b96:	4b0f      	ldr	r3, [pc, #60]	; (8005bd4 <vTaskStartScheduler+0x90>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005b9c:	f001 fca2 	bl	80074e4 <xPortStartScheduler>
 8005ba0:	e008      	b.n	8005bb4 <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d104      	bne.n	8005bb4 <vTaskStartScheduler+0x70>
 8005baa:	490b      	ldr	r1, [pc, #44]	; (8005bd8 <vTaskStartScheduler+0x94>)
 8005bac:	f640 0036 	movw	r0, #2102	; 0x836
 8005bb0:	f7fa ff70 	bl	8000a94 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <vTaskStartScheduler+0x98>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000328 	.word	0x20000328
 8005bc4:	08010a34 	.word	0x08010a34
 8005bc8:	0800629d 	.word	0x0800629d
 8005bcc:	20000324 	.word	0x20000324
 8005bd0:	20000310 	.word	0x20000310
 8005bd4:	20000308 	.word	0x20000308
 8005bd8:	08010a10 	.word	0x08010a10
 8005bdc:	2000000c 	.word	0x2000000c

08005be0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <vTaskSuspendAll+0x18>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	4a03      	ldr	r2, [pc, #12]	; (8005bf8 <vTaskSuspendAll+0x18>)
 8005bec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	2000032c 	.word	0x2000032c

08005bfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005c0a:	4b3e      	ldr	r3, [pc, #248]	; (8005d04 <xTaskResumeAll+0x108>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <xTaskResumeAll+0x20>
 8005c12:	493d      	ldr	r1, [pc, #244]	; (8005d08 <xTaskResumeAll+0x10c>)
 8005c14:	f640 00a9 	movw	r0, #2217	; 0x8a9
 8005c18:	f7fa ff3c 	bl	8000a94 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005c1c:	f001 fce4 	bl	80075e8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005c20:	4b38      	ldr	r3, [pc, #224]	; (8005d04 <xTaskResumeAll+0x108>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	4a37      	ldr	r2, [pc, #220]	; (8005d04 <xTaskResumeAll+0x108>)
 8005c28:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c2a:	4b36      	ldr	r3, [pc, #216]	; (8005d04 <xTaskResumeAll+0x108>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d161      	bne.n	8005cf6 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c32:	4b36      	ldr	r3, [pc, #216]	; (8005d0c <xTaskResumeAll+0x110>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d05d      	beq.n	8005cf6 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c3a:	e02e      	b.n	8005c9a <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c3c:	4b34      	ldr	r3, [pc, #208]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3318      	adds	r3, #24
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe feb9 	bl	80049c0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe feb4 	bl	80049c0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	409a      	lsls	r2, r3
 8005c60:	4b2c      	ldr	r3, [pc, #176]	; (8005d14 <xTaskResumeAll+0x118>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	4a2b      	ldr	r2, [pc, #172]	; (8005d14 <xTaskResumeAll+0x118>)
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <xTaskResumeAll+0x11c>)
 8005c78:	441a      	add	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f7fe fe40 	bl	8004906 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <xTaskResumeAll+0x120>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d302      	bcc.n	8005c9a <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 8005c94:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <xTaskResumeAll+0x124>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c9a:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <xTaskResumeAll+0x114>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1cc      	bne.n	8005c3c <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005ca8:	f000 fb8c 	bl	80063c4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cac:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <xTaskResumeAll+0x128>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d010      	beq.n	8005cda <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005cb8:	f000 f848 	bl	8005d4c <xTaskIncrementTick>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 8005cc2:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <xTaskResumeAll+0x124>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1f1      	bne.n	8005cb8 <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 8005cd4:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <xTaskResumeAll+0x128>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005cda:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <xTaskResumeAll+0x124>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <xTaskResumeAll+0x12c>)
 8005ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005cf6:	f001 fca3 	bl	8007640 <vPortExitCritical>

    return xAlreadyYielded;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	2000032c 	.word	0x2000032c
 8005d08:	08010a10 	.word	0x08010a10
 8005d0c:	20000304 	.word	0x20000304
 8005d10:	200002c4 	.word	0x200002c4
 8005d14:	2000030c 	.word	0x2000030c
 8005d18:	20000230 	.word	0x20000230
 8005d1c:	2000022c 	.word	0x2000022c
 8005d20:	20000318 	.word	0x20000318
 8005d24:	20000314 	.word	0x20000314
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <xTaskGetTickCount+0x1c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005d38:	687b      	ldr	r3, [r7, #4]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	20000308 	.word	0x20000308

08005d4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d56:	4b4b      	ldr	r3, [pc, #300]	; (8005e84 <xTaskIncrementTick+0x138>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f040 8088 	bne.w	8005e70 <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d60:	4b49      	ldr	r3, [pc, #292]	; (8005e88 <xTaskIncrementTick+0x13c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005d68:	4a47      	ldr	r2, [pc, #284]	; (8005e88 <xTaskIncrementTick+0x13c>)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d11a      	bne.n	8005daa <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8005d74:	4b45      	ldr	r3, [pc, #276]	; (8005e8c <xTaskIncrementTick+0x140>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d004      	beq.n	8005d88 <xTaskIncrementTick+0x3c>
 8005d7e:	4944      	ldr	r1, [pc, #272]	; (8005e90 <xTaskIncrementTick+0x144>)
 8005d80:	f640 20bc 	movw	r0, #2748	; 0xabc
 8005d84:	f7fa fe86 	bl	8000a94 <vAssertCalled>
 8005d88:	4b40      	ldr	r3, [pc, #256]	; (8005e8c <xTaskIncrementTick+0x140>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	4b41      	ldr	r3, [pc, #260]	; (8005e94 <xTaskIncrementTick+0x148>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a3e      	ldr	r2, [pc, #248]	; (8005e8c <xTaskIncrementTick+0x140>)
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4a3f      	ldr	r2, [pc, #252]	; (8005e94 <xTaskIncrementTick+0x148>)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4b3e      	ldr	r3, [pc, #248]	; (8005e98 <xTaskIncrementTick+0x14c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3301      	adds	r3, #1
 8005da2:	4a3d      	ldr	r2, [pc, #244]	; (8005e98 <xTaskIncrementTick+0x14c>)
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	f000 fb0d 	bl	80063c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005daa:	4b3c      	ldr	r3, [pc, #240]	; (8005e9c <xTaskIncrementTick+0x150>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d348      	bcc.n	8005e46 <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005db4:	4b35      	ldr	r3, [pc, #212]	; (8005e8c <xTaskIncrementTick+0x140>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dbe:	4b37      	ldr	r3, [pc, #220]	; (8005e9c <xTaskIncrementTick+0x150>)
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc4:	601a      	str	r2, [r3, #0]
                    break;
 8005dc6:	e03e      	b.n	8005e46 <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc8:	4b30      	ldr	r3, [pc, #192]	; (8005e8c <xTaskIncrementTick+0x140>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d203      	bcs.n	8005de8 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005de0:	4a2e      	ldr	r2, [pc, #184]	; (8005e9c <xTaskIncrementTick+0x150>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005de6:	e02e      	b.n	8005e46 <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fe fde7 	bl	80049c0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d004      	beq.n	8005e04 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3318      	adds	r3, #24
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fdde 	bl	80049c0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	2201      	movs	r2, #1
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <xTaskIncrementTick+0x154>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	4a23      	ldr	r2, [pc, #140]	; (8005ea0 <xTaskIncrementTick+0x154>)
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4a20      	ldr	r2, [pc, #128]	; (8005ea4 <xTaskIncrementTick+0x158>)
 8005e24:	441a      	add	r2, r3
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	f7fe fd6a 	bl	8004906 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	4b1c      	ldr	r3, [pc, #112]	; (8005ea8 <xTaskIncrementTick+0x15c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3b9      	bcc.n	8005db4 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e44:	e7b6      	b.n	8005db4 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e46:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <xTaskIncrementTick+0x15c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	4915      	ldr	r1, [pc, #84]	; (8005ea4 <xTaskIncrementTick+0x158>)
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d901      	bls.n	8005e62 <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <xTaskIncrementTick+0x160>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e004      	b.n	8005e7a <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005e70:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <xTaskIncrementTick+0x164>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a0e      	ldr	r2, [pc, #56]	; (8005eb0 <xTaskIncrementTick+0x164>)
 8005e78:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005e7a:	697b      	ldr	r3, [r7, #20]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	2000032c 	.word	0x2000032c
 8005e88:	20000308 	.word	0x20000308
 8005e8c:	200002bc 	.word	0x200002bc
 8005e90:	08010a10 	.word	0x08010a10
 8005e94:	200002c0 	.word	0x200002c0
 8005e98:	2000031c 	.word	0x2000031c
 8005e9c:	20000324 	.word	0x20000324
 8005ea0:	2000030c 	.word	0x2000030c
 8005ea4:	20000230 	.word	0x20000230
 8005ea8:	2000022c 	.word	0x2000022c
 8005eac:	20000318 	.word	0x20000318
 8005eb0:	20000314 	.word	0x20000314

08005eb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eba:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <vTaskSwitchContext+0x94>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005ec2:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <vTaskSwitchContext+0x98>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005ec8:	e039      	b.n	8005f3e <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8005eca:	4b20      	ldr	r3, [pc, #128]	; (8005f4c <vTaskSwitchContext+0x98>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed0:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <vTaskSwitchContext+0x9c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	fab3 f383 	clz	r3, r3
 8005edc:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	f1c3 031f 	rsb	r3, r3, #31
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	491b      	ldr	r1, [pc, #108]	; (8005f54 <vTaskSwitchContext+0xa0>)
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <vTaskSwitchContext+0x50>
 8005efa:	4917      	ldr	r1, [pc, #92]	; (8005f58 <vTaskSwitchContext+0xa4>)
 8005efc:	f640 30f7 	movw	r0, #3063	; 0xbf7
 8005f00:	f7fa fdc8 	bl	8000a94 <vAssertCalled>
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4a11      	ldr	r2, [pc, #68]	; (8005f54 <vTaskSwitchContext+0xa0>)
 8005f10:	4413      	add	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	3308      	adds	r3, #8
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d104      	bne.n	8005f34 <vTaskSwitchContext+0x80>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	605a      	str	r2, [r3, #4]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	4a08      	ldr	r2, [pc, #32]	; (8005f5c <vTaskSwitchContext+0xa8>)
 8005f3c:	6013      	str	r3, [r2, #0]
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	2000032c 	.word	0x2000032c
 8005f4c:	20000318 	.word	0x20000318
 8005f50:	2000030c 	.word	0x2000030c
 8005f54:	20000230 	.word	0x20000230
 8005f58:	08010a10 	.word	0x08010a10
 8005f5c:	2000022c 	.word	0x2000022c

08005f60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <vTaskPlaceOnEventList+0x1a>
 8005f70:	4909      	ldr	r1, [pc, #36]	; (8005f98 <vTaskPlaceOnEventList+0x38>)
 8005f72:	f640 4011 	movw	r0, #3089	; 0xc11
 8005f76:	f7fa fd8d 	bl	8000a94 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f7a:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <vTaskPlaceOnEventList+0x3c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3318      	adds	r3, #24
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fe fce3 	bl	800494e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f88:	2101      	movs	r1, #1
 8005f8a:	6838      	ldr	r0, [r7, #0]
 8005f8c:	f000 fce2 	bl	8006954 <prvAddCurrentTaskToDelayedList>
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	08010a10 	.word	0x08010a10
 8005f9c:	2000022c 	.word	0x2000022c

08005fa0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d104      	bne.n	8005fbc <vTaskPlaceOnEventListRestricted+0x1c>
 8005fb2:	490d      	ldr	r1, [pc, #52]	; (8005fe8 <vTaskPlaceOnEventListRestricted+0x48>)
 8005fb4:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 8005fb8:	f7fa fd6c 	bl	8000a94 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <vTaskPlaceOnEventListRestricted+0x4c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3318      	adds	r3, #24
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7fe fc9e 	bl	8004906 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	68b8      	ldr	r0, [r7, #8]
 8005fda:	f000 fcbb 	bl	8006954 <prvAddCurrentTaskToDelayedList>
    }
 8005fde:	bf00      	nop
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	08010a10 	.word	0x08010a10
 8005fec:	2000022c 	.word	0x2000022c

08005ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <xTaskRemoveFromEventList+0x20>
 8006006:	4922      	ldr	r1, [pc, #136]	; (8006090 <xTaskRemoveFromEventList+0xa0>)
 8006008:	f44f 6047 	mov.w	r0, #3184	; 0xc70
 800600c:	f7fa fd42 	bl	8000a94 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	3318      	adds	r3, #24
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe fcd3 	bl	80049c0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800601a:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <xTaskRemoveFromEventList+0xa4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d11c      	bne.n	800605c <xTaskRemoveFromEventList+0x6c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	3304      	adds	r3, #4
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fcca 	bl	80049c0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	2201      	movs	r2, #1
 8006032:	409a      	lsls	r2, r3
 8006034:	4b18      	ldr	r3, [pc, #96]	; (8006098 <xTaskRemoveFromEventList+0xa8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4313      	orrs	r3, r2
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <xTaskRemoveFromEventList+0xa8>)
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4a14      	ldr	r2, [pc, #80]	; (800609c <xTaskRemoveFromEventList+0xac>)
 800604c:	441a      	add	r2, r3
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7fe fc56 	bl	8004906 <vListInsertEnd>
 800605a:	e005      	b.n	8006068 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	3318      	adds	r3, #24
 8006060:	4619      	mov	r1, r3
 8006062:	480f      	ldr	r0, [pc, #60]	; (80060a0 <xTaskRemoveFromEventList+0xb0>)
 8006064:	f7fe fc4f 	bl	8004906 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606c:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <xTaskRemoveFromEventList+0xb4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	429a      	cmp	r2, r3
 8006074:	d905      	bls.n	8006082 <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006076:	2301      	movs	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800607a:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <xTaskRemoveFromEventList+0xb8>)
 800607c:	2201      	movs	r2, #1
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e001      	b.n	8006086 <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8006086:	68fb      	ldr	r3, [r7, #12]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	08010a10 	.word	0x08010a10
 8006094:	2000032c 	.word	0x2000032c
 8006098:	2000030c 	.word	0x2000030c
 800609c:	20000230 	.word	0x20000230
 80060a0:	200002c4 	.word	0x200002c4
 80060a4:	2000022c 	.word	0x2000022c
 80060a8:	20000318 	.word	0x20000318

080060ac <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 80060b6:	4b23      	ldr	r3, [pc, #140]	; (8006144 <vTaskRemoveFromUnorderedEventList+0x98>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <vTaskRemoveFromUnorderedEventList+0x1c>
 80060be:	4922      	ldr	r1, [pc, #136]	; (8006148 <vTaskRemoveFromUnorderedEventList+0x9c>)
 80060c0:	f640 40a8 	movw	r0, #3240	; 0xca8
 80060c4:	f7fa fce6 	bl	8000a94 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	60fb      	str	r3, [r7, #12]
    configASSERT( pxUnblockedTCB );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d104      	bne.n	80060e8 <vTaskRemoveFromUnorderedEventList+0x3c>
 80060de:	491a      	ldr	r1, [pc, #104]	; (8006148 <vTaskRemoveFromUnorderedEventList+0x9c>)
 80060e0:	f44f 604b 	mov.w	r0, #3248	; 0xcb0
 80060e4:	f7fa fcd6 	bl	8000a94 <vAssertCalled>
    ( void ) uxListRemove( pxEventListItem );
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7fe fc69 	bl	80049c0 <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3304      	adds	r3, #4
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe fc64 	bl	80049c0 <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	2201      	movs	r2, #1
 80060fe:	409a      	lsls	r2, r3
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <vTaskRemoveFromUnorderedEventList+0xa0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4313      	orrs	r3, r2
 8006106:	4a11      	ldr	r2, [pc, #68]	; (800614c <vTaskRemoveFromUnorderedEventList+0xa0>)
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4a0e      	ldr	r2, [pc, #56]	; (8006150 <vTaskRemoveFromUnorderedEventList+0xa4>)
 8006118:	441a      	add	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3304      	adds	r3, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7fe fbf0 	bl	8004906 <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <vTaskRemoveFromUnorderedEventList+0xa8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	429a      	cmp	r2, r3
 8006132:	d902      	bls.n	800613a <vTaskRemoveFromUnorderedEventList+0x8e>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8006134:	4b08      	ldr	r3, [pc, #32]	; (8006158 <vTaskRemoveFromUnorderedEventList+0xac>)
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]
    }
}
 800613a:	bf00      	nop
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	2000032c 	.word	0x2000032c
 8006148:	08010a10 	.word	0x08010a10
 800614c:	2000030c 	.word	0x2000030c
 8006150:	20000230 	.word	0x20000230
 8006154:	2000022c 	.word	0x2000022c
 8006158:	20000318 	.word	0x20000318

0800615c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d104      	bne.n	8006174 <vTaskSetTimeOutState+0x18>
 800616a:	490a      	ldr	r1, [pc, #40]	; (8006194 <vTaskSetTimeOutState+0x38>)
 800616c:	f640 40d4 	movw	r0, #3284	; 0xcd4
 8006170:	f7fa fc90 	bl	8000a94 <vAssertCalled>
    taskENTER_CRITICAL();
 8006174:	f001 fa38 	bl	80075e8 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006178:	4b07      	ldr	r3, [pc, #28]	; (8006198 <vTaskSetTimeOutState+0x3c>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <vTaskSetTimeOutState+0x40>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8006188:	f001 fa5a 	bl	8007640 <vPortExitCritical>
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	08010a10 	.word	0x08010a10
 8006198:	2000031c 	.word	0x2000031c
 800619c:	20000308 	.word	0x20000308

080061a0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061a8:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <vTaskInternalSetTimeOutState+0x24>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <vTaskInternalSetTimeOutState+0x28>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	2000031c 	.word	0x2000031c
 80061c8:	20000308 	.word	0x20000308

080061cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d104      	bne.n	80061e6 <xTaskCheckForTimeOut+0x1a>
 80061dc:	4926      	ldr	r1, [pc, #152]	; (8006278 <xTaskCheckForTimeOut+0xac>)
 80061de:	f640 40eb 	movw	r0, #3307	; 0xceb
 80061e2:	f7fa fc57 	bl	8000a94 <vAssertCalled>
    configASSERT( pxTicksToWait );
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <xTaskCheckForTimeOut+0x2a>
 80061ec:	4922      	ldr	r1, [pc, #136]	; (8006278 <xTaskCheckForTimeOut+0xac>)
 80061ee:	f640 40ec 	movw	r0, #3308	; 0xcec
 80061f2:	f7fa fc4f 	bl	8000a94 <vAssertCalled>

    taskENTER_CRITICAL();
 80061f6:	f001 f9f7 	bl	80075e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80061fa:	4b20      	ldr	r3, [pc, #128]	; (800627c <xTaskCheckForTimeOut+0xb0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	d102      	bne.n	800621a <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	e026      	b.n	8006268 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b18      	ldr	r3, [pc, #96]	; (8006280 <xTaskCheckForTimeOut+0xb4>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d00a      	beq.n	800623c <xTaskCheckForTimeOut+0x70>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	429a      	cmp	r2, r3
 800622e:	d305      	bcc.n	800623c <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006230:	2301      	movs	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e015      	b.n	8006268 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	429a      	cmp	r2, r3
 8006244:	d20b      	bcs.n	800625e <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad2      	subs	r2, r2, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff ffa4 	bl	80061a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e004      	b.n	8006268 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8006268:	f001 f9ea 	bl	8007640 <vPortExitCritical>

    return xReturn;
 800626c:	697b      	ldr	r3, [r7, #20]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	08010a10 	.word	0x08010a10
 800627c:	20000308 	.word	0x20000308
 8006280:	2000031c 	.word	0x2000031c

08006284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006288:	4b03      	ldr	r3, [pc, #12]	; (8006298 <vTaskMissedYield+0x14>)
 800628a:	2201      	movs	r2, #1
 800628c:	601a      	str	r2, [r3, #0]
}
 800628e:	bf00      	nop
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	20000318 	.word	0x20000318

0800629c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80062a4:	f000 f852 	bl	800634c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062a8:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <prvIdleTask+0x28>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d9f9      	bls.n	80062a4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <prvIdleTask+0x2c>)
 80062b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80062c0:	e7f0      	b.n	80062a4 <prvIdleTask+0x8>
 80062c2:	bf00      	nop
 80062c4:	20000230 	.word	0x20000230
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	e00c      	b.n	80062f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4a12      	ldr	r2, [pc, #72]	; (800632c <prvInitialiseTaskLists+0x60>)
 80062e4:	4413      	add	r3, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fae0 	bl	80048ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3301      	adds	r3, #1
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d9ef      	bls.n	80062d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80062f8:	480d      	ldr	r0, [pc, #52]	; (8006330 <prvInitialiseTaskLists+0x64>)
 80062fa:	f7fe fad7 	bl	80048ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80062fe:	480d      	ldr	r0, [pc, #52]	; (8006334 <prvInitialiseTaskLists+0x68>)
 8006300:	f7fe fad4 	bl	80048ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006304:	480c      	ldr	r0, [pc, #48]	; (8006338 <prvInitialiseTaskLists+0x6c>)
 8006306:	f7fe fad1 	bl	80048ac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800630a:	480c      	ldr	r0, [pc, #48]	; (800633c <prvInitialiseTaskLists+0x70>)
 800630c:	f7fe face 	bl	80048ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006310:	480b      	ldr	r0, [pc, #44]	; (8006340 <prvInitialiseTaskLists+0x74>)
 8006312:	f7fe facb 	bl	80048ac <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <prvInitialiseTaskLists+0x78>)
 8006318:	4a05      	ldr	r2, [pc, #20]	; (8006330 <prvInitialiseTaskLists+0x64>)
 800631a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <prvInitialiseTaskLists+0x7c>)
 800631e:	4a05      	ldr	r2, [pc, #20]	; (8006334 <prvInitialiseTaskLists+0x68>)
 8006320:	601a      	str	r2, [r3, #0]
}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000230 	.word	0x20000230
 8006330:	20000294 	.word	0x20000294
 8006334:	200002a8 	.word	0x200002a8
 8006338:	200002c4 	.word	0x200002c4
 800633c:	200002d8 	.word	0x200002d8
 8006340:	200002f0 	.word	0x200002f0
 8006344:	200002bc 	.word	0x200002bc
 8006348:	200002c0 	.word	0x200002c0

0800634c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006352:	e019      	b.n	8006388 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006354:	f001 f948 	bl	80075e8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006358:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <prvCheckTasksWaitingTermination+0x4c>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fb2b 	bl	80049c0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800636a:	4b0c      	ldr	r3, [pc, #48]	; (800639c <prvCheckTasksWaitingTermination+0x50>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3b01      	subs	r3, #1
 8006370:	4a0a      	ldr	r2, [pc, #40]	; (800639c <prvCheckTasksWaitingTermination+0x50>)
 8006372:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <prvCheckTasksWaitingTermination+0x54>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3b01      	subs	r3, #1
 800637a:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <prvCheckTasksWaitingTermination+0x54>)
 800637c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800637e:	f001 f95f 	bl	8007640 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f80e 	bl	80063a4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <prvCheckTasksWaitingTermination+0x54>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e1      	bne.n	8006354 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	200002d8 	.word	0x200002d8
 800639c:	20000304 	.word	0x20000304
 80063a0:	200002ec 	.word	0x200002ec

080063a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 feff 	bl	80071b4 <vPortFree>
                vPortFree( pxTCB );
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fefc 	bl	80071b4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <prvResetNextTaskUnblockTime+0x30>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80063d2:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <prvResetNextTaskUnblockTime+0x34>)
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295
 80063d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80063da:	e005      	b.n	80063e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <prvResetNextTaskUnblockTime+0x30>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <prvResetNextTaskUnblockTime+0x34>)
 80063e6:	6013      	str	r3, [r2, #0]
}
 80063e8:	bf00      	nop
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	200002bc 	.word	0x200002bc
 80063f8:	20000324 	.word	0x20000324

080063fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8006402:	4b05      	ldr	r3, [pc, #20]	; (8006418 <xTaskGetCurrentTaskHandle+0x1c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	607b      	str	r3, [r7, #4]

        return xReturn;
 8006408:	687b      	ldr	r3, [r7, #4]
    }
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	2000022c 	.word	0x2000022c

0800641c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <xTaskGetSchedulerState+0x34>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800642a:	2301      	movs	r3, #1
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	e008      	b.n	8006442 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <xTaskGetSchedulerState+0x38>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006438:	2302      	movs	r3, #2
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	e001      	b.n	8006442 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006442:	687b      	ldr	r3, [r7, #4]
    }
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20000310 	.word	0x20000310
 8006454:	2000032c 	.word	0x2000032c

08006458 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d05e      	beq.n	800652c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006472:	4b31      	ldr	r3, [pc, #196]	; (8006538 <xTaskPriorityInherit+0xe0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	429a      	cmp	r2, r3
 800647a:	d24e      	bcs.n	800651a <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	db06      	blt.n	8006492 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006484:	4b2c      	ldr	r3, [pc, #176]	; (8006538 <xTaskPriorityInherit+0xe0>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648a:	f1c3 0205 	rsb	r2, r3, #5
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6959      	ldr	r1, [r3, #20]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4a26      	ldr	r2, [pc, #152]	; (800653c <xTaskPriorityInherit+0xe4>)
 80064a4:	4413      	add	r3, r2
 80064a6:	4299      	cmp	r1, r3
 80064a8:	d12f      	bne.n	800650a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe fa86 	bl	80049c0 <uxListRemove>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	2201      	movs	r2, #1
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	43da      	mvns	r2, r3
 80064c6:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <xTaskPriorityInherit+0xe8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4013      	ands	r3, r2
 80064cc:	4a1c      	ldr	r2, [pc, #112]	; (8006540 <xTaskPriorityInherit+0xe8>)
 80064ce:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064d0:	4b19      	ldr	r3, [pc, #100]	; (8006538 <xTaskPriorityInherit+0xe0>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	2201      	movs	r2, #1
 80064e0:	409a      	lsls	r2, r3
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <xTaskPriorityInherit+0xe8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	4a15      	ldr	r2, [pc, #84]	; (8006540 <xTaskPriorityInherit+0xe8>)
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4a10      	ldr	r2, [pc, #64]	; (800653c <xTaskPriorityInherit+0xe4>)
 80064fa:	441a      	add	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	3304      	adds	r3, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f7fe f9ff 	bl	8004906 <vListInsertEnd>
 8006508:	e004      	b.n	8006514 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800650a:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <xTaskPriorityInherit+0xe0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006514:	2301      	movs	r3, #1
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	e008      	b.n	800652c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800651e:	4b06      	ldr	r3, [pc, #24]	; (8006538 <xTaskPriorityInherit+0xe0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	429a      	cmp	r2, r3
 8006526:	d201      	bcs.n	800652c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800652c:	68fb      	ldr	r3, [r7, #12]
    }
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	2000022c 	.word	0x2000022c
 800653c:	20000230 	.word	0x20000230
 8006540:	2000030c 	.word	0x2000030c

08006544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d057      	beq.n	800660a <xTaskPriorityDisinherit+0xc6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800655a:	4b2e      	ldr	r3, [pc, #184]	; (8006614 <xTaskPriorityDisinherit+0xd0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d004      	beq.n	800656e <xTaskPriorityDisinherit+0x2a>
 8006564:	492c      	ldr	r1, [pc, #176]	; (8006618 <xTaskPriorityDisinherit+0xd4>)
 8006566:	f241 003d 	movw	r0, #4157	; 0x103d
 800656a:	f7fa fa93 	bl	8000a94 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <xTaskPriorityDisinherit+0x3c>
 8006576:	4928      	ldr	r1, [pc, #160]	; (8006618 <xTaskPriorityDisinherit+0xd4>)
 8006578:	f241 003e 	movw	r0, #4158	; 0x103e
 800657c:	f7fa fa8a 	bl	8000a94 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006584:	1e5a      	subs	r2, r3, #1
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006592:	429a      	cmp	r2, r3
 8006594:	d039      	beq.n	800660a <xTaskPriorityDisinherit+0xc6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d135      	bne.n	800660a <xTaskPriorityDisinherit+0xc6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	3304      	adds	r3, #4
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fa0c 	bl	80049c0 <uxListRemove>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	2201      	movs	r2, #1
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	43da      	mvns	r2, r3
 80065ba:	4b18      	ldr	r3, [pc, #96]	; (800661c <xTaskPriorityDisinherit+0xd8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4013      	ands	r3, r2
 80065c0:	4a16      	ldr	r2, [pc, #88]	; (800661c <xTaskPriorityDisinherit+0xd8>)
 80065c2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	f1c3 0205 	rsb	r2, r3, #5
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	2201      	movs	r2, #1
 80065de:	409a      	lsls	r2, r3
 80065e0:	4b0e      	ldr	r3, [pc, #56]	; (800661c <xTaskPriorityDisinherit+0xd8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	4a0d      	ldr	r2, [pc, #52]	; (800661c <xTaskPriorityDisinherit+0xd8>)
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <xTaskPriorityDisinherit+0xdc>)
 80065f8:	441a      	add	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f7fe f980 	bl	8004906 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006606:	2301      	movs	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800660a:	68fb      	ldr	r3, [r7, #12]
    }
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	2000022c 	.word	0x2000022c
 8006618:	08010a10 	.word	0x08010a10
 800661c:	2000030c 	.word	0x2000030c
 8006620:	20000230 	.word	0x20000230

08006624 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006632:	2301      	movs	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d06b      	beq.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0xf0>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <vTaskPriorityDisinheritAfterTimeout+0x2a>
 8006644:	4935      	ldr	r1, [pc, #212]	; (800671c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006646:	f241 008d 	movw	r0, #4237	; 0x108d
 800664a:	f7fa fa23 	bl	8000a94 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d902      	bls.n	800665e <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e002      	b.n	8006664 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006662:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	429a      	cmp	r2, r3
 800666c:	d052      	beq.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0xf0>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	429a      	cmp	r2, r3
 8006676:	d14d      	bne.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0xf0>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8006678:	4b29      	ldr	r3, [pc, #164]	; (8006720 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	429a      	cmp	r2, r3
 8006680:	d104      	bne.n	800668c <vTaskPriorityDisinheritAfterTimeout+0x68>
 8006682:	4926      	ldr	r1, [pc, #152]	; (800671c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006684:	f241 00a8 	movw	r0, #4264	; 0x10a8
 8006688:	f7fa fa04 	bl	8000a94 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	db04      	blt.n	80066aa <vTaskPriorityDisinheritAfterTimeout+0x86>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f1c3 0205 	rsb	r2, r3, #5
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6959      	ldr	r1, [r3, #20]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066ba:	4413      	add	r3, r2
 80066bc:	4299      	cmp	r1, r3
 80066be:	d129      	bne.n	8006714 <vTaskPriorityDisinheritAfterTimeout+0xf0>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe f97b 	bl	80049c0 <uxListRemove>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <vTaskPriorityDisinheritAfterTimeout+0xc2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	2201      	movs	r2, #1
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	43da      	mvns	r2, r3
 80066dc:	4b12      	ldr	r3, [pc, #72]	; (8006728 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4013      	ands	r3, r2
 80066e2:	4a11      	ldr	r2, [pc, #68]	; (8006728 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066e4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	2201      	movs	r2, #1
 80066ec:	409a      	lsls	r2, r3
 80066ee:	4b0e      	ldr	r3, [pc, #56]	; (8006728 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	4a0c      	ldr	r2, [pc, #48]	; (8006728 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4a07      	ldr	r2, [pc, #28]	; (8006724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006706:	441a      	add	r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f7fe f8f9 	bl	8004906 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006714:	bf00      	nop
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	08010a10 	.word	0x08010a10
 8006720:	2000022c 	.word	0x2000022c
 8006724:	20000230 	.word	0x20000230
 8006728:	2000030c 	.word	0x2000030c

0800672c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <pvTaskIncrementMutexHeldCount+0x24>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8006738:	4b05      	ldr	r3, [pc, #20]	; (8006750 <pvTaskIncrementMutexHeldCount+0x24>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800673e:	3201      	adds	r2, #1
 8006740:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8006742:	4b03      	ldr	r3, [pc, #12]	; (8006750 <pvTaskIncrementMutexHeldCount+0x24>)
 8006744:	681b      	ldr	r3, [r3, #0]
    }
 8006746:	4618      	mov	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	2000022c 	.word	0x2000022c

08006754 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d004      	beq.n	8006770 <ulTaskGenericNotifyTake+0x1c>
 8006766:	492a      	ldr	r1, [pc, #168]	; (8006810 <ulTaskGenericNotifyTake+0xbc>)
 8006768:	f241 2052 	movw	r0, #4690	; 0x1252
 800676c:	f7fa f992 	bl	8000a94 <vAssertCalled>

        taskENTER_CRITICAL();
 8006770:	f000 ff3a 	bl	80075e8 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8006774:	4b27      	ldr	r3, [pc, #156]	; (8006814 <ulTaskGenericNotifyTake+0xc0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	3214      	adds	r2, #20
 800677c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d115      	bne.n	80067b0 <ulTaskGenericNotifyTake+0x5c>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006784:	4b23      	ldr	r3, [pc, #140]	; (8006814 <ulTaskGenericNotifyTake+0xc0>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	3354      	adds	r3, #84	; 0x54
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <ulTaskGenericNotifyTake+0x5c>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006798:	2101      	movs	r1, #1
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f8da 	bl	8006954 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80067a0:	4b1d      	ldr	r3, [pc, #116]	; (8006818 <ulTaskGenericNotifyTake+0xc4>)
 80067a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80067b0:	f000 ff46 	bl	8007640 <vPortExitCritical>

        taskENTER_CRITICAL();
 80067b4:	f000 ff18 	bl	80075e8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80067b8:	4b16      	ldr	r3, [pc, #88]	; (8006814 <ulTaskGenericNotifyTake+0xc0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	3214      	adds	r2, #20
 80067c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c4:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d012      	beq.n	80067f2 <ulTaskGenericNotifyTake+0x9e>
            {
                if( xClearCountOnExit != pdFALSE )
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <ulTaskGenericNotifyTake+0x8e>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 80067d2:	4b10      	ldr	r3, [pc, #64]	; (8006814 <ulTaskGenericNotifyTake+0xc0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	3214      	adds	r2, #20
 80067da:	2100      	movs	r1, #0
 80067dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80067e0:	e007      	b.n	80067f2 <ulTaskGenericNotifyTake+0x9e>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <ulTaskGenericNotifyTake+0xc0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	1e51      	subs	r1, r2, #1
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	3214      	adds	r2, #20
 80067ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80067f2:	4b08      	ldr	r3, [pc, #32]	; (8006814 <ulTaskGenericNotifyTake+0xc0>)
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	3354      	adds	r3, #84	; 0x54
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006800:	f000 ff1e 	bl	8007640 <vPortExitCritical>

        return ulReturn;
 8006804:	697b      	ldr	r3, [r7, #20]
    }
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	08010a10 	.word	0x08010a10
 8006814:	2000022c 	.word	0x2000022c
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <vTaskGenericNotifyGiveFromISR+0x1c>
 800682e:	4942      	ldr	r1, [pc, #264]	; (8006938 <vTaskGenericNotifyGiveFromISR+0x11c>)
 8006830:	f241 30f8 	movw	r0, #5112	; 0x13f8
 8006834:	f7fa f92e 	bl	8000a94 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d004      	beq.n	8006848 <vTaskGenericNotifyGiveFromISR+0x2c>
 800683e:	493e      	ldr	r1, [pc, #248]	; (8006938 <vTaskGenericNotifyGiveFromISR+0x11c>)
 8006840:	f241 30f9 	movw	r0, #5113	; 0x13f9
 8006844:	f7fa f926 	bl	8000a94 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006848:	f000 ffa8 	bl	800779c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 8006850:	f3ef 8211 	mrs	r2, BASEPRI
 8006854:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006858:	b672      	cpsid	i
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	b662      	cpsie	i
 8006868:	61ba      	str	r2, [r7, #24]
 800686a:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 800686c:	69bb      	ldr	r3, [r7, #24]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800686e:	623b      	str	r3, [r7, #32]
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4413      	add	r3, r2
 8006876:	3354      	adds	r3, #84	; 0x54
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	77fb      	strb	r3, [r7, #31]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4413      	add	r3, r2
 8006882:	3354      	adds	r3, #84	; 0x54
 8006884:	2202      	movs	r2, #2
 8006886:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	3214      	adds	r2, #20
 800688e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006892:	1c59      	adds	r1, r3, #1
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	3214      	adds	r2, #20
 800689a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800689e:	7ffb      	ldrb	r3, [r7, #31]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d13f      	bne.n	8006924 <vTaskGenericNotifyGiveFromISR+0x108>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d004      	beq.n	80068b6 <vTaskGenericNotifyGiveFromISR+0x9a>
 80068ac:	4922      	ldr	r1, [pc, #136]	; (8006938 <vTaskGenericNotifyGiveFromISR+0x11c>)
 80068ae:	f241 401f 	movw	r0, #5151	; 0x141f
 80068b2:	f7fa f8ef 	bl	8000a94 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b6:	4b21      	ldr	r3, [pc, #132]	; (800693c <vTaskGenericNotifyGiveFromISR+0x120>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d11c      	bne.n	80068f8 <vTaskGenericNotifyGiveFromISR+0xdc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	3304      	adds	r3, #4
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe f87c 	bl	80049c0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	2201      	movs	r2, #1
 80068ce:	409a      	lsls	r2, r3
 80068d0:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <vTaskGenericNotifyGiveFromISR+0x124>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	4a1a      	ldr	r2, [pc, #104]	; (8006940 <vTaskGenericNotifyGiveFromISR+0x124>)
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4a17      	ldr	r2, [pc, #92]	; (8006944 <vTaskGenericNotifyGiveFromISR+0x128>)
 80068e8:	441a      	add	r2, r3
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	3304      	adds	r3, #4
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f7fe f808 	bl	8004906 <vListInsertEnd>
 80068f6:	e005      	b.n	8006904 <vTaskGenericNotifyGiveFromISR+0xe8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	3318      	adds	r3, #24
 80068fc:	4619      	mov	r1, r3
 80068fe:	4812      	ldr	r0, [pc, #72]	; (8006948 <vTaskGenericNotifyGiveFromISR+0x12c>)
 8006900:	f7fe f801 	bl	8004906 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	4b10      	ldr	r3, [pc, #64]	; (800694c <vTaskGenericNotifyGiveFromISR+0x130>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	429a      	cmp	r2, r3
 8006910:	d908      	bls.n	8006924 <vTaskGenericNotifyGiveFromISR+0x108>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <vTaskGenericNotifyGiveFromISR+0x102>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800691e:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <vTaskGenericNotifyGiveFromISR+0x134>)
 8006920:	2201      	movs	r2, #1
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f383 8811 	msr	BASEPRI, r3
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 800692e:	bf00      	nop
 8006930:	3728      	adds	r7, #40	; 0x28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	08010a10 	.word	0x08010a10
 800693c:	2000032c 	.word	0x2000032c
 8006940:	2000030c 	.word	0x2000030c
 8006944:	20000230 	.word	0x20000230
 8006948:	200002c4 	.word	0x200002c4
 800694c:	2000022c 	.word	0x2000022c
 8006950:	20000318 	.word	0x20000318

08006954 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800695e:	4b29      	ldr	r3, [pc, #164]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006964:	4b28      	ldr	r3, [pc, #160]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3304      	adds	r3, #4
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe f828 	bl	80049c0 <uxListRemove>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006976:	4b24      	ldr	r3, [pc, #144]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	2201      	movs	r2, #1
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	43da      	mvns	r2, r3
 8006984:	4b21      	ldr	r3, [pc, #132]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4013      	ands	r3, r2
 800698a:	4a20      	ldr	r2, [pc, #128]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800698c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d10a      	bne.n	80069ac <prvAddCurrentTaskToDelayedList+0x58>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d007      	beq.n	80069ac <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800699c:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	481a      	ldr	r0, [pc, #104]	; (8006a10 <prvAddCurrentTaskToDelayedList+0xbc>)
 80069a6:	f7fd ffae 	bl	8004906 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80069aa:	e026      	b.n	80069fa <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069b4:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d209      	bcs.n	80069d8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c4:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <prvAddCurrentTaskToDelayedList+0xc0>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3304      	adds	r3, #4
 80069ce:	4619      	mov	r1, r3
 80069d0:	4610      	mov	r0, r2
 80069d2:	f7fd ffbc 	bl	800494e <vListInsert>
}
 80069d6:	e010      	b.n	80069fa <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069d8:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <prvAddCurrentTaskToDelayedList+0xc4>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f7fd ffb2 	bl	800494e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80069ea:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <prvAddCurrentTaskToDelayedList+0xc8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d202      	bcs.n	80069fa <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80069f4:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <prvAddCurrentTaskToDelayedList+0xc8>)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	6013      	str	r3, [r2, #0]
}
 80069fa:	bf00      	nop
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000308 	.word	0x20000308
 8006a08:	2000022c 	.word	0x2000022c
 8006a0c:	2000030c 	.word	0x2000030c
 8006a10:	200002f0 	.word	0x200002f0
 8006a14:	200002c0 	.word	0x200002c0
 8006a18:	200002bc 	.word	0x200002bc
 8006a1c:	20000324 	.word	0x20000324

08006a20 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006a2a:	f000 fad3 	bl	8006fd4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <xTimerCreateTimerTask+0x48>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00b      	beq.n	8006a4e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <xTimerCreateTimerTask+0x4c>)
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	2304      	movs	r3, #4
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006a44:	490a      	ldr	r1, [pc, #40]	; (8006a70 <xTimerCreateTimerTask+0x50>)
 8006a46:	480b      	ldr	r0, [pc, #44]	; (8006a74 <xTimerCreateTimerTask+0x54>)
 8006a48:	f7fe fe9c 	bl	8005784 <xTaskCreate>
 8006a4c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <xTimerCreateTimerTask+0x3e>
 8006a54:	4908      	ldr	r1, [pc, #32]	; (8006a78 <xTimerCreateTimerTask+0x58>)
 8006a56:	f240 100d 	movw	r0, #269	; 0x10d
 8006a5a:	f7fa f81b 	bl	8000a94 <vAssertCalled>
        return xReturn;
 8006a5e:	687b      	ldr	r3, [r7, #4]
    }
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000360 	.word	0x20000360
 8006a6c:	20000364 	.word	0x20000364
 8006a70:	08010a4c 	.word	0x08010a4c
 8006a74:	08006ba5 	.word	0x08006ba5
 8006a78:	08010a54 	.word	0x08010a54

08006a7c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <xTimerGenericCommand+0x22>
 8006a94:	491c      	ldr	r1, [pc, #112]	; (8006b08 <xTimerGenericCommand+0x8c>)
 8006a96:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8006a9a:	f7f9 fffb 	bl	8000a94 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006a9e:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <xTimerGenericCommand+0x90>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d02a      	beq.n	8006afc <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b05      	cmp	r3, #5
 8006ab6:	dc18      	bgt.n	8006aea <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ab8:	f7ff fcb0 	bl	800641c <xTaskGetSchedulerState>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d109      	bne.n	8006ad6 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ac2:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <xTimerGenericCommand+0x90>)
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f107 0114 	add.w	r1, r7, #20
 8006aca:	2300      	movs	r3, #0
 8006acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ace:	f7fe f89b 	bl	8004c08 <xQueueGenericSend>
 8006ad2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ad4:	e012      	b.n	8006afc <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <xTimerGenericCommand+0x90>)
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	f107 0114 	add.w	r1, r7, #20
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f7fe f891 	bl	8004c08 <xQueueGenericSend>
 8006ae6:	6278      	str	r0, [r7, #36]	; 0x24
 8006ae8:	e008      	b.n	8006afc <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006aea:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <xTimerGenericCommand+0x90>)
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	f107 0114 	add.w	r1, r7, #20
 8006af2:	2300      	movs	r3, #0
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	f7fe f98b 	bl	8004e10 <xQueueGenericSendFromISR>
 8006afa:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006afe:	4618      	mov	r0, r3
 8006b00:	3728      	adds	r7, #40	; 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	08010a54 	.word	0x08010a54
 8006b0c:	20000360 	.word	0x20000360

08006b10 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1a:	4b20      	ldr	r3, [pc, #128]	; (8006b9c <prvProcessExpiredTimer+0x8c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fd ff49 	bl	80049c0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01d      	beq.n	8006b78 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	699a      	ldr	r2, [r3, #24]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	18d1      	adds	r1, r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f8cf 	bl	8006cec <prvInsertTimerInActiveList>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01a      	beq.n	8006b8a <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b54:	2300      	movs	r3, #0
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f7ff ff8c 	bl	8006a7c <xTimerGenericCommand>
 8006b64:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10e      	bne.n	8006b8a <prvProcessExpiredTimer+0x7a>
 8006b6c:	490c      	ldr	r1, [pc, #48]	; (8006ba0 <prvProcessExpiredTimer+0x90>)
 8006b6e:	f44f 7005 	mov.w	r0, #532	; 0x214
 8006b72:	f7f9 ff8f 	bl	8000a94 <vAssertCalled>
 8006b76:	e008      	b.n	8006b8a <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	4798      	blx	r3
    }
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000358 	.word	0x20000358
 8006ba0:	08010a54 	.word	0x08010a54

08006ba4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bac:	f107 0308 	add.w	r3, r7, #8
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 f857 	bl	8006c64 <prvGetNextExpireTime>
 8006bb6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f803 	bl	8006bc8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006bc2:	f000 f8d5 	bl	8006d70 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bc6:	e7f1      	b.n	8006bac <prvTimerTask+0x8>

08006bc8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006bd2:	f7ff f805 	bl	8005be0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bd6:	f107 0308 	add.w	r3, r7, #8
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f866 	bl	8006cac <prvSampleTimeNow>
 8006be0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d130      	bne.n	8006c4a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <prvProcessTimerOrBlockTask+0x3c>
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d806      	bhi.n	8006c04 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006bf6:	f7ff f801 	bl	8005bfc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ff87 	bl	8006b10 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006c02:	e024      	b.n	8006c4e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d008      	beq.n	8006c1c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c0a:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <prvProcessTimerOrBlockTask+0x90>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <prvProcessTimerOrBlockTask+0x50>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <prvProcessTimerOrBlockTask+0x52>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <prvProcessTimerOrBlockTask+0x94>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	f7fe fd1f 	bl	800566c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006c2e:	f7fe ffe5 	bl	8005bfc <xTaskResumeAll>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006c38:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <prvProcessTimerOrBlockTask+0x98>)
 8006c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	f3bf 8f6f 	isb	sy
    }
 8006c48:	e001      	b.n	8006c4e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006c4a:	f7fe ffd7 	bl	8005bfc <xTaskResumeAll>
    }
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	2000035c 	.word	0x2000035c
 8006c5c:	20000360 	.word	0x20000360
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <prvGetNextExpireTime+0x44>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <prvGetNextExpireTime+0x16>
 8006c76:	2201      	movs	r2, #1
 8006c78:	e000      	b.n	8006c7c <prvGetNextExpireTime+0x18>
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d105      	bne.n	8006c94 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c88:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <prvGetNextExpireTime+0x44>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	e001      	b.n	8006c98 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006c98:	68fb      	ldr	r3, [r7, #12]
    }
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	20000358 	.word	0x20000358

08006cac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006cb4:	f7ff f83a 	bl	8005d2c <xTaskGetTickCount>
 8006cb8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006cba:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <prvSampleTimeNow+0x3c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d205      	bcs.n	8006cd0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006cc4:	f000 f926 	bl	8006f14 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006cd6:	4a04      	ldr	r2, [pc, #16]	; (8006ce8 <prvSampleTimeNow+0x3c>)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
    }
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000368 	.word	0x20000368

08006cec <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d812      	bhi.n	8006d38 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e01b      	b.n	8006d5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d26:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <prvInsertTimerInActiveList+0x7c>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f7fd fe0c 	bl	800494e <vListInsert>
 8006d36:	e012      	b.n	8006d5e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d206      	bcs.n	8006d4e <prvInsertTimerInActiveList+0x62>
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d302      	bcc.n	8006d4e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	e007      	b.n	8006d5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d4e:	4b07      	ldr	r3, [pc, #28]	; (8006d6c <prvInsertTimerInActiveList+0x80>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3304      	adds	r3, #4
 8006d56:	4619      	mov	r1, r3
 8006d58:	4610      	mov	r0, r2
 8006d5a:	f7fd fdf8 	bl	800494e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006d5e:	697b      	ldr	r3, [r7, #20]
    }
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	2000035c 	.word	0x2000035c
 8006d6c:	20000358 	.word	0x20000358

08006d70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08c      	sub	sp, #48	; 0x30
 8006d74:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d76:	e0b9      	b.n	8006eec <prvProcessReceivedCommands+0x17c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	da13      	bge.n	8006da6 <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d7e:	f107 0308 	add.w	r3, r7, #8
 8006d82:	3304      	adds	r3, #4
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <prvProcessReceivedCommands+0x26>
 8006d8c:	495f      	ldr	r1, [pc, #380]	; (8006f0c <prvProcessReceivedCommands+0x19c>)
 8006d8e:	f240 20fa 	movw	r0, #762	; 0x2fa
 8006d92:	f7f9 fe7f 	bl	8000a94 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9c:	6850      	ldr	r0, [r2, #4]
 8006d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da0:	6892      	ldr	r2, [r2, #8]
 8006da2:	4611      	mov	r1, r2
 8006da4:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f2c0 809e 	blt.w	8006eea <prvProcessReceivedCommands+0x17a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fd fdfe 	bl	80049c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dc4:	1d3b      	adds	r3, r7, #4
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff ff70 	bl	8006cac <prvSampleTimeNow>
 8006dcc:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2b09      	cmp	r3, #9
 8006dd2:	f200 808b 	bhi.w	8006eec <prvProcessReceivedCommands+0x17c>
 8006dd6:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <prvProcessReceivedCommands+0x6c>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006e05 	.word	0x08006e05
 8006de0:	08006e05 	.word	0x08006e05
 8006de4:	08006e05 	.word	0x08006e05
 8006de8:	08006e6f 	.word	0x08006e6f
 8006dec:	08006e83 	.word	0x08006e83
 8006df0:	08006ec1 	.word	0x08006ec1
 8006df4:	08006e05 	.word	0x08006e05
 8006df8:	08006e05 	.word	0x08006e05
 8006dfc:	08006e6f 	.word	0x08006e6f
 8006e00:	08006e83 	.word	0x08006e83
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	18d1      	adds	r1, r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	6a38      	ldr	r0, [r7, #32]
 8006e24:	f7ff ff62 	bl	8006cec <prvInsertTimerInActiveList>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d05e      	beq.n	8006eec <prvProcessReceivedCommands+0x17c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	6a38      	ldr	r0, [r7, #32]
 8006e34:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d053      	beq.n	8006eec <prvProcessReceivedCommands+0x17c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	441a      	add	r2, r3
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	2300      	movs	r3, #0
 8006e52:	2100      	movs	r1, #0
 8006e54:	6a38      	ldr	r0, [r7, #32]
 8006e56:	f7ff fe11 	bl	8006a7c <xTimerGenericCommand>
 8006e5a:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d144      	bne.n	8006eec <prvProcessReceivedCommands+0x17c>
 8006e62:	492a      	ldr	r1, [pc, #168]	; (8006f0c <prvProcessReceivedCommands+0x19c>)
 8006e64:	f240 3036 	movw	r0, #822	; 0x336
 8006e68:	f7f9 fe14 	bl	8000a94 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006e6c:	e03e      	b.n	8006eec <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006e80:	e034      	b.n	8006eec <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <prvProcessReceivedCommands+0x13c>
 8006ea2:	491a      	ldr	r1, [pc, #104]	; (8006f0c <prvProcessReceivedCommands+0x19c>)
 8006ea4:	f240 304f 	movw	r0, #847	; 0x34f
 8006ea8:	f7f9 fdf4 	bl	8000a94 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	699a      	ldr	r2, [r3, #24]
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	18d1      	adds	r1, r2, r3
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	6a38      	ldr	r0, [r7, #32]
 8006eba:	f7ff ff17 	bl	8006cec <prvInsertTimerInActiveList>
                        break;
 8006ebe:	e015      	b.n	8006eec <prvProcessReceivedCommands+0x17c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 8006ece:	6a38      	ldr	r0, [r7, #32]
 8006ed0:	f000 f970 	bl	80071b4 <vPortFree>
 8006ed4:	e00a      	b.n	8006eec <prvProcessReceivedCommands+0x17c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006ee8:	e000      	b.n	8006eec <prvProcessReceivedCommands+0x17c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006eea:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eec:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <prvProcessReceivedCommands+0x1a0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f107 0108 	add.w	r1, r7, #8
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe f836 	bl	8004f68 <xQueueReceive>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f47f af3a 	bne.w	8006d78 <prvProcessReceivedCommands+0x8>
        }
    }
 8006f04:	bf00      	nop
 8006f06:	3728      	adds	r7, #40	; 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	08010a54 	.word	0x08010a54
 8006f10:	20000360 	.word	0x20000360

08006f14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f1a:	e042      	b.n	8006fa2 <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f1c:	4b2a      	ldr	r3, [pc, #168]	; (8006fc8 <prvSwitchTimerLists+0xb4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f26:	4b28      	ldr	r3, [pc, #160]	; (8006fc8 <prvSwitchTimerLists+0xb4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fd fd43 	bl	80049c0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d028      	beq.n	8006fa2 <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4413      	add	r3, r2
 8006f58:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d90e      	bls.n	8006f80 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f6e:	4b16      	ldr	r3, [pc, #88]	; (8006fc8 <prvSwitchTimerLists+0xb4>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7fd fce8 	bl	800494e <vListInsert>
 8006f7e:	e010      	b.n	8006fa2 <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f80:	2300      	movs	r3, #0
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	2300      	movs	r3, #0
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	2100      	movs	r1, #0
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7ff fd76 	bl	8006a7c <xTimerGenericCommand>
 8006f90:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d104      	bne.n	8006fa2 <prvSwitchTimerLists+0x8e>
 8006f98:	490c      	ldr	r1, [pc, #48]	; (8006fcc <prvSwitchTimerLists+0xb8>)
 8006f9a:	f240 30a9 	movw	r0, #937	; 0x3a9
 8006f9e:	f7f9 fd79 	bl	8000a94 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <prvSwitchTimerLists+0xb4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1b7      	bne.n	8006f1c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <prvSwitchTimerLists+0xb4>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006fb2:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <prvSwitchTimerLists+0xbc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a04      	ldr	r2, [pc, #16]	; (8006fc8 <prvSwitchTimerLists+0xb4>)
 8006fb8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006fba:	4a05      	ldr	r2, [pc, #20]	; (8006fd0 <prvSwitchTimerLists+0xbc>)
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	6013      	str	r3, [r2, #0]
    }
 8006fc0:	bf00      	nop
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000358 	.word	0x20000358
 8006fcc:	08010a54 	.word	0x08010a54
 8006fd0:	2000035c 	.word	0x2000035c

08006fd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006fd8:	f000 fb06 	bl	80075e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006fdc:	4b12      	ldr	r3, [pc, #72]	; (8007028 <prvCheckForValidListAndQueue+0x54>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d11d      	bne.n	8007020 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006fe4:	4811      	ldr	r0, [pc, #68]	; (800702c <prvCheckForValidListAndQueue+0x58>)
 8006fe6:	f7fd fc61 	bl	80048ac <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006fea:	4811      	ldr	r0, [pc, #68]	; (8007030 <prvCheckForValidListAndQueue+0x5c>)
 8006fec:	f7fd fc5e 	bl	80048ac <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006ff0:	4b10      	ldr	r3, [pc, #64]	; (8007034 <prvCheckForValidListAndQueue+0x60>)
 8006ff2:	4a0e      	ldr	r2, [pc, #56]	; (800702c <prvCheckForValidListAndQueue+0x58>)
 8006ff4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006ff6:	4b10      	ldr	r3, [pc, #64]	; (8007038 <prvCheckForValidListAndQueue+0x64>)
 8006ff8:	4a0d      	ldr	r2, [pc, #52]	; (8007030 <prvCheckForValidListAndQueue+0x5c>)
 8006ffa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2110      	movs	r1, #16
 8007000:	2005      	movs	r0, #5
 8007002:	f7fd fd6b 	bl	8004adc <xQueueGenericCreate>
 8007006:	4602      	mov	r2, r0
 8007008:	4b07      	ldr	r3, [pc, #28]	; (8007028 <prvCheckForValidListAndQueue+0x54>)
 800700a:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <prvCheckForValidListAndQueue+0x54>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <prvCheckForValidListAndQueue+0x54>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4908      	ldr	r1, [pc, #32]	; (800703c <prvCheckForValidListAndQueue+0x68>)
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fad4 	bl	80055c8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007020:	f000 fb0e 	bl	8007640 <vPortExitCritical>
    }
 8007024:	bf00      	nop
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000360 	.word	0x20000360
 800702c:	20000330 	.word	0x20000330
 8007030:	20000344 	.word	0x20000344
 8007034:	20000358 	.word	0x20000358
 8007038:	2000035c 	.word	0x2000035c
 800703c:	08010a7c 	.word	0x08010a7c

08007040 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 800704c:	f7fe fdc8 	bl	8005be0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007050:	4b51      	ldr	r3, [pc, #324]	; (8007198 <pvPortMalloc+0x158>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007058:	f000 f904 	bl	8007264 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800705c:	4b4f      	ldr	r3, [pc, #316]	; (800719c <pvPortMalloc+0x15c>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4013      	ands	r3, r2
 8007064:	2b00      	cmp	r3, #0
 8007066:	f040 8085 	bne.w	8007174 <pvPortMalloc+0x134>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d016      	beq.n	800709e <pvPortMalloc+0x5e>
            {
                xWantedSize += xHeapStructSize;
 8007070:	2208      	movs	r2, #8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <pvPortMalloc+0x5e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f023 0307 	bic.w	r3, r3, #7
 8007088:	3308      	adds	r3, #8
 800708a:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <pvPortMalloc+0x5e>
 8007096:	4942      	ldr	r1, [pc, #264]	; (80071a0 <pvPortMalloc+0x160>)
 8007098:	2097      	movs	r0, #151	; 0x97
 800709a:	f7f9 fcfb 	bl	8000a94 <vAssertCalled>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d067      	beq.n	8007174 <pvPortMalloc+0x134>
 80070a4:	4b3f      	ldr	r3, [pc, #252]	; (80071a4 <pvPortMalloc+0x164>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d862      	bhi.n	8007174 <pvPortMalloc+0x134>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 80070ae:	4b3e      	ldr	r3, [pc, #248]	; (80071a8 <pvPortMalloc+0x168>)
 80070b0:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 80070b2:	4b3d      	ldr	r3, [pc, #244]	; (80071a8 <pvPortMalloc+0x168>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070b8:	e004      	b.n	80070c4 <pvPortMalloc+0x84>
                {
                    pxPreviousBlock = pxBlock;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d903      	bls.n	80070d6 <pvPortMalloc+0x96>
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f1      	bne.n	80070ba <pvPortMalloc+0x7a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 80070d6:	4b30      	ldr	r3, [pc, #192]	; (8007198 <pvPortMalloc+0x158>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d049      	beq.n	8007174 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2208      	movs	r2, #8
 80070e6:	4413      	add	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	2308      	movs	r3, #8
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	429a      	cmp	r2, r3
 8007100:	d918      	bls.n	8007134 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4413      	add	r3, r2
 8007108:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <pvPortMalloc+0xdc>
 8007114:	4922      	ldr	r1, [pc, #136]	; (80071a0 <pvPortMalloc+0x160>)
 8007116:	20c5      	movs	r0, #197	; 0xc5
 8007118:	f7f9 fcbc 	bl	8000a94 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800712e:	68b8      	ldr	r0, [r7, #8]
 8007130:	f000 f8fa 	bl	8007328 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007134:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <pvPortMalloc+0x164>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <pvPortMalloc+0x164>)
 8007140:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007142:	4b18      	ldr	r3, [pc, #96]	; (80071a4 <pvPortMalloc+0x164>)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4b19      	ldr	r3, [pc, #100]	; (80071ac <pvPortMalloc+0x16c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d203      	bcs.n	8007156 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800714e:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <pvPortMalloc+0x164>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a16      	ldr	r2, [pc, #88]	; (80071ac <pvPortMalloc+0x16c>)
 8007154:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	4b10      	ldr	r3, [pc, #64]	; (800719c <pvPortMalloc+0x15c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	431a      	orrs	r2, r3
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800716a:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <pvPortMalloc+0x170>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3301      	adds	r3, #1
 8007170:	4a0f      	ldr	r2, [pc, #60]	; (80071b0 <pvPortMalloc+0x170>)
 8007172:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007174:	f7fe fd42 	bl	8005bfc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	2b00      	cmp	r3, #0
 8007180:	d004      	beq.n	800718c <pvPortMalloc+0x14c>
 8007182:	4907      	ldr	r1, [pc, #28]	; (80071a0 <pvPortMalloc+0x160>)
 8007184:	f44f 7083 	mov.w	r0, #262	; 0x106
 8007188:	f7f9 fc84 	bl	8000a94 <vAssertCalled>
    return pvReturn;
 800718c:	68fb      	ldr	r3, [r7, #12]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	2000bb74 	.word	0x2000bb74
 800719c:	2000bb88 	.word	0x2000bb88
 80071a0:	08010a84 	.word	0x08010a84
 80071a4:	2000bb78 	.word	0x2000bb78
 80071a8:	2000bb6c 	.word	0x2000bb6c
 80071ac:	2000bb7c 	.word	0x2000bb7c
 80071b0:	2000bb80 	.word	0x2000bb80

080071b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d041      	beq.n	800724a <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80071c6:	2308      	movs	r3, #8
 80071c8:	425b      	negs	r3, r3
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	4b1e      	ldr	r3, [pc, #120]	; (8007254 <vPortFree+0xa0>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4013      	ands	r3, r2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <vPortFree+0x38>
 80071e2:	491d      	ldr	r1, [pc, #116]	; (8007258 <vPortFree+0xa4>)
 80071e4:	f44f 708d 	mov.w	r0, #282	; 0x11a
 80071e8:	f7f9 fc54 	bl	8000a94 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <vPortFree+0x4a>
 80071f4:	4918      	ldr	r1, [pc, #96]	; (8007258 <vPortFree+0xa4>)
 80071f6:	f240 101b 	movw	r0, #283	; 0x11b
 80071fa:	f7f9 fc4b 	bl	8000a94 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	4b14      	ldr	r3, [pc, #80]	; (8007254 <vPortFree+0xa0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4013      	ands	r3, r2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01e      	beq.n	800724a <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d11a      	bne.n	800724a <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <vPortFree+0xa0>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	43db      	mvns	r3, r3
 800721e:	401a      	ands	r2, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007224:	f7fe fcdc 	bl	8005be0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	4b0b      	ldr	r3, [pc, #44]	; (800725c <vPortFree+0xa8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4413      	add	r3, r2
 8007232:	4a0a      	ldr	r2, [pc, #40]	; (800725c <vPortFree+0xa8>)
 8007234:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007236:	68b8      	ldr	r0, [r7, #8]
 8007238:	f000 f876 	bl	8007328 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800723c:	4b08      	ldr	r3, [pc, #32]	; (8007260 <vPortFree+0xac>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	4a07      	ldr	r2, [pc, #28]	; (8007260 <vPortFree+0xac>)
 8007244:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007246:	f7fe fcd9 	bl	8005bfc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	2000bb88 	.word	0x2000bb88
 8007258:	08010a84 	.word	0x08010a84
 800725c:	2000bb78 	.word	0x2000bb78
 8007260:	2000bb84 	.word	0x2000bb84

08007264 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800726a:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 800726e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007270:	4b27      	ldr	r3, [pc, #156]	; (8007310 <prvHeapInit+0xac>)
 8007272:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3307      	adds	r3, #7
 8007282:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0307 	bic.w	r3, r3, #7
 800728a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	4a1f      	ldr	r2, [pc, #124]	; (8007310 <prvHeapInit+0xac>)
 8007294:	4413      	add	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800729c:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <prvHeapInit+0xb0>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80072a2:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <prvHeapInit+0xb0>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4413      	add	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80072b0:	2208      	movs	r2, #8
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a15      	ldr	r2, [pc, #84]	; (8007318 <prvHeapInit+0xb4>)
 80072c4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <prvHeapInit+0xb4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <prvHeapInit+0xb4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <prvHeapInit+0xb4>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4a0a      	ldr	r2, [pc, #40]	; (800731c <prvHeapInit+0xb8>)
 80072f2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4a09      	ldr	r2, [pc, #36]	; (8007320 <prvHeapInit+0xbc>)
 80072fa:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072fc:	4b09      	ldr	r3, [pc, #36]	; (8007324 <prvHeapInit+0xc0>)
 80072fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007302:	601a      	str	r2, [r3, #0]
}
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	2000036c 	.word	0x2000036c
 8007314:	2000bb6c 	.word	0x2000bb6c
 8007318:	2000bb74 	.word	0x2000bb74
 800731c:	2000bb7c 	.word	0x2000bb7c
 8007320:	2000bb78 	.word	0x2000bb78
 8007324:	2000bb88 	.word	0x2000bb88

08007328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007330:	4b28      	ldr	r3, [pc, #160]	; (80073d4 <prvInsertBlockIntoFreeList+0xac>)
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e002      	b.n	800733c <prvInsertBlockIntoFreeList+0x14>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d8f7      	bhi.n	8007336 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4413      	add	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d108      	bne.n	800736a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	441a      	add	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d118      	bne.n	80073b0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <prvInsertBlockIntoFreeList+0xb0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d00d      	beq.n	80073a6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	441a      	add	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	e008      	b.n	80073b8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <prvInsertBlockIntoFreeList+0xb0>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e003      	b.n	80073b8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d002      	beq.n	80073c6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	2000bb6c 	.word	0x2000bb6c
 80073d8:	2000bb74 	.word	0x2000bb74

080073dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3b04      	subs	r3, #4
 80073ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3b04      	subs	r3, #4
 80073fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f023 0201 	bic.w	r2, r3, #1
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b04      	subs	r3, #4
 800740a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800740c:	4a0c      	ldr	r2, [pc, #48]	; (8007440 <pxPortInitialiseStack+0x64>)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3b14      	subs	r3, #20
 8007416:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3b04      	subs	r3, #4
 8007422:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f06f 0202 	mvn.w	r2, #2
 800742a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3b20      	subs	r3, #32
 8007430:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007432:	68fb      	ldr	r3, [r7, #12]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	08007445 	.word	0x08007445

08007444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800744a:	2300      	movs	r3, #0
 800744c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800744e:	4b0e      	ldr	r3, [pc, #56]	; (8007488 <prvTaskExitError+0x44>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d003      	beq.n	8007460 <prvTaskExitError+0x1c>
 8007458:	490c      	ldr	r1, [pc, #48]	; (800748c <prvTaskExitError+0x48>)
 800745a:	20df      	movs	r0, #223	; 0xdf
 800745c:	f7f9 fb1a 	bl	8000a94 <vAssertCalled>
        __asm volatile
 8007460:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007464:	b672      	cpsid	i
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	b662      	cpsie	i
 8007474:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007476:	bf00      	nop
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0fc      	beq.n	8007478 <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000010 	.word	0x20000010
 800748c:	08010abc 	.word	0x08010abc

08007490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <pxCurrentTCBConst2>)
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	6808      	ldr	r0, [r1, #0]
 8007496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	f380 8809 	msr	PSP, r0
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8811 	msr	BASEPRI, r0
 80074aa:	4770      	bx	lr
 80074ac:	f3af 8000 	nop.w

080074b0 <pxCurrentTCBConst2>:
 80074b0:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop

080074b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80074b8:	4808      	ldr	r0, [pc, #32]	; (80074dc <prvPortStartFirstTask+0x24>)
 80074ba:	6800      	ldr	r0, [r0, #0]
 80074bc:	6800      	ldr	r0, [r0, #0]
 80074be:	f380 8808 	msr	MSP, r0
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8814 	msr	CONTROL, r0
 80074ca:	b662      	cpsie	i
 80074cc:	b661      	cpsie	f
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	df00      	svc	0
 80074d8:	bf00      	nop
 80074da:	0000      	.short	0x0000
 80074dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop

080074e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074ea:	4b38      	ldr	r3, [pc, #224]	; (80075cc <xPortStartScheduler+0xe8>)
 80074ec:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	22ff      	movs	r2, #255	; 0xff
 80074fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750c:	b2da      	uxtb	r2, r3
 800750e:	4b30      	ldr	r3, [pc, #192]	; (80075d0 <xPortStartScheduler+0xec>)
 8007510:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007512:	4b30      	ldr	r3, [pc, #192]	; (80075d4 <xPortStartScheduler+0xf0>)
 8007514:	2207      	movs	r2, #7
 8007516:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007518:	e009      	b.n	800752e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800751a:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <xPortStartScheduler+0xf0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3b01      	subs	r3, #1
 8007520:	4a2c      	ldr	r2, [pc, #176]	; (80075d4 <xPortStartScheduler+0xf0>)
 8007522:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007536:	2b80      	cmp	r3, #128	; 0x80
 8007538:	d0ef      	beq.n	800751a <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800753a:	4b26      	ldr	r3, [pc, #152]	; (80075d4 <xPortStartScheduler+0xf0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1c3 0307 	rsb	r3, r3, #7
 8007542:	2b04      	cmp	r3, #4
 8007544:	d004      	beq.n	8007550 <xPortStartScheduler+0x6c>
 8007546:	4924      	ldr	r1, [pc, #144]	; (80075d8 <xPortStartScheduler+0xf4>)
 8007548:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800754c:	f7f9 faa2 	bl	8000a94 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007550:	4b20      	ldr	r3, [pc, #128]	; (80075d4 <xPortStartScheduler+0xf0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f1c3 0307 	rsb	r3, r3, #7
 8007558:	2b04      	cmp	r3, #4
 800755a:	d004      	beq.n	8007566 <xPortStartScheduler+0x82>
 800755c:	491e      	ldr	r1, [pc, #120]	; (80075d8 <xPortStartScheduler+0xf4>)
 800755e:	f240 1053 	movw	r0, #339	; 0x153
 8007562:	f7f9 fa97 	bl	8000a94 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007566:	4b1b      	ldr	r3, [pc, #108]	; (80075d4 <xPortStartScheduler+0xf0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	4a19      	ldr	r2, [pc, #100]	; (80075d4 <xPortStartScheduler+0xf0>)
 800756e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007570:	4b18      	ldr	r3, [pc, #96]	; (80075d4 <xPortStartScheduler+0xf0>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007578:	4a16      	ldr	r2, [pc, #88]	; (80075d4 <xPortStartScheduler+0xf0>)
 800757a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007584:	4b15      	ldr	r3, [pc, #84]	; (80075dc <xPortStartScheduler+0xf8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a14      	ldr	r2, [pc, #80]	; (80075dc <xPortStartScheduler+0xf8>)
 800758a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800758e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007590:	4b12      	ldr	r3, [pc, #72]	; (80075dc <xPortStartScheduler+0xf8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a11      	ldr	r2, [pc, #68]	; (80075dc <xPortStartScheduler+0xf8>)
 8007596:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800759a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800759c:	f000 f8ce 	bl	800773c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80075a0:	4b0f      	ldr	r3, [pc, #60]	; (80075e0 <xPortStartScheduler+0xfc>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80075a6:	f000 f8ed 	bl	8007784 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075aa:	4b0e      	ldr	r3, [pc, #56]	; (80075e4 <xPortStartScheduler+0x100>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a0d      	ldr	r2, [pc, #52]	; (80075e4 <xPortStartScheduler+0x100>)
 80075b0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075b4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80075b6:	f7ff ff7f 	bl	80074b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80075ba:	f7fe fc7b 	bl	8005eb4 <vTaskSwitchContext>
    prvTaskExitError();
 80075be:	f7ff ff41 	bl	8007444 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	e000e400 	.word	0xe000e400
 80075d0:	2000bb8c 	.word	0x2000bb8c
 80075d4:	2000bb90 	.word	0x2000bb90
 80075d8:	08010abc 	.word	0x08010abc
 80075dc:	e000ed20 	.word	0xe000ed20
 80075e0:	20000010 	.word	0x20000010
 80075e4:	e000ef34 	.word	0xe000ef34

080075e8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 80075f2:	b672      	cpsid	i
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	b662      	cpsie	i
 8007602:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <vPortEnterCritical+0x4c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <vPortEnterCritical+0x4c>)
 800760c:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800760e:	4b09      	ldr	r3, [pc, #36]	; (8007634 <vPortEnterCritical+0x4c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d109      	bne.n	800762a <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007616:	4b08      	ldr	r3, [pc, #32]	; (8007638 <vPortEnterCritical+0x50>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <vPortEnterCritical+0x42>
 8007620:	4906      	ldr	r1, [pc, #24]	; (800763c <vPortEnterCritical+0x54>)
 8007622:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8007626:	f7f9 fa35 	bl	8000a94 <vAssertCalled>
    }
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000010 	.word	0x20000010
 8007638:	e000ed04 	.word	0xe000ed04
 800763c:	08010abc 	.word	0x08010abc

08007640 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <vPortExitCritical+0x3c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <vPortExitCritical+0x18>
 800764e:	490c      	ldr	r1, [pc, #48]	; (8007680 <vPortExitCritical+0x40>)
 8007650:	f240 109f 	movw	r0, #415	; 0x19f
 8007654:	f7f9 fa1e 	bl	8000a94 <vAssertCalled>
    uxCriticalNesting--;
 8007658:	4b08      	ldr	r3, [pc, #32]	; (800767c <vPortExitCritical+0x3c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3b01      	subs	r3, #1
 800765e:	4a07      	ldr	r2, [pc, #28]	; (800767c <vPortExitCritical+0x3c>)
 8007660:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007662:	4b06      	ldr	r3, [pc, #24]	; (800767c <vPortExitCritical+0x3c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d104      	bne.n	8007674 <vPortExitCritical+0x34>
 800766a:	2300      	movs	r3, #0
 800766c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000010 	.word	0x20000010
 8007680:	08010abc 	.word	0x08010abc
	...

08007690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007690:	f3ef 8009 	mrs	r0, PSP
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <pxCurrentTCBConst>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	f01e 0f10 	tst.w	lr, #16
 80076a0:	bf08      	it	eq
 80076a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076aa:	6010      	str	r0, [r2, #0]
 80076ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076b0:	f04f 0040 	mov.w	r0, #64	; 0x40
 80076b4:	b672      	cpsid	i
 80076b6:	f380 8811 	msr	BASEPRI, r0
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	b662      	cpsie	i
 80076c4:	f7fe fbf6 	bl	8005eb4 <vTaskSwitchContext>
 80076c8:	f04f 0000 	mov.w	r0, #0
 80076cc:	f380 8811 	msr	BASEPRI, r0
 80076d0:	bc09      	pop	{r0, r3}
 80076d2:	6819      	ldr	r1, [r3, #0]
 80076d4:	6808      	ldr	r0, [r1, #0]
 80076d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076da:	f01e 0f10 	tst.w	lr, #16
 80076de:	bf08      	it	eq
 80076e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076e4:	f380 8809 	msr	PSP, r0
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop

080076f0 <pxCurrentTCBConst>:
 80076f0:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop

080076f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
        __asm volatile
 80076fe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007702:	b672      	cpsid	i
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	b662      	cpsie	i
 8007712:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007714:	f7fe fb1a 	bl	8005d4c <xTaskIncrementTick>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <SysTick_Handler+0x2e>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <SysTick_Handler+0x40>)
 8007720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	2300      	movs	r3, #0
 8007728:	603b      	str	r3, [r7, #0]
        __asm volatile
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <vPortSetupTimerInterrupt+0x34>)
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007746:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <vPortSetupTimerInterrupt+0x38>)
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <vPortSetupTimerInterrupt+0x3c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a0a      	ldr	r2, [pc, #40]	; (800777c <vPortSetupTimerInterrupt+0x40>)
 8007752:	fba2 2303 	umull	r2, r3, r2, r3
 8007756:	099b      	lsrs	r3, r3, #6
 8007758:	4a09      	ldr	r2, [pc, #36]	; (8007780 <vPortSetupTimerInterrupt+0x44>)
 800775a:	3b01      	subs	r3, #1
 800775c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <vPortSetupTimerInterrupt+0x34>)
 8007760:	2207      	movs	r2, #7
 8007762:	601a      	str	r2, [r3, #0]
}
 8007764:	bf00      	nop
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	e000e010 	.word	0xe000e010
 8007774:	e000e018 	.word	0xe000e018
 8007778:	20000000 	.word	0x20000000
 800777c:	10624dd3 	.word	0x10624dd3
 8007780:	e000e014 	.word	0xe000e014

08007784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007794 <vPortEnableVFP+0x10>
 8007788:	6801      	ldr	r1, [r0, #0]
 800778a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800778e:	6001      	str	r1, [r0, #0]
 8007790:	4770      	bx	lr
 8007792:	0000      	.short	0x0000
 8007794:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop

0800779c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80077a2:	f3ef 8305 	mrs	r3, IPSR
 80077a6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b0f      	cmp	r3, #15
 80077ac:	d90e      	bls.n	80077cc <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077ae:	4a10      	ldr	r2, [pc, #64]	; (80077f0 <vPortValidateInterruptPriority+0x54>)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4413      	add	r3, r2
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077b8:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <vPortValidateInterruptPriority+0x58>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d204      	bcs.n	80077cc <vPortValidateInterruptPriority+0x30>
 80077c2:	490d      	ldr	r1, [pc, #52]	; (80077f8 <vPortValidateInterruptPriority+0x5c>)
 80077c4:	f240 20f2 	movw	r0, #754	; 0x2f2
 80077c8:	f7f9 f964 	bl	8000a94 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077cc:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <vPortValidateInterruptPriority+0x60>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077d4:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <vPortValidateInterruptPriority+0x64>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d904      	bls.n	80077e6 <vPortValidateInterruptPriority+0x4a>
 80077dc:	4906      	ldr	r1, [pc, #24]	; (80077f8 <vPortValidateInterruptPriority+0x5c>)
 80077de:	f240 3002 	movw	r0, #770	; 0x302
 80077e2:	f7f9 f957 	bl	8000a94 <vAssertCalled>
    }
 80077e6:	bf00      	nop
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	e000e3f0 	.word	0xe000e3f0
 80077f4:	2000bb8c 	.word	0x2000bb8c
 80077f8:	08010abc 	.word	0x08010abc
 80077fc:	e000ed0c 	.word	0xe000ed0c
 8007800:	2000bb90 	.word	0x2000bb90

08007804 <vCastPointerTo_ARPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xARP_PACKET ARPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ARPPacket_t )
    {
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 800780c:	687b      	ldr	r3, [r7, #4]
    }
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <eARPProcessPacket>:
 * @param[in] pxARPFrame: The ARP Frame (the ARP packet).
 *
 * @return An enum which says whether to return the frame or to release it.
 */
eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8007824:	2300      	movs	r3, #0
 8007826:	77fb      	strb	r3, [r7, #31]
    uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;
/* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    pxARPHeader = &( pxARPFrame->xARPHeader );
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	330e      	adds	r3, #14
 800782c:	61bb      	str	r3, [r7, #24]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	330e      	adds	r3, #14
 8007832:	617b      	str	r3, [r7, #20]
    pvCopyDest = &ulSenderProtocolAddress;
 8007834:	f107 0308 	add.w	r3, r7, #8
 8007838:	613b      	str	r3, [r7, #16]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	601a      	str	r2, [r3, #0]
    /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
    ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	60fb      	str	r3, [r7, #12]

    traceARP_PACKET_RECEIVED();

    /* Don't do anything if the local IP address is zero because
     * that means a DHCP request has not completed. */
    if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800784a:	4b3a      	ldr	r3, [pc, #232]	; (8007934 <eARPProcessPacket+0x118>)
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d068      	beq.n	8007924 <eARPProcessPacket+0x108>
    {
        switch( pxARPHeader->usOperation )
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	88db      	ldrh	r3, [r3, #6]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785c:	d003      	beq.n	8007866 <eARPProcessPacket+0x4a>
 800785e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007862:	d057      	beq.n	8007914 <eARPProcessPacket+0xf8>
                #endif /* ipconfigARP_USE_CLASH_DETECTION */
                break;

            default:
                /* Invalid. */
                break;
 8007864:	e061      	b.n	800792a <eARPProcessPacket+0x10e>
                if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8007866:	4b33      	ldr	r3, [pc, #204]	; (8007934 <eARPProcessPacket+0x118>)
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	429a      	cmp	r2, r3
 800786e:	d15b      	bne.n	8007928 <eARPProcessPacket+0x10c>
                    vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	3308      	adds	r3, #8
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	4611      	mov	r1, r2
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f861 	bl	8007940 <vARPRefreshCacheEntry>
                    pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2200      	movs	r2, #0
 8007882:	719a      	strb	r2, [r3, #6]
 8007884:	2200      	movs	r2, #0
 8007886:	f042 0202 	orr.w	r2, r2, #2
 800788a:	71da      	strb	r2, [r3, #7]
                    if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	429a      	cmp	r2, r3
 8007892:	d11a      	bne.n	80078ca <eARPProcessPacket+0xae>
                        pvCopySource = xBroadcastMACAddress.ucBytes;
 8007894:	4b28      	ldr	r3, [pc, #160]	; (8007938 <eARPProcessPacket+0x11c>)
 8007896:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3306      	adds	r3, #6
 800789c:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 800789e:	2206      	movs	r2, #6
 80078a0:	6979      	ldr	r1, [r7, #20]
 80078a2:	6938      	ldr	r0, [r7, #16]
 80078a4:	f008 fbfd 	bl	80100a2 <memcpy>
                        ( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	3312      	adds	r3, #18
 80078ac:	2206      	movs	r2, #6
 80078ae:	2100      	movs	r1, #0
 80078b0:	4618      	mov	r0, r3
 80078b2:	f008 fc1a 	bl	80100ea <memset>
                        pxARPHeader->ulTargetProtocolAddress = 0UL;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2200      	movs	r2, #0
 80078ba:	761a      	strb	r2, [r3, #24]
 80078bc:	2200      	movs	r2, #0
 80078be:	765a      	strb	r2, [r3, #25]
 80078c0:	2200      	movs	r2, #0
 80078c2:	769a      	strb	r2, [r3, #26]
 80078c4:	2200      	movs	r2, #0
 80078c6:	76da      	strb	r2, [r3, #27]
 80078c8:	e00d      	b.n	80078e6 <eARPProcessPacket+0xca>
                        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	3308      	adds	r3, #8
 80078ce:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	3312      	adds	r3, #18
 80078d4:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80078d6:	2206      	movs	r2, #6
 80078d8:	6979      	ldr	r1, [r7, #20]
 80078da:	6938      	ldr	r0, [r7, #16]
 80078dc:	f008 fbe1 	bl	80100a2 <memcpy>
                        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	619a      	str	r2, [r3, #24]
                    pvCopySource = ipLOCAL_MAC_ADDRESS;
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <eARPProcessPacket+0x118>)
 80078e8:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	3308      	adds	r3, #8
 80078ee:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80078f0:	2206      	movs	r2, #6
 80078f2:	6979      	ldr	r1, [r7, #20]
 80078f4:	6938      	ldr	r0, [r7, #16]
 80078f6:	f008 fbd4 	bl	80100a2 <memcpy>
                    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <eARPProcessPacket+0x120>)
 80078fc:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	330e      	adds	r3, #14
 8007902:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	601a      	str	r2, [r3, #0]
                    eReturn = eReturnEthernetFrame;
 800790e:	2302      	movs	r3, #2
 8007910:	77fb      	strb	r3, [r7, #31]
                break;
 8007912:	e009      	b.n	8007928 <eARPProcessPacket+0x10c>
                vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	3308      	adds	r3, #8
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f000 f80f 	bl	8007940 <vARPRefreshCacheEntry>
                break;
 8007922:	e002      	b.n	800792a <eARPProcessPacket+0x10e>
        }
    }
 8007924:	bf00      	nop
 8007926:	e000      	b.n	800792a <eARPProcessPacket+0x10e>
                break;
 8007928:	bf00      	nop

    return eReturn;
 800792a:	7ffb      	ldrb	r3, [r7, #31]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3720      	adds	r7, #32
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000014 	.word	0x20000014
 8007938:	08011420 	.word	0x08011420
 800793c:	20000028 	.word	0x20000028

08007940 <vARPRefreshCacheEntry>:
 * @param[in] ulIPAddress: 32-bit representation of the IP-address whose mapping
 *                         is being updated.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
    BaseType_t x = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]
    BaseType_t xIpEntry = -1;
 800794e:	f04f 33ff 	mov.w	r3, #4294967295
 8007952:	61bb      	str	r3, [r7, #24]
    BaseType_t xMacEntry = -1;
 8007954:	f04f 33ff 	mov.w	r3, #4294967295
 8007958:	617b      	str	r3, [r7, #20]
    BaseType_t xUseEntry = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	613b      	str	r3, [r7, #16]
    uint8_t ucMinAgeFound = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )

        /* Only process the IP address if it is on the local network.
         * Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
         * and netmask are still unknown. */
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8007962:	4b70      	ldr	r3, [pc, #448]	; (8007b24 <vARPRefreshCacheEntry+0x1e4>)
 8007964:	695a      	ldr	r2, [r3, #20]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	405a      	eors	r2, r3
 800796a:	4b6f      	ldr	r3, [pc, #444]	; (8007b28 <vARPRefreshCacheEntry+0x1e8>)
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	4013      	ands	r3, r2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d004      	beq.n	800797e <vARPRefreshCacheEntry+0x3e>
            ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 8007974:	4b6b      	ldr	r3, [pc, #428]	; (8007b24 <vARPRefreshCacheEntry+0x1e4>)
 8007976:	695b      	ldr	r3, [r3, #20]
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8007978:	2b00      	cmp	r3, #0
 800797a:	f040 80d0 	bne.w	8007b1e <vARPRefreshCacheEntry+0x1de>

        if( pdTRUE )
    #endif
    {
        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	3b01      	subs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007984:	2300      	movs	r3, #0
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	e067      	b.n	8007a5a <vARPRefreshCacheEntry+0x11a>
        {
            BaseType_t xMatchingMAC;

            if( pxMACAddress != NULL )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d015      	beq.n	80079bc <vARPRefreshCacheEntry+0x7c>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	4613      	mov	r3, r2
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4a64      	ldr	r2, [pc, #400]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 800799c:	4413      	add	r3, r2
 800799e:	3304      	adds	r3, #4
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	2206      	movs	r2, #6
 80079a4:	4618      	mov	r0, r3
 80079a6:	f008 fb6d 	bl	8010084 <memcmp>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <vARPRefreshCacheEntry+0x76>
                {
                    xMatchingMAC = pdTRUE;
 80079b0:	2301      	movs	r3, #1
 80079b2:	60bb      	str	r3, [r7, #8]
 80079b4:	e004      	b.n	80079c0 <vARPRefreshCacheEntry+0x80>
                }
                else
                {
                    xMatchingMAC = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60bb      	str	r3, [r7, #8]
 80079ba:	e001      	b.n	80079c0 <vARPRefreshCacheEntry+0x80>
                }
            }
            else
            {
                xMatchingMAC = pdFALSE;
 80079bc:	2300      	movs	r3, #0
 80079be:	60bb      	str	r3, [r7, #8]
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80079c0:	495a      	ldr	r1, [pc, #360]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	4613      	mov	r3, r2
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d120      	bne.n	8007a18 <vARPRefreshCacheEntry+0xd8>
            {
                if( pxMACAddress == NULL )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <vARPRefreshCacheEntry+0xa2>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    xIpEntry = x;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	61bb      	str	r3, [r7, #24]
                    break;
 80079e0:	e03e      	b.n	8007a60 <vARPRefreshCacheEntry+0x120>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d014      	beq.n	8007a12 <vARPRefreshCacheEntry+0xd2>
                {
                    /* This function will be called for each received packet
                     * As this is by far the most common path the coding standard
                     * is relaxed in this case and a return is permitted as an
                     * optimisation. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80079e8:	4950      	ldr	r1, [pc, #320]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	4613      	mov	r3, r2
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	330a      	adds	r3, #10
 80079f8:	2296      	movs	r2, #150	; 0x96
 80079fa:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80079fc:	494b      	ldr	r1, [pc, #300]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	4613      	mov	r3, r2
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	440b      	add	r3, r1
 8007a0a:	330b      	adds	r3, #11
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	701a      	strb	r2, [r3, #0]
                    return;
 8007a10:	e085      	b.n	8007b1e <vARPRefreshCacheEntry+0x1de>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                xIpEntry = x;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	e01d      	b.n	8007a54 <vARPRefreshCacheEntry+0x114>
            }
            else if( xMatchingMAC != pdFALSE )
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <vARPRefreshCacheEntry+0xe4>
                    if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
                    {
                        xMacEntry = x;
                    }
                #else /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
                    xMacEntry = x;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	e017      	b.n	8007a54 <vARPRefreshCacheEntry+0x114>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8007a24:	4941      	ldr	r1, [pc, #260]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 8007a26:	69fa      	ldr	r2, [r7, #28]
 8007a28:	4613      	mov	r3, r2
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	330a      	adds	r3, #10
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	7bfa      	ldrb	r2, [r7, #15]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d90b      	bls.n	8007a54 <vARPRefreshCacheEntry+0x114>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 8007a3c:	493b      	ldr	r1, [pc, #236]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 8007a3e:	69fa      	ldr	r2, [r7, #28]
 8007a40:	4613      	mov	r3, r2
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	330a      	adds	r3, #10
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	73fb      	strb	r3, [r7, #15]
                xUseEntry = x;
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	613b      	str	r3, [r7, #16]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	3301      	adds	r3, #1
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	dd94      	ble.n	800798a <vARPRefreshCacheEntry+0x4a>
            {
                /* Nothing happens to this cache entry for now. */
            }
        }

        if( xMacEntry >= 0 )
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	db11      	blt.n	8007a8a <vARPRefreshCacheEntry+0x14a>
        {
            xUseEntry = xMacEntry;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	613b      	str	r3, [r7, #16]

            if( xIpEntry >= 0 )
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	db11      	blt.n	8007a94 <vARPRefreshCacheEntry+0x154>
            {
                /* Both the MAC address as well as the IP address were found in
                 * different locations: clear the entry which matches the
                 * IP-address */
                ( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	4613      	mov	r3, r2
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 8007a7c:	4413      	add	r3, r2
 8007a7e:	220c      	movs	r2, #12
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f008 fb31 	bl	80100ea <memset>
 8007a88:	e004      	b.n	8007a94 <vARPRefreshCacheEntry+0x154>
            }
        }
        else if( xIpEntry >= 0 )
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	db01      	blt.n	8007a94 <vARPRefreshCacheEntry+0x154>
        {
            /* An entry containing the IP-address was found, but it had a different MAC address */
            xUseEntry = xIpEntry;
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	613b      	str	r3, [r7, #16]
        {
            /* No matching entry found. */
        }

        /* If the entry was not found, we use the oldest entry and set the IPaddress */
        xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8007a94:	4925      	ldr	r1, [pc, #148]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	601a      	str	r2, [r3, #0]

        if( pxMACAddress != NULL )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d021      	beq.n	8007af0 <vARPRefreshCacheEntry+0x1b0>
        {
            ( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4a1d      	ldr	r2, [pc, #116]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 8007ab8:	4413      	add	r3, r2
 8007aba:	3304      	adds	r3, #4
 8007abc:	6879      	ldr	r1, [r7, #4]
 8007abe:	2206      	movs	r2, #6
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f008 faee 	bl	80100a2 <memcpy>

            iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
            /* And this entry does not need immediate attention */
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007ac6:	4919      	ldr	r1, [pc, #100]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	4613      	mov	r3, r2
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	330a      	adds	r3, #10
 8007ad6:	2296      	movs	r2, #150	; 0x96
 8007ad8:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007ada:	4914      	ldr	r1, [pc, #80]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	330b      	adds	r3, #11
 8007aea:	2201      	movs	r2, #1
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e016      	b.n	8007b1e <vARPRefreshCacheEntry+0x1de>
        }
        else if( xIpEntry < 0 )
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da13      	bge.n	8007b1e <vARPRefreshCacheEntry+0x1de>
        {
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007af6:	490d      	ldr	r1, [pc, #52]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4613      	mov	r3, r2
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	440b      	add	r3, r1
 8007b04:	330a      	adds	r3, #10
 8007b06:	2205      	movs	r2, #5
 8007b08:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007b0a:	4908      	ldr	r1, [pc, #32]	; (8007b2c <vARPRefreshCacheEntry+0x1ec>)
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	330b      	adds	r3, #11
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
        else
        {
            /* Nothing will be stored. */
        }
    }
}
 8007b1e:	3720      	adds	r7, #32
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20000014 	.word	0x20000014
 8007b28:	2000bc5c 	.word	0x2000bc5c
 8007b2c:	2000bb94 	.word	0x2000bb94

08007b30 <eARPGetCacheEntry>:
 *         addressing needs a gateway but there isn't a gateway defined) then return
 *         eCantSendPacket.
 */
eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                      MACAddress_t * const pxMACAddress )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturn;
    uint32_t ulAddressToLookup;

    ulAddressToLookup = *pulIPAddress;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60bb      	str	r3, [r7, #8]

    #if ( ipconfigUSE_LLMNR == 1 )
        if( ulAddressToLookup == ipLLMNR_IP_ADDR ) /* Is in network byte order. */
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4a33      	ldr	r2, [pc, #204]	; (8007c10 <eARPGetCacheEntry+0xe0>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d108      	bne.n	8007b5a <eARPGetCacheEntry+0x2a>
        {
            /* The LLMNR IP-address has a fixed virtual MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	4a32      	ldr	r2, [pc, #200]	; (8007c14 <eARPGetCacheEntry+0xe4>)
 8007b4c:	6811      	ldr	r1, [r2, #0]
 8007b4e:	6019      	str	r1, [r3, #0]
 8007b50:	8892      	ldrh	r2, [r2, #4]
 8007b52:	809a      	strh	r2, [r3, #4]
            eReturn = eARPCacheHit;
 8007b54:	2301      	movs	r3, #1
 8007b56:	73fb      	strb	r3, [r7, #15]
 8007b58:	e054      	b.n	8007c04 <eARPGetCacheEntry+0xd4>
        }
        else
    #endif

    if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8007b5a:	68b8      	ldr	r0, [r7, #8]
 8007b5c:	f001 fe42 	bl	80097e4 <xIsIPv4Multicast>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d006      	beq.n	8007b74 <eARPGetCacheEntry+0x44>
    {
        /* Get the lowest 23 bits of the IP-address. */
        vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	68b8      	ldr	r0, [r7, #8]
 8007b6a:	f001 fe63 	bl	8009834 <vSetMultiCastIPv4MacAddress>

        eReturn = eARPCacheHit;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	73fb      	strb	r3, [r7, #15]
 8007b72:	e047      	b.n	8007c04 <eARPGetCacheEntry+0xd4>
    }
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d005      	beq.n	8007b8a <eARPGetCacheEntry+0x5a>
             ( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) ) /* Or a local broadcast address, eg 192.168.1.255? */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4b25      	ldr	r3, [pc, #148]	; (8007c18 <eARPGetCacheEntry+0xe8>)
 8007b84:	691b      	ldr	r3, [r3, #16]
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d108      	bne.n	8007b9c <eARPGetCacheEntry+0x6c>
    {
        /* This is a broadcast so it uses the broadcast MAC address. */
        ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	4a23      	ldr	r2, [pc, #140]	; (8007c1c <eARPGetCacheEntry+0xec>)
 8007b8e:	6811      	ldr	r1, [r2, #0]
 8007b90:	6019      	str	r1, [r3, #0]
 8007b92:	8892      	ldrh	r2, [r2, #4]
 8007b94:	809a      	strh	r2, [r3, #4]
        eReturn = eARPCacheHit;
 8007b96:	2301      	movs	r3, #1
 8007b98:	73fb      	strb	r3, [r7, #15]
 8007b9a:	e033      	b.n	8007c04 <eARPGetCacheEntry+0xd4>
    }
    else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 8007b9c:	4b20      	ldr	r3, [pc, #128]	; (8007c20 <eARPGetCacheEntry+0xf0>)
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d102      	bne.n	8007baa <eARPGetCacheEntry+0x7a>
    {
        /* The IP address has not yet been assigned, so there is nothing that
         * can be done. */
        eReturn = eCantSendPacket;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	73fb      	strb	r3, [r7, #15]
 8007ba8:	e02c      	b.n	8007c04 <eARPGetCacheEntry+0xd4>
    }
    else
    {
        eReturn = eARPCacheMiss;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]

        if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <eARPGetCacheEntry+0xf0>)
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	405a      	eors	r2, r3
 8007bb8:	4b17      	ldr	r3, [pc, #92]	; (8007c18 <eARPGetCacheEntry+0xe8>)
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <eARPGetCacheEntry+0xaa>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 8007bc2:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <eARPGetCacheEntry+0xe8>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <eARPGetCacheEntry+0xa2>
                {
                    ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 8007bca:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <eARPGetCacheEntry+0xe8>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	e006      	b.n	8007be0 <eARPGetCacheEntry+0xb0>
                }
                else
                {
                    ulAddressToLookup = *pulIPAddress;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	60bb      	str	r3, [r7, #8]
 8007bd8:	e002      	b.n	8007be0 <eARPGetCacheEntry+0xb0>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60bb      	str	r3, [r7, #8]
            if( eReturn == eARPCacheMiss ) /*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */
        #else
            /* No cache look-up was done, so the result is still 'eARPCacheMiss'. */
        #endif
        {
            if( ulAddressToLookup == 0UL )
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d102      	bne.n	8007bec <eARPGetCacheEntry+0xbc>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8007be6:	2302      	movs	r3, #2
 8007be8:	73fb      	strb	r3, [r7, #15]
 8007bea:	e00b      	b.n	8007c04 <eARPGetCacheEntry+0xd4>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	68b8      	ldr	r0, [r7, #8]
 8007bf0:	f000 f818 	bl	8007c24 <prvCacheLookup>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]

                if( eReturn == eARPCacheMiss )
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d102      	bne.n	8007c04 <eARPGetCacheEntry+0xd4>
                {
                    /* It might be that the ARP has to go to the gateway. */
                    *pulIPAddress = ulAddressToLookup;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }

    return eReturn;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	fc0000e0 	.word	0xfc0000e0
 8007c14:	08011418 	.word	0x08011418
 8007c18:	2000bc5c 	.word	0x2000bc5c
 8007c1c:	08011420 	.word	0x08011420
 8007c20:	20000014 	.word	0x20000014

08007c24 <prvCacheLookup>:
 * @return When the IP-address is found: eARPCacheHit, when not found: eARPCacheMiss,
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                          MACAddress_t * const pxMACAddress )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
    BaseType_t x;
    eARPLookupResult_t eReturn = eARPCacheMiss;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	72fb      	strb	r3, [r7, #11]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	e02b      	b.n	8007c90 <prvCacheLookup+0x6c>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007c38:	4919      	ldr	r1, [pc, #100]	; (8007ca0 <prvCacheLookup+0x7c>)
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d11d      	bne.n	8007c8a <prvCacheLookup+0x66>
        {
            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007c4e:	4914      	ldr	r1, [pc, #80]	; (8007ca0 <prvCacheLookup+0x7c>)
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4613      	mov	r3, r2
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	330b      	adds	r3, #11
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <prvCacheLookup+0x46>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                eReturn = eCantSendPacket;
 8007c64:	2302      	movs	r3, #2
 8007c66:	72fb      	strb	r3, [r7, #11]
                /* A valid entry was found. */
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
                eReturn = eARPCacheHit;
            }

            break;
 8007c68:	e015      	b.n	8007c96 <prvCacheLookup+0x72>
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007c6a:	6838      	ldr	r0, [r7, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <prvCacheLookup+0x7c>)
 8007c78:	4413      	add	r3, r2
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	2206      	movs	r2, #6
 8007c7e:	4619      	mov	r1, r3
 8007c80:	f008 fa0f 	bl	80100a2 <memcpy>
                eReturn = eARPCacheHit;
 8007c84:	2301      	movs	r3, #1
 8007c86:	72fb      	strb	r3, [r7, #11]
            break;
 8007c88:	e005      	b.n	8007c96 <prvCacheLookup+0x72>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	ddd0      	ble.n	8007c38 <prvCacheLookup+0x14>
        }
    }

    return eReturn;
 8007c96:	7afb      	ldrb	r3, [r7, #11]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	2000bb94 	.word	0x2000bb94

08007ca4 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
void vARPAgeCache( void )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
    BaseType_t x;
    TickType_t xTimeNow;

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007caa:	2300      	movs	r3, #0
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	e063      	b.n	8007d78 <vARPAgeCache+0xd4>
    {
        /* If the entry is valid (its age is greater than zero). */
        if( xARPCache[ x ].ucAge > 0U )
 8007cb0:	4940      	ldr	r1, [pc, #256]	; (8007db4 <vARPAgeCache+0x110>)
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	330a      	adds	r3, #10
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d055      	beq.n	8007d72 <vARPAgeCache+0xce>
        {
            /* Decrement the age value of the entry in this ARP cache table row.
             * When the age reaches zero it is no longer considered valid. */
            ( xARPCache[ x ].ucAge )--;
 8007cc6:	493b      	ldr	r1, [pc, #236]	; (8007db4 <vARPAgeCache+0x110>)
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	330a      	adds	r3, #10
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b2d8      	uxtb	r0, r3
 8007cdc:	4935      	ldr	r1, [pc, #212]	; (8007db4 <vARPAgeCache+0x110>)
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	330a      	adds	r3, #10
 8007cec:	4602      	mov	r2, r0
 8007cee:	701a      	strb	r2, [r3, #0]

            /* If the entry is not yet valid, then it is waiting an ARP
             * reply, and the ARP request should be retransmitted. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007cf0:	4930      	ldr	r1, [pc, #192]	; (8007db4 <vARPAgeCache+0x110>)
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	330b      	adds	r3, #11
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10b      	bne.n	8007d1e <vARPAgeCache+0x7a>
            {
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007d06:	492b      	ldr	r1, [pc, #172]	; (8007db4 <vARPAgeCache+0x110>)
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f852 	bl	8007dc0 <FreeRTOS_OutputARPRequest>
 8007d1c:	e015      	b.n	8007d4a <vARPAgeCache+0xa6>
            }
            else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007d1e:	4925      	ldr	r1, [pc, #148]	; (8007db4 <vARPAgeCache+0x110>)
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4613      	mov	r3, r2
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	440b      	add	r3, r1
 8007d2c:	330a      	adds	r3, #10
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d80a      	bhi.n	8007d4a <vARPAgeCache+0xa6>
            {
                /* This entry will get removed soon.  See if the MAC address is
                 * still valid to prevent this happening. */
                iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007d34:	491f      	ldr	r1, [pc, #124]	; (8007db4 <vARPAgeCache+0x110>)
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 f83b 	bl	8007dc0 <FreeRTOS_OutputARPRequest>
            else
            {
                /* The age has just ticked down, with nothing to do. */
            }

            if( xARPCache[ x ].ucAge == 0U )
 8007d4a:	491a      	ldr	r1, [pc, #104]	; (8007db4 <vARPAgeCache+0x110>)
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	330a      	adds	r3, #10
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d108      	bne.n	8007d72 <vARPAgeCache+0xce>
            {
                /* The entry is no longer valid.  Wipe it out. */
                iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                xARPCache[ x ].ulIPAddress = 0UL;
 8007d60:	4914      	ldr	r1, [pc, #80]	; (8007db4 <vARPAgeCache+0x110>)
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3301      	adds	r3, #1
 8007d76:	607b      	str	r3, [r7, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	dd98      	ble.n	8007cb0 <vARPAgeCache+0xc>
            }
        }
    }

    xTimeNow = xTaskGetTickCount();
 8007d7e:	f7fd ffd5 	bl	8005d2c <xTaskGetTickCount>
 8007d82:	6038      	str	r0, [r7, #0]

    if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8007d84:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <vARPAgeCache+0x114>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <vARPAgeCache+0xf8>
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <vARPAgeCache+0x114>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d907      	bls.n	8007dac <vARPAgeCache+0x108>
    {
        FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <vARPAgeCache+0x118>)
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 f80d 	bl	8007dc0 <FreeRTOS_OutputARPRequest>
        xLastGratuitousARPTime = xTimeNow;
 8007da6:	4a04      	ldr	r2, [pc, #16]	; (8007db8 <vARPAgeCache+0x114>)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6013      	str	r3, [r2, #0]
    }
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	2000bb94 	.word	0x2000bb94
 8007db8:	2000bbdc 	.word	0x2000bbdc
 8007dbc:	20000014 	.word	0x20000014

08007dc0 <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress: A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    /* This is called from the context of the IP event task, so a block time
     * must not be used. */
    pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8007dc8:	2100      	movs	r1, #0
 8007dca:	202a      	movs	r0, #42	; 0x2a
 8007dcc:	f008 f86a 	bl	800fea4 <pxGetNetworkBufferWithDescriptor>
 8007dd0:	6138      	str	r0, [r7, #16]

    if( pxNetworkBuffer != NULL )
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d037      	beq.n	8007e48 <FreeRTOS_OutputARPRequest+0x88>
    {
        pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	615a      	str	r2, [r3, #20]
        vARPGenerateRequestPacket( pxNetworkBuffer );
 8007dde:	6938      	ldr	r0, [r7, #16]
 8007de0:	f000 f836 	bl	8007e50 <vARPGenerateRequestPacket>

        #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	2b3b      	cmp	r3, #59	; 0x3b
 8007dea:	d812      	bhi.n	8007e12 <FreeRTOS_OutputARPRequest+0x52>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	617b      	str	r3, [r7, #20]
 8007df2:	e008      	b.n	8007e06 <FreeRTOS_OutputARPRequest+0x46>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	699a      	ldr	r2, [r3, #24]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	3301      	adds	r3, #1
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b3b      	cmp	r3, #59	; 0x3b
 8007e0a:	ddf3      	ble.n	8007df4 <FreeRTOS_OutputARPRequest+0x34>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	223c      	movs	r2, #60	; 0x3c
 8007e10:	61da      	str	r2, [r3, #28]
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

        if( xIsCallingFromIPTask() != 0 )
 8007e12:	f001 f96f 	bl	80090f4 <xIsCallingFromIPTask>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <FreeRTOS_OutputARPRequest+0x66>
        {
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            /* Only the IP-task is allowed to call this function directly. */
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	6938      	ldr	r0, [r7, #16]
 8007e20:	f007 faa6 	bl	800f370 <xNetworkInterfaceOutput>
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
            }
        }
    }
}
 8007e24:	e010      	b.n	8007e48 <FreeRTOS_OutputARPRequest+0x88>
            xSendEvent.eEventType = eNetworkTxEvent;
 8007e26:	2302      	movs	r3, #2
 8007e28:	723b      	strb	r3, [r7, #8]
            xSendEvent.pvData = pxNetworkBuffer;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	60fb      	str	r3, [r7, #12]
            if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8007e2e:	f107 0308 	add.w	r3, r7, #8
 8007e32:	f04f 31ff 	mov.w	r1, #4294967295
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 fbe8 	bl	800960c <xSendEventStructToIPTask>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d102      	bne.n	8007e48 <FreeRTOS_OutputARPRequest+0x88>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007e42:	6938      	ldr	r0, [r7, #16]
 8007e44:	f008 f8a8 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
}
 8007e48:	bf00      	nop
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer: Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
    void * pvCopyDest;

    /* Buffer allocation ensures that buffers always have space
     * for an ARP packet. See buffer allocation implementations 1
     * and 2 under portable/BufferManagement. */
    configASSERT( pxNetworkBuffer != NULL );
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <vARPGenerateRequestPacket+0x18>
 8007e5e:	4923      	ldr	r1, [pc, #140]	; (8007eec <vARPGenerateRequestPacket+0x9c>)
 8007e60:	f240 302a 	movw	r0, #810	; 0x32a
 8007e64:	f7f8 fe16 	bl	8000a94 <vAssertCalled>
    configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	2b29      	cmp	r3, #41	; 0x29
 8007e6e:	d804      	bhi.n	8007e7a <vARPGenerateRequestPacket+0x2a>
 8007e70:	491e      	ldr	r1, [pc, #120]	; (8007eec <vARPGenerateRequestPacket+0x9c>)
 8007e72:	f240 302b 	movw	r0, #811	; 0x32b
 8007e76:	f7f8 fe0d 	bl	8000a94 <vAssertCalled>

    pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff fcc0 	bl	8007804 <vCastPointerTo_ARPPacket_t>
 8007e84:	6178      	str	r0, [r7, #20]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = xDefaultPartARPPacketHeader;
 8007e86:	4b1a      	ldr	r3, [pc, #104]	; (8007ef0 <vARPGenerateRequestPacket+0xa0>)
 8007e88:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8007e8e:	2226      	movs	r2, #38	; 0x26
 8007e90:	6939      	ldr	r1, [r7, #16]
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f008 f905 	bl	80100a2 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8007e98:	4b16      	ldr	r3, [pc, #88]	; (8007ef4 <vARPGenerateRequestPacket+0xa4>)
 8007e9a:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	3306      	adds	r3, #6
 8007ea0:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007ea2:	2206      	movs	r2, #6
 8007ea4:	6939      	ldr	r1, [r7, #16]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f008 f8fb 	bl	80100a2 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8007eac:	4b11      	ldr	r3, [pc, #68]	; (8007ef4 <vARPGenerateRequestPacket+0xa4>)
 8007eae:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	3316      	adds	r3, #22
 8007eb4:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007eb6:	2206      	movs	r2, #6
 8007eb8:	6939      	ldr	r1, [r7, #16]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f008 f8f1 	bl	80100a2 <memcpy>

    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	; (8007ef8 <vARPGenerateRequestPacket+0xa8>)
 8007ec2:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	331c      	adds	r3, #28
 8007ec8:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	601a      	str	r2, [r3, #0]
    pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

    pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	222a      	movs	r2, #42	; 0x2a
 8007ee2:	61da      	str	r2, [r3, #28]

    iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8007ee4:	bf00      	nop
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	08010af0 	.word	0x08010af0
 8007ef0:	080113f0 	.word	0x080113f0
 8007ef4:	20000014 	.word	0x20000014
 8007ef8:	20000028 	.word	0x20000028

08007efc <FreeRTOS_ClearARP>:

/**
 * @brief A call to this function will clear the ARP cache.
 */
void FreeRTOS_ClearARP( void )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
    ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007f00:	2248      	movs	r2, #72	; 0x48
 8007f02:	2100      	movs	r1, #0
 8007f04:	4802      	ldr	r0, [pc, #8]	; (8007f10 <FreeRTOS_ClearARP+0x14>)
 8007f06:	f008 f8f0 	bl	80100ea <memset>
}
 8007f0a:	bf00      	nop
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	2000bb94 	.word	0x2000bb94

08007f14 <vCastPointerTo_UDPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xUDP_PACKET UDPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
    {
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 8007f1c:	687b      	ldr	r3, [r7, #4]
    }
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <usChar2u16>:
               ( ( ( uint32_t ) apChr[ 3 ] ) );
    }

    static portINLINE uint16_t usChar2u16( const uint8_t * apChr );
    static portINLINE uint16_t usChar2u16( const uint8_t * apChr )
    {
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
        return ( uint16_t )
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	021b      	lsls	r3, r3, #8
 8007f3a:	b29a      	uxth	r2, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	b29b      	uxth	r3, r3
        return ( uint16_t )
 8007f44:	4313      	orrs	r3, r2
 8007f46:	b29b      	uxth	r3, r3
    }
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <vCastPointerTo_DNSMessage_t>:
 * @brief Utility function to cast pointer of a type to pointer of type DNSMessage_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DNSMessage_t )
    {
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
        return ( DNSMessage_t * ) pvArgument;
 8007f5c:	687b      	ldr	r3, [r7, #4]
    }
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <vCastPointerTo_DNSAnswerRecord_t>:
 * @brief Utility function to cast pointer of a type to pointer of type DNSAnswerRecord_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DNSAnswerRecord_t )
    {
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
        return ( DNSAnswerRecord_t * ) pvArgument;
 8007f72:	687b      	ldr	r3, [r7, #4]
    }
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <vCastPointerTo_LLMNRAnswer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type LLMNRAnswer_t.
 *
 * @return The casted pointer.
 */
        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( LLMNRAnswer_t )
        {
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
            return ( LLMNRAnswer_t * ) pvArgument;
 8007f88:	687b      	ldr	r3, [r7, #4]
        }
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <vCastPointerTo_NBNSAnswer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NBNSAnswer_t.
 *
 * @return The casted pointer.
 */
        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NBNSAnswer_t )
        {
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
            return ( NBNSAnswer_t * ) pvArgument;
 8007f9e:	687b      	ldr	r3, [r7, #4]
        }
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <prvReadNameField>:
 */
        _static size_t prvReadNameField( const uint8_t * pucByte,
                                         size_t uxRemainingBytes,
                                         char * pcName,
                                         size_t uxDestLen )
        {
 8007fac:	b480      	push	{r7}
 8007fae:	b089      	sub	sp, #36	; 0x24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
            size_t uxNameLen = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
            size_t uxIndex = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61bb      	str	r3, [r7, #24]
            size_t uxSourceLen = uxRemainingBytes;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	613b      	str	r3, [r7, #16]

            /* uxCount gets the values from pucByte and counts down to 0.
             * No need to have a different type than that of pucByte */
            size_t uxCount;

            if( uxSourceLen == ( size_t ) 0U )
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <prvReadNameField+0x26>
            {
                /* Return 0 value in case of error. */
                uxIndex = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
 8007fd0:	e078      	b.n	80080c4 <prvReadNameField+0x118>
            }

            /* Determine if the name is the fully coded name, or an offset to the name
             * elsewhere in the message. */
            else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007fde:	2bc0      	cmp	r3, #192	; 0xc0
 8007fe0:	d14a      	bne.n	8008078 <prvReadNameField+0xcc>
            {
                /* Jump over the two byte offset. */
                if( uxSourceLen > sizeof( uint16_t ) )
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d903      	bls.n	8007ff0 <prvReadNameField+0x44>
                {
                    uxIndex += sizeof( uint16_t );
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	3302      	adds	r3, #2
 8007fec:	61bb      	str	r3, [r7, #24]
 8007fee:	e069      	b.n	80080c4 <prvReadNameField+0x118>
                }
                else
                {
                    uxIndex = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61bb      	str	r3, [r7, #24]
 8007ff4:	e066      	b.n	80080c4 <prvReadNameField+0x118>
                /* 'uxIndex' points to the full name. Walk over the string. */
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
                {
                    /* If this is not the first time through the loop, then add a
                     * separator in the output. */
                    if( ( uxNameLen > 0U ) )
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00e      	beq.n	800801a <prvReadNameField+0x6e>
                    {
                        if( uxNameLen >= uxDestLen )
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d302      	bcc.n	800800a <prvReadNameField+0x5e>
                        {
                            uxIndex = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
 8008008:	e040      	b.n	800808c <prvReadNameField+0xe0>
                        }

                        pcName[ uxNameLen ] = '.';
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	222e      	movs	r2, #46	; 0x2e
 8008012:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	3301      	adds	r3, #1
 8008018:	61fb      	str	r3, [r7, #28]
                    }

                    /* Process the first/next sub-string. */
                    uxCount = ( size_t ) pucByte[ uxIndex ];
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	4413      	add	r3, r2
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	617b      	str	r3, [r7, #20]
                    uxIndex++;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	3301      	adds	r3, #1
 8008028:	61bb      	str	r3, [r7, #24]

                    if( ( uxIndex + uxCount ) > uxSourceLen )
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4413      	add	r3, r2
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	429a      	cmp	r2, r3
 8008034:	d217      	bcs.n	8008066 <prvReadNameField+0xba>
                    {
                        uxIndex = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	61bb      	str	r3, [r7, #24]
                        break;
 800803a:	e027      	b.n	800808c <prvReadNameField+0xe0>
                    }

                    while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
                    {
                        if( uxNameLen >= uxDestLen )
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d302      	bcc.n	800804a <prvReadNameField+0x9e>
                        {
                            uxIndex = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	61bb      	str	r3, [r7, #24]
                            break;
 8008048:	e016      	b.n	8008078 <prvReadNameField+0xcc>

                            /* break out of inner loop here
                             * break out of outer loop at the test uxNameLen >= uxDestLen. */
                        }

                        pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	441a      	add	r2, r3
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	440b      	add	r3, r1
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	3301      	adds	r3, #1
 800805e:	61fb      	str	r3, [r7, #28]
                        uxIndex++;
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	3301      	adds	r3, #1
 8008064:	61bb      	str	r3, [r7, #24]
                    while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	1e5a      	subs	r2, r3, #1
 800806a:	617a      	str	r2, [r7, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <prvReadNameField+0xcc>
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	429a      	cmp	r2, r3
 8008076:	d3e1      	bcc.n	800803c <prvReadNameField+0x90>
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	429a      	cmp	r2, r3
 800807e:	d205      	bcs.n	800808c <prvReadNameField+0xe0>
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	4413      	add	r3, r2
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1b4      	bne.n	8007ff6 <prvReadNameField+0x4a>
                    }
                }

                /* Confirm that a fully formed name was found. */
                if( uxIndex > 0U )
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d018      	beq.n	80080c4 <prvReadNameField+0x118>
                {
                    if( ( uxNameLen < uxDestLen ) && ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] == 0U ) )
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d212      	bcs.n	80080c0 <prvReadNameField+0x114>
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d20e      	bcs.n	80080c0 <prvReadNameField+0x114>
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	4413      	add	r3, r2
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d108      	bne.n	80080c0 <prvReadNameField+0x114>
                    {
                        pcName[ uxNameLen ] = '\0';
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	2200      	movs	r2, #0
 80080b6:	701a      	strb	r2, [r3, #0]
                        uxIndex++;
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	3301      	adds	r3, #1
 80080bc:	61bb      	str	r3, [r7, #24]
 80080be:	e001      	b.n	80080c4 <prvReadNameField+0x118>
                    }
                    else
                    {
                        uxIndex = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
                    }
                }
            }

            return uxIndex;
 80080c4:	69bb      	ldr	r3, [r7, #24]
        }
 80080c6:	4618      	mov	r0, r3
 80080c8:	3724      	adds	r7, #36	; 0x24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <prvSkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    _static size_t prvSkipNameField( const uint8_t * pucByte,
                                     size_t uxLength )
    {
 80080d2:	b480      	push	{r7}
 80080d4:	b087      	sub	sp, #28
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <prvSkipNameField+0x1e>
        {
            uxIndex = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	613b      	str	r3, [r7, #16]
 80080ee:	e03f      	b.n	8008170 <prvSkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	4413      	add	r3, r2
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080fc:	2bc0      	cmp	r3, #192	; 0xc0
 80080fe:	d11f      	bne.n	8008140 <prvSkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d903      	bls.n	800810e <prvSkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3302      	adds	r3, #2
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	e030      	b.n	8008170 <prvSkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	e02d      	b.n	8008170 <prvSkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	4413      	add	r3, r2
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	429a      	cmp	r2, r3
 8008126:	d908      	bls.n	800813a <prvSkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4413      	add	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	e002      	b.n	8008140 <prvSkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	613b      	str	r3, [r7, #16]
                    break;
 800813e:	e008      	b.n	8008152 <prvSkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	4413      	add	r3, r2
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <prvSkipNameField+0x80>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d8e0      	bhi.n	8008114 <prvSkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <prvSkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	4413      	add	r3, r2
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d103      	bne.n	800816c <prvSkipNameField+0x9a>
                {
                    uxIndex++;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3301      	adds	r3, #1
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	e001      	b.n	8008170 <prvSkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008170:	693b      	ldr	r3, [r7, #16]
    }
 8008172:	4618      	mov	r0, r3
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <ulDNSHandlePacket>:
 *
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	2b29      	cmp	r3, #41	; 0x29
 800818c:	d90f      	bls.n	80081ae <ulDNSHandlePacket+0x30>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	3b2a      	subs	r3, #42	; 0x2a
 8008194:	60fb      	str	r3, [r7, #12]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b0b      	cmp	r3, #11
 800819a:	d908      	bls.n	80081ae <ulDNSHandlePacket+0x30>
            {
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	332a      	adds	r3, #42	; 0x2a
 80081a2:	60bb      	str	r3, [r7, #8]

                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) prvParseDNSReply( pucPayLoadBuffer,
 80081a4:	2200      	movs	r2, #0
 80081a6:	68f9      	ldr	r1, [r7, #12]
 80081a8:	68b8      	ldr	r0, [r7, #8]
 80081aa:	f000 f821 	bl	80081f0 <prvParseDNSReply>
                                           pdFALSE );
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 80081ae:	2300      	movs	r3, #0
    }
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <ulNBNSHandlePacket>:
 * @param[in] pxNetworkBuffer: The network buffer holding the NBNS packet.
 *
 * @return pdFAIL to show that the packet was not consumed.
 */
        uint32_t ulNBNSHandlePacket( NetworkBufferDescriptor_t * pxNetworkBuffer )
        {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
            UDPPacket_t * pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff fea5 	bl	8007f14 <vCastPointerTo_UDPPacket_t>
 80081ca:	60f8      	str	r0, [r7, #12]
            uint8_t * pucUDPPayloadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( *pxUDPPacket ) ] );
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	332a      	adds	r3, #42	; 0x2a
 80081d2:	60bb      	str	r3, [r7, #8]

            prvTreatNBNS( pucUDPPayloadBuffer,
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	69d9      	ldr	r1, [r3, #28]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80081de:	461a      	mov	r2, r3
 80081e0:	68b8      	ldr	r0, [r7, #8]
 80081e2:	f000 fb3d 	bl	8008860 <prvTreatNBNS>
                          pxNetworkBuffer->xDataLength,
                          pxUDPPacket->xIPHeader.ulSourceIPAddress );

            /* The packet was not consumed. */
            return pdFAIL;
 80081e6:	2300      	movs	r3, #0
        }
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <prvParseDNSReply>:
 *         0 if xExpected set to pdFALSE.
 */
    _static uint32_t prvParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                       size_t uxBufferLength,
                                       BaseType_t xExpected )
    {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b0aa      	sub	sp, #168	; 0xa8
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
        DNSMessage_t * pxDNSMessageHeader;
        /* This pointer is not used to modify anything */
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        uint32_t ulIPAddress = 0UL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34

        #if ( ipconfigUSE_LLMNR == 1 )
            char * pcRequestedName = NULL;
 8008200:	2300      	movs	r3, #0
 8008202:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        #endif
        uint8_t * pucByte;
        size_t uxSourceBytesRemaining;
        uint16_t x, usDataLength, usQuestions;
        uint16_t usType = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        BaseType_t xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_LLMNR == 1 )
            uint16_t usClass = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        #endif
        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            BaseType_t xDoStore = xExpected;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	66bb      	str	r3, [r7, #104]	; 0x68
            char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = "";
 800821c:	2300      	movs	r3, #0
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
 8008220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	609a      	str	r2, [r3, #8]
        #endif
        const size_t uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 800822c:	2304      	movs	r3, #4
 800822e:	667b      	str	r3, [r7, #100]	; 0x64

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b0b      	cmp	r3, #11
 8008234:	d803      	bhi.n	800823e <prvParseDNSReply+0x4e>
        {
            xReturn = pdFALSE;
 8008236:	2300      	movs	r3, #0
 8008238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800823c:	e2fd      	b.n	800883a <prvParseDNSReply+0x64a>
        }
        else
        {
            uxSourceBytesRemaining = uxBufferLength;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

            /* Parse the DNS message header. Map the byte stream onto a structure
             * for easier access. */
            pxDNSMessageHeader = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucUDPPayloadBuffer );
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff fe85 	bl	8007f54 <vCastPointerTo_DNSMessage_t>
 800824a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                size_t uxResult;

                /* Start at the first byte after the header. */
                pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	330c      	adds	r3, #12
 8008258:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 800825c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008260:	3b0c      	subs	r3, #12
 8008262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Skip any question records. */
                usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8008266:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800826a:	889b      	ldrh	r3, [r3, #4]
 800826c:	b29b      	uxth	r3, r3
 800826e:	021b      	lsls	r3, r3, #8
 8008270:	b21a      	sxth	r2, r3
 8008272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008276:	889b      	ldrh	r3, [r3, #4]
 8008278:	b29b      	uxth	r3, r3
 800827a:	0a1b      	lsrs	r3, r3, #8
 800827c:	b29b      	uxth	r3, r3
 800827e:	b21b      	sxth	r3, r3
 8008280:	4313      	orrs	r3, r2
 8008282:	b21b      	sxth	r3, r3
 8008284:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

                for( x = 0U; x < usQuestions; x++ )
 8008288:	2300      	movs	r3, #0
 800828a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800828e:	e077      	b.n	8008380 <prvParseDNSReply+0x190>
                {
                    #if ( ipconfigUSE_LLMNR == 1 )
                        {
                            if( x == 0U )
 8008290:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008294:	2b00      	cmp	r3, #0
 8008296:	d103      	bne.n	80082a0 <prvParseDNSReply+0xb0>
                            {
                                pcRequestedName = ( char * ) pucByte;
 8008298:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800829c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                            }
                        }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 80082a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d123      	bne.n	80082f0 <prvParseDNSReply+0x100>
                        {
                            uxResult = prvReadNameField( pucByte,
 80082a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80082ac:	2310      	movs	r3, #16
 80082ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082b2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80082b6:	f7ff fe79 	bl	8007fac <prvReadNameField>
 80082ba:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                         uxSourceBytesRemaining,
                                                         pcName,
                                                         sizeof( pcName ) );

                            /* Check for a malformed response. */
                            if( uxResult == 0U )
 80082bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d103      	bne.n	80082ca <prvParseDNSReply+0xda>
                            {
                                xReturn = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                break;
 80082c8:	e060      	b.n	800838c <prvParseDNSReply+0x19c>
                            }

                            uxBytesRead += uxResult;
 80082ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082d0:	4413      	add	r3, r2
 80082d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            pucByte = &( pucByte[ uxResult ] );
 80082d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082dc:	4413      	add	r3, r2
 80082de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= uxResult;
 80082e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80082e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082ee:	e01f      	b.n	8008330 <prvParseDNSReply+0x140>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = prvSkipNameField( pucByte,
 80082f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082f4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80082f8:	f7ff feeb 	bl	80080d2 <prvSkipNameField>
 80082fc:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                     uxSourceBytesRemaining );

                        /* Check for a malformed response. */
                        if( uxResult == 0U )
 80082fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <prvParseDNSReply+0x11c>
                        {
                            xReturn = pdFALSE;
 8008304:	2300      	movs	r3, #0
 8008306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800830a:	e03f      	b.n	800838c <prvParseDNSReply+0x19c>
                        }

                        uxBytesRead += uxResult;
 800830c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008312:	4413      	add	r3, r2
 8008314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        pucByte = &( pucByte[ uxResult ] );
 8008318:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800831c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800831e:	4413      	add	r3, r2
 8008320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= uxResult;
 8008324:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    }

                    /* Check the remaining buffer size. */
                    if( uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008330:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008334:	2b03      	cmp	r3, #3
 8008336:	d91a      	bls.n	800836e <prvParseDNSReply+0x17e>
                    {
                        #if ( ipconfigUSE_LLMNR == 1 )
                            {
                                /* usChar2u16 returns value in host endianness. */
                                usType = usChar2u16( pucByte );
 8008338:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800833c:	f7ff fdf5 	bl	8007f2a <usChar2u16>
 8008340:	4603      	mov	r3, r0
 8008342:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                                usClass = usChar2u16( &( pucByte[ 2 ] ) );
 8008346:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800834a:	3302      	adds	r3, #2
 800834c:	4618      	mov	r0, r3
 800834e:	f7ff fdec 	bl	8007f2a <usChar2u16>
 8008352:	4603      	mov	r3, r0
 8008354:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                            }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        pucByte = &( pucByte[ sizeof( uint32_t ) ] );
 8008358:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800835c:	3304      	adds	r3, #4
 800835e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= sizeof( uint32_t );
 8008362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008366:	3b04      	subs	r3, #4
 8008368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800836c:	e003      	b.n	8008376 <prvParseDNSReply+0x186>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 800836e:	2300      	movs	r3, #0
 8008370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        break;
 8008374:	e00a      	b.n	800838c <prvParseDNSReply+0x19c>
                for( x = 0U; x < usQuestions; x++ )
 8008376:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800837a:	3301      	adds	r3, #1
 800837c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008380:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008384:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008388:	429a      	cmp	r2, r3
 800838a:	d381      	bcc.n	8008290 <prvParseDNSReply+0xa0>
                    }
                }

                if( xReturn == pdFALSE )
 800838c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 824f 	beq.w	8008834 <prvParseDNSReply+0x644>
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                /* Search through the answer records. */
                pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8008396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800839a:	88db      	ldrh	r3, [r3, #6]
 800839c:	b29b      	uxth	r3, r3
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	b21a      	sxth	r2, r3
 80083a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083a6:	88db      	ldrh	r3, [r3, #6]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	b21b      	sxth	r3, r3
 80083b0:	4313      	orrs	r3, r2
 80083b2:	b21b      	sxth	r3, r3
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083ba:	80da      	strh	r2, [r3, #6]

                if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 80083bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083c0:	885b      	ldrh	r3, [r3, #2]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 80083c8:	2b80      	cmp	r3, #128	; 0x80
 80083ca:	f040 80ff 	bne.w	80085cc <prvParseDNSReply+0x3dc>
                {
                    const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 80083ce:	2301      	movs	r3, #1
 80083d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                    uint16_t usNumARecordsStored = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 80083da:	2300      	movs	r3, #0
 80083dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80083e0:	e0ea      	b.n	80085b8 <prvParseDNSReply+0x3c8>
                    {
                        BaseType_t xDoAccept;

                        if( usNumARecordsStored >= usCount )
 80083e2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80083e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80083ea:	429a      	cmp	r2, r3
 80083ec:	f080 8224 	bcs.w	8008838 <prvParseDNSReply+0x648>
                        {
                            /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                            break;
                        }

                        uxResult = prvSkipNameField( pucByte,
 80083f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083f4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80083f8:	f7ff fe6b 	bl	80080d2 <prvSkipNameField>
 80083fc:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                     uxSourceBytesRemaining );

                        /* Check for a malformed response. */
                        if( uxResult == 0U )
 80083fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008400:	2b00      	cmp	r3, #0
 8008402:	d103      	bne.n	800840c <prvParseDNSReply+0x21c>
                        {
                            xReturn = pdFALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800840a:	e216      	b.n	800883a <prvParseDNSReply+0x64a>
                        }

                        uxBytesRead += uxResult;
 800840c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008412:	4413      	add	r3, r2
 8008414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        pucByte = &( pucByte[ uxResult ] );
 8008418:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800841c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800841e:	4413      	add	r3, r2
 8008420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= uxResult;
 8008424:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Is there enough data for an IPv4 A record answer and, if so,
                         * is this an A record? */
                        if( uxSourceBytesRemaining < sizeof( uint16_t ) )
 8008430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008434:	2b01      	cmp	r3, #1
 8008436:	d803      	bhi.n	8008440 <prvParseDNSReply+0x250>
                        {
                            xReturn = pdFALSE;
 8008438:	2300      	movs	r3, #0
 800843a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800843e:	e1fc      	b.n	800883a <prvParseDNSReply+0x64a>
                        }

                        usType = usChar2u16( pucByte );
 8008440:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008444:	f7ff fd71 	bl	8007f2a <usChar2u16>
 8008448:	4603      	mov	r3, r0
 800844a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

                        if( usType == ( uint16_t ) dnsTYPE_A_HOST )
 800844e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8008452:	2b01      	cmp	r3, #1
 8008454:	d10b      	bne.n	800846e <prvParseDNSReply+0x27e>
                        {
                            if( uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength ) )
 8008456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008458:	330a      	adds	r3, #10
 800845a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800845e:	429a      	cmp	r2, r3
 8008460:	d302      	bcc.n	8008468 <prvParseDNSReply+0x278>
                            {
                                xDoAccept = pdTRUE;
 8008462:	2301      	movs	r3, #1
 8008464:	67bb      	str	r3, [r7, #120]	; 0x78
 8008466:	e004      	b.n	8008472 <prvParseDNSReply+0x282>
                            }
                            else
                            {
                                xDoAccept = pdFALSE;
 8008468:	2300      	movs	r3, #0
 800846a:	67bb      	str	r3, [r7, #120]	; 0x78
 800846c:	e001      	b.n	8008472 <prvParseDNSReply+0x282>
                            }
                        }
                        else
                        {
                            /* Unknown host type. */
                            xDoAccept = pdFALSE;
 800846e:	2300      	movs	r3, #0
 8008470:	67bb      	str	r3, [r7, #120]	; 0x78
                        }

                        if( xDoAccept != pdFALSE )
 8008472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008474:	2b00      	cmp	r3, #0
 8008476:	d05f      	beq.n	8008538 <prvParseDNSReply+0x348>
                        {
                            /* This is the required record type and is of sufficient size. */

                            /* Mapping pucByte to a DNSAnswerRecord allows easy access of the
                             * fields of the structure. */
                            pxDNSAnswerRecord = ipCAST_PTR_TO_TYPE_PTR( DNSAnswerRecord_t, pucByte );
 8008478:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800847c:	f7ff fd75 	bl	8007f6a <vCastPointerTo_DNSAnswerRecord_t>
 8008480:	6478      	str	r0, [r7, #68]	; 0x44

                            /* Sanity check the data length of an IPv4 answer. */
                            if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == ( uint16_t ) uxAddressLength )
 8008482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008484:	891b      	ldrh	r3, [r3, #8]
 8008486:	b29b      	uxth	r3, r3
 8008488:	021b      	lsls	r3, r3, #8
 800848a:	b21a      	sxth	r2, r3
 800848c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848e:	891b      	ldrh	r3, [r3, #8]
 8008490:	b29b      	uxth	r3, r3
 8008492:	0a1b      	lsrs	r3, r3, #8
 8008494:	b29b      	uxth	r3, r3
 8008496:	b21b      	sxth	r3, r3
 8008498:	4313      	orrs	r3, r2
 800849a:	b21b      	sxth	r3, r3
 800849c:	b29a      	uxth	r2, r3
 800849e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d139      	bne.n	800851a <prvParseDNSReply+0x32a>
                                /*
                                 * Use helper variables for memcpy() to remain
                                 * compliant with MISRA Rule 21.15.  These should be
                                 * optimized away.
                                 */
                                pvCopySource = &pucByte[ sizeof( DNSAnswerRecord_t ) ];
 80084a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084aa:	330a      	adds	r3, #10
 80084ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                                pvCopyDest = &ulIPAddress;
 80084ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80084b2:	63bb      	str	r3, [r7, #56]	; 0x38
                                ( void ) memcpy( pvCopyDest, pvCopySource, uxAddressLength );
 80084b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084ba:	f007 fdf2 	bl	80100a2 <memcpy>
                                    {
                                        char cBuffer[ 16 ];

                                        /* The reply will only be stored in the DNS cache when the
                                         * request was issued by this device. */
                                        if( xDoStore != pdFALSE )
 80084be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00d      	beq.n	80084e0 <prvParseDNSReply+0x2f0>
                                        {
                                            ( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 80084c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80084cc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084d0:	2300      	movs	r3, #0
 80084d2:	f000 fba1 	bl	8008c18 <prvProcessDNSCache>
                                            usNumARecordsStored++; /* Track # of A records stored */
 80084d6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80084da:	3301      	adds	r3, #1
 80084dc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                                        }

                                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 80084e0:	f107 0214 	add.w	r2, r7, #20
 80084e4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80084e8:	2310      	movs	r3, #16
 80084ea:	2002      	movs	r0, #2
 80084ec:	f002 f94e 	bl	800a78c <FreeRTOS_inet_ntop>
                                        /* Show what has happened. */
                                        FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 80084f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	4618      	mov	r0, r3
 80084fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <prvParseDNSReply+0x314>
 8008500:	4b61      	ldr	r3, [pc, #388]	; (8008688 <prvParseDNSReply+0x498>)
 8008502:	e000      	b.n	8008506 <prvParseDNSReply+0x316>
 8008504:	4b61      	ldr	r3, [pc, #388]	; (800868c <prvParseDNSReply+0x49c>)
 8008506:	f107 0114 	add.w	r1, r7, #20
 800850a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	460b      	mov	r3, r1
 8008512:	4601      	mov	r1, r0
 8008514:	485e      	ldr	r0, [pc, #376]	; (8008690 <prvParseDNSReply+0x4a0>)
 8008516:	f7f8 fa43 	bl	80009a0 <vLoggingPrintf>
                                                           ( xDoStore != 0 ) ? "" : " NOT" ) );
                                    }
                                #endif /* ipconfigUSE_DNS_CACHE */
                            }

                            pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) + uxAddressLength ] );
 800851a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800851c:	330a      	adds	r3, #10
 800851e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008522:	4413      	add	r3, r2
 8008524:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength );
 8008528:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800852c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	3b0a      	subs	r3, #10
 8008532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008536:	e03a      	b.n	80085ae <prvParseDNSReply+0x3be>
                        }
                        else if( uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 8008538:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800853c:	2b09      	cmp	r3, #9
 800853e:	d936      	bls.n	80085ae <prvParseDNSReply+0x3be>
                        {
                            /* It's not an A record, so skip it. Get the header location
                             * and then jump over the header. */
                            /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */
                            pxDNSAnswerRecord = ipCAST_PTR_TO_TYPE_PTR( DNSAnswerRecord_t, pucByte );
 8008540:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008544:	f7ff fd11 	bl	8007f6a <vCastPointerTo_DNSAnswerRecord_t>
 8008548:	6478      	str	r0, [r7, #68]	; 0x44

                            pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800854a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800854e:	330a      	adds	r3, #10
 8008550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8008554:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008558:	3b0a      	subs	r3, #10
 800855a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                            /* Determine the length of the answer data from the header. */
                            usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 800855e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008560:	891b      	ldrh	r3, [r3, #8]
 8008562:	b29b      	uxth	r3, r3
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	b21a      	sxth	r2, r3
 8008568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800856a:	891b      	ldrh	r3, [r3, #8]
 800856c:	b29b      	uxth	r3, r3
 800856e:	0a1b      	lsrs	r3, r3, #8
 8008570:	b29b      	uxth	r3, r3
 8008572:	b21b      	sxth	r3, r3
 8008574:	4313      	orrs	r3, r2
 8008576:	b21b      	sxth	r3, r3
 8008578:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                            /* Jump over the answer. */
                            if( uxSourceBytesRemaining >= usDataLength )
 800857c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008580:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008584:	429a      	cmp	r2, r3
 8008586:	d30e      	bcc.n	80085a6 <prvParseDNSReply+0x3b6>
                            {
                                pucByte = &( pucByte[ usDataLength ] );
 8008588:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800858c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008590:	4413      	add	r3, r2
 8008592:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                                uxSourceBytesRemaining -= usDataLength;
 8008596:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800859a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085a4:	e003      	b.n	80085ae <prvParseDNSReply+0x3be>
                            }
                            else
                            {
                                /* Malformed response. */
                                xReturn = pdFALSE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                break;
 80085ac:	e145      	b.n	800883a <prvParseDNSReply+0x64a>
                    for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 80085ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80085b2:	3301      	adds	r3, #1
 80085b4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80085b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085bc:	88db      	ldrh	r3, [r3, #6]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80085c4:	429a      	cmp	r2, r3
 80085c6:	f4ff af0c 	bcc.w	80083e2 <prvParseDNSReply+0x1f2>
 80085ca:	e136      	b.n	800883a <prvParseDNSReply+0x64a>
                        }
                    }
                }

                #if ( ipconfigUSE_LLMNR == 1 )
                    else if( ( usQuestions != ( uint16_t ) 0U ) && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) && ( pcRequestedName != NULL ) )
 80085cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 8132 	beq.w	800883a <prvParseDNSReply+0x64a>
 80085d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80085da:	2b01      	cmp	r3, #1
 80085dc:	f040 812d 	bne.w	800883a <prvParseDNSReply+0x64a>
 80085e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	f040 8128 	bne.w	800883a <prvParseDNSReply+0x64a>
 80085ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8123 	beq.w	800883a <prvParseDNSReply+0x64a>
                    {
                        /* If this is not a reply to our DNS request, it might an LLMNR
                         * request. */
                        if( xApplicationDNSQueryHook( &( pcRequestedName[ 1 ] ) ) != pdFALSE )
 80085f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085f8:	3301      	adds	r3, #1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f8 f9da 	bl	80009b4 <xApplicationDNSQueryHook>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 8119 	beq.w	800883a <prvParseDNSReply+0x64a>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8008608:	2300      	movs	r3, #0
 800860a:	677b      	str	r3, [r7, #116]	; 0x74
                            NetworkBufferDescriptor_t * pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 feec 	bl	80093ea <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008612:	6738      	str	r0, [r7, #112]	; 0x70
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008614:	2300      	movs	r3, #0
 8008616:	66fb      	str	r3, [r7, #108]	; 0x6c

                            if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8008618:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <prvParseDNSReply+0x4a4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d13d      	bne.n	800869c <prvParseDNSReply+0x4ac>
 8008620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008622:	2b00      	cmp	r3, #0
 8008624:	d03a      	beq.n	800869c <prvParseDNSReply+0x4ac>
                            {
                                size_t uxDataLength = uxBufferLength + sizeof( UDPHeader_t ) + sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	332a      	adds	r3, #42	; 0x2a
 800862a:	65bb      	str	r3, [r7, #88]	; 0x58

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 800862c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800862e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008630:	61da      	str	r2, [r3, #28]
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, uxDataLength + sizeof( LLMNRAnswer_t ) );
 8008632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008634:	3310      	adds	r3, #16
 8008636:	4619      	mov	r1, r3
 8008638:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800863a:	f000 fe7b 	bl	8009334 <pxDuplicateNetworkBufferWithDescriptor>
 800863e:	6778      	str	r0, [r7, #116]	; 0x74

                                if( pxNewBuffer != NULL )
 8008640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008642:	2b00      	cmp	r3, #0
 8008644:	d028      	beq.n	8008698 <prvParseDNSReply+0x4a8>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8008646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	657b      	str	r3, [r7, #84]	; 0x54
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 8008650:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	653b      	str	r3, [r7, #80]	; 0x50

                                    pxNetworkBuffer = pxNewBuffer;
 800865a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800865c:	673b      	str	r3, [r7, #112]	; 0x70
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 800865e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	332a      	adds	r3, #42	; 0x2a
 8008664:	66fb      	str	r3, [r7, #108]	; 0x6c

                                    pucByte = &( pucNewBuffer[ xOffset1 ] );
 8008666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800866a:	4413      	add	r3, r2
 800866c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                                    pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 8008670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008672:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008674:	4413      	add	r3, r2
 8008676:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                                    pxDNSMessageHeader = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucNewBuffer );
 800867a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800867c:	f7ff fc6a 	bl	8007f54 <vCastPointerTo_DNSMessage_t>
 8008680:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8008684:	e00a      	b.n	800869c <prvParseDNSReply+0x4ac>
 8008686:	bf00      	nop
 8008688:	08010bd8 	.word	0x08010bd8
 800868c:	08010bdc 	.word	0x08010bdc
 8008690:	08010be4 	.word	0x08010be4
 8008694:	0801146c 	.word	0x0801146c
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008698:	2300      	movs	r3, #0
 800869a:	673b      	str	r3, [r7, #112]	; 0x70
                                }
                            }

                            /* The test on 'pucNewBuffer' is only to satisfy lint. */
                            if( ( pxNetworkBuffer != NULL ) && ( pucNewBuffer != NULL ) )
 800869c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 80cb 	beq.w	800883a <prvParseDNSReply+0x64a>
 80086a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 80c7 	beq.w	800883a <prvParseDNSReply+0x64a>
                            {
                                pxAnswer = ipCAST_PTR_TO_TYPE_PTR( LLMNRAnswer_t, pucByte );
 80086ac:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80086b0:	f7ff fc66 	bl	8007f80 <vCastPointerTo_LLMNRAnswer_t>
 80086b4:	64f8      	str	r0, [r7, #76]	; 0x4c

                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                #ifndef _lint
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
 80086b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086ba:	3302      	adds	r3, #2
 80086bc:	2280      	movs	r2, #128	; 0x80
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086c4:	3303      	adds	r3, #3
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                       /* Provide a single answer */
 80086ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086ce:	3306      	adds	r3, #6
 80086d0:	2200      	movs	r2, #0
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086d8:	3307      	adds	r3, #7
 80086da:	2201      	movs	r2, #1
 80086dc:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                  /* No authority */
 80086de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086e2:	3308      	adds	r3, #8
 80086e4:	2200      	movs	r2, #0
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086ec:	3309      	adds	r3, #9
 80086ee:	2200      	movs	r2, #0
 80086f0:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                 /* No additional info */
 80086f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086f6:	330a      	adds	r3, #10
 80086f8:	2200      	movs	r2, #0
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008700:	330b      	adds	r3, #11
 8008702:	2200      	movs	r2, #0
 8008704:	701a      	strb	r2, [r3, #0]
                                #endif /* lint */

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8008706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008708:	22c0      	movs	r2, #192	; 0xc0
 800870a:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( pcRequestedName - ( char * ) pucNewBuffer );
 800870c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	b2da      	uxtb	r2, r3
 8008716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008718:	705a      	strb	r2, [r3, #1]

                                #ifndef _lint
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 800871a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871c:	3302      	adds	r3, #2
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008724:	3303      	adds	r3, #3
 8008726:	2201      	movs	r2, #1
 8008728:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );   /* 1: Class IN */
 800872a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800872c:	3304      	adds	r3, #4
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008734:	3305      	adds	r3, #5
 8008736:	2201      	movs	r2, #1
 8008738:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800873a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873c:	3306      	adds	r3, #6
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	3307      	adds	r3, #7
 8008746:	2204      	movs	r2, #4
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874c:	3308      	adds	r3, #8
 800874e:	2293      	movs	r2, #147	; 0x93
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008754:	3309      	adds	r3, #9
 8008756:	22e0      	movs	r2, #224	; 0xe0
 8008758:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 800875a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875c:	330a      	adds	r3, #10
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008764:	330b      	adds	r3, #11
 8008766:	2204      	movs	r2, #4
 8008768:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 800876a:	4b3c      	ldr	r3, [pc, #240]	; (800885c <prvParseDNSReply+0x66c>)
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	061a      	lsls	r2, r3, #24
 8008770:	4b3a      	ldr	r3, [pc, #232]	; (800885c <prvParseDNSReply+0x66c>)
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800877a:	431a      	orrs	r2, r3
 800877c:	4b37      	ldr	r3, [pc, #220]	; (800885c <prvParseDNSReply+0x66c>)
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	0a1b      	lsrs	r3, r3, #8
 8008782:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008786:	431a      	orrs	r2, r3
 8008788:	4b34      	ldr	r3, [pc, #208]	; (800885c <prvParseDNSReply+0x66c>)
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	0e1b      	lsrs	r3, r3, #24
 800878e:	4313      	orrs	r3, r2
 8008790:	0e1a      	lsrs	r2, r3, #24
 8008792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008794:	330c      	adds	r3, #12
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	4b30      	ldr	r3, [pc, #192]	; (800885c <prvParseDNSReply+0x66c>)
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	061a      	lsls	r2, r3, #24
 80087a0:	4b2e      	ldr	r3, [pc, #184]	; (800885c <prvParseDNSReply+0x66c>)
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087aa:	431a      	orrs	r2, r3
 80087ac:	4b2b      	ldr	r3, [pc, #172]	; (800885c <prvParseDNSReply+0x66c>)
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	0a1b      	lsrs	r3, r3, #8
 80087b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087b6:	431a      	orrs	r2, r3
 80087b8:	4b28      	ldr	r3, [pc, #160]	; (800885c <prvParseDNSReply+0x66c>)
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	0e1b      	lsrs	r3, r3, #24
 80087be:	4313      	orrs	r3, r2
 80087c0:	0c1a      	lsrs	r2, r3, #16
 80087c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c4:	330d      	adds	r3, #13
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	701a      	strb	r2, [r3, #0]
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <prvParseDNSReply+0x66c>)
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	061a      	lsls	r2, r3, #24
 80087d0:	4b22      	ldr	r3, [pc, #136]	; (800885c <prvParseDNSReply+0x66c>)
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	021b      	lsls	r3, r3, #8
 80087d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087da:	431a      	orrs	r2, r3
 80087dc:	4b1f      	ldr	r3, [pc, #124]	; (800885c <prvParseDNSReply+0x66c>)
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	0a1b      	lsrs	r3, r3, #8
 80087e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087e6:	431a      	orrs	r2, r3
 80087e8:	4b1c      	ldr	r3, [pc, #112]	; (800885c <prvParseDNSReply+0x66c>)
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	0e1b      	lsrs	r3, r3, #24
 80087ee:	4313      	orrs	r3, r2
 80087f0:	0a1a      	lsrs	r2, r3, #8
 80087f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f4:	330e      	adds	r3, #14
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	4b18      	ldr	r3, [pc, #96]	; (800885c <prvParseDNSReply+0x66c>)
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	0e1a      	lsrs	r2, r3, #24
 8008800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008802:	330f      	adds	r3, #15
 8008804:	b2d2      	uxtb	r2, r2
 8008806:	701a      	strb	r2, [r3, #0]
                                #endif /* lint */
                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 8008808:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800880c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	b29b      	uxth	r3, r3
 8008812:	3310      	adds	r3, #16
 8008814:	b29b      	uxth	r3, r3
 8008816:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

                                prvReplyDNSMessage( pxNetworkBuffer, usLength );
 800881a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800881e:	4619      	mov	r1, r3
 8008820:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008822:	f000 f98b 	bl	8008b3c <prvReplyDNSMessage>

                                if( pxNewBuffer != NULL )
 8008826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008828:	2b00      	cmp	r3, #0
 800882a:	d006      	beq.n	800883a <prvParseDNSReply+0x64a>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 800882c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800882e:	f007 fbb3 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
 8008832:	e002      	b.n	800883a <prvParseDNSReply+0x64a>
                    break;
 8008834:	bf00      	nop
 8008836:	e000      	b.n	800883a <prvParseDNSReply+0x64a>
                            break;
 8008838:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 800883a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800883e:	2b00      	cmp	r3, #0
 8008840:	d102      	bne.n	8008848 <prvParseDNSReply+0x658>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = dnsPARSE_ERROR;
 8008842:	2300      	movs	r3, #0
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
 8008846:	e004      	b.n	8008852 <prvParseDNSReply+0x662>
        }
        else if( xExpected == pdFALSE )
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <prvParseDNSReply+0x662>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0UL;
 800884e:	2300      	movs	r3, #0
 8008850:	637b      	str	r3, [r7, #52]	; 0x34

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            ( void ) xDoStore;
        #endif

        return ulIPAddress;
 8008852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8008854:	4618      	mov	r0, r3
 8008856:	37a0      	adds	r7, #160	; 0xa0
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000014 	.word	0x20000014

08008860 <prvTreatNBNS>:
 * @param[in] ulIPAddress: IP address of the sender.
 */
        static void prvTreatNBNS( uint8_t * pucPayload,
                                  size_t uxBufferLength,
                                  uint32_t ulIPAddress )
        {
 8008860:	b580      	push	{r7, lr}
 8008862:	b094      	sub	sp, #80	; 0x50
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
            uint16_t usFlags, usType, usClass;
            uint8_t * pucSource, * pucTarget;
            uint8_t ucByte;
            uint8_t ucNBNSName[ 17 ];
            uint8_t * pucUDPPayloadBuffer = pucPayload;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	643b      	str	r3, [r7, #64]	; 0x40
            NetworkBufferDescriptor_t * pxNetworkBuffer;
            size_t uxBytesNeeded = sizeof( UDPPacket_t ) + sizeof( NBNSRequest_t );
 8008870:	235c      	movs	r3, #92	; 0x5c
 8008872:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Check for minimum buffer size. */
            if( uxBufferLength < uxBytesNeeded )
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	429a      	cmp	r2, r3
 800887a:	f0c0 8157 	bcc.w	8008b2c <prvTreatNBNS+0x2cc>
            {
                return;
            }

            /* Read the request flags in host endianness. */
            usFlags = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usFlags ) ] ) );
 800887e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008880:	3302      	adds	r3, #2
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff fb51 	bl	8007f2a <usChar2u16>
 8008888:	4603      	mov	r3, r0
 800888a:	86fb      	strh	r3, [r7, #54]	; 0x36

            if( ( usFlags & dnsNBNS_FLAGS_OPCODE_MASK ) == dnsNBNS_FLAGS_OPCODE_QUERY )
 800888c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800888e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 814b 	bne.w	8008b2e <prvTreatNBNS+0x2ce>
            {
                usType = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usType ) ] ) );
 8008898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889a:	332e      	adds	r3, #46	; 0x2e
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fb44 	bl	8007f2a <usChar2u16>
 80088a2:	4603      	mov	r3, r0
 80088a4:	86bb      	strh	r3, [r7, #52]	; 0x34
                usClass = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usClass ) ] ) );
 80088a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a8:	3330      	adds	r3, #48	; 0x30
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7ff fb3d 	bl	8007f2a <usChar2u16>
 80088b0:	4603      	mov	r3, r0
 80088b2:	867b      	strh	r3, [r7, #50]	; 0x32
                /* Not used for now */
                ( void ) usClass;

                /* For NBNS a name is 16 bytes long, written with capitals only.
                 * Make sure that the copy is terminated with a zero. */
                pucTarget = &( ucNBNSName[ sizeof( ucNBNSName ) - 2U ] );
 80088b4:	f107 0310 	add.w	r3, r7, #16
 80088b8:	330f      	adds	r3, #15
 80088ba:	64bb      	str	r3, [r7, #72]	; 0x48
                pucTarget[ 1 ] = ( uint8_t ) 0U;
 80088bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088be:	3301      	adds	r3, #1
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]

                /* Start with decoding the last 2 bytes. */
                pucSource = &( pucUDPPayloadBuffer[ ( dnsNBNS_ENCODED_NAME_LENGTH - 2 ) + offsetof( NBNSRequest_t, ucName ) ] );
 80088c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088c6:	332b      	adds	r3, #43	; 0x2b
 80088c8:	64fb      	str	r3, [r7, #76]	; 0x4c

                for( ; ; )
                {
                    const uint8_t ucCharA = ( uint8_t ) 0x41U;
 80088ca:	2341      	movs	r3, #65	; 0x41
 80088cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                    ucByte = ( ( uint8_t ) ( ( pucSource[ 0 ] - ucCharA ) << 4 ) ) | ( pucSource[ 1 ] - ucCharA );
 80088d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	b25a      	sxtb	r2, r3
 80088e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e4:	3301      	adds	r3, #1
 80088e6:	7819      	ldrb	r1, [r3, #0]
 80088e8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80088ec:	1acb      	subs	r3, r1, r3
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	b25b      	sxtb	r3, r3
 80088f2:	4313      	orrs	r3, r2
 80088f4:	b25b      	sxtb	r3, r3
 80088f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

                    /* Make sure there are no trailing spaces in the name. */
                    if( ( ucByte == ( uint8_t ) ' ' ) && ( pucTarget[ 1 ] == 0U ) )
 80088fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d107      	bne.n	8008912 <prvTreatNBNS+0xb2>
 8008902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008904:	3301      	adds	r3, #1
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d102      	bne.n	8008912 <prvTreatNBNS+0xb2>
                    {
                        ucByte = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    }

                    *pucTarget = ucByte;
 8008912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008914:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008918:	701a      	strb	r2, [r3, #0]

                    if( pucTarget == ucNBNSName )
 800891a:	f107 0310 	add.w	r3, r7, #16
 800891e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008920:	429a      	cmp	r2, r3
 8008922:	d006      	beq.n	8008932 <prvTreatNBNS+0xd2>
                    {
                        break;
                    }

                    pucTarget -= 1;
 8008924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008926:	3b01      	subs	r3, #1
 8008928:	64bb      	str	r3, [r7, #72]	; 0x48
                    pucSource -= 2;
 800892a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892c:	3b02      	subs	r3, #2
 800892e:	64fb      	str	r3, [r7, #76]	; 0x4c
                {
 8008930:	e7cb      	b.n	80088ca <prvTreatNBNS+0x6a>
                        break;
 8008932:	bf00      	nop
                }

                #if ( ipconfigUSE_DNS_CACHE == 1 )
                    {
                        if( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) != 0U )
 8008934:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008938:	2b00      	cmp	r3, #0
 800893a:	da06      	bge.n	800894a <prvTreatNBNS+0xea>
                        {
                            /* If this is a response from another device,
                             * add the name to the DNS cache */
                            ( void ) prvProcessDNSCache( ( char * ) ucNBNSName, &( ulIPAddress ), 0, pdFALSE );
 800893c:	1d39      	adds	r1, r7, #4
 800893e:	f107 0010 	add.w	r0, r7, #16
 8008942:	2300      	movs	r3, #0
 8008944:	2200      	movs	r2, #0
 8008946:	f000 f967 	bl	8008c18 <prvProcessDNSCache>
                        /* Avoid compiler warnings. */
                        ( void ) ulIPAddress;
                    }
                #endif /* ipconfigUSE_DNS_CACHE */

                if( ( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) == 0U ) &&
 800894a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800894e:	2b00      	cmp	r3, #0
 8008950:	f2c0 80ed 	blt.w	8008b2e <prvTreatNBNS+0x2ce>
 8008954:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008956:	2b20      	cmp	r3, #32
 8008958:	f040 80e9 	bne.w	8008b2e <prvTreatNBNS+0x2ce>
                    ( usType == dnsNBNS_TYPE_NET_BIOS ) &&
                    ( xApplicationDNSQueryHook( ( const char * ) ucNBNSName ) != pdFALSE ) )
 800895c:	f107 0310 	add.w	r3, r7, #16
 8008960:	4618      	mov	r0, r3
 8008962:	f7f8 f827 	bl	80009b4 <xApplicationDNSQueryHook>
 8008966:	4603      	mov	r3, r0
                    ( usType == dnsNBNS_TYPE_NET_BIOS ) &&
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 80e0 	beq.w	8008b2e <prvTreatNBNS+0x2ce>
                    DNSMessage_t * pxMessage;
                    NBNSAnswer_t * pxAnswer;

                    /* Someone is looking for a device with ucNBNSName,
                     * prepare a positive reply. */
                    pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 800896e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008970:	f000 fd3b 	bl	80093ea <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008974:	63f8      	str	r0, [r7, #60]	; 0x3c

                    if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8008976:	4b6f      	ldr	r3, [pc, #444]	; (8008b34 <prvTreatNBNS+0x2d4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d116      	bne.n	80089ac <prvTreatNBNS+0x14c>
 800897e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d013      	beq.n	80089ac <prvTreatNBNS+0x14c>
                    {
                        NetworkBufferDescriptor_t * pxNewBuffer;

                        /* The field xDataLength was set to the total length of the UDP packet,
                         * i.e. the payload size plus sizeof( UDPPacket_t ). */
                        pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength + sizeof( NBNSAnswer_t ) );
 8008984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	3310      	adds	r3, #16
 800898a:	4619      	mov	r1, r3
 800898c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800898e:	f000 fcd1 	bl	8009334 <pxDuplicateNetworkBufferWithDescriptor>
 8008992:	62f8      	str	r0, [r7, #44]	; 0x2c

                        if( pxNewBuffer != NULL )
 8008994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008996:	2b00      	cmp	r3, #0
 8008998:	d006      	beq.n	80089a8 <prvTreatNBNS+0x148>
                        {
                            pucUDPPayloadBuffer = &( pxNewBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	332a      	adds	r3, #42	; 0x2a
 80089a0:	643b      	str	r3, [r7, #64]	; 0x40
                            pxNetworkBuffer = pxNewBuffer;
 80089a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a6:	e001      	b.n	80089ac <prvTreatNBNS+0x14c>
                        }
                        else
                        {
                            /* Just prevent that a reply will be sent */
                            pxNetworkBuffer = NULL;
 80089a8:	2300      	movs	r3, #0
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Should not occur: pucUDPPayloadBuffer is part of a xNetworkBufferDescriptor */
                    if( pxNetworkBuffer != NULL )
 80089ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 80bd 	beq.w	8008b2e <prvTreatNBNS+0x2ce>
                    {
                        pxMessage = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucUDPPayloadBuffer );
 80089b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80089b6:	f7ff facd 	bl	8007f54 <vCastPointerTo_DNSMessage_t>
 80089ba:	62b8      	str	r0, [r7, #40]	; 0x28

                        /* As the fields in the structures are not word-aligned, we have to
                         * copy the values byte-by-byte using macro's vSetField16() and vSetField32() */
                        #ifndef _lint
                            vSetField16( pxMessage, DNSMessage_t, usFlags, dnsNBNS_QUERY_RESPONSE_FLAGS ); /* 0x8500 */
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089be:	3302      	adds	r3, #2
 80089c0:	2285      	movs	r2, #133	; 0x85
 80089c2:	701a      	strb	r2, [r3, #0]
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	3303      	adds	r3, #3
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usQuestions, 0 );
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	3304      	adds	r3, #4
 80089d0:	2200      	movs	r2, #0
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	3305      	adds	r3, #5
 80089d8:	2200      	movs	r2, #0
 80089da:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAnswers, 1 );
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	3306      	adds	r3, #6
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	3307      	adds	r3, #7
 80089e8:	2201      	movs	r2, #1
 80089ea:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAuthorityRRs, 0 );
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	3308      	adds	r3, #8
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	3309      	adds	r3, #9
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAdditionalRRs, 0 );
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	330a      	adds	r3, #10
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	330b      	adds	r3, #11
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
                        #else
                            ( void ) pxMessage;
                        #endif

                        pxAnswer = ipCAST_PTR_TO_TYPE_PTR( NBNSAnswer_t, &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usType ) ] ) );
 8008a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0e:	332e      	adds	r3, #46	; 0x2e
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff fac0 	bl	8007f96 <vCastPointerTo_NBNSAnswer_t>
 8008a16:	6278      	str	r0, [r7, #36]	; 0x24

                        #ifndef _lint
                            vSetField16( pxAnswer, NBNSAnswer_t, usType, usType );            /* Type */
 8008a18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a1a:	0a1b      	lsrs	r3, r3, #8
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	701a      	strb	r2, [r3, #0]
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	3301      	adds	r3, #1
 8008a28:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usClass, dnsNBNS_CLASS_IN ); /* Class */
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	3302      	adds	r3, #2
 8008a32:	2200      	movs	r2, #0
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	3303      	adds	r3, #3
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	701a      	strb	r2, [r3, #0]
                            vSetField32( pxAnswer, NBNSAnswer_t, ulTTL, dnsNBNS_TTL_VALUE );
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	3304      	adds	r3, #4
 8008a42:	2200      	movs	r2, #0
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	3305      	adds	r3, #5
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	3306      	adds	r3, #6
 8008a52:	220e      	movs	r2, #14
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	3307      	adds	r3, #7
 8008a5a:	2210      	movs	r2, #16
 8008a5c:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usDataLength, 6 );           /* 6 bytes including the length field */
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	3308      	adds	r3, #8
 8008a62:	2200      	movs	r2, #0
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	3309      	adds	r3, #9
 8008a6a:	2206      	movs	r2, #6
 8008a6c:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usNbFlags, dnsNBNS_NAME_FLAGS );
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	330a      	adds	r3, #10
 8008a72:	2260      	movs	r2, #96	; 0x60
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	330b      	adds	r3, #11
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	701a      	strb	r2, [r3, #0]
                            vSetField32( pxAnswer, NBNSAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8008a7e:	4b2e      	ldr	r3, [pc, #184]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	061a      	lsls	r2, r3, #24
 8008a84:	4b2c      	ldr	r3, [pc, #176]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	021b      	lsls	r3, r3, #8
 8008a8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	4b29      	ldr	r3, [pc, #164]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	0a1b      	lsrs	r3, r3, #8
 8008a96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	4b26      	ldr	r3, [pc, #152]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	0e1b      	lsrs	r3, r3, #24
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	0e1a      	lsrs	r2, r3, #24
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	4b22      	ldr	r3, [pc, #136]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	061a      	lsls	r2, r3, #24
 8008ab4:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	4b1d      	ldr	r3, [pc, #116]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	0a1b      	lsrs	r3, r3, #8
 8008ac6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008aca:	431a      	orrs	r2, r3
 8008acc:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	0e1b      	lsrs	r3, r3, #24
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	0c1a      	lsrs	r2, r3, #16
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	330d      	adds	r3, #13
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	061a      	lsls	r2, r3, #24
 8008ae4:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	021b      	lsls	r3, r3, #8
 8008aea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008aee:	431a      	orrs	r2, r3
 8008af0:	4b11      	ldr	r3, [pc, #68]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	0a1b      	lsrs	r3, r3, #8
 8008af6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008afa:	431a      	orrs	r2, r3
 8008afc:	4b0e      	ldr	r3, [pc, #56]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	0e1b      	lsrs	r3, r3, #24
 8008b02:	4313      	orrs	r3, r2
 8008b04:	0a1a      	lsrs	r2, r3, #8
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	330e      	adds	r3, #14
 8008b0a:	b2d2      	uxtb	r2, r2
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <prvTreatNBNS+0x2d8>)
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	0e1a      	lsrs	r2, r3, #24
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	330f      	adds	r3, #15
 8008b18:	b2d2      	uxtb	r2, r2
 8008b1a:	701a      	strb	r2, [r3, #0]
                        #else
                            ( void ) pxAnswer;
                        #endif

                        usLength = ( uint16_t ) ( sizeof( NBNSAnswer_t ) + ( size_t ) offsetof( NBNSRequest_t, usType ) );
 8008b1c:	233e      	movs	r3, #62	; 0x3e
 8008b1e:	847b      	strh	r3, [r7, #34]	; 0x22

                        prvReplyDNSMessage( pxNetworkBuffer, ( BaseType_t ) usLength );
 8008b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b22:	4619      	mov	r1, r3
 8008b24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b26:	f000 f809 	bl	8008b3c <prvReplyDNSMessage>
 8008b2a:	e000      	b.n	8008b2e <prvTreatNBNS+0x2ce>
                return;
 8008b2c:	bf00      	nop
                    }
                }
            }
        }
 8008b2e:	3750      	adds	r7, #80	; 0x50
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	0801146c 	.word	0x0801146c
 8008b38:	20000014 	.word	0x20000014

08008b3c <prvReplyDNSMessage>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the DNS message.
 * @param[in] lNetLength: The length of the DNS message.
 */
        static void prvReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                        BaseType_t lNetLength )
        {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;

            pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff f9e2 	bl	8007f14 <vCastPointerTo_UDPPacket_t>
 8008b50:	61f8      	str	r0, [r7, #28]
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	330e      	adds	r3, #14
 8008b56:	61bb      	str	r3, [r7, #24]
            pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	3322      	adds	r3, #34	; 0x22
 8008b5c:	617b      	str	r3, [r7, #20]
            /* HT: started using defines like 'ipSIZE_OF_xxx' */
            pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	331c      	adds	r3, #28
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	331c      	adds	r3, #28
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	4313      	orrs	r3, r2
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	805a      	strh	r2, [r3, #2]
            /* HT:endian: should not be translated, copying from packet to packet */
            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008b84:	4b22      	ldr	r3, [pc, #136]	; (8008c10 <prvReplyDNSMessage+0xd4>)
 8008b86:	695a      	ldr	r2, [r3, #20]
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	60da      	str	r2, [r3, #12]
            pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2280      	movs	r2, #128	; 0x80
 8008b90:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8008b92:	4b20      	ldr	r3, [pc, #128]	; (8008c14 <prvReplyDNSMessage+0xd8>)
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	021b      	lsls	r3, r3, #8
 8008b98:	b21a      	sxth	r2, r3
 8008b9a:	4b1e      	ldr	r3, [pc, #120]	; (8008c14 <prvReplyDNSMessage+0xd8>)
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	b21b      	sxth	r3, r3
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	b21b      	sxth	r3, r3
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8008bae:	4b19      	ldr	r3, [pc, #100]	; (8008c14 <prvReplyDNSMessage+0xd8>)
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	4b17      	ldr	r3, [pc, #92]	; (8008c14 <prvReplyDNSMessage+0xd8>)
 8008bb8:	801a      	strh	r2, [r3, #0]
            pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	3308      	adds	r3, #8
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	809a      	strh	r2, [r3, #4]
            vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	021b      	lsls	r3, r3, #8
 8008bde:	4313      	orrs	r3, r2
 8008be0:	827b      	strh	r3, [r7, #18]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	885b      	ldrh	r3, [r3, #2]
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	801a      	strh	r2, [r3, #0]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	8a7a      	ldrh	r2, [r7, #18]
 8008bf0:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent */
            uxDataLength = ( ( size_t ) lNetLength ) + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	332a      	adds	r3, #42	; 0x2a
 8008bf6:	60fb      	str	r3, [r7, #12]
                    ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
                }
            #endif

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	61da      	str	r2, [r3, #28]

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008bfe:	2100      	movs	r1, #0
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 f8ef 	bl	8009de4 <vReturnEthernetFrame>
        }
 8008c06:	bf00      	nop
 8008c08:	3720      	adds	r7, #32
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000014 	.word	0x20000014
 8008c14:	2000bc58 	.word	0x2000bc58

08008c18 <prvProcessDNSCache>:
 */
        static BaseType_t prvProcessDNSCache( const char * pcName,
                                              uint32_t * pulIP,
                                              uint32_t ulTTL,
                                              BaseType_t xLookUp )
        {
 8008c18:	b590      	push	{r4, r7, lr}
 8008c1a:	b089      	sub	sp, #36	; 0x24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
            BaseType_t x;
            BaseType_t xFound = pdFALSE;
 8008c26:	2300      	movs	r3, #0
 8008c28:	61bb      	str	r3, [r7, #24]
            uint32_t ulCurrentTimeSeconds = ( xTaskGetTickCount() / portTICK_PERIOD_MS ) / 1000UL;
 8008c2a:	f7fd f87f 	bl	8005d2c <xTaskGetTickCount>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	4b7e      	ldr	r3, [pc, #504]	; (8008e2c <prvProcessDNSCache+0x214>)
 8008c32:	fba3 2302 	umull	r2, r3, r3, r2
 8008c36:	099b      	lsrs	r3, r3, #6
 8008c38:	617b      	str	r3, [r7, #20]
            uint32_t ulIPAddressIndex = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	613b      	str	r3, [r7, #16]
            static BaseType_t xFreeEntry = 0;

            configASSERT( ( pcName != NULL ) );
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d104      	bne.n	8008c4e <prvProcessDNSCache+0x36>
 8008c44:	497a      	ldr	r1, [pc, #488]	; (8008e30 <prvProcessDNSCache+0x218>)
 8008c46:	f240 70d5 	movw	r0, #2005	; 0x7d5
 8008c4a:	f7f7 ff23 	bl	8000a94 <vAssertCalled>

            /* For each entry in the DNS cache table. */
            for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	e096      	b.n	8008d82 <prvProcessDNSCache+0x16a>
            {
                if( xDNSCache[ x ].pcName[ 0 ] == ( char ) 0 )
 8008c54:	4977      	ldr	r1, [pc, #476]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	440b      	add	r3, r1
 8008c62:	3304      	adds	r3, #4
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 8087 	beq.w	8008d7a <prvProcessDNSCache+0x162>
                {
                    continue;
                }

                if( strcmp( xDNSCache[ x ].pcName, pcName ) == 0 )
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4a6f      	ldr	r2, [pc, #444]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008c78:	4413      	add	r3, r2
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	68f9      	ldr	r1, [r7, #12]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7f7 fade 	bl	8000240 <strcmp>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d178      	bne.n	8008d7c <prvProcessDNSCache+0x164>
                {
                    /* Is this function called for a lookup or to add/update an IP address? */
                    if( xLookUp != pdFALSE )
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d052      	beq.n	8008d36 <prvProcessDNSCache+0x11e>
                    {
                        /* Confirm that the record is still fresh. */
                        if( ulCurrentTimeSeconds < ( xDNSCache[ x ].ulTimeWhenAddedInSeconds + FreeRTOS_ntohl( xDNSCache[ x ].ulTTL ) ) )
 8008c90:	4968      	ldr	r1, [pc, #416]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	4613      	mov	r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	1a9b      	subs	r3, r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	440b      	add	r3, r1
 8008c9e:	3318      	adds	r3, #24
 8008ca0:	6819      	ldr	r1, [r3, #0]
 8008ca2:	4864      	ldr	r0, [pc, #400]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4403      	add	r3, r0
 8008cb0:	3314      	adds	r3, #20
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	0618      	lsls	r0, r3, #24
 8008cb6:	4c5f      	ldr	r4, [pc, #380]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4423      	add	r3, r4
 8008cc4:	3314      	adds	r3, #20
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	021b      	lsls	r3, r3, #8
 8008cca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008cce:	4318      	orrs	r0, r3
 8008cd0:	4c58      	ldr	r4, [pc, #352]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4423      	add	r3, r4
 8008cde:	3314      	adds	r3, #20
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	0a1b      	lsrs	r3, r3, #8
 8008ce4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ce8:	4318      	orrs	r0, r3
 8008cea:	4c52      	ldr	r4, [pc, #328]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008cec:	69fa      	ldr	r2, [r7, #28]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	1a9b      	subs	r3, r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4423      	add	r3, r4
 8008cf8:	3314      	adds	r3, #20
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	0e1b      	lsrs	r3, r3, #24
 8008cfe:	4303      	orrs	r3, r0
 8008d00:	440b      	add	r3, r1
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d20b      	bcs.n	8008d20 <prvProcessDNSCache+0x108>
                                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
                                ulIPAddressIndex = ucIndex;

                                xDNSCache[ x ].ucCurrentIPAddress++;
                            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */
                            *pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 8008d08:	494a      	ldr	r1, [pc, #296]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008d0a:	69fa      	ldr	r2, [r7, #28]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4413      	add	r3, r2
 8008d16:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	e029      	b.n	8008d74 <prvProcessDNSCache+0x15c>
                        }
                        else
                        {
                            /* Age out the old cached record. */
                            xDNSCache[ x ].pcName[ 0 ] = ( char ) 0;
 8008d20:	4944      	ldr	r1, [pc, #272]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	4613      	mov	r3, r2
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	1a9b      	subs	r3, r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	3304      	adds	r3, #4
 8008d30:	2200      	movs	r2, #0
 8008d32:	701a      	strb	r2, [r3, #0]
 8008d34:	e01e      	b.n	8008d74 <prvProcessDNSCache+0x15c>

                                ulIPAddressIndex = xDNSCache[ x ].ucNumIPAddresses;
                                xDNSCache[ x ].ucNumIPAddresses++;
                            }
                        #endif
                        xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	483e      	ldr	r0, [pc, #248]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008d3c:	69fa      	ldr	r2, [r7, #28]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	1a9b      	subs	r3, r3, r2
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4413      	add	r3, r2
 8008d48:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                        xDNSCache[ x ].ulTTL = ulTTL;
 8008d4c:	4939      	ldr	r1, [pc, #228]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008d4e:	69fa      	ldr	r2, [r7, #28]
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	3314      	adds	r3, #20
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	601a      	str	r2, [r3, #0]
                        xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008d60:	4934      	ldr	r1, [pc, #208]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	4613      	mov	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3318      	adds	r3, #24
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	601a      	str	r2, [r3, #0]
                    }

                    xFound = pdTRUE;
 8008d74:	2301      	movs	r3, #1
 8008d76:	61bb      	str	r3, [r7, #24]
                    break;
 8008d78:	e007      	b.n	8008d8a <prvProcessDNSCache+0x172>
                    continue;
 8008d7a:	bf00      	nop
            for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	f77f af65 	ble.w	8008c54 <prvProcessDNSCache+0x3c>
                }
            }

            if( xFound == pdFALSE )
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d146      	bne.n	8008e1e <prvProcessDNSCache+0x206>
            {
                if( xLookUp != pdFALSE )
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <prvProcessDNSCache+0x186>
                {
                    *pulIP = 0UL;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e03f      	b.n	8008e1e <prvProcessDNSCache+0x206>
                }
                else
                {
                    /* Add or update the item. */
                    if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f7f7 fa58 	bl	8000254 <strlen>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b0f      	cmp	r3, #15
 8008da8:	d839      	bhi.n	8008e1e <prvProcessDNSCache+0x206>
                    {
                        ( void ) strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
 8008daa:	4b23      	ldr	r3, [pc, #140]	; (8008e38 <prvProcessDNSCache+0x220>)
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	4613      	mov	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4a1f      	ldr	r2, [pc, #124]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008db8:	4413      	add	r3, r2
 8008dba:	3304      	adds	r3, #4
 8008dbc:	68f9      	ldr	r1, [r7, #12]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f007 f9ee 	bl	80101a0 <strcpy>

                        xDNSCache[ xFreeEntry ].ulIPAddresses[ 0 ] = *pulIP;
 8008dc4:	4b1c      	ldr	r3, [pc, #112]	; (8008e38 <prvProcessDNSCache+0x220>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	6819      	ldr	r1, [r3, #0]
 8008dcc:	4819      	ldr	r0, [pc, #100]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008dce:	4613      	mov	r3, r2
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4403      	add	r3, r0
 8008dd8:	6019      	str	r1, [r3, #0]
                        xDNSCache[ xFreeEntry ].ulTTL = ulTTL;
 8008dda:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <prvProcessDNSCache+0x220>)
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	4915      	ldr	r1, [pc, #84]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008de0:	4613      	mov	r3, r2
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	3314      	adds	r3, #20
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	601a      	str	r2, [r3, #0]
                        xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008df0:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <prvProcessDNSCache+0x220>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	490f      	ldr	r1, [pc, #60]	; (8008e34 <prvProcessDNSCache+0x21c>)
 8008df6:	4613      	mov	r3, r2
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	440b      	add	r3, r1
 8008e00:	3318      	adds	r3, #24
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	601a      	str	r2, [r3, #0]
                                             0,
                                             sizeof( xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ] ) *
                                             ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
                        #endif

                        xFreeEntry++;
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <prvProcessDNSCache+0x220>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	4a0a      	ldr	r2, [pc, #40]	; (8008e38 <prvProcessDNSCache+0x220>)
 8008e0e:	6013      	str	r3, [r2, #0]

                        if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8008e10:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <prvProcessDNSCache+0x220>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d102      	bne.n	8008e1e <prvProcessDNSCache+0x206>
                        {
                            xFreeEntry = 0;
 8008e18:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <prvProcessDNSCache+0x220>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
                        }
                    }
                }
            }

            if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b00      	cmp	r3, #0
            {
                FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
            }

            return xFound;
 8008e22:	69bb      	ldr	r3, [r7, #24]
        }
 8008e24:	4618      	mov	r0, r3
 8008e26:	3724      	adds	r7, #36	; 0x24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd90      	pop	{r4, r7, pc}
 8008e2c:	10624dd3 	.word	0x10624dd3
 8008e30:	08010c1c 	.word	0x08010c1c
 8008e34:	2000bbe0 	.word	0x2000bbe0
 8008e38:	2000bc50 	.word	0x2000bc50

08008e3c <vCastPointerTo_EthernetHeader_t>:
    {
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
        return ( EthernetHeader_t * ) pvArgument;
 8008e44:	687b      	ldr	r3, [r7, #4]
    }
 8008e46:	4618      	mov	r0, r3
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <vCastConstPointerTo_EthernetHeader_t>:
    {
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
        return ( const EthernetHeader_t * ) pvArgument;
 8008e5a:	687b      	ldr	r3, [r7, #4]
    }
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <vCastPointerTo_ARPPacket_t>:
    {
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 8008e70:	687b      	ldr	r3, [r7, #4]
    }
 8008e72:	4618      	mov	r0, r3
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <vCastPointerTo_IPPacket_t>:
    {
 8008e7e:	b480      	push	{r7}
 8008e80:	b083      	sub	sp, #12
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
        return ( IPPacket_t * ) pvArgument;
 8008e86:	687b      	ldr	r3, [r7, #4]
    }
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <vCastConstPointerTo_IPPacket_t>:
    {
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
        return ( const IPPacket_t * ) pvArgument;
 8008e9c:	687b      	ldr	r3, [r7, #4]
    }
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <vCastPointerTo_ICMPPacket_t>:
    {
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
        return ( ICMPPacket_t * ) pvArgument;
 8008eb2:	687b      	ldr	r3, [r7, #4]
    }
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <vCastConstPointerTo_UDPPacket_t>:
    {
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 8008ec8:	687b      	ldr	r3, [r7, #4]
    }
 8008eca:	4618      	mov	r0, r3
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <vCastPointerTo_ProtocolPacket_t>:
    {
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
        return ( ProtocolPacket_t * ) pvArgument;
 8008ede:	687b      	ldr	r3, [r7, #4]
    }
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <vCastConstPointerTo_ProtocolPacket_t>:
    {
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
        return ( const ProtocolPacket_t * ) pvArgument;
 8008ef4:	687b      	ldr	r3, [r7, #4]
    }
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 8008f02:	b480      	push	{r7}
 8008f04:	b083      	sub	sp, #12
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 8008f0a:	687b      	ldr	r3, [r7, #4]
    }
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <vCastPointerTo_SocketSelect_t>:
             */
            EventGroupHandle_t xSelectGroup;
        } SocketSelect_t;

        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( SocketSelect_t )
        {
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
            return ( SocketSelect_t * ) pvArgument;
 8008f20:	687b      	ldr	r3, [r7, #4]
        }
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 8008f36:	687b      	ldr	r3, [r7, #4]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <prvIPTask>:
 *        the data of the IP-stack, and so it has no need of using mutexes.
 *
 * @param[in] pvParameters: Not used.
 */
static void prvIPTask( void * pvParameters )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08a      	sub	sp, #40	; 0x28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]

    /* Generate a dummy message to say that the network connection has gone
     *  down.  This will cause this task to initialise the network interface.  After
     *  this it is the responsibility of the network interface hardware driver to
     *  send this message if a previously connected network is disconnected. */
    FreeRTOS_NetworkDown();
 8008f4c:	f000 f9d6 	bl	80092fc <FreeRTOS_NetworkDown>

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* Initialise the TCP timer. */
            prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8008f50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f54:	4862      	ldr	r0, [pc, #392]	; (80090e0 <prvIPTask+0x19c>)
 8008f56:	f000 f985 	bl	8009264 <prvIPTimerReload>
        }
    #endif

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 8008f5a:	4b62      	ldr	r3, [pc, #392]	; (80090e4 <prvIPTask+0x1a0>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]
    {
        ipconfigWATCHDOG_TIMER();

        /* Check the ARP, DHCP and TCP timers to see if there is any periodic
         * or timeout processing to perform. */
        prvCheckNetworkTimers();
 8008f60:	f000 f91c 	bl	800919c <prvCheckNetworkTimers>

        /* Calculate the acceptable maximum sleep time. */
        xNextIPSleep = prvCalculateSleepTime();
 8008f64:	f000 f8f2 	bl	800914c <prvCalculateSleepTime>
 8008f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait until there is something to do. If the following call exits
         * due to a time out rather than a message being received, set a
         * 'NoEvent' value. */
        if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8008f6a:	4b5f      	ldr	r3, [pc, #380]	; (80090e8 <prvIPTask+0x1a4>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f107 0114 	add.w	r1, r7, #20
 8008f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fb fff7 	bl	8004f68 <xQueueReceive>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <prvIPTask+0x40>
        {
            xReceivedEvent.eEventType = eNoEvent;
 8008f80:	23ff      	movs	r3, #255	; 0xff
 8008f82:	753b      	strb	r3, [r7, #20]
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

        switch( xReceivedEvent.eEventType )
 8008f84:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	2b0d      	cmp	r3, #13
 8008f8c:	f200 809d 	bhi.w	80090ca <prvIPTask+0x186>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <prvIPTask+0x54>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	080090cb 	.word	0x080090cb
 8008f9c:	08008fd1 	.word	0x08008fd1
 8008fa0:	08008fdd 	.word	0x08008fdd
 8008fa4:	08008fef 	.word	0x08008fef
 8008fa8:	08009003 	.word	0x08009003
 8008fac:	0800906b 	.word	0x0800906b
 8008fb0:	080090cb 	.word	0x080090cb
 8008fb4:	0800908f 	.word	0x0800908f
 8008fb8:	0800909b 	.word	0x0800909b
 8008fbc:	080090c5 	.word	0x080090c5
 8008fc0:	08009009 	.word	0x08009009
 8008fc4:	08009059 	.word	0x08009059
 8008fc8:	0800907d 	.word	0x0800907d
 8008fcc:	080090cb 	.word	0x080090cb
        {
            case eNetworkDownEvent:
                /* Attempt to establish a connection. */
                xNetworkUp = pdFALSE;
 8008fd0:	4b46      	ldr	r3, [pc, #280]	; (80090ec <prvIPTask+0x1a8>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
                prvProcessNetworkDownEvent();
 8008fd6:	f000 fb65 	bl	80096a4 <prvProcessNetworkDownEvent>
                break;
 8008fda:	e079      	b.n	80090d0 <prvIPTask+0x18c>
            case eNetworkRxEvent:

                /* The network hardware driver has received a new packet.  A
                 * pointer to the received buffer is located in the pvData member
                 * of the received event structure. */
                prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff ffa5 	bl	8008f2e <vCastPointerTo_NetworkBufferDescriptor_t>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 f89a 	bl	8009120 <prvHandleEthernetPacket>
                break;
 8008fec:	e070      	b.n	80090d0 <prvIPTask+0x18c>

            case eNetworkTxEvent:

               {
                   NetworkBufferDescriptor_t * pxDescriptor = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData );
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff ff9c 	bl	8008f2e <vCastPointerTo_NetworkBufferDescriptor_t>
 8008ff6:	61f8      	str	r0, [r7, #28]

                   /* Send a network packet. The ownership will  be transferred to
                    * the driver, which will release it after delivery. */
                   iptraceNETWORK_INTERFACE_OUTPUT( pxDescriptor->xDataLength, pxDescriptor->pucEthernetBuffer );
                   ( void ) xNetworkInterfaceOutput( pxDescriptor, pdTRUE );
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	69f8      	ldr	r0, [r7, #28]
 8008ffc:	f006 f9b8 	bl	800f370 <xNetworkInterfaceOutput>
               }

               break;
 8009000:	e066      	b.n	80090d0 <prvIPTask+0x18c>

            case eARPTimerEvent:
                /* The ARP timer has expired, process the ARP cache. */
                vARPAgeCache();
 8009002:	f7fe fe4f 	bl	8007ca4 <vARPAgeCache>
                break;
 8009006:	e063      	b.n	80090d0 <prvIPTask+0x18c>
                /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
                 * to a port. The port number is communicated in the socket field
                 * usLocalPort. vSocketBind() will actually bind the socket and the
                 * API will unblock as soon as the eSOCKET_BOUND event is
                 * triggered. */
                pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff ff79 	bl	8008f02 <vCastPointerTo_FreeRTOS_Socket_t>
 8009010:	6238      	str	r0, [r7, #32]
                xAddress.sin_addr = 0U; /* For the moment. */
 8009012:	2300      	movs	r3, #0
 8009014:	613b      	str	r3, [r7, #16]
                xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800901a:	021b      	lsls	r3, r3, #8
 800901c:	b21a      	sxth	r2, r3
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009022:	0a1b      	lsrs	r3, r3, #8
 8009024:	b29b      	uxth	r3, r3
 8009026:	b21b      	sxth	r3, r3
 8009028:	4313      	orrs	r3, r2
 800902a:	b21b      	sxth	r3, r3
 800902c:	b29b      	uxth	r3, r3
 800902e:	81fb      	strh	r3, [r7, #14]
                pxSocket->usLocalPort = 0U;
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	2200      	movs	r2, #0
 8009034:	849a      	strh	r2, [r3, #36]	; 0x24
                ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009036:	f107 010c 	add.w	r1, r7, #12
 800903a:	2300      	movs	r3, #0
 800903c:	2208      	movs	r2, #8
 800903e:	6a38      	ldr	r0, [r7, #32]
 8009040:	f001 f92a 	bl	800a298 <vSocketBind>

                /* Before 'eSocketBindEvent' was sent it was tested that
                 * ( xEventGroup != NULL ) so it can be used now to wake up the
                 * user. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f043 0210 	orr.w	r2, r3, #16
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	601a      	str	r2, [r3, #0]
                vSocketWakeUpUser( pxSocket );
 8009050:	6a38      	ldr	r0, [r7, #32]
 8009052:	f001 fbd4 	bl	800a7fe <vSocketWakeUpUser>
                break;
 8009056:	e03b      	b.n	80090d0 <prvIPTask+0x18c>

                /* The user API FreeRTOS_closesocket() has sent a message to the
                 * IP-task to actually close a socket. This is handled in
                 * vSocketClose().  As the socket gets closed, there is no way to
                 * report back to the API, so the API won't wait for the result */
                ( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ff51 	bl	8008f02 <vCastPointerTo_FreeRTOS_Socket_t>
 8009060:	4603      	mov	r3, r0
 8009062:	4618      	mov	r0, r3
 8009064:	f001 f9c4 	bl	800a3f0 <vSocketClose>
                break;
 8009068:	e032      	b.n	80090d0 <prvIPTask+0x18c>
            case eStackTxEvent:

                /* The network stack has generated a packet to send.  A
                 * pointer to the generated buffer is located in the pvData
                 * member of the received event structure. */
                vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff ff5e 	bl	8008f2e <vCastPointerTo_NetworkBufferDescriptor_t>
 8009072:	4603      	mov	r3, r0
 8009074:	4618      	mov	r0, r3
 8009076:	f005 fe01 	bl	800ec7c <vProcessGeneratedUDPPacket>
                break;
 800907a:	e029      	b.n	80090d0 <prvIPTask+0x18c>
                            vSocketSelect( pxMessage->pxSocketSet );
                            ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                        }
                    #else
                        {
                            vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff ff4a 	bl	8008f18 <vCastPointerTo_SocketSelect_t>
 8009084:	4603      	mov	r3, r0
 8009086:	4618      	mov	r0, r3
 8009088:	f001 fea2 	bl	800add0 <vSocketSelect>
                        }
                    #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
                #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
                break;
 800908c:	e020      	b.n	80090d0 <prvIPTask+0x18c>
            case eTCPTimerEvent:
                #if ( ipconfigUSE_TCP == 1 )

                    /* Simply mark the TCP timer as expired so it gets processed
                     * the next time prvCheckNetworkTimers() is called. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800908e:	4a14      	ldr	r2, [pc, #80]	; (80090e0 <prvIPTask+0x19c>)
 8009090:	7813      	ldrb	r3, [r2, #0]
 8009092:	f043 0302 	orr.w	r3, r3, #2
 8009096:	7013      	strb	r3, [r2, #0]
                #endif /* ipconfigUSE_TCP */
                break;
 8009098:	e01a      	b.n	80090d0 <prvIPTask+0x18c>

                /* The API FreeRTOS_accept() was called, the IP-task will now
                 * check if the listening socket (communicated in pvData) actually
                 * received a new connection. */
                #if ( ipconfigUSE_TCP == 1 )
                    pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff ff30 	bl	8008f02 <vCastPointerTo_FreeRTOS_Socket_t>
 80090a2:	6238      	str	r0, [r7, #32]

                    if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 80090a4:	6a38      	ldr	r0, [r7, #32]
 80090a6:	f004 fdb3 	bl	800dc10 <xTCPCheckNewClient>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00e      	beq.n	80090ce <prvIPTask+0x18a>
                    {
                        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f043 0204 	orr.w	r2, r3, #4
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	601a      	str	r2, [r3, #0]
                        vSocketWakeUpUser( pxSocket );
 80090bc:	6a38      	ldr	r0, [r7, #32]
 80090be:	f001 fb9e 	bl	800a7fe <vSocketWakeUpUser>
                    }
                #endif /* ipconfigUSE_TCP */
                break;
 80090c2:	e004      	b.n	80090ce <prvIPTask+0x18a>
            case eTCPNetStat:

                /* FreeRTOS_netstat() was called to have the IP-task print an
                 * overview of all sockets and their connections */
                #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                    vTCPNetStat();
 80090c4:	f001 fdaa 	bl	800ac1c <vTCPNetStat>
                #endif /* ipconfigUSE_TCP */
                break;
 80090c8:	e002      	b.n	80090d0 <prvIPTask+0x18c>
                /* xQueueReceive() returned because of a normal time-out. */
                break;

            default:
                /* Should not get here. */
                break;
 80090ca:	bf00      	nop
 80090cc:	e000      	b.n	80090d0 <prvIPTask+0x18c>
                break;
 80090ce:	bf00      	nop
        }

        if( xNetworkDownEventPending != pdFALSE )
 80090d0:	4b07      	ldr	r3, [pc, #28]	; (80090f0 <prvIPTask+0x1ac>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f43f af43 	beq.w	8008f60 <prvIPTask+0x1c>
        {
            /* A network down event could not be posted to the network event
             * queue because the queue was full.
             * As this code runs in the IP-task, it can be done directly by
             * calling prvProcessNetworkDownEvent(). */
            prvProcessNetworkDownEvent();
 80090da:	f000 fae3 	bl	80096a4 <prvProcessNetworkDownEvent>
        prvCheckNetworkTimers();
 80090de:	e73f      	b.n	8008f60 <prvIPTask+0x1c>
 80090e0:	2000bca8 	.word	0x2000bca8
 80090e4:	2000bcbc 	.word	0x2000bcbc
 80090e8:	2000bc54 	.word	0x2000bc54
 80090ec:	2000bc90 	.word	0x2000bc90
 80090f0:	2000bc84 	.word	0x2000bc84

080090f4 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 80090fa:	f7fd f97f 	bl	80063fc <xTaskGetCurrentTaskHandle>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b06      	ldr	r3, [pc, #24]	; (800911c <xIsCallingFromIPTask+0x28>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d102      	bne.n	800910e <xIsCallingFromIPTask+0x1a>
    {
        xReturn = pdTRUE;
 8009108:	2301      	movs	r3, #1
 800910a:	607b      	str	r3, [r7, #4]
 800910c:	e001      	b.n	8009112 <xIsCallingFromIPTask+0x1e>
    }
    else
    {
        xReturn = pdFALSE;
 800910e:	2300      	movs	r3, #0
 8009110:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8009112:	687b      	ldr	r3, [r7, #4]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	2000bc88 	.word	0x2000bc88

08009120 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer: Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
             * member.  The loop below walks through the chain processing each packet
             * in the chain in turn. */
            do
            {
                /* Store a pointer to the buffer after pxBuffer for use later on. */
                pxNextBuffer = pxBuffer->pxNextBuffer;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	60fb      	str	r3, [r7, #12]

                /* Make it NULL to avoid using it later on. */
                pxBuffer->pxNextBuffer = NULL;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	625a      	str	r2, [r3, #36]	; 0x24

                prvProcessEthernetPacket( pxBuffer );
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 faf1 	bl	800971c <prvProcessEthernetPacket>
                pxBuffer = pxNextBuffer;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	607b      	str	r3, [r7, #4]

                /* While there is another packet in the chain. */
            } while( pxBuffer != NULL );
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1f1      	bne.n	8009128 <prvHandleEthernetPacket+0x8>
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <prvCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
static TickType_t prvCalculateSleepTime( void )
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
    TickType_t xMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009152:	f242 7310 	movw	r3, #10000	; 0x2710
 8009156:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009158:	4b0e      	ldr	r3, [pc, #56]	; (8009194 <prvCalculateSleepTime+0x48>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d007      	beq.n	8009176 <prvCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <prvCalculateSleepTime+0x48>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d902      	bls.n	8009176 <prvCalculateSleepTime+0x2a>
        {
            xMaximumSleepTime = xARPTimer.ulReloadTime;
 8009170:	4b08      	ldr	r3, [pc, #32]	; (8009194 <prvCalculateSleepTime+0x48>)
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	607b      	str	r3, [r7, #4]
        }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
        {
            if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 8009176:	4b08      	ldr	r3, [pc, #32]	; (8009198 <prvCalculateSleepTime+0x4c>)
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	429a      	cmp	r2, r3
 800917e:	d902      	bls.n	8009186 <prvCalculateSleepTime+0x3a>
            {
                xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <prvCalculateSleepTime+0x4c>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    return xMaximumSleepTime;
 8009186:	687b      	ldr	r3, [r7, #4]
}
 8009188:	4618      	mov	r0, r3
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	2000bc94 	.word	0x2000bc94
 8009198:	2000bca8 	.word	0x2000bca8

0800919c <prvCheckNetworkTimers>:
/**
 * @brief Check the network timers (ARP/DHCP/DNS/TCP) and if they are
 *        expired, send an event to the IP-Task.
 */
static void prvCheckNetworkTimers( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 80091a2:	481a      	ldr	r0, [pc, #104]	; (800920c <prvCheckNetworkTimers+0x70>)
 80091a4:	f000 f86e 	bl	8009284 <prvIPTimerCheck>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <prvCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 80091ae:	2003      	movs	r0, #3
 80091b0:	f000 fa16 	bl	80095e0 <xSendEventToIPTask>
            TickType_t xNextTime;
            BaseType_t xCheckTCPSockets;

            /* If the IP task has messages waiting to be processed then
             * it will not sleep in any case. */
            if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 80091b4:	4b16      	ldr	r3, [pc, #88]	; (8009210 <prvCheckNetworkTimers+0x74>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fc f89b 	bl	80052f4 <uxQueueMessagesWaiting>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <prvCheckNetworkTimers+0x2e>
            {
                xWillSleep = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	e001      	b.n	80091ce <prvCheckNetworkTimers+0x32>
            }
            else
            {
                xWillSleep = pdFALSE;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60fb      	str	r3, [r7, #12]
            }

            /* Sockets need to be checked if the TCP timer has expired. */
            xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 80091ce:	4811      	ldr	r0, [pc, #68]	; (8009214 <prvCheckNetworkTimers+0x78>)
 80091d0:	f000 f858 	bl	8009284 <prvIPTimerCheck>
 80091d4:	60b8      	str	r0, [r7, #8]

            /* Sockets will also be checked if there are TCP messages but the
            * message queue is empty (indicated by xWillSleep being true). */
            if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 80091d6:	4b10      	ldr	r3, [pc, #64]	; (8009218 <prvCheckNetworkTimers+0x7c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d004      	beq.n	80091e8 <prvCheckNetworkTimers+0x4c>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <prvCheckNetworkTimers+0x4c>
            {
                xCheckTCPSockets = pdTRUE;
 80091e4:	2301      	movs	r3, #1
 80091e6:	60bb      	str	r3, [r7, #8]
            }

            if( xCheckTCPSockets != pdFALSE )
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <prvCheckNetworkTimers+0x68>
            {
                /* Attend to the sockets, returning the period after which the
                 * check must be repeated. */
                xNextTime = xTCPTimerCheck( xWillSleep );
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f001 fb40 	bl	800a874 <xTCPTimerCheck>
 80091f4:	6078      	str	r0, [r7, #4]
                prvIPTimerStart( &xTCPTimer, xNextTime );
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	4806      	ldr	r0, [pc, #24]	; (8009214 <prvCheckNetworkTimers+0x78>)
 80091fa:	f000 f80f 	bl	800921c <prvIPTimerStart>
                xProcessedTCPMessage = 0;
 80091fe:	4b06      	ldr	r3, [pc, #24]	; (8009218 <prvCheckNetworkTimers+0x7c>)
 8009200:	2200      	movs	r2, #0
 8009202:	601a      	str	r2, [r3, #0]
            }
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	2000bc94 	.word	0x2000bc94
 8009210:	2000bc54 	.word	0x2000bc54
 8009214:	2000bca8 	.word	0x2000bca8
 8009218:	2000bc8c 	.word	0x2000bc8c

0800921c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime: Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3304      	adds	r3, #4
 800922a:	4618      	mov	r0, r3
 800922c:	f7fc ff96 	bl	800615c <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d105      	bne.n	8009248 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	7813      	ldrb	r3, [r2, #0]
 8009240:	f043 0302 	orr.w	r3, r3, #2
 8009244:	7013      	strb	r3, [r2, #0]
 8009246:	e004      	b.n	8009252 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7813      	ldrb	r3, [r2, #0]
 800924c:	f36f 0341 	bfc	r3, #1, #1
 8009250:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	7813      	ldrb	r3, [r2, #0]
 8009256:	f043 0301 	orr.w	r3, r3, #1
 800925a:	7013      	strb	r3, [r2, #0]
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <prvIPTimerReload>:
 * @param[in] pxTimer: Pointer to the IP timer.
 * @param[in] xTime: Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff ffd0 	bl	800921c <prvIPTimerStart>
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <prvIPTimerCheck>:
 * @param[in] pxTimer: Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d102      	bne.n	80092a0 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	e028      	b.n	80092f2 <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10f      	bne.n	80092ce <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	1d1a      	adds	r2, r3, #4
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	330c      	adds	r3, #12
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f7fc ff87 	bl	80061cc <xTaskCheckForTimeOut>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	7813      	ldrb	r3, [r2, #0]
 80092c8:	f043 0302 	orr.w	r3, r3, #2
 80092cc:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d008      	beq.n	80092ee <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7ff ff9a 	bl	800921c <prvIPTimerStart>
            xReturn = pdTRUE;
 80092e8:	2301      	movs	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	e001      	b.n	80092f2 <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 80092f2:	68fb      	ldr	r3, [r7, #12]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <FreeRTOS_NetworkDown>:
 * @brief Send a network down event to the IP-task. If it fails to post a message,
 *         the failure will be noted in the variable 'xNetworkDownEventPending'
 *         and later on a 'network-down' event, it will be executed.
 */
void FreeRTOS_NetworkDown( void )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
    static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009302:	2300      	movs	r3, #0
 8009304:	607b      	str	r3, [r7, #4]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4808      	ldr	r0, [pc, #32]	; (800932c <FreeRTOS_NetworkDown+0x30>)
 800930a:	f000 f97f 	bl	800960c <xSendEventStructToIPTask>
 800930e:	4603      	mov	r3, r0
 8009310:	2b01      	cmp	r3, #1
 8009312:	d003      	beq.n	800931c <FreeRTOS_NetworkDown+0x20>
    {
        /* Could not send the message, so it is still pending. */
        xNetworkDownEventPending = pdTRUE;
 8009314:	4b06      	ldr	r3, [pc, #24]	; (8009330 <FreeRTOS_NetworkDown+0x34>)
 8009316:	2201      	movs	r2, #1
 8009318:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        xNetworkDownEventPending = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 800931a:	e002      	b.n	8009322 <FreeRTOS_NetworkDown+0x26>
        xNetworkDownEventPending = pdFALSE;
 800931c:	4b04      	ldr	r3, [pc, #16]	; (8009330 <FreeRTOS_NetworkDown+0x34>)
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	08011428 	.word	0x08011428
 8009330:	2000bc84 	.word	0x2000bc84

08009334 <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800933e:	2100      	movs	r1, #0
 8009340:	6838      	ldr	r0, [r7, #0]
 8009342:	f006 fdaf 	bl	800fea4 <pxGetNetworkBufferWithDescriptor>
 8009346:	60f8      	str	r0, [r7, #12]

    if( pxNewBuffer != NULL )
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d017      	beq.n	800937e <pxDuplicateNetworkBufferWithDescriptor+0x4a>
    {
        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	61da      	str	r2, [r3, #28]

        /* Copy the original packet information. */
        pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	695a      	ldr	r2, [r3, #20]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	8c1a      	ldrh	r2, [r3, #32]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	841a      	strh	r2, [r3, #32]
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	845a      	strh	r2, [r3, #34]	; 0x22
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6998      	ldr	r0, [r3, #24]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6999      	ldr	r1, [r3, #24]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	461a      	mov	r2, r3
 800937a:	f006 fe92 	bl	80100a2 <memcpy>
    }

    return pxNewBuffer;
 800937e:	68fb      	ldr	r3, [r7, #12]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d102      	bne.n	800939e <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 8009398:	2300      	movs	r3, #0
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	e011      	b.n	80093c2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
    }
    else
    {
        /* Obtain the network buffer from the zero copy pointer. */
        uxBuffer = ipPOINTER_CAST( uintptr_t, pvBuffer );
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60bb      	str	r3, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	3b0a      	subs	r3, #10
 80093aa:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f003 0303 	and.w	r3, r3, #3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d103      	bne.n	80093be <prvPacketBuffer_to_NetworkBuffer+0x36>
        {
            /* The following statement may trigger a:
             * warning: cast increases required alignment of target type [-Wcast-align].
             * It has been confirmed though that the alignment is suitable. */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	e001      	b.n	80093c2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        }
        else
        {
            pxResult = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 80093c2:	68fb      	ldr	r3, [r7, #12]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 80093d8:	2100      	movs	r1, #0
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7ff ffd4 	bl	8009388 <prvPacketBuffer_to_NetworkBuffer>
 80093e0:	4603      	mov	r3, r0
    }
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
    return prvPacketBuffer_to_NetworkBuffer( pvBuffer, sizeof( UDPPacket_t ) );
 80093f2:	212a      	movs	r1, #42	; 0x2a
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff ffc7 	bl	8009388 <prvPacketBuffer_to_NetworkBuffer>
 80093fa:	4603      	mov	r3, r0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <FreeRTOS_IPInit>:
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 8009404:	b5b0      	push	{r4, r5, r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af02      	add	r7, sp, #8
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFALSE;
 8009412:	2300      	movs	r3, #0
 8009414:	617b      	str	r3, [r7, #20]

    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8009416:	f000 fd4f 	bl	8009eb8 <xIPIsNetworkTaskReady>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <FreeRTOS_IPInit+0x26>
 8009420:	4966      	ldr	r1, [pc, #408]	; (80095bc <FreeRTOS_IPInit+0x1b8>)
 8009422:	f44f 608e 	mov.w	r0, #1136	; 0x470
 8009426:	f7f7 fb35 	bl	8000a94 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800942a:	4b65      	ldr	r3, [pc, #404]	; (80095c0 <FreeRTOS_IPInit+0x1bc>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d004      	beq.n	800943c <FreeRTOS_IPInit+0x38>
 8009432:	4962      	ldr	r1, [pc, #392]	; (80095bc <FreeRTOS_IPInit+0x1b8>)
 8009434:	f240 4071 	movw	r0, #1137	; 0x471
 8009438:	f7f7 fb2c 	bl	8000a94 <vAssertCalled>
    configASSERT( xIPTaskHandle == NULL );
 800943c:	4b61      	ldr	r3, [pc, #388]	; (80095c4 <FreeRTOS_IPInit+0x1c0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d004      	beq.n	800944e <FreeRTOS_IPInit+0x4a>
 8009444:	495d      	ldr	r1, [pc, #372]	; (80095bc <FreeRTOS_IPInit+0x1b8>)
 8009446:	f240 4072 	movw	r0, #1138	; 0x472
 800944a:	f7f7 fb23 	bl	8000a94 <vAssertCalled>
            configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
            configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
        }
    #endif /* ifndef _lint */
    /* Attempt to create the queue used to communicate with the IP task. */
    xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 800944e:	2200      	movs	r2, #0
 8009450:	2108      	movs	r1, #8
 8009452:	2041      	movs	r0, #65	; 0x41
 8009454:	f7fb fb42 	bl	8004adc <xQueueGenericCreate>
 8009458:	4602      	mov	r2, r0
 800945a:	4b59      	ldr	r3, [pc, #356]	; (80095c0 <FreeRTOS_IPInit+0x1bc>)
 800945c:	601a      	str	r2, [r3, #0]
    configASSERT( xNetworkEventQueue != NULL );
 800945e:	4b58      	ldr	r3, [pc, #352]	; (80095c0 <FreeRTOS_IPInit+0x1bc>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <FreeRTOS_IPInit+0x6c>
 8009466:	4955      	ldr	r1, [pc, #340]	; (80095bc <FreeRTOS_IPInit+0x1b8>)
 8009468:	f240 4089 	movw	r0, #1161	; 0x489
 800946c:	f7f7 fb12 	bl	8000a94 <vAssertCalled>

    if( xNetworkEventQueue != NULL )
 8009470:	4b53      	ldr	r3, [pc, #332]	; (80095c0 <FreeRTOS_IPInit+0x1bc>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 809b 	beq.w	80095b0 <FreeRTOS_IPInit+0x1ac>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                /* A queue registry is normally used to assist a kernel aware
                 * debugger.  If one is in use then it will be helpful for the debugger
                 * to show information about the network event queue. */
                vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800947a:	4b51      	ldr	r3, [pc, #324]	; (80095c0 <FreeRTOS_IPInit+0x1bc>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4952      	ldr	r1, [pc, #328]	; (80095c8 <FreeRTOS_IPInit+0x1c4>)
 8009480:	4618      	mov	r0, r3
 8009482:	f7fc f8a1 	bl	80055c8 <vQueueAddToRegistry>
            }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8009486:	f006 fc83 	bl	800fd90 <xNetworkBuffersInitialise>
 800948a:	4603      	mov	r3, r0
 800948c:	2b01      	cmp	r3, #1
 800948e:	f040 8087 	bne.w	80095a0 <FreeRTOS_IPInit+0x19c>
        {
            /* Store the local IP and MAC address. */
            xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3303      	adds	r3, #3
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	061a      	lsls	r2, r3, #24
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3302      	adds	r3, #2
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	041b      	lsls	r3, r3, #16
 80094a2:	431a      	orrs	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3301      	adds	r3, #1
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	021b      	lsls	r3, r3, #8
 80094ac:	4313      	orrs	r3, r2
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	7812      	ldrb	r2, [r2, #0]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	4a45      	ldr	r2, [pc, #276]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 80094b6:	6013      	str	r3, [r2, #0]
            xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	3303      	adds	r3, #3
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	061a      	lsls	r2, r3, #24
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	3302      	adds	r3, #2
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	041b      	lsls	r3, r3, #16
 80094c8:	431a      	orrs	r2, r3
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	3301      	adds	r3, #1
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	021b      	lsls	r3, r3, #8
 80094d2:	4313      	orrs	r3, r2
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	7812      	ldrb	r2, [r2, #0]
 80094d8:	4313      	orrs	r3, r2
 80094da:	4a3c      	ldr	r2, [pc, #240]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 80094dc:	6053      	str	r3, [r2, #4]
            xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3303      	adds	r3, #3
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	061a      	lsls	r2, r3, #24
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	3302      	adds	r3, #2
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	041b      	lsls	r3, r3, #16
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3301      	adds	r3, #1
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	021b      	lsls	r3, r3, #8
 80094f8:	4313      	orrs	r3, r2
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	7812      	ldrb	r2, [r2, #0]
 80094fe:	4313      	orrs	r3, r2
 8009500:	4a32      	ldr	r2, [pc, #200]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 8009502:	6093      	str	r3, [r2, #8]
            xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	3303      	adds	r3, #3
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	061a      	lsls	r2, r3, #24
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	3302      	adds	r3, #2
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	041b      	lsls	r3, r3, #16
 8009514:	431a      	orrs	r2, r3
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	3301      	adds	r3, #1
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	4313      	orrs	r3, r2
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	7812      	ldrb	r2, [r2, #0]
 8009524:	4313      	orrs	r3, r2
 8009526:	4a29      	ldr	r2, [pc, #164]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 8009528:	60d3      	str	r3, [r2, #12]
            xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 800952a:	4b28      	ldr	r3, [pc, #160]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	4b27      	ldr	r3, [pc, #156]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	43db      	mvns	r3, r3
 8009534:	4313      	orrs	r3, r2
 8009536:	4a25      	ldr	r2, [pc, #148]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 8009538:	6113      	str	r3, [r2, #16]

            ( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800953a:	4a25      	ldr	r2, [pc, #148]	; (80095d0 <FreeRTOS_IPInit+0x1cc>)
 800953c:	4b23      	ldr	r3, [pc, #140]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 800953e:	4614      	mov	r4, r2
 8009540:	461d      	mov	r5, r3
 8009542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009546:	682b      	ldr	r3, [r5, #0]
 8009548:	6023      	str	r3, [r4, #0]
                    *ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
                }
            #else
                {
                    /* The IP address is set from the value passed in. */
                    *ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 800954a:	4b20      	ldr	r3, [pc, #128]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a21      	ldr	r2, [pc, #132]	; (80095d4 <FreeRTOS_IPInit+0x1d0>)
 8009550:	6153      	str	r3, [r2, #20]

                    /* Added to prevent ARP flood to gateway.  Ensure the
                    * gateway is on the same subnet as the IP address. */
                    if( xNetworkAddressing.ulGatewayAddress != 0UL )
 8009552:	4b1e      	ldr	r3, [pc, #120]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00e      	beq.n	8009578 <FreeRTOS_IPInit+0x174>
                    {
                        configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 800955a:	4b1e      	ldr	r3, [pc, #120]	; (80095d4 <FreeRTOS_IPInit+0x1d0>)
 800955c:	695a      	ldr	r2, [r3, #20]
 800955e:	4b1b      	ldr	r3, [pc, #108]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	405a      	eors	r2, r3
 8009564:	4b19      	ldr	r3, [pc, #100]	; (80095cc <FreeRTOS_IPInit+0x1c8>)
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	4013      	ands	r3, r2
 800956a:	2b00      	cmp	r3, #0
 800956c:	d004      	beq.n	8009578 <FreeRTOS_IPInit+0x174>
 800956e:	4913      	ldr	r1, [pc, #76]	; (80095bc <FreeRTOS_IPInit+0x1b8>)
 8009570:	f240 40af 	movw	r0, #1199	; 0x4af
 8009574:	f7f7 fa8e 	bl	8000a94 <vAssertCalled>
                }
            #endif /* ipconfigUSE_DHCP == 1 */

            /* The MAC address is stored in the start of the default packet
             * header fragment, which is used when sending UDP packets. */
            ( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009578:	2206      	movs	r2, #6
 800957a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800957c:	4815      	ldr	r0, [pc, #84]	; (80095d4 <FreeRTOS_IPInit+0x1d0>)
 800957e:	f006 fd90 	bl	80100a2 <memcpy>

            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009582:	f000 fd6f 	bl	800a064 <vNetworkSocketsInit>

            /* Create the task that processes Ethernet and stack events. */
            xReturn = xTaskCreate( prvIPTask,
 8009586:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <FreeRTOS_IPInit+0x1c0>)
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	2303      	movs	r3, #3
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	2300      	movs	r3, #0
 8009590:	f240 228a 	movw	r2, #650	; 0x28a
 8009594:	4910      	ldr	r1, [pc, #64]	; (80095d8 <FreeRTOS_IPInit+0x1d4>)
 8009596:	4811      	ldr	r0, [pc, #68]	; (80095dc <FreeRTOS_IPInit+0x1d8>)
 8009598:	f7fc f8f4 	bl	8005784 <xTaskCreate>
 800959c:	6178      	str	r0, [r7, #20]
 800959e:	e007      	b.n	80095b0 <FreeRTOS_IPInit+0x1ac>
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n" ) );

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 80095a0:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <FreeRTOS_IPInit+0x1bc>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fb febf 	bl	8005328 <vQueueDelete>
            xNetworkEventQueue = NULL;
 80095aa:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <FreeRTOS_IPInit+0x1bc>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	601a      	str	r2, [r3, #0]
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n" ) );
    }

    return xReturn;
 80095b0:	697b      	ldr	r3, [r7, #20]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bdb0      	pop	{r4, r5, r7, pc}
 80095ba:	bf00      	nop
 80095bc:	08010c4c 	.word	0x08010c4c
 80095c0:	2000bc54 	.word	0x2000bc54
 80095c4:	2000bc88 	.word	0x2000bc88
 80095c8:	08010c7c 	.word	0x08010c7c
 80095cc:	2000bc5c 	.word	0x2000bc5c
 80095d0:	2000bc70 	.word	0x2000bc70
 80095d4:	20000014 	.word	0x20000014
 80095d8:	08010c84 	.word	0x08010c84
 80095dc:	08008f45 	.word	0x08008f45

080095e0 <xSendEventToIPTask>:
 * @param[in] eEvent: The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4603      	mov	r3, r0
 80095e8:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 80095f6:	f107 030c 	add.w	r3, r7, #12
 80095fa:	6979      	ldr	r1, [r7, #20]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f805 	bl	800960c <xSendEventStructToIPTask>
 8009602:	4603      	mov	r3, r0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800961a:	f000 fc4d 	bl	8009eb8 <xIPIsNetworkTaskReady>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d107      	bne.n	8009634 <xSendEventStructToIPTask+0x28>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f993 3000 	ldrsb.w	r3, [r3]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	e02d      	b.n	8009690 <xSendEventStructToIPTask+0x84>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009634:	2301      	movs	r3, #1
 8009636:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
            {
                if( pxEvent->eEventType == eTCPTimerEvent )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f993 3000 	ldrsb.w	r3, [r3]
 800963e:	2b06      	cmp	r3, #6
 8009640:	d10e      	bne.n	8009660 <xSendEventStructToIPTask+0x54>
                {
                    /* TCP timer events are sent to wake the timer task when
                     * xTCPTimer has expired, but there is no point sending them if the
                     * IP task is already awake processing other message. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009642:	4a16      	ldr	r2, [pc, #88]	; (800969c <xSendEventStructToIPTask+0x90>)
 8009644:	7813      	ldrb	r3, [r2, #0]
 8009646:	f043 0302 	orr.w	r3, r3, #2
 800964a:	7013      	strb	r3, [r2, #0]

                    if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800964c:	4b14      	ldr	r3, [pc, #80]	; (80096a0 <xSendEventStructToIPTask+0x94>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4618      	mov	r0, r3
 8009652:	f7fb fe4f 	bl	80052f4 <uxQueueMessagesWaiting>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <xSendEventStructToIPTask+0x54>
                    {
                        /* Not actually going to send the message but this is not a
                         * failure as the message didn't need to be sent. */
                        xSendMessage = pdFALSE;
 800965c:	2300      	movs	r3, #0
 800965e:	613b      	str	r3, [r7, #16]
                    }
                }
            }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d012      	beq.n	800968c <xSendEventStructToIPTask+0x80>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009666:	f7ff fd45 	bl	80090f4 <xIsCallingFromIPTask>
 800966a:	4603      	mov	r3, r0
 800966c:	2b01      	cmp	r3, #1
 800966e:	d104      	bne.n	800967a <xSendEventStructToIPTask+0x6e>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <xSendEventStructToIPTask+0x6e>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009676:	2300      	movs	r3, #0
 8009678:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800967a:	4b09      	ldr	r3, [pc, #36]	; (80096a0 <xSendEventStructToIPTask+0x94>)
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	2300      	movs	r3, #0
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	6879      	ldr	r1, [r7, #4]
 8009684:	f7fb fac0 	bl	8004c08 <xQueueGenericSend>
 8009688:	6178      	str	r0, [r7, #20]
 800968a:	e001      	b.n	8009690 <xSendEventStructToIPTask+0x84>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 800968c:	2301      	movs	r3, #1
 800968e:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009690:	697b      	ldr	r3, [r7, #20]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	2000bca8 	.word	0x2000bca8
 80096a0:	2000bc54 	.word	0x2000bc54

080096a4 <prvProcessNetworkDownEvent>:

/**
 * @brief Process a 'Network down' event and complete required processing.
 */
static void prvProcessNetworkDownEvent( void )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
    /* Stop the ARP timer while there is no network. */
    xARPTimer.bActive = pdFALSE_UNSIGNED;
 80096a8:	4a10      	ldr	r2, [pc, #64]	; (80096ec <prvProcessNetworkDownEvent+0x48>)
 80096aa:	7813      	ldrb	r3, [r2, #0]
 80096ac:	f36f 0300 	bfc	r3, #0, #1
 80096b0:	7013      	strb	r3, [r2, #0]
            static BaseType_t xCallEventHook = pdFALSE;

            /* The first network down event is generated by the IP stack itself to
             * initialise the network hardware, so do not call the network down event
             * the first time through. */
            if( xCallEventHook == pdTRUE )
 80096b2:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <prvProcessNetworkDownEvent+0x4c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d102      	bne.n	80096c0 <prvProcessNetworkDownEvent+0x1c>
            {
                vApplicationIPNetworkEventHook( eNetworkDown );
 80096ba:	2001      	movs	r0, #1
 80096bc:	f7f7 f9be 	bl	8000a3c <vApplicationIPNetworkEventHook>
            }

            xCallEventHook = pdTRUE;
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <prvProcessNetworkDownEvent+0x4c>)
 80096c2:	2201      	movs	r2, #1
 80096c4:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigUSE_NETWORK_EVENT_HOOK == 1 */

    /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122,
     * treat network down as a "delivery problem" and flush the ARP cache for this
     * interface. */
    FreeRTOS_ClearARP();
 80096c6:	f7fe fc19 	bl	8007efc <FreeRTOS_ClearARP>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */
    if( xNetworkInterfaceInitialise() != pdPASS )
 80096ca:	f005 fcd5 	bl	800f078 <xNetworkInterfaceInitialise>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d006      	beq.n	80096e2 <prvProcessNetworkDownEvent+0x3e>
    {
        /* Ideally the network interface initialisation function will only
         * return when the network is available.  In case this is not the case,
         * wait a while before retrying the initialisation. */
        vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 80096d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80096d8:	f7fc fa04 	bl	8005ae4 <vTaskDelay>
        FreeRTOS_NetworkDown();
 80096dc:	f7ff fe0e 	bl	80092fc <FreeRTOS_NetworkDown>
                /* Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls();
            }
        #endif
    }
}
 80096e0:	e001      	b.n	80096e6 <prvProcessNetworkDownEvent+0x42>
                vIPNetworkUpCalls();
 80096e2:	f000 f807 	bl	80096f4 <vIPNetworkUpCalls>
}
 80096e6:	bf00      	nop
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	2000bc94 	.word	0x2000bc94
 80096f0:	2000bcc0 	.word	0x2000bcc0

080096f4 <vIPNetworkUpCalls>:

/**
 * @brief Perform all the required tasks when the network gets connected.
 */
void vIPNetworkUpCalls( void )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
    xNetworkUp = pdTRUE;
 80096f8:	4b06      	ldr	r3, [pc, #24]	; (8009714 <vIPNetworkUpCalls+0x20>)
 80096fa:	2201      	movs	r2, #1
 80096fc:	601a      	str	r2, [r3, #0]

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 80096fe:	2000      	movs	r0, #0
 8009700:	f7f7 f99c 	bl	8000a3c <vApplicationIPNetworkEventHook>
            vDNSInitialise();
        }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8009704:	f242 7110 	movw	r1, #10000	; 0x2710
 8009708:	4803      	ldr	r0, [pc, #12]	; (8009718 <vIPNetworkUpCalls+0x24>)
 800970a:	f7ff fdab 	bl	8009264 <prvIPTimerReload>
}
 800970e:	bf00      	nop
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	2000bc90 	.word	0x2000bc90
 8009718:	2000bc94 	.word	0x2000bc94

0800971c <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer: the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]

    configASSERT( pxNetworkBuffer != NULL );
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d104      	bne.n	8009738 <prvProcessEthernetPacket+0x1c>
 800972e:	492c      	ldr	r1, [pc, #176]	; (80097e0 <prvProcessEthernetPacket+0xc4>)
 8009730:	f240 607d 	movw	r0, #1661	; 0x67d
 8009734:	f7f7 f9ae 	bl	8000a94 <vAssertCalled>

    iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    /* Interpret the Ethernet frame. */
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	2b0d      	cmp	r3, #13
 800973e:	d939      	bls.n	80097b4 <prvProcessEthernetPacket+0x98>
    {
        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009740:	2301      	movs	r3, #1
 8009742:	73fb      	strb	r3, [r7, #15]

        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */
        pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fb82 	bl	8008e52 <vCastConstPointerTo_EthernetHeader_t>
 800974e:	60b8      	str	r0, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	899b      	ldrh	r3, [r3, #12]
 8009754:	b29b      	uxth	r3, r3
 8009756:	2b08      	cmp	r3, #8
 8009758:	d015      	beq.n	8009786 <prvProcessEthernetPacket+0x6a>
 800975a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800975e:	d126      	bne.n	80097ae <prvProcessEthernetPacket+0x92>
            {
                case ipARP_FRAME_TYPE:

                    /* The Ethernet frame contains an ARP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	2b29      	cmp	r3, #41	; 0x29
 8009766:	d90b      	bls.n	8009780 <prvProcessEthernetPacket+0x64>
                    {
                        eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff fb7b 	bl	8008e68 <vCastPointerTo_ARPPacket_t>
 8009772:	4603      	mov	r3, r0
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe f851 	bl	800781c <eARPProcessPacket>
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 800977e:	e01a      	b.n	80097b6 <prvProcessEthernetPacket+0x9a>
                        eReturned = eReleaseBuffer;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
                    break;
 8009784:	e017      	b.n	80097b6 <prvProcessEthernetPacket+0x9a>

                case ipIPv4_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	2b21      	cmp	r3, #33	; 0x21
 800978c:	d90c      	bls.n	80097a8 <prvProcessEthernetPacket+0x8c>
                    {
                        eReturned = prvProcessIPPacket( ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff fb73 	bl	8008e7e <vCastPointerTo_IPPacket_t>
 8009798:	4603      	mov	r3, r0
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f921 	bl	80099e4 <prvProcessIPPacket>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 80097a6:	e006      	b.n	80097b6 <prvProcessEthernetPacket+0x9a>
                        eReturned = eReleaseBuffer;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
                    break;
 80097ac:	e003      	b.n	80097b6 <prvProcessEthernetPacket+0x9a>

                default:
                    /* No other packet types are handled.  Nothing to do. */
                    eReturned = eReleaseBuffer;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
                    break;
 80097b2:	e000      	b.n	80097b6 <prvProcessEthernetPacket+0x9a>
            }
        }
 80097b4:	bf00      	nop
    }

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d002      	beq.n	80097c2 <prvProcessEthernetPacket+0xa6>
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d009      	beq.n	80097d4 <prvProcessEthernetPacket+0xb8>
 80097c0:	e004      	b.n	80097cc <prvProcessEthernetPacket+0xb0>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 80097c2:	2101      	movs	r1, #1
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fb0d 	bl	8009de4 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 80097ca:	e004      	b.n	80097d6 <prvProcessEthernetPacket+0xba>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f006 fbe3 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
            break;
 80097d2:	e000      	b.n	80097d6 <prvProcessEthernetPacket+0xba>
            break;
 80097d4:	bf00      	nop
    }
}
 80097d6:	bf00      	nop
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	08010c4c 	.word	0x08010c4c

080097e4 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress: The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	061a      	lsls	r2, r3, #24
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	021b      	lsls	r3, r3, #8
 80097f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097f8:	431a      	orrs	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	0a1b      	lsrs	r3, r3, #8
 80097fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	0e1b      	lsrs	r3, r3, #24
 8009808:	4313      	orrs	r3, r2
 800980a:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009812:	d306      	bcc.n	8009822 <xIsIPv4Multicast+0x3e>
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800981a:	d202      	bcs.n	8009822 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800981c:	2301      	movs	r3, #1
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	e001      	b.n	8009826 <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8009826:	68fb      	ldr	r3, [r7, #12]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress: IP address.
 * @param[out] pxMACAddress: Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	061a      	lsls	r2, r3, #24
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800984a:	431a      	orrs	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	0a1b      	lsrs	r3, r3, #8
 8009850:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009854:	431a      	orrs	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	0e1b      	lsrs	r3, r3, #24
 800985a:	4313      	orrs	r3, r2
 800985c:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2201      	movs	r2, #1
 8009862:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2200      	movs	r2, #0
 8009868:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	225e      	movs	r2, #94	; 0x5e
 800986e:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	0c1b      	lsrs	r3, r3, #16
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800987a:	b2da      	uxtb	r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	0a1b      	lsrs	r3, r3, #8
 8009884:	b2da      	uxtb	r2, r3
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	b2da      	uxtb	r2, r3
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	715a      	strb	r2, [r3, #5]
}
 8009892:	bf00      	nop
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
	...

080098a0 <prvAllowIPPacket>:
 * @return Whether the packet should be processed or dropped.
 */
static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
                                                  const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08a      	sub	sp, #40	; 0x28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 80098ac:	2301      	movs	r3, #1
 80098ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	330e      	adds	r3, #14
 80098b6:	623b      	str	r3, [r7, #32]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
        {
            /* In systems with a very small amount of RAM, it might be advantageous
             * to have incoming messages checked earlier, by the network card driver.
             * This method may decrease the usage of sparse network buffers. */
            uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	61fb      	str	r3, [r7, #28]

            /* Ensure that the incoming packet is not fragmented (only outgoing
             * packets can be fragmented) as these are the only handled IP frames
             * currently. */
            if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	88db      	ldrh	r3, [r3, #6]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	f64f 730f 	movw	r3, #65295	; 0xff0f
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <prvAllowIPPacket+0x38>
            {
                /* Can not handle, fragmented packet. */
                eReturn = eReleaseBuffer;
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098d6:	e024      	b.n	8009922 <prvAllowIPPacket+0x82>
            }

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b44      	cmp	r3, #68	; 0x44
 80098de:	d903      	bls.n	80098e8 <prvAllowIPPacket+0x48>
                     ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	781b      	ldrb	r3, [r3, #0]
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 80098e4:	2b4f      	cmp	r3, #79	; 0x4f
 80098e6:	d903      	bls.n	80098f0 <prvAllowIPPacket+0x50>
            {
                /* Can not handle, unknown or invalid header version. */
                eReturn = eReleaseBuffer;
 80098e8:	2300      	movs	r3, #0
 80098ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098ee:	e018      	b.n	8009922 <prvAllowIPPacket+0x82>
            }
            /* Is the packet for this IP address? */
            else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 80098f0:	4b37      	ldr	r3, [pc, #220]	; (80099d0 <prvAllowIPPacket+0x130>)
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	69fa      	ldr	r2, [r7, #28]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d013      	beq.n	8009922 <prvAllowIPPacket+0x82>
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009900:	d00f      	beq.n	8009922 <prvAllowIPPacket+0x82>
                     /* Is it the global broadcast address 255.255.255.255 ? */
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
                     /* Is it a specific broadcast address 192.168.1.255 ? */
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8009902:	4b34      	ldr	r3, [pc, #208]	; (80099d4 <prvAllowIPPacket+0x134>)
 8009904:	691b      	ldr	r3, [r3, #16]
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	429a      	cmp	r2, r3
 800990a:	d00a      	beq.n	8009922 <prvAllowIPPacket+0x82>
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	4a32      	ldr	r2, [pc, #200]	; (80099d8 <prvAllowIPPacket+0x138>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d006      	beq.n	8009922 <prvAllowIPPacket+0x82>
                     #if ( ipconfigUSE_LLMNR == 1 )
                         /* Is it the LLMNR multicast address? */
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
                     #endif
                     /* Or (during DHCP negotiation) we have no IP-address yet? */
                     ( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 8009914:	4b2e      	ldr	r3, [pc, #184]	; (80099d0 <prvAllowIPPacket+0x130>)
 8009916:	695b      	ldr	r3, [r3, #20]
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <prvAllowIPPacket+0x82>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 800991c:	2300      	movs	r3, #0
 800991e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
        }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
        {
            if( eReturn == eProcessBuffer )
 8009922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009926:	2b01      	cmp	r3, #1
 8009928:	d10d      	bne.n	8009946 <prvAllowIPPacket+0xa6>
            {
                if( xCheckSizeFields( ( uint8_t * ) ( pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer->xDataLength ) != pdPASS )
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	699a      	ldr	r2, [r3, #24]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	4619      	mov	r1, r3
 8009934:	4610      	mov	r0, r2
 8009936:	f000 f9bb 	bl	8009cb0 <xCheckSizeFields>
 800993a:	4603      	mov	r3, r0
 800993c:	2b01      	cmp	r3, #1
 800993e:	d002      	beq.n	8009946 <prvAllowIPPacket+0xa6>
                {
                    /* Some of the length checks were not successful. */
                    eReturn = eReleaseBuffer;
 8009940:	2300      	movs	r3, #0
 8009942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Check if this is a UDP packet without a checksum. */
                    if( eReturn == eProcessBuffer )
 8009946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800994a:	2b01      	cmp	r3, #1
 800994c:	d13a      	bne.n	80099c4 <prvAllowIPPacket+0x124>
                        /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                         * and so UDP packets carrying a protocol checksum of 0, will
                         * be dropped. */

                        /* Identify the next protocol. */
                        if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	7ddb      	ldrb	r3, [r3, #23]
 8009952:	2b11      	cmp	r3, #17
 8009954:	d136      	bne.n	80099c4 <prvAllowIPPacket+0x124>
                        {
                            ProtocolPacket_t * pxProtPack;
                            const uint16_t * pusChecksum;

                            /* pxProtPack will point to the offset were the protocols begin. */
                            pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pxNetworkBuffer->pucEthernetBuffer[ uxHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	699a      	ldr	r2, [r3, #24]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3b14      	subs	r3, #20
 800995e:	4413      	add	r3, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f7ff fab8 	bl	8008ed6 <vCastPointerTo_ProtocolPacket_t>
 8009966:	61b8      	str	r0, [r7, #24]
                            pusChecksum = ( const uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	3328      	adds	r3, #40	; 0x28
 800996c:	617b      	str	r3, [r7, #20]

                            if( *pusChecksum == ( uint16_t ) 0U )
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d126      	bne.n	80099c4 <prvAllowIPPacket+0x124>
                            {
                                #if ( ipconfigHAS_PRINTF != 0 )
                                    {
                                        static BaseType_t xCount = 0;

                                        if( xCount < 5 )
 8009976:	4b19      	ldr	r3, [pc, #100]	; (80099dc <prvAllowIPPacket+0x13c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b04      	cmp	r3, #4
 800997c:	dc1f      	bgt.n	80099be <prvAllowIPPacket+0x11e>
                                        {
                                            FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009984:	061a      	lsls	r2, r3, #24
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800998c:	021b      	lsls	r3, r3, #8
 800998e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009992:	431a      	orrs	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800999a:	0a1b      	lsrs	r3, r3, #8
 800999c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80099a0:	431a      	orrs	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80099a8:	0e1b      	lsrs	r3, r3, #24
 80099aa:	4313      	orrs	r3, r2
 80099ac:	4619      	mov	r1, r3
 80099ae:	480c      	ldr	r0, [pc, #48]	; (80099e0 <prvAllowIPPacket+0x140>)
 80099b0:	f7f6 fff6 	bl	80009a0 <vLoggingPrintf>
                                                               FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                            xCount++;
 80099b4:	4b09      	ldr	r3, [pc, #36]	; (80099dc <prvAllowIPPacket+0x13c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3301      	adds	r3, #1
 80099ba:	4a08      	ldr	r2, [pc, #32]	; (80099dc <prvAllowIPPacket+0x13c>)
 80099bc:	6013      	str	r3, [r2, #0]
                                        }
                                    }
                                #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                                /* Protocol checksum not accepted. */
                                eReturn = eReleaseBuffer;
 80099be:	2300      	movs	r3, #0
 80099c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* to avoid warning unused parameters */
            ( void ) uxHeaderLength;
        }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 80099c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3728      	adds	r7, #40	; 0x28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20000014 	.word	0x20000014
 80099d4:	2000bc5c 	.word	0x2000bc5c
 80099d8:	fc0000e0 	.word	0xfc0000e0
 80099dc:	2000bcc4 	.word	0x2000bcc4
 80099e0:	08010c8c 	.word	0x08010c8c

080099e4 <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b090      	sub	sp, #64	; 0x40
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	330e      	adds	r3, #14
 80099f2:	63bb      	str	r3, [r7, #56]	; 0x38
    size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 80099f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	637b      	str	r3, [r7, #52]	; 0x34
    UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 80099fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009a02:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t ucProtocol;

    /* Bound the calculated header length: take away the Ethernet header size,
     * then check if the IP header is claiming to be longer than the remaining
     * total packet size. Also check for minimal header field length. */
    if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	3b0e      	subs	r3, #14
 8009a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d802      	bhi.n	8009a16 <prvProcessIPPacket+0x32>
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	2b13      	cmp	r3, #19
 8009a14:	d803      	bhi.n	8009a1e <prvProcessIPPacket+0x3a>
        ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
    {
        eReturn = eReleaseBuffer;
 8009a16:	2300      	movs	r3, #0
 8009a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009a1c:	e0cb      	b.n	8009bb6 <prvProcessIPPacket+0x1d2>
    }
    else
    {
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	7ddb      	ldrb	r3, [r3, #23]
 8009a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        /* Check if the IP headers are acceptable and if it has our destination. */
        eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff ff38 	bl	80098a0 <prvAllowIPPacket>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        if( eReturn == eProcessBuffer )
 8009a36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	f040 80b8 	bne.w	8009bb0 <prvProcessIPPacket+0x1cc>
        {
            /* Are there IP-options. */
            if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	2b14      	cmp	r3, #20
 8009a44:	d927      	bls.n	8009a96 <prvProcessIPPacket+0xb2>
                 * The extra space is used for IP-options. */
                #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
                    {
                        /* All structs of headers expect a IP header size of 20 bytes
                         * IP header options were included, we'll ignore them and cut them out. */
                        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	3b14      	subs	r3, #20
 8009a4a:	62bb      	str	r3, [r7, #40]	; 0x28
                        /* From: the previous start of UDP/ICMP/TCP data. */
                        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	699a      	ldr	r2, [r3, #24]
 8009a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a52:	330e      	adds	r3, #14
 8009a54:	4413      	add	r3, r2
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
                        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
                        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	3322      	adds	r3, #34	; 0x22
 8009a5e:	623b      	str	r3, [r7, #32]
                        /* How many: total length minus the options and the lower headers. */
                        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	69da      	ldr	r2, [r3, #28]
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	3b22      	subs	r3, #34	; 0x22
 8009a6a:	61fb      	str	r3, [r7, #28]

                        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 8009a6c:	69fa      	ldr	r2, [r7, #28]
 8009a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a70:	6a38      	ldr	r0, [r7, #32]
 8009a72:	f006 fb21 	bl	80100b8 <memmove>
                        pxNetworkBuffer->xDataLength -= optlen;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	69da      	ldr	r2, [r3, #28]
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	1ad2      	subs	r2, r2, r3
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	61da      	str	r2, [r3, #28]

                        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
                        pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	f023 030f 	bic.w	r3, r3, #15
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f043 0305 	orr.w	r3, r3, #5
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	701a      	strb	r2, [r3, #0]
                        eReturn = eReleaseBuffer;
                    }
                #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */
            }

            if( eReturn != eReleaseBuffer )
 8009a96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8088 	beq.w	8009bb0 <prvProcessIPPacket+0x1cc>
            {
                /* Add the IP and MAC addresses to the ARP table if they are not
                 * already there - otherwise refresh the age of the existing
                 * entry. */
                if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aa4:	2b11      	cmp	r3, #17
 8009aa6:	d007      	beq.n	8009ab8 <prvProcessIPPacket+0xd4>
                    /* Refresh the ARP cache with the IP/MAC-address of the received
                     *  packet. For UDP packets, this will be done later in
                     *  xProcessReceivedUDPPacket(), as soon as it's know that the message
                     *  will be handled.  This will prevent the ARP cache getting
                     *  overwritten with the IP address of useless broadcast packets. */
                    vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	1d9a      	adds	r2, r3, #6
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	f7fd ff44 	bl	8007940 <vARPRefreshCacheEntry>
                }

                switch( ucProtocol )
 8009ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009abc:	2b06      	cmp	r3, #6
 8009abe:	d068      	beq.n	8009b92 <prvProcessIPPacket+0x1ae>
 8009ac0:	2b11      	cmp	r3, #17
 8009ac2:	d01d      	beq.n	8009b00 <prvProcessIPPacket+0x11c>
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d000      	beq.n	8009aca <prvProcessIPPacket+0xe6>
                                xProcessedTCPMessage++;
                                break;
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        break;
 8009ac8:	e075      	b.n	8009bb6 <prvProcessIPPacket+0x1d2>
                            if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	2b29      	cmp	r3, #41	; 0x29
 8009ad0:	d912      	bls.n	8009af8 <prvProcessIPPacket+0x114>
                                ICMPPacket_t * pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff f9e7 	bl	8008eaa <vCastPointerTo_ICMPPacket_t>
 8009adc:	60b8      	str	r0, [r7, #8]
                                if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	691a      	ldr	r2, [r3, #16]
 8009ae2:	4b38      	ldr	r3, [pc, #224]	; (8009bc4 <prvProcessIPPacket+0x1e0>)
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d164      	bne.n	8009bb4 <prvProcessIPPacket+0x1d0>
                                    eReturn = prvProcessICMPPacket( pxICMPPacket );
 8009aea:	68b8      	ldr	r0, [r7, #8]
 8009aec:	f000 f8c6 	bl	8009c7c <prvProcessICMPPacket>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 8009af6:	e05d      	b.n	8009bb4 <prvProcessIPPacket+0x1d0>
                                eReturn = eReleaseBuffer;
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 8009afe:	e059      	b.n	8009bb4 <prvProcessIPPacket+0x1d0>
                           const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7ff f9db 	bl	8008ec0 <vCastConstPointerTo_UDPPacket_t>
 8009b0a:	61b8      	str	r0, [r7, #24]
                           usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength );
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	021b      	lsls	r3, r3, #8
 8009b14:	b21a      	sxth	r2, r3
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	0a1b      	lsrs	r3, r3, #8
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	b21b      	sxth	r3, r3
 8009b22:	4313      	orrs	r3, r2
 8009b24:	b21b      	sxth	r3, r3
 8009b26:	82fb      	strh	r3, [r7, #22]
                           if( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	2b29      	cmp	r3, #41	; 0x29
 8009b2e:	d92a      	bls.n	8009b86 <prvProcessIPPacket+0x1a2>
 8009b30:	8afb      	ldrh	r3, [r7, #22]
 8009b32:	2b07      	cmp	r3, #7
 8009b34:	d927      	bls.n	8009b86 <prvProcessIPPacket+0x1a2>
                               uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	3b2a      	subs	r3, #42	; 0x2a
 8009b3c:	613b      	str	r3, [r7, #16]
                               uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 8009b3e:	8afb      	ldrh	r3, [r7, #22]
 8009b40:	3b08      	subs	r3, #8
 8009b42:	60fb      	str	r3, [r7, #12]
                               if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d904      	bls.n	8009b56 <prvProcessIPPacket+0x172>
                                   pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	61da      	str	r2, [r3, #28]
                               pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	841a      	strh	r2, [r3, #32]
                               pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	615a      	str	r2, [r3, #20]
                               if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	4619      	mov	r1, r3
 8009b72:	6838      	ldr	r0, [r7, #0]
 8009b74:	f005 f93a 	bl	800edec <xProcessReceivedUDPPacket>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d107      	bne.n	8009b8e <prvProcessIPPacket+0x1aa>
                                   eReturn = eFrameConsumed;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                           {
 8009b84:	e003      	b.n	8009b8e <prvProcessIPPacket+0x1aa>
                               eReturn = eReleaseBuffer;
 8009b86:	2300      	movs	r3, #0
 8009b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                       break;
 8009b8c:	e013      	b.n	8009bb6 <prvProcessIPPacket+0x1d2>
                           {
 8009b8e:	bf00      	nop
                       break;
 8009b90:	e011      	b.n	8009bb6 <prvProcessIPPacket+0x1d2>
                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8009b92:	6838      	ldr	r0, [r7, #0]
 8009b94:	f003 fd2a 	bl	800d5ec <xProcessReceivedTCPPacket>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d102      	bne.n	8009ba4 <prvProcessIPPacket+0x1c0>
                                    eReturn = eFrameConsumed;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                xProcessedTCPMessage++;
 8009ba4:	4b08      	ldr	r3, [pc, #32]	; (8009bc8 <prvProcessIPPacket+0x1e4>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	4a07      	ldr	r2, [pc, #28]	; (8009bc8 <prvProcessIPPacket+0x1e4>)
 8009bac:	6013      	str	r3, [r2, #0]
                                break;
 8009bae:	e002      	b.n	8009bb6 <prvProcessIPPacket+0x1d2>
                }
            }
 8009bb0:	bf00      	nop
 8009bb2:	e000      	b.n	8009bb6 <prvProcessIPPacket+0x1d2>
                        break;
 8009bb4:	bf00      	nop
        }
    }

    return eReturn;
 8009bb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3740      	adds	r7, #64	; 0x40
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20000014 	.word	0x20000014
 8009bc8:	2000bc8c 	.word	0x2000bc8c

08009bcc <prvProcessICMPEchoRequest>:
 * @brief Process an ICMP echo request.
 *
 * @param[in,out] pxICMPPacket: The IP packet that contains the ICMP message.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
    {
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint16_t usRequest;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3322      	adds	r3, #34	; 0x22
 8009bd8:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	330e      	adds	r3, #14
 8009bde:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2200      	movs	r2, #0
 8009be4:	701a      	strb	r2, [r3, #0]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8009bee:	4b22      	ldr	r3, [pc, #136]	; (8009c78 <prvProcessICMPEchoRequest+0xac>)
 8009bf0:	695a      	ldr	r2, [r3, #20]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	60da      	str	r2, [r3, #12]
         * has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
         * usGenerateChecksum(). */

        /* due to compiler warning "integer operation result is out of range" */

        usRequest = ( uint16_t ) ( ( uint16_t ) ipICMP_ECHO_REQUEST << 8 );
 8009bf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bfa:	81fb      	strh	r3, [r7, #14]

        if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	885b      	ldrh	r3, [r3, #2]
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	89fb      	ldrh	r3, [r7, #14]
 8009c04:	43db      	mvns	r3, r3
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	021b      	lsls	r3, r3, #8
 8009c0a:	b299      	uxth	r1, r3
 8009c0c:	89f8      	ldrh	r0, [r7, #14]
 8009c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c12:	1a1b      	subs	r3, r3, r0
 8009c14:	0a1b      	lsrs	r3, r3, #8
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	430b      	orrs	r3, r1
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d312      	bcc.n	8009c46 <prvProcessICMPEchoRequest+0x7a>
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	885b      	ldrh	r3, [r3, #2]
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	89fb      	ldrh	r3, [r7, #14]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	b299      	uxth	r1, r3
 8009c30:	89fb      	ldrh	r3, [r7, #14]
 8009c32:	3301      	adds	r3, #1
 8009c34:	0a1b      	lsrs	r3, r3, #8
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	805a      	strh	r2, [r3, #2]
 8009c44:	e010      	b.n	8009c68 <prvProcessICMPEchoRequest+0x9c>
        }
        else
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	885b      	ldrh	r3, [r3, #2]
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	89fb      	ldrh	r3, [r7, #14]
 8009c4e:	021b      	lsls	r3, r3, #8
 8009c50:	b219      	sxth	r1, r3
 8009c52:	89fb      	ldrh	r3, [r7, #14]
 8009c54:	0a1b      	lsrs	r3, r3, #8
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	b21b      	sxth	r3, r3
 8009c5a:	430b      	orrs	r3, r1
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	4413      	add	r3, r2
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	805a      	strh	r2, [r3, #2]
        }

        return eReturnEthernetFrame;
 8009c68:	2302      	movs	r3, #2
    }
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	20000014 	.word	0x20000014

08009c7c <prvProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
    {
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d008      	beq.n	8009ca4 <prvProcessICMPPacket+0x28>
 8009c92:	2b08      	cmp	r3, #8
 8009c94:	d000      	beq.n	8009c98 <prvProcessICMPPacket+0x1c>
                #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                break;

            default:
                /* Only ICMP echo packets are handled. */
                break;
 8009c96:	e006      	b.n	8009ca6 <prvProcessICMPPacket+0x2a>
                    eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7ff ff97 	bl	8009bcc <prvProcessICMPEchoRequest>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	73fb      	strb	r3, [r7, #15]
                break;
 8009ca2:	e000      	b.n	8009ca6 <prvProcessICMPPacket+0x2a>
                break;
 8009ca4:	bf00      	nop
        }

        return eReturn;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
    }
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <xCheckSizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer,
                                        size_t uxBufferLength )
    {
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08c      	sub	sp, #48	; 0x30
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
        const ProtocolPacket_t * pxProtPack;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	62bb      	str	r3, [r7, #40]	; 0x28

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b21      	cmp	r3, #33	; 0x21
 8009cc6:	d802      	bhi.n	8009cce <xCheckSizeFields+0x1e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8009cc8:	2301      	movs	r3, #1
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009ccc:	e07b      	b.n	8009dc6 <xCheckSizeFields+0x116>
            }

            /* Map the buffer onto a IP-Packet struct to easily access the
             * fields of the IP packet. */
            pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7ff f8e0 	bl	8008e94 <vCastConstPointerTo_IPPacket_t>
 8009cd4:	6238      	str	r0, [r7, #32]

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	7b9b      	ldrb	r3, [r3, #14]
 8009cda:	83fb      	strh	r3, [r7, #30]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8009cdc:	8bfb      	ldrh	r3, [r7, #30]
 8009cde:	2b44      	cmp	r3, #68	; 0x44
 8009ce0:	d902      	bls.n	8009ce8 <xCheckSizeFields+0x38>
 8009ce2:	8bfb      	ldrh	r3, [r7, #30]
 8009ce4:	2b4f      	cmp	r3, #79	; 0x4f
 8009ce6:	d902      	bls.n	8009cee <xCheckSizeFields+0x3e>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8009ce8:	2302      	movs	r3, #2
 8009cea:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009cec:	e06b      	b.n	8009dc6 <xCheckSizeFields+0x116>
            }

            ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 8009cee:	8bfb      	ldrh	r3, [r7, #30]
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009cf8:	83fb      	strh	r3, [r7, #30]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8009cfa:	8bfb      	ldrh	r3, [r7, #30]
 8009cfc:	61bb      	str	r3, [r7, #24]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	330e      	adds	r3, #14
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d202      	bcs.n	8009d0e <xCheckSizeFields+0x5e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8009d08:	2303      	movs	r3, #3
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009d0c:	e05b      	b.n	8009dc6 <xCheckSizeFields+0x116>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	7c1a      	ldrb	r2, [r3, #16]
 8009d12:	7c5b      	ldrb	r3, [r3, #17]
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	4313      	orrs	r3, r2
 8009d18:	82fb      	strh	r3, [r7, #22]
            usLength = FreeRTOS_ntohs( usLength );
 8009d1a:	8afb      	ldrh	r3, [r7, #22]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	b21a      	sxth	r2, r3
 8009d20:	8afb      	ldrh	r3, [r7, #22]
 8009d22:	0a1b      	lsrs	r3, r3, #8
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	b21b      	sxth	r3, r3
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	b21b      	sxth	r3, r3
 8009d2c:	82fb      	strh	r3, [r7, #22]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8009d2e:	8afb      	ldrh	r3, [r7, #22]
 8009d30:	330e      	adds	r3, #14
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d202      	bcs.n	8009d3e <xCheckSizeFields+0x8e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8009d38:	2304      	movs	r3, #4
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009d3c:	e043      	b.n	8009dc6 <xCheckSizeFields+0x116>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	7ddb      	ldrb	r3, [r3, #23]
 8009d42:	757b      	strb	r3, [r7, #21]
             * protocol (Layer 3 or 4) header will be aligned, which is the convenience
             * of this calculation. */

            /* Map the Buffer onto the Protocol Packet struct for easy access to the
             * struct fields. */
            pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	3b14      	subs	r3, #20
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7ff f8cd 	bl	8008eec <vCastConstPointerTo_ProtocolPacket_t>
 8009d52:	6138      	str	r0, [r7, #16]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009d54:	7d7b      	ldrb	r3, [r7, #21]
 8009d56:	2b11      	cmp	r3, #17
 8009d58:	d103      	bne.n	8009d62 <xCheckSizeFields+0xb2>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	3316      	adds	r3, #22
 8009d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d60:	e013      	b.n	8009d8a <xCheckSizeFields+0xda>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8009d62:	7d7b      	ldrb	r3, [r7, #21]
 8009d64:	2b06      	cmp	r3, #6
 8009d66:	d103      	bne.n	8009d70 <xCheckSizeFields+0xc0>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	3322      	adds	r3, #34	; 0x22
 8009d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d6e:	e00c      	b.n	8009d8a <xCheckSizeFields+0xda>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8009d70:	7d7b      	ldrb	r3, [r7, #21]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d002      	beq.n	8009d7c <xCheckSizeFields+0xcc>
 8009d76:	7d7b      	ldrb	r3, [r7, #21]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d103      	bne.n	8009d84 <xCheckSizeFields+0xd4>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	3316      	adds	r3, #22
 8009d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d82:	e002      	b.n	8009d8a <xCheckSizeFields+0xda>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8009d84:	2305      	movs	r3, #5
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009d88:	e01d      	b.n	8009dc6 <xCheckSizeFields+0x116>
            }

            if( uxBufferLength < uxMinimumLength )
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d202      	bcs.n	8009d98 <xCheckSizeFields+0xe8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8009d92:	2306      	movs	r3, #6
 8009d94:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009d96:	e016      	b.n	8009dc6 <xCheckSizeFields+0x116>
            }

            uxLength = ( size_t ) usLength;
 8009d98:	8afb      	ldrh	r3, [r7, #22]
 8009d9a:	60fb      	str	r3, [r7, #12]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	461a      	mov	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1a9b      	subs	r3, r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]

            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b07      	cmp	r3, #7
 8009dac:	d906      	bls.n	8009dbc <xCheckSizeFields+0x10c>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009db4:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d902      	bls.n	8009dc2 <xCheckSizeFields+0x112>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8009dbc:	2307      	movs	r3, #7
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009dc0:	e001      	b.n	8009dc6 <xCheckSizeFields+0x116>
            }

            xResult = pdPASS;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	62bb      	str	r3, [r7, #40]	; 0x28
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d003      	beq.n	8009dd4 <xCheckSizeFields+0x124>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
 8009dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dce:	4804      	ldr	r0, [pc, #16]	; (8009de0 <xCheckSizeFields+0x130>)
 8009dd0:	f7f6 fde6 	bl	80009a0 <vLoggingPrintf>
        }

        return xResult;
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3730      	adds	r7, #48	; 0x30
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	08010cc8 	.word	0x08010cc8

08009de4 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer: The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend: Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
        {
            if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	2b3b      	cmp	r3, #59	; 0x3b
 8009df4:	d818      	bhi.n	8009e28 <vReturnEthernetFrame+0x44>
            {
                BaseType_t xIndex;

                FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4827      	ldr	r0, [pc, #156]	; (8009e9c <vReturnEthernetFrame+0xb8>)
 8009dfe:	f7f6 fdcf 	bl	80009a0 <vLoggingPrintf>

                for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	61fb      	str	r3, [r7, #28]
 8009e08:	e008      	b.n	8009e1c <vReturnEthernetFrame+0x38>
                {
                    pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	699a      	ldr	r2, [r3, #24]
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	701a      	strb	r2, [r3, #0]
                for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	61fb      	str	r3, [r7, #28]
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	2b3b      	cmp	r3, #59	; 0x3b
 8009e20:	ddf3      	ble.n	8009e0a <vReturnEthernetFrame+0x26>
                }

                pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	223c      	movs	r2, #60	; 0x3c
 8009e26:	61da      	str	r2, [r3, #28]
            }
        }
    #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d111      	bne.n	8009e52 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff fa7d 	bl	8009334 <pxDuplicateNetworkBufferWithDescriptor>
 8009e3a:	61b8      	str	r0, [r7, #24]

            if( pxNewBuffer != NULL )
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d005      	beq.n	8009e4e <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8009e42:	2301      	movs	r3, #1
 8009e44:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	69da      	ldr	r2, [r3, #28]
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	61da      	str	r2, [r3, #28]
            }

            pxNetworkBuffer = pxNewBuffer;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d01d      	beq.n	8009e94 <vReturnEthernetFrame+0xb0>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* Map the Buffer to Ethernet Header struct for easy access to fields. */
        pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7fe ffed 	bl	8008e3c <vCastPointerTo_EthernetHeader_t>
 8009e62:	6178      	str	r0, [r7, #20]
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        /* Swap source and destination MAC addresses. */
        pvCopySource = &pxEthernetHeader->xSourceAddress;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	3306      	adds	r3, #6
 8009e68:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8009e6e:	2206      	movs	r2, #6
 8009e70:	6939      	ldr	r1, [r7, #16]
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f006 f915 	bl	80100a2 <memcpy>

        pvCopySource = ipLOCAL_MAC_ADDRESS;
 8009e78:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <vReturnEthernetFrame+0xbc>)
 8009e7a:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	3306      	adds	r3, #6
 8009e80:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009e82:	2206      	movs	r2, #6
 8009e84:	6939      	ldr	r1, [r7, #16]
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f006 f90b 	bl	80100a2 <memcpy>

        /* Send! */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f005 fa6e 	bl	800f370 <xNetworkInterfaceOutput>
    }
}
 8009e94:	bf00      	nop
 8009e96:	3720      	adds	r7, #32
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	08010d50 	.word	0x08010d50
 8009ea0:	20000014 	.word	0x20000014

08009ea4 <FreeRTOS_GetMACAddress>:
 * @brief Get the MAC address.
 *
 * @return The pointer to MAC address.
 */
const uint8_t * FreeRTOS_GetMACAddress( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	af00      	add	r7, sp, #0
    return ipLOCAL_MAC_ADDRESS;
 8009ea8:	4b02      	ldr	r3, [pc, #8]	; (8009eb4 <FreeRTOS_GetMACAddress+0x10>)
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20000014 	.word	0x20000014

08009eb8 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009eb8:	b480      	push	{r7}
 8009eba:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8009ebc:	4b03      	ldr	r3, [pc, #12]	; (8009ecc <xIPIsNetworkTaskReady+0x14>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	2000bcbc 	.word	0x2000bcbc

08009ed0 <FreeRTOS_max_uint32>:
        {
            return ( a >= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_max_uint32( uint32_t a,
                                                        uint32_t b )
        {
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
            return ( a >= b ) ? a : b;
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	bf38      	it	cc
 8009ee2:	4613      	movcc	r3, r2
        }
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <FreeRTOS_round_up>:
        {
            return ( a <= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_round_up( uint32_t a,
                                                      uint32_t d )
        {
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
            return d * ( ( a + d - 1U ) / d );
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	4413      	add	r3, r2
 8009f00:	1e5a      	subs	r2, r3, #1
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	fb02 f303 	mul.w	r3, r2, r3
        }
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <uxStreamBufferSpace>:
                                                  const size_t uxLower,
                                                  const size_t uxUpper );
    static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t * pxBuffer,
                                                  const size_t uxLower,
                                                  const size_t uxUpper )
    {
 8009f1a:	b480      	push	{r7}
 8009f1c:	b087      	sub	sp, #28
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	60f8      	str	r0, [r7, #12]
 8009f22:	60b9      	str	r1, [r7, #8]
 8009f24:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	691a      	ldr	r2, [r3, #16]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	441a      	add	r2, r3
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	3b01      	subs	r3, #1
 8009f34:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d304      	bcc.n	8009f4a <uxStreamBufferSpace+0x30>
        {
            uxCount -= pxBuffer->LENGTH;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 8009f4a:	697b      	ldr	r3, [r7, #20]
    }
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	371c      	adds	r7, #28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <uxStreamBufferDistance>:
                                                     const size_t uxLower,
                                                     const size_t uxUpper );
    static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t * pxBuffer,
                                                     const size_t uxLower,
                                                     const size_t uxUpper )
    {
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	441a      	add	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d304      	bcc.n	8009f86 <uxStreamBufferDistance+0x2e>
        {
            uxCount -= pxBuffer->LENGTH;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 8009f86:	697b      	ldr	r3, [r7, #20]
    }
 8009f88:	4618      	mov	r0, r3
 8009f8a:	371c      	adds	r7, #28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer )
    {
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
 * before hitting on uxTail */
        size_t uxHead = pxBuffer->uxHead;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	68f9      	ldr	r1, [r7, #12]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff ffb4 	bl	8009f1a <uxStreamBufferSpace>
 8009fb2:	4603      	mov	r3, r0
    }
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer )
    {
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
 * or the number of items which can still be added to uxFront,
 * before hitting on uxTail */

        size_t uxFront = pxBuffer->uxFront;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	68f9      	ldr	r1, [r7, #12]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff ffa0 	bl	8009f1a <uxStreamBufferSpace>
 8009fda:	4603      	mov	r3, r0
    }
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer )
    {
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
 * before reaching uxHead */
        size_t uxHead = pxBuffer->uxHead;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff ffab 	bl	8009f58 <uxStreamBufferDistance>
 800a002:	4603      	mov	r3, r0
    }
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800a014:	687b      	ldr	r3, [r7, #4]
    }
 800a016:	4618      	mov	r0, r3
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <vCastConstPointerTo_FreeRTOS_Socket_t>:
    {
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
        return ( const FreeRTOS_Socket_t * ) pvArgument;
 800a02a:	687b      	ldr	r3, [r7, #4]
    }
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 800a040:	687b      	ldr	r3, [r7, #4]
}
 800a042:	4618      	mov	r0, r3
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <vCastPointerTo_StreamBuffer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type StreamBuffer_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( StreamBuffer_t )
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
    return ( StreamBuffer_t * ) pvArgument;
 800a056:	687b      	ldr	r3, [r7, #4]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800a068:	4803      	ldr	r0, [pc, #12]	; (800a078 <vNetworkSocketsInit+0x14>)
 800a06a:	f7fa fc1f 	bl	80048ac <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
        {
            vListInitialise( &xBoundTCPSocketsList );
 800a06e:	4803      	ldr	r0, [pc, #12]	; (800a07c <vNetworkSocketsInit+0x18>)
 800a070:	f7fa fc1c 	bl	80048ac <vListInitialise>
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800a074:	bf00      	nop
 800a076:	bd80      	pop	{r7, pc}
 800a078:	2000c878 	.word	0x2000c878
 800a07c:	2000c864 	.word	0x2000c864

0800a080 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800a08e:	2301      	movs	r3, #1
 800a090:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800a096:	f7ff ff0f 	bl	8009eb8 <xIPIsNetworkTaskReady>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d102      	bne.n	800a0a6 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e04e      	b.n	800a144 <prvDetermineSocketSize+0xc4>
    }
    else
    {
        /* Only Ethernet is currently supported. */
        configASSERT( xDomain == FREERTOS_AF_INET );
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d004      	beq.n	800a0b6 <prvDetermineSocketSize+0x36>
 800a0ac:	4928      	ldr	r1, [pc, #160]	; (800a150 <prvDetermineSocketSize+0xd0>)
 800a0ae:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800a0b2:	f7f6 fcef 	bl	8000a94 <vAssertCalled>

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800a0b6:	4b27      	ldr	r3, [pc, #156]	; (800a154 <prvDetermineSocketSize+0xd4>)
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0be:	d004      	beq.n	800a0ca <prvDetermineSocketSize+0x4a>
 800a0c0:	4923      	ldr	r1, [pc, #140]	; (800a150 <prvDetermineSocketSize+0xd0>)
 800a0c2:	f240 104b 	movw	r0, #331	; 0x14b
 800a0c6:	f7f6 fce5 	bl	8000a94 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
            {
                /* Check if the TCP socket-list has been initialised. */
                configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800a0ca:	4b23      	ldr	r3, [pc, #140]	; (800a158 <prvDetermineSocketSize+0xd8>)
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d2:	d004      	beq.n	800a0de <prvDetermineSocketSize+0x5e>
 800a0d4:	491e      	ldr	r1, [pc, #120]	; (800a150 <prvDetermineSocketSize+0xd0>)
 800a0d6:	f240 104f 	movw	r0, #335	; 0x14f
 800a0da:	f7f6 fcdb 	bl	8000a94 <vAssertCalled>
            }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b11      	cmp	r3, #17
 800a0e2:	d110      	bne.n	800a106 <prvDetermineSocketSize+0x86>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d009      	beq.n	800a0fe <prvDetermineSocketSize+0x7e>
            {
                xReturn = pdFAIL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS );
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d004      	beq.n	800a0fe <prvDetermineSocketSize+0x7e>
 800a0f4:	4916      	ldr	r1, [pc, #88]	; (800a150 <prvDetermineSocketSize+0xd0>)
 800a0f6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800a0fa:	f7f6 fccb 	bl	8000a94 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	224c      	movs	r2, #76	; 0x4c
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	e01e      	b.n	800a144 <prvDetermineSocketSize+0xc4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b06      	cmp	r3, #6
 800a10a:	d111      	bne.n	800a130 <prvDetermineSocketSize+0xb0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d009      	beq.n	800a126 <prvDetermineSocketSize+0xa6>
                {
                    xReturn = pdFAIL;
 800a112:	2300      	movs	r3, #0
 800a114:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS );
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d004      	beq.n	800a126 <prvDetermineSocketSize+0xa6>
 800a11c:	490c      	ldr	r1, [pc, #48]	; (800a150 <prvDetermineSocketSize+0xd0>)
 800a11e:	f240 1065 	movw	r0, #357	; 0x165
 800a122:	f7f6 fcb7 	bl	8000a94 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	e009      	b.n	800a144 <prvDetermineSocketSize+0xc4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800a130:	2300      	movs	r3, #0
 800a132:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS );
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d004      	beq.n	800a144 <prvDetermineSocketSize+0xc4>
 800a13a:	4905      	ldr	r1, [pc, #20]	; (800a150 <prvDetermineSocketSize+0xd0>)
 800a13c:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 800a140:	f7f6 fca8 	bl	8000a94 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800a144:	697b      	ldr	r3, [r7, #20]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	08010e68 	.word	0x08010e68
 800a154:	2000c878 	.word	0x2000c878
 800a158:	2000c864 	.word	0x2000c864

0800a15c <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800a168:	2301      	movs	r3, #1
 800a16a:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;

    if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800a16c:	f107 0310 	add.w	r3, r7, #16
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	68b9      	ldr	r1, [r7, #8]
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f7ff ff83 	bl	800a080 <prvDetermineSocketSize>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d103      	bne.n	800a188 <FreeRTOS_socket+0x2c>
    {
        xReturn = FREERTOS_INVALID_SOCKET;
 800a180:	f04f 33ff 	mov.w	r3, #4294967295
 800a184:	61fb      	str	r3, [r7, #28]
 800a186:	e080      	b.n	800a28a <FreeRTOS_socket+0x12e>
    {
        /* Allocate the structure that will hold the socket information. The
        * size depends on the type of socket: UDP sockets need less space. A
        * define 'pvPortMallocSocket' will used to allocate the necessary space.
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fc ff58 	bl	8007040 <pvPortMalloc>
 800a190:	4603      	mov	r3, r0
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff ff3a 	bl	800a00c <vCastPointerTo_FreeRTOS_Socket_t>
 800a198:	61b8      	str	r0, [r7, #24]

        if( pxSocket == NULL )
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d103      	bne.n	800a1a8 <FreeRTOS_socket+0x4c>
        {
            xReturn = FREERTOS_INVALID_SOCKET;
 800a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a4:	61fb      	str	r3, [r7, #28]
 800a1a6:	e070      	b.n	800a28a <FreeRTOS_socket+0x12e>
            iptraceFAILED_TO_CREATE_SOCKET();
        }
        else
        {
            xEventGroup = xEventGroupCreate();
 800a1a8:	f7fa fa8a 	bl	80046c0 <xEventGroupCreate>
 800a1ac:	6178      	str	r0, [r7, #20]

            if( xEventGroup == NULL )
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d106      	bne.n	800a1c2 <FreeRTOS_socket+0x66>
            {
                vPortFreeSocket( pxSocket );
 800a1b4:	69b8      	ldr	r0, [r7, #24]
 800a1b6:	f7fc fffd 	bl	80071b4 <vPortFree>
                xReturn = FREERTOS_INVALID_SOCKET;
 800a1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a1be:	61fb      	str	r3, [r7, #28]
 800a1c0:	e063      	b.n	800a28a <FreeRTOS_socket+0x12e>
                    /* Lint wants at least a comment, in case the macro is empty. */
                    iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
                }

                /* Clear the entire space to avoid nulling individual entries. */
                ( void ) memset( pxSocket, 0, uxSocketSize );
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	69b8      	ldr	r0, [r7, #24]
 800a1ca:	f005 ff8e 	bl	80100ea <memset>

                pxSocket->xEventGroup = xEventGroup;
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	605a      	str	r2, [r3, #4]

                /* Initialise the socket's members.  The semaphore will be created
                 * if the socket is bound to an address, for now the pointer to the
                 * semaphore is just set to NULL to show it has not been created. */
                if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b11      	cmp	r3, #17
 800a1d8:	d104      	bne.n	800a1e4 <FreeRTOS_socket+0x88>
                {
                    vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	3338      	adds	r3, #56	; 0x38
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fa fb64 	bl	80048ac <vListInitialise>
                            pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
                        }
                    #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
                }

                vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fa fb7f 	bl	80048ec <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	615a      	str	r2, [r3, #20]

                pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1fa:	61da      	str	r2, [r3, #28]
                pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a202:	621a      	str	r2, [r3, #32]
                pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                pxSocket->ucProtocol = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

                #if ( ipconfigUSE_TCP == 1 )
                    {
                        if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b06      	cmp	r3, #6
 800a21a:	d134      	bne.n	800a286 <FreeRTOS_socket+0x12a>
                        {
                            /* StreamSize is expressed in number of bytes */
                            /* Round up buffer sizes to nearest multiple of MSS */
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a222:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                            pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ipconfigTCP_MSS;
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a22c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                            pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a236:	66da      	str	r2, [r3, #108]	; 0x6c
                            pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800a238:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800a23c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a240:	f7ff fe56 	bl	8009ef0 <FreeRTOS_round_up>
 800a244:	4602      	mov	r2, r0
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	671a      	str	r2, [r3, #112]	; 0x70
                            /* Use half of the buffer size of the TCP windows */
                            #if ( ipconfigUSE_TCP_WIN == 1 )
                                {
                                    pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a24e:	08db      	lsrs	r3, r3, #3
 800a250:	4a10      	ldr	r2, [pc, #64]	; (800a294 <FreeRTOS_socket+0x138>)
 800a252:	fba2 2303 	umull	r2, r3, r2, r3
 800a256:	099b      	lsrs	r3, r3, #6
 800a258:	4619      	mov	r1, r3
 800a25a:	2001      	movs	r0, #1
 800a25c:	f7ff fe38 	bl	8009ed0 <FreeRTOS_max_uint32>
 800a260:	4602      	mov	r2, r0
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                                    pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26c:	08db      	lsrs	r3, r3, #3
 800a26e:	4a09      	ldr	r2, [pc, #36]	; (800a294 <FreeRTOS_socket+0x138>)
 800a270:	fba2 2303 	umull	r2, r3, r2, r3
 800a274:	099b      	lsrs	r3, r3, #6
 800a276:	4619      	mov	r1, r3
 800a278:	2001      	movs	r0, #1
 800a27a:	f7ff fe29 	bl	8009ed0 <FreeRTOS_max_uint32>
 800a27e:	4602      	mov	r2, r0
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                             * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
                             * socket is connected and data is exchanged. */
                        }
                    }
                #endif /* ipconfigUSE_TCP == 1 */
                xReturn = pxSocket;
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	61fb      	str	r3, [r7, #28]
    }

    /* Remove compiler warnings in the case the configASSERT() is not defined. */
    ( void ) xDomain;

    return xReturn;
 800a28a:	69fb      	ldr	r3, [r7, #28]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3720      	adds	r7, #32
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	2ce33e6d 	.word	0x2ce33e6d

0800a298 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08a      	sub	sp, #40	; 0x28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
 800a2a4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	61fb      	str	r3, [r7, #28]
    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a2b4:	2b06      	cmp	r3, #6
 800a2b6:	d102      	bne.n	800a2be <vSocketBind+0x26>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800a2b8:	4b37      	ldr	r3, [pc, #220]	; (800a398 <vSocketBind+0x100>)
 800a2ba:	623b      	str	r3, [r7, #32]
 800a2bc:	e001      	b.n	800a2c2 <vSocketBind+0x2a>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800a2be:	4b37      	ldr	r3, [pc, #220]	; (800a39c <vSocketBind+0x104>)
 800a2c0:	623b      	str	r3, [r7, #32]

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) uxAddressLength;

    configASSERT( pxSocket != NULL );
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d104      	bne.n	800a2d2 <vSocketBind+0x3a>
 800a2c8:	4935      	ldr	r1, [pc, #212]	; (800a3a0 <vSocketBind+0x108>)
 800a2ca:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 800a2ce:	f7f6 fbe1 	bl	8000a94 <vAssertCalled>
    configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d8:	d104      	bne.n	800a2e4 <vSocketBind+0x4c>
 800a2da:	4931      	ldr	r1, [pc, #196]	; (800a3a0 <vSocketBind+0x108>)
 800a2dc:	f240 5011 	movw	r0, #1297	; 0x511
 800a2e0:	f7f6 fbd8 	bl	8000a94 <vAssertCalled>
            /* pxAddress will be NULL if sendto() was called on a socket without the
             * socket being bound to an address. In this case, automatically allocate
             * an address to the socket.  There is a small chance that the allocated
             * port will already be in use - if that is the case, then the check below
             * [pxListFindListItemWithValue()] will result in an error being returned. */
            if( pxAddress == NULL )
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d105      	bne.n	800a2f6 <vSocketBind+0x5e>
            {
                pxAddress = &xAddress;
 800a2ea:	f107 0314 	add.w	r3, r7, #20
 800a2ee:	61fb      	str	r3, [r7, #28]
                /* Put the port to zero to be assigned later. */
                pxAddress->sin_port = 0U;
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	805a      	strh	r2, [r3, #2]
        }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d104      	bne.n	800a306 <vSocketBind+0x6e>
 800a2fc:	4928      	ldr	r1, [pc, #160]	; (800a3a0 <vSocketBind+0x108>)
 800a2fe:	f240 5025 	movw	r0, #1317	; 0x525
 800a302:	f7f6 fbc7 	bl	8000a94 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	885b      	ldrh	r3, [r3, #2]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d111      	bne.n	800a332 <vSocketBind+0x9a>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a314:	4618      	mov	r0, r3
 800a316:	f000 f901 	bl	800a51c <prvGetPrivatePortNumber>
 800a31a:	4603      	mov	r3, r0
 800a31c:	461a      	mov	r2, r3
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	885b      	ldrh	r3, [r3, #2]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d103      	bne.n	800a332 <vSocketBind+0x9a>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800a32a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800a32e:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
 800a330:	e02d      	b.n	800a38e <vSocketBind+0xf6>
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            /* Check to ensure the port is not already in use.  If the bind is
             * called internally, a port MAY be used by more than one socket. */
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d004      	beq.n	800a342 <vSocketBind+0xaa>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a33e:	2b06      	cmp	r3, #6
 800a340:	d00c      	beq.n	800a35c <vSocketBind+0xc4>
                ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	885b      	ldrh	r3, [r3, #2]
 800a346:	4619      	mov	r1, r3
 800a348:	6a38      	ldr	r0, [r7, #32]
 800a34a:	f000 f93f 	bl	800a5cc <pxListFindListItemWithValue>
 800a34e:	4603      	mov	r3, r0
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <vSocketBind+0xc4>
            {
                FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
                                         ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                         FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800a354:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
 800a35a:	e018      	b.n	800a38e <vSocketBind+0xf6>
            }
            else
            {
                /* Allocate the port number to the socket.
                 * This macro will set 'xBoundSocketListItem->xItemValue' */
                socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	885b      	ldrh	r3, [r3, #2]
 800a360:	461a      	mov	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	609a      	str	r2, [r3, #8]

                /* And also store it in a socket field 'usLocalPort' in host-byte-order,
                 * mostly used for logging and debugging purposes */
                pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	885b      	ldrh	r3, [r3, #2]
 800a36a:	021b      	lsls	r3, r3, #8
 800a36c:	b21a      	sxth	r2, r3
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	885b      	ldrh	r3, [r3, #2]
 800a372:	0a1b      	lsrs	r3, r3, #8
 800a374:	b29b      	uxth	r3, r3
 800a376:	b21b      	sxth	r3, r3
 800a378:	4313      	orrs	r3, r2
 800a37a:	b21b      	sxth	r3, r3
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	849a      	strh	r2, [r3, #36]	; 0x24
                            vTaskSuspendAll();
                        }
                    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

                    /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
                    vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3308      	adds	r3, #8
 800a386:	4619      	mov	r1, r3
 800a388:	6a38      	ldr	r0, [r7, #32]
 800a38a:	f7fa fabc 	bl	8004906 <vListInsertEnd>
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /* Tested */
 800a390:	4618      	mov	r0, r3
 800a392:	3728      	adds	r7, #40	; 0x28
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	2000c864 	.word	0x2000c864
 800a39c:	2000c878 	.word	0x2000c878
 800a3a0:	08010e68 	.word	0x08010e68

0800a3a4 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b086      	sub	sp, #24
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
    #endif
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800a3ac:	230a      	movs	r3, #10
 800a3ae:	733b      	strb	r3, [r7, #12]
    xCloseEvent.pvData = xSocket;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	613b      	str	r3, [r7, #16]

    if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <FreeRTOS_closesocket+0x1e>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c0:	d102      	bne.n	800a3c8 <FreeRTOS_closesocket+0x24>
    {
        xResult = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	617b      	str	r3, [r7, #20]
 800a3c6:	e00e      	b.n	800a3e6 <FreeRTOS_closesocket+0x42>
         * packet handling. */

        /* Note when changing the time-out value below, it must be checked who is calling
         * this function. If it is called by the IP-task, a deadlock could occur.
         * The IP-task would only call it in case of a user call-back */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800a3c8:	f107 030c 	add.w	r3, r7, #12
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff f91c 	bl	800960c <xSendEventStructToIPTask>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d103      	bne.n	800a3e2 <FreeRTOS_closesocket+0x3e>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
            xResult = -1;
 800a3da:	f04f 33ff 	mov.w	r3, #4294967295
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	e001      	b.n	800a3e6 <FreeRTOS_closesocket+0x42>
        }
        else
        {
            xResult = 1;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800a3e6:	697b      	ldr	r3, [r7, #20]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <vSocketClose>:
 * @param[in] pxSocket: The socket descriptor of the socket being closed.
 *
 * @return Returns NULL, always.
 */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* For TCP: clean up a little more. */
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a3fe:	2b06      	cmp	r3, #6
 800a400:	d122      	bne.n	800a448 <vSocketClose+0x58>
            {
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a406:	2b00      	cmp	r3, #0
 800a408:	d004      	beq.n	800a414 <vSocketClose+0x24>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a40e:	4618      	mov	r0, r3
 800a410:	f005 fdc2 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
                        }

                        /* Free the resources which were claimed by the tcpWin member */
                        vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	33d8      	adds	r3, #216	; 0xd8
 800a418:	4618      	mov	r0, r3
 800a41a:	f003 fe71 	bl	800e100 <vTCPWindowDestroy>
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* Free the input and output streams */
                if( pxSocket->u.xTCP.rxStream != NULL )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a422:	2b00      	cmp	r3, #0
 800a424:	d004      	beq.n	800a430 <vSocketClose+0x40>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                    vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fc fec2 	bl	80071b4 <vPortFree>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a434:	2b00      	cmp	r3, #0
 800a436:	d004      	beq.n	800a442 <vSocketClose+0x52>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                    vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fc feb9 	bl	80071b4 <vPortFree>
                }

                /* In case this is a child socket, make sure the child-count of the
                 * parent socket is decreased. */
                prvTCPSetSocketCount( pxSocket );
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f832 	bl	800a4ac <prvTCPSetSocketCount>
        }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d004      	beq.n	800a45a <vSocketClose+0x6a>
            {
                vTaskSuspendAll();
            }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3308      	adds	r3, #8
 800a454:	4618      	mov	r0, r3
 800a456:	f7fa fab3 	bl	80049c0 <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a460:	2b11      	cmp	r3, #17
 800a462:	d112      	bne.n	800a48a <vSocketClose+0x9a>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800a464:	e00d      	b.n	800a482 <vSocketClose+0x92>
        {
            pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff fde3 	bl	800a038 <vCastPointerTo_NetworkBufferDescriptor_t>
 800a472:	60f8      	str	r0, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4618      	mov	r0, r3
 800a478:	f7fa faa2 	bl	80049c0 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f005 fd8b 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1ed      	bne.n	800a466 <vSocketClose+0x76>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d004      	beq.n	800a49c <vSocketClose+0xac>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	4618      	mov	r0, r3
 800a498:	f7fa f9da 	bl	8004850 <vEventGroupDelete>
        }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7fc fe89 	bl	80071b4 <vPortFree>

    return NULL;
 800a4a2:	2300      	movs	r3, #0
} /* Tested */
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <prvTCPSetSocketCount>:
 *        keep a pointer to it.
 *
 * @param[in] pxSocketToDelete: The socket being closed.
 */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800a4b4:	4b18      	ldr	r3, [pc, #96]	; (800a518 <prvTCPSetSocketCount+0x6c>)
 800a4b6:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a4bc:	81fb      	strh	r3, [r7, #14]

        for( pxIterator = listGET_NEXT( pxEnd );
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	e020      	b.n	800a508 <prvTCPSetSocketCount+0x5c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7ff fd9e 	bl	800a00c <vCastPointerTo_FreeRTOS_Socket_t>
 800a4d0:	60b8      	str	r0, [r7, #8]

            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d112      	bne.n	800a502 <prvTCPSetSocketCount+0x56>
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800a4e0:	89fa      	ldrh	r2, [r7, #14]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d10d      	bne.n	800a502 <prvTCPSetSocketCount+0x56>
                ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d008      	beq.n	800a502 <prvTCPSetSocketCount+0x56>
            {
                pxOtherSocket->u.xTCP.usChildCount--;
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
                                         pxOtherSocket->usLocalPort,
                                         pxOtherSocket->u.xTCP.usChildCount,
                                         pxOtherSocket->u.xTCP.usBacklog,
                                         ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                break;
 800a500:	e006      	b.n	800a510 <prvTCPSetSocketCount+0x64>
             pxIterator = listGET_NEXT( pxIterator ) )
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	617b      	str	r3, [r7, #20]
        for( pxIterator = listGET_NEXT( pxEnd );
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d1da      	bne.n	800a4c6 <prvTCPSetSocketCount+0x1a>
            }
        }
    }
 800a510:	bf00      	nop
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	2000c86c 	.word	0x2000c86c

0800a51c <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800a524:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800a528:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800a52a:	89fb      	ldrh	r3, [r7, #14]
 800a52c:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b06      	cmp	r3, #6
 800a53a:	d102      	bne.n	800a542 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800a53c:	4b21      	ldr	r3, [pc, #132]	; (800a5c4 <prvGetPrivatePortNumber+0xa8>)
 800a53e:	613b      	str	r3, [r7, #16]
 800a540:	e001      	b.n	800a546 <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800a542:	4b21      	ldr	r3, [pc, #132]	; (800a5c8 <prvGetPrivatePortNumber+0xac>)
 800a544:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800a546:	f107 0308 	add.w	r3, r7, #8
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7f6 fa56 	bl	80009fc <xApplicationGetRandomNumber>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d030      	beq.n	800a5b8 <prvGetPrivatePortNumber+0x9c>
        }

        /* Map the random to a candidate port. */
        usResult =
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
            ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount );
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	b29b      	uxth	r3, r3
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800a55a:	89fa      	ldrh	r2, [r7, #14]
 800a55c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a560:	fb02 f201 	mul.w	r2, r2, r1
 800a564:	1a9b      	subs	r3, r3, r2
 800a566:	b29b      	uxth	r3, r3
        usResult =
 800a568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a56c:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800a56e:	8abb      	ldrh	r3, [r7, #20]
 800a570:	021b      	lsls	r3, r3, #8
 800a572:	b21a      	sxth	r2, r3
 800a574:	8abb      	ldrh	r3, [r7, #20]
 800a576:	0a1b      	lsrs	r3, r3, #8
 800a578:	b29b      	uxth	r3, r3
 800a57a:	b21b      	sxth	r3, r3
 800a57c:	4313      	orrs	r3, r2
 800a57e:	b21b      	sxth	r3, r3
 800a580:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800a582:	4619      	mov	r1, r3
 800a584:	6938      	ldr	r0, [r7, #16]
 800a586:	f000 f821 	bl	800a5cc <pxListFindListItemWithValue>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800a590:	8abb      	ldrh	r3, [r7, #20]
 800a592:	021b      	lsls	r3, r3, #8
 800a594:	b21a      	sxth	r2, r3
 800a596:	8abb      	ldrh	r3, [r7, #20]
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	b21b      	sxth	r3, r3
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	b21b      	sxth	r3, r3
 800a5a2:	82bb      	strh	r3, [r7, #20]
            break;
 800a5a4:	e009      	b.n	800a5ba <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800a5aa:	8afb      	ldrh	r3, [r7, #22]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800a5b0:	8afb      	ldrh	r3, [r7, #22]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1c7      	bne.n	800a546 <prvGetPrivatePortNumber+0x2a>
 800a5b6:	e000      	b.n	800a5ba <prvGetPrivatePortNumber+0x9e>
            break;
 800a5b8:	bf00      	nop

    return usResult;
 800a5ba:	8abb      	ldrh	r3, [r7, #20]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	2000c864 	.word	0x2000c864
 800a5c8:	2000c878 	.word	0x2000c878

0800a5cc <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800a5da:	f7ff fc6d 	bl	8009eb8 <xIPIsNetworkTaskReady>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d018      	beq.n	800a616 <pxListFindListItemWithValue+0x4a>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d015      	beq.n	800a616 <pxListFindListItemWithValue+0x4a>
    {
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	613b      	str	r3, [r7, #16]
 800a5f6:	e00a      	b.n	800a60e <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d102      	bne.n	800a608 <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	617b      	str	r3, [r7, #20]
                break;
 800a606:	e006      	b.n	800a616 <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	613b      	str	r3, [r7, #16]
        for( pxIterator = listGET_NEXT( pxEnd );
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	429a      	cmp	r2, r3
 800a614:	d1f0      	bne.n	800a5f8 <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800a616:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800a62c:	6879      	ldr	r1, [r7, #4]
 800a62e:	480d      	ldr	r0, [pc, #52]	; (800a664 <pxUDPSocketLookup+0x44>)
 800a630:	f7ff ffcc 	bl	800a5cc <pxListFindListItemWithValue>
 800a634:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00d      	beq.n	800a658 <pxUDPSocketLookup+0x38>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff fce3 	bl	800a00c <vCastPointerTo_FreeRTOS_Socket_t>
 800a646:	60f8      	str	r0, [r7, #12]
        configASSERT( pxSocket != NULL );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d104      	bne.n	800a658 <pxUDPSocketLookup+0x38>
 800a64e:	4906      	ldr	r1, [pc, #24]	; (800a668 <pxUDPSocketLookup+0x48>)
 800a650:	f640 008b 	movw	r0, #2187	; 0x88b
 800a654:	f7f6 fa1e 	bl	8000a94 <vAssertCalled>
    }

    return pxSocket;
 800a658:	68fb      	ldr	r3, [r7, #12]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	2000c878 	.word	0x2000c878
 800a668:	08010e68 	.word	0x08010e68

0800a66c <FreeRTOS_inet_ntoa>:
 * @return If all checks pass, then the pointer returned will be same as pcBuffer
 *         and will have the address stored in the location. Else, NULL is returned.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800a66c:	b480      	push	{r7}
 800a66e:	b08d      	sub	sp, #52	; 0x34
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800a67a:	1d3b      	adds	r3, r7, #4
 800a67c:	61bb      	str	r3, [r7, #24]
    const char * pcResult = pcBuffer;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
    const socklen_t uxSize = 16;
 800a682:	2310      	movs	r3, #16
 800a684:	617b      	str	r3, [r7, #20]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800a686:	2300      	movs	r3, #0
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a68a:	e073      	b.n	800a774 <FreeRTOS_inet_ntoa+0x108>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800a68c:	69ba      	ldr	r2, [r7, #24]
 800a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a690:	4413      	add	r3, r2
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800a698:	2302      	movs	r3, #2
 800a69a:	61fb      	str	r3, [r7, #28]
        socklen_t uxNeeded;

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800a69c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a6a0:	4b39      	ldr	r3, [pc, #228]	; (800a788 <FreeRTOS_inet_ntoa+0x11c>)
 800a6a2:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a6:	08d9      	lsrs	r1, r3, #3
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	440b      	add	r3, r1
 800a6ae:	005b      	lsls	r3, r3, #1
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	b2d9      	uxtb	r1, r3
 800a6b4:	f107 020c 	add.w	r2, r7, #12
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	460a      	mov	r2, r1
 800a6be:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800a6c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6c4:	4a30      	ldr	r2, [pc, #192]	; (800a788 <FreeRTOS_inet_ntoa+0x11c>)
 800a6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ca:	08db      	lsrs	r3, r3, #3
 800a6cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( uxSource == 1U )
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d003      	beq.n	800a6de <FreeRTOS_inet_ntoa+0x72>
            {
                break;
            }

            uxSource--;
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	61fb      	str	r3, [r7, #28]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800a6dc:	e7de      	b.n	800a69c <FreeRTOS_inet_ntoa+0x30>
                break;
 800a6de:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800a6e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6e4:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61fb      	str	r3, [r7, #28]
 800a6ea:	e009      	b.n	800a700 <FreeRTOS_inet_ntoa+0x94>
        {
            if( pucDigits[ uxSource ] != 0U )
 800a6ec:	f107 020c 	add.w	r2, r7, #12
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <FreeRTOS_inet_ntoa+0x9c>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	61fb      	str	r3, [r7, #28]
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d9f2      	bls.n	800a6ec <FreeRTOS_inet_ntoa+0x80>
 800a706:	e000      	b.n	800a70a <FreeRTOS_inet_ntoa+0x9e>
            {
                break;
 800a708:	bf00      	nop
            }
        }

        /* Write e.g. "192.", which is 3 digits and a dot. */
        uxNeeded = ( ( socklen_t ) sockDIGIT_COUNT - uxSource ) + 1U;
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	f1c3 0304 	rsb	r3, r3, #4
 800a710:	613b      	str	r3, [r7, #16]

        if( ( uxIndex + uxNeeded ) > uxSize )
 800a712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	4413      	add	r3, r2
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d213      	bcs.n	800a746 <FreeRTOS_inet_ntoa+0xda>
        {
            /* The result won't fit. */
            pcResult = NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	627b      	str	r3, [r7, #36]	; 0x24
 800a722:	e02a      	b.n	800a77a <FreeRTOS_inet_ntoa+0x10e>
            break;
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800a724:	f107 020c 	add.w	r2, r7, #12
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	4413      	add	r3, r2
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	440b      	add	r3, r1
 800a734:	3230      	adds	r2, #48	; 0x30
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800a73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73c:	3301      	adds	r3, #1
 800a73e:	62bb      	str	r3, [r7, #40]	; 0x28
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	3301      	adds	r3, #1
 800a744:	61fb      	str	r3, [r7, #28]
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d9eb      	bls.n	800a724 <FreeRTOS_inet_ntoa+0xb8>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d805      	bhi.n	800a75e <FreeRTOS_inet_ntoa+0xf2>
        {
            pcBuffer[ uxIndex ] = '.';
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	4413      	add	r3, r2
 800a758:	222e      	movs	r2, #46	; 0x2e
 800a75a:	701a      	strb	r2, [r3, #0]
 800a75c:	e004      	b.n	800a768 <FreeRTOS_inet_ntoa+0xfc>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	4413      	add	r3, r2
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	3301      	adds	r3, #1
 800a76c:	62bb      	str	r3, [r7, #40]	; 0x28
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a770:	3301      	adds	r3, #1
 800a772:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a776:	2b03      	cmp	r3, #3
 800a778:	d988      	bls.n	800a68c <FreeRTOS_inet_ntoa+0x20>
    }

    return pcResult;
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3734      	adds	r7, #52	; 0x34
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	cccccccd 	.word	0xcccccccd

0800a78c <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d106      	bne.n	800a7ae <FreeRTOS_inet_ntop+0x22>
    {
        case FREERTOS_AF_INET:
            pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	68b8      	ldr	r0, [r7, #8]
 800a7a6:	f000 f80a 	bl	800a7be <FreeRTOS_inet_ntop4>
 800a7aa:	6178      	str	r0, [r7, #20]
            break;
 800a7ac:	e002      	b.n	800a7b4 <FreeRTOS_inet_ntop+0x28>

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	617b      	str	r3, [r7, #20]
            break;
 800a7b2:	bf00      	nop
    }

    return pcResult;
 800a7b4:	697b      	ldr	r3, [r7, #20]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b088      	sub	sp, #32
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2b0f      	cmp	r3, #15
 800a7ce:	d802      	bhi.n	800a7d6 <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	61fb      	str	r3, [r7, #28]
 800a7d4:	e00e      	b.n	800a7f4 <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800a7d6:	f107 0314 	add.w	r3, r7, #20
 800a7da:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	68b9      	ldr	r1, [r7, #8]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7ff ff3e 	bl	800a66c <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800a7f4:	69fb      	ldr	r3, [r7, #28]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3720      	adds	r7, #32
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket: The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
        }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            if( pxSocket->pxSocketSet != NULL )
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d015      	beq.n	800a83a <vSocketWakeUpUser+0x3c>
            {
                EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	0a1b      	lsrs	r3, r3, #8
 800a814:	f003 030f 	and.w	r3, r3, #15
 800a818:	60fb      	str	r3, [r7, #12]

                if( xSelectBits != 0UL )
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00c      	beq.n	800a83a <vSocketWakeUpUser+0x3c>
                {
                    pxSocket->xSocketBits |= xSelectBits;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	431a      	orrs	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	631a      	str	r2, [r3, #48]	; 0x30
                    ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68f9      	ldr	r1, [r7, #12]
 800a834:	4618      	mov	r0, r3
 800a836:	f7f9 ff89 	bl	800474c <xEventGroupSetBits>
                }
            }

            pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
        }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00b      	beq.n	800a866 <vSocketWakeUpUser+0x68>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d007      	beq.n	800a866 <vSocketWakeUpUser+0x68>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685a      	ldr	r2, [r3, #4]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4619      	mov	r1, r3
 800a860:	4610      	mov	r0, r2
 800a862:	f7f9 ff73 	bl	800474c <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0UL;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]
}
 800a86c:	bf00      	nop
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <xTCPTimerCheck>:
 * @param[in] xWillSleep: Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800a874:	b580      	push	{r7, lr}
 800a876:	b08a      	sub	sp, #40	; 0x28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800a87c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a880:	627b      	str	r3, [r7, #36]	; 0x24
        TickType_t xNow = xTaskGetTickCount();
 800a882:	f7fb fa53 	bl	8005d2c <xTaskGetTickCount>
 800a886:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800a888:	4b32      	ldr	r3, [pc, #200]	; (800a954 <xTCPTimerCheck+0xe0>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	623b      	str	r3, [r7, #32]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800a892:	4b31      	ldr	r3, [pc, #196]	; (800a958 <xTCPTimerCheck+0xe4>)
 800a894:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800a896:	4b31      	ldr	r3, [pc, #196]	; (800a95c <xTCPTimerCheck+0xe8>)
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800a89c:	4a2d      	ldr	r2, [pc, #180]	; (800a954 <xTCPTimerCheck+0xe0>)
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d14c      	bne.n	800a942 <xTCPTimerCheck+0xce>
        {
            xDelta = 1U;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800a8ac:	e049      	b.n	800a942 <xTCPTimerCheck+0xce>
        {
            pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff fbaa 	bl	800a00c <vCastPointerTo_FreeRTOS_Socket_t>
 800a8b8:	6138      	str	r0, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d100      	bne.n	800a8cc <xTCPTimerCheck+0x58>
            {
                continue;
 800a8ca:	e03a      	b.n	800a942 <xTCPTimerCheck+0xce>
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d20a      	bcs.n	800a8f0 <xTCPTimerCheck+0x7c>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a8ee:	e00b      	b.n	800a908 <xTCPTimerCheck+0x94>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                xRc = xTCPSocketCheck( pxSocket );
 800a8f8:	6938      	ldr	r0, [r7, #16]
 800a8fa:	f000 fee1 	bl	800b6c0 <xTCPSocketCheck>
 800a8fe:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	da00      	bge.n	800a908 <xTCPTimerCheck+0x94>
                {
                    /* Continue because the socket was deleted. */
                    continue;
 800a906:	e01c      	b.n	800a942 <xTCPTimerCheck+0xce>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d008      	beq.n	800a922 <xTCPTimerCheck+0xae>
            {
                if( xWillSleep != pdFALSE )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <xTCPTimerCheck+0xaa>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800a916:	6938      	ldr	r0, [r7, #16]
 800a918:	f7ff ff71 	bl	800a7fe <vSocketWakeUpUser>
 800a91c:	e001      	b.n	800a922 <xTCPTimerCheck+0xae>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <xTCPTimerCheck+0xce>
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a932:	461a      	mov	r2, r3
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	4293      	cmp	r3, r2
 800a938:	d903      	bls.n	800a942 <xTCPTimerCheck+0xce>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a940:	627b      	str	r3, [r7, #36]	; 0x24
        while( pxIterator != pxEnd )
 800a942:	69fa      	ldr	r2, [r7, #28]
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	429a      	cmp	r2, r3
 800a948:	d1b1      	bne.n	800a8ae <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800a94c:	4618      	mov	r0, r3
 800a94e:	3728      	adds	r7, #40	; 0x28
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	2000bcc8 	.word	0x2000bcc8
 800a958:	2000c86c 	.word	0x2000c86c
 800a95c:	2000c864 	.word	0x2000c864

0800a960 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           uint32_t ulRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800a960:	b580      	push	{r7, lr}
 800a962:	b08a      	sub	sp, #40	; 0x28
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
 800a96c:	603b      	str	r3, [r7, #0]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	623b      	str	r3, [r7, #32]
 800a972:	2300      	movs	r3, #0
 800a974:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800a976:	4b1c      	ldr	r3, [pc, #112]	; (800a9e8 <pxTCPSocketLookup+0x88>)
 800a978:	61bb      	str	r3, [r7, #24]

        /* Parameter not yet supported. */
        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
 800a980:	e024      	b.n	800a9cc <pxTCPSocketLookup+0x6c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff fb40 	bl	800a00c <vCastPointerTo_FreeRTOS_Socket_t>
 800a98c:	6178      	str	r0, [r7, #20]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	b29b      	uxth	r3, r3
 800a996:	429a      	cmp	r2, r3
 800a998:	d115      	bne.n	800a9c6 <pxTCPSocketLookup+0x66>
            {
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d102      	bne.n	800a9aa <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	61fb      	str	r3, [r7, #28]
 800a9a8:	e00d      	b.n	800a9c6 <pxTCPSocketLookup+0x66>
                }
                else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d107      	bne.n	800a9c6 <pxTCPSocketLookup+0x66>
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d102      	bne.n	800a9c6 <pxTCPSocketLookup+0x66>
                {
                    /* For sockets not in listening mode, find a match with
                     * xLocalPort, ulRemoteIP AND xRemotePort. */
                    pxResult = pxSocket;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	623b      	str	r3, [r7, #32]
                    break;
 800a9c4:	e006      	b.n	800a9d4 <pxTCPSocketLookup+0x74>
             pxIterator = listGET_NEXT( pxIterator ) )
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	627b      	str	r3, [r7, #36]	; 0x24
        for( pxIterator = listGET_NEXT( pxEnd );
 800a9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d1d6      	bne.n	800a982 <pxTCPSocketLookup+0x22>
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <pxTCPSocketLookup+0x7e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	623b      	str	r3, [r7, #32]
        }

        return pxResult;
 800a9de:	6a3b      	ldr	r3, [r7, #32]
    }
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3728      	adds	r7, #40	; 0x28
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	2000c86c 	.word	0x2000c86c

0800a9ec <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d025      	beq.n	800aa48 <prvTCPCreateStream+0x5c>
        {
            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa00:	617b      	str	r3, [r7, #20]

            if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10c      	bne.n	800aa24 <prvTCPCreateStream+0x38>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aa0e:	4613      	mov	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	4413      	add	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	461a      	mov	r2, r3
 800aa18:	4b29      	ldr	r3, [pc, #164]	; (800aac0 <prvTCPCreateStream+0xd4>)
 800aa1a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa1e:	095a      	lsrs	r2, r3, #5
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	665a      	str	r2, [r3, #100]	; 0x64
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d110      	bne.n	800aa4e <prvTCPCreateStream+0x62>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aa30:	4613      	mov	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	011b      	lsls	r3, r3, #4
 800aa38:	461a      	mov	r2, r3
 800aa3a:	4b21      	ldr	r3, [pc, #132]	; (800aac0 <prvTCPCreateStream+0xd4>)
 800aa3c:	fba3 2302 	umull	r2, r3, r3, r2
 800aa40:	095a      	lsrs	r2, r3, #5
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	669a      	str	r2, [r3, #104]	; 0x68
 800aa46:	e002      	b.n	800aa4e <prvTCPCreateStream+0x62>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa4c:	617b      	str	r3, [r7, #20]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	3304      	adds	r3, #4
 800aa52:	617b      	str	r3, [r7, #20]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f023 0303 	bic.w	r3, r3, #3
 800aa5a:	617b      	str	r3, [r7, #20]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	3314      	adds	r3, #20
 800aa60:	613b      	str	r3, [r7, #16]

        pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 800aa62:	6938      	ldr	r0, [r7, #16]
 800aa64:	f7fc faec 	bl	8007040 <pvPortMalloc>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff faef 	bl	800a04e <vCastPointerTo_StreamBuffer_t>
 800aa70:	60f8      	str	r0, [r7, #12]

        if( pxBuffer == NULL )
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10b      	bne.n	800aa90 <prvTCPCreateStream+0xa4>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800aa7e:	f043 0308 	orr.w	r3, r3, #8
 800aa82:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800aa86:	2108      	movs	r1, #8
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 fc1f 	bl	800c2cc <vTCPStateChange>
 800aa8e:	e011      	b.n	800aab4 <prvTCPCreateStream+0xc8>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800aa90:	2214      	movs	r2, #20
 800aa92:	2100      	movs	r1, #0
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f005 fb28 	bl	80100ea <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	611a      	str	r2, [r3, #16]
            if( xTCPWindowLoggingLevel != 0 )
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
            }

            if( xIsInputStream != 0 )
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <prvTCPCreateStream+0xc2>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	675a      	str	r2, [r3, #116]	; 0x74
 800aaac:	e002      	b.n	800aab4 <prvTCPCreateStream+0xc8>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	679a      	str	r2, [r3, #120]	; 0x78
            }
        }

        return pxBuffer;
 800aab4:	68fb      	ldr	r3, [r7, #12]
    }
 800aab6:	4618      	mov	r0, r3
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	51eb851f 	.word	0x51eb851f

0800aac4 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad6:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	61bb      	str	r3, [r7, #24]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10a      	bne.n	800aaf8 <lTCPAddRxdata+0x34>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800aae2:	2101      	movs	r1, #1
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f7ff ff81 	bl	800a9ec <prvTCPCreateStream>
 800aaea:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d102      	bne.n	800aaf8 <lTCPAddRxdata+0x34>
            {
                xResult = -1;
 800aaf2:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf6:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	db44      	blt.n	800ab88 <lTCPAddRxdata+0xc4>
                        pcData = NULL;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	69f8      	ldr	r0, [r7, #28]
 800ab06:	f000 fb29 	bl	800b15c <uxStreamBufferAdd>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	61bb      	str	r3, [r7, #24]
                                                 ( UBaseType_t ) pxStream->uxFront ) );
                    }
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d139      	bne.n	800ab88 <lTCPAddRxdata+0xc4>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    /* See if running out of space. */
                    if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d11f      	bne.n	800ab64 <lTCPAddRxdata+0xa0>
                    {
                        size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff fa47 	bl	8009fbc <uxStreamBufferFrontSpace>
 800ab2e:	6178      	str	r0, [r7, #20]

                        if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d814      	bhi.n	800ab64 <lTCPAddRxdata+0xa0>
                        {
                            pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800ab40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab44:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                            pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ab4e:	f043 0301 	orr.w	r3, r3, #1
 800ab52:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                            /* bLowWater was reached, send the changed window size. */
                            pxSocket->u.xTCP.usTimeout = 1U;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800ab5e:	2006      	movs	r0, #6
 800ab60:	f7fe fd3e 	bl	80095e0 <xSendEventToIPTask>
                        }
                    }

                    /* New incoming data is available, wake up the user.   User's
                     * semaphores will be set just before the IP-task goes asleep. */
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f043 0201 	orr.w	r2, r3, #1
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <lTCPAddRxdata+0xc4>
                            {
                                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	601a      	str	r2, [r3, #0]
                    #endif
                }
            }
        }

        return xResult;
 800ab88:	69bb      	ldr	r3, [r7, #24]
    }
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3720      	adds	r7, #32
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <FreeRTOS_tx_space>:
 * @param[in] xSocket: the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b084      	sub	sp, #16
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800aba4:	2b06      	cmp	r3, #6
 800aba6:	d003      	beq.n	800abb0 <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800aba8:	f06f 0315 	mvn.w	r3, #21
 800abac:	60fb      	str	r3, [r7, #12]
 800abae:	e00e      	b.n	800abce <FreeRTOS_tx_space+0x3c>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d007      	beq.n	800abc8 <FreeRTOS_tx_space+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7ff f9e9 	bl	8009f94 <uxStreamBufferGetSpace>
 800abc2:	4603      	mov	r3, r0
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	e002      	b.n	800abce <FreeRTOS_tx_space+0x3c>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abcc:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800abce:	68fb      	ldr	r3, [r7, #12]
    }
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800abea:	2b06      	cmp	r3, #6
 800abec:	d003      	beq.n	800abf6 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800abee:	f06f 0315 	mvn.w	r3, #21
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	e00d      	b.n	800ac12 <FreeRTOS_rx_size+0x3a>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d007      	beq.n	800ac0e <FreeRTOS_rx_size+0x36>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff f9ee 	bl	8009fe4 <uxStreamBufferGetSize>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	e001      	b.n	800ac12 <FreeRTOS_rx_size+0x3a>
        }
        else
        {
            xReturn = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ac12:	68fb      	ldr	r3, [r7, #12]
    }
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800ac1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac20:	b095      	sub	sp, #84	; 0x54
 800ac22:	af06      	add	r7, sp, #24
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	633b      	str	r3, [r7, #48]	; 0x30
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800ac28:	f005 f9f6 	bl	8010018 <uxGetMinimumFreeNetworkBuffers>
 800ac2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800ac2e:	f005 f9e7 	bl	8010000 <uxGetNumberOfFreeNetworkBuffers>
 800ac32:	62b8      	str	r0, [r7, #40]	; 0x28

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800ac34:	4b5a      	ldr	r3, [pc, #360]	; (800ada0 <vTCPNetStat+0x184>)
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3c:	d003      	beq.n	800ac46 <vTCPNetStat+0x2a>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800ac3e:	4859      	ldr	r0, [pc, #356]	; (800ada4 <vTCPNetStat+0x188>)
 800ac40:	f7f5 feae 	bl	80009a0 <vLoggingPrintf>
                               ( UBaseType_t ) count,
                               ( UBaseType_t ) uxMinimum,
                               ( UBaseType_t ) uxCurrent,
                               ( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800ac44:	e0a7      	b.n	800ad96 <vTCPNetStat+0x17a>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800ac46:	4b58      	ldr	r3, [pc, #352]	; (800ada8 <vTCPNetStat+0x18c>)
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800ac4a:	4b58      	ldr	r3, [pc, #352]	; (800adac <vTCPNetStat+0x190>)
 800ac4c:	623b      	str	r3, [r7, #32]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800ac4e:	4858      	ldr	r0, [pc, #352]	; (800adb0 <vTCPNetStat+0x194>)
 800ac50:	f7f5 fea6 	bl	80009a0 <vLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ac54:	4b52      	ldr	r3, [pc, #328]	; (800ada0 <vTCPNetStat+0x184>)
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	637b      	str	r3, [r7, #52]	; 0x34
 800ac5a:	e073      	b.n	800ad44 <vTCPNetStat+0x128>
                const FreeRTOS_Socket_t * pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ac5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff f9de 	bl	800a022 <vCastConstPointerTo_FreeRTOS_Socket_t>
 800ac66:	61f8      	str	r0, [r7, #28]
                    TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800ac68:	f7fb f860 	bl	8005d2c <xTaskGetTickCount>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	61bb      	str	r3, [r7, #24]
                char ucChildText[ 16 ] = "";
 800ac76:	2300      	movs	r3, #0
 800ac78:	607b      	str	r3, [r7, #4]
 800ac7a:	f107 0308 	add.w	r3, r7, #8
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	605a      	str	r2, [r3, #4]
 800ac84:	609a      	str	r2, [r3, #8]
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d11e      	bne.n	800acce <vTCPNetStat+0xb2>
                                                         ( int32_t ) pxSocket->u.xTCP.usChildCount,
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800ac96:	461a      	mov	r2, r3
                                                         ( int32_t ) pxSocket->u.xTCP.usBacklog );
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800ac9e:	1d38      	adds	r0, r7, #4
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	4613      	mov	r3, r2
 800aca4:	4a43      	ldr	r2, [pc, #268]	; (800adb4 <vTCPNetStat+0x198>)
 800aca6:	2110      	movs	r1, #16
 800aca8:	f005 fa28 	bl	80100fc <sniprintf>
 800acac:	6178      	str	r0, [r7, #20]
                    configASSERT( copied_len >= 0 );
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	da04      	bge.n	800acbe <vTCPNetStat+0xa2>
 800acb4:	4940      	ldr	r1, [pc, #256]	; (800adb8 <vTCPNetStat+0x19c>)
 800acb6:	f241 1064 	movw	r0, #4452	; 0x1164
 800acba:	f7f5 feeb 	bl	8000a94 <vAssertCalled>
                    configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) );
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b0f      	cmp	r3, #15
 800acc2:	dd04      	ble.n	800acce <vTCPNetStat+0xb2>
 800acc4:	493c      	ldr	r1, [pc, #240]	; (800adb8 <vTCPNetStat+0x19c>)
 800acc6:	f241 1065 	movw	r0, #4453	; 0x1165
 800acca:	f7f5 fee3 	bl	8000a94 <vAssertCalled>
                FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800acd2:	4698      	mov	r8, r3
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800acdc:	4699      	mov	r9, r3
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	bf14      	ite	ne
 800ace6:	2301      	movne	r3, #1
 800ace8:	2300      	moveq	r3, #0
 800acea:	b2db      	uxtb	r3, r3
 800acec:	461d      	mov	r5, r3
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	bf14      	ite	ne
 800acf6:	2301      	movne	r3, #1
 800acf8:	2300      	moveq	r3, #0
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	461e      	mov	r6, r3
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ad04:	4618      	mov	r0, r3
 800ad06:	f002 ff65 	bl	800dbd4 <FreeRTOS_GetTCPStateName>
 800ad0a:	4601      	mov	r1, r0
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	4a2b      	ldr	r2, [pc, #172]	; (800adbc <vTCPNetStat+0x1a0>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	bf28      	it	cs
 800ad14:	4613      	movcs	r3, r2
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	1d3a      	adds	r2, r7, #4
 800ad20:	9205      	str	r2, [sp, #20]
 800ad22:	9004      	str	r0, [sp, #16]
 800ad24:	9303      	str	r3, [sp, #12]
 800ad26:	9102      	str	r1, [sp, #8]
 800ad28:	9601      	str	r6, [sp, #4]
 800ad2a:	9500      	str	r5, [sp, #0]
 800ad2c:	464b      	mov	r3, r9
 800ad2e:	4622      	mov	r2, r4
 800ad30:	4641      	mov	r1, r8
 800ad32:	4823      	ldr	r0, [pc, #140]	; (800adc0 <vTCPNetStat+0x1a4>)
 800ad34:	f7f5 fe34 	bl	80009a0 <vLoggingPrintf>
                count++;
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ad3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	637b      	str	r3, [r7, #52]	; 0x34
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ad44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d187      	bne.n	800ac5c <vTCPNetStat+0x40>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800ad4c:	4b1d      	ldr	r3, [pc, #116]	; (800adc4 <vTCPNetStat+0x1a8>)
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	637b      	str	r3, [r7, #52]	; 0x34
 800ad52:	e014      	b.n	800ad7e <vTCPNetStat+0x162>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 800ad54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	021b      	lsls	r3, r3, #8
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	0a1b      	lsrs	r3, r3, #8
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	4313      	orrs	r3, r2
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4816      	ldr	r0, [pc, #88]	; (800adc8 <vTCPNetStat+0x1ac>)
 800ad6e:	f7f5 fe17 	bl	80009a0 <vLoggingPrintf>
                count++;
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	3301      	adds	r3, #1
 800ad76:	633b      	str	r3, [r7, #48]	; 0x30
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ad78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	637b      	str	r3, [r7, #52]	; 0x34
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800ad7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d1e6      	bne.n	800ad54 <vTCPNetStat+0x138>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %lu sockets %lu < %lu < %ld buffers free\n",
 800ad86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad88:	233c      	movs	r3, #60	; 0x3c
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad90:	480e      	ldr	r0, [pc, #56]	; (800adcc <vTCPNetStat+0x1b0>)
 800ad92:	f7f5 fe05 	bl	80009a0 <vLoggingPrintf>
    }
 800ad96:	bf00      	nop
 800ad98:	373c      	adds	r7, #60	; 0x3c
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ada0:	2000c864 	.word	0x2000c864
 800ada4:	08010e9c 	.word	0x08010e9c
 800ada8:	2000c86c 	.word	0x2000c86c
 800adac:	2000c880 	.word	0x2000c880
 800adb0:	08010eb8 	.word	0x08010eb8
 800adb4:	08010f00 	.word	0x08010f00
 800adb8:	08010e68 	.word	0x08010e68
 800adbc:	000f423f 	.word	0x000f423f
 800adc0:	08010f08 	.word	0x08010f08
 800adc4:	2000c878 	.word	0x2000c878
 800adc8:	08010f38 	.word	0x08010f38
 800adcc:	08010f48 	.word	0x08010f48

0800add0 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet: The socket-set which is to be waited on for change.
 */
    void vSocketSelect( SocketSelect_t * pxSocketSet )
    {
 800add0:	b580      	push	{r7, lr}
 800add2:	b08c      	sub	sp, #48	; 0x30
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800add8:	2301      	movs	r3, #1
 800adda:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800addc:	2300      	movs	r3, #0
 800adde:	627b      	str	r3, [r7, #36]	; 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800ade0:	2300      	movs	r3, #0
 800ade2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ade4:	e0e4      	b.n	800afb0 <vSocketSelect+0x1e0>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <vSocketSelect+0x22>
            {
                pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 800adec:	4b85      	ldr	r3, [pc, #532]	; (800b004 <vSocketSelect+0x234>)
 800adee:	61fb      	str	r3, [r7, #28]
 800adf0:	e001      	b.n	800adf6 <vSocketSelect+0x26>
            }

            #if ipconfigUSE_TCP == 1
                else
                {
                    pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800adf2:	4b85      	ldr	r3, [pc, #532]	; (800b008 <vSocketSelect+0x238>)
 800adf4:	61fb      	str	r3, [r7, #28]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	623b      	str	r3, [r7, #32]
 800adfc:	e0d0      	b.n	800afa0 <vSocketSelect+0x1d0>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff f902 	bl	800a00c <vCastPointerTo_FreeRTOS_Socket_t>
 800ae08:	60b8      	str	r0, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	f040 80c1 	bne.w	800af98 <vSocketSelect+0x1c8>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	62bb      	str	r3, [r7, #40]	; 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ae20:	2b06      	cmp	r3, #6
 800ae22:	f040 80a3 	bne.w	800af6c <vSocketSelect+0x19c>
                    {
                        /* Check if the socket has already been accepted by the
                         * owner.  If not, it is useless to return it from a
                         * select(). */
                        BaseType_t bAccepted = pdFALSE;
 800ae26:	2300      	movs	r3, #0
 800ae28:	61bb      	str	r3, [r7, #24]

                        if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae30:	f003 0304 	and.w	r3, r3, #4
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <vSocketSelect+0x7e>
                        {
                            if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae40:	f003 0302 	and.w	r3, r3, #2
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <vSocketSelect+0x7e>
                            {
                                bAccepted = pdTRUE;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	61bb      	str	r3, [r7, #24]
                            }
                        }

                        /* Is the set owner interested in READ events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d038      	beq.n	800aecc <vSocketSelect+0xfc>
                        {
                            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d111      	bne.n	800ae88 <vSocketSelect+0xb8>
                            {
                                if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d02f      	beq.n	800aecc <vSocketSelect+0xfc>
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae74:	f003 0302 	and.w	r3, r3, #2
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d026      	beq.n	800aecc <vSocketSelect+0xfc>
                                {
                                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800ae7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae80:	f043 0301 	orr.w	r3, r3, #1
 800ae84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae86:	e021      	b.n	800aecc <vSocketSelect+0xfc>
                                }
                            }
                            else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae8e:	f003 0308 	and.w	r3, r3, #8
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00c      	beq.n	800aeb2 <vSocketSelect+0xe2>
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae9e:	f003 0302 	and.w	r3, r3, #2
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d004      	beq.n	800aeb2 <vSocketSelect+0xe2>
                            {
                                /* This socket has the re-use flag. After connecting it turns into
                                 * a connected socket. Set the READ event, so that accept() will be called. */
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	f043 0301 	orr.w	r3, r3, #1
 800aeae:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeb0:	e00c      	b.n	800aecc <vSocketSelect+0xfc>
                            }
                            else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d009      	beq.n	800aecc <vSocketSelect+0xfc>
 800aeb8:	68b8      	ldr	r0, [r7, #8]
 800aeba:	f7ff fe8d 	bl	800abd8 <FreeRTOS_rx_size>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	dd03      	ble.n	800aecc <vSocketSelect+0xfc>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	f043 0301 	orr.w	r3, r3, #1
 800aeca:	62bb      	str	r3, [r7, #40]	; 0x28
                                /* Nothing. */
                            }
                        }

                        /* Is the set owner interested in EXCEPTION events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00d      	beq.n	800aef4 <vSocketSelect+0x124>
                        {
                            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800aede:	2b08      	cmp	r3, #8
 800aee0:	d004      	beq.n	800aeec <vSocketSelect+0x11c>
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d103      	bne.n	800aef4 <vSocketSelect+0x124>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	f043 0304 	orr.w	r3, r3, #4
 800aef2:	62bb      	str	r3, [r7, #40]	; 0x28
                            }
                        }

                        /* Is the set owner interested in WRITE events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	f003 0302 	and.w	r3, r3, #2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d043      	beq.n	800af88 <vSocketSelect+0x1b8>
                        {
                            BaseType_t bMatch = pdFALSE;
 800af00:	2300      	movs	r3, #0
 800af02:	617b      	str	r3, [r7, #20]

                            if( bAccepted != 0 )
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d007      	beq.n	800af1a <vSocketSelect+0x14a>
                            {
                                if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800af0a:	68b8      	ldr	r0, [r7, #8]
 800af0c:	f7ff fe41 	bl	800ab92 <FreeRTOS_tx_space>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	dd01      	ble.n	800af1a <vSocketSelect+0x14a>
                                {
                                    bMatch = pdTRUE;
 800af16:	2301      	movs	r3, #1
 800af18:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch == pdFALSE )
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d11d      	bne.n	800af5c <vSocketSelect+0x18c>
                            {
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af26:	f003 0308 	and.w	r3, r3, #8
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d015      	beq.n	800af5c <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800af36:	2b04      	cmp	r3, #4
 800af38:	d910      	bls.n	800af5c <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af40:	f003 0310 	and.w	r3, r3, #16
 800af44:	b2db      	uxtb	r3, r3
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800af46:	2b00      	cmp	r3, #0
 800af48:	d108      	bne.n	800af5c <vSocketSelect+0x18c>
                                {
                                    pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800af50:	f043 0310 	orr.w	r3, r3, #16
 800af54:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                                    bMatch = pdTRUE;
 800af58:	2301      	movs	r3, #1
 800af5a:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch != pdFALSE )
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d012      	beq.n	800af88 <vSocketSelect+0x1b8>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	f043 0302 	orr.w	r3, r3, #2
 800af68:	62bb      	str	r3, [r7, #40]	; 0x28
 800af6a:	e00d      	b.n	800af88 <vSocketSelect+0x1b8>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b00      	cmp	r3, #0
 800af76:	d007      	beq.n	800af88 <vSocketSelect+0x1b8>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d003      	beq.n	800af88 <vSocketSelect+0x1b8>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	f043 0301 	orr.w	r3, r3, #1
 800af86:	62bb      	str	r3, [r7, #40]	; 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af8c:	631a      	str	r2, [r3, #48]	; 0x30

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800af8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	4313      	orrs	r3, r2
 800af94:	627b      	str	r3, [r7, #36]	; 0x24
 800af96:	e000      	b.n	800af9a <vSocketSelect+0x1ca>
                    continue;
 800af98:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800afa0:	6a3a      	ldr	r2, [r7, #32]
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	f47f af2a 	bne.w	800adfe <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800afaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afac:	3301      	adds	r3, #1
 800afae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	f77f af16 	ble.w	800ade6 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2100      	movs	r1, #0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7f9 fb95 	bl	80046f0 <xEventGroupClearBits>
 800afc6:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	43da      	mvns	r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	4013      	ands	r3, r2
 800afd0:	f003 030f 	and.w	r3, r3, #15
 800afd4:	60fb      	str	r3, [r7, #12]
                 * and cleared in FreeRTOS_select(). */
                xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
            }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <vSocketSelect+0x218>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68f9      	ldr	r1, [r7, #12]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7f9 fb84 	bl	80046f0 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	f043 0310 	orr.w	r3, r3, #16
 800aff2:	4619      	mov	r1, r3
 800aff4:	4610      	mov	r0, r2
 800aff6:	f7f9 fba9 	bl	800474c <xEventGroupSetBits>
    }
 800affa:	bf00      	nop
 800affc:	3730      	adds	r7, #48	; 0x30
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	2000c880 	.word	0x2000c880
 800b008:	2000c86c 	.word	0x2000c86c

0800b00c <FreeRTOS_min_uint32>:
        {
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	4293      	cmp	r3, r2
 800b01c:	bf28      	it	cs
 800b01e:	4613      	movcs	r3, r2
        }
 800b020:	4618      	mov	r0, r3
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <uxStreamBufferSpace>:
    {
 800b02c:	b480      	push	{r7}
 800b02e:	b087      	sub	sp, #28
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	691a      	ldr	r2, [r3, #16]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	441a      	add	r2, r3
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	3b01      	subs	r3, #1
 800b046:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d304      	bcc.n	800b05c <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	617b      	str	r3, [r7, #20]
        return uxCount;
 800b05c:	697b      	ldr	r3, [r7, #20]
    }
 800b05e:	4618      	mov	r0, r3
 800b060:	371c      	adds	r7, #28
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <uxStreamBufferDistance>:
    {
 800b06a:	b480      	push	{r7}
 800b06c:	b087      	sub	sp, #28
 800b06e:	af00      	add	r7, sp, #0
 800b070:	60f8      	str	r0, [r7, #12]
 800b072:	60b9      	str	r1, [r7, #8]
 800b074:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	691a      	ldr	r2, [r3, #16]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	441a      	add	r2, r3
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d304      	bcc.n	800b098 <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	617b      	str	r3, [r7, #20]
        return uxCount;
 800b098:	697b      	ldr	r3, [r7, #20]
    }
 800b09a:	4618      	mov	r0, r3
 800b09c:	371c      	adds	r7, #28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <uxStreamBufferGetSpace>:
    {
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b084      	sub	sp, #16
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	68f9      	ldr	r1, [r7, #12]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7ff ffb4 	bl	800b02c <uxStreamBufferSpace>
 800b0c4:	4603      	mov	r3, r0
    }
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <uxStreamBufferGetSize>:
    {
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff ffbf 	bl	800b06a <uxStreamBufferDistance>
 800b0ec:	4603      	mov	r3, r0
    }
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <xStreamBufferLessThenEqual>:
                                                             const size_t uxLeft,
                                                             const size_t uxRight );
    static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * pxBuffer,
                                                             const size_t uxLeft,
                                                             const size_t uxRight )
    {
 800b0f6:	b480      	push	{r7}
 800b0f8:	b087      	sub	sp, #28
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;
        size_t uxTail = pxBuffer->uxTail;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	613b      	str	r3, [r7, #16]

        /* Returns true if ( uxLeft < uxRight ) */
        if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U ) ) != 0U )
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d201      	bcs.n	800b114 <xStreamBufferLessThenEqual+0x1e>
 800b110:	2201      	movs	r2, #1
 800b112:	e000      	b.n	800b116 <xStreamBufferLessThenEqual+0x20>
 800b114:	2200      	movs	r2, #0
 800b116:	6879      	ldr	r1, [r7, #4]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	4299      	cmp	r1, r3
 800b11c:	d201      	bcs.n	800b122 <xStreamBufferLessThenEqual+0x2c>
 800b11e:	2301      	movs	r3, #1
 800b120:	e000      	b.n	800b124 <xStreamBufferLessThenEqual+0x2e>
 800b122:	2300      	movs	r3, #0
 800b124:	429a      	cmp	r2, r3
 800b126:	d009      	beq.n	800b13c <xStreamBufferLessThenEqual+0x46>
        {
            if( uxRight < uxTail )
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d202      	bcs.n	800b136 <xStreamBufferLessThenEqual+0x40>
            {
                xReturn = pdTRUE;
 800b130:	2301      	movs	r3, #1
 800b132:	617b      	str	r3, [r7, #20]
 800b134:	e00b      	b.n	800b14e <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800b136:	2300      	movs	r3, #0
 800b138:	617b      	str	r3, [r7, #20]
 800b13a:	e008      	b.n	800b14e <xStreamBufferLessThenEqual+0x58>
            }
        }
        else
        {
            if( uxLeft <= uxRight )
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	429a      	cmp	r2, r3
 800b142:	d802      	bhi.n	800b14a <xStreamBufferLessThenEqual+0x54>
            {
                xReturn = pdTRUE;
 800b144:	2301      	movs	r3, #1
 800b146:	617b      	str	r3, [r7, #20]
 800b148:	e001      	b.n	800b14e <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	617b      	str	r3, [r7, #20]
            }
        }

        return xReturn;
 800b14e:	697b      	ldr	r3, [r7, #20]
    }
 800b150:	4618      	mov	r0, r3
 800b152:	371c      	adds	r7, #28
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          const uint8_t * pucData,
                          size_t uxByteCount )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b088      	sub	sp, #32
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
    size_t uxSpace, uxNextHead, uxFirst;
    size_t uxCount = uxByteCount;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	617b      	str	r3, [r7, #20]

    uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f7ff ff99 	bl	800b0a6 <uxStreamBufferGetSpace>
 800b174:	61f8      	str	r0, [r7, #28]

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800b176:	69fa      	ldr	r2, [r7, #28]
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d904      	bls.n	800b188 <uxStreamBufferAdd+0x2c>
    {
        uxSpace -= uxOffset;
 800b17e:	69fa      	ldr	r2, [r7, #28]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	61fb      	str	r3, [r7, #28]
 800b186:	e001      	b.n	800b18c <uxStreamBufferAdd+0x30>
    }
    else
    {
        uxSpace = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	61fb      	str	r3, [r7, #28]
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800b18c:	6979      	ldr	r1, [r7, #20]
 800b18e:	69f8      	ldr	r0, [r7, #28]
 800b190:	f7ff ff3c 	bl	800b00c <FreeRTOS_min_uint32>
 800b194:	6178      	str	r0, [r7, #20]

    if( uxCount != 0U )
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d05a      	beq.n	800b252 <uxStreamBufferAdd+0xf6>
    {
        uxNextHead = pxBuffer->uxHead;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00d      	beq.n	800b1c4 <uxStreamBufferAdd+0x68>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d304      	bcc.n	800b1c4 <uxStreamBufferAdd+0x68>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d022      	beq.n	800b210 <uxStreamBufferAdd+0xb4>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	691a      	ldr	r2, [r3, #16]
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	6979      	ldr	r1, [r7, #20]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7ff ff19 	bl	800b00c <FreeRTOS_min_uint32>
 800b1da:	6138      	str	r0, [r7, #16]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	3310      	adds	r3, #16
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	6879      	ldr	r1, [r7, #4]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f004 ff59 	bl	80100a2 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d90b      	bls.n	800b210 <uxStreamBufferAdd+0xb4>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f103 0014 	add.w	r0, r3, #20
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	18d1      	adds	r1, r2, r3
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	461a      	mov	r2, r3
 800b20c:	f004 ff49 	bl	80100a2 <memcpy>
            }
        }

        if( uxOffset == 0U )
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d110      	bne.n	800b238 <uxStreamBufferAdd+0xdc>
        {
            /* ( uxOffset == 0 ) means: write at uxHead position */
            uxNextHead += uxCount;
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	4413      	add	r3, r2
 800b21c:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	429a      	cmp	r2, r3
 800b226:	d304      	bcc.n	800b232 <uxStreamBufferAdd+0xd6>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	69ba      	ldr	r2, [r7, #24]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxHead = uxNextHead;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	69ba      	ldr	r2, [r7, #24]
 800b236:	609a      	str	r2, [r3, #8]
        }

        if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	4619      	mov	r1, r3
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f7ff ff58 	bl	800b0f6 <xStreamBufferLessThenEqual>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <uxStreamBufferAdd+0xf6>
        {
            /* Advance the front pointer */
            pxBuffer->uxFront = uxNextHead;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	60da      	str	r2, [r3, #12]
        }
    }

    return uxCount;
 800b252:	697b      	ldr	r3, [r7, #20]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3720      	adds	r7, #32
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          uint8_t * pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
 800b268:	603b      	str	r3, [r7, #0]
    size_t uxSize, uxCount, uxFirst, uxNextTail;

    /* How much data is available? */
    uxSize = uxStreamBufferGetSize( pxBuffer );
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f7ff ff2f 	bl	800b0ce <uxStreamBufferGetSize>
 800b270:	61f8      	str	r0, [r7, #28]

    if( uxSize > uxOffset )
 800b272:	69fa      	ldr	r2, [r7, #28]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	429a      	cmp	r2, r3
 800b278:	d904      	bls.n	800b284 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800b27a:	69fa      	ldr	r2, [r7, #28]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	61fb      	str	r3, [r7, #28]
 800b282:	e001      	b.n	800b288 <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800b284:	2300      	movs	r3, #0
 800b286:	61fb      	str	r3, [r7, #28]
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	69f8      	ldr	r0, [r7, #28]
 800b28c:	f7ff febe 	bl	800b00c <FreeRTOS_min_uint32>
 800b290:	6178      	str	r0, [r7, #20]

    if( uxCount > 0U )
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d050      	beq.n	800b33a <uxStreamBufferGet+0xde>
    {
        uxNextTail = pxBuffer->uxTail;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00d      	beq.n	800b2c0 <uxStreamBufferGet+0x64>
        {
            uxNextTail += uxOffset;
 800b2a4:	69ba      	ldr	r2, [r7, #24]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d304      	bcc.n	800b2c0 <uxStreamBufferGet+0x64>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	69ba      	ldr	r2, [r7, #24]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d022      	beq.n	800b30c <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	691a      	ldr	r2, [r3, #16]
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	6979      	ldr	r1, [r7, #20]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7ff fe9b 	bl	800b00c <FreeRTOS_min_uint32>
 800b2d6:	6138      	str	r0, [r7, #16]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	3310      	adds	r3, #16
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	4413      	add	r3, r2
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	693a      	ldr	r2, [r7, #16]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f004 fedb 	bl	80100a2 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800b2ec:	697a      	ldr	r2, [r7, #20]
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d90b      	bls.n	800b30c <uxStreamBufferGet+0xb0>
            {
                /*...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	18d0      	adds	r0, r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f103 0114 	add.w	r1, r3, #20
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	461a      	mov	r2, r3
 800b308:	f004 fecb 	bl	80100a2 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d113      	bne.n	800b33a <uxStreamBufferGet+0xde>
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d110      	bne.n	800b33a <uxStreamBufferGet+0xde>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800b318:	69ba      	ldr	r2, [r7, #24]
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	4413      	add	r3, r2
 800b31e:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	69ba      	ldr	r2, [r7, #24]
 800b326:	429a      	cmp	r2, r3
 800b328:	d304      	bcc.n	800b334 <uxStreamBufferGet+0xd8>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	69ba      	ldr	r2, [r7, #24]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxTail = uxNextTail;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800b33a:	697b      	ldr	r3, [r7, #20]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3720      	adds	r7, #32
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <FreeRTOS_min_int32>:
        {
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	4293      	cmp	r3, r2
 800b354:	bfa8      	it	ge
 800b356:	4613      	movge	r3, r2
        }
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <FreeRTOS_min_uint32>:
        {
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	4293      	cmp	r3, r2
 800b374:	bf28      	it	cs
 800b376:	4613      	movcs	r3, r2
        }
 800b378:	4618      	mov	r0, r3
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <uxStreamBufferSpace>:
    {
 800b384:	b480      	push	{r7}
 800b386:	b087      	sub	sp, #28
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	691a      	ldr	r2, [r3, #16]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	441a      	add	r2, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	3b01      	subs	r3, #1
 800b39e:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d304      	bcc.n	800b3b4 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	617b      	str	r3, [r7, #20]
        return uxCount;
 800b3b4:	697b      	ldr	r3, [r7, #20]
    }
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	371c      	adds	r7, #28
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <uxStreamBufferDistance>:
    {
 800b3c2:	b480      	push	{r7}
 800b3c4:	b087      	sub	sp, #28
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	691a      	ldr	r2, [r3, #16]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	441a      	add	r2, r3
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d304      	bcc.n	800b3f0 <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	617b      	str	r3, [r7, #20]
        return uxCount;
 800b3f0:	697b      	ldr	r3, [r7, #20]
    }
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	371c      	adds	r7, #28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <uxStreamBufferGetSpace>:
    {
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	68f9      	ldr	r1, [r7, #12]
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff ffb4 	bl	800b384 <uxStreamBufferSpace>
 800b41c:	4603      	mov	r3, r0
    }
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <uxStreamBufferFrontSpace>:
    {
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
        size_t uxFront = pxBuffer->uxFront;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	68f9      	ldr	r1, [r7, #12]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7ff ffa0 	bl	800b384 <uxStreamBufferSpace>
 800b444:	4603      	mov	r3, r0
    }
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <uxStreamBufferMidSpace>:
    {
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	60fb      	str	r3, [r7, #12]
        size_t uxMid = pxBuffer->uxMid;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	68b9      	ldr	r1, [r7, #8]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff ffab 	bl	800b3c2 <uxStreamBufferDistance>
 800b46c:	4603      	mov	r3, r0
    }
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <vStreamBufferMoveMid>:
    {
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	6039      	str	r1, [r7, #0]
        size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7ff ffe4 	bl	800b44e <uxStreamBufferMidSpace>
 800b486:	60b8      	str	r0, [r7, #8]
        size_t uxMoveCount = uxCount;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	60fb      	str	r3, [r7, #12]
        if( uxMoveCount > uxSize )
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	429a      	cmp	r2, r3
 800b492:	d901      	bls.n	800b498 <vStreamBufferMoveMid+0x22>
            uxMoveCount = uxSize;
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	60fb      	str	r3, [r7, #12]
        pxBuffer->uxMid += uxMoveCount;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	441a      	add	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	605a      	str	r2, [r3, #4]
        if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685a      	ldr	r2, [r3, #4]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d306      	bcc.n	800b4be <vStreamBufferMoveMid+0x48>
            pxBuffer->uxMid -= pxBuffer->LENGTH;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	1ad2      	subs	r2, r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	605a      	str	r2, [r3, #4]
    }
 800b4be:	bf00      	nop
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <vCastConstPointerTo_IPHeader_t>:
    {
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
        return ( const IPHeader_t * ) pvArgument;
 800b4ce:	687b      	ldr	r3, [r7, #4]
    }
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <vCastPointerTo_TCPPacket_t>:
    {
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
        return ( TCPPacket_t * ) pvArgument;
 800b4e4:	687b      	ldr	r3, [r7, #4]
    }
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <vCastConstPointerTo_TCPPacket_t>:
    {
 800b4f2:	b480      	push	{r7}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
        return ( const TCPPacket_t * ) pvArgument;
 800b4fa:	687b      	ldr	r3, [r7, #4]
    }
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <vCastPointerTo_ProtocolHeaders_t>:
    {
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
        return ( ProtocolHeaders_t * ) pvArgument;
 800b510:	687b      	ldr	r3, [r7, #4]
    }
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <vCastConstPointerTo_ProtocolHeaders_t>:
    {
 800b51e:	b480      	push	{r7}
 800b520:	b083      	sub	sp, #12
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
        return ( const ProtocolHeaders_t * ) pvArgument;
 800b526:	687b      	ldr	r3, [r7, #4]
    }
 800b528:	4618      	mov	r0, r3
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800b53c:	687b      	ldr	r3, [r7, #4]
    }
 800b53e:	4618      	mov	r0, r3
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <ulChar2u32>:
    {
 800b54a:	b480      	push	{r7}
 800b54c:	b083      	sub	sp, #12
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	061a      	lsls	r2, r3, #24
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3301      	adds	r3, #1
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	041b      	lsls	r3, r3, #16
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800b560:	431a      	orrs	r2, r3
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3302      	adds	r3, #2
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	021b      	lsls	r3, r3, #8
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800b56a:	4313      	orrs	r3, r2
               ( ( ( uint32_t ) apChr[ 3 ] ) );
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	3203      	adds	r2, #3
 800b570:	7812      	ldrb	r2, [r2, #0]
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800b572:	4313      	orrs	r3, r2
    }
 800b574:	4618      	mov	r0, r3
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <usChar2u16>:
    {
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	021b      	lsls	r3, r3, #8
 800b590:	b29a      	uxth	r2, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3301      	adds	r3, #1
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	b29b      	uxth	r3, r3
        return ( uint16_t )
 800b59a:	4313      	orrs	r3, r2
 800b59c:	b29b      	uxth	r3, r3
    }
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
	...

0800b5ac <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    static BaseType_t prvTCPSocketIsActive( eIPTCPState_t xStatus )
    {
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( xStatus )
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	2b0b      	cmp	r3, #11
 800b5ba:	d81e      	bhi.n	800b5fa <prvTCPSocketIsActive+0x4e>
 800b5bc:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <prvTCPSocketIsActive+0x18>)
 800b5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c2:	bf00      	nop
 800b5c4:	0800b5f5 	.word	0x0800b5f5
 800b5c8:	0800b5fb 	.word	0x0800b5fb
 800b5cc:	0800b5fb 	.word	0x0800b5fb
 800b5d0:	0800b5fb 	.word	0x0800b5fb
 800b5d4:	0800b5fb 	.word	0x0800b5fb
 800b5d8:	0800b5fb 	.word	0x0800b5fb
 800b5dc:	0800b5fb 	.word	0x0800b5fb
 800b5e0:	0800b5f5 	.word	0x0800b5f5
 800b5e4:	0800b5f5 	.word	0x0800b5f5
 800b5e8:	0800b5f5 	.word	0x0800b5f5
 800b5ec:	0800b5fb 	.word	0x0800b5fb
 800b5f0:	0800b5f5 	.word	0x0800b5f5
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	60fb      	str	r3, [r7, #12]
                break;
 800b5f8:	e002      	b.n	800b600 <prvTCPSocketIsActive+0x54>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	60fb      	str	r3, [r7, #12]
                break;
 800b5fe:	bf00      	nop
        }

        return xResult;
 800b600:	68fb      	ldr	r3, [r7, #12]
    }
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop

0800b610 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;
            eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b61e:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800b620:	7cfb      	ldrb	r3, [r7, #19]
 800b622:	2b08      	cmp	r3, #8
 800b624:	d81a      	bhi.n	800b65c <prvTCPStatusAgeCheck+0x4c>
 800b626:	a201      	add	r2, pc, #4	; (adr r2, 800b62c <prvTCPStatusAgeCheck+0x1c>)
 800b628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62c:	0800b657 	.word	0x0800b657
 800b630:	0800b657 	.word	0x0800b657
 800b634:	0800b65d 	.word	0x0800b65d
 800b638:	0800b65d 	.word	0x0800b65d
 800b63c:	0800b65d 	.word	0x0800b65d
 800b640:	0800b651 	.word	0x0800b651
 800b644:	0800b65d 	.word	0x0800b65d
 800b648:	0800b65d 	.word	0x0800b65d
 800b64c:	0800b657 	.word	0x0800b657
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800b650:	2300      	movs	r3, #0
 800b652:	617b      	str	r3, [r7, #20]
                    break;
 800b654:	e005      	b.n	800b662 <prvTCPStatusAgeCheck+0x52>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]
                    break;
 800b65a:	e002      	b.n	800b662 <prvTCPStatusAgeCheck+0x52>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800b65c:	2301      	movs	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
                    break;
 800b660:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d025      	beq.n	800b6b4 <prvTCPStatusAgeCheck+0xa4>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800b668:	f7fa fb60 	bl	8005d2c <xTaskGetTickCount>
 800b66c:	4602      	mov	r2, r0
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f247 5230 	movw	r2, #30000	; 0x7530
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d919      	bls.n	800b6b4 <prvTCPStatusAgeCheck+0xa4>
                                                     FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
                        }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800b680:	2108      	movs	r1, #8
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fe22 	bl	800c2cc <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b68e:	f003 0304 	and.w	r3, r3, #4
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	d00d      	beq.n	800b6b4 <prvTCPStatusAgeCheck+0xa4>
                    {
                        if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b69e:	f003 0308 	and.w	r3, r3, #8
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d102      	bne.n	800b6ae <prvTCPStatusAgeCheck+0x9e>
                        {
                            /* As it did not get connected, and the user can never
                             * accept() it anymore, it will be deleted now.  Called from
                             * the IP-task, so it's safe to call the internal Close
                             * function: vSocketClose(). */
                            ( void ) vSocketClose( pxSocket );
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7fe fea1 	bl	800a3f0 <vSocketClose>
                        }

                        /* Return a negative value to tell to inform the caller
                         * xTCPTimerCheck()
                         * that the socket got closed and may not be accessed anymore. */
                        xResult = -1;
 800b6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b2:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800b6b4:	697b      	ldr	r3, [r7, #20]
        }
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop

0800b6c0 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d906      	bls.n	800b6e8 <xTCPSocketCheck+0x28>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <xTCPSocketCheck+0x28>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f001 f920 	bl	800c928 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d02d      	beq.n	800b74c <xTCPSocketCheck+0x8c>
                {
                    /* The first task of this regular socket check is to send-out delayed
                     * ACK's. */
                    if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6f6:	f003 0320 	and.w	r3, r3, #32
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d119      	bne.n	800b734 <xTCPSocketCheck+0x74>
                    {
                        /* Earlier data was received but not yet acknowledged.  This
                         * function is called when the TCP timer for the socket expires, the
                         * ACK may be sent now. */
                        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00c      	beq.n	800b724 <xTCPSocketCheck+0x64>
                        {
                            if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800b70a:	4b1e      	ldr	r3, [pc, #120]	; (800b784 <xTCPSocketCheck+0xc4>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b01      	cmp	r3, #1
                                                         pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
                                                         pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
                                                         ( unsigned ) ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
                            }

                            prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800b714:	2301      	movs	r3, #1
 800b716:	2228      	movs	r2, #40	; 0x28
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f8cd 	bl	800b8b8 <prvTCPReturnPacket>

                            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                                {
                                    /* The ownership has been passed to the SEND routine,
                                     * clear the pointer to it. */
                                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	67da      	str	r2, [r3, #124]	; 0x7c
                                }
                            #endif /* ipconfigZERO_COPY_TX_DRIVER */
                        }

                        if( prvTCPNextTimeout( pxSocket ) > 1U )
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f001 f87f 	bl	800c828 <prvTCPNextTimeout>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d901      	bls.n	800b734 <xTCPSocketCheck+0x74>
                        {
                            /* Tell the code below that this function is ready. */
                            xReady = pdTRUE;
 800b730:	2301      	movs	r3, #1
 800b732:	60bb      	str	r3, [r7, #8]
                        /* The user wants to perform an active shutdown(), skip sending
                         * the delayed ACK.  The function prvTCPSendPacket() will send the
                         * FIN along with the ACK's. */
                    }

                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d007      	beq.n	800b74c <xTCPSocketCheck+0x8c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b740:	4618      	mov	r0, r3
 800b742:	f004 fc29 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
                        pxSocket->u.xTCP.pxAckMessage = NULL;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	67da      	str	r2, [r3, #124]	; 0x7c
                    }
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d113      	bne.n	800b77a <xTCPSocketCheck+0xba>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d804      	bhi.n	800b766 <xTCPSocketCheck+0xa6>
                ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN ) )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800b762:	2b02      	cmp	r3, #2
 800b764:	d102      	bne.n	800b76c <xTCPSocketCheck+0xac>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f80e 	bl	800b788 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f001 f85b 	bl	800c828 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
                {
                    /* In all (non-connected) states in which keep-alive messages can not be sent
                     * the anti-hang protocol will close sockets that are 'hanging'. */
                    xResult = prvTCPStatusAgeCheck( pxSocket );
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff ff4c 	bl	800b610 <prvTCPStatusAgeCheck>
 800b778:	60f8      	str	r0, [r7, #12]
                }
            #endif
        }

        return xResult;
 800b77a:	68fb      	ldr	r3, [r7, #12]
    }
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	2000bce4 	.word	0x2000bce4

0800b788 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    static int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 800b788:	b580      	push	{r7, lr}
 800b78a:	b088      	sub	sp, #32
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 800b790:	2300      	movs	r3, #0
 800b792:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 800b794:	2300      	movs	r3, #0
 800b796:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d010      	beq.n	800b7c4 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60bb      	str	r3, [r7, #8]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800b7a6:	f107 0308 	add.w	r3, r7, #8
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f853 	bl	800b858 <prvTCPSendRepeated>
 800b7b2:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d049      	beq.n	800b84e <prvTCPSendPacket+0xc6>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f004 fbeb 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
 800b7c2:	e044      	b.n	800b84e <prvTCPSendPacket+0xc6>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d904      	bls.n	800b7d8 <prvTCPSendPacket+0x50>
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
                                         pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800b7ce:	2108      	movs	r1, #8
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fd7b 	bl	800c2cc <vTCPStateChange>
 800b7d6:	e03a      	b.n	800b84e <prvTCPSendPacket+0xc6>
            }
            else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7de:	f003 0308 	and.w	r3, r3, #8
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d105      	bne.n	800b7f4 <prvTCPSendPacket+0x6c>
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fa6d 	bl	800bcc8 <prvTCPPrepareConnect>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d12c      	bne.n	800b84e <prvTCPSendPacket+0xc6>
            {
                ProtocolHeaders_t * pxProtocolHeaders;
                const UBaseType_t uxHeaderSize = ipSIZE_OF_IPv4_HEADER;
 800b7f4:	2314      	movs	r3, #20
 800b7f6:	617b      	str	r3, [r7, #20]

                /* Or else, if the connection has been prepared, or can be prepared
                 * now, proceed to send the packet with the SYN flag.
                 * prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
                 * the Ethernet address of the peer or the gateway is found. */
                pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxHeaderSize ] ) );
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	330e      	adds	r3, #14
 800b7fc:	3380      	adds	r3, #128	; 0x80
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	3302      	adds	r3, #2
 800b804:	4618      	mov	r0, r3
 800b806:	f7ff fe7f 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800b80a:	6138      	str	r0, [r7, #16]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fce5 	bl	800c1e0 <prvSetSynAckOptions>
 800b816:	60f8      	str	r0, [r7, #12]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	3328      	adds	r3, #40	; 0x28
 800b81c:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	b2db      	uxtb	r3, r3
 800b826:	3314      	adds	r3, #20
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b838:	3301      	adds	r3, #1
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800b842:	69fa      	ldr	r2, [r7, #28]
 800b844:	2300      	movs	r3, #0
 800b846:	2100      	movs	r1, #0
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f835 	bl	800b8b8 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800b84e:	69fb      	ldr	r3, [r7, #28]
    }
 800b850:	4618      	mov	r0, r3
 800b852:	3720      	adds	r7, #32
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                       NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 800b866:	2300      	movs	r3, #0
 800b868:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e019      	b.n	800b8a4 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fe71 	bl	800c55c <prvTCPPrepareSend>
 800b87a:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	dd14      	ble.n	800b8ac <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	6819      	ldr	r1, [r3, #0]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	2301      	movs	r3, #1
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f814 	bl	800b8b8 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    *ppxNetworkBuffer = NULL;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]
                }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	4413      	add	r3, r2
 800b89c:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	2b07      	cmp	r3, #7
 800b8a8:	d9e2      	bls.n	800b870 <prvTCPSendRepeated+0x18>
 800b8aa:	e000      	b.n	800b8ae <prvTCPSendRepeated+0x56>
                break;
 800b8ac:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800b8ae:	693b      	ldr	r3, [r7, #16]
    }
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3718      	adds	r7, #24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <prvTCPReturnPacket>:
 */
    static void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                                    NetworkBufferDescriptor_t * pxDescriptor,
                                    uint32_t ulLen,
                                    BaseType_t xReleaseAfterSend )
    {
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b0a0      	sub	sp, #128	; 0x80
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        BaseType_t xDoRelease = xReleaseAfterSend;
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	67fb      	str	r3, [r7, #124]	; 0x7c
        EthernetHeader_t * pxEthernetHeader;
        uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
        const TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	66bb      	str	r3, [r7, #104]	; 0x68
        void * pvCopyDest;


        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 800b8ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10f      	bne.n	800b8f4 <prvTCPReturnPacket+0x3c>
        {
            pxNetworkBuffer = &xTempBuffer;
 800b8d4:	f107 0314 	add.w	r3, r7, #20
 800b8d8:	66bb      	str	r3, [r7, #104]	; 0x68

            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
 800b8da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8dc:	2200      	movs	r2, #0
 800b8de:	625a      	str	r2, [r3, #36]	; 0x24
                }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800b8e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8e8:	619a      	str	r2, [r3, #24]
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800b8ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8ec:	2246      	movs	r2, #70	; 0x46
 800b8ee:	61da      	str	r2, [r3, #28]
            xDoRelease = pdFALSE;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                if( xDoRelease == pdFALSE )
 800b8f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d108      	bne.n	800b90c <prvTCPReturnPacket+0x54>
                {
                    pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 800b8fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800b902:	f7fd fd17 	bl	8009334 <pxDuplicateNetworkBufferWithDescriptor>
 800b906:	66b8      	str	r0, [r7, #104]	; 0x68
                    if( pxNetworkBuffer == NULL )
                    {
                        FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
                    }

                    xDoRelease = pdTRUE;
 800b908:	2301      	movs	r3, #1
 800b90a:	67fb      	str	r3, [r7, #124]	; 0x7c
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL )
 800b90c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f000 81a9 	beq.w	800bc66 <prvTCPReturnPacket+0x3ae>
        #endif
        {
            /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800b914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff fddf 	bl	800b4dc <vCastPointerTo_TCPPacket_t>
 800b91e:	6638      	str	r0, [r7, #96]	; 0x60
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800b920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b922:	330e      	adds	r3, #14
 800b924:	65fb      	str	r3, [r7, #92]	; 0x5c
            pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800b926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b928:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f000 80ea 	beq.w	800bb06 <prvTCPReturnPacket+0x24e>
            {
                /* Calculate the space in the RX buffer in order to advertise the
                 * size of this socket's reception window. */
                pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	33d8      	adds	r3, #216	; 0xd8
 800b936:	653b      	str	r3, [r7, #80]	; 0x50

                if( pxSocket->u.xTCP.rxStream != NULL )
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d006      	beq.n	800b94e <prvTCPReturnPacket+0x96>
                {
                    /* An RX stream was created already, see how much space is
                     * available. */
                    ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff fd6e 	bl	800b426 <uxStreamBufferFrontSpace>
 800b94a:	67b8      	str	r0, [r7, #120]	; 0x78
 800b94c:	e002      	b.n	800b954 <prvTCPReturnPacket+0x9c>
                }
                else
                {
                    /* No RX stream has been created, the full stream size is
                     * available. */
                    ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b952:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Take the minimum of the RX buffer space and the RX window size. */
                ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 800b954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7ff fd02 	bl	800b364 <FreeRTOS_min_uint32>
 800b960:	6778      	str	r0, [r7, #116]	; 0x74

                if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b968:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d107      	bne.n	800b982 <prvTCPReturnPacket+0xca>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <prvTCPReturnPacket+0xce>
                {
                    /* The low-water mark was reached, meaning there was little
                     * space left.  The socket will wait until the application has read
                     * or flushed the incoming data, and 'zero-window' will be
                     * advertised. */
                    ulSpace = 0U;
 800b982:	2300      	movs	r3, #0
 800b984:	677b      	str	r3, [r7, #116]	; 0x74
                }

                /* If possible, advertise an RX window size of at least 1 MSS, otherwise
                 * the peer might start 'zero window probing', i.e. sending small packets
                 * (1, 2, 4, 8... bytes). */
                if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b98c:	461a      	mov	r2, r3
 800b98e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b990:	4293      	cmp	r3, r2
 800b992:	d20a      	bcs.n	800b9aa <prvTCPReturnPacket+0xf2>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b99a:	461a      	mov	r2, r3
 800b99c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d303      	bcc.n	800b9aa <prvTCPReturnPacket+0xf2>
                {
                    ulSpace = pxSocket->u.xTCP.usCurMSS;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b9a8:	677b      	str	r3, [r7, #116]	; 0x74
                }

                /* Avoid overflow of the 16-bit win field. */
                #if ( ipconfigUSE_TCP_WIN != 0 )
                    {
                        ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9b4:	40d3      	lsrs	r3, r2
 800b9b6:	66fb      	str	r3, [r7, #108]	; 0x6c
                    {
                        ulWinSize = ulSpace;
                    }
                #endif

                if( ulWinSize > 0xfffcUL )
 800b9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ba:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d902      	bls.n	800b9c8 <prvTCPReturnPacket+0x110>
                {
                    ulWinSize = 0xfffcUL;
 800b9c2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800b9c6:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800b9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	021b      	lsls	r3, r3, #8
 800b9ce:	b21a      	sxth	r2, r3
 800b9d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	0a1b      	lsrs	r3, r3, #8
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	b21b      	sxth	r3, r3
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	b21b      	sxth	r3, r3
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9e2:	861a      	strh	r2, [r3, #48]	; 0x30

                /* The new window size has been advertised, switch off the flag. */
                pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b9ea:	f36f 0300 	bfc	r3, #0, #1
 800b9ee:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Later on, when deciding to delay an ACK, a precise estimate is needed
                 * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
                 * highest sequence number minus 1 that the socket will accept. */
                pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800b9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f4:	691a      	ldr	r2, [r3, #16]
 800b9f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9f8:	441a      	add	r2, r3
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	645a      	str	r2, [r3, #68]	; 0x44

                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d02f      	beq.n	800ba6e <prvTCPReturnPacket+0x1b6>
                    {
                        /* Sending a keep-alive packet, send the current sequence number
                         * minus 1, which will be recognised as a keep-alive packet and
                         * responded to by acknowledging the last byte. */
                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ba14:	f36f 0341 	bfc	r3, #1, #1
 800ba18:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                        pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ba22:	f043 0304 	orr.w	r3, r3, #4
 800ba26:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                        pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ba30:	1e5a      	subs	r2, r3, #1
 800ba32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba34:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
                        pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800ba38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba3a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ba3e:	061a      	lsls	r2, r3, #24
 800ba40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba42:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ba46:	021b      	lsls	r3, r3, #8
 800ba48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba4c:	431a      	orrs	r2, r3
 800ba4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba50:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ba54:	0a1b      	lsrs	r3, r3, #8
 800ba56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba5e:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800ba62:	0e1b      	lsrs	r3, r3, #24
 800ba64:	431a      	orrs	r2, r3
 800ba66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba68:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800ba6c:	e034      	b.n	800bad8 <prvTCPReturnPacket+0x220>
                    }
                    else
                #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
                {
                    pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ba74:	061a      	lsls	r2, r3, #24
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ba7c:	021b      	lsls	r3, r3, #8
 800ba7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba82:	431a      	orrs	r2, r3
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ba8a:	0a1b      	lsrs	r3, r3, #8
 800ba8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba90:	431a      	orrs	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ba98:	0e1b      	lsrs	r3, r3, #24
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba9e:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

                    if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800baa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baa4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800baa8:	f003 0301 	and.w	r3, r3, #1
 800baac:	2b00      	cmp	r3, #0
 800baae:	d013      	beq.n	800bad8 <prvTCPReturnPacket+0x220>
                    {
                        /* Suppress FIN in case this packet carries earlier data to be
                         * retransmitted. */
                        uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	3b28      	subs	r3, #40	; 0x28
 800bab4:	64fb      	str	r3, [r7, #76]	; 0x4c

                        if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800bab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800babc:	441a      	add	r2, r3
 800babe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d008      	beq.n	800bad8 <prvTCPReturnPacket+0x220>
                        {
                            pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 800bac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bac8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bacc:	f023 0301 	bic.w	r3, r3, #1
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bad4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                        }
                    }
                }

                /* Tell which sequence number is expected next time */
                pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800bad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	061a      	lsls	r2, r3, #24
 800bade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	021b      	lsls	r3, r3, #8
 800bae4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bae8:	431a      	orrs	r2, r3
 800baea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	0a1b      	lsrs	r3, r3, #8
 800baf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800baf4:	431a      	orrs	r2, r3
 800baf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	0e1b      	lsrs	r3, r3, #24
 800bafc:	431a      	orrs	r2, r3
 800bafe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb00:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800bb04:	e00d      	b.n	800bb22 <prvTCPReturnPacket+0x26a>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800bb06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb08:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800bb0c:	657b      	str	r3, [r7, #84]	; 0x54
 800bb0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb10:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800bb14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb16:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800bb1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb1e:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800bb22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb24:	2280      	movs	r2, #128	; 0x80
 800bb26:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	021b      	lsls	r3, r3, #8
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	0a1b      	lsrs	r3, r3, #8
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	4313      	orrs	r3, r2
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb3c:	805a      	strh	r2, [r3, #2]

            if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d003      	beq.n	800bb4c <prvTCPReturnPacket+0x294>
 800bb44:	4b4a      	ldr	r3, [pc, #296]	; (800bc70 <prvTCPReturnPacket+0x3b8>)
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d103      	bne.n	800bb54 <prvTCPReturnPacket+0x29c>
            {
                /* When pxSocket is NULL, this function is called by prvTCPSendReset()
                * and the IP-addresses must be swapped.
                * Also swap the IP-addresses in case the IP-tack doesn't have an
                * IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ). */
                ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800bb4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	673b      	str	r3, [r7, #112]	; 0x70
 800bb52:	e002      	b.n	800bb5a <prvTCPReturnPacket+0x2a2>
            }
            else
            {
                ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800bb54:	4b46      	ldr	r3, [pc, #280]	; (800bc70 <prvTCPReturnPacket+0x3b8>)
 800bb56:	695b      	ldr	r3, [r3, #20]
 800bb58:	673b      	str	r3, [r7, #112]	; 0x70
            }

            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800bb5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb5c:	68da      	ldr	r2, [r3, #12]
 800bb5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb60:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800bb62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bb66:	60da      	str	r2, [r3, #12]
            vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800bb68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb6a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bb6e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800bb72:	021b      	lsls	r3, r3, #8
 800bb74:	4313      	orrs	r3, r2
 800bb76:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bb7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb82:	845a      	strh	r2, [r3, #34]	; 0x22
 800bb84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb86:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800bb8a:	849a      	strh	r2, [r3, #36]	; 0x24

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800bb8c:	4b39      	ldr	r3, [pc, #228]	; (800bc74 <prvTCPReturnPacket+0x3bc>)
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	021b      	lsls	r3, r3, #8
 800bb92:	b21a      	sxth	r2, r3
 800bb94:	4b37      	ldr	r3, [pc, #220]	; (800bc74 <prvTCPReturnPacket+0x3bc>)
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	0a1b      	lsrs	r3, r3, #8
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	b21b      	sxth	r3, r3
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	b21b      	sxth	r3, r3
 800bba2:	b29a      	uxth	r2, r3
 800bba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bba6:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800bba8:	4b32      	ldr	r3, [pc, #200]	; (800bc74 <prvTCPReturnPacket+0x3bc>)
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	3301      	adds	r3, #1
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	4b30      	ldr	r3, [pc, #192]	; (800bc74 <prvTCPReturnPacket+0x3bc>)
 800bbb2:	801a      	strh	r2, [r3, #0]
            pxIPHeader->usFragmentOffset = 0U;
 800bbb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	719a      	strb	r2, [r3, #6]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	71da      	strb	r2, [r3, #7]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f103 020e 	add.w	r2, r3, #14
 800bbc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbc6:	61da      	str	r2, [r3, #28]
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
 800bbc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbca:	2200      	movs	r2, #0
 800bbcc:	625a      	str	r2, [r3, #36]	; 0x24
                }
            #endif

            /* Fill in the destination MAC addresses. */
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800bbce:	6db8      	ldr	r0, [r7, #88]	; 0x58
                             ( const void * ) ( &( pxEthernetHeader->xSourceAddress ) ),
 800bbd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbd2:	3306      	adds	r3, #6
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800bbd4:	2206      	movs	r2, #6
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	f004 fa63 	bl	80100a2 <memcpy>
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            /* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
            pvCopySource = ipLOCAL_MAC_ADDRESS;
 800bbdc:	4b24      	ldr	r3, [pc, #144]	; (800bc70 <prvTCPReturnPacket+0x3b8>)
 800bbde:	647b      	str	r3, [r7, #68]	; 0x44
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800bbe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbe2:	3306      	adds	r3, #6
 800bbe4:	643b      	str	r3, [r7, #64]	; 0x40
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800bbe6:	2206      	movs	r2, #6
 800bbe8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bbec:	f004 fa59 	bl	80100a2 <memcpy>

            #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800bbf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbf2:	69db      	ldr	r3, [r3, #28]
 800bbf4:	2b3b      	cmp	r3, #59	; 0x3b
 800bbf6:	d812      	bhi.n	800bc1e <prvTCPReturnPacket+0x366>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800bbf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbfa:	69db      	ldr	r3, [r3, #28]
 800bbfc:	667b      	str	r3, [r7, #100]	; 0x64
 800bbfe:	e008      	b.n	800bc12 <prvTCPReturnPacket+0x35a>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800bc00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc02:	699a      	ldr	r2, [r3, #24]
 800bc04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc06:	4413      	add	r3, r2
 800bc08:	2200      	movs	r2, #0
 800bc0a:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800bc0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc0e:	3301      	adds	r3, #1
 800bc10:	667b      	str	r3, [r7, #100]	; 0x64
 800bc12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc14:	2b3b      	cmp	r3, #59	; 0x3b
 800bc16:	ddf3      	ble.n	800bc00 <prvTCPReturnPacket+0x348>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800bc18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc1a:	223c      	movs	r2, #60	; 0x3c
 800bc1c:	61da      	str	r2, [r3, #28]
                }
            #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 800bc1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc20:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800bc22:	f003 fba5 	bl	800f370 <xNetworkInterfaceOutput>

            if( xDoRelease == pdFALSE )
 800bc26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d11c      	bne.n	800bc66 <prvTCPReturnPacket+0x3ae>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800bc2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc2e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bc32:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800bc36:	021b      	lsls	r3, r3, #8
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bc3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc44:	845a      	strh	r2, [r3, #34]	; 0x22
 800bc46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc48:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800bc4a:	849a      	strh	r2, [r3, #36]	; 0x24
                pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800bc4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc4e:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800bc52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc54:	f8c3 201a 	str.w	r2, [r3, #26]
                ( void ) memcpy( ( void * ) ( pxEthernetHeader->xSourceAddress.ucBytes ), ( const void * ) ( pxEthernetHeader->xDestinationAddress.ucBytes ), ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800bc58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc5a:	3306      	adds	r3, #6
 800bc5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc5e:	2206      	movs	r2, #6
 800bc60:	4618      	mov	r0, r3
 800bc62:	f004 fa1e 	bl	80100a2 <memcpy>
            else
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    }
 800bc66:	bf00      	nop
 800bc68:	3780      	adds	r7, #128	; 0x80
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20000014 	.word	0x20000014
 800bc74:	2000bc58 	.word	0x2000bc58

0800bc78 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    static void prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 800bc78:	b5b0      	push	{r4, r5, r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af02      	add	r7, sp, #8
 800bc7e:	6078      	str	r0, [r7, #4]
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        vTCPWindowCreate(
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
            &pxSocket->u.xTCP.xTCPWindow,
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800bc8c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800bc90:	fb02 f103 	mul.w	r1, r2, r3
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bc9a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800bc9e:	fb02 f403 	mul.w	r4, r2, r3
        vTCPWindowCreate(
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 50e8 	ldr.w	r5, [r3, #232]	; 0xe8
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
        vTCPWindowCreate(
 800bcb4:	9201      	str	r2, [sp, #4]
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	462b      	mov	r3, r5
 800bcba:	4622      	mov	r2, r4
 800bcbc:	f002 fa50 	bl	800e160 <vTCPWindowCreate>
    }
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bdb0      	pop	{r4, r5, r7, pc}

0800bcc8 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08c      	sub	sp, #48	; 0x30
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        eARPLookupResult_t eReturned;
        uint32_t ulRemoteIP;
        MACAddress_t xEthAddress;
        BaseType_t xReturn = pdTRUE;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulInitialSequenceNumber = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	62bb      	str	r3, [r7, #40]	; 0x28

        #if ( ipconfigHAS_PRINTF != 0 )
            {
                /* Only necessary for nicer logging. */
                ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 800bcd8:	f107 030c 	add.w	r3, r7, #12
 800bcdc:	2206      	movs	r2, #6
 800bcde:	2100      	movs	r1, #0
 800bce0:	4618      	mov	r0, r3
 800bce2:	f004 fa02 	bl	80100ea <memset>
            }
        #endif /* ipconfigHAS_PRINTF != 0 */

        ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcea:	061a      	lsls	r2, r3, #24
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf0:	021b      	lsls	r3, r3, #8
 800bcf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfc:	0a1b      	lsrs	r3, r3, #8
 800bcfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd02:	431a      	orrs	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd08:	0e1b      	lsrs	r3, r3, #24
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	617b      	str	r3, [r7, #20]

        /* Determine the ARP cache status for the requested IP address. */
        eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800bd0e:	f107 020c 	add.w	r2, r7, #12
 800bd12:	f107 0314 	add.w	r3, r7, #20
 800bd16:	4611      	mov	r1, r2
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fb ff09 	bl	8007b30 <eARPGetCacheEntry>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        switch( eReturned )
 800bd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d00e      	beq.n	800bd4a <prvTCPPrepareConnect+0x82>

            case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
            case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
            default:
                /* Count the number of times it could not find the ARP address. */
                pxSocket->u.xTCP.ucRepCount++;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd32:	3301      	adds	r3, #1
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
                                         xEthAddress.ucBytes[ 3 ],
                                         xEthAddress.ucBytes[ 4 ],
                                         xEthAddress.ucBytes[ 5 ] ) );

                /* And issue a (new) ARP request */
                FreeRTOS_OutputARPRequest( ulRemoteIP );
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fc f83e 	bl	8007dc0 <FreeRTOS_OutputARPRequest>
                xReturn = pdFALSE;
 800bd44:	2300      	movs	r3, #0
 800bd46:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800bd48:	e000      	b.n	800bd4c <prvTCPPrepareConnect+0x84>
                break;            /* We can now prepare the SYN packet. */
 800bd4a:	bf00      	nop
        }

        if( xReturn != pdFALSE )
 800bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00f      	beq.n	800bd72 <prvTCPPrepareConnect+0xaa>
        {
            /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
            ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800bd52:	4b53      	ldr	r3, [pc, #332]	; (800bea0 <prvTCPPrepareConnect+0x1d8>)
 800bd54:	6958      	ldr	r0, [r3, #20]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bd62:	f7f4 fe59 	bl	8000a18 <ulApplicationGetNextSequenceNumber>
 800bd66:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                          pxSocket->usLocalPort,
                                                                          pxSocket->u.xTCP.ulRemoteIP,
                                                                          pxSocket->u.xTCP.usRemotePort );

            /* Check for a random number generation error. */
            if( ulInitialSequenceNumber == 0UL )
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <prvTCPPrepareConnect+0xaa>
            {
                xReturn = pdFALSE;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        if( xReturn != pdFALSE )
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 808d 	beq.w	800be94 <prvTCPPrepareConnect+0x1cc>
            uint16_t usLength;

            /* The MAC-address of the peer (or gateway) has been found,
             * now prepare the initial TCP packet and some fields in the socket. Map
             * the buffer onto the TCPPacket_t struct to easily access it's field. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	3382      	adds	r3, #130	; 0x82
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7ff fbac 	bl	800b4dc <vCastPointerTo_TCPPacket_t>
 800bd84:	6238      	str	r0, [r7, #32]
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	330e      	adds	r3, #14
 800bd8a:	61fb      	str	r3, [r7, #28]

            /* reset the retry counter to zero. */
            pxSocket->u.xTCP.ucRepCount = 0U;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

            /* And remember that the connect/SYN data are prepared. */
            pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bd9a:	f043 0308 	orr.w	r3, r3, #8
 800bd9e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

            /* Now that the Ethernet address is known, the initial packet can be
             * prepared. */
            ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	3382      	adds	r3, #130	; 0x82
 800bda6:	2246      	movs	r2, #70	; 0x46
 800bda8:	2100      	movs	r1, #0
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f004 f99d 	bl	80100ea <memset>

            /* Write the Ethernet address in Source, because it will be swapped by
             * prvTCPReturnPacket(). */
            ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	3306      	adds	r3, #6
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	f107 030c 	add.w	r3, r7, #12
 800bdba:	6818      	ldr	r0, [r3, #0]
 800bdbc:	6010      	str	r0, [r2, #0]
 800bdbe:	889b      	ldrh	r3, [r3, #4]
 800bdc0:	8093      	strh	r3, [r2, #4]

            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800bdc2:	6a3b      	ldr	r3, [r7, #32]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f042 0208 	orr.w	r2, r2, #8
 800bdca:	731a      	strb	r2, [r3, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionHeaderLength = 0x45U;
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	2245      	movs	r2, #69	; 0x45
 800bdd4:	701a      	strb	r2, [r3, #0]
            usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800bdd6:	2338      	movs	r3, #56	; 0x38
 800bdd8:	837b      	strh	r3, [r7, #26]
            pxIPHeader->usLength = FreeRTOS_htons( usLength );
 800bdda:	8b7b      	ldrh	r3, [r7, #26]
 800bddc:	021b      	lsls	r3, r3, #8
 800bdde:	b21a      	sxth	r2, r3
 800bde0:	8b7b      	ldrh	r3, [r7, #26]
 800bde2:	0a1b      	lsrs	r3, r3, #8
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	b21b      	sxth	r3, r3
 800bde8:	4313      	orrs	r3, r2
 800bdea:	b21b      	sxth	r3, r3
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	2280      	movs	r2, #128	; 0x80
 800bdf6:	721a      	strb	r2, [r3, #8]

            pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	2206      	movs	r2, #6
 800bdfc:	725a      	strb	r2, [r3, #9]

            /* Addresses and ports will be stored swapped because prvTCPReturnPacket
             * will swap them back while replying. */
            pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800bdfe:	4b28      	ldr	r3, [pc, #160]	; (800bea0 <prvTCPPrepareConnect+0x1d8>)
 800be00:	695a      	ldr	r2, [r3, #20]
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0a:	061a      	lsls	r2, r3, #24
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be10:	021b      	lsls	r3, r3, #8
 800be12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be16:	431a      	orrs	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1c:	0a1b      	lsrs	r3, r3, #8
 800be1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be22:	431a      	orrs	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be28:	0e1b      	lsrs	r3, r3, #24
 800be2a:	431a      	orrs	r2, r3
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	60da      	str	r2, [r3, #12]

            pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800be34:	021b      	lsls	r3, r3, #8
 800be36:	b21a      	sxth	r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800be3c:	0a1b      	lsrs	r3, r3, #8
 800be3e:	b29b      	uxth	r3, r3
 800be40:	b21b      	sxth	r3, r3
 800be42:	4313      	orrs	r3, r2
 800be44:	b21b      	sxth	r3, r3
 800be46:	b29a      	uxth	r2, r3
 800be48:	6a3b      	ldr	r3, [r7, #32]
 800be4a:	845a      	strh	r2, [r3, #34]	; 0x22
            pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be50:	021b      	lsls	r3, r3, #8
 800be52:	b21a      	sxth	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be58:	0a1b      	lsrs	r3, r3, #8
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	b21b      	sxth	r3, r3
 800be5e:	4313      	orrs	r3, r2
 800be60:	b21b      	sxth	r3, r3
 800be62:	b29a      	uxth	r2, r3
 800be64:	6a3b      	ldr	r3, [r7, #32]
 800be66:	849a      	strh	r2, [r3, #36]	; 0x24

            /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
             * isn't known yet. */
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

            /* Start with ISN (Initial Sequence Number). */
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be74:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
             * the high nibble of the TCP offset field. */
            pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	2250      	movs	r2, #80	; 0x50
 800be7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Only set the SYN flag. */
            pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	2202      	movs	r2, #2
 800be84:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

            /* Set the values of usInitMSS / usCurMSS for this socket. */
            prvSocketSetMSS( pxSocket );
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f001 fb75 	bl	800d578 <prvSocketSetMSS>

            /* The initial sequence numbers at our side are known.  Later
             * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
             * first wait for a SYN+ACK reply. */
            prvTCPCreateWindow( pxSocket );
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff fef2 	bl	800bc78 <prvTCPCreateWindow>
        }

        return xReturn;
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800be96:	4618      	mov	r0, r3
 800be98:	3730      	adds	r7, #48	; 0x30
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20000014 	.word	0x20000014

0800bea4 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    _static void prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                  const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b08c      	sub	sp, #48	; 0x30
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer );
 800beae:	2322      	movs	r3, #34	; 0x22
 800beb0:	623b      	str	r3, [r7, #32]
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	699a      	ldr	r2, [r3, #24]
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	4413      	add	r3, r2
 800beba:	4618      	mov	r0, r3
 800bebc:	f7ff fb24 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800bec0:	61f8      	str	r0, [r7, #28]
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ( sizeof( TCPHeader_t ) - sizeof( pxTCPHeader->ucOptdata ) );
 800bec2:	6a3b      	ldr	r3, [r7, #32]
 800bec4:	3314      	adds	r3, #20
 800bec6:	61bb      	str	r3, [r7, #24]
        size_t uxOptionsLength;
        size_t uxResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	617b      	str	r3, [r7, #20]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	3314      	adds	r3, #20
 800bed0:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	7b1b      	ldrb	r3, [r3, #12]
 800bed6:	2b50      	cmp	r3, #80	; 0x50
 800bed8:	d93e      	bls.n	800bf58 <prvCheckOptions+0xb4>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	7b1b      	ldrb	r3, [r3, #12]
 800bede:	091b      	lsrs	r3, r3, #4
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	3b05      	subs	r3, #5
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	74fb      	strb	r3, [r7, #19]
            uxOptionsLength = ( size_t ) ucLength;
 800beea:	7cfb      	ldrb	r3, [r7, #19]
 800beec:	627b      	str	r3, [r7, #36]	; 0x24

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	69ba      	ldr	r2, [r7, #24]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d22f      	bcs.n	800bf58 <prvCheckOptions+0xb4>
            {
                /* Validate options size calculation. */
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d22a      	bcs.n	800bf58 <prvCheckOptions+0xb4>
                    ( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	69da      	ldr	r2, [r3, #28]
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	1ad3      	subs	r3, r2, r3
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800bf0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d823      	bhi.n	800bf58 <prvCheckOptions+0xb4>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	7b5b      	ldrb	r3, [r3, #13]
 800bf14:	f003 0302 	and.w	r3, r3, #2
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <prvCheckOptions+0x7e>
                    {
                        xHasSYNFlag = pdTRUE;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf20:	e001      	b.n	800bf26 <prvCheckOptions+0x82>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 800bf22:	2300      	movs	r3, #0
 800bf24:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d012      	beq.n	800bf52 <prvCheckOptions+0xae>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        uxResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf34:	f000 f814 	bl	800bf60 <prvSingleStepTCPHeaderOptions>
 800bf38:	60f8      	str	r0, [r7, #12]

                        if( uxResult == 0UL )
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00a      	beq.n	800bf56 <prvCheckOptions+0xb2>
                        {
                            break;
                        }

                        uxOptionsLength -= uxResult;
 800bf40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	627b      	str	r3, [r7, #36]	; 0x24
                        pucPtr = &( pucPtr[ uxResult ] );
 800bf48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if( uxOptionsLength == 0U )
 800bf50:	e7e9      	b.n	800bf26 <prvCheckOptions+0x82>
                            break;
 800bf52:	bf00      	nop
 800bf54:	e000      	b.n	800bf58 <prvCheckOptions+0xb4>
                            break;
 800bf56:	bf00      	nop
                    }
                }
            }
        }
    }
 800bf58:	bf00      	nop
 800bf5a:	3730      	adds	r7, #48	; 0x30
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <prvSingleStepTCPHeaderOptions>:
 */
    _static size_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08a      	sub	sp, #40	; 0x28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	61bb      	str	r3, [r7, #24]
        uint8_t ucLen;
        size_t uxIndex;
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	33d8      	adds	r3, #216	; 0xd8
 800bf76:	617b      	str	r3, [r7, #20]
        BaseType_t xReturn = pdFALSE;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61fb      	str	r3, [r7, #28]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d102      	bne.n	800bf8a <prvSingleStepTCPHeaderOptions+0x2a>
        {
            /* End of options. */
            uxIndex = 0U;
 800bf84:	2300      	movs	r3, #0
 800bf86:	623b      	str	r3, [r7, #32]
 800bf88:	e0c1      	b.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d102      	bne.n	800bf98 <prvSingleStepTCPHeaderOptions+0x38>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            uxIndex = 1U;
 800bf92:	2301      	movs	r3, #1
 800bf94:	623b      	str	r3, [r7, #32]
 800bf96:	e0ba      	b.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
        }
        else if( uxRemainingOptionsBytes < 2U )
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d802      	bhi.n	800bfa4 <prvSingleStepTCPHeaderOptions+0x44>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            uxIndex = 0U;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	623b      	str	r3, [r7, #32]
 800bfa2:	e0b4      	b.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	2b03      	cmp	r3, #3
 800bfaa:	d11c      	bne.n	800bfe6 <prvSingleStepTCPHeaderOptions+0x86>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d904      	bls.n	800bfbc <prvSingleStepTCPHeaderOptions+0x5c>
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d002      	beq.n	800bfc2 <prvSingleStepTCPHeaderOptions+0x62>
                {
                    uxIndex = 0U;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	623b      	str	r3, [r7, #32]
 800bfc0:	e0a5      	b.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00b      	beq.n	800bfe0 <prvSingleStepTCPHeaderOptions+0x80>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	789a      	ldrb	r2, [r3, #2]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800bfd8:	f043 0310 	orr.w	r3, r3, #16
 800bfdc:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                    }

                    uxIndex = tcpTCP_OPT_WSOPT_LEN;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	623b      	str	r3, [r7, #32]
 800bfe4:	e093      	b.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d15d      	bne.n	800c0aa <prvSingleStepTCPHeaderOptions+0x14a>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	2b03      	cmp	r3, #3
 800bff2:	d904      	bls.n	800bffe <prvSingleStepTCPHeaderOptions+0x9e>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	3301      	adds	r3, #1
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	2b04      	cmp	r3, #4
 800bffc:	d002      	beq.n	800c004 <prvSingleStepTCPHeaderOptions+0xa4>
            {
                uxIndex = 0U;
 800bffe:	2300      	movs	r3, #0
 800c000:	623b      	str	r3, [r7, #32]
 800c002:	e084      	b.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3302      	adds	r3, #2
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff fab9 	bl	800b580 <usChar2u16>
 800c00e:	4603      	mov	r3, r0
 800c010:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c018:	461a      	mov	r2, r3
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d006      	beq.n	800c02e <prvSingleStepTCPHeaderOptions+0xce>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d103      	bne.n	800c02e <prvSingleStepTCPHeaderOptions+0xce>
                    {
                        uxIndex = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	623b      	str	r3, [r7, #32]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 800c02a:	2301      	movs	r3, #1
 800c02c:	61fb      	str	r3, [r7, #28]
                        FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d16c      	bne.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
                {
                    if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c03a:	461a      	mov	r2, r3
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	4293      	cmp	r3, r2
 800c040:	d230      	bcs.n	800c0a4 <prvSingleStepTCPHeaderOptions+0x144>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c048:	f043 0301 	orr.w	r3, r3, #1
 800c04c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                        if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c056:	461a      	mov	r2, r3
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d204      	bcs.n	800c068 <prvSingleStepTCPHeaderOptions+0x108>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	b29a      	uxth	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c072:	693a      	ldr	r2, [r7, #16]
 800c074:	fb02 f203 	mul.w	r2, r2, r3
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	b29a      	uxth	r2, r3
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	b29a      	uxth	r2, r3
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	b29a      	uxth	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                    }

                    uxIndex = tcpTCP_OPT_MSS_LEN;
 800c0a4:	2304      	movs	r3, #4
 800c0a6:	623b      	str	r3, [r7, #32]
 800c0a8:	e031      	b.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	785b      	ldrb	r3, [r3, #1]
 800c0ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            uxIndex = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	623b      	str	r3, [r7, #32]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 800c0b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d927      	bls.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
 800c0be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d322      	bcc.n	800c10e <prvSingleStepTCPHeaderOptions+0x1ae>
                    {
                        /* Selective ACK: the peer has received a packet but it is missing
                         * earlier packets. At least this packet does not need retransmission
                         * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                         */
                        if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	2b05      	cmp	r3, #5
 800c0ce:	d119      	bne.n	800c104 <prvSingleStepTCPHeaderOptions+0x1a4>
                        {
                            ucLen -= 2U;
 800c0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0d4:	3b02      	subs	r3, #2
 800c0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            uxIndex += 2U;
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	3302      	adds	r3, #2
 800c0de:	623b      	str	r3, [r7, #32]

                            while( ucLen >= ( uint8_t ) 8U )
 800c0e0:	e00c      	b.n	800c0fc <prvSingleStepTCPHeaderOptions+0x19c>
                            {
                                prvReadSackOption( pucPtr, uxIndex, pxSocket );
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	6a39      	ldr	r1, [r7, #32]
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f000 f816 	bl	800c118 <prvReadSackOption>
                                uxIndex += 8U;
 800c0ec:	6a3b      	ldr	r3, [r7, #32]
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	623b      	str	r3, [r7, #32]
                                ucLen -= 8U;
 800c0f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0f6:	3b08      	subs	r3, #8
 800c0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            while( ucLen >= ( uint8_t ) 8U )
 800c0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c100:	2b07      	cmp	r3, #7
 800c102:	d8ee      	bhi.n	800c0e2 <prvSingleStepTCPHeaderOptions+0x182>
                            /* ucLen should be 0 by now. */
                        }
                    }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                uxIndex += ( size_t ) ucLen;
 800c104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c108:	6a3a      	ldr	r2, [r7, #32]
 800c10a:	4413      	add	r3, r2
 800c10c:	623b      	str	r3, [r7, #32]
            }
        }
        return uxIndex;
 800c10e:	6a3b      	ldr	r3, [r7, #32]
    }
 800c110:	4618      	mov	r0, r3
 800c112:	3728      	adds	r7, #40	; 0x28
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <prvReadSackOption>:
 * @param[in] pxSocket: Socket handling the TCP connection.
 */
        _static void prvReadSackOption( const uint8_t * const pucPtr,
                                        size_t uxIndex,
                                        FreeRTOS_Socket_t * const pxSocket )
        {
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08a      	sub	sp, #40	; 0x28
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	4413      	add	r3, r2
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7ff fa0d 	bl	800b54a <ulChar2u32>
 800c130:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	3304      	adds	r3, #4
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	4413      	add	r3, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff fa05 	bl	800b54a <ulChar2u32>
 800c140:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	33d8      	adds	r3, #216	; 0xd8
 800c146:	69ba      	ldr	r2, [r7, #24]
 800c148:	69f9      	ldr	r1, [r7, #28]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f002 fd5e 	bl	800ec0c <ulTCPWindowTxSack>
 800c150:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c156:	2b00      	cmp	r3, #0
 800c158:	d01d      	beq.n	800c196 <prvReadSackOption+0x7e>
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d01a      	beq.n	800c196 <prvReadSackOption+0x7e>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c164:	2300      	movs	r3, #0
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	2200      	movs	r2, #0
 800c16c:	2100      	movs	r1, #0
 800c16e:	f7ff f875 	bl	800b25c <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f043 0202 	orr.w	r2, r3, #2
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c182:	f003 0302 	and.w	r3, r3, #2
 800c186:	2b00      	cmp	r3, #0
 800c188:	d005      	beq.n	800c196 <prvReadSackOption+0x7e>
                        {
                            /* The field 'xEventBits' is used to store regular socket events
                             * (at most 8), as well as 'select events', which will be left-shifted.
                             */
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	601a      	str	r2, [r3, #0]
                            pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
                        }
                    }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 800c196:	bf00      	nop
 800c198:	3720      	adds	r7, #32
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <prvWinScaleFactor>:
 * @param[in] pxSocket: The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 800c19e:	b480      	push	{r7}
 800c1a0:	b085      	sub	sp, #20
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800c1b2:	fb02 f303 	mul.w	r3, r2, r3
 800c1b6:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffUL )
 800c1bc:	e005      	b.n	800c1ca <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	085b      	lsrs	r3, r3, #1
 800c1c2:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 800c1c4:	7afb      	ldrb	r3, [r7, #11]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffUL )
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1d0:	d2f5      	bcs.n	800c1be <prvWinScaleFactor+0x20>
            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     ( unsigned ) pxSocket->u.xTCP.usInitMSS,
                                     ucFactor ) );

            return ucFactor;
 800c1d2:	7afb      	ldrb	r3, [r7, #11]
        }
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3714      	adds	r7, #20
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                            TCPHeader_t * pxTCPHeader )
    {
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c1f0:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2204      	movs	r2, #4
 800c1fc:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800c1fe:	89fb      	ldrh	r3, [r7, #14]
 800c200:	0a1b      	lsrs	r3, r3, #8
 800c202:	b29b      	uxth	r3, r3
 800c204:	b2da      	uxtb	r2, r3
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 800c20a:	89fb      	ldrh	r3, [r7, #14]
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff ffc3 	bl	800c19e <prvWinScaleFactor>
 800c218:	4603      	mov	r3, r0
 800c21a:	461a      	mov	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

                pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2201      	movs	r2, #1
 800c226:	761a      	strb	r2, [r3, #24]
                pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2203      	movs	r2, #3
 800c22c:	765a      	strb	r2, [r3, #25]
                pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2203      	movs	r2, #3
 800c232:	769a      	strb	r2, [r3, #26]
                pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	76da      	strb	r2, [r3, #27]
                uxOptionsLength = 8U;
 800c23e:	2308      	movs	r3, #8
 800c240:	60bb      	str	r3, [r7, #8]
            }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	4413      	add	r3, r2
 800c248:	3314      	adds	r3, #20
 800c24a:	2201      	movs	r2, #1
 800c24c:	701a      	strb	r2, [r3, #0]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	3301      	adds	r3, #1
 800c252:	683a      	ldr	r2, [r7, #0]
 800c254:	4413      	add	r3, r2
 800c256:	2201      	movs	r2, #1
 800c258:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	3302      	adds	r3, #2
 800c25e:	683a      	ldr	r2, [r7, #0]
 800c260:	4413      	add	r3, r2
 800c262:	2204      	movs	r2, #4
 800c264:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	3303      	adds	r3, #3
 800c26a:	683a      	ldr	r2, [r7, #0]
 800c26c:	4413      	add	r3, r2
 800c26e:	2202      	movs	r2, #2
 800c270:	751a      	strb	r2, [r3, #20]
                uxOptionsLength += 4U;
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	3304      	adds	r3, #4
 800c276:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 800c278:	68bb      	ldr	r3, [r7, #8]
    }
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    static void prvTCPTouchSocket( FreeRTOS_Socket_t * pxSocket )
    {
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800c28a:	f7f9 fd4f 	bl	8005d2c <xTaskGetTickCount>
 800c28e:	4602      	mov	r2, r0
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	661a      	str	r2, [r3, #96]	; 0x60
            }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            {
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c29a:	f36f 0382 	bfc	r3, #2, #1
 800c29e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c2a8:	f36f 0341 	bfc	r3, #1, #1
 800c2ac:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800c2b8:	f7f9 fd38 	bl	8005d2c <xTaskGetTickCount>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	65da      	str	r2, [r3, #92]	; 0x5c
            }
        #endif

        ( void ) pxSocket;
    }
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <vTCPStateChange>:
 * @param[in] pxSocket: The socket whose state we are trying to change.
 * @param[in] eTCPState: The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = NULL;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	617b      	str	r3, [r7, #20]
        BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c2e2:	2b04      	cmp	r3, #4
 800c2e4:	d906      	bls.n	800c2f4 <vTCPStateChange+0x28>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c2ec:	2b08      	cmp	r3, #8
 800c2ee:	d001      	beq.n	800c2f4 <vTCPStateChange+0x28>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e000      	b.n	800c2f6 <vTCPStateChange+0x2a>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	613b      	str	r3, [r7, #16]
        BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800c2f8:	78fb      	ldrb	r3, [r7, #3]
 800c2fa:	2b04      	cmp	r3, #4
 800c2fc:	d904      	bls.n	800c308 <vTCPStateChange+0x3c>
 800c2fe:	78fb      	ldrb	r3, [r7, #3]
 800c300:	2b08      	cmp	r3, #8
 800c302:	d001      	beq.n	800c308 <vTCPStateChange+0x3c>
 800c304:	2301      	movs	r3, #1
 800c306:	e000      	b.n	800c30a <vTCPStateChange+0x3e>
 800c308:	2300      	movs	r3, #0
 800c30a:	60fb      	str	r3, [r7, #12]
        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
        #endif

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	429a      	cmp	r2, r3
 800c312:	f000 8082 	beq.w	800c41a <vTCPStateChange+0x14e>
        {
            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d05e      	beq.n	800c3da <vTCPStateChange+0x10e>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c322:	f003 0304 	and.w	r3, r3, #4
 800c326:	b2db      	uxtb	r3, r3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d043      	beq.n	800c3b4 <vTCPStateChange+0xe8>
                {
                    /* Now that it is connected, find it's parent. */
                    if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c332:	f003 0308 	and.w	r3, r3, #8
 800c336:	b2db      	uxtb	r3, r3
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <vTCPStateChange+0x76>
                    {
                        xParent = pxSocket;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	e00a      	b.n	800c358 <vTCPStateChange+0x8c>
                    }
                    else
                    {
                        xParent = pxSocket->u.xTCP.pxPeerSocket;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c346:	617b      	str	r3, [r7, #20]
                        configASSERT( xParent != NULL );
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d104      	bne.n	800c358 <vTCPStateChange+0x8c>
 800c34e:	494a      	ldr	r1, [pc, #296]	; (800c478 <vTCPStateChange+0x1ac>)
 800c350:	f240 60c4 	movw	r0, #1732	; 0x6c4
 800c354:	f7f4 fb9e 	bl	8000a94 <vAssertCalled>
                    }

                    if( xParent != NULL )
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d018      	beq.n	800c390 <vTCPStateChange+0xc4>
                    {
                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c362:	2b00      	cmp	r3, #0
 800c364:	d102      	bne.n	800c36c <vTCPStateChange+0xa0>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	655a      	str	r2, [r3, #84]	; 0x54
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f043 0204 	orr.w	r2, r3, #4
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                            {
                                /* Library support FreeRTOS_select().  Receiving a new
                                 * connection is being translated as a READ event. */
                                if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	d005      	beq.n	800c390 <vTCPStateChange+0xc4>
                                {
                                    xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	601a      	str	r2, [r3, #0]
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c39c:	f36f 0382 	bfc	r3, #2, #1
 800c3a0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c3aa:	f043 0302 	orr.w	r3, r3, #2
 800c3ae:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800c3b2:	e024      	b.n	800c3fe <vTCPStateChange+0x132>
                }
                else
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f043 0208 	orr.w	r2, r3, #8
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c4:	f003 0302 	and.w	r3, r3, #2
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d018      	beq.n	800c3fe <vTCPStateChange+0x132>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	e011      	b.n	800c3fe <vTCPStateChange+0x132>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting a semaphore. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f043 0220 	orr.w	r2, r3, #32
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ea:	f003 0304 	and.w	r3, r3, #4
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d005      	beq.n	800c3fe <vTCPStateChange+0x132>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	601a      	str	r2, [r3, #0]
                        xConnected = pxSocket;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff f8d1 	bl	800b5ac <prvTCPSocketIsActive>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d122      	bne.n	800c456 <vTCPStateChange+0x18a>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c418:	e01d      	b.n	800c456 <vTCPStateChange+0x18a>
            }
        }
        else
        {
            if( ( ( BaseType_t ) eTCPState ) == ( ( BaseType_t ) eCLOSED ) )
 800c41a:	78fb      	ldrb	r3, [r7, #3]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d11a      	bne.n	800c456 <vTCPStateChange+0x18a>
            {
                /* Socket goes to status eCLOSED because of a RST.
                 * When nobody owns the socket yet, delete it. */
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c426:	f003 0304 	and.w	r3, r3, #4
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d107      	bne.n	800c440 <vTCPStateChange+0x174>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c436:	f003 0302 	and.w	r3, r3, #2
 800c43a:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00a      	beq.n	800c456 <vTCPStateChange+0x18a>
                {
                    FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );

                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c446:	f003 0308 	and.w	r3, r3, #8
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d102      	bne.n	800c456 <vTCPStateChange+0x18a>
                    {
                        ( void ) FreeRTOS_closesocket( pxSocket );
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7fd ffa7 	bl	800a3a4 <FreeRTOS_closesocket>
                }
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	78fa      	ldrb	r2, [r7, #3]
 800c45a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7ff ff0f 	bl	800c282 <prvTCPTouchSocket>
                    xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
                }
            }
        #endif

        if( xParent != NULL )
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d002      	beq.n	800c470 <vTCPStateChange+0x1a4>
        {
            vSocketWakeUpUser( xParent );
 800c46a:	6978      	ldr	r0, [r7, #20]
 800c46c:	f7fe f9c7 	bl	800a7fe <vSocketWakeUpUser>
        }
    }
 800c470:	bf00      	nop
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	08010f84 	.word	0x08010f84

0800c47c <prvTCPBufferResize>:
 */
    static NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                           NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                           int32_t lDataLen,
                                                           UBaseType_t uxOptionsLength )
    {
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 800c48a:	4b32      	ldr	r3, [pc, #200]	; (800c554 <prvTCPBufferResize+0xd8>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00b      	beq.n	800c4aa <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800c492:	f240 53f2 	movw	r3, #1522	; 0x5f2
 800c496:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d102      	bne.n	800c4a4 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	617b      	str	r3, [r7, #20]
 800c4a2:	e019      	b.n	800c4d8 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	617b      	str	r3, [r7, #20]
 800c4a8:	e016      	b.n	800c4d8 <prvTCPBufferResize+0x5c>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	3336      	adds	r3, #54	; 0x36
 800c4b2:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	2b45      	cmp	r3, #69	; 0x45
 800c4b8:	d801      	bhi.n	800c4be <prvTCPBufferResize+0x42>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c4ba:	2346      	movs	r3, #70	; 0x46
 800c4bc:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d004      	beq.n	800c4ce <prvTCPBufferResize+0x52>
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	69db      	ldr	r3, [r3, #28]
 800c4c8:	69ba      	ldr	r2, [r7, #24]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d902      	bls.n	800c4d4 <prvTCPBufferResize+0x58>
            {
                xResize = pdTRUE;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	617b      	str	r3, [r7, #20]
 800c4d2:	e001      	b.n	800c4d8 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d023      	beq.n	800c526 <prvTCPBufferResize+0xaa>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 800c4de:	2100      	movs	r1, #0
 800c4e0:	69b8      	ldr	r0, [r7, #24]
 800c4e2:	f003 fcdf 	bl	800fea4 <pxGetNetworkBufferWithDescriptor>
 800c4e6:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d02c      	beq.n	800c548 <prvTCPBufferResize+0xcc>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	69ba      	ldr	r2, [r7, #24]
 800c4f2:	61da      	str	r2, [r3, #28]

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00c      	beq.n	800c514 <prvTCPBufferResize+0x98>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	6998      	ldr	r0, [r3, #24]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	6999      	ldr	r1, [r3, #24]
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	69db      	ldr	r3, [r3, #28]
 800c506:	461a      	mov	r2, r3
 800c508:	f003 fdcb 	bl	80100a2 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c50c:	68b8      	ldr	r0, [r7, #8]
 800c50e:	f003 fd43 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
 800c512:	e019      	b.n	800c548 <prvTCPBufferResize+0xcc>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	6998      	ldr	r0, [r3, #24]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	3382      	adds	r3, #130	; 0x82
 800c51c:	2246      	movs	r2, #70	; 0x46
 800c51e:	4619      	mov	r1, r3
 800c520:	f003 fdbf 	bl	80100a2 <memcpy>
 800c524:	e010      	b.n	800c548 <prvTCPBufferResize+0xcc>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <prvTCPBufferResize+0xba>
 800c52c:	490a      	ldr	r1, [pc, #40]	; (800c558 <prvTCPBufferResize+0xdc>)
 800c52e:	f240 70b9 	movw	r0, #1977	; 0x7b9
 800c532:	f7f4 faaf 	bl	8000a94 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	4413      	add	r3, r2
 800c540:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	61da      	str	r2, [r3, #28]
        }

        return pxReturn;
 800c548:	69fb      	ldr	r3, [r7, #28]
    }
 800c54a:	4618      	mov	r0, r3
 800c54c:	3720      	adds	r7, #32
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	0801146c 	.word	0x0801146c
 800c558:	08010f84 	.word	0x08010f84

0800c55c <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                                      NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                      UBaseType_t uxOptionsLength )
    {
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b094      	sub	sp, #80	; 0x50
 800c560:	af02      	add	r7, sp, #8
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	637b      	str	r3, [r7, #52]	; 0x34

        if( ( *ppxNetworkBuffer ) != NULL )
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d004      	beq.n	800c57e <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	643b      	str	r3, [r7, #64]	; 0x40
 800c57c:	e002      	b.n	800c584 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	3382      	adds	r3, #130	; 0x82
 800c582:	643b      	str	r3, [r7, #64]	; 0x40
        }

        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800c584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c586:	3322      	adds	r3, #34	; 0x22
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fe ffbd 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800c58e:	63f8      	str	r0, [r7, #60]	; 0x3c
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	33d8      	adds	r3, #216	; 0xd8
 800c594:	633b      	str	r3, [r7, #48]	; 0x30
        lDataLen = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	647b      	str	r3, [r7, #68]	; 0x44
        lStreamPos = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	617b      	str	r3, [r7, #20]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 800c59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a0:	7b5b      	ldrb	r3, [r3, #13]
 800c5a2:	f043 0310 	orr.w	r3, r3, #16
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5aa:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d07a      	beq.n	800c6aa <prvTCPPrepareSend+0x14e>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usCurMSS > 1U )
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d90a      	bls.n	800c5d4 <prvTCPPrepareSend+0x78>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c5c4:	f107 0214 	add.w	r2, r7, #20
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5cc:	f002 f916 	bl	800e7fc <ulTCPWindowTxGet>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	647b      	str	r3, [r7, #68]	; 0x44
            }

            if( lDataLen > 0 )
 800c5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	dd67      	ble.n	800c6aa <prvTCPPrepareSend+0x14e>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	6819      	ldr	r1, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f7ff ff4a 	bl	800c47c <prvTCPBufferResize>
 800c5e8:	62f8      	str	r0, [r7, #44]	; 0x2c

                if( pxNewBuffer != NULL )
 800c5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d059      	beq.n	800c6a4 <prvTCPPrepareSend+0x148>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5f4:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Map the byte stream onto ProtocolHeaders_t struct for easy
                     * access to the fields. */
                    pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800c5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fe:	3322      	adds	r3, #34	; 0x22
 800c600:	4618      	mov	r0, r3
 800c602:	f7fe ff81 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800c606:	63f8      	str	r0, [r7, #60]	; 0x3c

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	3336      	adds	r3, #54	; 0x36
 800c60c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c60e:	4413      	add	r3, r2
 800c610:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	697a      	ldr	r2, [r7, #20]
 800c61e:	4619      	mov	r1, r3
 800c620:	f7fe fecf 	bl	800b3c2 <uxStreamBufferDistance>
 800c624:	6278      	str	r0, [r7, #36]	; 0x24

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c62a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c62c:	2301      	movs	r3, #1
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	4613      	mov	r3, r2
 800c632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c636:	f7fe fe11 	bl	800b25c <uxStreamBufferGet>
 800c63a:	6238      	str	r0, [r7, #32]
                        }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c646:	b2db      	uxtb	r3, r3
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d02e      	beq.n	800c6aa <prvTCPPrepareSend+0x14e>
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d126      	bne.n	800c6aa <prvTCPPrepareSend+0x14e>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	4619      	mov	r1, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	461a      	mov	r2, r3
 800c66c:	f7fe fea9 	bl	800b3c2 <uxStreamBufferDistance>
 800c670:	61f8      	str	r0, [r7, #28]

                        if( ulDistance == ulDataGot )
 800c672:	69fa      	ldr	r2, [r7, #28]
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	429a      	cmp	r2, r3
 800c678:	d117      	bne.n	800c6aa <prvTCPPrepareSend+0x14e>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800c67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67c:	7b5b      	ldrb	r3, [r3, #13]
 800c67e:	f043 0301 	orr.w	r3, r3, #1
 800c682:	b2da      	uxtb	r2, r3
 800c684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c686:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800c688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c68e:	441a      	add	r2, r3
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	625a      	str	r2, [r3, #36]	; 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c69e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800c6a2:	e002      	b.n	800c6aa <prvTCPPrepareSend+0x14e>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 800c6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a8:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 800c6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	db7c      	blt.n	800c7aa <prvTCPPrepareSend+0x24e>
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c6b6:	2b05      	cmp	r3, #5
 800c6b8:	d177      	bne.n	800c7aa <prvTCPPrepareSend+0x24e>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6c0:	f003 0320 	and.w	r3, r3, #32
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d029      	beq.n	800c71e <prvTCPPrepareSend+0x1c2>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800c6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6cc:	f001 ffde 	bl	800e68c <xTCPWindowTxDone>
 800c6d0:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d023      	beq.n	800c71e <prvTCPPrepareSend+0x1c2>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c6dc:	f36f 1345 	bfc	r3, #5, #1
 800c6e0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800c6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6e6:	7b5b      	ldrb	r3, [r3, #13]
 800c6e8:	f043 0301 	orr.w	r3, r3, #1
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f0:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6fc:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c706:	f043 0301 	orr.w	r3, r3, #1
 800c70a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c710:	6a1a      	ldr	r2, [r3, #32]
 800c712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c714:	625a      	str	r2, [r3, #36]	; 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800c716:	2106      	movs	r1, #6
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f7ff fdd7 	bl	800c2cc <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
                {
                    if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c724:	2b03      	cmp	r3, #3
 800c726:	d906      	bls.n	800c736 <prvTCPPrepareSend+0x1da>
                    {
                        FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
                                                 pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                                 pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                        vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c728:	2108      	movs	r1, #8
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	f7ff fdce 	bl	800c2cc <vTCPStateChange>
                        lDataLen = -1;
 800c730:	f04f 33ff 	mov.w	r3, #4294967295
 800c734:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800c736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d136      	bne.n	800c7aa <prvTCPPrepareSend+0x24e>
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d12e      	bne.n	800c7aa <prvTCPPrepareSend+0x24e>
                    {
                        /* If there is no data to be sent, and no window-update message,
                         * we might want to send a keep-alive message. */
                        TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800c74c:	f7f9 faee 	bl	8005d2c <xTaskGetTickCount>
 800c750:	4602      	mov	r2, r0
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	61bb      	str	r3, [r7, #24]
                        TickType_t xMax;
                        xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 800c75a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c75e:	63bb      	str	r3, [r7, #56]	; 0x38

                        if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c766:	2b00      	cmp	r3, #0
 800c768:	d002      	beq.n	800c770 <prvTCPPrepareSend+0x214>
                        {
                            xMax = ( TickType_t ) ( 3U * configTICK_RATE_HZ );
 800c76a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c76e:	63bb      	str	r3, [r7, #56]	; 0x38
                        }

                        if( xAge > xMax )
 800c770:	69ba      	ldr	r2, [r7, #24]
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	429a      	cmp	r2, r3
 800c776:	d918      	bls.n	800c7aa <prvTCPPrepareSend+0x24e>
                        {
                            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800c778:	f7f9 fad8 	bl	8005d2c <xTaskGetTickCount>
 800c77c:	4602      	mov	r2, r0
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	65da      	str	r2, [r3, #92]	; 0x5c
                                                         pxSocket->u.xTCP.ulRemoteIP,
                                                         pxSocket->u.xTCP.usRemotePort,
                                                         pxSocket->u.xTCP.ucKeepRepCount ) );
                            }

                            pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c788:	f043 0302 	orr.w	r3, r3, #2
 800c78c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                            pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c796:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            pxSocket->u.xTCP.ucKeepRepCount++;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        /* Anything to send, a change of the advertised window size, or maybe send a
         * keep-alive message? */
        if( ( lDataLen > 0 ) ||
 800c7aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	dc0f      	bgt.n	800c7d0 <prvTCPPrepareSend+0x274>
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	b2db      	uxtb	r3, r3
        if( ( lDataLen > 0 ) ||
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d107      	bne.n	800c7d0 <prvTCPPrepareSend+0x274>
            ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7c6:	f003 0302 	and.w	r3, r3, #2
 800c7ca:	b2db      	uxtb	r3, r3
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d026      	beq.n	800c81e <prvTCPPrepareSend+0x2c2>
        {
            pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800c7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d2:	7b5b      	ldrb	r3, [r3, #13]
 800c7d4:	f023 0308 	bic.w	r3, r3, #8
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7dc:	735a      	strb	r2, [r3, #13]
            pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	3314      	adds	r3, #20
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ec:	731a      	strb	r2, [r3, #12]

            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 800c7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f0:	7b5b      	ldrb	r3, [r3, #13]
 800c7f2:	f043 0310 	orr.w	r3, r3, #16
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fa:	735a      	strb	r2, [r3, #13]

            if( lDataLen != 0L )
 800c7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d006      	beq.n	800c810 <prvTCPPrepareSend+0x2b4>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 800c802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c804:	7b5b      	ldrb	r3, [r3, #13]
 800c806:	f043 0308 	orr.w	r3, r3, #8
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80e:	735a      	strb	r2, [r3, #13]
            }

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	3328      	adds	r3, #40	; 0x28
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
            lDataLen += ( int32_t ) uxIntermediateResult;
 800c816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c81a:	4413      	add	r3, r2
 800c81c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        return lDataLen;
 800c81e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800c820:	4618      	mov	r0, r3
 800c822:	3748      	adds	r7, #72	; 0x48
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <prvTCPNextTimeout>:
 * @param[in] pxSocket: The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t * pxSocket )
    {
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800c830:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c834:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d135      	bne.n	800c8ac <prvTCPNextTimeout+0x84>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c846:	f003 0308 	and.w	r3, r3, #8
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d012      	beq.n	800c876 <prvTCPNextTimeout+0x4e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c856:	2b02      	cmp	r3, #2
 800c858:	d809      	bhi.n	800c86e <prvTCPNextTimeout+0x46>
                {
                    ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c860:	3b01      	subs	r3, #1
 800c862:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c866:	fa02 f303 	lsl.w	r3, r2, r3
 800c86a:	60bb      	str	r3, [r7, #8]
 800c86c:	e006      	b.n	800c87c <prvTCPNextTimeout+0x54>
                }
                else
                {
                    ulDelayMs = 11000UL;
 800c86e:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800c872:	60bb      	str	r3, [r7, #8]
 800c874:	e002      	b.n	800c87c <prvTCPNextTimeout+0x54>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500UL;
 800c876:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c87a:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
                                     pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c882:	fb02 f303 	mul.w	r3, r2, r3
 800c886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c88a:	d30a      	bcc.n	800c8a2 <prvTCPNextTimeout+0x7a>
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c892:	fb02 f303 	mul.w	r3, r2, r3
 800c896:	4a23      	ldr	r2, [pc, #140]	; (800c924 <prvTCPNextTimeout+0xfc>)
 800c898:	fba2 2303 	umull	r2, r3, r2, r3
 800c89c:	099b      	lsrs	r3, r3, #6
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	e000      	b.n	800c8a4 <prvTCPNextTimeout+0x7c>
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c8aa:	e033      	b.n	800c914 <prvTCPNextTimeout+0xec>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d12e      	bne.n	800c914 <prvTCPNextTimeout+0xec>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c8c2:	f107 0208 	add.w	r2, r7, #8
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	f001 ff38 	bl	800e73c <xTCPWindowTxHasData>
 800c8cc:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d108      	bne.n	800c8e6 <prvTCPNextTimeout+0xbe>
            {
                if( xResult != ( BaseType_t ) 0 )
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <prvTCPNextTimeout+0xb8>
                {
                    ulDelayMs = 1UL;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	60bb      	str	r3, [r7, #8]
 800c8de:	e002      	b.n	800c8e6 <prvTCPNextTimeout+0xbe>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800c8e0:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c8e4:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8ec:	fb02 f303 	mul.w	r3, r2, r3
 800c8f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8f4:	d30a      	bcc.n	800c90c <prvTCPNextTimeout+0xe4>
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8fc:	fb02 f303 	mul.w	r3, r2, r3
 800c900:	4a08      	ldr	r2, [pc, #32]	; (800c924 <prvTCPNextTimeout+0xfc>)
 800c902:	fba2 2303 	umull	r2, r3, r2, r3
 800c906:	099b      	lsrs	r3, r3, #6
 800c908:	b29a      	uxth	r2, r3
 800c90a:	e000      	b.n	800c90e <prvTCPNextTimeout+0xe6>
 800c90c:	2201      	movs	r2, #1
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    }
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	10624dd3 	.word	0x10624dd3

0800c928 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket: The socket owning the connection.
 */
    static void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c934:	4618      	mov	r0, r3
 800c936:	f7fe fd8a 	bl	800b44e <uxStreamBufferMidSpace>
 800c93a:	4603      	mov	r3, r0
 800c93c:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	dd17      	ble.n	800c974 <prvTCPAddTxData+0x4c>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800c94a:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c950:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800c952:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c958:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800c95a:	f001 fde1 	bl	800e520 <lTCPWindowTxAdd>
 800c95e:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	dd06      	ble.n	800c974 <prvTCPAddTxData+0x4c>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	4611      	mov	r1, r2
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe fd81 	bl	800b476 <vStreamBufferMoveMid>
            }
        }
    }
 800c974:	bf00      	nop
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	3322      	adds	r3, #34	; 0x22
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fe fdbb 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800c992:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800c998:	2300      	movs	r3, #0
 800c99a:	74fb      	strb	r3, [r7, #19]
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	7b5b      	ldrb	r3, [r3, #13]
 800c9a0:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	33d8      	adds	r3, #216	; 0xd8
 800c9a6:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	061a      	lsls	r2, r3, #24
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	021b      	lsls	r3, r3, #8
 800c9b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9bc:	431a      	orrs	r2, r3
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	0a1b      	lsrs	r3, r3, #8
 800c9c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c9c8:	431a      	orrs	r2, r3
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	0e1b      	lsrs	r3, r3, #24
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800c9d4:	7cbb      	ldrb	r3, [r7, #18]
 800c9d6:	f003 0301 	and.w	r3, r3, #1
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d004      	beq.n	800c9e8 <prvTCPHandleFin+0x6c>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	695b      	ldr	r3, [r3, #20]
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10b      	bne.n	800ca10 <prvTCPHandleFin+0x94>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6a1a      	ldr	r2, [r3, #32]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	625a      	str	r2, [r3, #36]	; 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ca06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca0a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800ca0e:	e00c      	b.n	800ca2a <prvTCPHandleFin+0xae>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca14:	3301      	adds	r3, #1
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d106      	bne.n	800ca2a <prvTCPHandleFin+0xae>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800ca22:	f043 0301 	orr.w	r3, r3, #1
 800ca26:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10b      	bne.n	800ca52 <prvTCPHandleFin+0xd6>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	2211      	movs	r2, #17
 800ca46:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 800ca48:	210a      	movs	r1, #10
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7ff fc3e 	bl	800c2cc <vTCPStateChange>
 800ca50:	e023      	b.n	800ca9a <prvTCPHandleFin+0x11e>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d103      	bne.n	800ca74 <prvTCPHandleFin+0xf8>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	735a      	strb	r2, [r3, #13]
 800ca72:	e012      	b.n	800ca9a <prvTCPHandleFin+0x11e>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca7a:	f003 0302 	and.w	r3, r3, #2
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d103      	bne.n	800ca8c <prvTCPHandleFin+0x110>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2210      	movs	r2, #16
 800ca88:	735a      	strb	r2, [r3, #13]
 800ca8a:	e002      	b.n	800ca92 <prvTCPHandleFin+0x116>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800ca92:	2108      	movs	r1, #8
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7ff fc19 	bl	800c2cc <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6a1a      	ldr	r2, [r3, #32]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	62da      	str	r2, [r3, #44]	; 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	7b5b      	ldrb	r3, [r3, #13]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d006      	beq.n	800cab8 <prvTCPHandleFin+0x13c>
        {
            ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cab0:	3328      	adds	r3, #40	; 0x28
 800cab2:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 800cab4:	7cfb      	ldrb	r3, [r7, #19]
 800cab6:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cabe:	3314      	adds	r3, #20
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	731a      	strb	r2, [r3, #12]
                                     pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
        }

        return xSendLength;
 800caca:	69fb      	ldr	r3, [r7, #28]
    }
 800cacc:	4618      	mov	r0, r3
 800cace:	3720      	adds	r7, #32
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    static BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint8_t ** ppucRecvData )
    {
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b08c      	sub	sp, #48	; 0x30
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	699b      	ldr	r3, [r3, #24]
 800cae2:	3322      	adds	r3, #34	; 0x22
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fe fd0f 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800caea:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */
        const IPHeader_t * pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	699b      	ldr	r3, [r3, #24]
 800caf4:	330e      	adds	r3, #14
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fe fce5 	bl	800b4c6 <vCastConstPointerTo_IPHeader_t>
 800cafc:	6238      	str	r0, [r7, #32]
        const size_t xIPHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800cafe:	2314      	movs	r3, #20
 800cb00:	61fb      	str	r3, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800cb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb08:	7b1b      	ldrb	r3, [r3, #12]
 800cb0a:	089b      	lsrs	r3, r3, #2
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800cb12:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 800cb14:	7efb      	ldrb	r3, [r7, #27]
 800cb16:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	699a      	ldr	r2, [r3, #24]
 800cb1c:	6979      	ldr	r1, [r7, #20]
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	440b      	add	r3, r1
 800cb22:	330e      	adds	r3, #14
 800cb24:	441a      	add	r2, r3
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	69db      	ldr	r3, [r3, #28]
 800cb2e:	3b0e      	subs	r3, #14
 800cb30:	62fb      	str	r3, [r7, #44]	; 0x2c

        usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800cb32:	6a3b      	ldr	r3, [r7, #32]
 800cb34:	885b      	ldrh	r3, [r3, #2]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	021b      	lsls	r3, r3, #8
 800cb3a:	b21a      	sxth	r2, r3
 800cb3c:	6a3b      	ldr	r3, [r7, #32]
 800cb3e:	885b      	ldrh	r3, [r3, #2]
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	0a1b      	lsrs	r3, r3, #8
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	b21b      	sxth	r3, r3
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	b21b      	sxth	r3, r3
 800cb4c:	827b      	strh	r3, [r7, #18]
        lLength = ( int32_t ) usLength;
 800cb4e:	8a7b      	ldrh	r3, [r7, #18]
 800cb50:	60fb      	str	r3, [r7, #12]

        if( lReceiveLength > lLength )
 800cb52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	dd01      	ble.n	800cb5e <prvCheckRxData+0x8a>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 800cb5e:	69fa      	ldr	r2, [r7, #28]
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	4413      	add	r3, r2
 800cb64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb66:	429a      	cmp	r2, r3
 800cb68:	dd06      	ble.n	800cb78 <prvCheckRxData+0xa4>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 800cb6a:	69fa      	ldr	r2, [r7, #28]
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	4413      	add	r3, r2
 800cb70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb76:	e001      	b.n	800cb7c <prvCheckRxData+0xa8>
        }
        else
        {
            lReceiveLength = 0;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	7b5b      	ldrb	r3, [r3, #13]
 800cb80:	f003 0320 	and.w	r3, r3, #32
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01c      	beq.n	800cbc2 <prvCheckRxData+0xee>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	8a5b      	ldrh	r3, [r3, #18]
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	021b      	lsls	r3, r3, #8
 800cb90:	b21a      	sxth	r2, r3
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	8a5b      	ldrh	r3, [r3, #18]
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	0a1b      	lsrs	r3, r3, #8
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	b21b      	sxth	r3, r3
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	b21b      	sxth	r3, r3
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	60bb      	str	r3, [r7, #8]
            *ppucRecvData += lUrgentLength;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	441a      	add	r2, r3
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800cbb2:	68b9      	ldr	r1, [r7, #8]
 800cbb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbb6:	f7fe fbc5 	bl	800b344 <FreeRTOS_min_int32>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	1a9b      	subs	r3, r3, r2
 800cbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        return ( BaseType_t ) lReceiveLength;
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3730      	adds	r7, #48	; 0x30
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <prvStoreRxData>:
 */
    static BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                                      const uint8_t * pucRecvData,
                                      NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint32_t ulReceiveLength )
    {
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08c      	sub	sp, #48	; 0x30
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	3322      	adds	r3, #34	; 0x22
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7fe fc9c 	bl	800b51e <vCastConstPointerTo_ProtocolHeaders_t>
 800cbe6:	6278      	str	r0, [r7, #36]	; 0x24
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	623b      	str	r3, [r7, #32]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	33d8      	adds	r3, #216	; 0xd8
 800cbf0:	61fb      	str	r3, [r7, #28]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	62bb      	str	r3, [r7, #40]	; 0x28

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	061a      	lsls	r2, r3, #24
 800cbfc:	6a3b      	ldr	r3, [r7, #32]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	021b      	lsls	r3, r3, #8
 800cc02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cc06:	431a      	orrs	r2, r3
 800cc08:	6a3b      	ldr	r3, [r7, #32]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	0a1b      	lsrs	r3, r3, #8
 800cc0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cc12:	431a      	orrs	r2, r3
 800cc14:	6a3b      	ldr	r3, [r7, #32]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	0e1b      	lsrs	r3, r3, #24
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	61bb      	str	r3, [r7, #24]

        if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d03f      	beq.n	800cca4 <prvStoreRxData+0xd8>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d93a      	bls.n	800cca4 <prvStoreRxData+0xd8>
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d006      	beq.n	800cc44 <prvStoreRxData+0x78>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fe fbdf 	bl	800b3fe <uxStreamBufferGetSpace>
 800cc40:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cc42:	e002      	b.n	800cc4a <prvStoreRxData+0x7e>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc48:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	69b9      	ldr	r1, [r7, #24]
 800cc50:	69f8      	ldr	r0, [r7, #28]
 800cc52:	f001 fb67 	bl	800e324 <lTCPWindowRxCheck>
 800cc56:	6178      	str	r0, [r7, #20]

            if( lOffset >= 0 )
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	db10      	blt.n	800cc80 <prvStoreRxData+0xb4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800cc5e:	6979      	ldr	r1, [r7, #20]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f7fd ff2d 	bl	800aac4 <lTCPAddRxdata>
 800cc6a:	6138      	str	r0, [r7, #16]

                if( lStored != ( int32_t ) ulReceiveLength )
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d005      	beq.n	800cc80 <prvStoreRxData+0xb4>
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 fc71 	bl	800d55c <prvTCPSendReset>
                    xResult = -1;
 800cc7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7e:	62bb      	str	r3, [r7, #40]	; 0x28
            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    /* Now lTCPAddRxdata() will move the rxHead pointer forward
                     * so data becomes available to the user immediately
                     * In case the low-water mark is reached, bLowWater will be set. */
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800cc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d113      	bne.n	800ccae <prvStoreRxData+0xe2>
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00f      	beq.n	800ccae <prvStoreRxData+0xe2>
                    {
                        ( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc92:	2200      	movs	r2, #0
 800cc94:	2100      	movs	r1, #0
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f7fd ff14 	bl	800aac4 <lTCPAddRxdata>
                        pxTCPWindow->ulUserDataLength = 0;
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	631a      	str	r2, [r3, #48]	; 0x30
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800cca2:	e004      	b.n	800ccae <prvStoreRxData+0xe2>
                }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ccac:	e000      	b.n	800ccb0 <prvStoreRxData+0xe4>
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800ccae:	bf00      	nop
        }

        return xResult;
 800ccb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3730      	adds	r7, #48	; 0x30
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    static UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b088      	sub	sp, #32
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	3322      	adds	r3, #34	; 0x22
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fe fc1c 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800ccd0:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	33d8      	adds	r3, #216	; 0xd8
 800ccda:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cce2:	61fb      	str	r3, [r7, #28]
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            if( uxOptionsLength != 0U )
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d013      	beq.n	800cd12 <prvSetOptions+0x58>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	3380      	adds	r3, #128	; 0x80
 800ccee:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	3314      	adds	r3, #20
 800ccf4:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 800ccf6:	69fa      	ldr	r2, [r7, #28]
 800ccf8:	68f9      	ldr	r1, [r7, #12]
 800ccfa:	68b8      	ldr	r0, [r7, #8]
 800ccfc:	f003 f9d1 	bl	80100a2 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	3314      	adds	r3, #20
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	731a      	strb	r2, [r3, #12]
 800cd10:	e031      	b.n	800cd76 <prvSetOptions+0xbc>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cd18:	2b04      	cmp	r3, #4
 800cd1a:	d92c      	bls.n	800cd76 <prvSetOptions+0xbc>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d024      	beq.n	800cd76 <prvSetOptions+0xbc>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cd32:	f36f 0300 	bfc	r3, #0, #1
 800cd36:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            if( xTCPWindowLoggingLevel >= 0 )
            {
                FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2202      	movs	r2, #2
 800cd3e:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	2204      	movs	r2, #4
 800cd44:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cd4c:	0a1b      	lsrs	r3, r3, #8
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 800cd62:	2304      	movs	r3, #4
 800cd64:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	3314      	adds	r3, #20
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	b2da      	uxtb	r2, r3
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 800cd76:	69fb      	ldr	r3, [r7, #28]
    }
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3720      	adds	r7, #32
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b08e      	sub	sp, #56	; 0x38
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
 800cd8c:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	3322      	adds	r3, #34	; 0x22
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7fe fbb7 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800cd9a:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800cd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9e:	62bb      	str	r3, [r7, #40]	; 0x28
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	33d8      	adds	r3, #216	; 0xd8
 800cda4:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda8:	7b5b      	ldrb	r3, [r3, #13]
 800cdaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	061a      	lsls	r2, r3, #24
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	021b      	lsls	r3, r3, #8
 800cdba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cdbe:	431a      	orrs	r2, r3
 800cdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cdca:	431a      	orrs	r2, r3
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	0e1b      	lsrs	r3, r3, #24
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	61fb      	str	r3, [r7, #28]
        BaseType_t xSendLength = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	637b      	str	r3, [r7, #52]	; 0x34
        UBaseType_t uxIntermediateResult = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	61bb      	str	r3, [r7, #24]

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 800cdde:	2310      	movs	r3, #16
 800cde0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d105      	bne.n	800cdfa <prvHandleSynReceived+0x7a>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 800cdee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cdf2:	f043 0302 	orr.w	r3, r3, #2
 800cdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 800cdfa:	2317      	movs	r3, #23
 800cdfc:	75fb      	strb	r3, [r7, #23]

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800cdfe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
 800ce04:	4013      	ands	r3, r2
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d030      	beq.n	800ce72 <prvHandleSynReceived+0xf2>
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
                                     ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800ce10:	2108      	movs	r1, #8
 800ce12:	68f8      	ldr	r0, [r7, #12]
 800ce14:	f7ff fa5a 	bl	800c2cc <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	061a      	lsls	r2, r3, #24
 800ce1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	021b      	lsls	r3, r3, #8
 800ce24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce28:	431a      	orrs	r2, r3
 800ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	0a1b      	lsrs	r3, r3, #8
 800ce30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce34:	431a      	orrs	r2, r3
 800ce36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	0e1b      	lsrs	r3, r3, #24
 800ce3c:	431a      	orrs	r2, r3
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce40:	62da      	str	r2, [r3, #44]	; 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	69fa      	ldr	r2, [r7, #28]
 800ce46:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 800ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4a:	7b5b      	ldrb	r3, [r3, #13]
 800ce4c:	f043 0304 	orr.w	r3, r3, #4
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce54:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	3328      	adds	r3, #40	; 0x28
 800ce5a:	61bb      	str	r3, [r7, #24]
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	637b      	str	r3, [r7, #52]	; 0x34

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	3314      	adds	r3, #20
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	731a      	strb	r2, [r3, #12]
 800ce70:	e070      	b.n	800cf54 <prvHandleSynReceived+0x1d4>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800ce76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce78:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d12a      	bne.n	800cee6 <prvHandleSynReceived+0x166>
            {
                /* Map the Last packet onto the ProtocolHeader_t struct for easy access to the fields. */
                ProtocolHeaders_t * pxLastHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	33a4      	adds	r3, #164	; 0xa4
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fe fb37 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800ce9a:	6138      	str	r0, [r7, #16]
                                                                            &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	2210      	movs	r2, #16
 800cea0:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800cea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea4:	2210      	movs	r2, #16
 800cea6:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800ceba:	69f9      	ldr	r1, [r7, #28]
 800cebc:	f001 f988 	bl	800e1d0 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	1c5a      	adds	r2, r3, #1
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	1c5a      	adds	r2, r3, #1
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	6a1b      	ldr	r3, [r3, #32]
 800ced4:	1c5a      	adds	r2, r3, #1
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 800ceda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cede:	1c5a      	adds	r2, r3, #1
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	635a      	str	r2, [r3, #52]	; 0x34
 800cee4:	e005      	b.n	800cef2 <prvHandleSynReceived+0x172>
            }
            else if( ulReceiveLength == 0U )
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d102      	bne.n	800cef2 <prvHandleSynReceived+0x172>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	69fa      	ldr	r2, [r7, #28]
 800cef0:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800cef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef4:	69db      	ldr	r3, [r3, #28]
 800cef6:	1c5a      	adds	r2, r3, #1
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	62da      	str	r2, [r3, #44]	; 0x2c
                                             pxSocket->u.xTCP.usRemotePort,
                                             ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
                }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d002      	beq.n	800cf0c <prvHandleSynReceived+0x18c>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00f      	beq.n	800cf2c <prvHandleSynReceived+0x1ac>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0e:	2210      	movs	r2, #16
 800cf10:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	3328      	adds	r3, #40	; 0x28
 800cf16:	61bb      	str	r3, [r7, #24]
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	637b      	str	r3, [r7, #52]	; 0x34
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	3314      	adds	r3, #20
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2a:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
                {
                    if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf32:	f003 0310 	and.w	r3, r3, #16
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d107      	bne.n	800cf4c <prvHandleSynReceived+0x1cc>
                    {
                        /* The other party did not send a scaling factor.
                         * A shifting factor in this side must be canceled. */
                        pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 800cf4c:	2105      	movs	r1, #5
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f7ff f9bc 	bl	800c2cc <vTCPStateChange>
        }

        return xSendLength;
 800cf54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800cf56:	4618      	mov	r0, r3
 800cf58:	3738      	adds	r7, #56	; 0x38
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b096      	sub	sp, #88	; 0x58
 800cf62:	af02      	add	r7, sp, #8
 800cf64:	60f8      	str	r0, [r7, #12]
 800cf66:	60b9      	str	r1, [r7, #8]
 800cf68:	607a      	str	r2, [r7, #4]
 800cf6a:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	3322      	adds	r3, #34	; 0x22
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fe fac7 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800cf7a:	6478      	str	r0, [r7, #68]	; 0x44
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800cf7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf7e:	643b      	str	r3, [r7, #64]	; 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	33d8      	adds	r3, #216	; 0xd8
 800cf84:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800cf86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf88:	7b5b      	ldrb	r3, [r3, #13]
 800cf8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 800cf8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	061a      	lsls	r2, r3, #24
 800cf94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	021b      	lsls	r3, r3, #8
 800cf9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cf9e:	431a      	orrs	r2, r3
 800cfa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	0a1b      	lsrs	r3, r3, #8
 800cfa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	0e1b      	lsrs	r3, r3, #24
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	637b      	str	r3, [r7, #52]	; 0x34
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	633b      	str	r3, [r7, #48]	; 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	64bb      	str	r3, [r7, #72]	; 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800cfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc8:	89db      	ldrh	r3, [r3, #14]
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	021b      	lsls	r3, r3, #8
 800cfce:	b21a      	sxth	r2, r3
 800cfd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd2:	89db      	ldrh	r3, [r3, #14]
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	0a1b      	lsrs	r3, r3, #8
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	b21b      	sxth	r3, r3
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	b21b      	sxth	r3, r3
 800cfe0:	857b      	strh	r3, [r7, #42]	; 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800cfe2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ulWindowSize =
                    ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800cff6:	fa03 f202 	lsl.w	r2, r3, r2
                pxSocket->u.xTCP.ulWindowSize =
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 800d000:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d004:	f003 0310 	and.w	r3, r3, #16
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d03c      	beq.n	800d086 <prvHandleEstablished+0x128>
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 800d00c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	061a      	lsls	r2, r3, #24
 800d012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	021b      	lsls	r3, r3, #8
 800d018:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d01c:	431a      	orrs	r2, r3
 800d01e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	0a1b      	lsrs	r3, r3, #8
 800d024:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d028:	431a      	orrs	r2, r3
 800d02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	0e1b      	lsrs	r3, r3, #24
 800d030:	4313      	orrs	r3, r2
 800d032:	4619      	mov	r1, r3
 800d034:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d036:	f001 fdcb 	bl	800ebd0 <ulTCPWindowTxAck>
 800d03a:	6278      	str	r0, [r7, #36]	; 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d040:	2b00      	cmp	r3, #0
 800d042:	d020      	beq.n	800d086 <prvHandleEstablished+0x128>
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	2b00      	cmp	r3, #0
 800d048:	d01d      	beq.n	800d086 <prvHandleEstablished+0x128>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d04e:	2300      	movs	r3, #0
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	2200      	movs	r2, #0
 800d056:	2100      	movs	r1, #0
 800d058:	f7fe f900 	bl	800b25c <uxStreamBufferGet>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d011      	beq.n	800d086 <prvHandleEstablished+0x128>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f043 0202 	orr.w	r2, r3, #2
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d072:	f003 0302 	and.w	r3, r3, #2
 800d076:	2b00      	cmp	r3, #0
 800d078:	d005      	beq.n	800d086 <prvHandleEstablished+0x128>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	601a      	str	r2, [r3, #0]
            }
        }

        /* If this socket has a stream for transmission, add the data to the
         * outgoing segment(s). */
        if( pxSocket->u.xTCP.txStream != NULL )
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d002      	beq.n	800d094 <prvHandleEstablished+0x136>
        {
            prvTCPAddTxData( pxSocket );
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f7ff fc4a 	bl	800c928 <prvTCPAddTxData>
        }

        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d096:	6a1a      	ldr	r2, [r3, #32]
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

        if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0a4:	f003 0320 	and.w	r3, r3, #32
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d105      	bne.n	800d0ba <prvHandleEstablished+0x15c>
 800d0ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d039      	beq.n	800d12e <prvHandleEstablished+0x1d0>
        {
            /* Peer is requesting to stop, see if we're really finished. */
            xMayClose = pdTRUE;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Checks are only necessary if we haven't sent a FIN yet. */
            if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d11e      	bne.n	800d10c <prvHandleEstablished+0x1ae>
            {
                /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800d0ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d0d0:	f000 ff94 	bl	800dffc <xTCPWindowRxEmpty>
 800d0d4:	6238      	str	r0, [r7, #32]
                bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800d0d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d0d8:	f001 fad8 	bl	800e68c <xTCPWindowTxDone>
 800d0dc:	61f8      	str	r0, [r7, #28]

                if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800d0de:	6a3b      	ldr	r3, [r7, #32]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d002      	beq.n	800d0ea <prvHandleEstablished+0x18c>
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d102      	bne.n	800d0f0 <prvHandleEstablished+0x192>
                    /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                    FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
                                             pxSocket->usLocalPort,
                                             pxSocket->u.xTCP.usRemotePort,
                                             bRxComplete, bTxDone ) );
                    xMayClose = pdFALSE;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0ee:	e00d      	b.n	800d10c <prvHandleEstablished+0x1ae>
                }
                else
                {
                    ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800d0f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	441a      	add	r2, r3
 800d0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f8:	691b      	ldr	r3, [r3, #16]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	633b      	str	r3, [r7, #48]	; 0x30
                    lDistance = ( int32_t ) ulIntermediateResult;
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d100:	61bb      	str	r3, [r7, #24]

                    if( lDistance > 1 )
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	2b01      	cmp	r3, #1
 800d106:	dd01      	ble.n	800d10c <prvHandleEstablished+0x1ae>
                    {
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
                                                 lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
                                                 pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

                        xMayClose = pdFALSE;
 800d108:	2300      	movs	r3, #0
 800d10a:	64bb      	str	r3, [r7, #72]	; 0x48
                FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
                                         xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
                                         pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
            }

            if( xMayClose != pdFALSE )
 800d10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00d      	beq.n	800d12e <prvHandleEstablished+0x1d0>
            {
                pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d118:	f043 0320 	orr.w	r3, r3, #32
 800d11c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4619      	mov	r1, r3
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f7ff fc28 	bl	800c97c <prvTCPHandleFin>
 800d12c:	64f8      	str	r0, [r7, #76]	; 0x4c
            }
        }

        if( xMayClose == pdFALSE )
 800d12e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d130:	2b00      	cmp	r3, #0
 800d132:	d12c      	bne.n	800d18e <prvHandleEstablished+0x230>
        {
            pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800d134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d136:	2210      	movs	r2, #16
 800d138:	735a      	strb	r2, [r3, #13]

            if( ulReceiveLength != 0U )
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d018      	beq.n	800d172 <prvHandleEstablished+0x214>
            {
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	3328      	adds	r3, #40	; 0x28
 800d144:	62fb      	str	r3, [r7, #44]	; 0x2c
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d148:	64fb      	str	r3, [r7, #76]	; 0x4c
                /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	3314      	adds	r3, #20
 800d150:	b2db      	uxtb	r3, r3
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	b2da      	uxtb	r2, r3
 800d156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d158:	731a      	strb	r2, [r3, #12]

                if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d164:	b2db      	uxtb	r3, r3
 800d166:	2b00      	cmp	r3, #0
 800d168:	d003      	beq.n	800d172 <prvHandleEstablished+0x214>
                {
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d16c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d170:	621a      	str	r2, [r3, #32]

            /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
             * can not send-out both TCP options and also a full packet. Sending
             * options (SACK) is always more urgent than sending data, which can be
             * sent later. */
            if( uxOptionsLength == 0U )
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10a      	bne.n	800d18e <prvHandleEstablished+0x230>
            {
                /* prvTCPPrepareSend might allocate a bigger network buffer, if
                 * necessary. */
                lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800d178:	683a      	ldr	r2, [r7, #0]
 800d17a:	68b9      	ldr	r1, [r7, #8]
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f7ff f9ed 	bl	800c55c <prvTCPPrepareSend>
 800d182:	6178      	str	r0, [r7, #20]

                if( lSendResult > 0 )
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2b00      	cmp	r3, #0
 800d188:	dd01      	ble.n	800d18e <prvHandleEstablished+0x230>
                {
                    xSendLength = ( BaseType_t ) lSendResult;
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }
        }

        return xSendLength;
 800d18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800d190:	4618      	mov	r0, r3
 800d192:	3750      	adds	r7, #80	; 0x50
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <prvSendData>:
 */
    static BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                   uint32_t ulReceiveLength,
                                   BaseType_t xByteCount )
    {
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08c      	sub	sp, #48	; 0x30
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	699b      	ldr	r3, [r3, #24]
 800d1ac:	3322      	adds	r3, #34	; 0x22
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7fe f9aa 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800d1b4:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	627b      	str	r3, [r7, #36]	; 0x24
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	33d8      	adds	r3, #216	; 0xd8
 800d1be:	623b      	str	r3, [r7, #32]
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            #endif
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
            {
                #if ( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
                    {
                        lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d1da:	005b      	lsls	r3, r3, #1
 800d1dc:	617b      	str	r3, [r7, #20]
                #endif /* ipconfigTCP_ACK_EARLIER_PACKET */

                /* In case we're receiving data continuously, we might postpone sending
                 * an ACK to gain performance. */
                /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
                if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d04b      	beq.n	800d27c <prvSendData+0xe4>
 800d1e4:	69ba      	ldr	r2, [r7, #24]
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	db47      	blt.n	800d27c <prvSendData+0xe4>
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1f6:	b2db      	uxtb	r3, r3
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d13f      	bne.n	800d27c <prvSendData+0xe4>
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800d1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fe:	2b28      	cmp	r3, #40	; 0x28
 800d200:	d13c      	bne.n	800d27c <prvSendData+0xe4>
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
 800d208:	2b05      	cmp	r3, #5
 800d20a:	d137      	bne.n	800d27c <prvSendData+0xe4>
                    ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )                              /* There are no other flags than an ACK. */
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	7b5b      	ldrb	r3, [r3, #13]
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800d210:	2b10      	cmp	r3, #16
 800d212:	d133      	bne.n	800d27c <prvSendData+0xe4>
                {
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d00c      	beq.n	800d23a <prvSendData+0xa2>
                    {
                        /* There was still a delayed in queue, delete it. */
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d224:	2b00      	cmp	r3, #0
 800d226:	d004      	beq.n	800d232 <prvSendData+0x9a>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d22c:	4618      	mov	r0, r3
 800d22e:	f002 feb3 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
                        }

                        pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d240:	461a      	mov	r2, r3
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4293      	cmp	r3, r2
 800d246:	d307      	bcc.n	800d258 <prvSendData+0xc0>
                        ( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) ) /* There are less than 2 x MSS space in the Rx buffer. */
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	461a      	mov	r2, r3
                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	4293      	cmp	r3, r2
 800d256:	da04      	bge.n	800d262 <prvSendData+0xca>
                    {
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2202      	movs	r2, #2
 800d25c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d260:	e003      	b.n	800d26a <prvSendData+0xd2>
                    else
                    {
                        /* Normally a delayed ACK should wait 200 ms for a next incoming
                         * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                         * for full-size message. */
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2214      	movs	r2, #20
 800d266:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    }

                    if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800d26a:	4b18      	ldr	r3, [pc, #96]	; (800d2cc <prvSendData+0x134>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b01      	cmp	r3, #1
                                                 pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                                 xSendLength,
                                                 pxSocket->u.xTCP.usTimeout, lRxSpace ) );
                    }

                    *ppxNetworkBuffer = NULL;
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	2200      	movs	r2, #0
 800d274:	601a      	str	r2, [r3, #0]
                    xSendLength = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d27a:	e011      	b.n	800d2a0 <prvSendData+0x108>
                }
                else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00d      	beq.n	800d2a0 <prvSendData+0x108>
                {
                    /* As an ACK is not being delayed, remove any earlier delayed ACK
                     * message. */
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d004      	beq.n	800d29a <prvSendData+0x102>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d294:	4618      	mov	r0, r3
 800d296:	f002 fe7f 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	67da      	str	r2, [r3, #124]	; 0x7c
                ( void ) pxTCPHeader;
                ( void ) lRxSpace;
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 800d2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00c      	beq.n	800d2c0 <prvSendData+0x128>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800d2a6:	4b09      	ldr	r3, [pc, #36]	; (800d2cc <prvSendData+0x134>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b01      	cmp	r3, #1
                                         xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	6819      	ldr	r1, [r3, #0]
 800d2b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f7fe faff 	bl	800b8b8 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* The driver has taken ownership of the Network Buffer. */
                    *ppxNetworkBuffer = NULL;
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	601a      	str	r2, [r3, #0]
                }
            #endif
        }

        return xSendLength;
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3730      	adds	r7, #48	; 0x30
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	2000bce4 	.word	0x2000bce4

0800d2d0 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08c      	sub	sp, #48	; 0x30
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	699b      	ldr	r3, [r3, #24]
 800d2e0:	3322      	adds	r3, #34	; 0x22
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fe f910 	bl	800b508 <vCastPointerTo_ProtocolHeaders_t>
 800d2e8:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xSendLength = 0;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	061a      	lsls	r2, r3, #24
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	021b      	lsls	r3, r3, #8
 800d2fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d302:	431a      	orrs	r2, r3
 800d304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	0a1b      	lsrs	r3, r3, #8
 800d30a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d30e:	431a      	orrs	r2, r3
 800d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	0e1b      	lsrs	r3, r3, #24
 800d316:	4313      	orrs	r3, r2
 800d318:	623b      	str	r3, [r7, #32]
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 800d31a:	2300      	movs	r3, #0
 800d31c:	61fb      	str	r3, [r7, #28]
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d320:	7b5b      	ldrb	r3, [r3, #13]
 800d322:	76fb      	strb	r3, [r7, #27]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	33d8      	adds	r3, #216	; 0xd8
 800d328:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIntermediateResult = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	613b      	str	r3, [r7, #16]

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f107 0208 	add.w	r2, r7, #8
 800d336:	4611      	mov	r1, r2
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff fbcb 	bl	800cad4 <prvCheckRxData>
 800d33e:	4603      	mov	r3, r0
 800d340:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d348:	2b04      	cmp	r3, #4
 800d34a:	d90c      	bls.n	800d366 <prvTCPHandleState+0x96>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	691a      	ldr	r2, [r3, #16]
 800d350:	6a3b      	ldr	r3, [r7, #32]
 800d352:	3301      	adds	r3, #1
 800d354:	429a      	cmp	r2, r3
 800d356:	d106      	bne.n	800d366 <prvTCPHandleState+0x96>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d35e:	f043 0301 	orr.w	r3, r3, #1
 800d362:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        if( ( ulSequenceNumber + ulReceiveLength ) > pxTCPWindow->rx.ulHighestSequenceNumber )
 800d366:	6a3a      	ldr	r2, [r7, #32]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	441a      	add	r2, r3
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	429a      	cmp	r2, r3
 800d372:	d904      	bls.n	800d37e <prvTCPHandleState+0xae>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800d374:	6a3a      	ldr	r2, [r7, #32]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	441a      	add	r2, r3
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800d37e:	68b9      	ldr	r1, [r7, #8]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f7ff fc20 	bl	800cbcc <prvStoreRxData>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	da03      	bge.n	800d39a <prvTCPHandleState+0xca>
        {
            xSendLength = -1;
 800d392:	f04f 33ff 	mov.w	r3, #4294967295
 800d396:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d398:	e0a2      	b.n	800d4e0 <prvTCPHandleState+0x210>
        }
        else
        {
            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff fc8a 	bl	800ccba <prvSetOptions>
 800d3a6:	61f8      	str	r0, [r7, #28]

            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d3ae:	2b04      	cmp	r3, #4
 800d3b0:	d108      	bne.n	800d3c4 <prvTCPHandleState+0xf4>
 800d3b2:	7efb      	ldrb	r3, [r7, #27]
 800d3b4:	f003 031f 	and.w	r3, r3, #31
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	d103      	bne.n	800d3c4 <prvTCPHandleState+0xf4>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 800d3bc:	2103      	movs	r1, #3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7fe ff84 	bl	800c2cc <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800d3c4:	7efb      	ldrb	r3, [r7, #27]
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d022      	beq.n	800d414 <prvTCPHandleState+0x144>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d11a      	bne.n	800d414 <prvTCPHandleState+0x144>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800d3de:	6a3a      	ldr	r2, [r7, #32]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	441a      	add	r2, r3
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d3ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f2:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d400:	b2db      	uxtb	r3, r3
 800d402:	2b00      	cmp	r3, #0
 800d404:	d106      	bne.n	800d414 <prvTCPHandleState+0x144>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d40c:	f043 0302 	orr.w	r3, r3, #2
 800d410:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                }
            }

            switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d41a:	2b0b      	cmp	r3, #11
 800d41c:	d85f      	bhi.n	800d4de <prvTCPHandleState+0x20e>
 800d41e:	a201      	add	r2, pc, #4	; (adr r2, 800d424 <prvTCPHandleState+0x154>)
 800d420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d424:	0800d4df 	.word	0x0800d4df
 800d428:	0800d4df 	.word	0x0800d4df
 800d42c:	0800d4ad 	.word	0x0800d4ad
 800d430:	0800d455 	.word	0x0800d455
 800d434:	0800d4ad 	.word	0x0800d4ad
 800d438:	0800d4bf 	.word	0x0800d4bf
 800d43c:	0800d4cf 	.word	0x0800d4cf
 800d440:	0800d4cf 	.word	0x0800d4cf
 800d444:	0800d4df 	.word	0x0800d4df
 800d448:	0800d4df 	.word	0x0800d4df
 800d44c:	0800d4cf 	.word	0x0800d4cf
 800d450:	0800d4df 	.word	0x0800d4df
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800d454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7fe fec2 	bl	800c1e0 <prvSetSynAckOptions>
 800d45c:	61f8      	str	r0, [r7, #28]
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800d45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d460:	2212      	movs	r2, #18
 800d462:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	3328      	adds	r3, #40	; 0x28
 800d468:	613b      	str	r3, [r7, #16]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	b2db      	uxtb	r3, r3
 800d472:	3314      	adds	r3, #20
 800d474:	b2db      	uxtb	r3, r3
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47c:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800d47e:	2104      	movs	r1, #4
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7fe ff23 	bl	800c2cc <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	1c5a      	adds	r2, r3, #1
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	69db      	ldr	r3, [r3, #28]
 800d49a:	1c5a      	adds	r2, r3, #1
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	635a      	str	r2, [r3, #52]	; 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	69db      	ldr	r3, [r3, #28]
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	621a      	str	r2, [r3, #32]
                    break;
 800d4aa:	e019      	b.n	800d4e0 <prvTCPHandleState+0x210>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	6819      	ldr	r1, [r3, #0]
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7ff fc63 	bl	800cd80 <prvHandleSynReceived>
 800d4ba:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800d4bc:	e010      	b.n	800d4e0 <prvTCPHandleState+0x210>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff fd4a 	bl	800cf5e <prvHandleEstablished>
 800d4ca:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800d4cc:	e008      	b.n	800d4e0 <prvTCPHandleState+0x210>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7ff fa51 	bl	800c97c <prvTCPHandleFin>
 800d4da:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800d4dc:	e000      	b.n	800d4e0 <prvTCPHandleState+0x210>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 800d4de:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	dd06      	ble.n	800d4f4 <prvTCPHandleState+0x224>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800d4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e8:	68fa      	ldr	r2, [r7, #12]
 800d4ea:	6839      	ldr	r1, [r7, #0]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fe53 	bl	800d198 <prvSendData>
 800d4f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        return xSendLength;
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3730      	adds	r7, #48	; 0x30
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop

0800d500 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    static BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                     uint8_t ucTCPFlags )
    {
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	460b      	mov	r3, r1
 800d50a:	70fb      	strb	r3, [r7, #3]
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
            {
                /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */
                TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	4618      	mov	r0, r3
 800d512:	f7fd ffe3 	bl	800b4dc <vCastPointerTo_TCPPacket_t>
 800d516:	60f8      	str	r0, [r7, #12]
                const uint32_t ulSendLength =
 800d518:	2328      	movs	r3, #40	; 0x28
 800d51a:	60bb      	str	r3, [r7, #8]
                    ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ); /* Plus 0 options. */

                pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	78fa      	ldrb	r2, [r7, #3]
 800d520:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2250      	movs	r2, #80	; 0x50
 800d528:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 800d52c:	2300      	movs	r3, #0
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	2000      	movs	r0, #0
 800d534:	f7fe f9c0 	bl	800b8b8 <prvTCPReturnPacket>
            }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return pdFAIL;
 800d538:	2300      	movs	r3, #0
    }
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d542:	b580      	push	{r7, lr}
 800d544:	b082      	sub	sp, #8
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 800d54a:	2110      	movs	r1, #16
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7ff ffd7 	bl	800d500 <prvTCPSendSpecialPacketHelper>
 800d552:	4603      	mov	r3, r0
    }
 800d554:	4618      	mov	r0, r3
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 800d564:	2114      	movs	r1, #20
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7ff ffca 	bl	800d500 <prvTCPSendSpecialPacketHelper>
 800d56c:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 800d56e:	4618      	mov	r0, r3
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
	...

0800d578 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket: The socket whose MSS is to be set.
 */
    static void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
        uint32_t ulMSS = ipconfigTCP_MSS;
 800d580:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800d584:	60fb      	str	r3, [r7, #12]

        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58a:	061a      	lsls	r2, r3, #24
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d590:	021b      	lsls	r3, r3, #8
 800d592:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d596:	431a      	orrs	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59c:	0a1b      	lsrs	r3, r3, #8
 800d59e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a8:	0e1b      	lsrs	r3, r3, #24
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	4b0d      	ldr	r3, [pc, #52]	; (800d5e4 <prvSocketSetMSS+0x6c>)
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	405a      	eors	r2, r3
 800d5b2:	4b0d      	ldr	r3, [pc, #52]	; (800d5e8 <prvSocketSetMSS+0x70>)
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	4013      	ands	r3, r2
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d005      	beq.n	800d5c8 <prvSocketSetMSS+0x50>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800d5bc:	68f9      	ldr	r1, [r7, #12]
 800d5be:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800d5c2:	f7fd fecf 	bl	800b364 <FreeRTOS_min_uint32>
 800d5c6:	60f8      	str	r0, [r7, #12]
        }

        FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ulMSS;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }
 800d5dc:	bf00      	nop
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	20000014 	.word	0x20000014
 800d5e8:	2000bc5c 	.word	0x2000bc5c

0800d5ec <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b090      	sub	sp, #64	; 0x40
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	60fb      	str	r3, [r7, #12]

        /* Map the buffer onto a ProtocolHeaders_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	699b      	ldr	r3, [r3, #24]
 800d5fc:	3322      	adds	r3, #34	; 0x22
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fd ff8d 	bl	800b51e <vCastConstPointerTo_ProtocolHeaders_t>
 800d604:	6378      	str	r0, [r7, #52]	; 0x34
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        FreeRTOS_Socket_t * pxSocket;
        uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 800d606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d608:	7b5b      	ldrb	r3, [r3, #13]
 800d60a:	867b      	strh	r3, [r7, #50]	; 0x32
        uint32_t ulLocalIP;
        uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 800d60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60e:	885b      	ldrh	r3, [r3, #2]
 800d610:	b29b      	uxth	r3, r3
 800d612:	021b      	lsls	r3, r3, #8
 800d614:	b21a      	sxth	r2, r3
 800d616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d618:	885b      	ldrh	r3, [r3, #2]
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	0a1b      	lsrs	r3, r3, #8
 800d61e:	b29b      	uxth	r3, r3
 800d620:	b21b      	sxth	r3, r3
 800d622:	4313      	orrs	r3, r2
 800d624:	b21b      	sxth	r3, r3
 800d626:	863b      	strh	r3, [r7, #48]	; 0x30
        uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 800d628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	021b      	lsls	r3, r3, #8
 800d630:	b21a      	sxth	r2, r3
 800d632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d634:	881b      	ldrh	r3, [r3, #0]
 800d636:	b29b      	uxth	r3, r3
 800d638:	0a1b      	lsrs	r3, r3, #8
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	b21b      	sxth	r3, r3
 800d63e:	4313      	orrs	r3, r2
 800d640:	b21b      	sxth	r3, r3
 800d642:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t ulRemoteIP;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800d644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	061a      	lsls	r2, r3, #24
 800d64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	021b      	lsls	r3, r3, #8
 800d650:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d654:	431a      	orrs	r2, r3
 800d656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	0a1b      	lsrs	r3, r3, #8
 800d65c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d660:	431a      	orrs	r2, r3
 800d662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	0e1b      	lsrs	r3, r3, #24
 800d668:	4313      	orrs	r3, r2
 800d66a:	62bb      	str	r3, [r7, #40]	; 0x28
        uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );
 800d66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	061a      	lsls	r2, r3, #24
 800d672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	021b      	lsls	r3, r3, #8
 800d678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d67c:	431a      	orrs	r2, r3
 800d67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	0a1b      	lsrs	r3, r3, #8
 800d684:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d688:	431a      	orrs	r2, r3
 800d68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	0e1b      	lsrs	r3, r3, #24
 800d690:	4313      	orrs	r3, r2
 800d692:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xResult = pdPASS;
 800d694:	2301      	movs	r3, #1
 800d696:	63bb      	str	r3, [r7, #56]	; 0x38

        configASSERT( pxNetworkBuffer != NULL );
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d104      	bne.n	800d6a8 <xProcessReceivedTCPPacket+0xbc>
 800d69e:	499f      	ldr	r1, [pc, #636]	; (800d91c <xProcessReceivedTCPPacket+0x330>)
 800d6a0:	f640 5088 	movw	r0, #3464	; 0xd88
 800d6a4:	f7f3 f9f6 	bl	8000a94 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	699b      	ldr	r3, [r3, #24]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d104      	bne.n	800d6ba <xProcessReceivedTCPPacket+0xce>
 800d6b0:	499a      	ldr	r1, [pc, #616]	; (800d91c <xProcessReceivedTCPPacket+0x330>)
 800d6b2:	f640 5089 	movw	r0, #3465	; 0xd89
 800d6b6:	f7f3 f9ed 	bl	8000a94 <vAssertCalled>
        const IPHeader_t * pxIPHeader;

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	69db      	ldr	r3, [r3, #28]
 800d6be:	2b35      	cmp	r3, #53	; 0x35
 800d6c0:	d802      	bhi.n	800d6c8 <xProcessReceivedTCPPacket+0xdc>
        {
            xResult = pdFAIL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6c6:	e124      	b.n	800d912 <xProcessReceivedTCPPacket+0x326>
        }
        else
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	330e      	adds	r3, #14
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fd fef9 	bl	800b4c6 <vCastConstPointerTo_IPHeader_t>
 800d6d4:	6238      	str	r0, [r7, #32]
            ulLocalIP = FreeRTOS_htonl( pxIPHeader->ulDestinationIPAddress );
 800d6d6:	6a3b      	ldr	r3, [r7, #32]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	061a      	lsls	r2, r3, #24
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	021b      	lsls	r3, r3, #8
 800d6e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d6e6:	431a      	orrs	r2, r3
 800d6e8:	6a3b      	ldr	r3, [r7, #32]
 800d6ea:	691b      	ldr	r3, [r3, #16]
 800d6ec:	0a1b      	lsrs	r3, r3, #8
 800d6ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d6f2:	431a      	orrs	r2, r3
 800d6f4:	6a3b      	ldr	r3, [r7, #32]
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	0e1b      	lsrs	r3, r3, #24
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	61fb      	str	r3, [r7, #28]
            ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 800d6fe:	6a3b      	ldr	r3, [r7, #32]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	061a      	lsls	r2, r3, #24
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	021b      	lsls	r3, r3, #8
 800d70a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d70e:	431a      	orrs	r2, r3
 800d710:	6a3b      	ldr	r3, [r7, #32]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	0a1b      	lsrs	r3, r3, #8
 800d716:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d71a:	431a      	orrs	r2, r3
 800d71c:	6a3b      	ldr	r3, [r7, #32]
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	0e1b      	lsrs	r3, r3, #24
 800d722:	4313      	orrs	r3, r2
 800d724:	61bb      	str	r3, [r7, #24]

            /* Find the destination socket, and if not found: return a socket listing to
             * the destination PORT. */
            pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800d726:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800d728:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d72a:	69ba      	ldr	r2, [r7, #24]
 800d72c:	69f8      	ldr	r0, [r7, #28]
 800d72e:	f7fd f917 	bl	800a960 <pxTCPSocketLookup>
 800d732:	63f8      	str	r0, [r7, #60]	; 0x3c

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 800d734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d736:	2b00      	cmp	r3, #0
 800d738:	d008      	beq.n	800d74c <xProcessReceivedTCPPacket+0x160>
 800d73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d73c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d740:	4618      	mov	r0, r3
 800d742:	f7fd ff33 	bl	800b5ac <prvTCPSocketIsActive>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d110      	bne.n	800d76e <xProcessReceivedTCPPacket+0x182>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800d74c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d74e:	f003 031f 	and.w	r3, r3, #31
 800d752:	2b10      	cmp	r3, #16
 800d754:	d008      	beq.n	800d768 <xProcessReceivedTCPPacket+0x17c>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 800d756:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d758:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d103      	bne.n	800d768 <xProcessReceivedTCPPacket+0x17c>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4618      	mov	r0, r3
 800d764:	f7ff fefa 	bl	800d55c <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 800d768:	2300      	movs	r3, #0
 800d76a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d76c:	e079      	b.n	800d862 <xProcessReceivedTCPPacket+0x276>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 800d76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d770:	2200      	movs	r2, #0
 800d772:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800d776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d778:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d11c      	bne.n	800d7ba <xProcessReceivedTCPPacket+0x1ce>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 800d780:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d782:	f003 031f 	and.w	r3, r3, #31
 800d786:	2b02      	cmp	r3, #2
 800d788:	d00b      	beq.n	800d7a2 <xProcessReceivedTCPPacket+0x1b6>
                                FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
                                                         prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 800d78a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d78c:	f003 0304 	and.w	r3, r3, #4
 800d790:	2b00      	cmp	r3, #0
 800d792:	d103      	bne.n	800d79c <xProcessReceivedTCPPacket+0x1b0>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	4618      	mov	r0, r3
 800d798:	f7ff fee0 	bl	800d55c <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 800d79c:	2300      	movs	r3, #0
 800d79e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7a0:	e05f      	b.n	800d862 <xProcessReceivedTCPPacket+0x276>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d7a8:	f000 f8ba 	bl	800d920 <prvHandleListen>
 800d7ac:	63f8      	str	r0, [r7, #60]	; 0x3c

                        if( pxSocket == NULL )
 800d7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d156      	bne.n	800d862 <xProcessReceivedTCPPacket+0x276>
                        {
                            xResult = pdFAIL;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7b8:	e053      	b.n	800d862 <xProcessReceivedTCPPacket+0x276>
                } /* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 800d7ba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d7bc:	f003 0304 	and.w	r3, r3, #4
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d032      	beq.n	800d82a <xProcessReceivedTCPPacket+0x23e>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800d7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d10b      	bne.n	800d7e6 <xProcessReceivedTCPPacket+0x1fa>
                        {
                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 800d7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d123      	bne.n	800d824 <xProcessReceivedTCPPacket+0x238>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800d7dc:	2100      	movs	r1, #0
 800d7de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d7e0:	f7fe fd74 	bl	800c2cc <vTCPStateChange>
 800d7e4:	e01e      	b.n	800d824 <xProcessReceivedTCPPacket+0x238>
                            }
                        }
                        else
                        {
                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800d7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d104      	bne.n	800d7fc <xProcessReceivedTCPPacket+0x210>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800d7f2:	2100      	movs	r1, #0
 800d7f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d7f6:	f7fe fd69 	bl	800c2cc <vTCPStateChange>
 800d7fa:	e013      	b.n	800d824 <xProcessReceivedTCPPacket+0x238>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800d7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d804:	429a      	cmp	r2, r3
 800d806:	d90d      	bls.n	800d824 <xProcessReceivedTCPPacket+0x238>
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800d808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
                                                            pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) ) )
 800d80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d810:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800d814:	4413      	add	r3, r2
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800d816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d818:	429a      	cmp	r2, r3
 800d81a:	d203      	bcs.n	800d824 <xProcessReceivedTCPPacket+0x238>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	4618      	mov	r0, r3
 800d820:	f7ff fe8f 	bl	800d542 <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 800d824:	2300      	movs	r3, #0
 800d826:	63bb      	str	r3, [r7, #56]	; 0x38
 800d828:	e01b      	b.n	800d862 <xProcessReceivedTCPPacket+0x276>
                    }
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 800d82a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d82c:	f003 031f 	and.w	r3, r3, #31
 800d830:	2b02      	cmp	r3, #2
 800d832:	d107      	bne.n	800d844 <xProcessReceivedTCPPacket+0x258>
 800d834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d836:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d83a:	2b04      	cmp	r3, #4
 800d83c:	d902      	bls.n	800d844 <xProcessReceivedTCPPacket+0x258>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 800d83e:	2300      	movs	r3, #0
 800d840:	63bb      	str	r3, [r7, #56]	; 0x38
 800d842:	e00e      	b.n	800d862 <xProcessReceivedTCPPacket+0x276>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t lOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 800d844:	2322      	movs	r3, #34	; 0x22
 800d846:	617b      	str	r3, [r7, #20]
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	3380      	adds	r3, #128	; 0x80
 800d84c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d84e:	4413      	add	r3, r2
 800d850:	1c98      	adds	r0, r3, #2
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ lOffset ] ) ),
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	699a      	ldr	r2, [r3, #24]
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800d85a:	2214      	movs	r2, #20
 800d85c:	4619      	mov	r1, r3
 800d85e:	f002 fc20 	bl	80100a2 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                    }
                }
            }

            if( xResult != pdFAIL )
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	2b00      	cmp	r3, #0
 800d866:	d054      	beq.n	800d912 <xProcessReceivedTCPPacket+0x326>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL );
 800d868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d104      	bne.n	800d878 <xProcessReceivedTCPPacket+0x28c>
 800d86e:	492b      	ldr	r1, [pc, #172]	; (800d91c <xProcessReceivedTCPPacket+0x330>)
 800d870:	f44f 6062 	mov.w	r0, #3616	; 0xe20
 800d874:	f7f3 f90e 	bl	8000a94 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 800d878:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d87a:	f7fe fd02 	bl	800c282 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 800d87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d880:	7b1b      	ldrb	r3, [r3, #12]
 800d882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d886:	2b50      	cmp	r3, #80	; 0x50
 800d888:	d904      	bls.n	800d894 <xProcessReceivedTCPPacket+0x2a8>
                {
                    prvCheckOptions( pxSocket, pxNetworkBuffer );
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	4619      	mov	r1, r3
 800d88e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d890:	f7fe fb08 	bl	800bea4 <prvCheckOptions>
                }

                usWindow = FreeRTOS_ntohs( pxProtocolHeaders->xTCPHeader.usWindow );
 800d894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d896:	89db      	ldrh	r3, [r3, #14]
 800d898:	b29b      	uxth	r3, r3
 800d89a:	021b      	lsls	r3, r3, #8
 800d89c:	b21a      	sxth	r2, r3
 800d89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a0:	89db      	ldrh	r3, [r3, #14]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	0a1b      	lsrs	r3, r3, #8
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	b21b      	sxth	r3, r3
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	b21b      	sxth	r3, r3
 800d8ae:	827b      	strh	r3, [r7, #18]
                pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800d8b0:	8a7a      	ldrh	r2, [r7, #18]
 800d8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 800d8b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d8ba:	f003 0302 	and.w	r3, r3, #2
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10a      	bne.n	800d8d8 <xProcessReceivedTCPPacket+0x2ec>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800d8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d8c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8ca:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800d8ce:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 800d8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* In prvTCPHandleState() the incoming messages will be handled
                 * depending on the current state of the connection. */
                if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800d8d8:	f107 030c 	add.w	r3, r7, #12
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d8e0:	f7ff fcf6 	bl	800d2d0 <prvTCPHandleState>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	dd05      	ble.n	800d8f6 <xProcessReceivedTCPPacket+0x30a>
                {
                    /* prvTCPHandleState() has sent a message, see if there are more to
                     * be transmitted. */
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800d8ea:	f107 030c 	add.w	r3, r7, #12
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d8f2:	f7fd ffb1 	bl	800b858 <prvTCPSendRepeated>
                        }
                    #endif /* ipconfigUSE_TCP_WIN */
                }

                if( pxNetworkBuffer != NULL )
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d005      	beq.n	800d908 <xProcessReceivedTCPPacket+0x31c>
                {
                    /* We must check if the buffer is unequal to NULL, because the
                     * socket might keep a reference to it in case a delayed ACK must be
                     * sent. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f002 fb4a 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
                    #ifndef _lint
                        /* Clear pointers that are freed. */
                        pxNetworkBuffer = NULL;
 800d904:	2300      	movs	r3, #0
 800d906:	60fb      	str	r3, [r7, #12]
                    #endif
                }

                /* And finally, calculate when this socket wants to be woken up. */
                ( void ) prvTCPNextTimeout( pxSocket );
 800d908:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d90a:	f7fe ff8d 	bl	800c828 <prvTCPNextTimeout>
                /* Return pdPASS to tell that the network buffer is 'consumed'. */
                xResult = pdPASS;
 800d90e:	2301      	movs	r3, #1
 800d910:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 800d912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    }
 800d914:	4618      	mov	r0, r3
 800d916:	3740      	adds	r7, #64	; 0x40
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	08010f84 	.word	0x08010f84

0800d920 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    static FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                                NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d920:	b580      	push	{r7, lr}
 800d922:	b08a      	sub	sp, #40	; 0x28
 800d924:	af02      	add	r7, sp, #8
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
        const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fd fddf 	bl	800b4f2 <vCastConstPointerTo_TCPPacket_t>
 800d934:	61b8      	str	r0, [r7, #24]
        FreeRTOS_Socket_t * pxReturn = NULL;
 800d936:	2300      	movs	r3, #0
 800d938:	61fb      	str	r3, [r7, #28]
        uint32_t ulInitialSequenceNumber;

        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800d93a:	4b66      	ldr	r3, [pc, #408]	; (800dad4 <prvHandleListen+0x1b4>)
 800d93c:	6958      	ldr	r0, [r3, #20]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	f7f3 f863 	bl	8000a18 <ulApplicationGetNextSequenceNumber>
 800d952:	6178      	str	r0, [r7, #20]
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );

        /* A pure SYN (without ACK) has come in, create a new socket to answer
         * it. */
        if( ulInitialSequenceNumber != 0UL )
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d054      	beq.n	800da04 <prvHandleListen+0xe4>
        {
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d960:	f003 0308 	and.w	r3, r3, #8
 800d964:	b2db      	uxtb	r3, r3
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00c      	beq.n	800d984 <prvHandleListen+0x64>
            {
                /* The flag bReuseSocket indicates that the same instance of the
                 * listening socket should be used for the connection. */
                pxReturn = pxSocket;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	61fb      	str	r3, [r7, #28]
                pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d974:	f043 0304 	orr.w	r3, r3, #4
 800d978:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	655a      	str	r2, [r3, #84]	; 0x54
 800d982:	e03f      	b.n	800da04 <prvHandleListen+0xe4>
            }
            else
            {
                /* The socket does not have the bReuseSocket flag set meaning create a
                 * new socket when a connection comes in. */
                pxReturn = NULL;
 800d984:	2300      	movs	r3, #0
 800d986:	61fb      	str	r3, [r7, #28]

                if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d994:	429a      	cmp	r2, r3
 800d996:	d31b      	bcc.n	800d9d0 <prvHandleListen+0xb0>
                {
                    FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d99c:	4619      	mov	r1, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d101      	bne.n	800d9bc <prvHandleListen+0x9c>
 800d9b8:	4b47      	ldr	r3, [pc, #284]	; (800dad8 <prvHandleListen+0x1b8>)
 800d9ba:	e000      	b.n	800d9be <prvHandleListen+0x9e>
 800d9bc:	4b47      	ldr	r3, [pc, #284]	; (800dadc <prvHandleListen+0x1bc>)
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	4847      	ldr	r0, [pc, #284]	; (800dae0 <prvHandleListen+0x1c0>)
 800d9c4:	f7f2 ffec 	bl	80009a0 <vLoggingPrintf>
                                       pxSocket->usLocalPort,
                                       pxSocket->u.xTCP.usChildCount,
                                       pxSocket->u.xTCP.usBacklog,
                                       ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d9c8:	6838      	ldr	r0, [r7, #0]
 800d9ca:	f7ff fdc7 	bl	800d55c <prvTCPSendReset>
 800d9ce:	e019      	b.n	800da04 <prvHandleListen+0xe4>
                }
                else
                {
                    FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
 800d9d0:	2206      	movs	r2, #6
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	2002      	movs	r0, #2
 800d9d6:	f7fc fbc1 	bl	800a15c <FreeRTOS_socket>
 800d9da:	6138      	str	r0, [r7, #16]
                                                      FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

                    if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <prvHandleListen+0xca>
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e8:	d103      	bne.n	800d9f2 <prvHandleListen+0xd2>
                    {
                        FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                        ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d9ea:	6838      	ldr	r0, [r7, #0]
 800d9ec:	f7ff fdb6 	bl	800d55c <prvTCPSendReset>
 800d9f0:	e008      	b.n	800da04 <prvHandleListen+0xe4>
                    }
                    else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	6938      	ldr	r0, [r7, #16]
 800d9f6:	f000 f875 	bl	800dae4 <prvTCPSocketCopy>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d001      	beq.n	800da04 <prvHandleListen+0xe4>
                    {
                        /* The socket will be connected immediately, no time for the
                         * owner to setsockopt's, therefore copy properties of the server
                         * socket to the new socket.  Only the binding might fail (due to
                         * lack of resources). */
                        pxReturn = pxNewSocket;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	61fb      	str	r3, [r7, #28]
                    }
                }
            }
        }

        if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d05f      	beq.n	800daca <prvHandleListen+0x1aa>
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d05c      	beq.n	800daca <prvHandleListen+0x1aa>
        {
            /* Map the byte stream onto the ProtocolHeaders_t for easy access to the fields. */
            const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	3322      	adds	r3, #34	; 0x22
 800da16:	4618      	mov	r0, r3
 800da18:	f7fd fd81 	bl	800b51e <vCastConstPointerTo_ProtocolHeaders_t>
 800da1c:	60f8      	str	r0, [r7, #12]
                                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );

            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800da22:	b29b      	uxth	r3, r3
 800da24:	021b      	lsls	r3, r3, #8
 800da26:	b21a      	sxth	r2, r3
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	0a1b      	lsrs	r3, r3, #8
 800da30:	b29b      	uxth	r3, r3
 800da32:	b21b      	sxth	r3, r3
 800da34:	4313      	orrs	r3, r2
 800da36:	b21b      	sxth	r3, r3
 800da38:	b29a      	uxth	r2, r3
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	879a      	strh	r2, [r3, #60]	; 0x3c
            pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800da44:	061a      	lsls	r2, r3, #24
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800da4c:	021b      	lsls	r3, r3, #8
 800da4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da52:	431a      	orrs	r2, r3
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800da5a:	0a1b      	lsrs	r3, r3, #8
 800da5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800da60:	431a      	orrs	r2, r3
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800da68:	0e1b      	lsrs	r3, r3, #24
 800da6a:	431a      	orrs	r2, r3
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	639a      	str	r2, [r3, #56]	; 0x38
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	697a      	ldr	r2, [r7, #20]
 800da74:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	061a      	lsls	r2, r3, #24
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	021b      	lsls	r3, r3, #8
 800da84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da88:	431a      	orrs	r2, r3
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	0a1b      	lsrs	r3, r3, #8
 800da90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800da94:	431a      	orrs	r2, r3
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	0e1b      	lsrs	r3, r3, #24
 800da9c:	431a      	orrs	r2, r3
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
            prvSocketSetMSS( pxReturn );
 800daa4:	69f8      	ldr	r0, [r7, #28]
 800daa6:	f7ff fd67 	bl	800d578 <prvSocketSetMSS>

            prvTCPCreateWindow( pxReturn );
 800daaa:	69f8      	ldr	r0, [r7, #28]
 800daac:	f7fe f8e4 	bl	800bc78 <prvTCPCreateWindow>

            vTCPStateChange( pxReturn, eSYN_FIRST );
 800dab0:	2103      	movs	r1, #3
 800dab2:	69f8      	ldr	r0, [r7, #28]
 800dab4:	f7fe fc0a 	bl	800c2cc <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            ( void ) memcpy( ( void * ) ( pxReturn->u.xTCP.xPacket.u.ucLastPacket ), ( const void * ) ( pxNetworkBuffer->pucEthernetBuffer ), sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	2246      	movs	r2, #70	; 0x46
 800dac4:	4619      	mov	r1, r3
 800dac6:	f002 faec 	bl	80100a2 <memcpy>
        }

        return pxReturn;
 800daca:	69fb      	ldr	r3, [r7, #28]
    }
 800dacc:	4618      	mov	r0, r3
 800dace:	3720      	adds	r7, #32
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20000014 	.word	0x20000014
 800dad8:	08010fb8 	.word	0x08010fb8
 800dadc:	08010fbc 	.word	0x08010fbc
 800dae0:	08010fc0 	.word	0x08010fc0

0800dae4 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                        FreeRTOS_Socket_t * pxSocket )
    {
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	69da      	ldr	r2, [r3, #28]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	61da      	str	r2, [r3, #28]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	6a1a      	ldr	r2, [r3, #32]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	621a      	str	r2, [r3, #32]
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	66da      	str	r2, [r3, #108]	; 0x6c
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	671a      	str	r2, [r3, #112]	; 0x70
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	665a      	str	r2, [r3, #100]	; 0x64
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	669a      	str	r2, [r3, #104]	; 0x68
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                /* Child socket of listening sockets will inherit the Socket Set
                 * Otherwise the owner has no chance of including it into the set. */
                if( pxSocket->pxSocketSet != NULL )
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db46:	2b00      	cmp	r3, #0
 800db48:	d009      	beq.n	800db5e <prvTCPSocketCopy+0x7a>
                {
                    pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	629a      	str	r2, [r3, #40]	; 0x28
                    pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db56:	f043 0205 	orr.w	r2, r3, #5
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	62da      	str	r2, [r3, #44]	; 0x2c
                }
            }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800db5e:	4b1c      	ldr	r3, [pc, #112]	; (800dbd0 <prvTCPSocketCopy+0xec>)
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	613b      	str	r3, [r7, #16]
        xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db68:	021b      	lsls	r3, r3, #8
 800db6a:	b21a      	sxth	r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db70:	0a1b      	lsrs	r3, r3, #8
 800db72:	b29b      	uxth	r3, r3
 800db74:	b21b      	sxth	r3, r3
 800db76:	4313      	orrs	r3, r2
 800db78:	b21b      	sxth	r3, r3
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	81fb      	strh	r3, [r7, #14]
                 * orphan temporarily.  Once this socket is really connected, the owner of
                 * the server socket will be notified. */

                /* When bPassQueued is true, the socket is an orphan until it gets
                 * connected. */
                pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800db84:	f043 0304 	orr.w	r3, r3, #4
 800db88:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
                }
            }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800db98:	3301      	adds	r3, #1
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                                 pxSocket->u.xTCP.usChildCount,
                                 pxSocket->u.xTCP.usBacklog,
                                 ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800dba2:	f107 010c 	add.w	r1, r7, #12
 800dba6:	2301      	movs	r3, #1
 800dba8:	2208      	movs	r2, #8
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7fc fb74 	bl	800a298 <vSocketBind>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d005      	beq.n	800dbc2 <prvTCPSocketCopy+0xde>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
            ( void ) vSocketClose( pxNewSocket );
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7fc fc1a 	bl	800a3f0 <vSocketClose>
            xResult = pdFALSE;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	617b      	str	r3, [r7, #20]
 800dbc0:	e001      	b.n	800dbc6 <prvTCPSocketCopy+0xe2>
        }
        else
        {
            xResult = pdTRUE;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	617b      	str	r3, [r7, #20]
        }

        return xResult;
 800dbc6:	697b      	ldr	r3, [r7, #20]
    }
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3718      	adds	r7, #24
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20000014 	.word	0x20000014

0800dbd4 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	db02      	blt.n	800dbec <FreeRTOS_GetTCPStateName+0x18>
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2b0c      	cmp	r3, #12
 800dbea:	dd04      	ble.n	800dbf6 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 800dbec:	230d      	movs	r3, #13
 800dbee:	60fb      	str	r3, [r7, #12]
                xIndex--;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	3b01      	subs	r3, #1
 800dbf4:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 800dbf6:	4a05      	ldr	r2, [pc, #20]	; (800dc0c <FreeRTOS_GetTCPStateName+0x38>)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	08011430 	.word	0x08011430

0800dc10 <xTCPCheckNewClient>:
 * @param[in] pxSocket: The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc1c:	021b      	lsls	r3, r3, #8
 800dc1e:	b21a      	sxth	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc24:	0a1b      	lsrs	r3, r3, #8
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	b21b      	sxth	r3, r3
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	b21b      	sxth	r3, r3
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 800dc32:	2300      	movs	r3, #0
 800dc34:	61bb      	str	r3, [r7, #24]
        const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800dc36:	4b18      	ldr	r3, [pc, #96]	; (800dc98 <xTCPCheckNewClient+0x88>)
 800dc38:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800dc3a:	4b18      	ldr	r3, [pc, #96]	; (800dc9c <xTCPCheckNewClient+0x8c>)
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	61fb      	str	r3, [r7, #28]
 800dc40:	e020      	b.n	800dc84 <xTCPCheckNewClient+0x74>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d118      	bne.n	800dc7e <xTCPCheckNewClient+0x6e>
            {
                pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fd fc6f 	bl	800b534 <vCastPointerTo_FreeRTOS_Socket_t>
 800dc56:	60f8      	str	r0, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800dc5e:	2b06      	cmp	r3, #6
 800dc60:	d10d      	bne.n	800dc7e <xTCPCheckNewClient+0x6e>
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc68:	f003 0302 	and.w	r3, r3, #2
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d005      	beq.n	800dc7e <xTCPCheckNewClient+0x6e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	655a      	str	r2, [r3, #84]	; 0x54
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
                    xResult = pdTRUE;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	61bb      	str	r3, [r7, #24]
                    break;
 800dc7c:	e006      	b.n	800dc8c <xTCPCheckNewClient+0x7c>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	61fb      	str	r3, [r7, #28]
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800dc84:	69fa      	ldr	r2, [r7, #28]
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d1da      	bne.n	800dc42 <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 800dc8c:	69bb      	ldr	r3, [r7, #24]
    }
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3720      	adds	r7, #32
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	2000c86c 	.word	0x2000c86c
 800dc9c:	2000c864 	.word	0x2000c864

0800dca0 <FreeRTOS_min_int32>:
        {
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	bfa8      	it	ge
 800dcb2:	4613      	movge	r3, r2
        }
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <FreeRTOS_min_uint32>:
        {
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	bf28      	it	cs
 800dcd2:	4613      	movcs	r3, r2
        }
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <vCastPointerTo_TCPSegment_t>:
 * @brief Utility function to cast pointer of a type to pointer of type TCPSegment_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( TCPSegment_t )
    {
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
        return ( TCPSegment_t * ) pvArgument;
 800dce8:	687b      	ldr	r3, [r7, #4]
    }
 800dcea:	4618      	mov	r0, r3
 800dcec:	370c      	adds	r7, #12
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr

0800dcf6 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 800dcf6:	b480      	push	{r7}
 800dcf8:	b085      	sub	sp, #20
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
 800dcfe:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 800dd00:	683a      	ldr	r2, [r7, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	1ad3      	subs	r3, r2, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	db02      	blt.n	800dd10 <xSequenceLessThanOrEqual+0x1a>
            {
                xResult = pdTRUE;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	60fb      	str	r3, [r7, #12]
 800dd0e:	e001      	b.n	800dd14 <xSequenceLessThanOrEqual+0x1e>
            }
            else
            {
                xResult = pdFALSE;
 800dd10:	2300      	movs	r3, #0
 800dd12:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800dd14:	68fb      	ldr	r3, [r7, #12]
        }
 800dd16:	4618      	mov	r0, r3
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThan( uint32_t a,
                                                        uint32_t b )
        {
 800dd22:	b480      	push	{r7}
 800dd24:	b085      	sub	sp, #20
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a < b */
            if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 800dd2c:	683a      	ldr	r2, [r7, #0]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	3b01      	subs	r3, #1
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	db02      	blt.n	800dd3e <xSequenceLessThan+0x1c>
            {
                xResult = pdTRUE;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	60fb      	str	r3, [r7, #12]
 800dd3c:	e001      	b.n	800dd42 <xSequenceLessThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800dd42:	68fb      	ldr	r3, [r7, #12]
        }
 800dd44:	4618      	mov	r0, r3
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a,
                                                           uint32_t b )
        {
 800dd50:	b480      	push	{r7}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a > b */
            if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	3b01      	subs	r3, #1
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	db02      	blt.n	800dd6c <xSequenceGreaterThan+0x1c>
            {
                xResult = pdTRUE;
 800dd66:	2301      	movs	r3, #1
 800dd68:	60fb      	str	r3, [r7, #12]
 800dd6a:	e001      	b.n	800dd70 <xSequenceGreaterThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800dd70:	68fb      	ldr	r3, [r7, #12]
        }
 800dd72:	4618      	mov	r0, r3
 800dd74:	3714      	adds	r7, #20
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr

0800dd7e <xSequenceGreaterThanOrEqual>:
 * @return pdTRUE if a>=b, else pdFALSE.
 */

    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 800dd7e:	b480      	push	{r7}
 800dd80:	b085      	sub	sp, #20
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	db02      	blt.n	800dd98 <xSequenceGreaterThanOrEqual+0x1a>
        {
            xResult = pdTRUE;
 800dd92:	2301      	movs	r3, #1
 800dd94:	60fb      	str	r3, [r7, #12]
 800dd96:	e001      	b.n	800dd9c <xSequenceGreaterThanOrEqual+0x1e>
        }
        else
        {
            xResult = pdFALSE;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
    }
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr

0800ddaa <vListInsertFifo>:
 * @param[in] pxList: The list in which the item is to inserted.
 * @param[in] pxNewListItem: The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b082      	sub	sp, #8
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
 800ddb2:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3308      	adds	r3, #8
 800ddb8:	461a      	mov	r2, r3
 800ddba:	6839      	ldr	r1, [r7, #0]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 f81f 	bl	800de00 <vListInsertGeneric>
        }
 800ddc2:	bf00      	nop
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer: The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b082      	sub	sp, #8
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
        pxTimer->ulBorn = xTaskGetTickCount();
 800ddd2:	f7f7 ffab 	bl	8005d2c <xTaskGetTickCount>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	601a      	str	r2, [r3, #0]
    }
 800dddc:	bf00      	nop
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <ulTimerGetAge>:
 * @param[in] pxTimer: The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
        return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 800ddec:	f7f7 ff9e 	bl	8005d2c <xTaskGetTickCount>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	1ad3      	subs	r3, r2, r3
    }
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <vListInsertGeneric>:
 * @param[in] pxWhere: Where should the item be inserted.
 */
    static void vListInsertGeneric( List_t * const pxList,
                                    ListItem_t * const pxNewListItem,
                                    MiniListItem_t * const pxWhere )
    {
 800de00:	b480      	push	{r7}
 800de02:	b085      	sub	sp, #20
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	607a      	str	r2, [r7, #4]
        /* Insert a new list item into pxList, it does not sort the list,
         * but it puts the item just before xListEnd, so it will be the last item
         * returned by listGET_HEAD_ENTRY() */
        pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	605a      	str	r2, [r3, #4]
        pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	689a      	ldr	r2, [r3, #8]
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	609a      	str	r2, [r3, #8]
        pxWhere->pxPrevious->pxNext = pxNewListItem;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	68ba      	ldr	r2, [r7, #8]
 800de20:	605a      	str	r2, [r3, #4]
        pxWhere->pxPrevious = pxNewListItem;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	609a      	str	r2, [r3, #8]

        /* Remember which list the item is in. */
        listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	68fa      	ldr	r2, [r7, #12]
 800de2c:	611a      	str	r2, [r3, #16]

        ( pxList->uxNumberOfItems )++;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	601a      	str	r2, [r3, #0]
    }
 800de38:	bf00      	nop
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
            BaseType_t xIndex, xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 800de4a:	4826      	ldr	r0, [pc, #152]	; (800dee4 <prvCreateSectors+0xa0>)
 800de4c:	f7f6 fd2e 	bl	80048ac <vListInitialise>
            xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 800de50:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800de54:	f7f9 f8f4 	bl	8007040 <pvPortMalloc>
 800de58:	4603      	mov	r3, r0
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7ff ff40 	bl	800dce0 <vCastPointerTo_TCPSegment_t>
 800de60:	4602      	mov	r2, r0
 800de62:	4b21      	ldr	r3, [pc, #132]	; (800dee8 <prvCreateSectors+0xa4>)
 800de64:	601a      	str	r2, [r3, #0]

            if( xTCPSegments == NULL )
 800de66:	4b20      	ldr	r3, [pc, #128]	; (800dee8 <prvCreateSectors+0xa4>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d102      	bne.n	800de74 <prvCreateSectors+0x30>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
                                         ( unsigned ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

                xReturn = pdFAIL;
 800de6e:	2300      	movs	r3, #0
 800de70:	603b      	str	r3, [r7, #0]
 800de72:	e032      	b.n	800deda <prvCreateSectors+0x96>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800de74:	4b1c      	ldr	r3, [pc, #112]	; (800dee8 <prvCreateSectors+0xa4>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800de7c:	2100      	movs	r1, #0
 800de7e:	4618      	mov	r0, r3
 800de80:	f002 f933 	bl	80100ea <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800de84:	2300      	movs	r3, #0
 800de86:	607b      	str	r3, [r7, #4]
 800de88:	e022      	b.n	800ded0 <prvCreateSectors+0x8c>
                {
                    /* Could call vListInitialiseItem here but all data has been
                    * nulled already.  Set the owner to a segment descriptor. */
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800de8a:	4b17      	ldr	r3, [pc, #92]	; (800dee8 <prvCreateSectors+0xa4>)
 800de8c:	6819      	ldr	r1, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	019a      	lsls	r2, r3, #6
 800de92:	4b15      	ldr	r3, [pc, #84]	; (800dee8 <prvCreateSectors+0xa4>)
 800de94:	6818      	ldr	r0, [r3, #0]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	019b      	lsls	r3, r3, #6
 800de9a:	4403      	add	r3, r0
 800de9c:	440a      	add	r2, r1
 800de9e:	639a      	str	r2, [r3, #56]	; 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800dea0:	4b11      	ldr	r3, [pc, #68]	; (800dee8 <prvCreateSectors+0xa4>)
 800dea2:	6819      	ldr	r1, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	019a      	lsls	r2, r3, #6
 800dea8:	4b0f      	ldr	r3, [pc, #60]	; (800dee8 <prvCreateSectors+0xa4>)
 800deaa:	6818      	ldr	r0, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	019b      	lsls	r3, r3, #6
 800deb0:	4403      	add	r3, r0
 800deb2:	440a      	add	r2, r1
 800deb4:	625a      	str	r2, [r3, #36]	; 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 800deb6:	4b0c      	ldr	r3, [pc, #48]	; (800dee8 <prvCreateSectors+0xa4>)
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	019b      	lsls	r3, r3, #6
 800debe:	4413      	add	r3, r2
 800dec0:	332c      	adds	r3, #44	; 0x2c
 800dec2:	4619      	mov	r1, r3
 800dec4:	4807      	ldr	r0, [pc, #28]	; (800dee4 <prvCreateSectors+0xa0>)
 800dec6:	f7ff ff70 	bl	800ddaa <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	3301      	adds	r3, #1
 800dece:	607b      	str	r3, [r7, #4]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2bef      	cmp	r3, #239	; 0xef
 800ded4:	ddd9      	ble.n	800de8a <prvCreateSectors+0x46>
                }

                xReturn = pdPASS;
 800ded6:	2301      	movs	r3, #1
 800ded8:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 800deda:	683b      	ldr	r3, [r7, #0]
        }
 800dedc:	4618      	mov	r0, r3
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	2000bcd0 	.word	0x2000bcd0
 800dee8:	2000bccc 	.word	0x2000bccc

0800deec <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	613b      	str	r3, [r7, #16]

            /* Find a segment with a given sequence number in the list of received
             * segments. */
            pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	33ac      	adds	r3, #172	; 0xac
 800defe:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	617b      	str	r3, [r7, #20]
 800df06:	e010      	b.n	800df2a <xTCPWindowRxFind+0x3e>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7ff fee7 	bl	800dce0 <vCastPointerTo_TCPSegment_t>
 800df12:	60b8      	str	r0, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d102      	bne.n	800df24 <xTCPWindowRxFind+0x38>
                {
                    pxReturn = pxSegment;
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	613b      	str	r3, [r7, #16]
                    break;
 800df22:	e006      	b.n	800df32 <xTCPWindowRxFind+0x46>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	617b      	str	r3, [r7, #20]
            for( pxIterator = listGET_NEXT( pxEnd );
 800df2a:	697a      	ldr	r2, [r7, #20]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d1ea      	bne.n	800df08 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 800df32:	693b      	ldr	r3, [r7, #16]
        }
 800df34:	4618      	mov	r0, r3
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
 800df48:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800df4a:	4b2a      	ldr	r3, [pc, #168]	; (800dff4 <xTCPWindowNew+0xb8>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d102      	bne.n	800df58 <xTCPWindowNew+0x1c>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
                pxSegment = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	617b      	str	r3, [r7, #20]
 800df56:	e047      	b.n	800dfe8 <xTCPWindowNew+0xac>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800df58:	4b26      	ldr	r3, [pc, #152]	; (800dff4 <xTCPWindowNew+0xb8>)
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	613b      	str	r3, [r7, #16]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff febc 	bl	800dce0 <vCastPointerTo_TCPSegment_t>
 800df68:	6178      	str	r0, [r7, #20]

                configASSERT( pxItem != NULL );
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d104      	bne.n	800df7a <xTCPWindowNew+0x3e>
 800df70:	4921      	ldr	r1, [pc, #132]	; (800dff8 <xTCPWindowNew+0xbc>)
 800df72:	f240 2035 	movw	r0, #565	; 0x235
 800df76:	f7f2 fd8d 	bl	8000a94 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d104      	bne.n	800df8a <xTCPWindowNew+0x4e>
 800df80:	491d      	ldr	r1, [pc, #116]	; (800dff8 <xTCPWindowNew+0xbc>)
 800df82:	f240 2036 	movw	r0, #566	; 0x236
 800df86:	f7f2 fd85 	bl	8000a94 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 800df8a:	6938      	ldr	r0, [r7, #16]
 800df8c:	f7f6 fd18 	bl	80049c0 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d006      	beq.n	800dfa4 <xTCPWindowNew+0x68>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	33a4      	adds	r3, #164	; 0xa4
 800df9a:	6939      	ldr	r1, [r7, #16]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7ff ff04 	bl	800ddaa <vListInsertFifo>
 800dfa2:	e005      	b.n	800dfb0 <xTCPWindowNew+0x74>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	3390      	adds	r3, #144	; 0x90
 800dfa8:	6939      	ldr	r1, [r7, #16]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7ff fefd 	bl	800ddaa <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	3310      	adds	r3, #16
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7ff ff08 	bl	800ddca <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <xTCPWindowNew+0x8e>
 800dfc6:	2101      	movs	r1, #1
 800dfc8:	e000      	b.n	800dfcc <xTCPWindowNew+0x90>
 800dfca:	2100      	movs	r1, #0
 800dfcc:	697a      	ldr	r2, [r7, #20]
 800dfce:	7d93      	ldrb	r3, [r2, #22]
 800dfd0:	f361 0382 	bfi	r3, r1, #2, #1
 800dfd4:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	601a      	str	r2, [r3, #0]
                        }
                    }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 800dfe8:	697b      	ldr	r3, [r7, #20]
        }
 800dfea:	4618      	mov	r0, r3
 800dfec:	3718      	adds	r7, #24
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	2000bcd0 	.word	0x2000bcd0
 800dff8:	08011094 	.word	0x08011094

0800dffc <xTCPWindowRxEmpty>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 800e00e:	2300      	movs	r3, #0
 800e010:	60fb      	str	r3, [r7, #12]
 800e012:	e00f      	b.n	800e034 <xTCPWindowRxEmpty+0x38>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	691a      	ldr	r2, [r3, #16]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	699b      	ldr	r3, [r3, #24]
 800e01c:	4619      	mov	r1, r3
 800e01e:	4610      	mov	r0, r2
 800e020:	f7ff fead 	bl	800dd7e <xSequenceGreaterThanOrEqual>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d002      	beq.n	800e030 <xTCPWindowRxEmpty+0x34>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 800e02a:	2301      	movs	r3, #1
 800e02c:	60fb      	str	r3, [r7, #12]
 800e02e:	e001      	b.n	800e034 <xTCPWindowRxEmpty+0x38>
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
                                         ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 800e030:	2300      	movs	r3, #0
 800e032:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 800e034:	68fb      	ldr	r3, [r7, #12]
        }
 800e036:	4618      	mov	r0, r3
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <xTCPWindowGetHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 800e03e:	b580      	push	{r7, lr}
 800e040:	b084      	sub	sp, #16
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d102      	bne.n	800e054 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	e00b      	b.n	800e06c <xTCPWindowGetHead+0x2e>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	60bb      	str	r3, [r7, #8]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	4618      	mov	r0, r3
 800e060:	f7ff fe3e 	bl	800dce0 <vCastPointerTo_TCPSegment_t>
 800e064:	60f8      	str	r0, [r7, #12]

                ( void ) uxListRemove( pxItem );
 800e066:	68b8      	ldr	r0, [r7, #8]
 800e068:	f7f6 fcaa 	bl	80049c0 <uxListRemove>
            }

            return pxSegment;
 800e06c:	68fb      	ldr	r3, [r7, #12]
        }
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <xTCPWindowPeekHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 800e076:	b580      	push	{r7, lr}
 800e078:	b084      	sub	sp, #16
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d102      	bne.n	800e08c <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 800e086:	2300      	movs	r3, #0
 800e088:	60fb      	str	r3, [r7, #12]
 800e08a:	e008      	b.n	800e09e <xTCPWindowPeekHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	60bb      	str	r3, [r7, #8]
                pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff fe22 	bl	800dce0 <vCastPointerTo_TCPSegment_t>
 800e09c:	60f8      	str	r0, [r7, #12]
            }

            return pxReturn;
 800e09e:	68fb      	ldr	r3, [r7, #12]
        }
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3710      	adds	r7, #16
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment: The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d004      	beq.n	800e0c2 <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	3318      	adds	r3, #24
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7f6 fc7f 	bl	80049c0 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0UL;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0L;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0UL;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d004      	beq.n	800e0e6 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	332c      	adds	r3, #44	; 0x2c
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7f6 fc6d 	bl	80049c0 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	332c      	adds	r3, #44	; 0x2c
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	4803      	ldr	r0, [pc, #12]	; (800e0fc <vTCPWindowFree+0x54>)
 800e0ee:	f7ff fe5c 	bl	800ddaa <vListInsertFifo>
        }
 800e0f2:	bf00      	nop
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	2000bcd0 	.word	0x2000bcd0

0800e100 <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 800e108:	2300      	movs	r3, #0
 800e10a:	613b      	str	r3, [r7, #16]
 800e10c:	e020      	b.n	800e150 <vTCPWindowDestroy+0x50>
            {
                if( xRound != 0 )
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d003      	beq.n	800e11c <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	33a4      	adds	r3, #164	; 0xa4
 800e118:	617b      	str	r3, [r7, #20]
 800e11a:	e002      	b.n	800e122 <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	3390      	adds	r3, #144	; 0x90
 800e120:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	689b      	ldr	r3, [r3, #8]
 800e126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12a:	d10e      	bne.n	800e14a <vTCPWindowDestroy+0x4a>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800e12c:	e009      	b.n	800e142 <vTCPWindowDestroy+0x42>
                    {
                        pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	4618      	mov	r0, r3
 800e136:	f7ff fdd3 	bl	800dce0 <vCastPointerTo_TCPSegment_t>
 800e13a:	60f8      	str	r0, [r7, #12]
                        vTCPWindowFree( pxSegment );
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7ff ffb3 	bl	800e0a8 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1f1      	bne.n	800e12e <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	3301      	adds	r3, #1
 800e14e:	613b      	str	r3, [r7, #16]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	2b01      	cmp	r3, #1
 800e154:	dddb      	ble.n	800e10e <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 800e156:	bf00      	nop
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <vTCPWindowCreate>:
                           uint32_t ulRxWindowLength,
                           uint32_t ulTxWindowLength,
                           uint32_t ulAckNumber,
                           uint32_t ulSequenceNumber,
                           uint32_t ulMSS )
    {
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
 800e16c:	603b      	str	r3, [r7, #0]
        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( xTCPSegments == NULL )
 800e16e:	4b17      	ldr	r3, [pc, #92]	; (800e1cc <vTCPWindowCreate+0x6c>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <vTCPWindowCreate+0x1a>
                {
                    ( void ) prvCreateSectors();
 800e176:	f7ff fe65 	bl	800de44 <prvCreateSectors>
                }

                vListInitialise( &( pxWindow->xTxSegments ) );
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	3390      	adds	r3, #144	; 0x90
 800e17e:	4618      	mov	r0, r3
 800e180:	f7f6 fb94 	bl	80048ac <vListInitialise>
                vListInitialise( &( pxWindow->xRxSegments ) );
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	33a4      	adds	r3, #164	; 0xa4
 800e188:	4618      	mov	r0, r3
 800e18a:	f7f6 fb8f 	bl	80048ac <vListInitialise>

                vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3340      	adds	r3, #64	; 0x40
 800e192:	4618      	mov	r0, r3
 800e194:	f7f6 fb8a 	bl	80048ac <vListInitialise>
                vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	3354      	adds	r3, #84	; 0x54
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7f6 fb85 	bl	80048ac <vListInitialise>
                vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3368      	adds	r3, #104	; 0x68
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7f6 fb80 	bl	80048ac <vListInitialise>
        {
            FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
                                     ulRxWindowLength, ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	69ba      	ldr	r2, [r7, #24]
 800e1bc:	6839      	ldr	r1, [r7, #0]
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f000 f806 	bl	800e1d0 <vTCPWindowInit>
    }
 800e1c4:	bf00      	nop
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	2000bccc 	.word	0x2000bccc

0800e1d0 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 800e1d0:	b480      	push	{r7}
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
 800e1dc:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 800e1de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e1e2:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0UL;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	7813      	ldrb	r3, [r2, #0]
 800e1ee:	f043 0301 	orr.w	r3, r3, #1
 800e1f2:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0UL )
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d024      	beq.n	800e244 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800e200:	2b00      	cmp	r3, #0
 800e202:	d004      	beq.n	800e20e <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	b29a      	uxth	r2, r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e214:	461a      	mov	r2, r3
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	4293      	cmp	r3, r2
 800e21a:	d304      	bcc.n	800e226 <vTCPWindowInit+0x56>
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e222:	2b00      	cmp	r3, #0
 800e224:	d10e      	bne.n	800e244 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	685a      	ldr	r2, [r3, #4]
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e230:	683a      	ldr	r2, [r7, #0]
 800e232:	fb02 f203 	mul.w	r2, r2, r3
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	697a      	ldr	r2, [r7, #20]
 800e248:	639a      	str	r2, [r3, #56]	; 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	68ba      	ldr	r2, [r7, #8]
 800e25a:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	635a      	str	r2, [r3, #52]	; 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	629a      	str	r2, [r3, #40]	; 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800e27a:	bf00      	nop
 800e27c:	371c      	adds	r7, #28
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 800e286:	b580      	push	{r7, lr}
 800e288:	b08a      	sub	sp, #40	; 0x28
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	60f8      	str	r0, [r7, #12]
 800e28e:	60b9      	str	r1, [r7, #8]
 800e290:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 800e292:	2300      	movs	r3, #0
 800e294:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	4413      	add	r3, r2
 800e29c:	61fb      	str	r3, [r7, #28]
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	33ac      	adds	r3, #172	; 0xac
 800e2a2:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	623b      	str	r3, [r7, #32]
 800e2aa:	e02a      	b.n	800e302 <xTCPWindowRxConfirm+0x7c>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e2ac:	6a3b      	ldr	r3, [r7, #32]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff fd15 	bl	800dce0 <vCastPointerTo_TCPSegment_t>
 800e2b6:	6178      	str	r0, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	68b9      	ldr	r1, [r7, #8]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7ff fd5d 	bl	800dd7e <xSequenceGreaterThanOrEqual>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d018      	beq.n	800e2fc <xTCPWindowRxConfirm+0x76>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	69f9      	ldr	r1, [r7, #28]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7ff fd26 	bl	800dd22 <xSequenceLessThan>
 800e2d6:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00f      	beq.n	800e2fc <xTCPWindowRxConfirm+0x76>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00a      	beq.n	800e2f8 <xTCPWindowRxConfirm+0x72>
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	f7ff fd18 	bl	800dd22 <xSequenceLessThan>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <xTCPWindowRxConfirm+0x76>
                    {
                        pxBest = pxSegment;
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	627b      	str	r3, [r7, #36]	; 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800e302:	6a3a      	ldr	r2, [r7, #32]
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	429a      	cmp	r2, r3
 800e308:	d1d0      	bne.n	800e2ac <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 800e30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d003      	beq.n	800e318 <xTCPWindowRxConfirm+0x92>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e312:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 800e314:	68ba      	ldr	r2, [r7, #8]
 800e316:	429a      	cmp	r2, r3
                                         pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
                                         pxBest->lDataLength,
                                         pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
            }

            return pxBest;
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800e31a:	4618      	mov	r0, r3
 800e31c:	3728      	adds	r7, #40	; 0x28
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
	...

0800e324 <lTCPWindowRxCheck>:
 */
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace )
        {
 800e324:	b580      	push	{r7, lr}
 800e326:	b08c      	sub	sp, #48	; 0x30
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
 800e330:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber, ulLast, ulSavedSequenceNumber, ulIntermediateResult = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	623b      	str	r3, [r7, #32]
             * or there is not enough space.
             *
             * As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
             * if more Rx data may be passed to the user after this packet. */

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0UL;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	631a      	str	r2, [r3, #48]	; 0x30

            if( ulCurrentSequenceNumber == ulSequenceNumber )
 800e34a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d143      	bne.n	800e3da <lTCPWindowRxCheck+0xb6>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulLength > ulSpace )
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	429a      	cmp	r2, r3
 800e358:	d903      	bls.n	800e362 <lTCPWindowRxCheck+0x3e>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
                    lReturn = -1;
 800e35a:	f04f 33ff 	mov.w	r3, #4294967295
 800e35e:	627b      	str	r3, [r7, #36]	; 0x24
 800e360:	e0bd      	b.n	800e4de <lTCPWindowRxCheck+0x1ba>
                }
                else
                {
                    ulCurrentSequenceNumber += ulLength;
 800e362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	4413      	add	r3, r2
 800e368:	62fb      	str	r3, [r7, #44]	; 0x2c

                    if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e370:	2b00      	cmp	r3, #0
 800e372:	d02c      	beq.n	800e3ce <lTCPWindowRxCheck+0xaa>
                    {
                        ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	617b      	str	r3, [r7, #20]
                         * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                         * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                         * clean them out. */
                        do
                        {
                            pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	68b9      	ldr	r1, [r7, #8]
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f7ff ff82 	bl	800e286 <xTCPWindowRxConfirm>
 800e382:	61b8      	str	r0, [r7, #24]

                            if( pxFound != NULL )
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <lTCPWindowRxCheck+0x6c>
                            {
                                /* Remove it because it will be passed to user directly. */
                                vTCPWindowFree( pxFound );
 800e38a:	69b8      	ldr	r0, [r7, #24]
 800e38c:	f7ff fe8c 	bl	800e0a8 <vTCPWindowFree>
                            }
                        } while( pxFound != NULL );
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1f0      	bne.n	800e378 <lTCPWindowRxCheck+0x54>

                        /*  Check for following segments that are already in the
                         * queue and increment ulCurrentSequenceNumber. */
                        for( ; ; )
                        {
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800e396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	f7ff fda7 	bl	800deec <xTCPWindowRxFind>
 800e39e:	61b8      	str	r0, [r7, #24]

                            if( pxFound == NULL )
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d009      	beq.n	800e3ba <lTCPWindowRxCheck+0x96>
                            {
                                break;
                            }

                            ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ae:	4413      	add	r3, r2
 800e3b0:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* As all packet below this one have been passed to the
                             * user it can be discarded. */
                            vTCPWindowFree( pxFound );
 800e3b2:	69b8      	ldr	r0, [r7, #24]
 800e3b4:	f7ff fe78 	bl	800e0a8 <vTCPWindowFree>
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800e3b8:	e7ed      	b.n	800e396 <lTCPWindowRxCheck+0x72>
                                break;
 800e3ba:	bf00      	nop
                        }

                        if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d004      	beq.n	800e3ce <lTCPWindowRxCheck+0xaa>
                        {
                            /*  After the current data-package, there is more data
                             * to be popped. */
                            pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800e3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	1ad2      	subs	r2, r2, r3
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	631a      	str	r2, [r3, #48]	; 0x30
                                                         listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                            }
                        }
                    }

                    pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3d2:	611a      	str	r2, [r3, #16]

                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    lReturn = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3d8:	e081      	b.n	800e4de <lTCPWindowRxCheck+0x1ba>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d103      	bne.n	800e3ec <lTCPWindowRxCheck+0xc8>
            {
                /* Looks like a TCP keep-alive message.  Do not accept/store Rx data
                 * ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
                lReturn = -1;
 800e3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ea:	e078      	b.n	800e4de <lTCPWindowRxCheck+0x1ba>
                /* The packet is not the one expected.  See if it falls within the Rx
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */
                ulLast = ulSequenceNumber + ulLength;
 800e3ec:	68ba      	ldr	r2, [r7, #8]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	62bb      	str	r3, [r7, #40]	; 0x28

                ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 800e3f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f8:	1ad3      	subs	r3, r2, r3
 800e3fa:	623b      	str	r3, [r7, #32]
                /* The cast from unsigned long to signed long is on purpose. */
                lDistance = ( int32_t ) ulIntermediateResult;
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	61fb      	str	r3, [r7, #28]

                if( lDistance <= 0 )
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	2b00      	cmp	r3, #0
 800e404:	dc03      	bgt.n	800e40e <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                    lReturn = -1;
 800e406:	f04f 33ff 	mov.w	r3, #4294967295
 800e40a:	627b      	str	r3, [r7, #36]	; 0x24
 800e40c:	e067      	b.n	800e4de <lTCPWindowRxCheck+0x1ba>
                }
                else if( lDistance > ( int32_t ) ulSpace )
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	69fa      	ldr	r2, [r7, #28]
 800e412:	429a      	cmp	r2, r3
 800e414:	dd03      	ble.n	800e41e <lTCPWindowRxCheck+0xfa>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
                    lReturn = -1;
 800e416:	f04f 33ff 	mov.w	r3, #4294967295
 800e41a:	627b      	str	r3, [r7, #36]	; 0x24
 800e41c:	e05f      	b.n	800e4de <lTCPWindowRxCheck+0x1ba>
                     * This is useful because subsequent packets will be SACK'd with
                     * single one message
                     */
                    for( ; ; )
                    {
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800e41e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f7ff fd63 	bl	800deec <xTCPWindowRxFind>
 800e426:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d006      	beq.n	800e43c <lTCPWindowRxCheck+0x118>
                        {
                            break;
                        }

                        ulLast += ( uint32_t ) pxFound->lDataLength;
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	461a      	mov	r2, r3
 800e434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e436:	4413      	add	r3, r2
 800e438:	62bb      	str	r3, [r7, #40]	; 0x28
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800e43a:	e7f0      	b.n	800e41e <lTCPWindowRxCheck+0xfa>
                            break;
 800e43c:	bf00      	nop
                                                 ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
                    }

                    /* Now prepare the SACK message.
                     * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
                    pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	4a29      	ldr	r2, [pc, #164]	; (800e4e8 <lTCPWindowRxCheck+0x1c4>)
 800e442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* First sequence number that we received. */
                    pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	061a      	lsls	r2, r3, #24
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	021b      	lsls	r3, r3, #8
 800e44e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e452:	431a      	orrs	r2, r3
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	0a1b      	lsrs	r3, r3, #8
 800e458:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e45c:	431a      	orrs	r2, r3
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	0e1b      	lsrs	r3, r3, #24
 800e462:	431a      	orrs	r2, r3
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                    /* Last + 1 */
                    pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 800e46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46c:	061a      	lsls	r2, r3, #24
 800e46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e470:	021b      	lsls	r3, r3, #8
 800e472:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e476:	431a      	orrs	r2, r3
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	0a1b      	lsrs	r3, r3, #8
 800e47c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e480:	431a      	orrs	r2, r3
 800e482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e484:	0e1b      	lsrs	r3, r3, #24
 800e486:	431a      	orrs	r2, r3
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

                    /* Which make 12 (3*4) option bytes. */
                    pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	220c      	movs	r2, #12
 800e492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                    pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800e496:	68b9      	ldr	r1, [r7, #8]
 800e498:	68f8      	ldr	r0, [r7, #12]
 800e49a:	f7ff fd27 	bl	800deec <xTCPWindowRxFind>
 800e49e:	61b8      	str	r0, [r7, #24]

                    if( pxFound != NULL )
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d003      	beq.n	800e4ae <lTCPWindowRxCheck+0x18a>
                    {
                        /* This out-of-sequence packet has been received for a
                         * second time.  It is already stored but do send a SACK
                         * again. */
                        lReturn = -1;
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e4ac:	e017      	b.n	800e4de <lTCPWindowRxCheck+0x1ba>
                    }
                    else
                    {
                        pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	68b9      	ldr	r1, [r7, #8]
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f7ff fd41 	bl	800df3c <xTCPWindowNew>
 800e4ba:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d107      	bne.n	800e4d2 <lTCPWindowRxCheck+0x1ae>
                        {
                            /* Can not send a SACK, because the segment cannot be
                             * stored. */
                            pxWindow->ucOptionLength = 0U;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                            /* Needs to be stored but there is no segment
                             * available. */
                            lReturn = -1;
 800e4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e4d0:	e005      	b.n	800e4de <lTCPWindowRxCheck+0x1ba>
                                FreeRTOS_flush_logging();
                            }

                            /* Return a positive value.  The packet may be accepted
                            * and stored but an earlier packet is still missing. */
                            ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 800e4d2:	68ba      	ldr	r2, [r7, #8]
 800e4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d6:	1ad3      	subs	r3, r2, r3
 800e4d8:	623b      	str	r3, [r7, #32]
                            lReturn = ( int32_t ) ulIntermediateResult;
 800e4da:	6a3b      	ldr	r3, [r7, #32]
 800e4dc:	627b      	str	r3, [r7, #36]	; 0x24
                        }
                    }
                }
            }

            return lReturn;
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3730      	adds	r7, #48	; 0x30
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	0a050101 	.word	0x0a050101

0800e4ec <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 800e4ec:	b480      	push	{r7}
 800e4ee:	b087      	sub	sp, #28
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	429a      	cmp	r2, r3
 800e506:	db03      	blt.n	800e510 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 800e508:	697a      	ldr	r2, [r7, #20]
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	1ad3      	subs	r3, r2, r3
 800e50e:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 800e510:	697b      	ldr	r3, [r7, #20]
        }
 800e512:	4618      	mov	r0, r3
 800e514:	371c      	adds	r7, #28
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr
	...

0800e520 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 800e520:	b580      	push	{r7, lr}
 800e522:	b08a      	sub	sp, #40	; 0x28
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	607a      	str	r2, [r7, #4]
 800e52c:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	627b      	str	r3, [r7, #36]	; 0x24
            int32_t lDone = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e53e:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( pxSegment != NULL )
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	2b00      	cmp	r3, #0
 800e544:	f000 8096 	beq.w	800e674 <lTCPWindowTxAdd+0x154>
            {
                if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	689a      	ldr	r2, [r3, #8]
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	429a      	cmp	r2, r3
 800e552:	f280 808f 	bge.w	800e674 <lTCPWindowTxAdd+0x154>
                {
                    if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	7d9b      	ldrb	r3, [r3, #22]
 800e55a:	f003 0301 	and.w	r3, r3, #1
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	2b00      	cmp	r3, #0
 800e562:	f040 8087 	bne.w	800e674 <lTCPWindowTxAdd+0x154>
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f000 8082 	beq.w	800e674 <lTCPWindowTxAdd+0x154>
                    {
                        /* Adding data to a segment that was already in the TX queue.  It
                         * will be filled-up to a maximum of MSS (maximum segment size). */
                        lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	1ad3      	subs	r3, r2, r3
 800e57a:	4619      	mov	r1, r3
 800e57c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e57e:	f7ff fb8f 	bl	800dca0 <FreeRTOS_min_int32>
 800e582:	6178      	str	r0, [r7, #20]

                        pxSegment->lDataLength += lToWrite;
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	689a      	ldr	r2, [r3, #8]
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	441a      	add	r2, r3
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	609a      	str	r2, [r3, #8]

                        if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	689a      	ldr	r2, [r3, #8]
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	429a      	cmp	r2, r3
 800e59a:	db02      	blt.n	800e5a2 <lTCPWindowTxAdd+0x82>
                        {
                            /* This segment is full, don't add more bytes. */
                            pxWindow->pxHeadSegment = NULL;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        lBytesLeft -= lToWrite;
 800e5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	1ad3      	subs	r3, r2, r3
 800e5a8:	627b      	str	r3, [r7, #36]	; 0x24

                        /* ulNextTxSequenceNumber is the sequence number of the next byte to
                         * be stored for transmission. */
                        pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	441a      	add	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Increased the return value. */
                        lDone += lToWrite;
 800e5b6:	6a3a      	ldr	r2, [r7, #32]
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	623b      	str	r3, [r7, #32]

                        /* Some detailed logging, for those who're interested. */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800e5be:	4b32      	ldr	r3, [pc, #200]	; (800e688 <lTCPWindowTxAdd+0x168>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b01      	cmp	r3, #1
                            FreeRTOS_flush_logging();
                        }

                        /* Calculate the next position in the circular data buffer, knowing
                         * its maximum length 'lMax'. */
                        lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800e5c4:	697a      	ldr	r2, [r7, #20]
 800e5c6:	6839      	ldr	r1, [r7, #0]
 800e5c8:	69f8      	ldr	r0, [r7, #28]
 800e5ca:	f7ff ff8f 	bl	800e4ec <lTCPIncrementTxPosition>
 800e5ce:	61f8      	str	r0, [r7, #28]
                    }
                }
            }

            while( lBytesLeft > 0 )
 800e5d0:	e050      	b.n	800e674 <lTCPWindowTxAdd+0x154>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e5dc:	461a      	mov	r2, r3
 800e5de:	2300      	movs	r3, #0
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f7ff fcab 	bl	800df3c <xTCPWindowNew>
 800e5e6:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d046      	beq.n	800e67c <lTCPWindowTxAdd+0x15c>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5f6:	f7ff fb53 	bl	800dca0 <FreeRTOS_min_int32>
 800e5fa:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	697a      	ldr	r2, [r7, #20]
 800e600:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 800e602:	69bb      	ldr	r3, [r7, #24]
 800e604:	69fa      	ldr	r2, [r7, #28]
 800e606:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 800e608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	1ad3      	subs	r3, r2, r3
 800e60e:	627b      	str	r3, [r7, #36]	; 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800e610:	697a      	ldr	r2, [r7, #20]
 800e612:	6839      	ldr	r1, [r7, #0]
 800e614:	69f8      	ldr	r0, [r7, #28]
 800e616:	f7ff ff69 	bl	800e4ec <lTCPIncrementTxPosition>
 800e61a:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	441a      	add	r2, r3
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	635a      	str	r2, [r3, #52]	; 0x34
                    lDone += lToWrite;
 800e628:	6a3a      	ldr	r2, [r7, #32]
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	4413      	add	r3, r2
 800e62e:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	3318      	adds	r3, #24
 800e63a:	4619      	mov	r1, r3
 800e63c:	4610      	mov	r0, r2
 800e63e:	f7ff fbb4 	bl	800ddaa <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	689a      	ldr	r2, [r3, #8]
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	da03      	bge.n	800e656 <lTCPWindowTxAdd+0x136>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	69ba      	ldr	r2, [r7, #24]
 800e652:	67da      	str	r2, [r3, #124]	; 0x7c
 800e654:	e002      	b.n	800e65c <lTCPWindowTxAdd+0x13c>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2200      	movs	r2, #0
 800e65a:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800e662:	2b17      	cmp	r3, #23
 800e664:	d006      	beq.n	800e674 <lTCPWindowTxAdd+0x154>
                    {
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800e666:	4b08      	ldr	r3, [pc, #32]	; (800e688 <lTCPWindowTxAdd+0x168>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	dc02      	bgt.n	800e674 <lTCPWindowTxAdd+0x154>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800e66e:	4b06      	ldr	r3, [pc, #24]	; (800e688 <lTCPWindowTxAdd+0x168>)
 800e670:	681b      	ldr	r3, [r3, #0]
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800e672:	2b01      	cmp	r3, #1
            while( lBytesLeft > 0 )
 800e674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e676:	2b00      	cmp	r3, #0
 800e678:	dcab      	bgt.n	800e5d2 <lTCPWindowTxAdd+0xb2>
 800e67a:	e000      	b.n	800e67e <lTCPWindowTxAdd+0x15e>
                    if( lDone != 0 )
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
                    }

                    break;
 800e67c:	bf00      	nop
                }
            }

            return lDone;
 800e67e:	6a3b      	ldr	r3, [r7, #32]
        }
 800e680:	4618      	mov	r0, r3
 800e682:	3728      	adds	r7, #40	; 0x28
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	2000bce4 	.word	0x2000bce4

0800e68c <xTCPWindowTxDone>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d101      	bne.n	800e6a2 <xTCPWindowTxDone+0x16>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e000      	b.n	800e6a4 <xTCPWindowTxDone+0x18>
 800e6a2:	2300      	movs	r3, #0
        }
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b086      	sub	sp, #24
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	3354      	adds	r3, #84	; 0x54
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7ff fcd9 	bl	800e076 <xTCPWindowPeekHead>
 800e6c4:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	613b      	str	r3, [r7, #16]
 800e6d0:	e02f      	b.n	800e732 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d306      	bcc.n	800e6ec <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a1b      	ldr	r3, [r3, #32]
 800e6e6:	1ad3      	subs	r3, r2, r3
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	e001      	b.n	800e6f0 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0UL;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800e6f0:	6979      	ldr	r1, [r7, #20]
 800e6f2:	6838      	ldr	r0, [r7, #0]
 800e6f4:	f7ff fae4 	bl	800dcc0 <FreeRTOS_min_uint32>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	1a9b      	subs	r3, r3, r2
 800e6fe:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	461a      	mov	r2, r3
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	4293      	cmp	r3, r2
 800e70a:	d302      	bcc.n	800e712 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 800e70c:	2301      	movs	r3, #1
 800e70e:	613b      	str	r3, [r7, #16]
 800e710:	e001      	b.n	800e716 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 800e712:	2300      	movs	r3, #0
 800e714:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00a      	beq.n	800e732 <prvTCPWindowTxHasSpace+0x82>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	689a      	ldr	r2, [r3, #8]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	4619      	mov	r1, r3
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	440b      	add	r3, r1
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d201      	bcs.n	800e732 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 800e72e:	2300      	movs	r3, #0
 800e730:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 800e732:	693b      	ldr	r3, [r7, #16]
        }
 800e734:	4618      	mov	r0, r3
 800e736:	3718      	adds	r7, #24
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b088      	sub	sp, #32
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e752:	2b00      	cmp	r3, #0
 800e754:	d002      	beq.n	800e75c <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 800e756:	2301      	movs	r3, #1
 800e758:	61fb      	str	r3, [r7, #28]
 800e75a:	e04a      	b.n	800e7f2 <xTCPWindowTxHasData+0xb6>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	3368      	adds	r3, #104	; 0x68
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff fc88 	bl	800e076 <xTCPWindowPeekHead>
 800e766:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d019      	beq.n	800e7a2 <xTCPWindowTxHasData+0x66>
                {
                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	3310      	adds	r3, #16
 800e772:	4618      	mov	r0, r3
 800e774:	f7ff fb36 	bl	800dde4 <ulTimerGetAge>
 800e778:	6178      	str	r0, [r7, #20]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e77e:	461a      	mov	r2, r3
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	7d1b      	ldrb	r3, [r3, #20]
 800e784:	fa02 f303 	lsl.w	r3, r2, r3
 800e788:	613b      	str	r3, [r7, #16]

                    if( ulMaxAge > ulAge )
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d904      	bls.n	800e79c <xTCPWindowTxHasData+0x60>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 800e792:	693a      	ldr	r2, [r7, #16]
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	1ad2      	subs	r2, r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 800e79c:	2301      	movs	r3, #1
 800e79e:	61fb      	str	r3, [r7, #28]
 800e7a0:	e027      	b.n	800e7f2 <xTCPWindowTxHasData+0xb6>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3354      	adds	r3, #84	; 0x54
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7ff fc65 	bl	800e076 <xTCPWindowPeekHead>
 800e7ac:	61b8      	str	r0, [r7, #24]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d102      	bne.n	800e7ba <xTCPWindowTxHasData+0x7e>
                    {
                        xReturn = pdFALSE;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	61fb      	str	r3, [r7, #28]
 800e7b8:	e01b      	b.n	800e7f2 <xTCPWindowTxHasData+0xb6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800e7ba:	68b9      	ldr	r1, [r7, #8]
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f7ff ff77 	bl	800e6b0 <prvTCPWindowTxHasSpace>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d102      	bne.n	800e7ce <xTCPWindowTxHasData+0x92>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	61fb      	str	r3, [r7, #28]
 800e7cc:	e011      	b.n	800e7f2 <xTCPWindowTxHasData+0xb6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	f003 0302 	and.w	r3, r3, #2
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d008      	beq.n	800e7ee <xTCPWindowTxHasData+0xb2>
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	689a      	ldr	r2, [r3, #8]
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	da02      	bge.n	800e7ee <xTCPWindowTxHasData+0xb2>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	61fb      	str	r3, [r7, #28]
 800e7ec:	e001      	b.n	800e7f2 <xTCPWindowTxHasData+0xb6>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	61fb      	str	r3, [r7, #28]
                    }
                }
            }

            return xReturn;
 800e7f2:	69fb      	ldr	r3, [r7, #28]
        }
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3720      	adds	r7, #32
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b088      	sub	sp, #32
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulMaxTime;
            uint32_t ulReturn = ~0UL;
 800e808:	f04f 33ff 	mov.w	r3, #4294967295
 800e80c:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	3340      	adds	r3, #64	; 0x40
 800e812:	4618      	mov	r0, r3
 800e814:	f7ff fc13 	bl	800e03e <xTCPWindowGetHead>
 800e818:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	62da      	str	r2, [r3, #44]	; 0x2c

            if( pxSegment == NULL )
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d169      	bne.n	800e8fc <ulTCPWindowTxGet+0x100>
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	3368      	adds	r3, #104	; 0x68
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7ff fc22 	bl	800e076 <xTCPWindowPeekHead>
 800e832:	61f8      	str	r0, [r7, #28]

                if( pxSegment != NULL )
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d01f      	beq.n	800e87a <ulTCPWindowTxGet+0x7e>
                {
                    /* Do check the timing. */
                    ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83e:	461a      	mov	r2, r3
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	7d1b      	ldrb	r3, [r3, #20]
 800e844:	fa02 f303 	lsl.w	r3, r2, r3
 800e848:	617b      	str	r3, [r7, #20]

                    if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	3310      	adds	r3, #16
 800e84e:	4618      	mov	r0, r3
 800e850:	f7ff fac8 	bl	800dde4 <ulTimerGetAge>
 800e854:	4602      	mov	r2, r0
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	4293      	cmp	r3, r2
 800e85a:	d20c      	bcs.n	800e876 <ulTCPWindowTxGet+0x7a>
                    {
                        /* A normal (non-fast) retransmission.  Move it from the
                         * head of the waiting queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	3368      	adds	r3, #104	; 0x68
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff fbec 	bl	800e03e <xTCPWindowGetHead>
 800e866:	61f8      	str	r0, [r7, #28]
                        pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	2200      	movs	r2, #0
 800e86c:	755a      	strb	r2, [r3, #21]

                        /* Some detailed logging. */
                        if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800e86e:	4b4b      	ldr	r3, [pc, #300]	; (800e99c <ulTCPWindowTxGet+0x1a0>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	e001      	b.n	800e87a <ulTCPWindowTxGet+0x7e>
                            FreeRTOS_flush_logging();
                        }
                    }
                    else
                    {
                        pxSegment = NULL;
 800e876:	2300      	movs	r3, #0
 800e878:	61fb      	str	r3, [r7, #28]
                    }
                }

                if( pxSegment == NULL )
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d13d      	bne.n	800e8fc <ulTCPWindowTxGet+0x100>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	3354      	adds	r3, #84	; 0x54
 800e884:	4618      	mov	r0, r3
 800e886:	f7ff fbf6 	bl	800e076 <xTCPWindowPeekHead>
 800e88a:	61f8      	str	r0, [r7, #28]

                    if( pxSegment == NULL )
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d102      	bne.n	800e898 <ulTCPWindowTxGet+0x9c>
                    {
                        /* No segments queued. */
                        ulReturn = 0UL;
 800e892:	2300      	movs	r3, #0
 800e894:	61bb      	str	r3, [r7, #24]
 800e896:	e031      	b.n	800e8fc <ulTCPWindowTxGet+0x100>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	f003 0302 	and.w	r3, r3, #2
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d008      	beq.n	800e8b8 <ulTCPWindowTxGet+0xbc>
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	689a      	ldr	r2, [r3, #8]
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	da02      	bge.n	800e8b8 <ulTCPWindowTxGet+0xbc>
                    {
                        /* A segment has been queued but the driver waits until it
                         * has a full size of MSS. */
                        ulReturn = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	61bb      	str	r3, [r7, #24]
 800e8b6:	e021      	b.n	800e8fc <ulTCPWindowTxGet+0x100>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800e8b8:	68b9      	ldr	r1, [r7, #8]
 800e8ba:	68f8      	ldr	r0, [r7, #12]
 800e8bc:	f7ff fef8 	bl	800e6b0 <prvTCPWindowTxHasSpace>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d102      	bne.n	800e8cc <ulTCPWindowTxGet+0xd0>
                    {
                        /* Peer has no more space at this moment. */
                        ulReturn = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	61bb      	str	r3, [r7, #24]
 800e8ca:	e017      	b.n	800e8fc <ulTCPWindowTxGet+0x100>
                    }
                    else
                    {
                        /* Move it out of the Tx queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	3354      	adds	r3, #84	; 0x54
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7ff fbb4 	bl	800e03e <xTCPWindowGetHead>
 800e8d6:	61f8      	str	r0, [r7, #28]

                        /* Don't let pxHeadSegment point to this segment any more,
                         * so no more data will be added. */
                        if( pxWindow->pxHeadSegment == pxSegment )
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8dc:	69fa      	ldr	r2, [r7, #28]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d102      	bne.n	800e8e8 <ulTCPWindowTxGet+0xec>
                        {
                            pxWindow->pxHeadSegment = NULL;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        /* pxWindow->tx.highest registers the highest sequence
                         * number in our transmission window. */
                        pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	69fa      	ldr	r2, [r7, #28]
 800e8ee:	6892      	ldr	r2, [r2, #8]
 800e8f0:	441a      	add	r2, r3
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	629a      	str	r2, [r3, #40]	; 0x28

                        /* ...and more detailed logging */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800e8f6:	4b29      	ldr	r3, [pc, #164]	; (800e99c <ulTCPWindowTxGet+0x1a0>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2b01      	cmp	r3, #1
                    FreeRTOS_flush_logging();
                }
            }

            /* See if it has already been determined to return 0. */
            if( ulReturn != 0UL )
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d046      	beq.n	800e990 <ulTCPWindowTxGet+0x194>
            {
                /* pxSegment is not NULL when ulReturn != 0UL. */
                configASSERT( pxSegment != NULL );
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d104      	bne.n	800e912 <ulTCPWindowTxGet+0x116>
 800e908:	4925      	ldr	r1, [pc, #148]	; (800e9a0 <ulTCPWindowTxGet+0x1a4>)
 800e90a:	f240 60d9 	movw	r0, #1753	; 0x6d9
 800e90e:	f7f2 f8c1 	bl	8000a94 <vAssertCalled>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e916:	2b00      	cmp	r3, #0
 800e918:	d004      	beq.n	800e924 <ulTCPWindowTxGet+0x128>
 800e91a:	4921      	ldr	r1, [pc, #132]	; (800e9a0 <ulTCPWindowTxGet+0x1a4>)
 800e91c:	f240 60da 	movw	r0, #1754	; 0x6da
 800e920:	f7f2 f8b8 	bl	8000a94 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	3318      	adds	r3, #24
 800e92e:	4619      	mov	r1, r3
 800e930:	4610      	mov	r0, r2
 800e932:	f7ff fa3a 	bl	800ddaa <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800e936:	69fa      	ldr	r2, [r7, #28]
 800e938:	7d93      	ldrb	r3, [r2, #22]
 800e93a:	f043 0301 	orr.w	r3, r3, #1
 800e93e:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	7d1b      	ldrb	r3, [r3, #20]
 800e944:	3301      	adds	r3, #1
 800e946:	b2da      	uxtb	r2, r3
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	7d1b      	ldrb	r3, [r3, #20]
 800e950:	2b04      	cmp	r3, #4
 800e952:	d10d      	bne.n	800e970 <ulTCPWindowTxGet+0x174>
                {
                    if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	689a      	ldr	r2, [r3, #8]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e95e:	005b      	lsls	r3, r3, #1
 800e960:	429a      	cmp	r2, r3
 800e962:	d905      	bls.n	800e970 <ulTCPWindowTxGet+0x174>
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
                                                 pxWindow->usPeerPortNumber,
                                                 pxWindow->usOurPortNumber,
                                                 pxWindow->xSize.ulTxWindowLength,
                                                 2U * pxWindow->usMSS ) );
                        pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800e96a:	005a      	lsls	r2, r3, #1
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	609a      	str	r2, [r3, #8]
                    }
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	3310      	adds	r3, #16
 800e974:	4618      	mov	r0, r3
 800e976:	f7ff fa28 	bl	800ddca <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	68da      	ldr	r2, [r3, #12]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 800e990:	69bb      	ldr	r3, [r7, #24]
        }
 800e992:	4618      	mov	r0, r3
 800e994:	3720      	adds	r7, #32
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	2000bce4 	.word	0x2000bce4
 800e9a0:	08011094 	.word	0x08011094

0800e9a4 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08c      	sub	sp, #48	; 0x30
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	62bb      	str	r3, [r7, #40]	; 0x28
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	3398      	adds	r3, #152	; 0x98
 800e9bc:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800e9c4:	e099      	b.n	800eafa <prvTCPWindowTxCheckAck+0x156>
            {
                xDoUnlink = pdFALSE;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	623b      	str	r3, [r7, #32]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7ff f986 	bl	800dce0 <vCastPointerTo_TCPSegment_t>
 800e9d4:	61b8      	str	r0, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	627b      	str	r3, [r7, #36]	; 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9e4:	f7ff f9b4 	bl	800dd50 <xSequenceGreaterThan>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d000      	beq.n	800e9f0 <prvTCPWindowTxCheckAck+0x4c>
                {
                    continue;
 800e9ee:	e084      	b.n	800eafa <prvTCPWindowTxCheckAck+0x156>
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	f040 808c 	bne.w	800eb14 <prvTCPWindowTxCheckAck+0x170>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	7d9b      	ldrb	r3, [r3, #22]
 800ea06:	f003 0302 	and.w	r3, r3, #2
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d14d      	bne.n	800eaac <prvTCPWindowTxCheckAck+0x108>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	4413      	add	r3, r2
 800ea18:	6879      	ldr	r1, [r7, #4]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff f998 	bl	800dd50 <xSequenceGreaterThan>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d178      	bne.n	800eb18 <prvTCPWindowTxCheckAck+0x174>
                        #endif /* ipconfigHAS_DEBUG_PRINTF */
                        break;
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	7d93      	ldrb	r3, [r2, #22]
 800ea2a:	f043 0302 	orr.w	r3, r3, #2
 800ea2e:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	7d1b      	ldrb	r3, [r3, #20]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d137      	bne.n	800eaa8 <prvTCPWindowTxCheckAck+0x104>
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	4413      	add	r3, r2
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d130      	bne.n	800eaa8 <prvTCPWindowTxCheckAck+0x104>
                    {
                        int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	3310      	adds	r3, #16
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff f9ca 	bl	800dde4 <ulTimerGetAge>
 800ea50:	4603      	mov	r3, r0
 800ea52:	613b      	str	r3, [r7, #16]

                        if( pxWindow->lSRTT >= mS )
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea58:	693a      	ldr	r2, [r7, #16]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	dc0e      	bgt.n	800ea7c <prvTCPWindowTxCheckAck+0xd8>
                        {
                            /* RTT becomes smaller: adapt slowly. */
                            pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea62:	4613      	mov	r3, r2
 800ea64:	00db      	lsls	r3, r3, #3
 800ea66:	1a9a      	subs	r2, r3, r2
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	da00      	bge.n	800ea72 <prvTCPWindowTxCheckAck+0xce>
 800ea70:	3307      	adds	r3, #7
 800ea72:	10db      	asrs	r3, r3, #3
 800ea74:	461a      	mov	r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	639a      	str	r2, [r3, #56]	; 0x38
 800ea7a:	e00e      	b.n	800ea9a <prvTCPWindowTxCheckAck+0xf6>
                        }
                        else
                        {
                            /* RTT becomes larger: adapt quicker */
                            pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea80:	4613      	mov	r3, r2
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	441a      	add	r2, r3
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	4413      	add	r3, r2
 800ea8a:	005b      	lsls	r3, r3, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	da00      	bge.n	800ea92 <prvTCPWindowTxCheckAck+0xee>
 800ea90:	3307      	adds	r3, #7
 800ea92:	10db      	asrs	r3, r3, #3
 800ea94:	461a      	mov	r2, r3
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Cap to the minimum of 50ms. */
                        if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9e:	2b31      	cmp	r3, #49	; 0x31
 800eaa0:	dc02      	bgt.n	800eaa8 <prvTCPWindowTxCheckAck+0x104>
                        {
                            pxWindow->lSRTT = winSRTT_CAP_mS;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2232      	movs	r2, #50	; 0x32
 800eaa6:	639a      	str	r2, [r3, #56]	; 0x38
                        }
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6a1b      	ldr	r3, [r3, #32]
 800eab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d111      	bne.n	800eada <prvTCPWindowTxCheckAck+0x136>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800eab6:	4b1b      	ldr	r3, [pc, #108]	; (800eb24 <prvTCPWindowTxCheckAck+0x180>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2b01      	cmp	r3, #1
                                                 ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                 pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	6a1a      	ldr	r2, [r3, #32]
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	441a      	add	r2, r3
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 800eac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	4413      	add	r3, r2
 800eace:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 800ead0:	69b8      	ldr	r0, [r7, #24]
 800ead2:	f7ff fae9 	bl	800e0a8 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 800ead6:	2300      	movs	r3, #0
 800ead8:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d008      	beq.n	800eaf2 <prvTCPWindowTxCheckAck+0x14e>
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d004      	beq.n	800eaf2 <prvTCPWindowTxCheckAck+0x14e>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	3318      	adds	r3, #24
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7f5 ff67 	bl	80049c0 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 800eaf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	62bb      	str	r3, [r7, #40]	; 0x28
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800eafa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eafc:	69fb      	ldr	r3, [r7, #28]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d00b      	beq.n	800eb1a <prvTCPWindowTxCheckAck+0x176>
 800eb02:	6879      	ldr	r1, [r7, #4]
 800eb04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb06:	f7ff f90c 	bl	800dd22 <xSequenceLessThan>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f47f af5a 	bne.w	800e9c6 <prvTCPWindowTxCheckAck+0x22>
 800eb12:	e002      	b.n	800eb1a <prvTCPWindowTxCheckAck+0x176>
                    break;
 800eb14:	bf00      	nop
 800eb16:	e000      	b.n	800eb1a <prvTCPWindowTxCheckAck+0x176>
                        break;
 800eb18:	bf00      	nop
            }

            return ulBytesConfirmed;
 800eb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        }
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3730      	adds	r7, #48	; 0x30
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	2000bce4 	.word	0x2000bce4

0800eb28 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b086      	sub	sp, #24
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0UL;
 800eb32:	2300      	movs	r3, #0
 800eb34:	613b      	str	r3, [r7, #16]

            /* A higher Tx block has been acknowledged.  Now iterate through the
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	3370      	adds	r3, #112	; 0x70
 800eb3a:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800eb42:	e039      	b.n	800ebb8 <prvTCPWindowFastRetransmit+0x90>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7ff f8c9 	bl	800dce0 <vCastPointerTo_TCPSegment_t>
 800eb4e:	60b8      	str	r0, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	7d9b      	ldrb	r3, [r3, #22]
 800eb5a:	f003 0302 	and.w	r3, r3, #2
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d129      	bne.n	800ebb8 <prvTCPWindowFastRetransmit+0x90>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7ff f8d9 	bl	800dd22 <xSequenceLessThan>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d020      	beq.n	800ebb8 <prvTCPWindowFastRetransmit+0x90>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	7d5b      	ldrb	r3, [r3, #21]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	7d5b      	ldrb	r3, [r3, #21]
 800eb86:	2b03      	cmp	r3, #3
 800eb88:	d116      	bne.n	800ebb8 <prvTCPWindowFastRetransmit+0x90>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800eb90:	4b0e      	ldr	r3, [pc, #56]	; (800ebcc <prvTCPWindowFastRetransmit+0xa4>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2b00      	cmp	r3, #0
                                                         ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
                                FreeRTOS_flush_logging();
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	3318      	adds	r3, #24
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7f5 ff10 	bl	80049c0 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	3318      	adds	r3, #24
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4610      	mov	r0, r2
 800ebae:	f7ff f8fc 	bl	800ddaa <vListInsertFifo>
                            ulCount++;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d1c1      	bne.n	800eb44 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 800ebc0:	693b      	ldr	r3, [r7, #16]
        }
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3718      	adds	r7, #24
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	2000bce4 	.word	0x2000bce4

0800ebd0 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence, ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 800ebe0:	68b9      	ldr	r1, [r7, #8]
 800ebe2:	6838      	ldr	r0, [r7, #0]
 800ebe4:	f7ff f887 	bl	800dcf6 <xSequenceLessThanOrEqual>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d002      	beq.n	800ebf4 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0UL;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	e005      	b.n	800ec00 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	68b9      	ldr	r1, [r7, #8]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7ff fed3 	bl	800e9a4 <prvTCPWindowTxCheckAck>
 800ebfe:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 800ec00:	68fb      	ldr	r3, [r7, #12]
        }
 800ec02:	4618      	mov	r0, r3
 800ec04:	3710      	adds	r7, #16
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
	...

0800ec0c <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	68b9      	ldr	r1, [r7, #8]
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	f7ff febe 	bl	800e9a4 <prvTCPWindowTxCheckAck>
 800ec28:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 800ec2a:	68b9      	ldr	r1, [r7, #8]
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f7ff ff7b 	bl	800eb28 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 800ec32:	4b06      	ldr	r3, [pc, #24]	; (800ec4c <ulTCPWindowTxSack+0x40>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	dd03      	ble.n	800ec42 <ulTCPWindowTxSack+0x36>
 800ec3a:	6979      	ldr	r1, [r7, #20]
 800ec3c:	68b8      	ldr	r0, [r7, #8]
 800ec3e:	f7ff f887 	bl	800dd50 <xSequenceGreaterThan>
                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                         pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                FreeRTOS_flush_logging();
            }

            return ulAckCount;
 800ec42:	693b      	ldr	r3, [r7, #16]
        }
 800ec44:	4618      	mov	r0, r3
 800ec46:	3718      	adds	r7, #24
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	2000bce4 	.word	0x2000bce4

0800ec50 <vCastPointerTo_UDPPacket_t>:
    {
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 800ec58:	687b      	ldr	r3, [r7, #4]
    }
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	370c      	adds	r7, #12
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <vCastConstPointerTo_UDPPacket_t>:
    {
 800ec66:	b480      	push	{r7}
 800ec68:	b083      	sub	sp, #12
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 800ec6e:	687b      	ldr	r3, [r7, #4]
    }
 800ec70:	4618      	mov	r0, r3
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer: The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08c      	sub	sp, #48	; 0x30
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	695b      	ldr	r3, [r3, #20]
 800ec88:	60fb      	str	r3, [r7, #12]
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    /* Map the UDP packet onto the start of the frame. */
    pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	699b      	ldr	r3, [r3, #24]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7ff ffde 	bl	800ec50 <vCastPointerTo_UDPPacket_t>
 800ec94:	6278      	str	r0, [r7, #36]	; 0x24
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	69db      	ldr	r3, [r3, #28]
 800ec9a:	3b2a      	subs	r3, #42	; 0x2a
 800ec9c:	623b      	str	r3, [r7, #32]
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800ec9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eca0:	f107 030c 	add.w	r3, r7, #12
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7f8 ff42 	bl	8007b30 <eARPGetCacheEntry>
 800ecac:	4603      	mov	r3, r0
 800ecae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( eReturned != eCantSendPacket )
 800ecb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	d06d      	beq.n	800ed96 <vProcessGeneratedUDPPacket+0x11a>
    {
        if( eReturned == eARPCacheHit )
 800ecba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d156      	bne.n	800ed70 <vProcessGeneratedUDPPacket+0xf4>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 800ecc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc4:	330e      	adds	r3, #14
 800ecc6:	61fb      	str	r3, [r7, #28]
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800ecc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecca:	3322      	adds	r3, #34	; 0x22
 800eccc:	61bb      	str	r3, [r7, #24]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	8c1a      	ldrh	r2, [r3, #32]
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 800ecde:	6a3b      	ldr	r3, [r7, #32]
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	3308      	adds	r3, #8
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	889b      	ldrh	r3, [r3, #4]
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	021b      	lsls	r3, r3, #8
 800ecf2:	b21a      	sxth	r2, r3
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	889b      	ldrh	r3, [r3, #4]
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	0a1b      	lsrs	r3, r3, #8
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	b21b      	sxth	r3, r3
 800ed00:	4313      	orrs	r3, r2
 800ed02:	b21b      	sxth	r3, r3
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	719a      	strb	r2, [r3, #6]
 800ed10:	2200      	movs	r2, #0
 800ed12:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = xDefaultPartUDPPacketHeader.ucBytes;
 800ed14:	4b33      	ldr	r3, [pc, #204]	; (800ede4 <vProcessGeneratedUDPPacket+0x168>)
 800ed16:	617b      	str	r3, [r7, #20]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	699b      	ldr	r3, [r3, #24]
 800ed1c:	3306      	adds	r3, #6
 800ed1e:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 800ed20:	2218      	movs	r2, #24
 800ed22:	6979      	ldr	r1, [r7, #20]
 800ed24:	6938      	ldr	r0, [r7, #16]
 800ed26:	f001 f9bc 	bl	80100a2 <memcpy>
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 800ed2a:	6a3b      	ldr	r3, [r7, #32]
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	331c      	adds	r3, #28
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	885b      	ldrh	r3, [r3, #2]
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	021b      	lsls	r3, r3, #8
 800ed3e:	b21a      	sxth	r2, r3
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	885b      	ldrh	r3, [r3, #2]
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	0a1b      	lsrs	r3, r3, #8
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	b21b      	sxth	r3, r3
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	b21b      	sxth	r3, r3
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	695a      	ldr	r2, [r3, #20]
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	611a      	str	r2, [r3, #16]

            #if ( ipconfigUSE_LLMNR == 1 )
                {
                    /* LLMNR messages are typically used on a LAN and they're
                     * not supposed to cross routers */
                    if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	695b      	ldr	r3, [r3, #20]
 800ed62:	4a21      	ldr	r2, [pc, #132]	; (800ede8 <vProcessGeneratedUDPPacket+0x16c>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d116      	bne.n	800ed96 <vProcessGeneratedUDPPacket+0x11a>
                    {
                        pxIPHeader->ucTimeToLive = 0x01;
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	721a      	strb	r2, [r3, #8]
 800ed6e:	e012      	b.n	800ed96 <vProcessGeneratedUDPPacket+0x11a>
                        pxUDPPacket->xUDPHeader.usChecksum = 0U;
                    }
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 800ed70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d10b      	bne.n	800ed90 <vProcessGeneratedUDPPacket+0x114>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress );
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	f7f8 fddf 	bl	8007940 <vARPRefreshCacheEntry>

            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
            pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	615a      	str	r2, [r3, #20]
            vARPGenerateRequestPacket( pxNetworkBuffer );
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7f9 f861 	bl	8007e50 <vARPGenerateRequestPacket>
 800ed8e:	e002      	b.n	800ed96 <vProcessGeneratedUDPPacket+0x11a>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 800ed90:	2302      	movs	r3, #2
 800ed92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    if( eReturned != eCantSendPacket )
 800ed96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed9a:	2b02      	cmp	r3, #2
 800ed9c:	d01b      	beq.n	800edd6 <vProcessGeneratedUDPPacket+0x15a>
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	69db      	ldr	r3, [r3, #28]
 800eda2:	2b3b      	cmp	r3, #59	; 0x3b
 800eda4:	d812      	bhi.n	800edcc <vProcessGeneratedUDPPacket+0x150>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	69db      	ldr	r3, [r3, #28]
 800edaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800edac:	e008      	b.n	800edc0 <vProcessGeneratedUDPPacket+0x144>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	699a      	ldr	r2, [r3, #24]
 800edb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb4:	4413      	add	r3, r2
 800edb6:	2200      	movs	r2, #0
 800edb8:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800edba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbc:	3301      	adds	r3, #1
 800edbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	2b3b      	cmp	r3, #59	; 0x3b
 800edc4:	ddf3      	ble.n	800edae <vProcessGeneratedUDPPacket+0x132>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	223c      	movs	r2, #60	; 0x3c
 800edca:	61da      	str	r2, [r3, #28]
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800edcc:	2101      	movs	r1, #1
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 face 	bl	800f370 <xNetworkInterfaceOutput>
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 800edd4:	e002      	b.n	800eddc <vProcessGeneratedUDPPacket+0x160>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f001 f8de 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
}
 800eddc:	bf00      	nop
 800edde:	3730      	adds	r7, #48	; 0x30
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	20000014 	.word	0x20000014
 800ede8:	fc0000e0 	.word	0xfc0000e0

0800edec <xProcessReceivedUDPPacket>:
 *
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	807b      	strh	r3, [r7, #2]
    BaseType_t xReturn = pdPASS;
 800edf8:	2301      	movs	r3, #1
 800edfa:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    configASSERT( pxNetworkBuffer != NULL );
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d104      	bne.n	800ee0c <xProcessReceivedUDPPacket+0x20>
 800ee02:	4945      	ldr	r1, [pc, #276]	; (800ef18 <xProcessReceivedUDPPacket+0x12c>)
 800ee04:	f44f 7092 	mov.w	r0, #292	; 0x124
 800ee08:	f7f1 fe44 	bl	8000a94 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d104      	bne.n	800ee1e <xProcessReceivedUDPPacket+0x32>
 800ee14:	4940      	ldr	r1, [pc, #256]	; (800ef18 <xProcessReceivedUDPPacket+0x12c>)
 800ee16:	f240 1025 	movw	r0, #293	; 0x125
 800ee1a:	f7f1 fe3b 	bl	8000a94 <vAssertCalled>

    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
    const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	699b      	ldr	r3, [r3, #24]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7ff ff1f 	bl	800ec66 <vCastConstPointerTo_UDPPacket_t>
 800ee28:	6138      	str	r0, [r7, #16]

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 800ee2a:	887b      	ldrh	r3, [r7, #2]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7fb fbf7 	bl	800a620 <pxUDPSocketLookup>
 800ee32:	60f8      	str	r0, [r7, #12]

    if( pxSocket != NULL )
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d033      	beq.n	800eea2 <xProcessReceivedUDPPacket+0xb6>
    {
        /* When refreshing the ARP cache with received UDP packets we must be
         * careful;  hundreds of broadcast messages may pass and if we're not
         * handling them, no use to fill the ARP cache with those IP addresses. */
        vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	1d9a      	adds	r2, r3, #6
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ee44:	4619      	mov	r1, r3
 800ee46:	4610      	mov	r0, r2
 800ee48:	f7f8 fd7a 	bl	8007940 <vARPRefreshCacheEntry>
            if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
        #else
            /* xReturn is still pdPASS. */
        #endif
        {
            vTaskSuspendAll();
 800ee4c:	f7f6 fec8 	bl	8005be0 <vTaskSuspendAll>
            {
                taskENTER_CRITICAL();
 800ee50:	f7f8 fbca 	bl	80075e8 <vPortEnterCritical>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	3338      	adds	r3, #56	; 0x38
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7f5 fd52 	bl	8004906 <vListInsertEnd>
                }
                taskEXIT_CRITICAL();
 800ee62:	f7f8 fbed 	bl	8007640 <vPortExitCritical>
            }
            ( void ) xTaskResumeAll();
 800ee66:	f7f6 fec9 	bl	8005bfc <xTaskResumeAll>

            /* Set the socket's receive event */
            if( pxSocket->xEventGroup != NULL )
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d005      	beq.n	800ee7e <xProcessReceivedUDPPacket+0x92>
            {
                ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	2101      	movs	r1, #1
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7f5 fc67 	bl	800474c <xEventGroupSetBits>
            }

            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d043      	beq.n	800ef0e <xProcessReceivedUDPPacket+0x122>
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d03d      	beq.n	800ef0e <xProcessReceivedUDPPacket+0x122>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2101      	movs	r1, #1
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7f5 fc56 	bl	800474c <xEventGroupSetBits>
 800eea0:	e035      	b.n	800ef0e <xProcessReceivedUDPPacket+0x122>
            else
        #endif

        #if ( ipconfigUSE_LLMNR == 1 )
            /* A LLMNR request, check for the destination port. */
            if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800eea2:	887b      	ldrh	r3, [r7, #2]
 800eea4:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d006      	beq.n	800eeba <xProcessReceivedUDPPacket+0xce>
                ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800eeb0:	b29b      	uxth	r3, r3
            if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 800eeb2:	f64e 3214 	movw	r2, #60180	; 0xeb14
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d10e      	bne.n	800eed8 <xProcessReceivedUDPPacket+0xec>
            {
                vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	1d9a      	adds	r2, r3, #6
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800eec4:	4619      	mov	r1, r3
 800eec6:	4610      	mov	r0, r2
 800eec8:	f7f8 fd3a 	bl	8007940 <vARPRefreshCacheEntry>
                xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f7f9 f956 	bl	800817e <ulDNSHandlePacket>
 800eed2:	4603      	mov	r3, r0
 800eed4:	617b      	str	r3, [r7, #20]
 800eed6:	e01a      	b.n	800ef0e <xProcessReceivedUDPPacket+0x122>
            else
        #endif /* ipconfigUSE_LLMNR */

        #if ( ipconfigUSE_NBNS == 1 )
            /* a NetBIOS request, check for the destination port */
            if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
 800eed8:	887b      	ldrh	r3, [r7, #2]
 800eeda:	f5b3 4f09 	cmp.w	r3, #35072	; 0x8900
 800eede:	d005      	beq.n	800eeec <xProcessReceivedUDPPacket+0x100>
                ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipNBNS_PORT ) ) )
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800eee4:	b29b      	uxth	r3, r3
            if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
 800eee6:	f5b3 4f09 	cmp.w	r3, #35072	; 0x8900
 800eeea:	d10e      	bne.n	800ef0a <xProcessReceivedUDPPacket+0x11e>
            {
                vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	1d9a      	adds	r2, r3, #6
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800eef6:	4619      	mov	r1, r3
 800eef8:	4610      	mov	r0, r2
 800eefa:	f7f8 fd21 	bl	8007940 <vARPRefreshCacheEntry>
                xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f7f9 f95a 	bl	80081b8 <ulNBNSHandlePacket>
 800ef04:	4603      	mov	r3, r0
 800ef06:	617b      	str	r3, [r7, #20]
 800ef08:	e001      	b.n	800ef0e <xProcessReceivedUDPPacket+0x122>
            }
            else
        #endif /* ipconfigUSE_NBNS */
        {
            xReturn = pdFAIL;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 800ef0e:	697b      	ldr	r3, [r7, #20]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3718      	adds	r7, #24
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	080110c8 	.word	0x080110c8

0800ef1c <HAL_ETH_RxCpltCallback>:
};

/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ef24:	2300      	movs	r3, #0
 800ef26:	60fb      	str	r3, [r7, #12]

    ( void ) heth;

    /* Ethernet RX-Complete callback function, elsewhere declared as weak. */
    ulISREvents |= EMAC_IF_RX_EVENT;
 800ef28:	4b10      	ldr	r3, [pc, #64]	; (800ef6c <HAL_ETH_RxCpltCallback+0x50>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f043 0301 	orr.w	r3, r3, #1
 800ef30:	4a0e      	ldr	r2, [pc, #56]	; (800ef6c <HAL_ETH_RxCpltCallback+0x50>)
 800ef32:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 800ef34:	4b0e      	ldr	r3, [pc, #56]	; (800ef70 <HAL_ETH_RxCpltCallback+0x54>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d012      	beq.n	800ef62 <HAL_ETH_RxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 800ef3c:	4b0c      	ldr	r3, [pc, #48]	; (800ef70 <HAL_ETH_RxCpltCallback+0x54>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f107 020c 	add.w	r2, r7, #12
 800ef44:	2100      	movs	r1, #0
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7f7 fc68 	bl	800681c <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d007      	beq.n	800ef62 <HAL_ETH_RxCpltCallback+0x46>
 800ef52:	4b08      	ldr	r3, [pc, #32]	; (800ef74 <HAL_ETH_RxCpltCallback+0x58>)
 800ef54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef58:	601a      	str	r2, [r3, #0]
 800ef5a:	f3bf 8f4f 	dsb	sy
 800ef5e:	f3bf 8f6f 	isb	sy
    }
}
 800ef62:	bf00      	nop
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	2000bcec 	.word	0x2000bcec
 800ef70:	2000bd80 	.word	0x2000bd80
 800ef74:	e000ed04 	.word	0xe000ed04

0800ef78 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ef80:	2300      	movs	r3, #0
 800ef82:	60fb      	str	r3, [r7, #12]
    ( void ) heth;

    /* This call-back is only useful in case packets are being sent
     * zero-copy.  Once they're sent, the buffers will be released
     * by the function vClearTXBuffers(). */
    ulISREvents |= EMAC_IF_TX_EVENT;
 800ef84:	4b10      	ldr	r3, [pc, #64]	; (800efc8 <HAL_ETH_TxCpltCallback+0x50>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f043 0302 	orr.w	r3, r3, #2
 800ef8c:	4a0e      	ldr	r2, [pc, #56]	; (800efc8 <HAL_ETH_TxCpltCallback+0x50>)
 800ef8e:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 800ef90:	4b0e      	ldr	r3, [pc, #56]	; (800efcc <HAL_ETH_TxCpltCallback+0x54>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d012      	beq.n	800efbe <HAL_ETH_TxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 800ef98:	4b0c      	ldr	r3, [pc, #48]	; (800efcc <HAL_ETH_TxCpltCallback+0x54>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f107 020c 	add.w	r2, r7, #12
 800efa0:	2100      	movs	r1, #0
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7f7 fc3a 	bl	800681c <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d007      	beq.n	800efbe <HAL_ETH_TxCpltCallback+0x46>
 800efae:	4b08      	ldr	r3, [pc, #32]	; (800efd0 <HAL_ETH_TxCpltCallback+0x58>)
 800efb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efb4:	601a      	str	r2, [r3, #0]
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	f3bf 8f6f 	isb	sy
    }
}
 800efbe:	bf00      	nop
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop
 800efc8:	2000bcec 	.word	0x2000bcec
 800efcc:	2000bd80 	.word	0x2000bd80
 800efd0:	e000ed04 	.word	0xe000ed04

0800efd4 <vClearTXBuffers>:
/*-----------------------------------------------------------*/

static void vClearTXBuffers()
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
    __IO ETH_DMADescTypeDef * txLastDescriptor = xETH.TxDesc;
 800efda:	4b24      	ldr	r3, [pc, #144]	; (800f06c <vClearTXBuffers+0x98>)
 800efdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efde:	60bb      	str	r3, [r7, #8]
    size_t uxCount = ( ( UBaseType_t ) ETH_TXBUFNB ) - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 800efe0:	4b23      	ldr	r3, [pc, #140]	; (800f070 <vClearTXBuffers+0x9c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7f6 f985 	bl	80052f4 <uxQueueMessagesWaiting>
 800efea:	4603      	mov	r3, r0
 800efec:	f1c3 0304 	rsb	r3, r3, #4
 800eff0:	60fb      	str	r3, [r7, #12]

    /* This function is called after a TX-completion interrupt.
     * It will release each Network Buffer used in xNetworkInterfaceOutput().
     * 'uxCount' represents the number of descriptors given to DMA for transmission.
     * After sending a packet, the DMA will clear the 'ETH_DMATXDESC_OWN' bit. */
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 800eff2:	e02c      	b.n	800f04e <vClearTXBuffers+0x7a>
    {
        if( ( DMATxDescToClear == txLastDescriptor ) && ( uxCount != ETH_TXBUFNB ) )
 800eff4:	4b1f      	ldr	r3, [pc, #124]	; (800f074 <vClearTXBuffers+0xa0>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	429a      	cmp	r2, r3
 800effc:	d102      	bne.n	800f004 <vClearTXBuffers+0x30>
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2b04      	cmp	r3, #4
 800f002:	d12d      	bne.n	800f060 <vClearTXBuffers+0x8c>
            break;
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                ucPayLoad = ( uint8_t * ) DMATxDescToClear->Buffer1Addr;
 800f004:	4b1b      	ldr	r3, [pc, #108]	; (800f074 <vClearTXBuffers+0xa0>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	607b      	str	r3, [r7, #4]

                if( ucPayLoad != NULL )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00d      	beq.n	800f02e <vClearTXBuffers+0x5a>
                {
                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7fa f9dc 	bl	80093d0 <pxPacketBuffer_to_NetworkBuffer>
 800f018:	6038      	str	r0, [r7, #0]

                    if( pxNetworkBuffer != NULL )
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d002      	beq.n	800f026 <vClearTXBuffers+0x52>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f020:	6838      	ldr	r0, [r7, #0]
 800f022:	f000 ffb9 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
                    }

                    DMATxDescToClear->Buffer1Addr = ( uint32_t ) 0u;
 800f026:	4b13      	ldr	r3, [pc, #76]	; (800f074 <vClearTXBuffers+0xa0>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	2200      	movs	r2, #0
 800f02c:	609a      	str	r2, [r3, #8]
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        DMATxDescToClear = ( ETH_DMADescTypeDef * ) ( DMATxDescToClear->Buffer2NextDescAddr );
 800f02e:	4b11      	ldr	r3, [pc, #68]	; (800f074 <vClearTXBuffers+0xa0>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	461a      	mov	r2, r3
 800f036:	4b0f      	ldr	r3, [pc, #60]	; (800f074 <vClearTXBuffers+0xa0>)
 800f038:	601a      	str	r2, [r3, #0]

        uxCount--;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	3b01      	subs	r3, #1
 800f03e:	60fb      	str	r3, [r7, #12]
        /* Tell the counting semaphore that one more TX descriptor is available. */
        xSemaphoreGive( xTXDescriptorSemaphore );
 800f040:	4b0b      	ldr	r3, [pc, #44]	; (800f070 <vClearTXBuffers+0x9c>)
 800f042:	6818      	ldr	r0, [r3, #0]
 800f044:	2300      	movs	r3, #0
 800f046:	2200      	movs	r2, #0
 800f048:	2100      	movs	r1, #0
 800f04a:	f7f5 fddd 	bl	8004c08 <xQueueGenericSend>
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d006      	beq.n	800f062 <vClearTXBuffers+0x8e>
 800f054:	4b07      	ldr	r3, [pc, #28]	; (800f074 <vClearTXBuffers+0xa0>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	daca      	bge.n	800eff4 <vClearTXBuffers+0x20>
    }
}
 800f05e:	e000      	b.n	800f062 <vClearTXBuffers+0x8e>
            break;
 800f060:	bf00      	nop
}
 800f062:	bf00      	nop
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	2000bd30 	.word	0x2000bd30
 800f070:	2000bd78 	.word	0x2000bd78
 800f074:	2000bd7c 	.word	0x2000bd7c

0800f078 <xNetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceInitialise( void )
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef hal_eth_init_status;
    BaseType_t xResult;

    if( xMacInitStatus == eMACInit )
 800f07e:	4b49      	ldr	r3, [pc, #292]	; (800f1a4 <xNetworkInterfaceInitialise+0x12c>)
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d167      	bne.n	800f156 <xNetworkInterfaceInitialise+0xde>
    {
        xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TXBUFNB, ( UBaseType_t ) ETH_TXBUFNB );
 800f086:	2104      	movs	r1, #4
 800f088:	2004      	movs	r0, #4
 800f08a:	f7f5 fd93 	bl	8004bb4 <xQueueCreateCountingSemaphore>
 800f08e:	4602      	mov	r2, r0
 800f090:	4b45      	ldr	r3, [pc, #276]	; (800f1a8 <xNetworkInterfaceInitialise+0x130>)
 800f092:	601a      	str	r2, [r3, #0]

        if( xTXDescriptorSemaphore == NULL )
 800f094:	4b44      	ldr	r3, [pc, #272]	; (800f1a8 <xNetworkInterfaceInitialise+0x130>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d103      	bne.n	800f0a4 <xNetworkInterfaceInitialise+0x2c>
        {
            xMacInitStatus = eMACFailed;
 800f09c:	4b41      	ldr	r3, [pc, #260]	; (800f1a4 <xNetworkInterfaceInitialise+0x12c>)
 800f09e:	2202      	movs	r2, #2
 800f0a0:	701a      	strb	r2, [r3, #0]
 800f0a2:	e058      	b.n	800f156 <xNetworkInterfaceInitialise+0xde>
        }
        else
        {
            /* Initialise ETH */

            xETH.Instance = ETH;
 800f0a4:	4b41      	ldr	r3, [pc, #260]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0a6:	4a42      	ldr	r2, [pc, #264]	; (800f1b0 <xNetworkInterfaceInitialise+0x138>)
 800f0a8:	601a      	str	r2, [r3, #0]
            xETH.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800f0aa:	4b40      	ldr	r3, [pc, #256]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	605a      	str	r2, [r3, #4]
            xETH.Init.Speed = ETH_SPEED_100M;
 800f0b0:	4b3e      	ldr	r3, [pc, #248]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f0b6:	609a      	str	r2, [r3, #8]
            xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800f0b8:	4b3c      	ldr	r3, [pc, #240]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0be:	60da      	str	r2, [r3, #12]
            /* Value of PhyAddress doesn't matter, will be probed for. */
            xETH.Init.PhyAddress = 0;
 800f0c0:	4b3a      	ldr	r3, [pc, #232]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	821a      	strh	r2, [r3, #16]

            xETH.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 800f0c6:	f7fa feed 	bl	8009ea4 <FreeRTOS_GetMACAddress>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	4b37      	ldr	r3, [pc, #220]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0ce:	615a      	str	r2, [r3, #20]
            xETH.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800f0d0:	4b36      	ldr	r3, [pc, #216]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	619a      	str	r2, [r3, #24]
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
                {
                    /* using the ETH_CHECKSUM_BY_HARDWARE option:
                     * both the IP and the protocol checksums will be calculated
                     * by the peripheral. */
                    xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800f0d6:	4b35      	ldr	r3, [pc, #212]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0d8:	2200      	movs	r2, #0
 800f0da:	61da      	str	r2, [r3, #28]
                }
            #endif

            #if ( ipconfigUSE_RMII != 0 )
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800f0dc:	4b33      	ldr	r3, [pc, #204]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800f0e2:	621a      	str	r2, [r3, #32]
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
                }
            #endif /* ipconfigUSE_RMII */

            hal_eth_init_status = HAL_ETH_Init( &xETH );
 800f0e4:	4831      	ldr	r0, [pc, #196]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0e6:	f7f2 f8f5 	bl	80012d4 <HAL_ETH_Init>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	70fb      	strb	r3, [r7, #3]

            /* Only for inspection by debugger. */
            ( void ) hal_eth_init_status;

            /* Set the TxDesc and RxDesc pointers. */
            xETH.TxDesc = DMATxDscrTab;
 800f0ee:	4b2f      	ldr	r3, [pc, #188]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0f0:	4a30      	ldr	r2, [pc, #192]	; (800f1b4 <xNetworkInterfaceInitialise+0x13c>)
 800f0f2:	62da      	str	r2, [r3, #44]	; 0x2c
            xETH.RxDesc = DMARxDscrTab;
 800f0f4:	4b2d      	ldr	r3, [pc, #180]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f0f6:	4a30      	ldr	r2, [pc, #192]	; (800f1b8 <xNetworkInterfaceInitialise+0x140>)
 800f0f8:	629a      	str	r2, [r3, #40]	; 0x28

            /* Make sure that all unused fields are cleared. */
            memset( &DMATxDscrTab, '\0', sizeof( DMATxDscrTab ) );
 800f0fa:	2280      	movs	r2, #128	; 0x80
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	482d      	ldr	r0, [pc, #180]	; (800f1b4 <xNetworkInterfaceInitialise+0x13c>)
 800f100:	f000 fff3 	bl	80100ea <memset>
            memset( &DMARxDscrTab, '\0', sizeof( DMARxDscrTab ) );
 800f104:	2280      	movs	r2, #128	; 0x80
 800f106:	2100      	movs	r1, #0
 800f108:	482b      	ldr	r0, [pc, #172]	; (800f1b8 <xNetworkInterfaceInitialise+0x140>)
 800f10a:	f000 ffee 	bl	80100ea <memset>

            /* Initialize Tx Descriptors list: Chain Mode */
            DMATxDescToClear = DMATxDscrTab;
 800f10e:	4b2b      	ldr	r3, [pc, #172]	; (800f1bc <xNetworkInterfaceInitialise+0x144>)
 800f110:	4a28      	ldr	r2, [pc, #160]	; (800f1b4 <xNetworkInterfaceInitialise+0x13c>)
 800f112:	601a      	str	r2, [r3, #0]

            /* Initialise TX-descriptors. */
            prvDMATxDescListInit();
 800f114:	f000 f862 	bl	800f1dc <prvDMATxDescListInit>

            /* Initialise RX-descriptors. */
            prvDMARxDescListInit();
 800f118:	f000 f8a4 	bl	800f264 <prvDMARxDescListInit>

            #if ( ipconfigUSE_LLMNR != 0 )
                {
                    /* Program the LLMNR address at index 1. */
                    prvMACAddressConfig( &xETH, ETH_MAC_ADDRESS1, ( uint8_t * ) xLLMNR_MACAddress );
 800f11c:	4a28      	ldr	r2, [pc, #160]	; (800f1c0 <xNetworkInterfaceInitialise+0x148>)
 800f11e:	2108      	movs	r1, #8
 800f120:	4822      	ldr	r0, [pc, #136]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f122:	f000 f8eb 	bl	800f2fc <prvMACAddressConfig>
                }
            #endif

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 800f126:	2001      	movs	r0, #1
 800f128:	f000 fa9e 	bl	800f668 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             * possible priority to ensure the interrupt handler can return directly
             * to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             * notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &xEMACTaskHandle ) == pdPASS )
 800f12c:	4b25      	ldr	r3, [pc, #148]	; (800f1c4 <xNetworkInterfaceInitialise+0x14c>)
 800f12e:	9301      	str	r3, [sp, #4]
 800f130:	2304      	movs	r3, #4
 800f132:	9300      	str	r3, [sp, #0]
 800f134:	2300      	movs	r3, #0
 800f136:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f13a:	4923      	ldr	r1, [pc, #140]	; (800f1c8 <xNetworkInterfaceInitialise+0x150>)
 800f13c:	4823      	ldr	r0, [pc, #140]	; (800f1cc <xNetworkInterfaceInitialise+0x154>)
 800f13e:	f7f6 fb21 	bl	8005784 <xTaskCreate>
 800f142:	4603      	mov	r3, r0
 800f144:	2b01      	cmp	r3, #1
 800f146:	d103      	bne.n	800f150 <xNetworkInterfaceInitialise+0xd8>
            {
                /* The xTXDescriptorSemaphore and the task are created successfully. */
                xMacInitStatus = eMACPass;
 800f148:	4b16      	ldr	r3, [pc, #88]	; (800f1a4 <xNetworkInterfaceInitialise+0x12c>)
 800f14a:	2201      	movs	r2, #1
 800f14c:	701a      	strb	r2, [r3, #0]
 800f14e:	e002      	b.n	800f156 <xNetworkInterfaceInitialise+0xde>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 800f150:	4b14      	ldr	r3, [pc, #80]	; (800f1a4 <xNetworkInterfaceInitialise+0x12c>)
 800f152:	2202      	movs	r2, #2
 800f154:	701a      	strb	r2, [r3, #0]
            }
        }
    } /* if( xEMACTaskHandle == NULL ) */

    if( xMacInitStatus != eMACPass )
 800f156:	4b13      	ldr	r3, [pc, #76]	; (800f1a4 <xNetworkInterfaceInitialise+0x12c>)
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d002      	beq.n	800f164 <xNetworkInterfaceInitialise+0xec>
    {
        /* EMAC initialisation failed, return pdFAIL. */
        xResult = pdFAIL;
 800f15e:	2300      	movs	r3, #0
 800f160:	607b      	str	r3, [r7, #4]
 800f162:	e019      	b.n	800f198 <xNetworkInterfaceInitialise+0x120>
    }
    else
    {
        if( xPhyObject.ulLinkStatusMask != 0uL )
 800f164:	4b1a      	ldr	r3, [pc, #104]	; (800f1d0 <xNetworkInterfaceInitialise+0x158>)
 800f166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d013      	beq.n	800f194 <xNetworkInterfaceInitialise+0x11c>
        {
            xETH.Instance->DMAIER |= ETH_DMA_ALL_INTS;
 800f16c:	4b0f      	ldr	r3, [pc, #60]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	f241 031c 	movw	r3, #4124	; 0x101c
 800f174:	4413      	add	r3, r2
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	4a0c      	ldr	r2, [pc, #48]	; (800f1ac <xNetworkInterfaceInitialise+0x134>)
 800f17a:	6811      	ldr	r1, [r2, #0]
 800f17c:	4a15      	ldr	r2, [pc, #84]	; (800f1d4 <xNetworkInterfaceInitialise+0x15c>)
 800f17e:	431a      	orrs	r2, r3
 800f180:	f241 031c 	movw	r3, #4124	; 0x101c
 800f184:	440b      	add	r3, r1
 800f186:	601a      	str	r2, [r3, #0]
            xResult = pdPASS;
 800f188:	2301      	movs	r3, #1
 800f18a:	607b      	str	r3, [r7, #4]
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 800f18c:	4812      	ldr	r0, [pc, #72]	; (800f1d8 <xNetworkInterfaceInitialise+0x160>)
 800f18e:	f7f1 fc07 	bl	80009a0 <vLoggingPrintf>
 800f192:	e001      	b.n	800f198 <xNetworkInterfaceInitialise+0x120>
        }
        else
        {
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
            xResult = pdFAIL;
 800f194:	2300      	movs	r3, #0
 800f196:	607b      	str	r3, [r7, #4]
        }
    }

    /* When returning non-zero, the stack will become active and
     * start DHCP (in configured) */
    return xResult;
 800f198:	687b      	ldr	r3, [r7, #4]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	2000bce8 	.word	0x2000bce8
 800f1a8:	2000bd78 	.word	0x2000bd78
 800f1ac:	2000bd30 	.word	0x2000bd30
 800f1b0:	40028000 	.word	0x40028000
 800f1b4:	2000c8a0 	.word	0x2000c8a0
 800f1b8:	2000c920 	.word	0x2000c920
 800f1bc:	2000bd7c 	.word	0x2000bd7c
 800f1c0:	08011464 	.word	0x08011464
 800f1c4:	2000bd80 	.word	0x2000bd80
 800f1c8:	080110fc 	.word	0x080110fc
 800f1cc:	0800f75d 	.word	0x0800f75d
 800f1d0:	2000bcf0 	.word	0x2000bcf0
 800f1d4:	380163fb 	.word	0x380163fb
 800f1d8:	08011104 	.word	0x08011104

0800f1dc <prvDMATxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMATxDescListInit()
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
    ETH_DMADescTypeDef * pxDMADescriptor;
    BaseType_t xIndex;

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMATxDscrTab;
 800f1e2:	4b1e      	ldr	r3, [pc, #120]	; (800f25c <prvDMATxDescListInit+0x80>)
 800f1e4:	607b      	str	r3, [r7, #4]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	603b      	str	r3, [r7, #0]
 800f1ea:	e026      	b.n	800f23a <prvDMATxDescListInit+0x5e>
    {
        /* Set Second Address Chained bit */
        pxDMADescriptor->Status = ETH_DMATXDESC_TCH;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f1f2:	601a      	str	r2, [r3, #0]
                /* Set Buffer1 address pointer */
                pxDMADescriptor->Buffer1Addr = ( uint32_t ) ( Tx_Buff[ xIndex ] );
            }
        #endif

        if( xETH.Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 800f1f4:	4b1a      	ldr	r3, [pc, #104]	; (800f260 <prvDMATxDescListInit+0x84>)
 800f1f6:	69db      	ldr	r3, [r3, #28]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d106      	bne.n	800f20a <prvDMATxDescListInit+0x2e>
        {
            /* Set the DMA Tx descriptors checksum insertion for TCP, UDP, and ICMP */
            pxDMADescriptor->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	601a      	str	r2, [r3, #0]
 800f208:	e005      	b.n	800f216 <prvDMATxDescListInit+0x3a>
        }
        else
        {
            pxDMADescriptor->Status &= ~( ( uint32_t ) ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL );
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	601a      	str	r2, [r3, #0]
        }

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_TXBUFNB - 1 )
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d805      	bhi.n	800f228 <prvDMATxDescListInit+0x4c>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3320      	adds	r3, #32
 800f220:	461a      	mov	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	60da      	str	r2, [r3, #12]
 800f226:	e002      	b.n	800f22e <prvDMATxDescListInit+0x52>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMATxDscrTab;
 800f228:	4a0c      	ldr	r2, [pc, #48]	; (800f25c <prvDMATxDescListInit+0x80>)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	3301      	adds	r3, #1
 800f232:	603b      	str	r3, [r7, #0]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	3320      	adds	r3, #32
 800f238:	607b      	str	r3, [r7, #4]
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d9d5      	bls.n	800f1ec <prvDMATxDescListInit+0x10>
        }
    }

    /* Set Transmit Descriptor List Address Register */
    xETH.Instance->DMATDLAR = ( uint32_t ) DMATxDscrTab;
 800f240:	4b07      	ldr	r3, [pc, #28]	; (800f260 <prvDMATxDescListInit+0x84>)
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	4905      	ldr	r1, [pc, #20]	; (800f25c <prvDMATxDescListInit+0x80>)
 800f246:	f241 0310 	movw	r3, #4112	; 0x1010
 800f24a:	4413      	add	r3, r2
 800f24c:	6019      	str	r1, [r3, #0]
}
 800f24e:	bf00      	nop
 800f250:	370c      	adds	r7, #12
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	2000c8a0 	.word	0x2000c8a0
 800f260:	2000bd30 	.word	0x2000bd30

0800f264 <prvDMARxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMARxDescListInit()
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
    /*
     * RX-descriptors.
     */

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMARxDscrTab;
 800f26a:	4b21      	ldr	r3, [pc, #132]	; (800f2f0 <prvDMARxDescListInit+0x8c>)
 800f26c:	60fb      	str	r3, [r7, #12]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 800f26e:	2300      	movs	r3, #0
 800f270:	60bb      	str	r3, [r7, #8]
 800f272:	e02f      	b.n	800f2d4 <prvDMARxDescListInit+0x70>
    {
        /* Set Buffer1 size and Second Address Chained bit */
        pxDMADescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800f27a:	605a      	str	r2, [r3, #4]
        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Set Buffer1 address pointer */
                NetworkBufferDescriptor_t * pxBuffer;

                pxBuffer = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, 100ul );
 800f27c:	2164      	movs	r1, #100	; 0x64
 800f27e:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800f282:	f000 fe0f 	bl	800fea4 <pxGetNetworkBufferWithDescriptor>
 800f286:	6078      	str	r0, [r7, #4]

                /* If the assert below fails, make sure that there are at least 'ETH_RXBUFNB'
                 * Network Buffers available during start-up ( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) */
                configASSERT( pxBuffer != NULL );
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d104      	bne.n	800f298 <prvDMARxDescListInit+0x34>
 800f28e:	4919      	ldr	r1, [pc, #100]	; (800f2f4 <prvDMARxDescListInit+0x90>)
 800f290:	f240 2055 	movw	r0, #597	; 0x255
 800f294:	f7f1 fbfe 	bl	8000a94 <vAssertCalled>

                if( pxBuffer != NULL )
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d008      	beq.n	800f2b0 <prvDMARxDescListInit+0x4c>
                {
                    pxDMADescriptor->Buffer1Addr = ( uint32_t ) pxBuffer->pucEthernetBuffer;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	699b      	ldr	r3, [r3, #24]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	609a      	str	r2, [r3, #8]
                    pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f2ae:	601a      	str	r2, [r3, #0]
                pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_RXBUFNB - 1 )
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d805      	bhi.n	800f2c2 <prvDMARxDescListInit+0x5e>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	3320      	adds	r3, #32
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	60da      	str	r2, [r3, #12]
 800f2c0:	e002      	b.n	800f2c8 <prvDMARxDescListInit+0x64>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMARxDscrTab;
 800f2c2:	4a0b      	ldr	r2, [pc, #44]	; (800f2f0 <prvDMARxDescListInit+0x8c>)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	60bb      	str	r3, [r7, #8]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	3320      	adds	r3, #32
 800f2d2:	60fb      	str	r3, [r7, #12]
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	2b03      	cmp	r3, #3
 800f2d8:	d9cc      	bls.n	800f274 <prvDMARxDescListInit+0x10>
        }
    }

    /* Set Receive Descriptor List Address Register */
    xETH.Instance->DMARDLAR = ( uint32_t ) DMARxDscrTab;
 800f2da:	4b07      	ldr	r3, [pc, #28]	; (800f2f8 <prvDMARxDescListInit+0x94>)
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	4904      	ldr	r1, [pc, #16]	; (800f2f0 <prvDMARxDescListInit+0x8c>)
 800f2e0:	f241 030c 	movw	r3, #4108	; 0x100c
 800f2e4:	4413      	add	r3, r2
 800f2e6:	6019      	str	r1, [r3, #0]
}
 800f2e8:	bf00      	nop
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	2000c920 	.word	0x2000c920
 800f2f4:	0801111c 	.word	0x0801111c
 800f2f8:	2000bd30 	.word	0x2000bd30

0800f2fc <prvMACAddressConfig>:
/*-----------------------------------------------------------*/

static void prvMACAddressConfig( ETH_HandleTypeDef * heth,
                                 uint32_t ulIndex,
                                 uint8_t * Addr )
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b087      	sub	sp, #28
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
    uint32_t ulTempReg;

    ( void ) heth;

    /* Calculate the selected MAC address high register. */
    ulTempReg = 0x80000000ul | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	3305      	adds	r3, #5
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	021b      	lsls	r3, r3, #8
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	3204      	adds	r2, #4
 800f314:	7812      	ldrb	r2, [r2, #0]
 800f316:	4313      	orrs	r3, r2
 800f318:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f31c:	617b      	str	r3, [r7, #20]

    /* Load the selected MAC address high register. */
    ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + ulIndex ) ) ) = ulTempReg;
 800f31e:	68ba      	ldr	r2, [r7, #8]
 800f320:	4b11      	ldr	r3, [pc, #68]	; (800f368 <prvMACAddressConfig+0x6c>)
 800f322:	4413      	add	r3, r2
 800f324:	461a      	mov	r2, r3
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	6013      	str	r3, [r2, #0]

    /* Calculate the selected MAC address low register. */
    ulTempReg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) Addr[ 1 ] << 8 ) | Addr[ 0 ];
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3303      	adds	r3, #3
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	061a      	lsls	r2, r3, #24
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	3302      	adds	r3, #2
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	041b      	lsls	r3, r3, #16
 800f33a:	431a      	orrs	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	3301      	adds	r3, #1
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	021b      	lsls	r3, r3, #8
 800f344:	4313      	orrs	r3, r2
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	7812      	ldrb	r2, [r2, #0]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	617b      	str	r3, [r7, #20]

    /* Load the selected MAC address low register */
    ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + ulIndex ) ) ) = ulTempReg;
 800f34e:	68ba      	ldr	r2, [r7, #8]
 800f350:	4b06      	ldr	r3, [pc, #24]	; (800f36c <prvMACAddressConfig+0x70>)
 800f352:	4413      	add	r3, r2
 800f354:	461a      	mov	r2, r3
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	6013      	str	r3, [r2, #0]
}
 800f35a:	bf00      	nop
 800f35c:	371c      	adds	r7, #28
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	40028040 	.word	0x40028040
 800f36c:	40028044 	.word	0x40028044

0800f370 <xNetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor,
                                    BaseType_t bReleaseAfterSend )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b088      	sub	sp, #32
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 800f37a:	2300      	movs	r3, #0
 800f37c:	61fb      	str	r3, [r7, #28]
    uint32_t ulTransmitSize = 0;
 800f37e:	2300      	movs	r3, #0
 800f380:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDmaTxDesc;
/* Do not wait too long for a free TX DMA buffer. */
    const TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 50u );
 800f382:	2332      	movs	r3, #50	; 0x32
 800f384:	617b      	str	r3, [r7, #20]
            {
                ProtocolPacket_t * pxPacket;

                /* If the peripheral must calculate the checksum, it wants
                 * the protocol checksum to have a value of zero. */
                pxPacket = ( ProtocolPacket_t * ) ( pxDescriptor->pucEthernetBuffer );
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	699b      	ldr	r3, [r3, #24]
 800f38a:	613b      	str	r3, [r7, #16]

                if( pxPacket->xICMPPacket.xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP )
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	7ddb      	ldrb	r3, [r3, #23]
 800f390:	2b01      	cmp	r3, #1
 800f392:	d106      	bne.n	800f3a2 <xNetworkInterfaceOutput+0x32>
                {
                    pxPacket->xICMPPacket.xICMPHeader.usChecksum = ( uint16_t ) 0u;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	2200      	movs	r2, #0
 800f398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
            }
        #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM */

        if( xPhyObject.ulLinkStatusMask != 0 )
 800f3a2:	4b34      	ldr	r3, [pc, #208]	; (800f474 <xNetworkInterfaceOutput+0x104>)
 800f3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d058      	beq.n	800f45c <xNetworkInterfaceOutput+0xec>
        {
            if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 800f3aa:	4b33      	ldr	r3, [pc, #204]	; (800f478 <xNetworkInterfaceOutput+0x108>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	6979      	ldr	r1, [r7, #20]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7f5 fea9 	bl	8005108 <xQueueSemaphoreTake>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d14e      	bne.n	800f45a <xNetworkInterfaceOutput+0xea>
                break;
            }

            /* This function does the actual transmission of the packet. The packet is
             * contained in 'pxDescriptor' that is passed to the function. */
            pxDmaTxDesc = xETH.TxDesc;
 800f3bc:	4b2f      	ldr	r3, [pc, #188]	; (800f47c <xNetworkInterfaceOutput+0x10c>)
 800f3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c0:	60fb      	str	r3, [r7, #12]

            /* Is this buffer available? */
            configASSERT( ( pxDmaTxDesc->Status & ETH_DMATXDESC_OWN ) == 0 );
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	da04      	bge.n	800f3d4 <xNetworkInterfaceOutput+0x64>
 800f3ca:	492d      	ldr	r1, [pc, #180]	; (800f480 <xNetworkInterfaceOutput+0x110>)
 800f3cc:	f240 20b6 	movw	r0, #694	; 0x2b6
 800f3d0:	f7f1 fb60 	bl	8000a94 <vAssertCalled>

            {
                /* Is this buffer available? */
                /* Get bytes in current buffer. */
                ulTransmitSize = pxDescriptor->xDataLength;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	69db      	ldr	r3, [r3, #28]
 800f3d8:	61bb      	str	r3, [r7, #24]

                if( ulTransmitSize > ETH_TX_BUF_SIZE )
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d902      	bls.n	800f3ea <xNetworkInterfaceOutput+0x7a>
                {
                    ulTransmitSize = ETH_TX_BUF_SIZE;
 800f3e4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800f3e8:	61bb      	str	r3, [r7, #24]
                        /* Copy the bytes. */
                        memcpy( ( void * ) pxDmaTxDesc->Buffer1Addr, pxDescriptor->pucEthernetBuffer, ulTransmitSize );
                    }
                #else
                    {
                        configASSERT( bReleaseAfterSend != 0 );
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d104      	bne.n	800f3fa <xNetworkInterfaceOutput+0x8a>
 800f3f0:	4923      	ldr	r1, [pc, #140]	; (800f480 <xNetworkInterfaceOutput+0x110>)
 800f3f2:	f240 20c9 	movw	r0, #713	; 0x2c9
 800f3f6:	f7f1 fb4d 	bl	8000a94 <vAssertCalled>

                        /* Move the buffer. */
                        pxDmaTxDesc->Buffer1Addr = ( uint32_t ) pxDescriptor->pucEthernetBuffer;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	699b      	ldr	r3, [r3, #24]
 800f3fe:	461a      	mov	r2, r3
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	609a      	str	r2, [r3, #8]
                        /* The Network Buffer has been passed to DMA, no need to release it. */
                        bReleaseAfterSend = pdFALSE_UNSIGNED;
 800f404:	2300      	movs	r3, #0
 800f406:	603b      	str	r3, [r7, #0]

                /* Ask to set the IPv4 checksum.
                 * Also need an Interrupt on Completion so that 'vClearTXBuffers()' will be called.. */
                #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
                    {
                        pxDmaTxDesc->Status |= ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_IC;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	4b1d      	ldr	r3, [pc, #116]	; (800f484 <xNetworkInterfaceOutput+0x114>)
 800f40e:	4313      	orrs	r3, r2
 800f410:	68fa      	ldr	r2, [r7, #12]
 800f412:	6013      	str	r3, [r2, #0]


                /* Prepare transmit descriptors to give to DMA. */

                /* Set LAST and FIRST segment */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f043 5240 	orr.w	r2, r3, #805306368	; 0x30000000
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	601a      	str	r2, [r3, #0]
                /* Set frame size */
                pxDmaTxDesc->ControlBufferSize = ( ulTransmitSize & ETH_DMATXDESC_TBS1 );
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	605a      	str	r2, [r3, #4]
                        cache_clean_invalidate_by_addr( pulBuffer, xlength );
                    }
                #endif

                /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_OWN;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	601a      	str	r2, [r3, #0]

                /* Point to next descriptor */
                xETH.TxDesc = ( ETH_DMADescTypeDef * ) ( xETH.TxDesc->Buffer2NextDescAddr );
 800f436:	4b11      	ldr	r3, [pc, #68]	; (800f47c <xNetworkInterfaceOutput+0x10c>)
 800f438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f43a:	68db      	ldr	r3, [r3, #12]
 800f43c:	461a      	mov	r2, r3
 800f43e:	4b0f      	ldr	r3, [pc, #60]	; (800f47c <xNetworkInterfaceOutput+0x10c>)
 800f440:	62da      	str	r2, [r3, #44]	; 0x2c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f442:	f3bf 8f4f 	dsb	sy
                /* Ensure completion of memory access */
                __DSB();
                /* Resume DMA transmission*/
                xETH.Instance->DMATPDR = 0;
 800f446:	4b0d      	ldr	r3, [pc, #52]	; (800f47c <xNetworkInterfaceOutput+0x10c>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	f241 0304 	movw	r3, #4100	; 0x1004
 800f44e:	4413      	add	r3, r2
 800f450:	2200      	movs	r2, #0
 800f452:	601a      	str	r2, [r3, #0]
                iptraceNETWORK_INTERFACE_TRANSMIT();
                xReturn = pdPASS;
 800f454:	2301      	movs	r3, #1
 800f456:	61fb      	str	r3, [r7, #28]
 800f458:	e000      	b.n	800f45c <xNetworkInterfaceOutput+0xec>
                break;
 800f45a:	bf00      	nop
            /* The PHY has no Link Status, packet shall be dropped. */
        }
    } while( 0 );

    /* The buffer has been sent so can be released. */
    if( bReleaseAfterSend != pdFALSE )
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d002      	beq.n	800f468 <xNetworkInterfaceOutput+0xf8>
    {
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 fd98 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
    }

    return xReturn;
 800f468:	69fb      	ldr	r3, [r7, #28]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3720      	adds	r7, #32
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	2000bcf0 	.word	0x2000bcf0
 800f478:	2000bd78 	.word	0x2000bd78
 800f47c:	2000bd30 	.word	0x2000bd30
 800f480:	0801111c 	.word	0x0801111c
 800f484:	40c00000 	.word	0x40c00000

0800f488 <xMayAcceptPacket>:
/*-----------------------------------------------------------*/

static BaseType_t xMayAcceptPacket( uint8_t * pcBuffer )
{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
    const ProtocolPacket_t * pxProtPacket = ( const ProtocolPacket_t * ) pcBuffer;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	60fb      	str	r3, [r7, #12]

    switch( pxProtPacket->xTCPPacket.xEthernetHeader.usFrameType )
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	899b      	ldrh	r3, [r3, #12]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	2b08      	cmp	r3, #8
 800f49c:	d006      	beq.n	800f4ac <xMayAcceptPacket+0x24>
 800f49e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f4a2:	d101      	bne.n	800f4a8 <xMayAcceptPacket+0x20>
    {
        case ipARP_FRAME_TYPE:
            /* Check it later. */
            return pdTRUE;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e003      	b.n	800f4b0 <xMayAcceptPacket+0x28>
            /* Check it here. */
            break;

        default:
            /* Refuse the packet. */
            return pdFALSE;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	e001      	b.n	800f4b0 <xMayAcceptPacket+0x28>
            break;
 800f4ac:	bf00      	nop
                    return pdFALSE;
                }
            }
        }
    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    return pdTRUE;
 800f4ae:	2301      	movs	r3, #1
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3714      	adds	r7, #20
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr

0800f4bc <prvPassEthMessages>:
/*-----------------------------------------------------------*/

static void prvPassEthMessages( NetworkBufferDescriptor_t * pxDescriptor )
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b086      	sub	sp, #24
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xRxEvent;

    xRxEvent.eEventType = eNetworkRxEvent;
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	733b      	strb	r3, [r7, #12]
    xRxEvent.pvData = ( void * ) pxDescriptor;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	613b      	str	r3, [r7, #16]

    if( xSendEventStructToIPTask( &xRxEvent, ( TickType_t ) 1000 ) != pdPASS )
 800f4cc:	f107 030c 	add.w	r3, r7, #12
 800f4d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fa f899 	bl	800960c <xSendEventStructToIPTask>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d00d      	beq.n	800f4fc <prvPassEthMessages+0x40>
         * use the task level function here. */
        #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                do
                {
                    NetworkBufferDescriptor_t * pxNext = pxDescriptor->pxNextBuffer;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e4:	617b      	str	r3, [r7, #20]
                    vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 fd56 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
                    pxDescriptor = pxNext;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	607b      	str	r3, [r7, #4]
                } while( pxDescriptor != NULL );
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d1f4      	bne.n	800f4e0 <prvPassEthMessages+0x24>
            {
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
            }
        #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
        iptraceETHERNET_RX_EVENT_LOST();
        FreeRTOS_printf( ( "prvPassEthMessages: Can not queue return packet!\n" ) );
 800f4f6:	4803      	ldr	r0, [pc, #12]	; (800f504 <prvPassEthMessages+0x48>)
 800f4f8:	f7f1 fa52 	bl	80009a0 <vLoggingPrintf>
    }
    else
    {
        iptraceNETWORK_INTERFACE_RECEIVE();
    }
}
 800f4fc:	bf00      	nop
 800f4fe:	3718      	adds	r7, #24
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	08011150 	.word	0x08011150

0800f508 <prvNetworkInterfaceInput>:

static BaseType_t prvNetworkInterfaceInput( void )
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08a      	sub	sp, #40	; 0x28
 800f50c:	af00      	add	r7, sp, #0
    NetworkBufferDescriptor_t * pxCurDescriptor;
    NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800f50e:	2300      	movs	r3, #0
 800f510:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        NetworkBufferDescriptor_t * pxFirstDescriptor = NULL;
 800f512:	2300      	movs	r3, #0
 800f514:	623b      	str	r3, [r7, #32]
        NetworkBufferDescriptor_t * pxLastDescriptor = NULL;
 800f516:	2300      	movs	r3, #0
 800f518:	61fb      	str	r3, [r7, #28]
    #endif
    BaseType_t xReceivedLength = 0;
 800f51a:	2300      	movs	r3, #0
 800f51c:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDMARxDescriptor;
    const TickType_t xDescriptorWaitTime = pdMS_TO_TICKS( niDESCRIPTOR_WAIT_TIME_MS );
 800f51e:	23fa      	movs	r3, #250	; 0xfa
 800f520:	60fb      	str	r3, [r7, #12]
    uint8_t * pucBuffer;

    pxDMARxDescriptor = xETH.RxDesc;
 800f522:	4b4f      	ldr	r3, [pc, #316]	; (800f660 <prvNetworkInterfaceInput+0x158>)
 800f524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f526:	617b      	str	r3, [r7, #20]

    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 800f528:	e085      	b.n	800f636 <prvNetworkInterfaceInput+0x12e>
    {
        BaseType_t xAccepted = pdTRUE;
 800f52a:	2301      	movs	r3, #1
 800f52c:	613b      	str	r3, [r7, #16]
        /* Get the Frame Length of the received packet: subtract 4 bytes of the CRC */
        xReceivedLength = ( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_FL ) >> ETH_DMARXDESC_FRAMELENGTHSHIFT ) - 4;
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	0c1b      	lsrs	r3, r3, #16
 800f534:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f538:	3b04      	subs	r3, #4
 800f53a:	61bb      	str	r3, [r7, #24]

        pucBuffer = ( uint8_t * ) pxDMARxDescriptor->Buffer1Addr;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	60bb      	str	r3, [r7, #8]

        /* Update the ETHERNET DMA global Rx descriptor with next Rx descriptor */
        /* Chained Mode */
        /* Selects the next DMA Rx descriptor list for next buffer to read */
        xETH.RxDesc = ( ETH_DMADescTypeDef * ) pxDMARxDescriptor->Buffer2NextDescAddr;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	461a      	mov	r2, r3
 800f548:	4b45      	ldr	r3, [pc, #276]	; (800f660 <prvNetworkInterfaceInput+0x158>)
 800f54a:	629a      	str	r2, [r3, #40]	; 0x28

        /* In order to make the code easier and faster, only packets in a single buffer
         * will be accepted.  This can be done by making the buffers large enough to
         * hold a complete Ethernet packet (1536 bytes).
         * Therefore, two sanity checks: */
        configASSERT( xReceivedLength <= ETH_RX_BUF_SIZE );
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800f552:	4293      	cmp	r3, r2
 800f554:	d904      	bls.n	800f560 <prvNetworkInterfaceInput+0x58>
 800f556:	4943      	ldr	r1, [pc, #268]	; (800f664 <prvNetworkInterfaceInput+0x15c>)
 800f558:	f240 30a6 	movw	r0, #934	; 0x3a6
 800f55c:	f7f1 fa9a 	bl	8000a94 <vAssertCalled>

        if( ( pxDMARxDescriptor->Status & ( ETH_DMARXDESC_CE | ETH_DMARXDESC_IPV4HCE | ETH_DMARXDESC_FT ) ) != ETH_DMARXDESC_FT )
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f003 03a2 	and.w	r3, r3, #162	; 0xa2
 800f568:	2b20      	cmp	r3, #32
 800f56a:	d002      	beq.n	800f572 <prvNetworkInterfaceInput+0x6a>
        {
            /* Not an Ethernet frame-type or a checksum error. */
            xAccepted = pdFALSE;
 800f56c:	2300      	movs	r3, #0
 800f56e:	613b      	str	r3, [r7, #16]
 800f570:	e003      	b.n	800f57a <prvNetworkInterfaceInput+0x72>
        }
        else
        {
            /* See if this packet must be handled. */
            xAccepted = xMayAcceptPacket( pucBuffer );
 800f572:	68b8      	ldr	r0, [r7, #8]
 800f574:	f7ff ff88 	bl	800f488 <xMayAcceptPacket>
 800f578:	6138      	str	r0, [r7, #16]
        }

        if( xAccepted != pdFALSE )
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00a      	beq.n	800f596 <prvNetworkInterfaceInput+0x8e>
        {
            /* The packet will be accepted, but check first if a new Network Buffer can
             * be obtained. If not, the packet will still be dropped. */
            pxNewDescriptor = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, xDescriptorWaitTime );
 800f580:	68f9      	ldr	r1, [r7, #12]
 800f582:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800f586:	f000 fc8d 	bl	800fea4 <pxGetNetworkBufferWithDescriptor>
 800f58a:	6278      	str	r0, [r7, #36]	; 0x24

            if( pxNewDescriptor == NULL )
 800f58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d101      	bne.n	800f596 <prvNetworkInterfaceInput+0x8e>
            {
                /* A new descriptor can not be allocated now. This packet will be dropped. */
                xAccepted = pdFALSE;
 800f592:	2300      	movs	r3, #0
 800f594:	613b      	str	r3, [r7, #16]
        }

        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Find out which Network Buffer was originally passed to the descriptor. */
                pxCurDescriptor = pxPacketBuffer_to_NetworkBuffer( pucBuffer );
 800f596:	68b8      	ldr	r0, [r7, #8]
 800f598:	f7f9 ff1a 	bl	80093d0 <pxPacketBuffer_to_NetworkBuffer>
 800f59c:	6078      	str	r0, [r7, #4]
                configASSERT( pxCurDescriptor != NULL );
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d104      	bne.n	800f5ae <prvNetworkInterfaceInput+0xa6>
 800f5a4:	492f      	ldr	r1, [pc, #188]	; (800f664 <prvNetworkInterfaceInput+0x15c>)
 800f5a6:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 800f5aa:	f7f1 fa73 	bl	8000a94 <vAssertCalled>
                    memcpy( pxNewDescriptor->pucEthernetBuffer, pucBuffer, xReceivedLength );
                }
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        if( xAccepted != pdFALSE )
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d013      	beq.n	800f5dc <prvNetworkInterfaceInput+0xd4>
        {
            pxCurDescriptor->xDataLength = xReceivedLength;
 800f5b4:	69ba      	ldr	r2, [r7, #24]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	61da      	str	r2, [r3, #28]
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxCurDescriptor->pxNextBuffer = NULL;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	625a      	str	r2, [r3, #36]	; 0x24

                    if( pxFirstDescriptor == NULL )
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d102      	bne.n	800f5cc <prvNetworkInterfaceInput+0xc4>
                    {
                        /* Becomes the first message */
                        pxFirstDescriptor = pxCurDescriptor;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	623b      	str	r3, [r7, #32]
 800f5ca:	e005      	b.n	800f5d8 <prvNetworkInterfaceInput+0xd0>
                    }
                    else if( pxLastDescriptor != NULL )
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d002      	beq.n	800f5d8 <prvNetworkInterfaceInput+0xd0>
                    {
                        /* Add to the tail */
                        pxLastDescriptor->pxNextBuffer = pxCurDescriptor;
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	625a      	str	r2, [r3, #36]	; 0x24
                    }

                    pxLastDescriptor = pxCurDescriptor;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	61fb      	str	r3, [r7, #28]

        /* Release descriptors to DMA */
        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Set Buffer1 address pointer */
                if( pxNewDescriptor != NULL )
 800f5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d004      	beq.n	800f5ec <prvNetworkInterfaceInput+0xe4>
                {
                    pxDMARxDescriptor->Buffer1Addr = ( uint32_t ) pxNewDescriptor->pucEthernetBuffer;
 800f5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e4:	699b      	ldr	r3, [r3, #24]
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	609a      	str	r2, [r3, #8]
                }
            }
        #endif /* ipconfigZERO_COPY_RX_DRIVER */

        /* Set Buffer1 size and Second Address Chained bit */
        pxDMARxDescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800f5f2:	605a      	str	r2, [r3, #4]
        pxDMARxDescriptor->Status = ETH_DMARXDESC_OWN;
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f5fa:	601a      	str	r2, [r3, #0]
 800f5fc:	f3bf 8f4f 	dsb	sy
        /* Ensure completion of memory access */
        __DSB();

        /* When Rx Buffer unavailable flag is set clear it and resume
         * reception. */
        if( ( xETH.Instance->DMASR & ETH_DMASR_RBUS ) != 0 )
 800f600:	4b17      	ldr	r3, [pc, #92]	; (800f660 <prvNetworkInterfaceInput+0x158>)
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	f241 0314 	movw	r3, #4116	; 0x1014
 800f608:	4413      	add	r3, r2
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00d      	beq.n	800f630 <prvNetworkInterfaceInput+0x128>
        {
            /* Clear RBUS ETHERNET DMA flag. */
            xETH.Instance->DMASR = ETH_DMASR_RBUS;
 800f614:	4b12      	ldr	r3, [pc, #72]	; (800f660 <prvNetworkInterfaceInput+0x158>)
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	f241 0314 	movw	r3, #4116	; 0x1014
 800f61c:	4413      	add	r3, r2
 800f61e:	2280      	movs	r2, #128	; 0x80
 800f620:	601a      	str	r2, [r3, #0]

            /* Resume DMA reception. */
            xETH.Instance->DMARPDR = 0;
 800f622:	4b0f      	ldr	r3, [pc, #60]	; (800f660 <prvNetworkInterfaceInput+0x158>)
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	f241 0308 	movw	r3, #4104	; 0x1008
 800f62a:	4413      	add	r3, r2
 800f62c:	2200      	movs	r2, #0
 800f62e:	601a      	str	r2, [r3, #0]
        }

        pxDMARxDescriptor = xETH.RxDesc;
 800f630:	4b0b      	ldr	r3, [pc, #44]	; (800f660 <prvNetworkInterfaceInput+0x158>)
 800f632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f634:	617b      	str	r3, [r7, #20]
    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f6bf af75 	bge.w	800f52a <prvNetworkInterfaceInput+0x22>
    }

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        {
            if( pxFirstDescriptor != NULL )
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d002      	beq.n	800f64c <prvNetworkInterfaceInput+0x144>
            {
                prvPassEthMessages( pxFirstDescriptor );
 800f646:	6a38      	ldr	r0, [r7, #32]
 800f648:	f7ff ff38 	bl	800f4bc <prvPassEthMessages>
            }
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */

    return( xReceivedLength > 0 );
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	bfcc      	ite	gt
 800f652:	2301      	movgt	r3, #1
 800f654:	2300      	movle	r3, #0
 800f656:	b2db      	uxtb	r3, r3
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3728      	adds	r7, #40	; 0x28
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	2000bd30 	.word	0x2000bd30
 800f664:	0801111c 	.word	0x0801111c

0800f668 <prvEthernetUpdateConfig>:
    xPhyConfigure( &xPhyObject, &xPHYProperties );
}
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 800f670:	4b37      	ldr	r3, [pc, #220]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	4619      	mov	r1, r3
 800f678:	4836      	ldr	r0, [pc, #216]	; (800f754 <prvEthernetUpdateConfig+0xec>)
 800f67a:	f7f1 f991 	bl	80009a0 <vLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d103      	bne.n	800f68c <prvEthernetUpdateConfig+0x24>
 800f684:	4b32      	ldr	r3, [pc, #200]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d059      	beq.n	800f740 <prvEthernetUpdateConfig+0xd8>
    {
        /* Restart the auto-negotiation. */
        if( xETH.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE )
 800f68c:	4b32      	ldr	r3, [pc, #200]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d024      	beq.n	800f6de <prvEthernetUpdateConfig+0x76>
        {
            xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 800f694:	4b2e      	ldr	r3, [pc, #184]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f698:	2201      	movs	r2, #1
 800f69a:	fa02 f303 	lsl.w	r3, r2, r3
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	482b      	ldr	r0, [pc, #172]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f6a4:	f000 f93a 	bl	800f91c <xPhyStartAutoNegotiation>

            /* Configure the MAC with the Duplex Mode fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 800f6a8:	4b29      	ldr	r3, [pc, #164]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f6aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f6ae:	2b02      	cmp	r3, #2
 800f6b0:	d104      	bne.n	800f6bc <prvEthernetUpdateConfig+0x54>
            {
                xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800f6b2:	4b29      	ldr	r3, [pc, #164]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f6b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f6b8:	60da      	str	r2, [r3, #12]
 800f6ba:	e002      	b.n	800f6c2 <prvEthernetUpdateConfig+0x5a>
            }
            else
            {
                xETH.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800f6bc:	4b26      	ldr	r3, [pc, #152]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f6be:	2200      	movs	r2, #0
 800f6c0:	60da      	str	r2, [r3, #12]
            }

            /* Configure the MAC with the speed fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 800f6c2:	4b23      	ldr	r3, [pc, #140]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f6c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	d103      	bne.n	800f6d4 <prvEthernetUpdateConfig+0x6c>
            {
                xETH.Init.Speed = ETH_SPEED_10M;
 800f6cc:	4b22      	ldr	r3, [pc, #136]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	609a      	str	r2, [r3, #8]
 800f6d2:	e02d      	b.n	800f730 <prvEthernetUpdateConfig+0xc8>
            }
            else
            {
                xETH.Init.Speed = ETH_SPEED_100M;
 800f6d4:	4b20      	ldr	r3, [pc, #128]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f6d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f6da:	609a      	str	r2, [r3, #8]
 800f6dc:	e028      	b.n	800f730 <prvEthernetUpdateConfig+0xc8>
        {
            /* Check parameters */
            assert_param( IS_ETH_SPEED( xETH.Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( xETH.Init.DuplexMode ) );

            if( xETH.Init.DuplexMode == ETH_MODE_FULLDUPLEX )
 800f6de:	4b1e      	ldr	r3, [pc, #120]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f6e0:	68db      	ldr	r3, [r3, #12]
 800f6e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6e6:	d104      	bne.n	800f6f2 <prvEthernetUpdateConfig+0x8a>
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_HALF;
 800f6e8:	4b19      	ldr	r3, [pc, #100]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800f6f0:	e003      	b.n	800f6fa <prvEthernetUpdateConfig+0x92>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_FULL;
 800f6f2:	4b17      	ldr	r3, [pc, #92]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f6f4:	2202      	movs	r2, #2
 800f6f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            }

            if( xETH.Init.Speed == ETH_SPEED_10M )
 800f6fa:	4b17      	ldr	r3, [pc, #92]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f6fc:	689b      	ldr	r3, [r3, #8]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d104      	bne.n	800f70c <prvEthernetUpdateConfig+0xa4>
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_10;
 800f702:	4b13      	ldr	r3, [pc, #76]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f704:	2201      	movs	r2, #1
 800f706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800f70a:	e003      	b.n	800f714 <prvEthernetUpdateConfig+0xac>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_100;
 800f70c:	4b10      	ldr	r3, [pc, #64]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f70e:	2202      	movs	r2, #2
 800f710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }

            xPhyObject.xPhyPreferences.ucMDI_X = PHY_MDIX_AUTO;
 800f714:	4b0e      	ldr	r3, [pc, #56]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f716:	2203      	movs	r2, #3
 800f718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            /* Use predefined (fixed) configuration. */
            xPhyFixedValue( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 800f71c:	4b0c      	ldr	r3, [pc, #48]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f720:	2201      	movs	r2, #1
 800f722:	fa02 f303 	lsl.w	r3, r2, r3
 800f726:	3b01      	subs	r3, #1
 800f728:	4619      	mov	r1, r3
 800f72a:	4809      	ldr	r0, [pc, #36]	; (800f750 <prvEthernetUpdateConfig+0xe8>)
 800f72c:	f000 f8b6 	bl	800f89c <xPhyFixedValue>
        }

        /* ETHERNET MAC Re-Configuration */
        HAL_ETH_ConfigMAC( &xETH, ( ETH_MACInitTypeDef * ) NULL );
 800f730:	2100      	movs	r1, #0
 800f732:	4809      	ldr	r0, [pc, #36]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f734:	f7f2 f908 	bl	8001948 <HAL_ETH_ConfigMAC>

        /* Restart MAC interface */
        HAL_ETH_Start( &xETH );
 800f738:	4807      	ldr	r0, [pc, #28]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f73a:	f7f2 f8a6 	bl	800188a <HAL_ETH_Start>
 800f73e:	e002      	b.n	800f746 <prvEthernetUpdateConfig+0xde>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop( &xETH );
 800f740:	4805      	ldr	r0, [pc, #20]	; (800f758 <prvEthernetUpdateConfig+0xf0>)
 800f742:	f7f2 f8d1 	bl	80018e8 <HAL_ETH_Stop>
    }
}
 800f746:	bf00      	nop
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	2000bcf0 	.word	0x2000bcf0
 800f754:	08011184 	.word	0x08011184
 800f758:	2000bd30 	.word	0x2000bd30

0800f75c <prvEMACHandlerTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b086      	sub	sp, #24
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
    UBaseType_t uxLastMinBufferCount = 0;
 800f764:	2300      	movs	r3, #0
 800f766:	617b      	str	r3, [r7, #20]
    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        UBaseType_t uxLastMinQueueSpace = 0;
    #endif
    UBaseType_t uxCurrentCount;
    BaseType_t xResult;
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
 800f768:	2364      	movs	r3, #100	; 0x64
 800f76a:	60fb      	str	r3, [r7, #12]
    /* Remove compiler warnings about unused parameters. */
    ( void ) pvParameters;

    for( ; ; )
    {
        xResult = 0;
 800f76c:	2300      	movs	r3, #0
 800f76e:	613b      	str	r3, [r7, #16]
        uxCurrentCount = uxGetMinimumFreeNetworkBuffers();
 800f770:	f000 fc52 	bl	8010018 <uxGetMinimumFreeNetworkBuffers>
 800f774:	60b8      	str	r0, [r7, #8]

        if( uxLastMinBufferCount != uxCurrentCount )
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d009      	beq.n	800f792 <prvEMACHandlerTask+0x36>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentCount;
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	617b      	str	r3, [r7, #20]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800f782:	f000 fc3d 	bl	8010000 <uxGetNumberOfFreeNetworkBuffers>
 800f786:	4603      	mov	r3, r0
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	4619      	mov	r1, r3
 800f78c:	482c      	ldr	r0, [pc, #176]	; (800f840 <prvEMACHandlerTask+0xe4>)
 800f78e:	f7f1 f907 	bl	80009a0 <vLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(), uxCurrentCount ) );
        }

        if( xTXDescriptorSemaphore != NULL )
 800f792:	4b2c      	ldr	r3, [pc, #176]	; (800f844 <prvEMACHandlerTask+0xe8>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d013      	beq.n	800f7c2 <prvEMACHandlerTask+0x66>
        {
            static UBaseType_t uxLowestSemCount = ( UBaseType_t ) ETH_TXBUFNB - 1;

            uxCurrentCount = uxSemaphoreGetCount( xTXDescriptorSemaphore );
 800f79a:	4b2a      	ldr	r3, [pc, #168]	; (800f844 <prvEMACHandlerTask+0xe8>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7f5 fda8 	bl	80052f4 <uxQueueMessagesWaiting>
 800f7a4:	60b8      	str	r0, [r7, #8]

            if( uxLowestSemCount > uxCurrentCount )
 800f7a6:	4b28      	ldr	r3, [pc, #160]	; (800f848 <prvEMACHandlerTask+0xec>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d208      	bcs.n	800f7c2 <prvEMACHandlerTask+0x66>
            {
                uxLowestSemCount = uxCurrentCount;
 800f7b0:	4a25      	ldr	r2, [pc, #148]	; (800f848 <prvEMACHandlerTask+0xec>)
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "TX DMA buffers: lowest %lu\n", uxLowestSemCount ) );
 800f7b6:	4b24      	ldr	r3, [pc, #144]	; (800f848 <prvEMACHandlerTask+0xec>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	4823      	ldr	r0, [pc, #140]	; (800f84c <prvEMACHandlerTask+0xf0>)
 800f7be:	f7f1 f8ef 	bl	80009a0 <vLoggingPrintf>
                    FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
                }
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
 800f7c2:	4b23      	ldr	r3, [pc, #140]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f003 0307 	and.w	r3, r3, #7
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d104      	bne.n	800f7d8 <prvEMACHandlerTask+0x7c>
        {
            /* No events to process now, wait for the next. */
            ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	f7f6 ffbe 	bl	8006754 <ulTaskGenericNotifyTake>
        }

        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
 800f7d8:	4b1d      	ldr	r3, [pc, #116]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f003 0301 	and.w	r3, r3, #1
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d008      	beq.n	800f7f6 <prvEMACHandlerTask+0x9a>
        {
            ulISREvents &= ~EMAC_IF_RX_EVENT;
 800f7e4:	4b1a      	ldr	r3, [pc, #104]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f023 0301 	bic.w	r3, r3, #1
 800f7ec:	4a18      	ldr	r2, [pc, #96]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f7ee:	6013      	str	r3, [r2, #0]

            xResult = prvNetworkInterfaceInput();
 800f7f0:	f7ff fe8a 	bl	800f508 <prvNetworkInterfaceInput>
 800f7f4:	6138      	str	r0, [r7, #16]
        }

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0 )
 800f7f6:	4b16      	ldr	r3, [pc, #88]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f003 0302 	and.w	r3, r3, #2
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d007      	beq.n	800f812 <prvEMACHandlerTask+0xb6>
        {
            /* Code to release TX buffers if zero-copy is used. */
            ulISREvents &= ~EMAC_IF_TX_EVENT;
 800f802:	4b13      	ldr	r3, [pc, #76]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f023 0302 	bic.w	r3, r3, #2
 800f80a:	4a11      	ldr	r2, [pc, #68]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f80c:	6013      	str	r3, [r2, #0]
            /* Check if DMA packets have been delivered. */
            vClearTXBuffers();
 800f80e:	f7ff fbe1 	bl	800efd4 <vClearTXBuffers>
        }

        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0 )
 800f812:	4b0f      	ldr	r3, [pc, #60]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f003 0304 	and.w	r3, r3, #4
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d005      	beq.n	800f82a <prvEMACHandlerTask+0xce>
        {
            /* Future extension: logging about errors that occurred. */
            ulISREvents &= ~EMAC_IF_ERR_EVENT;
 800f81e:	4b0c      	ldr	r3, [pc, #48]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	f023 0304 	bic.w	r3, r3, #4
 800f826:	4a0a      	ldr	r2, [pc, #40]	; (800f850 <prvEMACHandlerTask+0xf4>)
 800f828:	6013      	str	r3, [r2, #0]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != 0 )
 800f82a:	6939      	ldr	r1, [r7, #16]
 800f82c:	4809      	ldr	r0, [pc, #36]	; (800f854 <prvEMACHandlerTask+0xf8>)
 800f82e:	f000 fa01 	bl	800fc34 <xPhyCheckLinkStatus>
 800f832:	4603      	mov	r3, r0
 800f834:	2b00      	cmp	r3, #0
 800f836:	d099      	beq.n	800f76c <prvEMACHandlerTask+0x10>
        {
            /* Something has changed to a Link Status, need re-check. */
            prvEthernetUpdateConfig( pdFALSE );
 800f838:	2000      	movs	r0, #0
 800f83a:	f7ff ff15 	bl	800f668 <prvEthernetUpdateConfig>
        xResult = 0;
 800f83e:	e795      	b.n	800f76c <prvEMACHandlerTask+0x10>
 800f840:	080111b8 	.word	0x080111b8
 800f844:	2000bd78 	.word	0x2000bd78
 800f848:	2000002c 	.word	0x2000002c
 800f84c:	080111dc 	.word	0x080111dc
 800f850:	2000bcec 	.word	0x2000bcec
 800f854:	2000bcf0 	.word	0x2000bcf0

0800f858 <ETH_IRQHandler>:
    }
}
/*-----------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &xETH );
 800f85c:	4802      	ldr	r0, [pc, #8]	; (800f868 <ETH_IRQHandler+0x10>)
 800f85e:	f7f1 fed5 	bl	800160c <HAL_ETH_IRQHandler>
}
 800f862:	bf00      	nop
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	2000bd30 	.word	0x2000bd30

0800f86c <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 800f86c:	b480      	push	{r7}
 800f86e:	b085      	sub	sp, #20
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a08      	ldr	r2, [pc, #32]	; (800f898 <xHas_1F_PHYSPCS+0x2c>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d002      	beq.n	800f882 <xHas_1F_PHYSPCS+0x16>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 800f87c:	2301      	movs	r3, #1
 800f87e:	60fb      	str	r3, [r7, #12]
            break;
 800f880:	e002      	b.n	800f888 <xHas_1F_PHYSPCS+0x1c>

        case PHY_ID_DP83848I:
            xResult = pdFALSE;
 800f882:	2300      	movs	r3, #0
 800f884:	60fb      	str	r3, [r7, #12]
            break;
 800f886:	bf00      	nop
    }

    return xResult;
 800f888:	68fb      	ldr	r3, [r7, #12]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3714      	adds	r7, #20
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop
 800f898:	20005c90 	.word	0x20005c90

0800f89c <xPhyFixedValue>:
 * The caller has set the values in 'xPhyPreferences' (ucDuplex and ucSpeed).
 * The PHY register phyREG_00_BMCR will be set for every connected PHY that matches
 * with ulPhyMask. */
BaseType_t xPhyFixedValue( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
    BaseType_t xPhyIndex;
    uint32_t ulValue, ulBitMask = ( uint32_t ) 1U;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	60fb      	str	r3, [r7, #12]

    ulValue = ( uint32_t ) 0U;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	613b      	str	r3, [r7, #16]

    if( pxPhyObject->xPhyPreferences.ucDuplex == PHY_DUPLEX_FULL )
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	d103      	bne.n	800f8c0 <xPhyFixedValue+0x24>
    {
        ulValue |= phyBMCR_FULL_DUPLEX;
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8be:	613b      	str	r3, [r7, #16]
    }

    if( pxPhyObject->xPhyPreferences.ucSpeed == PHY_SPEED_100 )
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f8c6:	2b02      	cmp	r3, #2
 800f8c8:	d103      	bne.n	800f8d2 <xPhyFixedValue+0x36>
    {
        ulValue |= phyBMCR_SPEED_100;
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f8d0:	613b      	str	r3, [r7, #16]
    }

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	617b      	str	r3, [r7, #20]
 800f8d6:	e016      	b.n	800f906 <xPhyFixedValue+0x6a>
    {
        if( ( ulPhyMask & ulBitMask ) != 0lu )
 800f8d8:	683a      	ldr	r2, [r7, #0]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	4013      	ands	r3, r2
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00b      	beq.n	800f8fa <xPhyFixedValue+0x5e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	3318      	adds	r3, #24
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	60bb      	str	r3, [r7, #8]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulValue );
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	68b8      	ldr	r0, [r7, #8]
 800f8f8:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	617b      	str	r3, [r7, #20]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	005b      	lsls	r3, r3, #1
 800f904:	60fb      	str	r3, [r7, #12]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f90a:	697a      	ldr	r2, [r7, #20]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	dbe3      	blt.n	800f8d8 <xPhyFixedValue+0x3c>
        }
    }

    return 0;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3718      	adds	r7, #24
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
	...

0800f91c <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b092      	sub	sp, #72	; 0x48
 800f920:	af02      	add	r7, sp, #8
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulPHYLinkStatus, ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d101      	bne.n	800f930 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 800f92c:	2300      	movs	r3, #0
 800f92e:	e170      	b.n	800fc12 <xPhyStartAutoNegotiation+0x2f6>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 800f930:	2300      	movs	r3, #0
 800f932:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f934:	e020      	b.n	800f978 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 800f936:	683a      	ldr	r2, [r7, #0]
 800f938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f93a:	fa22 f303 	lsr.w	r3, r2, r3
 800f93e:	f003 0301 	and.w	r3, r3, #1
 800f942:	2b00      	cmp	r3, #0
 800f944:	d015      	beq.n	800f972 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94a:	4413      	add	r3, r2
 800f94c:	3318      	adds	r3, #24
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	623b      	str	r3, [r7, #32]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f95a:	2104      	movs	r1, #4
 800f95c:	6a38      	ldr	r0, [r7, #32]
 800f95e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f96c:	2100      	movs	r1, #0
 800f96e:	6a38      	ldr	r0, [r7, #32]
 800f970:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 800f972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f974:	3301      	adds	r3, #1
 800f976:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f97c:	461a      	mov	r2, r3
 800f97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f980:	4293      	cmp	r3, r2
 800f982:	d3d8      	bcc.n	800f936 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 800f984:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f988:	61bb      	str	r3, [r7, #24]
    vTaskSetTimeOutState( &xTimer );
 800f98a:	f107 0310 	add.w	r3, r7, #16
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f6 fbe4 	bl	800615c <vTaskSetTimeOutState>
    ulDoneMask = 0;
 800f994:	2300      	movs	r3, #0
 800f996:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 800f998:	2301      	movs	r3, #1
 800f99a:	637b      	str	r3, [r7, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f99c:	2300      	movs	r3, #0
 800f99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9a0:	e025      	b.n	800f9ee <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 800f9a2:	683a      	ldr	r2, [r7, #0]
 800f9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9a6:	4013      	ands	r3, r2
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d01a      	beq.n	800f9e2 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 800f9ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d115      	bne.n	800f9e2 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9ba:	4413      	add	r3, r2
 800f9bc:	3318      	adds	r3, #24
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	627b      	str	r3, [r7, #36]	; 0x24

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f107 021c 	add.w	r2, r7, #28
 800f9ca:	2101      	movs	r1, #1
 800f9cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9ce:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	f003 0320 	and.w	r3, r3, #32
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d003      	beq.n	800f9e2 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 800f9da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	63bb      	str	r3, [r7, #56]	; 0x38
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800f9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ea:	005b      	lsls	r3, r3, #1
 800f9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d3d3      	bcc.n	800f9a2 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 800f9fa:	683a      	ldr	r2, [r7, #0]
 800f9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d013      	beq.n	800fa2a <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 800fa02:	f107 0218 	add.w	r2, r7, #24
 800fa06:	f107 0310 	add.w	r3, r7, #16
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7f6 fbdd 	bl	80061cc <xTaskCheckForTimeOut>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d004      	beq.n	800fa22 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 800fa18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa1a:	4880      	ldr	r0, [pc, #512]	; (800fc1c <xPhyStartAutoNegotiation+0x300>)
 800fa1c:	f7f0 ffc0 	bl	80009a0 <vLoggingPrintf>
            break;
 800fa20:	e004      	b.n	800fa2c <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 800fa22:	2032      	movs	r0, #50	; 0x32
 800fa24:	f7f6 f85e 	bl	8005ae4 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 800fa28:	e7b6      	b.n	800f998 <xPhyStartAutoNegotiation+0x7c>
            break;
 800fa2a:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 800fa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f000 80ee 	beq.w	800fc10 <xPhyStartAutoNegotiation+0x2f4>
    {
        ulBitMask = ( uint32_t ) 1U;
 800fa34:	2301      	movs	r3, #1
 800fa36:	637b      	str	r3, [r7, #52]	; 0x34
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3e:	43db      	mvns	r3, r3
 800fa40:	401a      	ands	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	635a      	str	r2, [r3, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800fa46:	2300      	movs	r3, #0
 800fa48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa4a:	e0da      	b.n	800fc02 <xPhyStartAutoNegotiation+0x2e6>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa50:	4413      	add	r3, r2
 800fa52:	3318      	adds	r3, #24
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa5c:	3202      	adds	r2, #2
 800fa5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa62:	62bb      	str	r3, [r7, #40]	; 0x28

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 800fa64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa68:	4013      	ands	r3, r2
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f000 80c2 	beq.w	800fbf4 <xPhyStartAutoNegotiation+0x2d8>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fa78:	2100      	movs	r1, #0
 800fa7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa7c:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f107 021c 	add.w	r2, r7, #28
 800fa86:	2101      	movs	r1, #1
 800fa88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa8a:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	f003 0304 	and.w	r3, r3, #4
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00a      	beq.n	800faac <xPhyStartAutoNegotiation+0x190>
            {
                ulPHYLinkStatus |= phyBMSR_LINK_STATUS;
 800fa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa98:	f043 0304 	orr.w	r3, r3, #4
 800fa9c:	633b      	str	r3, [r7, #48]	; 0x30
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa4:	431a      	orrs	r2, r3
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	635a      	str	r2, [r3, #52]	; 0x34
 800faaa:	e003      	b.n	800fab4 <xPhyStartAutoNegotiation+0x198>
            }
            else
            {
                ulPHYLinkStatus &= ~( phyBMSR_LINK_STATUS );
 800faac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faae:	f023 0304 	bic.w	r3, r3, #4
 800fab2:	633b      	str	r3, [r7, #48]	; 0x30
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 800fab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab6:	4a5a      	ldr	r2, [pc, #360]	; (800fc20 <xPhyStartAutoNegotiation+0x304>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d13a      	bne.n	800fb32 <xPhyStartAutoNegotiation+0x216>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f107 020c 	add.w	r2, r7, #12
 800fac4:	211e      	movs	r1, #30
 800fac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fac8:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f003 0307 	and.w	r3, r3, #7
 800fad0:	3b01      	subs	r3, #1
 800fad2:	2b05      	cmp	r3, #5
 800fad4:	d813      	bhi.n	800fafe <xPhyStartAutoNegotiation+0x1e2>
 800fad6:	a201      	add	r2, pc, #4	; (adr r2, 800fadc <xPhyStartAutoNegotiation+0x1c0>)
 800fad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fadc:	0800faf5 	.word	0x0800faf5
 800fae0:	0800faff 	.word	0x0800faff
 800fae4:	0800faff 	.word	0x0800faff
 800fae8:	0800faff 	.word	0x0800faff
 800faec:	0800faf5 	.word	0x0800faf5
 800faf0:	0800faff 	.word	0x0800faff
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	f043 0302 	orr.w	r3, r3, #2
 800fafa:	61fb      	str	r3, [r7, #28]
                        break;
 800fafc:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	f003 0307 	and.w	r3, r3, #7
 800fb04:	3b01      	subs	r3, #1
 800fb06:	2b05      	cmp	r3, #5
 800fb08:	d83c      	bhi.n	800fb84 <xPhyStartAutoNegotiation+0x268>
 800fb0a:	a201      	add	r2, pc, #4	; (adr r2, 800fb10 <xPhyStartAutoNegotiation+0x1f4>)
 800fb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb10:	0800fb85 	.word	0x0800fb85
 800fb14:	0800fb85 	.word	0x0800fb85
 800fb18:	0800fb85 	.word	0x0800fb85
 800fb1c:	0800fb85 	.word	0x0800fb85
 800fb20:	0800fb29 	.word	0x0800fb29
 800fb24:	0800fb29 	.word	0x0800fb29
                    case 0x05:
                    case 0x06:
/*	[101] = 10BASE-T full-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        /* Full duplex. */
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	f043 0304 	orr.w	r3, r3, #4
 800fb2e:	61fb      	str	r3, [r7, #28]
                        break;
 800fb30:	e028      	b.n	800fb84 <xPhyStartAutoNegotiation+0x268>
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 800fb32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb34:	f7ff fe9a 	bl	800f86c <xHas_1F_PHYSPCS>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d01b      	beq.n	800fb76 <xPhyStartAutoNegotiation+0x25a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f107 0208 	add.w	r2, r7, #8
 800fb46:	211f      	movs	r1, #31
 800fb48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb4a:	4798      	blx	r3
                ulRegValue = 0;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	61fb      	str	r3, [r7, #28]

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	f003 0310 	and.w	r3, r3, #16
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d003      	beq.n	800fb62 <xPhyStartAutoNegotiation+0x246>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	f043 0304 	orr.w	r3, r3, #4
 800fb60:	61fb      	str	r3, [r7, #28]
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	f003 030c 	and.w	r3, r3, #12
 800fb68:	2b04      	cmp	r3, #4
 800fb6a:	d10b      	bne.n	800fb84 <xPhyStartAutoNegotiation+0x268>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	f043 0302 	orr.w	r3, r3, #2
 800fb72:	61fb      	str	r3, [r7, #28]
 800fb74:	e006      	b.n	800fb84 <xPhyStartAutoNegotiation+0x268>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f107 021c 	add.w	r2, r7, #28
 800fb7e:	2110      	movs	r1, #16
 800fb80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb82:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 800fb84:	69f9      	ldr	r1, [r7, #28]
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	f003 0304 	and.w	r3, r3, #4
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d001      	beq.n	800fb94 <xPhyStartAutoNegotiation+0x278>
 800fb90:	4a24      	ldr	r2, [pc, #144]	; (800fc24 <xPhyStartAutoNegotiation+0x308>)
 800fb92:	e000      	b.n	800fb96 <xPhyStartAutoNegotiation+0x27a>
 800fb94:	4a24      	ldr	r2, [pc, #144]	; (800fc28 <xPhyStartAutoNegotiation+0x30c>)
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	f003 0302 	and.w	r3, r3, #2
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d001      	beq.n	800fba4 <xPhyStartAutoNegotiation+0x288>
 800fba0:	200a      	movs	r0, #10
 800fba2:	e000      	b.n	800fba6 <xPhyStartAutoNegotiation+0x28a>
 800fba4:	2064      	movs	r0, #100	; 0x64
 800fba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba8:	f043 0304 	orr.w	r3, r3, #4
 800fbac:	633b      	str	r3, [r7, #48]	; 0x30
 800fbae:	4b1f      	ldr	r3, [pc, #124]	; (800fc2c <xPhyStartAutoNegotiation+0x310>)
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	481e      	ldr	r0, [pc, #120]	; (800fc30 <xPhyStartAutoNegotiation+0x314>)
 800fbb6:	f7f0 fef3 	bl	80009a0 <vLoggingPrintf>
                               ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( ulPHYLinkStatus |= phyBMSR_LINK_STATUS ) != 0 ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	f003 0304 	and.w	r3, r3, #4
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d004      	beq.n	800fbce <xPhyStartAutoNegotiation+0x2b2>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2202      	movs	r2, #2
 800fbc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fbcc:	e003      	b.n	800fbd6 <xPhyStartAutoNegotiation+0x2ba>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	f003 0302 	and.w	r3, r3, #2
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d004      	beq.n	800fbea <xPhyStartAutoNegotiation+0x2ce>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800fbe8:	e005      	b.n	800fbf6 <xPhyStartAutoNegotiation+0x2da>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2202      	movs	r2, #2
 800fbee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800fbf2:	e000      	b.n	800fbf6 <xPhyStartAutoNegotiation+0x2da>
                continue;
 800fbf4:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800fbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbfe:	005b      	lsls	r3, r3, #1
 800fc00:	637b      	str	r3, [r7, #52]	; 0x34
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc06:	461a      	mov	r2, r3
 800fc08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	f4ff af1e 	bcc.w	800fa4c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3740      	adds	r7, #64	; 0x40
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	080112ac 	.word	0x080112ac
 800fc20:	00221560 	.word	0x00221560
 800fc24:	080112f0 	.word	0x080112f0
 800fc28:	080112f8 	.word	0x080112f8
 800fc2c:	08011300 	.word	0x08011300
 800fc30:	08011308 	.word	0x08011308

0800fc34 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b088      	sub	sp, #32
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 800fc42:	2300      	movs	r3, #0
 800fc44:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	dd2b      	ble.n	800fca4 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	331c      	adds	r3, #28
 800fc50:	4618      	mov	r0, r3
 800fc52:	f7f6 fa83 	bl	800615c <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f643 2298 	movw	r2, #15000	; 0x3a98
 800fc5c:	625a      	str	r2, [r3, #36]	; 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800fc5e:	2300      	movs	r3, #0
 800fc60:	61bb      	str	r3, [r7, #24]
 800fc62:	e019      	b.n	800fc98 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	4013      	ands	r3, r2
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10d      	bne.n	800fc8c <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	431a      	orrs	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	635a      	str	r2, [r3, #52]	; 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc80:	4619      	mov	r1, r3
 800fc82:	4842      	ldr	r0, [pc, #264]	; (800fd8c <xPhyCheckLinkStatus+0x158>)
 800fc84:	f7f0 fe8c 	bl	80009a0 <vLoggingPrintf>
                xNeedCheck = pdTRUE;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	61bb      	str	r3, [r7, #24]
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	005b      	lsls	r3, r3, #1
 800fc96:	61fb      	str	r3, [r7, #28]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc9c:	69ba      	ldr	r2, [r7, #24]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	dbe0      	blt.n	800fc64 <xPhyCheckLinkStatus+0x30>
 800fca2:	e06e      	b.n	800fd82 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f103 021c 	add.w	r2, r3, #28
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	3324      	adds	r3, #36	; 0x24
 800fcae:	4619      	mov	r1, r3
 800fcb0:	4610      	mov	r0, r2
 800fcb2:	f7f6 fa8b 	bl	80061cc <xTaskCheckForTimeOut>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d062      	beq.n	800fd82 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	61bb      	str	r3, [r7, #24]
 800fcc0:	e045      	b.n	800fd4e <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 800fcc2:	687a      	ldr	r2, [r7, #4]
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	3318      	adds	r3, #24
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f107 020c 	add.w	r2, r7, #12
 800fcd6:	2101      	movs	r1, #1
 800fcd8:	6938      	ldr	r0, [r7, #16]
 800fcda:	4798      	blx	r3
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d12f      	bne.n	800fd42 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	4013      	ands	r3, r2
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	bf14      	ite	ne
 800fcee:	2301      	movne	r3, #1
 800fcf0:	2300      	moveq	r3, #0
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f003 0304 	and.w	r3, r3, #4
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	bf14      	ite	ne
 800fcfe:	2301      	movne	r3, #1
 800fd00:	2300      	moveq	r3, #0
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	4053      	eors	r3, r2
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d01a      	beq.n	800fd42 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	f003 0304 	and.w	r3, r3, #4
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d006      	beq.n	800fd24 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	431a      	orrs	r2, r3
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	635a      	str	r2, [r3, #52]	; 0x34
 800fd22:	e006      	b.n	800fd32 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	43db      	mvns	r3, r3
 800fd2c:	401a      	ands	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	635a      	str	r2, [r3, #52]	; 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd36:	4619      	mov	r1, r3
 800fd38:	4814      	ldr	r0, [pc, #80]	; (800fd8c <xPhyCheckLinkStatus+0x158>)
 800fd3a:	f7f0 fe31 	bl	80009a0 <vLoggingPrintf>
                    xNeedCheck = pdTRUE;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	3301      	adds	r3, #1
 800fd46:	61bb      	str	r3, [r7, #24]
 800fd48:	69fb      	ldr	r3, [r7, #28]
 800fd4a:	005b      	lsls	r3, r3, #1
 800fd4c:	61fb      	str	r3, [r7, #28]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd52:	69ba      	ldr	r2, [r7, #24]
 800fd54:	429a      	cmp	r2, r3
 800fd56:	dbb4      	blt.n	800fcc2 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	331c      	adds	r3, #28
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7f6 f9fd 	bl	800615c <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	085b      	lsrs	r3, r3, #1
 800fd6a:	4013      	ands	r3, r2
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d004      	beq.n	800fd7a <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f643 2298 	movw	r2, #15000	; 0x3a98
 800fd76:	625a      	str	r2, [r3, #36]	; 0x24
 800fd78:	e003      	b.n	800fd82 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fd80:	625a      	str	r2, [r3, #36]	; 0x24
        }
    }

    return xNeedCheck;
 800fd82:	697b      	ldr	r3, [r7, #20]
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3720      	adds	r7, #32
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	0801133c 	.word	0x0801133c

0800fd90 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b082      	sub	sp, #8
 800fd94:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 800fd96:	4b34      	ldr	r3, [pc, #208]	; (800fe68 <xNetworkBuffersInitialise+0xd8>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d156      	bne.n	800fe4c <xNetworkBuffersInitialise+0xbc>
    {
        xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 800fd9e:	213c      	movs	r1, #60	; 0x3c
 800fda0:	203c      	movs	r0, #60	; 0x3c
 800fda2:	f7f4 ff07 	bl	8004bb4 <xQueueCreateCountingSemaphore>
 800fda6:	4602      	mov	r2, r0
 800fda8:	4b2f      	ldr	r3, [pc, #188]	; (800fe68 <xNetworkBuffersInitialise+0xd8>)
 800fdaa:	601a      	str	r2, [r3, #0]
        configASSERT( xNetworkBufferSemaphore != NULL );
 800fdac:	4b2e      	ldr	r3, [pc, #184]	; (800fe68 <xNetworkBuffersInitialise+0xd8>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d103      	bne.n	800fdbc <xNetworkBuffersInitialise+0x2c>
 800fdb4:	492d      	ldr	r1, [pc, #180]	; (800fe6c <xNetworkBuffersInitialise+0xdc>)
 800fdb6:	206a      	movs	r0, #106	; 0x6a
 800fdb8:	f7f0 fe6c 	bl	8000a94 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 800fdbc:	4b2a      	ldr	r3, [pc, #168]	; (800fe68 <xNetworkBuffersInitialise+0xd8>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d043      	beq.n	800fe4c <xNetworkBuffersInitialise+0xbc>
        {
            #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 800fdc4:	4b28      	ldr	r3, [pc, #160]	; (800fe68 <xNetworkBuffersInitialise+0xd8>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4929      	ldr	r1, [pc, #164]	; (800fe70 <xNetworkBuffersInitialise+0xe0>)
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7f5 fbfc 	bl	80055c8 <vQueueAddToRegistry>
                    vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
                    vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
                }
            #endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

            vListInitialise( &xFreeBuffersList );
 800fdd0:	4828      	ldr	r0, [pc, #160]	; (800fe74 <xNetworkBuffersInitialise+0xe4>)
 800fdd2:	f7f4 fd6b 	bl	80048ac <vListInitialise>

            /* Initialise all the network buffers.  No storage is allocated to
             * the buffers yet. */
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	603b      	str	r3, [r7, #0]
 800fdda:	e031      	b.n	800fe40 <xNetworkBuffersInitialise+0xb0>
            {
                /* Initialise and set the owner of the buffer list items. */
                xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 800fddc:	4926      	ldr	r1, [pc, #152]	; (800fe78 <xNetworkBuffersInitialise+0xe8>)
 800fdde:	683a      	ldr	r2, [r7, #0]
 800fde0:	4613      	mov	r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	4413      	add	r3, r2
 800fde6:	00db      	lsls	r3, r3, #3
 800fde8:	440b      	add	r3, r1
 800fdea:	3318      	adds	r3, #24
 800fdec:	2200      	movs	r2, #0
 800fdee:	601a      	str	r2, [r3, #0]
                vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800fdf0:	683a      	ldr	r2, [r7, #0]
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4413      	add	r3, r2
 800fdf8:	00db      	lsls	r3, r3, #3
 800fdfa:	4a1f      	ldr	r2, [pc, #124]	; (800fe78 <xNetworkBuffersInitialise+0xe8>)
 800fdfc:	4413      	add	r3, r2
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7f4 fd74 	bl	80048ec <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 800fe04:	683a      	ldr	r2, [r7, #0]
 800fe06:	4613      	mov	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	4413      	add	r3, r2
 800fe0c:	00db      	lsls	r3, r3, #3
 800fe0e:	4a1a      	ldr	r2, [pc, #104]	; (800fe78 <xNetworkBuffersInitialise+0xe8>)
 800fe10:	1899      	adds	r1, r3, r2
 800fe12:	4819      	ldr	r0, [pc, #100]	; (800fe78 <xNetworkBuffersInitialise+0xe8>)
 800fe14:	683a      	ldr	r2, [r7, #0]
 800fe16:	4613      	mov	r3, r2
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4413      	add	r3, r2
 800fe1c:	00db      	lsls	r3, r3, #3
 800fe1e:	4403      	add	r3, r0
 800fe20:	330c      	adds	r3, #12
 800fe22:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 800fe24:	683a      	ldr	r2, [r7, #0]
 800fe26:	4613      	mov	r3, r2
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	4413      	add	r3, r2
 800fe2c:	00db      	lsls	r3, r3, #3
 800fe2e:	4a12      	ldr	r2, [pc, #72]	; (800fe78 <xNetworkBuffersInitialise+0xe8>)
 800fe30:	4413      	add	r3, r2
 800fe32:	4619      	mov	r1, r3
 800fe34:	480f      	ldr	r0, [pc, #60]	; (800fe74 <xNetworkBuffersInitialise+0xe4>)
 800fe36:	f7f4 fd8a 	bl	800494e <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	603b      	str	r3, [r7, #0]
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	2b3b      	cmp	r3, #59	; 0x3b
 800fe44:	d9ca      	bls.n	800fddc <xNetworkBuffersInitialise+0x4c>
            }

            uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 800fe46:	4b0d      	ldr	r3, [pc, #52]	; (800fe7c <xNetworkBuffersInitialise+0xec>)
 800fe48:	223c      	movs	r2, #60	; 0x3c
 800fe4a:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 800fe4c:	4b06      	ldr	r3, [pc, #24]	; (800fe68 <xNetworkBuffersInitialise+0xd8>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d102      	bne.n	800fe5a <xNetworkBuffersInitialise+0xca>
    {
        xReturn = pdFAIL;
 800fe54:	2300      	movs	r3, #0
 800fe56:	607b      	str	r3, [r7, #4]
 800fe58:	e001      	b.n	800fe5e <xNetworkBuffersInitialise+0xce>
    }
    else
    {
        xReturn = pdPASS;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 800fe5e:	687b      	ldr	r3, [r7, #4]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	2000c6fc 	.word	0x2000c6fc
 800fe6c:	08011364 	.word	0x08011364
 800fe70:	080113b4 	.word	0x080113b4
 800fe74:	2000bd84 	.word	0x2000bd84
 800fe78:	2000bd9c 	.word	0x2000bd9c
 800fe7c:	2000bd98 	.word	0x2000bd98

0800fe80 <vReleaseNetworkBuffer>:
    return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t * pucEthernetBuffer )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
    /* There is space before the Ethernet buffer in which a pointer to the
     * network buffer that references this Ethernet buffer is stored.  Remove the
     * space before freeing the buffer. */
    if( pucEthernetBuffer != NULL )
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d005      	beq.n	800fe9a <vReleaseNetworkBuffer+0x1a>
    {
        pucEthernetBuffer -= ipBUFFER_PADDING;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	3b0a      	subs	r3, #10
 800fe92:	607b      	str	r3, [r7, #4]
        vPortFree( ( void * ) pucEthernetBuffer );
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f7f7 f98d 	bl	80071b4 <vPortFree>
    }
}
 800fe9a:	bf00      	nop
 800fe9c:	3708      	adds	r7, #8
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
	...

0800fea4 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 800feae:	2300      	movs	r3, #0
 800feb0:	60fb      	str	r3, [r7, #12]
    size_t uxCount;

    if( xNetworkBufferSemaphore != NULL )
 800feb2:	4b35      	ldr	r3, [pc, #212]	; (800ff88 <pxGetNetworkBufferWithDescriptor+0xe4>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d061      	beq.n	800ff7e <pxGetNetworkBufferWithDescriptor+0xda>
    {
        if( ( xRequestedSizeBytes != 0U ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d004      	beq.n	800feca <pxGetNetworkBufferWithDescriptor+0x26>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2b45      	cmp	r3, #69	; 0x45
 800fec4:	d801      	bhi.n	800feca <pxGetNetworkBufferWithDescriptor+0x26>
        {
            /* ARP packets can replace application packets, so the storage must be
             * at least large enough to hold an ARP. */
            xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 800fec6:	2346      	movs	r3, #70	; 0x46
 800fec8:	607b      	str	r3, [r7, #4]
        }

        /* Add 2 bytes to xRequestedSizeBytes and round up xRequestedSizeBytes
         * to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
        xRequestedSizeBytes += 2U;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	3302      	adds	r3, #2
 800fece:	607b      	str	r3, [r7, #4]

        if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1U ) ) != 0U )
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f003 0303 	and.w	r3, r3, #3
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d004      	beq.n	800fee4 <pxGetNetworkBufferWithDescriptor+0x40>
        {
            xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1U ) ) + 1U;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f043 0303 	orr.w	r3, r3, #3
 800fee0:	3301      	adds	r3, #1
 800fee2:	607b      	str	r3, [r7, #4]
        }

        /* If there is a semaphore available, there is a network buffer available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 800fee4:	4b28      	ldr	r3, [pc, #160]	; (800ff88 <pxGetNetworkBufferWithDescriptor+0xe4>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	6839      	ldr	r1, [r7, #0]
 800feea:	4618      	mov	r0, r3
 800feec:	f7f5 f90c 	bl	8005108 <xQueueSemaphoreTake>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d143      	bne.n	800ff7e <pxGetNetworkBufferWithDescriptor+0xda>
        {
            /* Protect the structure as it is accessed from tasks and interrupts. */
            taskENTER_CRITICAL();
 800fef6:	f7f7 fb77 	bl	80075e8 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 800fefa:	4b24      	ldr	r3, [pc, #144]	; (800ff8c <pxGetNetworkBufferWithDescriptor+0xe8>)
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	68db      	ldr	r3, [r3, #12]
 800ff00:	60fb      	str	r3, [r7, #12]
                ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7f4 fd5b 	bl	80049c0 <uxListRemove>
            }
            taskEXIT_CRITICAL();
 800ff0a:	f7f7 fb99 	bl	8007640 <vPortExitCritical>

            /* Reading UBaseType_t, no critical section needed. */
            uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 800ff0e:	4b1f      	ldr	r3, [pc, #124]	; (800ff8c <pxGetNetworkBufferWithDescriptor+0xe8>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	60bb      	str	r3, [r7, #8]

            if( uxMinimumFreeNetworkBuffers > uxCount )
 800ff14:	4b1e      	ldr	r3, [pc, #120]	; (800ff90 <pxGetNetworkBufferWithDescriptor+0xec>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	68ba      	ldr	r2, [r7, #8]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d202      	bcs.n	800ff24 <pxGetNetworkBufferWithDescriptor+0x80>
            {
                uxMinimumFreeNetworkBuffers = uxCount;
 800ff1e:	4a1c      	ldr	r2, [pc, #112]	; (800ff90 <pxGetNetworkBufferWithDescriptor+0xec>)
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	6013      	str	r3, [r2, #0]
            }

            /* Allocate storage of exactly the requested size to the buffer. */
            configASSERT( pxReturn->pucEthernetBuffer == NULL );
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	699b      	ldr	r3, [r3, #24]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d003      	beq.n	800ff34 <pxGetNetworkBufferWithDescriptor+0x90>
 800ff2c:	4919      	ldr	r1, [pc, #100]	; (800ff94 <pxGetNetworkBufferWithDescriptor+0xf0>)
 800ff2e:	20fe      	movs	r0, #254	; 0xfe
 800ff30:	f7f0 fdb0 	bl	8000a94 <vAssertCalled>

            if( xRequestedSizeBytes > 0U )
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d021      	beq.n	800ff7e <pxGetNetworkBufferWithDescriptor+0xda>
            {
                /* Extra space is obtained so a pointer to the network buffer can
                 * be stored at the beginning of the buffer. */
                pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	330a      	adds	r3, #10
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7f7 f87e 	bl	8007040 <pvPortMalloc>
 800ff44:	4602      	mov	r2, r0
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	619a      	str	r2, [r3, #24]

                if( pxReturn->pucEthernetBuffer == NULL )
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	699b      	ldr	r3, [r3, #24]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d105      	bne.n	800ff5e <pxGetNetworkBufferWithDescriptor+0xba>
                {
                    /* The attempt to allocate storage for the buffer payload failed,
                     * so the network buffer structure cannot be used and must be
                     * released. */
                    vReleaseNetworkBufferAndDescriptor( pxReturn );
 800ff52:	68f8      	ldr	r0, [r7, #12]
 800ff54:	f000 f820 	bl	800ff98 <vReleaseNetworkBufferAndDescriptor>
                    pxReturn = NULL;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	60fb      	str	r3, [r7, #12]
 800ff5c:	e00f      	b.n	800ff7e <pxGetNetworkBufferWithDescriptor+0xda>
                {
                    /* Store a pointer to the network buffer structure in the
                     * buffer storage area, then move the buffer pointer on past the
                     * stored pointer so the pointer value is not overwritten by the
                     * application when the buffer is used. */
                    *( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	699b      	ldr	r3, [r3, #24]
 800ff62:	68fa      	ldr	r2, [r7, #12]
 800ff64:	601a      	str	r2, [r3, #0]
                    pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	699b      	ldr	r3, [r3, #24]
 800ff6a:	f103 020a 	add.w	r2, r3, #10
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	619a      	str	r2, [r3, #24]

                    /* Store the actual size of the allocated buffer, which may be
                     * greater than the original requested size. */
                    pxReturn->xDataLength = xRequestedSizeBytes;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	687a      	ldr	r2, [r7, #4]
 800ff76:	61da      	str	r2, [r3, #28]

                    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                        {
                            /* make sure the buffer is not linked */
                            pxReturn->pxNextBuffer = NULL;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	625a      	str	r2, [r3, #36]	; 0x24
    {
        /* No action. */
        iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
    }

    return pxReturn;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3710      	adds	r7, #16
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	2000c6fc 	.word	0x2000c6fc
 800ff8c:	2000bd84 	.word	0x2000bd84
 800ff90:	2000bd98 	.word	0x2000bd98
 800ff94:	08011364 	.word	0x08011364

0800ff98 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    /* Ensure the buffer is returned to the list of free buffers before the
    * counting semaphore is 'given' to say a buffer is available.  Release the
    * storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
    * IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
    * MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
    vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	699b      	ldr	r3, [r3, #24]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7ff ff6b 	bl	800fe80 <vReleaseNetworkBuffer>
    pxNetworkBuffer->pucEthernetBuffer = NULL;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2200      	movs	r2, #0
 800ffae:	619a      	str	r2, [r3, #24]

    taskENTER_CRITICAL();
 800ffb0:	f7f7 fb1a 	bl	80075e8 <vPortEnterCritical>
    {
        xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	4a0f      	ldr	r2, [pc, #60]	; (800fff8 <vReleaseNetworkBufferAndDescriptor+0x60>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d101      	bne.n	800ffc2 <vReleaseNetworkBufferAndDescriptor+0x2a>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e000      	b.n	800ffc4 <vReleaseNetworkBufferAndDescriptor+0x2c>
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	60fb      	str	r3, [r7, #12]

        if( xListItemAlreadyInFreeList == pdFALSE )
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d104      	bne.n	800ffd6 <vReleaseNetworkBufferAndDescriptor+0x3e>
        {
            vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	4619      	mov	r1, r3
 800ffd0:	4809      	ldr	r0, [pc, #36]	; (800fff8 <vReleaseNetworkBufferAndDescriptor+0x60>)
 800ffd2:	f7f4 fc98 	bl	8004906 <vListInsertEnd>
        }
    }
    taskEXIT_CRITICAL();
 800ffd6:	f7f7 fb33 	bl	8007640 <vPortExitCritical>

    /*
     * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
     * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
     */
    if( xListItemAlreadyInFreeList == pdFALSE )
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d106      	bne.n	800ffee <vReleaseNetworkBufferAndDescriptor+0x56>
    {
        if( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 800ffe0:	4b06      	ldr	r3, [pc, #24]	; (800fffc <vReleaseNetworkBufferAndDescriptor+0x64>)
 800ffe2:	6818      	ldr	r0, [r3, #0]
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	2100      	movs	r1, #0
 800ffea:	f7f4 fe0d 	bl	8004c08 <xQueueGenericSend>
    else
    {
        /* No action. */
        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 800ffee:	bf00      	nop
 800fff0:	3710      	adds	r7, #16
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	2000bd84 	.word	0x2000bd84
 800fffc:	2000c6fc 	.word	0x2000c6fc

08010000 <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8010000:	b480      	push	{r7}
 8010002:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8010004:	4b03      	ldr	r3, [pc, #12]	; (8010014 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8010006:	681b      	ldr	r3, [r3, #0]
}
 8010008:	4618      	mov	r0, r3
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	2000bd84 	.word	0x2000bd84

08010018 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8010018:	b480      	push	{r7}
 801001a:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 801001c:	4b03      	ldr	r3, [pc, #12]	; (801002c <uxGetMinimumFreeNetworkBuffers+0x14>)
 801001e:	681b      	ldr	r3, [r3, #0]
}
 8010020:	4618      	mov	r0, r3
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	2000bd98 	.word	0x2000bd98

08010030 <__errno>:
 8010030:	4b01      	ldr	r3, [pc, #4]	; (8010038 <__errno+0x8>)
 8010032:	6818      	ldr	r0, [r3, #0]
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop
 8010038:	20000030 	.word	0x20000030

0801003c <__libc_init_array>:
 801003c:	b570      	push	{r4, r5, r6, lr}
 801003e:	4e0d      	ldr	r6, [pc, #52]	; (8010074 <__libc_init_array+0x38>)
 8010040:	4c0d      	ldr	r4, [pc, #52]	; (8010078 <__libc_init_array+0x3c>)
 8010042:	1ba4      	subs	r4, r4, r6
 8010044:	10a4      	asrs	r4, r4, #2
 8010046:	2500      	movs	r5, #0
 8010048:	42a5      	cmp	r5, r4
 801004a:	d109      	bne.n	8010060 <__libc_init_array+0x24>
 801004c:	4e0b      	ldr	r6, [pc, #44]	; (801007c <__libc_init_array+0x40>)
 801004e:	4c0c      	ldr	r4, [pc, #48]	; (8010080 <__libc_init_array+0x44>)
 8010050:	f000 fc9e 	bl	8010990 <_init>
 8010054:	1ba4      	subs	r4, r4, r6
 8010056:	10a4      	asrs	r4, r4, #2
 8010058:	2500      	movs	r5, #0
 801005a:	42a5      	cmp	r5, r4
 801005c:	d105      	bne.n	801006a <__libc_init_array+0x2e>
 801005e:	bd70      	pop	{r4, r5, r6, pc}
 8010060:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010064:	4798      	blx	r3
 8010066:	3501      	adds	r5, #1
 8010068:	e7ee      	b.n	8010048 <__libc_init_array+0xc>
 801006a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801006e:	4798      	blx	r3
 8010070:	3501      	adds	r5, #1
 8010072:	e7f2      	b.n	801005a <__libc_init_array+0x1e>
 8010074:	080115b8 	.word	0x080115b8
 8010078:	080115b8 	.word	0x080115b8
 801007c:	080115b8 	.word	0x080115b8
 8010080:	080115bc 	.word	0x080115bc

08010084 <memcmp>:
 8010084:	b530      	push	{r4, r5, lr}
 8010086:	2400      	movs	r4, #0
 8010088:	42a2      	cmp	r2, r4
 801008a:	d101      	bne.n	8010090 <memcmp+0xc>
 801008c:	2000      	movs	r0, #0
 801008e:	e007      	b.n	80100a0 <memcmp+0x1c>
 8010090:	5d03      	ldrb	r3, [r0, r4]
 8010092:	3401      	adds	r4, #1
 8010094:	190d      	adds	r5, r1, r4
 8010096:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801009a:	42ab      	cmp	r3, r5
 801009c:	d0f4      	beq.n	8010088 <memcmp+0x4>
 801009e:	1b58      	subs	r0, r3, r5
 80100a0:	bd30      	pop	{r4, r5, pc}

080100a2 <memcpy>:
 80100a2:	b510      	push	{r4, lr}
 80100a4:	1e43      	subs	r3, r0, #1
 80100a6:	440a      	add	r2, r1
 80100a8:	4291      	cmp	r1, r2
 80100aa:	d100      	bne.n	80100ae <memcpy+0xc>
 80100ac:	bd10      	pop	{r4, pc}
 80100ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100b6:	e7f7      	b.n	80100a8 <memcpy+0x6>

080100b8 <memmove>:
 80100b8:	4288      	cmp	r0, r1
 80100ba:	b510      	push	{r4, lr}
 80100bc:	eb01 0302 	add.w	r3, r1, r2
 80100c0:	d807      	bhi.n	80100d2 <memmove+0x1a>
 80100c2:	1e42      	subs	r2, r0, #1
 80100c4:	4299      	cmp	r1, r3
 80100c6:	d00a      	beq.n	80100de <memmove+0x26>
 80100c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80100d0:	e7f8      	b.n	80100c4 <memmove+0xc>
 80100d2:	4283      	cmp	r3, r0
 80100d4:	d9f5      	bls.n	80100c2 <memmove+0xa>
 80100d6:	1881      	adds	r1, r0, r2
 80100d8:	1ad2      	subs	r2, r2, r3
 80100da:	42d3      	cmn	r3, r2
 80100dc:	d100      	bne.n	80100e0 <memmove+0x28>
 80100de:	bd10      	pop	{r4, pc}
 80100e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80100e8:	e7f7      	b.n	80100da <memmove+0x22>

080100ea <memset>:
 80100ea:	4402      	add	r2, r0
 80100ec:	4603      	mov	r3, r0
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d100      	bne.n	80100f4 <memset+0xa>
 80100f2:	4770      	bx	lr
 80100f4:	f803 1b01 	strb.w	r1, [r3], #1
 80100f8:	e7f9      	b.n	80100ee <memset+0x4>
	...

080100fc <sniprintf>:
 80100fc:	b40c      	push	{r2, r3}
 80100fe:	b530      	push	{r4, r5, lr}
 8010100:	4b17      	ldr	r3, [pc, #92]	; (8010160 <sniprintf+0x64>)
 8010102:	1e0c      	subs	r4, r1, #0
 8010104:	b09d      	sub	sp, #116	; 0x74
 8010106:	681d      	ldr	r5, [r3, #0]
 8010108:	da08      	bge.n	801011c <sniprintf+0x20>
 801010a:	238b      	movs	r3, #139	; 0x8b
 801010c:	602b      	str	r3, [r5, #0]
 801010e:	f04f 30ff 	mov.w	r0, #4294967295
 8010112:	b01d      	add	sp, #116	; 0x74
 8010114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010118:	b002      	add	sp, #8
 801011a:	4770      	bx	lr
 801011c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010120:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010124:	bf14      	ite	ne
 8010126:	f104 33ff 	addne.w	r3, r4, #4294967295
 801012a:	4623      	moveq	r3, r4
 801012c:	9304      	str	r3, [sp, #16]
 801012e:	9307      	str	r3, [sp, #28]
 8010130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010134:	9002      	str	r0, [sp, #8]
 8010136:	9006      	str	r0, [sp, #24]
 8010138:	f8ad 3016 	strh.w	r3, [sp, #22]
 801013c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801013e:	ab21      	add	r3, sp, #132	; 0x84
 8010140:	a902      	add	r1, sp, #8
 8010142:	4628      	mov	r0, r5
 8010144:	9301      	str	r3, [sp, #4]
 8010146:	f000 f8ad 	bl	80102a4 <_svfiprintf_r>
 801014a:	1c43      	adds	r3, r0, #1
 801014c:	bfbc      	itt	lt
 801014e:	238b      	movlt	r3, #139	; 0x8b
 8010150:	602b      	strlt	r3, [r5, #0]
 8010152:	2c00      	cmp	r4, #0
 8010154:	d0dd      	beq.n	8010112 <sniprintf+0x16>
 8010156:	9b02      	ldr	r3, [sp, #8]
 8010158:	2200      	movs	r2, #0
 801015a:	701a      	strb	r2, [r3, #0]
 801015c:	e7d9      	b.n	8010112 <sniprintf+0x16>
 801015e:	bf00      	nop
 8010160:	20000030 	.word	0x20000030

08010164 <strcasecmp>:
 8010164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010166:	4606      	mov	r6, r0
 8010168:	460f      	mov	r7, r1
 801016a:	f816 4b01 	ldrb.w	r4, [r6], #1
 801016e:	f000 f81f 	bl	80101b0 <__locale_ctype_ptr>
 8010172:	4420      	add	r0, r4
 8010174:	f817 5b01 	ldrb.w	r5, [r7], #1
 8010178:	7843      	ldrb	r3, [r0, #1]
 801017a:	f003 0303 	and.w	r3, r3, #3
 801017e:	2b01      	cmp	r3, #1
 8010180:	bf08      	it	eq
 8010182:	3420      	addeq	r4, #32
 8010184:	f000 f814 	bl	80101b0 <__locale_ctype_ptr>
 8010188:	4428      	add	r0, r5
 801018a:	7842      	ldrb	r2, [r0, #1]
 801018c:	f002 0203 	and.w	r2, r2, #3
 8010190:	2a01      	cmp	r2, #1
 8010192:	bf08      	it	eq
 8010194:	3520      	addeq	r5, #32
 8010196:	1b60      	subs	r0, r4, r5
 8010198:	d101      	bne.n	801019e <strcasecmp+0x3a>
 801019a:	2d00      	cmp	r5, #0
 801019c:	d1e5      	bne.n	801016a <strcasecmp+0x6>
 801019e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101a0 <strcpy>:
 80101a0:	4603      	mov	r3, r0
 80101a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101a6:	f803 2b01 	strb.w	r2, [r3], #1
 80101aa:	2a00      	cmp	r2, #0
 80101ac:	d1f9      	bne.n	80101a2 <strcpy+0x2>
 80101ae:	4770      	bx	lr

080101b0 <__locale_ctype_ptr>:
 80101b0:	4b04      	ldr	r3, [pc, #16]	; (80101c4 <__locale_ctype_ptr+0x14>)
 80101b2:	4a05      	ldr	r2, [pc, #20]	; (80101c8 <__locale_ctype_ptr+0x18>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	6a1b      	ldr	r3, [r3, #32]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	bf08      	it	eq
 80101bc:	4613      	moveq	r3, r2
 80101be:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80101c2:	4770      	bx	lr
 80101c4:	20000030 	.word	0x20000030
 80101c8:	20000094 	.word	0x20000094

080101cc <__ascii_mbtowc>:
 80101cc:	b082      	sub	sp, #8
 80101ce:	b901      	cbnz	r1, 80101d2 <__ascii_mbtowc+0x6>
 80101d0:	a901      	add	r1, sp, #4
 80101d2:	b142      	cbz	r2, 80101e6 <__ascii_mbtowc+0x1a>
 80101d4:	b14b      	cbz	r3, 80101ea <__ascii_mbtowc+0x1e>
 80101d6:	7813      	ldrb	r3, [r2, #0]
 80101d8:	600b      	str	r3, [r1, #0]
 80101da:	7812      	ldrb	r2, [r2, #0]
 80101dc:	1c10      	adds	r0, r2, #0
 80101de:	bf18      	it	ne
 80101e0:	2001      	movne	r0, #1
 80101e2:	b002      	add	sp, #8
 80101e4:	4770      	bx	lr
 80101e6:	4610      	mov	r0, r2
 80101e8:	e7fb      	b.n	80101e2 <__ascii_mbtowc+0x16>
 80101ea:	f06f 0001 	mvn.w	r0, #1
 80101ee:	e7f8      	b.n	80101e2 <__ascii_mbtowc+0x16>

080101f0 <__ssputs_r>:
 80101f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101f4:	688e      	ldr	r6, [r1, #8]
 80101f6:	429e      	cmp	r6, r3
 80101f8:	4682      	mov	sl, r0
 80101fa:	460c      	mov	r4, r1
 80101fc:	4690      	mov	r8, r2
 80101fe:	4699      	mov	r9, r3
 8010200:	d837      	bhi.n	8010272 <__ssputs_r+0x82>
 8010202:	898a      	ldrh	r2, [r1, #12]
 8010204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010208:	d031      	beq.n	801026e <__ssputs_r+0x7e>
 801020a:	6825      	ldr	r5, [r4, #0]
 801020c:	6909      	ldr	r1, [r1, #16]
 801020e:	1a6f      	subs	r7, r5, r1
 8010210:	6965      	ldr	r5, [r4, #20]
 8010212:	2302      	movs	r3, #2
 8010214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010218:	fb95 f5f3 	sdiv	r5, r5, r3
 801021c:	f109 0301 	add.w	r3, r9, #1
 8010220:	443b      	add	r3, r7
 8010222:	429d      	cmp	r5, r3
 8010224:	bf38      	it	cc
 8010226:	461d      	movcc	r5, r3
 8010228:	0553      	lsls	r3, r2, #21
 801022a:	d530      	bpl.n	801028e <__ssputs_r+0x9e>
 801022c:	4629      	mov	r1, r5
 801022e:	f000 fb15 	bl	801085c <_malloc_r>
 8010232:	4606      	mov	r6, r0
 8010234:	b950      	cbnz	r0, 801024c <__ssputs_r+0x5c>
 8010236:	230c      	movs	r3, #12
 8010238:	f8ca 3000 	str.w	r3, [sl]
 801023c:	89a3      	ldrh	r3, [r4, #12]
 801023e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010242:	81a3      	strh	r3, [r4, #12]
 8010244:	f04f 30ff 	mov.w	r0, #4294967295
 8010248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801024c:	463a      	mov	r2, r7
 801024e:	6921      	ldr	r1, [r4, #16]
 8010250:	f7ff ff27 	bl	80100a2 <memcpy>
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801025a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801025e:	81a3      	strh	r3, [r4, #12]
 8010260:	6126      	str	r6, [r4, #16]
 8010262:	6165      	str	r5, [r4, #20]
 8010264:	443e      	add	r6, r7
 8010266:	1bed      	subs	r5, r5, r7
 8010268:	6026      	str	r6, [r4, #0]
 801026a:	60a5      	str	r5, [r4, #8]
 801026c:	464e      	mov	r6, r9
 801026e:	454e      	cmp	r6, r9
 8010270:	d900      	bls.n	8010274 <__ssputs_r+0x84>
 8010272:	464e      	mov	r6, r9
 8010274:	4632      	mov	r2, r6
 8010276:	4641      	mov	r1, r8
 8010278:	6820      	ldr	r0, [r4, #0]
 801027a:	f7ff ff1d 	bl	80100b8 <memmove>
 801027e:	68a3      	ldr	r3, [r4, #8]
 8010280:	1b9b      	subs	r3, r3, r6
 8010282:	60a3      	str	r3, [r4, #8]
 8010284:	6823      	ldr	r3, [r4, #0]
 8010286:	441e      	add	r6, r3
 8010288:	6026      	str	r6, [r4, #0]
 801028a:	2000      	movs	r0, #0
 801028c:	e7dc      	b.n	8010248 <__ssputs_r+0x58>
 801028e:	462a      	mov	r2, r5
 8010290:	f000 fb3e 	bl	8010910 <_realloc_r>
 8010294:	4606      	mov	r6, r0
 8010296:	2800      	cmp	r0, #0
 8010298:	d1e2      	bne.n	8010260 <__ssputs_r+0x70>
 801029a:	6921      	ldr	r1, [r4, #16]
 801029c:	4650      	mov	r0, sl
 801029e:	f000 fa8f 	bl	80107c0 <_free_r>
 80102a2:	e7c8      	b.n	8010236 <__ssputs_r+0x46>

080102a4 <_svfiprintf_r>:
 80102a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a8:	461d      	mov	r5, r3
 80102aa:	898b      	ldrh	r3, [r1, #12]
 80102ac:	061f      	lsls	r7, r3, #24
 80102ae:	b09d      	sub	sp, #116	; 0x74
 80102b0:	4680      	mov	r8, r0
 80102b2:	460c      	mov	r4, r1
 80102b4:	4616      	mov	r6, r2
 80102b6:	d50f      	bpl.n	80102d8 <_svfiprintf_r+0x34>
 80102b8:	690b      	ldr	r3, [r1, #16]
 80102ba:	b96b      	cbnz	r3, 80102d8 <_svfiprintf_r+0x34>
 80102bc:	2140      	movs	r1, #64	; 0x40
 80102be:	f000 facd 	bl	801085c <_malloc_r>
 80102c2:	6020      	str	r0, [r4, #0]
 80102c4:	6120      	str	r0, [r4, #16]
 80102c6:	b928      	cbnz	r0, 80102d4 <_svfiprintf_r+0x30>
 80102c8:	230c      	movs	r3, #12
 80102ca:	f8c8 3000 	str.w	r3, [r8]
 80102ce:	f04f 30ff 	mov.w	r0, #4294967295
 80102d2:	e0c8      	b.n	8010466 <_svfiprintf_r+0x1c2>
 80102d4:	2340      	movs	r3, #64	; 0x40
 80102d6:	6163      	str	r3, [r4, #20]
 80102d8:	2300      	movs	r3, #0
 80102da:	9309      	str	r3, [sp, #36]	; 0x24
 80102dc:	2320      	movs	r3, #32
 80102de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102e2:	2330      	movs	r3, #48	; 0x30
 80102e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102e8:	9503      	str	r5, [sp, #12]
 80102ea:	f04f 0b01 	mov.w	fp, #1
 80102ee:	4637      	mov	r7, r6
 80102f0:	463d      	mov	r5, r7
 80102f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80102f6:	b10b      	cbz	r3, 80102fc <_svfiprintf_r+0x58>
 80102f8:	2b25      	cmp	r3, #37	; 0x25
 80102fa:	d13e      	bne.n	801037a <_svfiprintf_r+0xd6>
 80102fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8010300:	d00b      	beq.n	801031a <_svfiprintf_r+0x76>
 8010302:	4653      	mov	r3, sl
 8010304:	4632      	mov	r2, r6
 8010306:	4621      	mov	r1, r4
 8010308:	4640      	mov	r0, r8
 801030a:	f7ff ff71 	bl	80101f0 <__ssputs_r>
 801030e:	3001      	adds	r0, #1
 8010310:	f000 80a4 	beq.w	801045c <_svfiprintf_r+0x1b8>
 8010314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010316:	4453      	add	r3, sl
 8010318:	9309      	str	r3, [sp, #36]	; 0x24
 801031a:	783b      	ldrb	r3, [r7, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 809d 	beq.w	801045c <_svfiprintf_r+0x1b8>
 8010322:	2300      	movs	r3, #0
 8010324:	f04f 32ff 	mov.w	r2, #4294967295
 8010328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801032c:	9304      	str	r3, [sp, #16]
 801032e:	9307      	str	r3, [sp, #28]
 8010330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010334:	931a      	str	r3, [sp, #104]	; 0x68
 8010336:	462f      	mov	r7, r5
 8010338:	2205      	movs	r2, #5
 801033a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801033e:	4850      	ldr	r0, [pc, #320]	; (8010480 <_svfiprintf_r+0x1dc>)
 8010340:	f7ef ff96 	bl	8000270 <memchr>
 8010344:	9b04      	ldr	r3, [sp, #16]
 8010346:	b9d0      	cbnz	r0, 801037e <_svfiprintf_r+0xda>
 8010348:	06d9      	lsls	r1, r3, #27
 801034a:	bf44      	itt	mi
 801034c:	2220      	movmi	r2, #32
 801034e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010352:	071a      	lsls	r2, r3, #28
 8010354:	bf44      	itt	mi
 8010356:	222b      	movmi	r2, #43	; 0x2b
 8010358:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801035c:	782a      	ldrb	r2, [r5, #0]
 801035e:	2a2a      	cmp	r2, #42	; 0x2a
 8010360:	d015      	beq.n	801038e <_svfiprintf_r+0xea>
 8010362:	9a07      	ldr	r2, [sp, #28]
 8010364:	462f      	mov	r7, r5
 8010366:	2000      	movs	r0, #0
 8010368:	250a      	movs	r5, #10
 801036a:	4639      	mov	r1, r7
 801036c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010370:	3b30      	subs	r3, #48	; 0x30
 8010372:	2b09      	cmp	r3, #9
 8010374:	d94d      	bls.n	8010412 <_svfiprintf_r+0x16e>
 8010376:	b1b8      	cbz	r0, 80103a8 <_svfiprintf_r+0x104>
 8010378:	e00f      	b.n	801039a <_svfiprintf_r+0xf6>
 801037a:	462f      	mov	r7, r5
 801037c:	e7b8      	b.n	80102f0 <_svfiprintf_r+0x4c>
 801037e:	4a40      	ldr	r2, [pc, #256]	; (8010480 <_svfiprintf_r+0x1dc>)
 8010380:	1a80      	subs	r0, r0, r2
 8010382:	fa0b f000 	lsl.w	r0, fp, r0
 8010386:	4318      	orrs	r0, r3
 8010388:	9004      	str	r0, [sp, #16]
 801038a:	463d      	mov	r5, r7
 801038c:	e7d3      	b.n	8010336 <_svfiprintf_r+0x92>
 801038e:	9a03      	ldr	r2, [sp, #12]
 8010390:	1d11      	adds	r1, r2, #4
 8010392:	6812      	ldr	r2, [r2, #0]
 8010394:	9103      	str	r1, [sp, #12]
 8010396:	2a00      	cmp	r2, #0
 8010398:	db01      	blt.n	801039e <_svfiprintf_r+0xfa>
 801039a:	9207      	str	r2, [sp, #28]
 801039c:	e004      	b.n	80103a8 <_svfiprintf_r+0x104>
 801039e:	4252      	negs	r2, r2
 80103a0:	f043 0302 	orr.w	r3, r3, #2
 80103a4:	9207      	str	r2, [sp, #28]
 80103a6:	9304      	str	r3, [sp, #16]
 80103a8:	783b      	ldrb	r3, [r7, #0]
 80103aa:	2b2e      	cmp	r3, #46	; 0x2e
 80103ac:	d10c      	bne.n	80103c8 <_svfiprintf_r+0x124>
 80103ae:	787b      	ldrb	r3, [r7, #1]
 80103b0:	2b2a      	cmp	r3, #42	; 0x2a
 80103b2:	d133      	bne.n	801041c <_svfiprintf_r+0x178>
 80103b4:	9b03      	ldr	r3, [sp, #12]
 80103b6:	1d1a      	adds	r2, r3, #4
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	9203      	str	r2, [sp, #12]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	bfb8      	it	lt
 80103c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80103c4:	3702      	adds	r7, #2
 80103c6:	9305      	str	r3, [sp, #20]
 80103c8:	4d2e      	ldr	r5, [pc, #184]	; (8010484 <_svfiprintf_r+0x1e0>)
 80103ca:	7839      	ldrb	r1, [r7, #0]
 80103cc:	2203      	movs	r2, #3
 80103ce:	4628      	mov	r0, r5
 80103d0:	f7ef ff4e 	bl	8000270 <memchr>
 80103d4:	b138      	cbz	r0, 80103e6 <_svfiprintf_r+0x142>
 80103d6:	2340      	movs	r3, #64	; 0x40
 80103d8:	1b40      	subs	r0, r0, r5
 80103da:	fa03 f000 	lsl.w	r0, r3, r0
 80103de:	9b04      	ldr	r3, [sp, #16]
 80103e0:	4303      	orrs	r3, r0
 80103e2:	3701      	adds	r7, #1
 80103e4:	9304      	str	r3, [sp, #16]
 80103e6:	7839      	ldrb	r1, [r7, #0]
 80103e8:	4827      	ldr	r0, [pc, #156]	; (8010488 <_svfiprintf_r+0x1e4>)
 80103ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103ee:	2206      	movs	r2, #6
 80103f0:	1c7e      	adds	r6, r7, #1
 80103f2:	f7ef ff3d 	bl	8000270 <memchr>
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d038      	beq.n	801046c <_svfiprintf_r+0x1c8>
 80103fa:	4b24      	ldr	r3, [pc, #144]	; (801048c <_svfiprintf_r+0x1e8>)
 80103fc:	bb13      	cbnz	r3, 8010444 <_svfiprintf_r+0x1a0>
 80103fe:	9b03      	ldr	r3, [sp, #12]
 8010400:	3307      	adds	r3, #7
 8010402:	f023 0307 	bic.w	r3, r3, #7
 8010406:	3308      	adds	r3, #8
 8010408:	9303      	str	r3, [sp, #12]
 801040a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801040c:	444b      	add	r3, r9
 801040e:	9309      	str	r3, [sp, #36]	; 0x24
 8010410:	e76d      	b.n	80102ee <_svfiprintf_r+0x4a>
 8010412:	fb05 3202 	mla	r2, r5, r2, r3
 8010416:	2001      	movs	r0, #1
 8010418:	460f      	mov	r7, r1
 801041a:	e7a6      	b.n	801036a <_svfiprintf_r+0xc6>
 801041c:	2300      	movs	r3, #0
 801041e:	3701      	adds	r7, #1
 8010420:	9305      	str	r3, [sp, #20]
 8010422:	4619      	mov	r1, r3
 8010424:	250a      	movs	r5, #10
 8010426:	4638      	mov	r0, r7
 8010428:	f810 2b01 	ldrb.w	r2, [r0], #1
 801042c:	3a30      	subs	r2, #48	; 0x30
 801042e:	2a09      	cmp	r2, #9
 8010430:	d903      	bls.n	801043a <_svfiprintf_r+0x196>
 8010432:	2b00      	cmp	r3, #0
 8010434:	d0c8      	beq.n	80103c8 <_svfiprintf_r+0x124>
 8010436:	9105      	str	r1, [sp, #20]
 8010438:	e7c6      	b.n	80103c8 <_svfiprintf_r+0x124>
 801043a:	fb05 2101 	mla	r1, r5, r1, r2
 801043e:	2301      	movs	r3, #1
 8010440:	4607      	mov	r7, r0
 8010442:	e7f0      	b.n	8010426 <_svfiprintf_r+0x182>
 8010444:	ab03      	add	r3, sp, #12
 8010446:	9300      	str	r3, [sp, #0]
 8010448:	4622      	mov	r2, r4
 801044a:	4b11      	ldr	r3, [pc, #68]	; (8010490 <_svfiprintf_r+0x1ec>)
 801044c:	a904      	add	r1, sp, #16
 801044e:	4640      	mov	r0, r8
 8010450:	f3af 8000 	nop.w
 8010454:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010458:	4681      	mov	r9, r0
 801045a:	d1d6      	bne.n	801040a <_svfiprintf_r+0x166>
 801045c:	89a3      	ldrh	r3, [r4, #12]
 801045e:	065b      	lsls	r3, r3, #25
 8010460:	f53f af35 	bmi.w	80102ce <_svfiprintf_r+0x2a>
 8010464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010466:	b01d      	add	sp, #116	; 0x74
 8010468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046c:	ab03      	add	r3, sp, #12
 801046e:	9300      	str	r3, [sp, #0]
 8010470:	4622      	mov	r2, r4
 8010472:	4b07      	ldr	r3, [pc, #28]	; (8010490 <_svfiprintf_r+0x1ec>)
 8010474:	a904      	add	r1, sp, #16
 8010476:	4640      	mov	r0, r8
 8010478:	f000 f882 	bl	8010580 <_printf_i>
 801047c:	e7ea      	b.n	8010454 <_svfiprintf_r+0x1b0>
 801047e:	bf00      	nop
 8010480:	0801147a 	.word	0x0801147a
 8010484:	08011480 	.word	0x08011480
 8010488:	08011484 	.word	0x08011484
 801048c:	00000000 	.word	0x00000000
 8010490:	080101f1 	.word	0x080101f1

08010494 <_printf_common>:
 8010494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010498:	4691      	mov	r9, r2
 801049a:	461f      	mov	r7, r3
 801049c:	688a      	ldr	r2, [r1, #8]
 801049e:	690b      	ldr	r3, [r1, #16]
 80104a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104a4:	4293      	cmp	r3, r2
 80104a6:	bfb8      	it	lt
 80104a8:	4613      	movlt	r3, r2
 80104aa:	f8c9 3000 	str.w	r3, [r9]
 80104ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104b2:	4606      	mov	r6, r0
 80104b4:	460c      	mov	r4, r1
 80104b6:	b112      	cbz	r2, 80104be <_printf_common+0x2a>
 80104b8:	3301      	adds	r3, #1
 80104ba:	f8c9 3000 	str.w	r3, [r9]
 80104be:	6823      	ldr	r3, [r4, #0]
 80104c0:	0699      	lsls	r1, r3, #26
 80104c2:	bf42      	ittt	mi
 80104c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80104c8:	3302      	addmi	r3, #2
 80104ca:	f8c9 3000 	strmi.w	r3, [r9]
 80104ce:	6825      	ldr	r5, [r4, #0]
 80104d0:	f015 0506 	ands.w	r5, r5, #6
 80104d4:	d107      	bne.n	80104e6 <_printf_common+0x52>
 80104d6:	f104 0a19 	add.w	sl, r4, #25
 80104da:	68e3      	ldr	r3, [r4, #12]
 80104dc:	f8d9 2000 	ldr.w	r2, [r9]
 80104e0:	1a9b      	subs	r3, r3, r2
 80104e2:	42ab      	cmp	r3, r5
 80104e4:	dc28      	bgt.n	8010538 <_printf_common+0xa4>
 80104e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80104ea:	6822      	ldr	r2, [r4, #0]
 80104ec:	3300      	adds	r3, #0
 80104ee:	bf18      	it	ne
 80104f0:	2301      	movne	r3, #1
 80104f2:	0692      	lsls	r2, r2, #26
 80104f4:	d42d      	bmi.n	8010552 <_printf_common+0xbe>
 80104f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104fa:	4639      	mov	r1, r7
 80104fc:	4630      	mov	r0, r6
 80104fe:	47c0      	blx	r8
 8010500:	3001      	adds	r0, #1
 8010502:	d020      	beq.n	8010546 <_printf_common+0xb2>
 8010504:	6823      	ldr	r3, [r4, #0]
 8010506:	68e5      	ldr	r5, [r4, #12]
 8010508:	f8d9 2000 	ldr.w	r2, [r9]
 801050c:	f003 0306 	and.w	r3, r3, #6
 8010510:	2b04      	cmp	r3, #4
 8010512:	bf08      	it	eq
 8010514:	1aad      	subeq	r5, r5, r2
 8010516:	68a3      	ldr	r3, [r4, #8]
 8010518:	6922      	ldr	r2, [r4, #16]
 801051a:	bf0c      	ite	eq
 801051c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010520:	2500      	movne	r5, #0
 8010522:	4293      	cmp	r3, r2
 8010524:	bfc4      	itt	gt
 8010526:	1a9b      	subgt	r3, r3, r2
 8010528:	18ed      	addgt	r5, r5, r3
 801052a:	f04f 0900 	mov.w	r9, #0
 801052e:	341a      	adds	r4, #26
 8010530:	454d      	cmp	r5, r9
 8010532:	d11a      	bne.n	801056a <_printf_common+0xd6>
 8010534:	2000      	movs	r0, #0
 8010536:	e008      	b.n	801054a <_printf_common+0xb6>
 8010538:	2301      	movs	r3, #1
 801053a:	4652      	mov	r2, sl
 801053c:	4639      	mov	r1, r7
 801053e:	4630      	mov	r0, r6
 8010540:	47c0      	blx	r8
 8010542:	3001      	adds	r0, #1
 8010544:	d103      	bne.n	801054e <_printf_common+0xba>
 8010546:	f04f 30ff 	mov.w	r0, #4294967295
 801054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801054e:	3501      	adds	r5, #1
 8010550:	e7c3      	b.n	80104da <_printf_common+0x46>
 8010552:	18e1      	adds	r1, r4, r3
 8010554:	1c5a      	adds	r2, r3, #1
 8010556:	2030      	movs	r0, #48	; 0x30
 8010558:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801055c:	4422      	add	r2, r4
 801055e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010566:	3302      	adds	r3, #2
 8010568:	e7c5      	b.n	80104f6 <_printf_common+0x62>
 801056a:	2301      	movs	r3, #1
 801056c:	4622      	mov	r2, r4
 801056e:	4639      	mov	r1, r7
 8010570:	4630      	mov	r0, r6
 8010572:	47c0      	blx	r8
 8010574:	3001      	adds	r0, #1
 8010576:	d0e6      	beq.n	8010546 <_printf_common+0xb2>
 8010578:	f109 0901 	add.w	r9, r9, #1
 801057c:	e7d8      	b.n	8010530 <_printf_common+0x9c>
	...

08010580 <_printf_i>:
 8010580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010584:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010588:	460c      	mov	r4, r1
 801058a:	7e09      	ldrb	r1, [r1, #24]
 801058c:	b085      	sub	sp, #20
 801058e:	296e      	cmp	r1, #110	; 0x6e
 8010590:	4617      	mov	r7, r2
 8010592:	4606      	mov	r6, r0
 8010594:	4698      	mov	r8, r3
 8010596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010598:	f000 80b3 	beq.w	8010702 <_printf_i+0x182>
 801059c:	d822      	bhi.n	80105e4 <_printf_i+0x64>
 801059e:	2963      	cmp	r1, #99	; 0x63
 80105a0:	d036      	beq.n	8010610 <_printf_i+0x90>
 80105a2:	d80a      	bhi.n	80105ba <_printf_i+0x3a>
 80105a4:	2900      	cmp	r1, #0
 80105a6:	f000 80b9 	beq.w	801071c <_printf_i+0x19c>
 80105aa:	2958      	cmp	r1, #88	; 0x58
 80105ac:	f000 8083 	beq.w	80106b6 <_printf_i+0x136>
 80105b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80105b8:	e032      	b.n	8010620 <_printf_i+0xa0>
 80105ba:	2964      	cmp	r1, #100	; 0x64
 80105bc:	d001      	beq.n	80105c2 <_printf_i+0x42>
 80105be:	2969      	cmp	r1, #105	; 0x69
 80105c0:	d1f6      	bne.n	80105b0 <_printf_i+0x30>
 80105c2:	6820      	ldr	r0, [r4, #0]
 80105c4:	6813      	ldr	r3, [r2, #0]
 80105c6:	0605      	lsls	r5, r0, #24
 80105c8:	f103 0104 	add.w	r1, r3, #4
 80105cc:	d52a      	bpl.n	8010624 <_printf_i+0xa4>
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	6011      	str	r1, [r2, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	da03      	bge.n	80105de <_printf_i+0x5e>
 80105d6:	222d      	movs	r2, #45	; 0x2d
 80105d8:	425b      	negs	r3, r3
 80105da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80105de:	486f      	ldr	r0, [pc, #444]	; (801079c <_printf_i+0x21c>)
 80105e0:	220a      	movs	r2, #10
 80105e2:	e039      	b.n	8010658 <_printf_i+0xd8>
 80105e4:	2973      	cmp	r1, #115	; 0x73
 80105e6:	f000 809d 	beq.w	8010724 <_printf_i+0x1a4>
 80105ea:	d808      	bhi.n	80105fe <_printf_i+0x7e>
 80105ec:	296f      	cmp	r1, #111	; 0x6f
 80105ee:	d020      	beq.n	8010632 <_printf_i+0xb2>
 80105f0:	2970      	cmp	r1, #112	; 0x70
 80105f2:	d1dd      	bne.n	80105b0 <_printf_i+0x30>
 80105f4:	6823      	ldr	r3, [r4, #0]
 80105f6:	f043 0320 	orr.w	r3, r3, #32
 80105fa:	6023      	str	r3, [r4, #0]
 80105fc:	e003      	b.n	8010606 <_printf_i+0x86>
 80105fe:	2975      	cmp	r1, #117	; 0x75
 8010600:	d017      	beq.n	8010632 <_printf_i+0xb2>
 8010602:	2978      	cmp	r1, #120	; 0x78
 8010604:	d1d4      	bne.n	80105b0 <_printf_i+0x30>
 8010606:	2378      	movs	r3, #120	; 0x78
 8010608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801060c:	4864      	ldr	r0, [pc, #400]	; (80107a0 <_printf_i+0x220>)
 801060e:	e055      	b.n	80106bc <_printf_i+0x13c>
 8010610:	6813      	ldr	r3, [r2, #0]
 8010612:	1d19      	adds	r1, r3, #4
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	6011      	str	r1, [r2, #0]
 8010618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801061c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010620:	2301      	movs	r3, #1
 8010622:	e08c      	b.n	801073e <_printf_i+0x1be>
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	6011      	str	r1, [r2, #0]
 8010628:	f010 0f40 	tst.w	r0, #64	; 0x40
 801062c:	bf18      	it	ne
 801062e:	b21b      	sxthne	r3, r3
 8010630:	e7cf      	b.n	80105d2 <_printf_i+0x52>
 8010632:	6813      	ldr	r3, [r2, #0]
 8010634:	6825      	ldr	r5, [r4, #0]
 8010636:	1d18      	adds	r0, r3, #4
 8010638:	6010      	str	r0, [r2, #0]
 801063a:	0628      	lsls	r0, r5, #24
 801063c:	d501      	bpl.n	8010642 <_printf_i+0xc2>
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	e002      	b.n	8010648 <_printf_i+0xc8>
 8010642:	0668      	lsls	r0, r5, #25
 8010644:	d5fb      	bpl.n	801063e <_printf_i+0xbe>
 8010646:	881b      	ldrh	r3, [r3, #0]
 8010648:	4854      	ldr	r0, [pc, #336]	; (801079c <_printf_i+0x21c>)
 801064a:	296f      	cmp	r1, #111	; 0x6f
 801064c:	bf14      	ite	ne
 801064e:	220a      	movne	r2, #10
 8010650:	2208      	moveq	r2, #8
 8010652:	2100      	movs	r1, #0
 8010654:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010658:	6865      	ldr	r5, [r4, #4]
 801065a:	60a5      	str	r5, [r4, #8]
 801065c:	2d00      	cmp	r5, #0
 801065e:	f2c0 8095 	blt.w	801078c <_printf_i+0x20c>
 8010662:	6821      	ldr	r1, [r4, #0]
 8010664:	f021 0104 	bic.w	r1, r1, #4
 8010668:	6021      	str	r1, [r4, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d13d      	bne.n	80106ea <_printf_i+0x16a>
 801066e:	2d00      	cmp	r5, #0
 8010670:	f040 808e 	bne.w	8010790 <_printf_i+0x210>
 8010674:	4665      	mov	r5, ip
 8010676:	2a08      	cmp	r2, #8
 8010678:	d10b      	bne.n	8010692 <_printf_i+0x112>
 801067a:	6823      	ldr	r3, [r4, #0]
 801067c:	07db      	lsls	r3, r3, #31
 801067e:	d508      	bpl.n	8010692 <_printf_i+0x112>
 8010680:	6923      	ldr	r3, [r4, #16]
 8010682:	6862      	ldr	r2, [r4, #4]
 8010684:	429a      	cmp	r2, r3
 8010686:	bfde      	ittt	le
 8010688:	2330      	movle	r3, #48	; 0x30
 801068a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801068e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010692:	ebac 0305 	sub.w	r3, ip, r5
 8010696:	6123      	str	r3, [r4, #16]
 8010698:	f8cd 8000 	str.w	r8, [sp]
 801069c:	463b      	mov	r3, r7
 801069e:	aa03      	add	r2, sp, #12
 80106a0:	4621      	mov	r1, r4
 80106a2:	4630      	mov	r0, r6
 80106a4:	f7ff fef6 	bl	8010494 <_printf_common>
 80106a8:	3001      	adds	r0, #1
 80106aa:	d14d      	bne.n	8010748 <_printf_i+0x1c8>
 80106ac:	f04f 30ff 	mov.w	r0, #4294967295
 80106b0:	b005      	add	sp, #20
 80106b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106b6:	4839      	ldr	r0, [pc, #228]	; (801079c <_printf_i+0x21c>)
 80106b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80106bc:	6813      	ldr	r3, [r2, #0]
 80106be:	6821      	ldr	r1, [r4, #0]
 80106c0:	1d1d      	adds	r5, r3, #4
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	6015      	str	r5, [r2, #0]
 80106c6:	060a      	lsls	r2, r1, #24
 80106c8:	d50b      	bpl.n	80106e2 <_printf_i+0x162>
 80106ca:	07ca      	lsls	r2, r1, #31
 80106cc:	bf44      	itt	mi
 80106ce:	f041 0120 	orrmi.w	r1, r1, #32
 80106d2:	6021      	strmi	r1, [r4, #0]
 80106d4:	b91b      	cbnz	r3, 80106de <_printf_i+0x15e>
 80106d6:	6822      	ldr	r2, [r4, #0]
 80106d8:	f022 0220 	bic.w	r2, r2, #32
 80106dc:	6022      	str	r2, [r4, #0]
 80106de:	2210      	movs	r2, #16
 80106e0:	e7b7      	b.n	8010652 <_printf_i+0xd2>
 80106e2:	064d      	lsls	r5, r1, #25
 80106e4:	bf48      	it	mi
 80106e6:	b29b      	uxthmi	r3, r3
 80106e8:	e7ef      	b.n	80106ca <_printf_i+0x14a>
 80106ea:	4665      	mov	r5, ip
 80106ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80106f0:	fb02 3311 	mls	r3, r2, r1, r3
 80106f4:	5cc3      	ldrb	r3, [r0, r3]
 80106f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80106fa:	460b      	mov	r3, r1
 80106fc:	2900      	cmp	r1, #0
 80106fe:	d1f5      	bne.n	80106ec <_printf_i+0x16c>
 8010700:	e7b9      	b.n	8010676 <_printf_i+0xf6>
 8010702:	6813      	ldr	r3, [r2, #0]
 8010704:	6825      	ldr	r5, [r4, #0]
 8010706:	6961      	ldr	r1, [r4, #20]
 8010708:	1d18      	adds	r0, r3, #4
 801070a:	6010      	str	r0, [r2, #0]
 801070c:	0628      	lsls	r0, r5, #24
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	d501      	bpl.n	8010716 <_printf_i+0x196>
 8010712:	6019      	str	r1, [r3, #0]
 8010714:	e002      	b.n	801071c <_printf_i+0x19c>
 8010716:	066a      	lsls	r2, r5, #25
 8010718:	d5fb      	bpl.n	8010712 <_printf_i+0x192>
 801071a:	8019      	strh	r1, [r3, #0]
 801071c:	2300      	movs	r3, #0
 801071e:	6123      	str	r3, [r4, #16]
 8010720:	4665      	mov	r5, ip
 8010722:	e7b9      	b.n	8010698 <_printf_i+0x118>
 8010724:	6813      	ldr	r3, [r2, #0]
 8010726:	1d19      	adds	r1, r3, #4
 8010728:	6011      	str	r1, [r2, #0]
 801072a:	681d      	ldr	r5, [r3, #0]
 801072c:	6862      	ldr	r2, [r4, #4]
 801072e:	2100      	movs	r1, #0
 8010730:	4628      	mov	r0, r5
 8010732:	f7ef fd9d 	bl	8000270 <memchr>
 8010736:	b108      	cbz	r0, 801073c <_printf_i+0x1bc>
 8010738:	1b40      	subs	r0, r0, r5
 801073a:	6060      	str	r0, [r4, #4]
 801073c:	6863      	ldr	r3, [r4, #4]
 801073e:	6123      	str	r3, [r4, #16]
 8010740:	2300      	movs	r3, #0
 8010742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010746:	e7a7      	b.n	8010698 <_printf_i+0x118>
 8010748:	6923      	ldr	r3, [r4, #16]
 801074a:	462a      	mov	r2, r5
 801074c:	4639      	mov	r1, r7
 801074e:	4630      	mov	r0, r6
 8010750:	47c0      	blx	r8
 8010752:	3001      	adds	r0, #1
 8010754:	d0aa      	beq.n	80106ac <_printf_i+0x12c>
 8010756:	6823      	ldr	r3, [r4, #0]
 8010758:	079b      	lsls	r3, r3, #30
 801075a:	d413      	bmi.n	8010784 <_printf_i+0x204>
 801075c:	68e0      	ldr	r0, [r4, #12]
 801075e:	9b03      	ldr	r3, [sp, #12]
 8010760:	4298      	cmp	r0, r3
 8010762:	bfb8      	it	lt
 8010764:	4618      	movlt	r0, r3
 8010766:	e7a3      	b.n	80106b0 <_printf_i+0x130>
 8010768:	2301      	movs	r3, #1
 801076a:	464a      	mov	r2, r9
 801076c:	4639      	mov	r1, r7
 801076e:	4630      	mov	r0, r6
 8010770:	47c0      	blx	r8
 8010772:	3001      	adds	r0, #1
 8010774:	d09a      	beq.n	80106ac <_printf_i+0x12c>
 8010776:	3501      	adds	r5, #1
 8010778:	68e3      	ldr	r3, [r4, #12]
 801077a:	9a03      	ldr	r2, [sp, #12]
 801077c:	1a9b      	subs	r3, r3, r2
 801077e:	42ab      	cmp	r3, r5
 8010780:	dcf2      	bgt.n	8010768 <_printf_i+0x1e8>
 8010782:	e7eb      	b.n	801075c <_printf_i+0x1dc>
 8010784:	2500      	movs	r5, #0
 8010786:	f104 0919 	add.w	r9, r4, #25
 801078a:	e7f5      	b.n	8010778 <_printf_i+0x1f8>
 801078c:	2b00      	cmp	r3, #0
 801078e:	d1ac      	bne.n	80106ea <_printf_i+0x16a>
 8010790:	7803      	ldrb	r3, [r0, #0]
 8010792:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010796:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801079a:	e76c      	b.n	8010676 <_printf_i+0xf6>
 801079c:	0801148b 	.word	0x0801148b
 80107a0:	0801149c 	.word	0x0801149c

080107a4 <__ascii_wctomb>:
 80107a4:	b149      	cbz	r1, 80107ba <__ascii_wctomb+0x16>
 80107a6:	2aff      	cmp	r2, #255	; 0xff
 80107a8:	bf85      	ittet	hi
 80107aa:	238a      	movhi	r3, #138	; 0x8a
 80107ac:	6003      	strhi	r3, [r0, #0]
 80107ae:	700a      	strbls	r2, [r1, #0]
 80107b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80107b4:	bf98      	it	ls
 80107b6:	2001      	movls	r0, #1
 80107b8:	4770      	bx	lr
 80107ba:	4608      	mov	r0, r1
 80107bc:	4770      	bx	lr
	...

080107c0 <_free_r>:
 80107c0:	b538      	push	{r3, r4, r5, lr}
 80107c2:	4605      	mov	r5, r0
 80107c4:	2900      	cmp	r1, #0
 80107c6:	d045      	beq.n	8010854 <_free_r+0x94>
 80107c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107cc:	1f0c      	subs	r4, r1, #4
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	bfb8      	it	lt
 80107d2:	18e4      	addlt	r4, r4, r3
 80107d4:	f000 f8d2 	bl	801097c <__malloc_lock>
 80107d8:	4a1f      	ldr	r2, [pc, #124]	; (8010858 <_free_r+0x98>)
 80107da:	6813      	ldr	r3, [r2, #0]
 80107dc:	4610      	mov	r0, r2
 80107de:	b933      	cbnz	r3, 80107ee <_free_r+0x2e>
 80107e0:	6063      	str	r3, [r4, #4]
 80107e2:	6014      	str	r4, [r2, #0]
 80107e4:	4628      	mov	r0, r5
 80107e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107ea:	f000 b8c8 	b.w	801097e <__malloc_unlock>
 80107ee:	42a3      	cmp	r3, r4
 80107f0:	d90c      	bls.n	801080c <_free_r+0x4c>
 80107f2:	6821      	ldr	r1, [r4, #0]
 80107f4:	1862      	adds	r2, r4, r1
 80107f6:	4293      	cmp	r3, r2
 80107f8:	bf04      	itt	eq
 80107fa:	681a      	ldreq	r2, [r3, #0]
 80107fc:	685b      	ldreq	r3, [r3, #4]
 80107fe:	6063      	str	r3, [r4, #4]
 8010800:	bf04      	itt	eq
 8010802:	1852      	addeq	r2, r2, r1
 8010804:	6022      	streq	r2, [r4, #0]
 8010806:	6004      	str	r4, [r0, #0]
 8010808:	e7ec      	b.n	80107e4 <_free_r+0x24>
 801080a:	4613      	mov	r3, r2
 801080c:	685a      	ldr	r2, [r3, #4]
 801080e:	b10a      	cbz	r2, 8010814 <_free_r+0x54>
 8010810:	42a2      	cmp	r2, r4
 8010812:	d9fa      	bls.n	801080a <_free_r+0x4a>
 8010814:	6819      	ldr	r1, [r3, #0]
 8010816:	1858      	adds	r0, r3, r1
 8010818:	42a0      	cmp	r0, r4
 801081a:	d10b      	bne.n	8010834 <_free_r+0x74>
 801081c:	6820      	ldr	r0, [r4, #0]
 801081e:	4401      	add	r1, r0
 8010820:	1858      	adds	r0, r3, r1
 8010822:	4282      	cmp	r2, r0
 8010824:	6019      	str	r1, [r3, #0]
 8010826:	d1dd      	bne.n	80107e4 <_free_r+0x24>
 8010828:	6810      	ldr	r0, [r2, #0]
 801082a:	6852      	ldr	r2, [r2, #4]
 801082c:	605a      	str	r2, [r3, #4]
 801082e:	4401      	add	r1, r0
 8010830:	6019      	str	r1, [r3, #0]
 8010832:	e7d7      	b.n	80107e4 <_free_r+0x24>
 8010834:	d902      	bls.n	801083c <_free_r+0x7c>
 8010836:	230c      	movs	r3, #12
 8010838:	602b      	str	r3, [r5, #0]
 801083a:	e7d3      	b.n	80107e4 <_free_r+0x24>
 801083c:	6820      	ldr	r0, [r4, #0]
 801083e:	1821      	adds	r1, r4, r0
 8010840:	428a      	cmp	r2, r1
 8010842:	bf04      	itt	eq
 8010844:	6811      	ldreq	r1, [r2, #0]
 8010846:	6852      	ldreq	r2, [r2, #4]
 8010848:	6062      	str	r2, [r4, #4]
 801084a:	bf04      	itt	eq
 801084c:	1809      	addeq	r1, r1, r0
 801084e:	6021      	streq	r1, [r4, #0]
 8010850:	605c      	str	r4, [r3, #4]
 8010852:	e7c7      	b.n	80107e4 <_free_r+0x24>
 8010854:	bd38      	pop	{r3, r4, r5, pc}
 8010856:	bf00      	nop
 8010858:	2000c700 	.word	0x2000c700

0801085c <_malloc_r>:
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	1ccd      	adds	r5, r1, #3
 8010860:	f025 0503 	bic.w	r5, r5, #3
 8010864:	3508      	adds	r5, #8
 8010866:	2d0c      	cmp	r5, #12
 8010868:	bf38      	it	cc
 801086a:	250c      	movcc	r5, #12
 801086c:	2d00      	cmp	r5, #0
 801086e:	4606      	mov	r6, r0
 8010870:	db01      	blt.n	8010876 <_malloc_r+0x1a>
 8010872:	42a9      	cmp	r1, r5
 8010874:	d903      	bls.n	801087e <_malloc_r+0x22>
 8010876:	230c      	movs	r3, #12
 8010878:	6033      	str	r3, [r6, #0]
 801087a:	2000      	movs	r0, #0
 801087c:	bd70      	pop	{r4, r5, r6, pc}
 801087e:	f000 f87d 	bl	801097c <__malloc_lock>
 8010882:	4a21      	ldr	r2, [pc, #132]	; (8010908 <_malloc_r+0xac>)
 8010884:	6814      	ldr	r4, [r2, #0]
 8010886:	4621      	mov	r1, r4
 8010888:	b991      	cbnz	r1, 80108b0 <_malloc_r+0x54>
 801088a:	4c20      	ldr	r4, [pc, #128]	; (801090c <_malloc_r+0xb0>)
 801088c:	6823      	ldr	r3, [r4, #0]
 801088e:	b91b      	cbnz	r3, 8010898 <_malloc_r+0x3c>
 8010890:	4630      	mov	r0, r6
 8010892:	f000 f863 	bl	801095c <_sbrk_r>
 8010896:	6020      	str	r0, [r4, #0]
 8010898:	4629      	mov	r1, r5
 801089a:	4630      	mov	r0, r6
 801089c:	f000 f85e 	bl	801095c <_sbrk_r>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d124      	bne.n	80108ee <_malloc_r+0x92>
 80108a4:	230c      	movs	r3, #12
 80108a6:	6033      	str	r3, [r6, #0]
 80108a8:	4630      	mov	r0, r6
 80108aa:	f000 f868 	bl	801097e <__malloc_unlock>
 80108ae:	e7e4      	b.n	801087a <_malloc_r+0x1e>
 80108b0:	680b      	ldr	r3, [r1, #0]
 80108b2:	1b5b      	subs	r3, r3, r5
 80108b4:	d418      	bmi.n	80108e8 <_malloc_r+0x8c>
 80108b6:	2b0b      	cmp	r3, #11
 80108b8:	d90f      	bls.n	80108da <_malloc_r+0x7e>
 80108ba:	600b      	str	r3, [r1, #0]
 80108bc:	50cd      	str	r5, [r1, r3]
 80108be:	18cc      	adds	r4, r1, r3
 80108c0:	4630      	mov	r0, r6
 80108c2:	f000 f85c 	bl	801097e <__malloc_unlock>
 80108c6:	f104 000b 	add.w	r0, r4, #11
 80108ca:	1d23      	adds	r3, r4, #4
 80108cc:	f020 0007 	bic.w	r0, r0, #7
 80108d0:	1ac3      	subs	r3, r0, r3
 80108d2:	d0d3      	beq.n	801087c <_malloc_r+0x20>
 80108d4:	425a      	negs	r2, r3
 80108d6:	50e2      	str	r2, [r4, r3]
 80108d8:	e7d0      	b.n	801087c <_malloc_r+0x20>
 80108da:	428c      	cmp	r4, r1
 80108dc:	684b      	ldr	r3, [r1, #4]
 80108de:	bf16      	itet	ne
 80108e0:	6063      	strne	r3, [r4, #4]
 80108e2:	6013      	streq	r3, [r2, #0]
 80108e4:	460c      	movne	r4, r1
 80108e6:	e7eb      	b.n	80108c0 <_malloc_r+0x64>
 80108e8:	460c      	mov	r4, r1
 80108ea:	6849      	ldr	r1, [r1, #4]
 80108ec:	e7cc      	b.n	8010888 <_malloc_r+0x2c>
 80108ee:	1cc4      	adds	r4, r0, #3
 80108f0:	f024 0403 	bic.w	r4, r4, #3
 80108f4:	42a0      	cmp	r0, r4
 80108f6:	d005      	beq.n	8010904 <_malloc_r+0xa8>
 80108f8:	1a21      	subs	r1, r4, r0
 80108fa:	4630      	mov	r0, r6
 80108fc:	f000 f82e 	bl	801095c <_sbrk_r>
 8010900:	3001      	adds	r0, #1
 8010902:	d0cf      	beq.n	80108a4 <_malloc_r+0x48>
 8010904:	6025      	str	r5, [r4, #0]
 8010906:	e7db      	b.n	80108c0 <_malloc_r+0x64>
 8010908:	2000c700 	.word	0x2000c700
 801090c:	2000c704 	.word	0x2000c704

08010910 <_realloc_r>:
 8010910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010912:	4607      	mov	r7, r0
 8010914:	4614      	mov	r4, r2
 8010916:	460e      	mov	r6, r1
 8010918:	b921      	cbnz	r1, 8010924 <_realloc_r+0x14>
 801091a:	4611      	mov	r1, r2
 801091c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010920:	f7ff bf9c 	b.w	801085c <_malloc_r>
 8010924:	b922      	cbnz	r2, 8010930 <_realloc_r+0x20>
 8010926:	f7ff ff4b 	bl	80107c0 <_free_r>
 801092a:	4625      	mov	r5, r4
 801092c:	4628      	mov	r0, r5
 801092e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010930:	f000 f826 	bl	8010980 <_malloc_usable_size_r>
 8010934:	42a0      	cmp	r0, r4
 8010936:	d20f      	bcs.n	8010958 <_realloc_r+0x48>
 8010938:	4621      	mov	r1, r4
 801093a:	4638      	mov	r0, r7
 801093c:	f7ff ff8e 	bl	801085c <_malloc_r>
 8010940:	4605      	mov	r5, r0
 8010942:	2800      	cmp	r0, #0
 8010944:	d0f2      	beq.n	801092c <_realloc_r+0x1c>
 8010946:	4631      	mov	r1, r6
 8010948:	4622      	mov	r2, r4
 801094a:	f7ff fbaa 	bl	80100a2 <memcpy>
 801094e:	4631      	mov	r1, r6
 8010950:	4638      	mov	r0, r7
 8010952:	f7ff ff35 	bl	80107c0 <_free_r>
 8010956:	e7e9      	b.n	801092c <_realloc_r+0x1c>
 8010958:	4635      	mov	r5, r6
 801095a:	e7e7      	b.n	801092c <_realloc_r+0x1c>

0801095c <_sbrk_r>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	4c06      	ldr	r4, [pc, #24]	; (8010978 <_sbrk_r+0x1c>)
 8010960:	2300      	movs	r3, #0
 8010962:	4605      	mov	r5, r0
 8010964:	4608      	mov	r0, r1
 8010966:	6023      	str	r3, [r4, #0]
 8010968:	f7f0 fa7c 	bl	8000e64 <_sbrk>
 801096c:	1c43      	adds	r3, r0, #1
 801096e:	d102      	bne.n	8010976 <_sbrk_r+0x1a>
 8010970:	6823      	ldr	r3, [r4, #0]
 8010972:	b103      	cbz	r3, 8010976 <_sbrk_r+0x1a>
 8010974:	602b      	str	r3, [r5, #0]
 8010976:	bd38      	pop	{r3, r4, r5, pc}
 8010978:	2000c9a0 	.word	0x2000c9a0

0801097c <__malloc_lock>:
 801097c:	4770      	bx	lr

0801097e <__malloc_unlock>:
 801097e:	4770      	bx	lr

08010980 <_malloc_usable_size_r>:
 8010980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010984:	1f18      	subs	r0, r3, #4
 8010986:	2b00      	cmp	r3, #0
 8010988:	bfbc      	itt	lt
 801098a:	580b      	ldrlt	r3, [r1, r0]
 801098c:	18c0      	addlt	r0, r0, r3
 801098e:	4770      	bx	lr

08010990 <_init>:
 8010990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010992:	bf00      	nop
 8010994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010996:	bc08      	pop	{r3}
 8010998:	469e      	mov	lr, r3
 801099a:	4770      	bx	lr

0801099c <_fini>:
 801099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801099e:	bf00      	nop
 80109a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109a2:	bc08      	pop	{r3}
 80109a4:	469e      	mov	lr, r3
 80109a6:	4770      	bx	lr
