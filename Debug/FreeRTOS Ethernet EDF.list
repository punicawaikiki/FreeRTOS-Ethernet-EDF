
FreeRTOS Ethernet EDF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013654  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec0  08013858  08013858  00023858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015718  08015718  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08015718  08015718  00025718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015720  08015720  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015720  08015720  00025720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015724  08015724  00025724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08015728  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c764  20000220  0801592c  00030220  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2000c984  0801592c  0003c984  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f70b  00000000  00000000  00030232  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c36  00000000  00000000  0005f93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f80  00000000  00000000  00065578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d98  00000000  00000000  000674f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036636  00000000  00000000  00069290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ecec  00000000  00000000  0009f8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00133749  00000000  00000000  000be5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f1cfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c94  00000000  00000000  001f1d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000220 	.word	0x20000220
 800021c:	00000000 	.word	0x00000000
 8000220:	0801383c 	.word	0x0801383c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000224 	.word	0x20000224
 800023c:	0801383c 	.word	0x0801383c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HAL_ETH_MspInit>:
  }

}

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08e      	sub	sp, #56	; 0x38
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a52      	ldr	r2, [pc, #328]	; (8000778 <HAL_ETH_MspInit+0x168>)
 800062e:	4293      	cmp	r3, r2
 8000630:	f040 809d 	bne.w	800076e <HAL_ETH_MspInit+0x15e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a50      	ldr	r2, [pc, #320]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
 8000640:	4b4e      	ldr	r3, [pc, #312]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000648:	623b      	str	r3, [r7, #32]
 800064a:	6a3b      	ldr	r3, [r7, #32]
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a4a      	ldr	r2, [pc, #296]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
 8000658:	4b48      	ldr	r3, [pc, #288]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	4b45      	ldr	r3, [pc, #276]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a44      	ldr	r2, [pc, #272]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800066a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800066e:	6313      	str	r3, [r2, #48]	; 0x30
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000678:	61bb      	str	r3, [r7, #24]
 800067a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a3e      	ldr	r2, [pc, #248]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
 8000688:	4b3c      	ldr	r3, [pc, #240]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4a38      	ldr	r2, [pc, #224]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
 80006a0:	4b36      	ldr	r3, [pc, #216]	; (800077c <HAL_ETH_MspInit+0x16c>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b33      	ldr	r3, [pc, #204]	; (800077c <HAL_ETH_MspInit+0x16c>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <HAL_ETH_MspInit+0x16c>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6313      	str	r3, [r2, #48]	; 0x30
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <HAL_ETH_MspInit+0x16c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 80006c4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d6:	230b      	movs	r3, #11
 80006d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	4619      	mov	r1, r3
 80006e0:	4827      	ldr	r0, [pc, #156]	; (8000780 <HAL_ETH_MspInit+0x170>)
 80006e2:	f000 fe3f 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80006e6:	2332      	movs	r3, #50	; 0x32
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f6:	230b      	movs	r3, #11
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	4820      	ldr	r0, [pc, #128]	; (8000784 <HAL_ETH_MspInit+0x174>)
 8000702:	f000 fe2f 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000706:	2386      	movs	r3, #134	; 0x86
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000716:	230b      	movs	r3, #11
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071e:	4619      	mov	r1, r3
 8000720:	4819      	ldr	r0, [pc, #100]	; (8000788 <HAL_ETH_MspInit+0x178>)
 8000722:	f000 fe1f 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */
    /* PD5 as PXER */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a14      	ldr	r2, [pc, #80]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800073e:	2320      	movs	r3, #32
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074e:	230b      	movs	r3, #11
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <HAL_ETH_MspInit+0x17c>)
 800075a:	f000 fe03 	bl	8001364 <HAL_GPIO_Init>


  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2107      	movs	r1, #7
 8000762:	203d      	movs	r0, #61	; 0x3d
 8000764:	f000 fdd4 	bl	8001310 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000768:	203d      	movs	r0, #61	; 0x3d
 800076a:	f000 fded 	bl	8001348 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3738      	adds	r7, #56	; 0x38
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40028000 	.word	0x40028000
 800077c:	40023800 	.word	0x40023800
 8000780:	40021800 	.word	0x40021800
 8000784:	40020800 	.word	0x40020800
 8000788:	40020000 	.word	0x40020000
 800078c:	40020c00 	.word	0x40020c00

08000790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <MX_GPIO_Init+0x104>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a3a      	ldr	r2, [pc, #232]	; (8000894 <MX_GPIO_Init+0x104>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b38      	ldr	r3, [pc, #224]	; (8000894 <MX_GPIO_Init+0x104>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <MX_GPIO_Init+0x104>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a34      	ldr	r2, [pc, #208]	; (8000894 <MX_GPIO_Init+0x104>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <MX_GPIO_Init+0x104>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b2f      	ldr	r3, [pc, #188]	; (8000894 <MX_GPIO_Init+0x104>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2e      	ldr	r2, [pc, #184]	; (8000894 <MX_GPIO_Init+0x104>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <MX_GPIO_Init+0x104>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_GPIO_Init+0x104>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a28      	ldr	r2, [pc, #160]	; (8000894 <MX_GPIO_Init+0x104>)
 80007f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0x104>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_GPIO_Init+0x104>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a22      	ldr	r2, [pc, #136]	; (8000894 <MX_GPIO_Init+0x104>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_GPIO_Init+0x104>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_GPIO_Init+0x104>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_GPIO_Init+0x104>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_GPIO_Init+0x104>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f242 0120 	movw	r1, #8224	; 0x2020
 800083c:	4816      	ldr	r0, [pc, #88]	; (8000898 <MX_GPIO_Init+0x108>)
 800083e:	f000 ff53 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_USER3_GPIO_Port, LD_USER3_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_GPIO_Init+0x10c>)
 800084a:	f000 ff4d 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|LD_USER2_Pin;
 800084e:	f242 0320 	movw	r3, #8224	; 0x2020
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_GPIO_Init+0x108>)
 8000868:	f000 fd7c 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_USER3_Pin;
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_USER3_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0x10c>)
 8000886:	f000 fd6d 	bl	8001364 <HAL_GPIO_Init>

}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40022400 	.word	0x40022400
 800089c:	40020000 	.word	0x40020000

080008a0 <pcApplicationHostnameHook>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
const char *pcApplicationHostnameHook( void )
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <pcApplicationHostnameHook+0x10>)
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	08013858 	.word	0x08013858

080008b4 <prvSRand>:

static void prvSRand( UBaseType_t ulSeed )
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	/* Utility function to seed the pseudo random number generator. */
	ulNextRand = ulSeed;
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <prvSRand+0x1c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	2000023c 	.word	0x2000023c

080008d4 <uxRand>:

UBaseType_t uxRand( void )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
const uint32_t ulMultiplier = 0x015a4e35UL, ulIncrement = 1UL;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <uxRand+0x6c>)
 80008dc:	61fb      	str	r3, [r7, #28]
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
static BaseType_t xInitialised = pdFALSE;

	/* Don't initialise until the scheduler is running, as the timeout in the
	random number generator uses the tick count. */
	if( xInitialised == pdFALSE )
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <uxRand+0x70>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d117      	bne.n	800091a <uxRand+0x46>
	{
		if( xTaskGetSchedulerState() !=  taskSCHEDULER_NOT_STARTED )
 80008ea:	f005 fd6b 	bl	80063c4 <xTaskGetSchedulerState>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d012      	beq.n	800091a <uxRand+0x46>
		RNG_HandleTypeDef xRND;
		uint32_t ulSeed;

			/* Generate a random number with which to seed the local pseudo random
			number generating function. */
			HAL_RNG_Init( &xRND );
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 f851 	bl	80029a0 <HAL_RNG_Init>
			HAL_RNG_GenerateRandomNumber( &xRND, &ulSeed );
 80008fe:	1d3a      	adds	r2, r7, #4
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f002 f874 	bl	80029f4 <HAL_RNG_GenerateRandomNumber>
			prvSRand( ulSeed );
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffd0 	bl	80008b4 <prvSRand>
			xInitialised = pdTRUE;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <uxRand+0x70>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
		}
	}

	/* Utility function to generate a pseudo random number. */

	ulNextRand = ( ulMultiplier * ulNextRand ) + ulIncrement;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <uxRand+0x74>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	fb02 f203 	mul.w	r2, r2, r3
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	4413      	add	r3, r2
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <uxRand+0x74>)
 800092a:	6013      	str	r3, [r2, #0]
	return( ( int ) ( ulNextRand >> 16UL ) & 0x7fffUL );
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <uxRand+0x74>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0c1b      	lsrs	r3, r3, #16
 8000932:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 8000936:	4618      	mov	r0, r3
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	015a4e35 	.word	0x015a4e35
 8000944:	20000240 	.word	0x20000240
 8000948:	2000023c 	.word	0x2000023c

0800094c <vLoggingPrintf>:

void vLoggingPrintf( const char *pcFormatString, ... ){
 800094c:	b40f      	push	{r0, r1, r2, r3}
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
	return;
 8000952:	bf00      	nop
}
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	b004      	add	sp, #16
 800095c:	4770      	bx	lr
	...

08000960 <xApplicationDNSQueryHook>:

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8000968:	f7ff ff9a 	bl	80008a0 <pcApplicationHostnameHook>
 800096c:	4603      	mov	r3, r0
 800096e:	4619      	mov	r1, r3
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f011 fc67 	bl	8012244 <strcasecmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 800097c:	2301      	movs	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e00b      	b.n	800099a <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <xApplicationDNSQueryHook+0x44>)
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f011 fc5d 	bl	8012244 <strcasecmp>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 8000990:	2301      	movs	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e001      	b.n	800099a <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08013864 	.word	0x08013864

080009a8 <xApplicationGetRandomNumber>:
 * Supply a random number to FreeRTOS+TCP stack.
 * THIS IS ONLY A DUMMY IMPLEMENTATION THAT RETURNS A PSEUDO RANDOM NUMBER
 * SO IS NOT INTENDED FOR USE IN PRODUCTION SYSTEMS.
 */
BaseType_t xApplicationGetRandomNumber(uint32_t* pulNumber)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	*(pulNumber) = uxRand();
 80009b0:	f7ff ff90 	bl	80008d4 <uxRand>
 80009b4:	4602      	mov	r2, r0
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
													uint16_t usSourcePort,
													uint32_t ulDestinationAddress,
													uint16_t usDestinationPort ){
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	461a      	mov	r2, r3
 80009d0:	460b      	mov	r3, r1
 80009d2:	817b      	strh	r3, [r7, #10]
 80009d4:	4613      	mov	r3, r2
 80009d6:	813b      	strh	r3, [r7, #8]
	return 306;
 80009d8:	f44f 7399 	mov.w	r3, #306	; 0x132
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <vUDPSendUsingStandardInterface>:

static void vUDPSendUsingStandardInterface( void *pvParameters )
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b08f      	sub	sp, #60	; 0x3c
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
	Socket_t xSocket;
	struct freertos_sockaddr xDestinationAddress;

	const TickType_t x900ms = 900UL / portTICK_PERIOD_MS;
 80009f0:	f44f 7361 	mov.w	r3, #900	; 0x384
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c

   /* Send strings to port 55555 on IP address 192.168.1.1. */
   xDestinationAddress.sin_addr = FreeRTOS_inet_addr( "192.168.1.1" );
 80009f6:	4826      	ldr	r0, [pc, #152]	; (8000a90 <vUDPSendUsingStandardInterface+0xa8>)
 80009f8:	f00a fa0d 	bl	800ae16 <FreeRTOS_inet_addr>
 80009fc:	4603      	mov	r3, r0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
   xDestinationAddress.sin_port = FreeRTOS_htons( 55555 );
 8000a00:	f240 33d9 	movw	r3, #985	; 0x3d9
 8000a04:	847b      	strh	r3, [r7, #34]	; 0x22
	   double number;
	   double x;
	   double y;
   };
   struct samples_struct sendStruct;
   sendStruct.number = 0;
 8000a06:	f04f 0300 	mov.w	r3, #0
 8000a0a:	f04f 0400 	mov.w	r4, #0
 8000a0e:	e9c7 3402 	strd	r3, r4, [r7, #8]
   sendStruct.x = 1.1;
 8000a12:	a41b      	add	r4, pc, #108	; (adr r4, 8000a80 <vUDPSendUsingStandardInterface+0x98>)
 8000a14:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000a18:	e9c7 3404 	strd	r3, r4, [r7, #16]
   sendStruct.y = 2.12345;
 8000a1c:	a41a      	add	r4, pc, #104	; (adr r4, 8000a88 <vUDPSendUsingStandardInterface+0xa0>)
 8000a1e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000a22:	e9c7 3406 	strd	r3, r4, [r7, #24]


   /* Create the socket. */
   xSocket = FreeRTOS_socket( FREERTOS_AF_INET,
 8000a26:	2211      	movs	r2, #17
 8000a28:	2102      	movs	r1, #2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f009 fbf6 	bl	800a21c <FreeRTOS_socket>
 8000a30:	62b8      	str	r0, [r7, #40]	; 0x28
                              FREERTOS_SOCK_DGRAM,/*FREERTOS_SOCK_DGRAM for UDP.*/
                              FREERTOS_IPPROTO_UDP );

   /* Check the socket was created. */
   configASSERT( xSocket != FREERTOS_INVALID_SOCKET );
 8000a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d103      	bne.n	8000a42 <vUDPSendUsingStandardInterface+0x5a>
 8000a3a:	4916      	ldr	r1, [pc, #88]	; (8000a94 <vUDPSendUsingStandardInterface+0xac>)
 8000a3c:	20c8      	movs	r0, #200	; 0xc8
 8000a3e:	f000 f8bb 	bl	8000bb8 <vAssertCalled>

   /* NOTE: FreeRTOS_bind() is not called.  This will only work if
   ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is set to 1 in FreeRTOSIPConfig.h. */
   for( ;; )
   {
	   HAL_GPIO_TogglePin(LD_USER2_GPIO_Port, LD_USER2_Pin);
 8000a42:	2120      	movs	r1, #32
 8000a44:	4814      	ldr	r0, [pc, #80]	; (8000a98 <vUDPSendUsingStandardInterface+0xb0>)
 8000a46:	f000 fe68 	bl	800171a <HAL_GPIO_TogglePin>

       /* Send the string to the UDP socket.  ulFlags is set to 0, so the standard
       semantics are used.  That means the data from cString[] is copied
       into a network buffer inside FreeRTOS_sendto(), and cString[] can be
       reused as soon as FreeRTOS_sendto() has returned. */
       FreeRTOS_sendto( xSocket,
 8000a4a:	f107 0108 	add.w	r1, r7, #8
 8000a4e:	2308      	movs	r3, #8
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a5e:	f009 fd2b 	bl	800a4b8 <FreeRTOS_sendto>
                        sizeof( sendStruct ),
                        0,
                        &xDestinationAddress,
                        sizeof( xDestinationAddress ) );

       vTaskDelay( 100UL / portTICK_PERIOD_MS);
 8000a62:	2064      	movs	r0, #100	; 0x64
 8000a64:	f004 ffca 	bl	80059fc <vTaskDelay>
       HAL_GPIO_WritePin(LD_USER2_GPIO_Port, LD_USER2_Pin, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <vUDPSendUsingStandardInterface+0xb0>)
 8000a6e:	f000 fe3b 	bl	80016e8 <HAL_GPIO_WritePin>
       /* Wait until it is time to send again. */
       vTaskDelay( x900ms );
 8000a72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a74:	f004 ffc2 	bl	80059fc <vTaskDelay>
	   HAL_GPIO_TogglePin(LD_USER2_GPIO_Port, LD_USER2_Pin);
 8000a78:	e7e3      	b.n	8000a42 <vUDPSendUsingStandardInterface+0x5a>
 8000a7a:	bf00      	nop
 8000a7c:	f3af 8000 	nop.w
 8000a80:	9999999a 	.word	0x9999999a
 8000a84:	3ff19999 	.word	0x3ff19999
 8000a88:	5a858794 	.word	0x5a858794
 8000a8c:	4000fcd3 	.word	0x4000fcd3
 8000a90:	0801386c 	.word	0x0801386c
 8000a94:	08013878 	.word	0x08013878
 8000a98:	40022400 	.word	0x40022400

08000a9c <vUDPReceivingUsingStandardInterface>:
   }
}

static void vUDPReceivingUsingStandardInterface( void *pvParameters )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0c8      	sub	sp, #288	; 0x120
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	6018      	str	r0, [r3, #0]
	int32_t lBytes;
	struct freertos_sockaddr xClient, xBindAddress;
	uint32_t xClientLength = sizeof( xClient ), ulIPAddress;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		   double y[10];
	};
	struct samples_struct receiveStruct;

   /* Attempt to open the socket. */
   xListeningSocket = FreeRTOS_socket( FREERTOS_AF_INET,
 8000aac:	2211      	movs	r2, #17
 8000aae:	2102      	movs	r1, #2
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f009 fbb3 	bl	800a21c <FreeRTOS_socket>
 8000ab6:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
									   FREERTOS_SOCK_DGRAM, /*FREERTOS_SOCK_DGRAM for UDP.*/
									   FREERTOS_IPPROTO_UDP );

   /* Check the socket was created. */
   configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 8000aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac2:	d103      	bne.n	8000acc <vUDPReceivingUsingStandardInterface+0x30>
 8000ac4:	4919      	ldr	r1, [pc, #100]	; (8000b2c <vUDPReceivingUsingStandardInterface+0x90>)
 8000ac6:	20f7      	movs	r0, #247	; 0xf7
 8000ac8:	f000 f876 	bl	8000bb8 <vAssertCalled>

   /* Bind to port 55556. */
   xBindAddress.sin_port = FreeRTOS_htons( 55556 );
 8000acc:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8000ad0:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
   FreeRTOS_bind( xListeningSocket, &xBindAddress, sizeof( xBindAddress ) );
 8000ad4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ad8:	2208      	movs	r2, #8
 8000ada:	4619      	mov	r1, r3
 8000adc:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8000ae0:	f009 fd8e 	bl	800a600 <FreeRTOS_bind>
	   parameter to the FreeRTOS_recvfrom() call.  When this is done the
	   IP stack is no longer responsible for releasing the buffer, and
	   the RTOS task must return the buffer to the stack when it is no longer
	   needed.  By default the block time is portMAX_DELAY but it can be
	   changed using FreeRTOS_setsockopt(). */
	   lBytes = FreeRTOS_recvfrom( xListeningSocket,
 8000ae4:	f107 0108 	add.w	r1, r7, #8
 8000ae8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2300      	movs	r3, #0
 8000af6:	22f0      	movs	r2, #240	; 0xf0
 8000af8:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8000afc:	f009 fc2c 	bl	800a358 <FreeRTOS_recvfrom>
 8000b00:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
								   sizeof( receiveStruct ),
								   0,
								   &xClient,
								   &xClientLength );

	   if( lBytes > 0 )
 8000b04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	ddeb      	ble.n	8000ae4 <vUDPReceivingUsingStandardInterface+0x48>
	   {
		   HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <vUDPReceivingUsingStandardInterface+0x94>)
 8000b14:	f000 fde8 	bl	80016e8 <HAL_GPIO_WritePin>
		   vTaskDelay(100UL / portTICK_PERIOD_MS);
 8000b18:	2064      	movs	r0, #100	; 0x64
 8000b1a:	f004 ff6f 	bl	80059fc <vTaskDelay>
		   HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <vUDPReceivingUsingStandardInterface+0x94>)
 8000b26:	f000 fddf 	bl	80016e8 <HAL_GPIO_WritePin>
	   lBytes = FreeRTOS_recvfrom( xListeningSocket,
 8000b2a:	e7db      	b.n	8000ae4 <vUDPReceivingUsingStandardInterface+0x48>
 8000b2c:	08013878 	.word	0x08013878
 8000b30:	40022400 	.word	0x40022400

08000b34 <vApplicationIPNetworkEventHook>:
	   }
   }
}

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
static BaseType_t xTasksAlreadyCreated = pdFALSE;
    /* Both eNetworkUp and eNetworkDown events can be processed here. */
    if( eNetworkEvent == eNetworkUp )
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d11b      	bne.n	8000b7c <vApplicationIPNetworkEventHook+0x48>
    {
    	xTaskCreate( vUDPSendUsingStandardInterface, "UDPSend", configMINIMAL_STACK_SIZE, NULL, mainLED_TASK_PRIORITY, NULL );
 8000b44:	2300      	movs	r3, #0
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2282      	movs	r2, #130	; 0x82
 8000b50:	4913      	ldr	r1, [pc, #76]	; (8000ba0 <vApplicationIPNetworkEventHook+0x6c>)
 8000b52:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <vApplicationIPNetworkEventHook+0x70>)
 8000b54:	f004 fdfa 	bl	800574c <xTaskCreate>
    	xTaskCreate( vUDPReceivingUsingStandardInterface, "UDPReceive", configMINIMAL_STACK_SIZE, NULL, mainLED_TASK_PRIORITY, NULL );
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2300      	movs	r3, #0
 8000b62:	2282      	movs	r2, #130	; 0x82
 8000b64:	4910      	ldr	r1, [pc, #64]	; (8000ba8 <vApplicationIPNetworkEventHook+0x74>)
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <vApplicationIPNetworkEventHook+0x78>)
 8000b68:	f004 fdf0 	bl	800574c <xTaskCreate>
        /* Create the tasks that use the TCP/IP stack if they have not already
        been created. */
        if( xTasksAlreadyCreated == pdFALSE )
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <vApplicationIPNetworkEventHook+0x7c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d111      	bne.n	8000b98 <vApplicationIPNetworkEventHook+0x64>
            /*
             * For convenience, tasks that use FreeRTOS+TCP can be created here
             * to ensure they are not created before the network is usable.
             */

            xTasksAlreadyCreated = pdTRUE;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <vApplicationIPNetworkEventHook+0x7c>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]
    	if (HAL_GPIO_ReadPin(LD_USER1_GPIO_Port, LD_USER1_Pin) != 1)
    	{
    		HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
    	}
    }
}
 8000b7a:	e00d      	b.n	8000b98 <vApplicationIPNetworkEventHook+0x64>
    	if (HAL_GPIO_ReadPin(LD_USER1_GPIO_Port, LD_USER1_Pin) != 1)
 8000b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <vApplicationIPNetworkEventHook+0x80>)
 8000b82:	f000 fd99 	bl	80016b8 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d005      	beq.n	8000b98 <vApplicationIPNetworkEventHook+0x64>
    		HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <vApplicationIPNetworkEventHook+0x80>)
 8000b94:	f000 fda8 	bl	80016e8 <HAL_GPIO_WritePin>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	0801388c 	.word	0x0801388c
 8000ba4:	080009e9 	.word	0x080009e9
 8000ba8:	08013894 	.word	0x08013894
 8000bac:	08000a9d 	.word	0x08000a9d
 8000bb0:	20000244 	.word	0x20000244
 8000bb4:	40022400 	.word	0x40022400

08000bb8 <vAssertCalled>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8000bc6:	f006 fcff 	bl	80075c8 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 8000bca:	e000      	b.n	8000bce <vAssertCalled+0x16>
		{
			__NOP();
 8000bcc:	bf00      	nop
		while( ul == 0 )
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0fb      	beq.n	8000bcc <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8000bd4:	f006 fd24 	bl	8007620 <vPortExitCritical>
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 faae 	bl	8001146 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f81b 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f7ff fdcf 	bl	8000790 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_RNG_Init();
 8000bf2:	f000 f8c1 	bl	8000d78 <MX_RNG_Init>
  MX_USART1_UART_Init();
 8000bf6:	f000 f9eb 	bl	8000fd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  FreeRTOS_IPInit( ucIPAddress,
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <main+0x30>)
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <main+0x34>)
 8000c00:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <main+0x38>)
 8000c02:	4906      	ldr	r1, [pc, #24]	; (8000c1c <main+0x3c>)
 8000c04:	4806      	ldr	r0, [pc, #24]	; (8000c20 <main+0x40>)
 8000c06:	f008 fc19 	bl	800943c <FreeRTOS_IPInit>
                   ucNetMask,
                   ucGatewayAddress,
                   ucDNSServerAddress,
                   ucMACAddress );
  vTaskStartScheduler();
 8000c0a:	f004 ff27 	bl	8005a5c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <main+0x2e>
 8000c10:	080153a4 	.word	0x080153a4
 8000c14:	080153b8 	.word	0x080153b8
 8000c18:	080153b4 	.word	0x080153b4
 8000c1c:	080153b0 	.word	0x080153b0
 8000c20:	080153ac 	.word	0x080153ac

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0b8      	sub	sp, #224	; 0xe0
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c2e:	2234      	movs	r2, #52	; 0x34
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f010 fdb9 	bl	80117aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	2290      	movs	r2, #144	; 0x90
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f010 fdaa 	bl	80117aa <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <SystemClock_Config+0x11c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a39      	ldr	r2, [pc, #228]	; (8000d40 <SystemClock_Config+0x11c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <SystemClock_Config+0x11c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <SystemClock_Config+0x120>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a34      	ldr	r2, [pc, #208]	; (8000d44 <SystemClock_Config+0x120>)
 8000c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <SystemClock_Config+0x120>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c94:	2302      	movs	r3, #2
 8000c96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ca2:	2319      	movs	r3, #25
 8000ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000ca8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cb6:	2309      	movs	r3, #9
 8000cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fd95 	bl	80017f0 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ccc:	f000 f850 	bl	8000d70 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cd0:	f000 fd3e 	bl	8001750 <HAL_PWREx_EnableOverDrive>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cda:	f000 f849 	bl	8000d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cf0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d04:	2107      	movs	r1, #7
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 f820 	bl	8001d4c <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000d12:	f000 f82d 	bl	8000d70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <SystemClock_Config+0x124>)
 8000d18:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fa13 	bl	8002154 <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000d34:	f000 f81c 	bl	8000d70 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	37e0      	adds	r7, #224	; 0xe0
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000
 8000d48:	00200040 	.word	0x00200040

08000d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5e:	f000 f9ff 	bl	8001160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40001000 	.word	0x40001000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <Error_Handler+0x6>

08000d78 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_RNG_Init+0x20>)
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <MX_RNG_Init+0x24>)
 8000d80:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_RNG_Init+0x20>)
 8000d84:	f001 fe0c 	bl	80029a0 <HAL_RNG_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000d8e:	f7ff ffef 	bl	8000d70 <Error_Handler>
  }

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000c734 	.word	0x2000c734
 8000d9c:	50060800 	.word	0x50060800

08000da0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <HAL_RNG_MspInit+0x44>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d113      	bne.n	8000dda <HAL_RNG_MspInit+0x3a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_RNG_MspInit+0x48>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <HAL_RNG_MspInit+0x48>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbc:	6353      	str	r3, [r2, #52]	; 0x34
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_RNG_MspInit+0x48>)
 8000dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2050      	movs	r0, #80	; 0x50
 8000dd0:	f000 fa9e 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000dd4:	2050      	movs	r0, #80	; 0x50
 8000dd6:	f000 fab7 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	50060800 	.word	0x50060800
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_MspInit+0x44>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <HAL_MspInit+0x44>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_MspInit+0x44>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_MspInit+0x44>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_MspInit+0x44>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_MspInit+0x44>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2036      	movs	r0, #54	; 0x36
 8000e4a:	f000 fa61 	bl	8001310 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e4e:	2036      	movs	r0, #54	; 0x36
 8000e50:	f000 fa7a 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_InitTick+0xa0>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <HAL_InitTick+0xa0>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_InitTick+0xa0>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6c:	f107 0210 	add.w	r2, r7, #16
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f93a 	bl	80020f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e7c:	f001 f910 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8000e80:	4603      	mov	r3, r0
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <HAL_InitTick+0xa4>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	0c9b      	lsrs	r3, r3, #18
 8000e90:	3b01      	subs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_InitTick+0xa8>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <HAL_InitTick+0xac>)
 8000e98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_InitTick+0xa8>)
 8000e9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_InitTick+0xa8>)
 8000ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_InitTick+0xa8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_InitTick+0xa8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000eb4:	4809      	ldr	r0, [pc, #36]	; (8000edc <HAL_InitTick+0xa8>)
 8000eb6:	f001 fe57 	bl	8002b68 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d104      	bne.n	8000eca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ec0:	4806      	ldr	r0, [pc, #24]	; (8000edc <HAL_InitTick+0xa8>)
 8000ec2:	f001 fe87 	bl	8002bd4 <HAL_TIM_Base_Start_IT>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3730      	adds	r7, #48	; 0x30
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	431bde83 	.word	0x431bde83
 8000edc:	2000c744 	.word	0x2000c744
 8000ee0:	40001000 	.word	0x40001000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <TIM6_DAC_IRQHandler+0x10>)
 8000f16:	f001 fe87 	bl	8002c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000c744 	.word	0x2000c744

08000f24 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <RNG_IRQHandler+0x10>)
 8000f2a:	f001 fdb2 	bl	8002a92 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000c734 	.word	0x2000c734

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f010 fbc2 	bl	80116f0 <__errno>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	230c      	movs	r3, #12
 8000f70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20080000 	.word	0x20080000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20000248 	.word	0x20000248
 8000fa0:	2000c988 	.word	0x2000c988

08000fa4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <SystemInit+0x28>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <SystemInit+0x28>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SystemInit+0x28>)
 8000fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fbe:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000fd6:	4a15      	ldr	r2, [pc, #84]	; (800102c <MX_USART1_UART_Init+0x5c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_USART1_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_USART1_UART_Init+0x58>)
 8001014:	f002 f80e 	bl	8003034 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800101e:	f7ff fea7 	bl	8000d70 <Error_Handler>
  }

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000c784 	.word	0x2000c784
 800102c:	40011000 	.word	0x40011000

08001030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <HAL_UART_MspInit+0xb4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d144      	bne.n	80010dc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <HAL_UART_MspInit+0xb8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <HAL_UART_MspInit+0xb8>)
 8001058:	f043 0310 	orr.w	r3, r3, #16
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <HAL_UART_MspInit+0xb8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <HAL_UART_MspInit+0xb8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <HAL_UART_MspInit+0xb8>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_UART_MspInit+0xb8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_UART_MspInit+0xb8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <HAL_UART_MspInit+0xb8>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_UART_MspInit+0xb8>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010aa:	2307      	movs	r3, #7
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <HAL_UART_MspInit+0xbc>)
 80010b6:	f000 f955 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010cc:	2307      	movs	r3, #7
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <HAL_UART_MspInit+0xc0>)
 80010d8:	f000 f944 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40011000 	.word	0x40011000
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020000 	.word	0x40020000

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010fa:	e003      	b.n	8001104 <LoopCopyDataInit>

080010fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001100:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001102:	3104      	adds	r1, #4

08001104 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001108:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800110a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800110c:	d3f6      	bcc.n	80010fc <CopyDataInit>
  ldr  r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001110:	e002      	b.n	8001118 <LoopFillZerobss>

08001112 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001112:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001114:	f842 3b04 	str.w	r3, [r2], #4

08001118 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800111a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800111c:	d3f9      	bcc.n	8001112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800111e:	f7ff ff41 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f010 faeb 	bl	80116fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff fd5b 	bl	8000be0 <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001130:	08015728 	.word	0x08015728
  ldr  r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001138:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 800113c:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8001140:	2000c984 	.word	0x2000c984

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>

08001146 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114a:	2003      	movs	r0, #3
 800114c:	f000 f8d5 	bl	80012fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff fe6f 	bl	8000e34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001156:	f7ff fe49 	bl	8000dec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	2000c804 	.word	0x2000c804

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000c804 	.word	0x2000c804

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <__NVIC_SetPriorityGrouping+0x40>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x40>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	05fa0000 	.word	0x05fa0000

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff4c 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001322:	f7ff ff61 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 8001326:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f7ff ffb1 	bl	8001294 <NVIC_EncodePriority>
 8001332:	4602      	mov	r2, r0
 8001334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff80 	bl	8001240 <__NVIC_SetPriority>
}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff54 	bl	8001204 <__NVIC_EnableIRQ>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e175      	b.n	8001670 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8164 	bne.w	800166a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d00b      	beq.n	80013c2 <HAL_GPIO_Init+0x5e>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b6:	2b11      	cmp	r3, #17
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d130      	bne.n	8001424 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x100>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b12      	cmp	r3, #18
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80be 	beq.w	800166a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b65      	ldr	r3, [pc, #404]	; (8001684 <HAL_GPIO_Init+0x320>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a64      	ldr	r2, [pc, #400]	; (8001684 <HAL_GPIO_Init+0x320>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b62      	ldr	r3, [pc, #392]	; (8001684 <HAL_GPIO_Init+0x320>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001506:	4a60      	ldr	r2, [pc, #384]	; (8001688 <HAL_GPIO_Init+0x324>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a57      	ldr	r2, [pc, #348]	; (800168c <HAL_GPIO_Init+0x328>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d037      	beq.n	80015a2 <HAL_GPIO_Init+0x23e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a56      	ldr	r2, [pc, #344]	; (8001690 <HAL_GPIO_Init+0x32c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d031      	beq.n	800159e <HAL_GPIO_Init+0x23a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a55      	ldr	r2, [pc, #340]	; (8001694 <HAL_GPIO_Init+0x330>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d02b      	beq.n	800159a <HAL_GPIO_Init+0x236>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a54      	ldr	r2, [pc, #336]	; (8001698 <HAL_GPIO_Init+0x334>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d025      	beq.n	8001596 <HAL_GPIO_Init+0x232>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a53      	ldr	r2, [pc, #332]	; (800169c <HAL_GPIO_Init+0x338>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d01f      	beq.n	8001592 <HAL_GPIO_Init+0x22e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a52      	ldr	r2, [pc, #328]	; (80016a0 <HAL_GPIO_Init+0x33c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d019      	beq.n	800158e <HAL_GPIO_Init+0x22a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x340>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x226>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a50      	ldr	r2, [pc, #320]	; (80016a8 <HAL_GPIO_Init+0x344>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x222>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_GPIO_Init+0x348>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x21e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_GPIO_Init+0x34c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x21a>
 800157a:	2309      	movs	r3, #9
 800157c:	e012      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800157e:	230a      	movs	r3, #10
 8001580:	e010      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001582:	2308      	movs	r3, #8
 8001584:	e00e      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001586:	2307      	movs	r3, #7
 8001588:	e00c      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800158a:	2306      	movs	r3, #6
 800158c:	e00a      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800158e:	2305      	movs	r3, #5
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001592:	2304      	movs	r3, #4
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015b4:	4934      	ldr	r1, [pc, #208]	; (8001688 <HAL_GPIO_Init+0x324>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c2:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <HAL_GPIO_Init+0x350>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e6:	4a33      	ldr	r2, [pc, #204]	; (80016b4 <HAL_GPIO_Init+0x350>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_GPIO_Init+0x350>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001610:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <HAL_GPIO_Init+0x350>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_GPIO_Init+0x350>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_GPIO_Init+0x350>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_GPIO_Init+0x350>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <HAL_GPIO_Init+0x350>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f ae86 	bls.w	8001384 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	3724      	adds	r7, #36	; 0x24
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40023800 	.word	0x40023800
 8001688:	40013800 	.word	0x40013800
 800168c:	40020000 	.word	0x40020000
 8001690:	40020400 	.word	0x40020400
 8001694:	40020800 	.word	0x40020800
 8001698:	40020c00 	.word	0x40020c00
 800169c:	40021000 	.word	0x40021000
 80016a0:	40021400 	.word	0x40021400
 80016a4:	40021800 	.word	0x40021800
 80016a8:	40021c00 	.word	0x40021c00
 80016ac:	40022000 	.word	0x40022000
 80016b0:	40022400 	.word	0x40022400
 80016b4:	40013c00 	.word	0x40013c00

080016b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	887b      	ldrh	r3, [r7, #2]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e001      	b.n	80016da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800173a:	e002      	b.n	8001742 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800177e:	f7ff fd03 	bl	8001188 <HAL_GetTick>
 8001782:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001784:	e009      	b.n	800179a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001786:	f7ff fcff 	bl	8001188 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001794:	d901      	bls.n	800179a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e022      	b.n	80017e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a6:	d1ee      	bne.n	8001786 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80017ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b4:	f7ff fce8 	bl	8001188 <HAL_GetTick>
 80017b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017ba:	e009      	b.n	80017d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017bc:	f7ff fce4 	bl	8001188 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ca:	d901      	bls.n	80017d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e007      	b.n	80017e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017dc:	d1ee      	bne.n	80017bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e29b      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8087 	beq.w	8001922 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001814:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00c      	beq.n	800183a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001820:	4b93      	ldr	r3, [pc, #588]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d112      	bne.n	8001852 <HAL_RCC_OscConfig+0x62>
 800182c:	4b90      	ldr	r3, [pc, #576]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001838:	d10b      	bne.n	8001852 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183a:	4b8d      	ldr	r3, [pc, #564]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d06c      	beq.n	8001920 <HAL_RCC_OscConfig+0x130>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d168      	bne.n	8001920 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e275      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x7a>
 800185c:	4b84      	ldr	r3, [pc, #528]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a83      	ldr	r2, [pc, #524]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e02e      	b.n	80018c8 <HAL_RCC_OscConfig+0xd8>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x9c>
 8001872:	4b7f      	ldr	r3, [pc, #508]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7e      	ldr	r2, [pc, #504]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7b      	ldr	r2, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0xd8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0xc0>
 8001896:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a75      	ldr	r2, [pc, #468]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0xd8>
 80018b0:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6b      	ldr	r2, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fc5a 	bl	8001188 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fc56 	bl	8001188 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e229      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b61      	ldr	r3, [pc, #388]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0xe8>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fc46 	bl	8001188 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fc42 	bl	8001188 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e215      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x110>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d069      	beq.n	8001a02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d11c      	bne.n	8001980 <HAL_RCC_OscConfig+0x190>
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x17a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1e9      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	493d      	ldr	r1, [pc, #244]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e040      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d023      	beq.n	80019d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fbf8 	bl	8001188 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff fbf4 	bl	8001188 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1c7      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4929      	ldr	r1, [pc, #164]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
 80019ce:	e018      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a26      	ldr	r2, [pc, #152]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fbd4 	bl	8001188 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff fbd0 	bl	8001188 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1a3      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d038      	beq.n	8001a80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d019      	beq.n	8001a4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1a:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff fbb1 	bl	8001188 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fbad 	bl	8001188 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e180      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x23a>
 8001a48:	e01a      	b.n	8001a80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff fb97 	bl	8001188 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fb93 	bl	8001188 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d903      	bls.n	8001a74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e166      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
 8001a70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ee      	bne.n	8001a5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a4 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b8c      	ldr	r3, [pc, #560]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b89      	ldr	r3, [pc, #548]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a88      	ldr	r2, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b86      	ldr	r3, [pc, #536]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab6:	4b83      	ldr	r3, [pc, #524]	; (8001cc4 <HAL_RCC_OscConfig+0x4d4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ac2:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <HAL_RCC_OscConfig+0x4d4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7f      	ldr	r2, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x4d4>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff fb5b 	bl	8001188 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff fb57 	bl	8001188 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	; 0x64
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e12a      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae8:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <HAL_RCC_OscConfig+0x4d4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x31a>
 8001afc:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a6f      	ldr	r2, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	e02d      	b.n	8001b66 <HAL_RCC_OscConfig+0x376>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x33c>
 8001b12:	4b6b      	ldr	r3, [pc, #428]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a6a      	ldr	r2, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1e:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a67      	ldr	r2, [pc, #412]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	e01c      	b.n	8001b66 <HAL_RCC_OscConfig+0x376>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x35e>
 8001b34:	4b62      	ldr	r3, [pc, #392]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a61      	ldr	r2, [pc, #388]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a5e      	ldr	r2, [pc, #376]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x376>
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a5b      	ldr	r2, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5a:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d015      	beq.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fb0b 	bl	8001188 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff fb07 	bl	8001188 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0d8      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCC_OscConfig+0x386>
 8001b98:	e014      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff faf5 	bl	8001188 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff faf1 	bl	8001188 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0c2      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a3c      	ldr	r2, [pc, #240]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80ae 	beq.w	8001d3c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d06d      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d14b      	bne.n	8001c8c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff fac2 	bl	8001188 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff fabe 	bl	8001188 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e091      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	085b      	lsrs	r3, r3, #1
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	071b      	lsls	r3, r3, #28
 8001c52:	491b      	ldr	r1, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff fa90 	bl	8001188 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff fa8c 	bl	8001188 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e05f      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x47c>
 8001c8a:	e057      	b.n	8001d3c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fa76 	bl	8001188 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff fa72 	bl	8001188 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e045      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4b0>
 8001cbe:	e03d      	b.n	8001d3c <HAL_RCC_OscConfig+0x54c>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <HAL_RCC_OscConfig+0x558>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d030      	beq.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d129      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d122      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cfe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d119      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d10f      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0d0      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 020f 	bic.w	r2, r3, #15
 8001d7a:	4965      	ldr	r1, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d040      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e073      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06b      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4936      	ldr	r1, [pc, #216]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e40:	f7ff f9a2 	bl	8001188 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff f99e 	bl	8001188 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e053      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d210      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 020f 	bic.w	r2, r3, #15
 8001e86:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1cc>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1d0>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1d4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ff98 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	080153bc 	.word	0x080153bc
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d007      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x32>
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d008      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x38>
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 808d 	bne.w	800206a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001f52:	60bb      	str	r3, [r7, #8]
      break;
 8001f54:	e08c      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f58:	60bb      	str	r3, [r7, #8]
      break;
 8001f5a:	e089      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f64:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f66:	4b45      	ldr	r3, [pc, #276]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d023      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	ea03 0501 	and.w	r5, r3, r1
 8001f88:	ea04 0602 	and.w	r6, r4, r2
 8001f8c:	4a3d      	ldr	r2, [pc, #244]	; (8002084 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f8e:	fb02 f106 	mul.w	r1, r2, r6
 8001f92:	2200      	movs	r2, #0
 8001f94:	fb02 f205 	mul.w	r2, r2, r5
 8001f98:	440a      	add	r2, r1
 8001f9a:	493a      	ldr	r1, [pc, #232]	; (8002084 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f9c:	fba5 0101 	umull	r0, r1, r5, r1
 8001fa0:	1853      	adds	r3, r2, r1
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4623      	mov	r3, r4
 8001fae:	f7fe f9af 	bl	8000310 <__aeabi_uldivmod>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e049      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fba:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	ea03 0501 	and.w	r5, r3, r1
 8001fd0:	ea04 0602 	and.w	r6, r4, r2
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	4632      	mov	r2, r6
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	0154      	lsls	r4, r2, #5
 8001fe2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fe6:	014b      	lsls	r3, r1, #5
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4622      	mov	r2, r4
 8001fec:	1b49      	subs	r1, r1, r5
 8001fee:	eb62 0206 	sbc.w	r2, r2, r6
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	f04f 0400 	mov.w	r4, #0
 8001ffa:	0194      	lsls	r4, r2, #6
 8001ffc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002000:	018b      	lsls	r3, r1, #6
 8002002:	1a5b      	subs	r3, r3, r1
 8002004:	eb64 0402 	sbc.w	r4, r4, r2
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	00e2      	lsls	r2, r4, #3
 8002012:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002016:	00d9      	lsls	r1, r3, #3
 8002018:	460b      	mov	r3, r1
 800201a:	4614      	mov	r4, r2
 800201c:	195b      	adds	r3, r3, r5
 800201e:	eb44 0406 	adc.w	r4, r4, r6
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	02a2      	lsls	r2, r4, #10
 800202c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002030:	0299      	lsls	r1, r3, #10
 8002032:	460b      	mov	r3, r1
 8002034:	4614      	mov	r4, r2
 8002036:	4618      	mov	r0, r3
 8002038:	4621      	mov	r1, r4
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	f7fe f964 	bl	8000310 <__aeabi_uldivmod>
 8002048:	4603      	mov	r3, r0
 800204a:	460c      	mov	r4, r1
 800204c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	3301      	adds	r3, #1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	60bb      	str	r3, [r7, #8]
      break;
 8002068:	e002      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetSysClockFreq+0x15c>)
 800206c:	60bb      	str	r3, [r7, #8]
      break;
 800206e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002070:	68bb      	ldr	r3, [r7, #8]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	017d7840 	.word	0x017d7840

08002088 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4601      	mov	r1, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a9b      	lsrs	r3, r3, #10
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4a03      	ldr	r2, [pc, #12]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	080153cc 	.word	0x080153cc

080020c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020cc:	f7ff ffdc 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020d0:	4601      	mov	r1, r0
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0b5b      	lsrs	r3, r3, #13
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4a03      	ldr	r2, [pc, #12]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	080153cc 	.word	0x080153cc

080020f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	220f      	movs	r2, #15
 80020fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_RCC_GetClockConfig+0x60>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 020f 	and.w	r2, r3, #15
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d012      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800217c:	4b69      	ldr	r3, [pc, #420]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a68      	ldr	r2, [pc, #416]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002182:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002186:	6093      	str	r3, [r2, #8]
 8002188:	4b66      	ldr	r3, [pc, #408]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002190:	4964      	ldr	r1, [pc, #400]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d017      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ae:	4b5d      	ldr	r3, [pc, #372]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	4959      	ldr	r1, [pc, #356]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021cc:	d101      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021da:	2301      	movs	r3, #1
 80021dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d017      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021ea:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	494a      	ldr	r1, [pc, #296]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002216:	2301      	movs	r3, #1
 8002218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002226:	2301      	movs	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 808b 	beq.w	800234e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	4a39      	ldr	r2, [pc, #228]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
 8002244:	4b37      	ldr	r3, [pc, #220]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a34      	ldr	r2, [pc, #208]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800225c:	f7fe ff94 	bl	8001188 <HAL_GetTick>
 8002260:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002264:	f7fe ff90 	bl	8001188 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e38d      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002276:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002282:	4b28      	ldr	r3, [pc, #160]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d035      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	429a      	cmp	r2, r3
 800229e:	d02e      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022c2:	4a18      	ldr	r2, [pc, #96]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d114      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe ff58 	bl	8001188 <HAL_GetTick>
 80022d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022da:	e00a      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7fe ff54 	bl	8001188 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e34f      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0ee      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800230a:	d111      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800231a:	400b      	ands	r3, r1
 800231c:	4901      	ldr	r1, [pc, #4]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
 8002322:	e00b      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002324:	40023800 	.word	0x40023800
 8002328:	40007000 	.word	0x40007000
 800232c:	0ffffcff 	.word	0x0ffffcff
 8002330:	4bb3      	ldr	r3, [pc, #716]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4ab2      	ldr	r2, [pc, #712]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002336:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800233a:	6093      	str	r3, [r2, #8]
 800233c:	4bb0      	ldr	r3, [pc, #704]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800233e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002348:	49ad      	ldr	r1, [pc, #692]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800234a:	4313      	orrs	r3, r2
 800234c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	d010      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800235a:	4ba9      	ldr	r3, [pc, #676]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800235c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002360:	4aa7      	ldr	r2, [pc, #668]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002366:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800236a:	4ba5      	ldr	r3, [pc, #660]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	49a2      	ldr	r1, [pc, #648]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002388:	4b9d      	ldr	r3, [pc, #628]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002396:	499a      	ldr	r1, [pc, #616]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023aa:	4b95      	ldr	r3, [pc, #596]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b8:	4991      	ldr	r1, [pc, #580]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023cc:	4b8c      	ldr	r3, [pc, #560]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023da:	4989      	ldr	r1, [pc, #548]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ee:	4b84      	ldr	r3, [pc, #528]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4980      	ldr	r1, [pc, #512]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002410:	4b7b      	ldr	r3, [pc, #492]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4978      	ldr	r1, [pc, #480]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002432:	4b73      	ldr	r3, [pc, #460]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f023 020c 	bic.w	r2, r3, #12
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	496f      	ldr	r1, [pc, #444]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4967      	ldr	r1, [pc, #412]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002476:	4b62      	ldr	r3, [pc, #392]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002484:	495e      	ldr	r1, [pc, #376]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002498:	4b59      	ldr	r3, [pc, #356]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	4956      	ldr	r1, [pc, #344]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024ba:	4b51      	ldr	r3, [pc, #324]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	494d      	ldr	r1, [pc, #308]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024dc:	4b48      	ldr	r3, [pc, #288]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	4945      	ldr	r1, [pc, #276]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024fe:	4b40      	ldr	r3, [pc, #256]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250c:	493c      	ldr	r1, [pc, #240]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002520:	4b37      	ldr	r3, [pc, #220]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252e:	4934      	ldr	r1, [pc, #208]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d011      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002550:	492b      	ldr	r1, [pc, #172]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800255c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002560:	d101      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002562:	2301      	movs	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002588:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002590:	491b      	ldr	r1, [pc, #108]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025a4:	4b16      	ldr	r3, [pc, #88]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b4:	4912      	ldr	r1, [pc, #72]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d8:	4909      	ldr	r1, [pc, #36]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00f      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	e002      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80025fe:	bf00      	nop
 8002600:	40023800 	.word	0x40023800
 8002604:	4985      	ldr	r1, [pc, #532]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00b      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002618:	4b80      	ldr	r3, [pc, #512]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800261a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002628:	497c      	ldr	r1, [pc, #496]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d005      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800263e:	f040 80d6 	bne.w	80027ee <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002648:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800264c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264e:	f7fe fd9b 	bl	8001188 <HAL_GetTick>
 8002652:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002656:	f7fe fd97 	bl	8001188 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b64      	cmp	r3, #100	; 0x64
 8002662:	d901      	bls.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e194      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d021      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11d      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002688:	4b64      	ldr	r3, [pc, #400]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800268a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268e:	0c1b      	lsrs	r3, r3, #16
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002696:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800269c:	0e1b      	lsrs	r3, r3, #24
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	019a      	lsls	r2, r3, #6
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	041b      	lsls	r3, r3, #16
 80026ae:	431a      	orrs	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	071b      	lsls	r3, r3, #28
 80026bc:	4957      	ldr	r1, [pc, #348]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x586>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02e      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ee:	d129      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026f0:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002704:	0f1b      	lsrs	r3, r3, #28
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	019a      	lsls	r2, r3, #6
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	431a      	orrs	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	071b      	lsls	r3, r3, #28
 8002724:	493d      	ldr	r1, [pc, #244]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800272c:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800272e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002732:	f023 021f 	bic.w	r2, r3, #31
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	3b01      	subs	r3, #1
 800273c:	4937      	ldr	r1, [pc, #220]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01d      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002750:	4b32      	ldr	r3, [pc, #200]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002756:	0e1b      	lsrs	r3, r3, #24
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800275e:	4b2f      	ldr	r3, [pc, #188]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002764:	0f1b      	lsrs	r3, r3, #28
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	019a      	lsls	r2, r3, #6
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	431a      	orrs	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	431a      	orrs	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	071b      	lsls	r3, r3, #28
 8002784:	4925      	ldr	r1, [pc, #148]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d011      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	019a      	lsls	r2, r3, #6
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	041b      	lsls	r3, r3, #16
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	071b      	lsls	r3, r3, #28
 80027b4:	4919      	ldr	r1, [pc, #100]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c8:	f7fe fcde 	bl	8001188 <HAL_GetTick>
 80027cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027d0:	f7fe fcda 	bl	8001188 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0d7      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	f040 80cd 	bne.w	8002990 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002802:	f7fe fcc1 	bl	8001188 <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800280a:	f7fe fcbd 	bl	8001188 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	; 0x64
 8002816:	d903      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0ba      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800281c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002820:	4b5e      	ldr	r3, [pc, #376]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800282c:	d0ed      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800284a:	2b00      	cmp	r3, #0
 800284c:	d02e      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d12a      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002856:	4b51      	ldr	r3, [pc, #324]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002864:	4b4d      	ldr	r3, [pc, #308]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	0f1b      	lsrs	r3, r3, #28
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	019a      	lsls	r2, r3, #6
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	431a      	orrs	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	071b      	lsls	r3, r3, #28
 800288a:	4944      	ldr	r1, [pc, #272]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002892:	4b42      	ldr	r3, [pc, #264]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002898:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	493d      	ldr	r1, [pc, #244]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d022      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c0:	d11d      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	0e1b      	lsrs	r3, r3, #24
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028d0:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	0f1b      	lsrs	r3, r3, #28
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	019a      	lsls	r2, r3, #6
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	431a      	orrs	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	061b      	lsls	r3, r3, #24
 80028f0:	431a      	orrs	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	071b      	lsls	r3, r3, #28
 80028f6:	4929      	ldr	r1, [pc, #164]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d028      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	0e1b      	lsrs	r3, r3, #24
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	019a      	lsls	r2, r3, #6
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	431a      	orrs	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	071b      	lsls	r3, r3, #28
 800293e:	4917      	ldr	r1, [pc, #92]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800294c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	4911      	ldr	r1, [pc, #68]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0e      	ldr	r2, [pc, #56]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002968:	f7fe fc0e 	bl	8001188 <HAL_GetTick>
 800296c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002970:	f7fe fc0a 	bl	8001188 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e007      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800298a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800298e:	d1ef      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01c      	b.n	80029ec <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	795b      	ldrb	r3, [r3, #5]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe f9ec 	bl	8000da0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0204 	orr.w	r2, r2, #4
 80029dc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	791b      	ldrb	r3, [r3, #4]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_RNG_GenerateRandomNumber+0x1a>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e03d      	b.n	8002a8a <HAL_RNG_GenerateRandomNumber+0x96>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	795b      	ldrb	r3, [r3, #5]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d12c      	bne.n	8002a78 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a24:	f7fe fbb0 	bl	8001188 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a2a:	e011      	b.n	8002a50 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002a2c:	f7fe fbac 	bl	8001188 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d90a      	bls.n	8002a50 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e01c      	b.n	8002a8a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d1e6      	bne.n	8002a2c <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	715a      	strb	r2, [r3, #5]
 8002a76:	e004      	b.n	8002a82 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	711a      	strb	r2, [r3, #4]

  return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b40      	cmp	r3, #64	; 0x40
 8002ac4:	d104      	bne.n	8002ad0 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2208      	movs	r2, #8
 8002aca:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002acc:	2301      	movs	r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10a      	bne.n	8002aec <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f839 	bl	8002b54 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8002aea:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d11d      	bne.n	8002b36 <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0208 	bic.w	r2, r2, #8
 8002b08:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	795b      	ldrb	r3, [r3, #5]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f804 	bl	8002b3e <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e01d      	b.n	8002bb6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f815 	bl	8002bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f000 f986 	bl	8002eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_TIM_Base_Start_IT+0x50>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d00b      	beq.n	8002c16 <HAL_TIM_Base_Start_IT+0x42>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d007      	beq.n	8002c16 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	00010007 	.word	0x00010007

08002c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d122      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d11b      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0202 	mvn.w	r2, #2
 8002c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f905 	bl	8002e7a <HAL_TIM_IC_CaptureCallback>
 8002c70:	e005      	b.n	8002c7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f8f7 	bl	8002e66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f908 	bl	8002e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0204 	mvn.w	r2, #4
 8002ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8db 	bl	8002e7a <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8cd 	bl	8002e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8de 	bl	8002e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d122      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d11b      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0208 	mvn.w	r2, #8
 8002cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2204      	movs	r2, #4
 8002d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8b1 	bl	8002e7a <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8a3 	bl	8002e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8b4 	bl	8002e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0210 	mvn.w	r2, #16
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2208      	movs	r2, #8
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f887 	bl	8002e7a <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f879 	bl	8002e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f88a 	bl	8002e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d10e      	bne.n	8002dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0201 	mvn.w	r2, #1
 8002da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fd ffd0 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d10e      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d107      	bne.n	8002dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f91a 	bl	800300c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de6:	d10e      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b80      	cmp	r3, #128	; 0x80
 8002df4:	d107      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f90d 	bl	8003020 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d10e      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b40      	cmp	r3, #64	; 0x40
 8002e20:	d107      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f838 	bl	8002ea2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d10e      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d107      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f06f 0220 	mvn.w	r2, #32
 8002e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f8cd 	bl	8002ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a40      	ldr	r2, [pc, #256]	; (8002fcc <TIM_Base_SetConfig+0x114>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed6:	d00f      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a3d      	ldr	r2, [pc, #244]	; (8002fd0 <TIM_Base_SetConfig+0x118>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3c      	ldr	r2, [pc, #240]	; (8002fd4 <TIM_Base_SetConfig+0x11c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3b      	ldr	r2, [pc, #236]	; (8002fd8 <TIM_Base_SetConfig+0x120>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3a      	ldr	r2, [pc, #232]	; (8002fdc <TIM_Base_SetConfig+0x124>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <TIM_Base_SetConfig+0x114>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d02b      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f18:	d027      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2c      	ldr	r2, [pc, #176]	; (8002fd0 <TIM_Base_SetConfig+0x118>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d023      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a2b      	ldr	r2, [pc, #172]	; (8002fd4 <TIM_Base_SetConfig+0x11c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01f      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2a      	ldr	r2, [pc, #168]	; (8002fd8 <TIM_Base_SetConfig+0x120>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01b      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <TIM_Base_SetConfig+0x124>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d017      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <TIM_Base_SetConfig+0x128>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <TIM_Base_SetConfig+0x12c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00f      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <TIM_Base_SetConfig+0x130>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00b      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a25      	ldr	r2, [pc, #148]	; (8002fec <TIM_Base_SetConfig+0x134>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <TIM_Base_SetConfig+0x138>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <TIM_Base_SetConfig+0x13c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d108      	bne.n	8002f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <TIM_Base_SetConfig+0x114>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0xf8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <TIM_Base_SetConfig+0x124>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40010400 	.word	0x40010400
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800
 8002fec:	40001800 	.word	0x40001800
 8002ff0:	40001c00 	.word	0x40001c00
 8002ff4:	40002000 	.word	0x40002000

08002ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e040      	b.n	80030c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd ffea 	bl	8001030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	; 0x24
 8003060:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f82c 	bl	80030d0 <UART_SetConfig>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e022      	b.n	80030c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 faca 	bl	8003624 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800309e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fb51 	bl	8003768 <UART_CheckIdleState>
 80030c6:	4603      	mov	r3, r0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4bb1      	ldr	r3, [pc, #708]	; (80033c4 <UART_SetConfig+0x2f4>)
 8003100:	4013      	ands	r3, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	6939      	ldr	r1, [r7, #16]
 8003108:	430b      	orrs	r3, r1
 800310a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a9f      	ldr	r2, [pc, #636]	; (80033c8 <UART_SetConfig+0x2f8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d121      	bne.n	8003194 <UART_SetConfig+0xc4>
 8003150:	4b9e      	ldr	r3, [pc, #632]	; (80033cc <UART_SetConfig+0x2fc>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b03      	cmp	r3, #3
 800315c:	d816      	bhi.n	800318c <UART_SetConfig+0xbc>
 800315e:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0x94>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003175 	.word	0x08003175
 8003168:	08003181 	.word	0x08003181
 800316c:	0800317b 	.word	0x0800317b
 8003170:	08003187 	.word	0x08003187
 8003174:	2301      	movs	r3, #1
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e151      	b.n	800341e <UART_SetConfig+0x34e>
 800317a:	2302      	movs	r3, #2
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e14e      	b.n	800341e <UART_SetConfig+0x34e>
 8003180:	2304      	movs	r3, #4
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e14b      	b.n	800341e <UART_SetConfig+0x34e>
 8003186:	2308      	movs	r3, #8
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e148      	b.n	800341e <UART_SetConfig+0x34e>
 800318c:	2310      	movs	r3, #16
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	bf00      	nop
 8003192:	e144      	b.n	800341e <UART_SetConfig+0x34e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a8d      	ldr	r2, [pc, #564]	; (80033d0 <UART_SetConfig+0x300>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d134      	bne.n	8003208 <UART_SetConfig+0x138>
 800319e:	4b8b      	ldr	r3, [pc, #556]	; (80033cc <UART_SetConfig+0x2fc>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d829      	bhi.n	8003200 <UART_SetConfig+0x130>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xe4>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	08003201 	.word	0x08003201
 80031bc:	08003201 	.word	0x08003201
 80031c0:	08003201 	.word	0x08003201
 80031c4:	080031f5 	.word	0x080031f5
 80031c8:	08003201 	.word	0x08003201
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003201 	.word	0x08003201
 80031d4:	080031ef 	.word	0x080031ef
 80031d8:	08003201 	.word	0x08003201
 80031dc:	08003201 	.word	0x08003201
 80031e0:	08003201 	.word	0x08003201
 80031e4:	080031fb 	.word	0x080031fb
 80031e8:	2300      	movs	r3, #0
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e117      	b.n	800341e <UART_SetConfig+0x34e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e114      	b.n	800341e <UART_SetConfig+0x34e>
 80031f4:	2304      	movs	r3, #4
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e111      	b.n	800341e <UART_SetConfig+0x34e>
 80031fa:	2308      	movs	r3, #8
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e10e      	b.n	800341e <UART_SetConfig+0x34e>
 8003200:	2310      	movs	r3, #16
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	bf00      	nop
 8003206:	e10a      	b.n	800341e <UART_SetConfig+0x34e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a71      	ldr	r2, [pc, #452]	; (80033d4 <UART_SetConfig+0x304>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d120      	bne.n	8003254 <UART_SetConfig+0x184>
 8003212:	4b6e      	ldr	r3, [pc, #440]	; (80033cc <UART_SetConfig+0x2fc>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800321c:	2b10      	cmp	r3, #16
 800321e:	d00f      	beq.n	8003240 <UART_SetConfig+0x170>
 8003220:	2b10      	cmp	r3, #16
 8003222:	d802      	bhi.n	800322a <UART_SetConfig+0x15a>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <UART_SetConfig+0x164>
 8003228:	e010      	b.n	800324c <UART_SetConfig+0x17c>
 800322a:	2b20      	cmp	r3, #32
 800322c:	d005      	beq.n	800323a <UART_SetConfig+0x16a>
 800322e:	2b30      	cmp	r3, #48	; 0x30
 8003230:	d009      	beq.n	8003246 <UART_SetConfig+0x176>
 8003232:	e00b      	b.n	800324c <UART_SetConfig+0x17c>
 8003234:	2300      	movs	r3, #0
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e0f1      	b.n	800341e <UART_SetConfig+0x34e>
 800323a:	2302      	movs	r3, #2
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e0ee      	b.n	800341e <UART_SetConfig+0x34e>
 8003240:	2304      	movs	r3, #4
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e0eb      	b.n	800341e <UART_SetConfig+0x34e>
 8003246:	2308      	movs	r3, #8
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e0e8      	b.n	800341e <UART_SetConfig+0x34e>
 800324c:	2310      	movs	r3, #16
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	bf00      	nop
 8003252:	e0e4      	b.n	800341e <UART_SetConfig+0x34e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5f      	ldr	r2, [pc, #380]	; (80033d8 <UART_SetConfig+0x308>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d120      	bne.n	80032a0 <UART_SetConfig+0x1d0>
 800325e:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <UART_SetConfig+0x2fc>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d00f      	beq.n	800328c <UART_SetConfig+0x1bc>
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d802      	bhi.n	8003276 <UART_SetConfig+0x1a6>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <UART_SetConfig+0x1b0>
 8003274:	e010      	b.n	8003298 <UART_SetConfig+0x1c8>
 8003276:	2b80      	cmp	r3, #128	; 0x80
 8003278:	d005      	beq.n	8003286 <UART_SetConfig+0x1b6>
 800327a:	2bc0      	cmp	r3, #192	; 0xc0
 800327c:	d009      	beq.n	8003292 <UART_SetConfig+0x1c2>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x1c8>
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e0cb      	b.n	800341e <UART_SetConfig+0x34e>
 8003286:	2302      	movs	r3, #2
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e0c8      	b.n	800341e <UART_SetConfig+0x34e>
 800328c:	2304      	movs	r3, #4
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e0c5      	b.n	800341e <UART_SetConfig+0x34e>
 8003292:	2308      	movs	r3, #8
 8003294:	77fb      	strb	r3, [r7, #31]
 8003296:	e0c2      	b.n	800341e <UART_SetConfig+0x34e>
 8003298:	2310      	movs	r3, #16
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	bf00      	nop
 800329e:	e0be      	b.n	800341e <UART_SetConfig+0x34e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a4d      	ldr	r2, [pc, #308]	; (80033dc <UART_SetConfig+0x30c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d124      	bne.n	80032f4 <UART_SetConfig+0x224>
 80032aa:	4b48      	ldr	r3, [pc, #288]	; (80033cc <UART_SetConfig+0x2fc>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b8:	d012      	beq.n	80032e0 <UART_SetConfig+0x210>
 80032ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032be:	d802      	bhi.n	80032c6 <UART_SetConfig+0x1f6>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <UART_SetConfig+0x204>
 80032c4:	e012      	b.n	80032ec <UART_SetConfig+0x21c>
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ca:	d006      	beq.n	80032da <UART_SetConfig+0x20a>
 80032cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d0:	d009      	beq.n	80032e6 <UART_SetConfig+0x216>
 80032d2:	e00b      	b.n	80032ec <UART_SetConfig+0x21c>
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e0a1      	b.n	800341e <UART_SetConfig+0x34e>
 80032da:	2302      	movs	r3, #2
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e09e      	b.n	800341e <UART_SetConfig+0x34e>
 80032e0:	2304      	movs	r3, #4
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e09b      	b.n	800341e <UART_SetConfig+0x34e>
 80032e6:	2308      	movs	r3, #8
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e098      	b.n	800341e <UART_SetConfig+0x34e>
 80032ec:	2310      	movs	r3, #16
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	bf00      	nop
 80032f2:	e094      	b.n	800341e <UART_SetConfig+0x34e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a39      	ldr	r2, [pc, #228]	; (80033e0 <UART_SetConfig+0x310>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d124      	bne.n	8003348 <UART_SetConfig+0x278>
 80032fe:	4b33      	ldr	r3, [pc, #204]	; (80033cc <UART_SetConfig+0x2fc>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003304:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330c:	d012      	beq.n	8003334 <UART_SetConfig+0x264>
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003312:	d802      	bhi.n	800331a <UART_SetConfig+0x24a>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <UART_SetConfig+0x258>
 8003318:	e012      	b.n	8003340 <UART_SetConfig+0x270>
 800331a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x25e>
 8003320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003324:	d009      	beq.n	800333a <UART_SetConfig+0x26a>
 8003326:	e00b      	b.n	8003340 <UART_SetConfig+0x270>
 8003328:	2301      	movs	r3, #1
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e077      	b.n	800341e <UART_SetConfig+0x34e>
 800332e:	2302      	movs	r3, #2
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e074      	b.n	800341e <UART_SetConfig+0x34e>
 8003334:	2304      	movs	r3, #4
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e071      	b.n	800341e <UART_SetConfig+0x34e>
 800333a:	2308      	movs	r3, #8
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e06e      	b.n	800341e <UART_SetConfig+0x34e>
 8003340:	2310      	movs	r3, #16
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	bf00      	nop
 8003346:	e06a      	b.n	800341e <UART_SetConfig+0x34e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a25      	ldr	r2, [pc, #148]	; (80033e4 <UART_SetConfig+0x314>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d124      	bne.n	800339c <UART_SetConfig+0x2cc>
 8003352:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <UART_SetConfig+0x2fc>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003360:	d012      	beq.n	8003388 <UART_SetConfig+0x2b8>
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	d802      	bhi.n	800336e <UART_SetConfig+0x29e>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <UART_SetConfig+0x2ac>
 800336c:	e012      	b.n	8003394 <UART_SetConfig+0x2c4>
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003372:	d006      	beq.n	8003382 <UART_SetConfig+0x2b2>
 8003374:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003378:	d009      	beq.n	800338e <UART_SetConfig+0x2be>
 800337a:	e00b      	b.n	8003394 <UART_SetConfig+0x2c4>
 800337c:	2300      	movs	r3, #0
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e04d      	b.n	800341e <UART_SetConfig+0x34e>
 8003382:	2302      	movs	r3, #2
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e04a      	b.n	800341e <UART_SetConfig+0x34e>
 8003388:	2304      	movs	r3, #4
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e047      	b.n	800341e <UART_SetConfig+0x34e>
 800338e:	2308      	movs	r3, #8
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e044      	b.n	800341e <UART_SetConfig+0x34e>
 8003394:	2310      	movs	r3, #16
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	bf00      	nop
 800339a:	e040      	b.n	800341e <UART_SetConfig+0x34e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <UART_SetConfig+0x318>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d139      	bne.n	800341a <UART_SetConfig+0x34a>
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <UART_SetConfig+0x2fc>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b4:	d027      	beq.n	8003406 <UART_SetConfig+0x336>
 80033b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ba:	d817      	bhi.n	80033ec <UART_SetConfig+0x31c>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01c      	beq.n	80033fa <UART_SetConfig+0x32a>
 80033c0:	e027      	b.n	8003412 <UART_SetConfig+0x342>
 80033c2:	bf00      	nop
 80033c4:	efff69f3 	.word	0xefff69f3
 80033c8:	40011000 	.word	0x40011000
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40004400 	.word	0x40004400
 80033d4:	40004800 	.word	0x40004800
 80033d8:	40004c00 	.word	0x40004c00
 80033dc:	40005000 	.word	0x40005000
 80033e0:	40011400 	.word	0x40011400
 80033e4:	40007800 	.word	0x40007800
 80033e8:	40007c00 	.word	0x40007c00
 80033ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f0:	d006      	beq.n	8003400 <UART_SetConfig+0x330>
 80033f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033f6:	d009      	beq.n	800340c <UART_SetConfig+0x33c>
 80033f8:	e00b      	b.n	8003412 <UART_SetConfig+0x342>
 80033fa:	2300      	movs	r3, #0
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e00e      	b.n	800341e <UART_SetConfig+0x34e>
 8003400:	2302      	movs	r3, #2
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e00b      	b.n	800341e <UART_SetConfig+0x34e>
 8003406:	2304      	movs	r3, #4
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e008      	b.n	800341e <UART_SetConfig+0x34e>
 800340c:	2308      	movs	r3, #8
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e005      	b.n	800341e <UART_SetConfig+0x34e>
 8003412:	2310      	movs	r3, #16
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	bf00      	nop
 8003418:	e001      	b.n	800341e <UART_SetConfig+0x34e>
 800341a:	2310      	movs	r3, #16
 800341c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003426:	d17f      	bne.n	8003528 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003428:	7ffb      	ldrb	r3, [r7, #31]
 800342a:	2b08      	cmp	r3, #8
 800342c:	d85c      	bhi.n	80034e8 <UART_SetConfig+0x418>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <UART_SetConfig+0x364>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003459 	.word	0x08003459
 8003438:	08003479 	.word	0x08003479
 800343c:	08003499 	.word	0x08003499
 8003440:	080034e9 	.word	0x080034e9
 8003444:	080034b1 	.word	0x080034b1
 8003448:	080034e9 	.word	0x080034e9
 800344c:	080034e9 	.word	0x080034e9
 8003450:	080034e9 	.word	0x080034e9
 8003454:	080034d1 	.word	0x080034d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7fe fe22 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 800345c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	005a      	lsls	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	441a      	add	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	b29b      	uxth	r3, r3
 8003474:	61bb      	str	r3, [r7, #24]
        break;
 8003476:	e03a      	b.n	80034ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003478:	f7fe fe26 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 800347c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	005a      	lsls	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	b29b      	uxth	r3, r3
 8003494:	61bb      	str	r3, [r7, #24]
        break;
 8003496:	e02a      	b.n	80034ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	085a      	lsrs	r2, r3, #1
 800349e:	4b5f      	ldr	r3, [pc, #380]	; (800361c <UART_SetConfig+0x54c>)
 80034a0:	4413      	add	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6852      	ldr	r2, [r2, #4]
 80034a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	61bb      	str	r3, [r7, #24]
        break;
 80034ae:	e01e      	b.n	80034ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b0:	f7fe fd38 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 80034b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	005a      	lsls	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	61bb      	str	r3, [r7, #24]
        break;
 80034ce:	e00e      	b.n	80034ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	61bb      	str	r3, [r7, #24]
        break;
 80034e6:	e002      	b.n	80034ee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
        break;
 80034ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d916      	bls.n	8003522 <UART_SetConfig+0x452>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fa:	d212      	bcs.n	8003522 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f023 030f 	bic.w	r3, r3, #15
 8003504:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	b29b      	uxth	r3, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	b29a      	uxth	r2, r3
 8003512:	897b      	ldrh	r3, [r7, #10]
 8003514:	4313      	orrs	r3, r2
 8003516:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	897a      	ldrh	r2, [r7, #10]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	e070      	b.n	8003604 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
 8003526:	e06d      	b.n	8003604 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003528:	7ffb      	ldrb	r3, [r7, #31]
 800352a:	2b08      	cmp	r3, #8
 800352c:	d859      	bhi.n	80035e2 <UART_SetConfig+0x512>
 800352e:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <UART_SetConfig+0x464>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003559 	.word	0x08003559
 8003538:	08003577 	.word	0x08003577
 800353c:	08003595 	.word	0x08003595
 8003540:	080035e3 	.word	0x080035e3
 8003544:	080035ad 	.word	0x080035ad
 8003548:	080035e3 	.word	0x080035e3
 800354c:	080035e3 	.word	0x080035e3
 8003550:	080035e3 	.word	0x080035e3
 8003554:	080035cb 	.word	0x080035cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003558:	f7fe fda2 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 800355c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	085a      	lsrs	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	441a      	add	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	61bb      	str	r3, [r7, #24]
        break;
 8003574:	e038      	b.n	80035e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003576:	f7fe fda7 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 800357a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	085a      	lsrs	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	441a      	add	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	b29b      	uxth	r3, r3
 8003590:	61bb      	str	r3, [r7, #24]
        break;
 8003592:	e029      	b.n	80035e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	085a      	lsrs	r2, r3, #1
 800359a:	4b21      	ldr	r3, [pc, #132]	; (8003620 <UART_SetConfig+0x550>)
 800359c:	4413      	add	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6852      	ldr	r2, [r2, #4]
 80035a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	61bb      	str	r3, [r7, #24]
        break;
 80035aa:	e01d      	b.n	80035e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ac:	f7fe fcba 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 80035b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	085a      	lsrs	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	441a      	add	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	61bb      	str	r3, [r7, #24]
        break;
 80035c8:	e00e      	b.n	80035e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	61bb      	str	r3, [r7, #24]
        break;
 80035e0:	e002      	b.n	80035e8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
        break;
 80035e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b0f      	cmp	r3, #15
 80035ec:	d908      	bls.n	8003600 <UART_SetConfig+0x530>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d204      	bcs.n	8003600 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	e001      	b.n	8003604 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003610:	7dfb      	ldrb	r3, [r7, #23]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	01e84800 	.word	0x01e84800
 8003620:	00f42400 	.word	0x00f42400

08003624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01a      	beq.n	800373a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003722:	d10a      	bne.n	800373a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af02      	add	r7, sp, #8
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003776:	f7fd fd07 	bl	8001188 <HAL_GetTick>
 800377a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b08      	cmp	r3, #8
 8003788:	d10e      	bne.n	80037a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800378a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f82a 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e020      	b.n	80037ea <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d10e      	bne.n	80037d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f814 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e00a      	b.n	80037ea <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	e05d      	b.n	80038c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d059      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fd fcbc 	bl	8001188 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <UART_WaitOnFlagUntilTimeout+0x30>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11b      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003830:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e042      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02b      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003876:	d123      	bne.n	80038c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003880:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003890:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e00f      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d092      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = 0uL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
            uint32_t hclk = 60000000uL;
 80038f4:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <HAL_ETH_Init+0x134>)
 80038f6:	613b      	str	r3, [r7, #16]
            uint32_t err = ETH_SUCCESS;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]

            /* Check the ETH peripheral state */
            if( heth == NULL )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_ETH_Init+0x1e>
            {
                return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e086      	b.n	8003a14 <HAL_ETH_Init+0x12c>
            assert_param( IS_ETH_AUTONEGOTIATION( heth->Init.AutoNegotiation ) );
            assert_param( IS_ETH_RX_MODE( heth->Init.RxMode ) );
            assert_param( IS_ETH_CHECKSUM_MODE( heth->Init.ChecksumMode ) );
            assert_param( IS_ETH_MEDIA_INTERFACE( heth->Init.MediaInterface ) );

            if( heth->State == HAL_ETH_STATE_RESET )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_ETH_Init+0x30>
            {
                /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                HAL_ETH_MspInit( heth );
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fc fe7c 	bl	8000610 <HAL_ETH_MspInit>
            }

            /* Enable SYSCFG Clock */
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003918:	4b41      	ldr	r3, [pc, #260]	; (8003a20 <HAL_ETH_Init+0x138>)
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	4a40      	ldr	r2, [pc, #256]	; (8003a20 <HAL_ETH_Init+0x138>)
 800391e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003922:	6453      	str	r3, [r2, #68]	; 0x44
 8003924:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <HAL_ETH_Init+0x138>)
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]

            /* Select MII or RMII Mode*/
            SYSCFG->PMC &= ~( SYSCFG_PMC_MII_RMII_SEL );
 8003930:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <HAL_ETH_Init+0x13c>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <HAL_ETH_Init+0x13c>)
 8003936:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800393a:	6053      	str	r3, [r2, #4]
            SYSCFG->PMC |= ( uint32_t ) heth->Init.MediaInterface;
 800393c:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <HAL_ETH_Init+0x13c>)
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4937      	ldr	r1, [pc, #220]	; (8003a24 <HAL_ETH_Init+0x13c>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            /* Also enable EDFE: Enhanced descriptor format enable. */
            heth->Instance->DMABMR |= ETH_DMABMR_SR | ETH_DMABMR_EDE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 800395c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003960:	601a      	str	r2, [r3, #0]

            /* Wait for software reset */
            while( ( heth->Instance->DMABMR & ETH_DMABMR_SR ) != ( uint32_t ) RESET )
 8003962:	bf00      	nop
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f6      	bne.n	8003964 <HAL_ETH_Init+0x7c>
                /* If your program hangs here, please check the value of 'ipconfigUSE_RMII'. */
            }

            /*-------------------------------- MAC Initialization ----------------------*/
            /* Get the ETHERNET MACMIIAR value */
            tmpreg = heth->Instance->MACMIIAR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	617b      	str	r3, [r7, #20]
            /* Clear CSR Clock Range CR[2:0] bits */
            tmpreg &= ETH_MACMIIAR_CR_MASK;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f023 031c 	bic.w	r3, r3, #28
 8003984:	617b      	str	r3, [r7, #20]

            /* Get hclk frequency value (e.g. 168,000,000) */
            hclk = HAL_RCC_GetHCLKFreq();
 8003986:	f7fe fb7f 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 800398a:	6138      	str	r0, [r7, #16]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000uL ) && ( hclk < 35000000uL ) )
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <HAL_ETH_Init+0x140>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d908      	bls.n	80039a6 <HAL_ETH_Init+0xbe>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <HAL_ETH_Init+0x144>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d804      	bhi.n	80039a6 <HAL_ETH_Init+0xbe>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div16;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f043 0308 	orr.w	r3, r3, #8
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e027      	b.n	80039f6 <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 35000000uL ) && ( hclk < 60000000uL ) )
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4a20      	ldr	r2, [pc, #128]	; (8003a2c <HAL_ETH_Init+0x144>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d908      	bls.n	80039c0 <HAL_ETH_Init+0xd8>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <HAL_ETH_Init+0x148>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d804      	bhi.n	80039c0 <HAL_ETH_Init+0xd8>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div26;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f043 030c 	orr.w	r3, r3, #12
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	e01a      	b.n	80039f6 <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 60000000uL ) && ( hclk < 100000000uL ) )
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_ETH_Init+0x148>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d903      	bls.n	80039d0 <HAL_ETH_Init+0xe8>
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <HAL_ETH_Init+0x14c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d911      	bls.n	80039f4 <HAL_ETH_Init+0x10c>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
            }
            else if( ( hclk >= 100000000uL ) && ( hclk < 150000000uL ) )
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <HAL_ETH_Init+0x14c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d908      	bls.n	80039ea <HAL_ETH_Init+0x102>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <HAL_ETH_Init+0x150>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d804      	bhi.n	80039ea <HAL_ETH_Init+0x102>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div62;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e005      	b.n	80039f6 <HAL_ETH_Init+0x10e>
            }
            else /* ( ( hclk >= 150000000uL ) && ( hclk <= 183000000uL ) ) */
            {
                /* CSR Clock Range between 150-183 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div102;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f043 0310 	orr.w	r3, r3, #16
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e000      	b.n	80039f6 <HAL_ETH_Init+0x10e>
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
 80039f4:	bf00      	nop
            }

            /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
            heth->Instance->MACMIIAR = ( uint32_t ) tmpreg;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	611a      	str	r2, [r3, #16]

            /* Initialise the MACB and set all PHY properties */
            vMACBProbePhy();
 80039fe:	f00c ff47 	bl	8010890 <vMACBProbePhy>

            /* Config MAC and DMA */
            ETH_MACDMAConfig( heth, err );
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fadd 	bl	8003fc4 <ETH_MACDMAConfig>

            /* Set ETH HAL State to Ready */
            heth->State = HAL_ETH_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Return function status */
            return HAL_OK;
 8003a12:	2300      	movs	r3, #0
        }
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	03938700 	.word	0x03938700
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40013800 	.word	0x40013800
 8003a28:	01312cff 	.word	0x01312cff
 8003a2c:	02160ebf 	.word	0x02160ebf
 8003a30:	039386ff 	.word	0x039386ff
 8003a34:	05f5e0ff 	.word	0x05f5e0ff
 8003a38:	08f0d17f 	.word	0x08f0d17f

08003a3c <HAL_ETH_IRQHandler>:

/*#define ETH_DMA_ALL_INTS		ETH_DMA_IT_RBU | ETH_DMA_FLAG_T | ETH_DMA_FLAG_AIS */

        #define INT_MASK    ( ( uint32_t ) ~( ETH_DMA_IT_TBU ) )
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
            uint32_t dmasr;

            dmasr = heth->Instance->DMASR & ETH_DMA_ALL_INTS;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a4c:	4413      	add	r3, r2
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_ETH_IRQHandler+0x60>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
            heth->Instance->DMASR = dmasr;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a5e:	4413      	add	r3, r2
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	601a      	str	r2, [r3, #0]

            /* Frame received */
            if( ( dmasr & ( ETH_DMA_FLAG_R | ETH_DMA_IT_RBU ) ) != 0 )
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_ETH_IRQHandler+0x38>
            {
                /* Receive complete callback */
                HAL_ETH_RxCpltCallback( heth );
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f00c fb16 	bl	80100a0 <HAL_ETH_RxCpltCallback>
            }

            /* Frame transmitted */
            if( ( dmasr & ( ETH_DMA_FLAG_T ) ) != 0 )
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_ETH_IRQHandler+0x48>
            {
                /* Transfer complete callback */
                HAL_ETH_TxCpltCallback( heth );
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f00c fb3c 	bl	80100fc <HAL_ETH_TxCpltCallback>
            }

            /* ETH DMA Error */
            if( ( dmasr & ( ETH_DMA_FLAG_AIS ) ) != 0 )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_ETH_IRQHandler+0x58>
            {
                /* Ethernet Error callback */
                HAL_ETH_ErrorCallback( heth );
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f806 	bl	8003aa0 <HAL_ETH_ErrorCallback>
            }
        }
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	3801e7fb 	.word	0x3801e7fb

08003aa0 <HAL_ETH_ErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * heth )
        {
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_TxCpltCallback could be implemented in the user file
             */
            ( void ) heth;
        }
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_ETH_ReadPHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint16_t PHYReg,
                                                   uint32_t * RegValue )
        {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	460b      	mov	r3, r1
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0uL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0uL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_RD )
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b82      	cmp	r3, #130	; 0x82
 8003ad4:	d102      	bne.n	8003adc <HAL_ETH_ReadPHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e056      	b.n	8003b8a <HAL_ETH_ReadPHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_ETH_ReadPHYRegister+0x36>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e050      	b.n	8003b8c <HAL_ETH_ReadPHYRegister+0xd8>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

                /* Set ETH HAL State to BUSY_RD */
                heth->State = HAL_ETH_STATE_BUSY_RD;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2282      	movs	r2, #130	; 0x82
 8003af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f003 031c 	and.w	r3, r3, #28
 8003b08:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII address register value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address   */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8a1b      	ldrh	r3, [r3, #16]
 8003b0e:	02db      	lsls	r3, r3, #11
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 8003b18:	897b      	ldrh	r3, [r7, #10]
 8003b1a:	019b      	lsls	r3, r3, #6
 8003b1c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
                tmpreg &= ~ETH_MACMIIAR_MW;                                                   /* Set the read mode            */
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f023 0302 	bic.w	r3, r3, #2
 8003b2c:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit         */
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	61bb      	str	r3, [r7, #24]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 8003b3e:	f7fd fb23 	bl	8001188 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0uL )
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_ETH_ReadPHYRegister+0xb2>
                    {
                        /* Get MACMIIDR value */
                        *RegValue = ( uint32_t ) heth->Instance->MACMIIDR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
                        xResult = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	77fb      	strb	r3, [r7, #31]
                        break;
 8003b64:	e009      	b.n	8003b7a <HAL_ETH_ReadPHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_READ_TO )
 8003b66:	f7fd fb0f 	bl	8001188 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d3e6      	bcc.n	8003b44 <HAL_ETH_ReadPHYRegister+0x90>
                    {
                        xResult = HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            /* Return function status */
            return xResult;
 8003b8a:	7ffb      	ldrb	r3, [r7, #31]
        }
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_ETH_WritePHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint16_t PHYReg,
                                                    uint32_t RegValue )
        {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_WR )
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b42      	cmp	r3, #66	; 0x42
 8003bb4:	d102      	bne.n	8003bbc <HAL_ETH_WritePHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e056      	b.n	8003c6a <HAL_ETH_WritePHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_ETH_WritePHYRegister+0x36>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e050      	b.n	8003c6c <HAL_ETH_WritePHYRegister+0xd8>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

                /* Set ETH HAL State to BUSY_WR */
                heth->State = HAL_ETH_STATE_BUSY_WR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2242      	movs	r2, #66	; 0x42
 8003bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f003 031c 	and.w	r3, r3, #28
 8003be8:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII register address value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address */
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8a1b      	ldrh	r3, [r3, #16]
 8003bee:	02db      	lsls	r3, r3, #11
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 8003bf8:	897b      	ldrh	r3, [r7, #10]
 8003bfa:	019b      	lsls	r3, r3, #6
 8003bfc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MW;                                                    /* Set the write mode */
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit */
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]

                /* Give the value to the MII data register */
                heth->Instance->MACMIIDR = ( uint16_t ) RegValue;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	615a      	str	r2, [r3, #20]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 8003c28:	f7fd faae 	bl	8001188 <HAL_GetTick>
 8003c2c:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0ul )
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <HAL_ETH_WritePHYRegister+0xb2>
                    {
                        xResult = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	77fb      	strb	r3, [r7, #31]
                        break;
 8003c44:	e009      	b.n	8003c5a <HAL_ETH_WritePHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_WRITE_TO )
 8003c46:	f7fd fa9f 	bl	8001188 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d3eb      	bcc.n	8003c2e <HAL_ETH_WritePHYRegister+0x9a>
                    {
                        xResult = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            /* Return function status */
            return xResult;
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
        }
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start( ETH_HandleTypeDef * heth )
        {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_ETH_Start+0x16>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e01f      	b.n	8003cca <HAL_ETH_Start+0x56>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Enable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionEnable( heth );
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fb62 	bl	8004364 <ETH_MACTransmissionEnable>

            /* Enable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionEnable( heth );
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fb83 	bl	80043ac <ETH_MACReceptionEnable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fbfe 	bl	80044a8 <ETH_FlushTransmitFIFO>

            /* Start DMA transmission */
            ETH_DMATransmissionEnable( heth );
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fba3 	bl	80043f8 <ETH_DMATransmissionEnable>

            /* Start DMA reception */
            ETH_DMAReceptionEnable( heth );
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fbcc 	bl	8004450 <ETH_DMAReceptionEnable>

            /* Set the ETH state to READY*/
            heth->State = HAL_ETH_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
        }
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_ETH_Stop>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop( ETH_HandleTypeDef * heth )
        {
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ETH_Stop+0x16>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e01f      	b.n	8003d28 <HAL_ETH_Stop+0x56>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Stop DMA transmission */
            ETH_DMATransmissionDisable( heth );
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fb93 	bl	8004424 <ETH_DMATransmissionDisable>

            /* Stop DMA reception */
            ETH_DMAReceptionDisable( heth );
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fbbc 	bl	800447c <ETH_DMAReceptionDisable>

            /* Disable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionDisable( heth );
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fb64 	bl	80043d2 <ETH_MACReceptionDisable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fbcc 	bl	80044a8 <ETH_FlushTransmitFIFO>

            /* Disable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionDisable( heth );
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fb39 	bl	8004388 <ETH_MACTransmissionDisable>

            /* Set the ETH state*/
            heth->State = HAL_ETH_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 8003d26:	2300      	movs	r3, #0
        }
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <vRegisterDelay>:

        static void vRegisterDelay()
        {
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
             * 100 Mhz = 160 loops
             *  84 Mhz = 134 loops
             */
        #define WAIT_TIME_NS    1600uL          /* 1.6 microseconds */
        #define CPU_MAX_FREQ    SystemCoreClock /* 84, 100, 168 or 180 MHz */
            uint32_t NOP_COUNT = ( WAIT_TIME_NS * ( CPU_MAX_FREQ / 1000uL ) ) / 1000000uL;
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <vRegisterDelay+0x44>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a0f      	ldr	r2, [pc, #60]	; (8003d78 <vRegisterDelay+0x48>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <vRegisterDelay+0x4c>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	0c9b      	lsrs	r3, r3, #18
 8003d52:	603b      	str	r3, [r7, #0]

            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	e003      	b.n	8003d62 <vRegisterDelay+0x32>
            {
                __NOP();
 8003d5a:	bf00      	nop
            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f8      	bne.n	8003d5a <vRegisterDelay+0x2a>
            }
        }
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	20000000 	.word	0x20000000
 8003d78:	10624dd3 	.word	0x10624dd3
 8003d7c:	431bde83 	.word	0x431bde83

08003d80 <prvWriteMACFCR>:

        static void prvWriteMACFCR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACFCR = ulValue;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	619a      	str	r2, [r3, #24]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACFCR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]

            vRegisterDelay();
 8003d98:	f7ff ffca 	bl	8003d30 <vRegisterDelay>

            heth->Instance->MACFCR = ulValue;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	619a      	str	r2, [r3, #24]
        }
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <prvWriteDMAOMR>:

        static void prvWriteDMAOMR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->DMAOMR = ulValue;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	f241 0318 	movw	r3, #4120	; 0x1018
 8003dbe:	4413      	add	r3, r2
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	601a      	str	r2, [r3, #0]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->DMAOMR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	f241 0318 	movw	r3, #4120	; 0x1018
 8003dcc:	4413      	add	r3, r2
 8003dce:	681b      	ldr	r3, [r3, #0]

            vRegisterDelay();
 8003dd0:	f7ff ffae 	bl	8003d30 <vRegisterDelay>

            heth->Instance->DMAOMR = ulValue;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	f241 0318 	movw	r3, #4120	; 0x1018
 8003ddc:	4413      	add	r3, r2
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	601a      	str	r2, [r3, #0]
        }
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <prvWriteMACCR>:

        static void prvWriteMACCR( ETH_HandleTypeDef * heth,
                                   uint32_t ulValue )
        {
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACCR = ulValue;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	601a      	str	r2, [r3, #0]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]

            vRegisterDelay();
 8003e02:	f7ff ff95 	bl	8003d30 <vRegisterDelay>

            heth->Instance->MACCR = ulValue;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	601a      	str	r2, [r3, #0]
        }
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_ETH_ConfigMAC>:
 * @param  macconf: MAC Configuration structure
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ConfigMAC( ETH_HandleTypeDef * heth,
                                             ETH_MACInitTypeDef * macconf )
        {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
            uint32_t tmpreg = 0uL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]

            /* Process Locked */
            __HAL_LOCK( heth );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_ETH_ConfigMAC+0x1c>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0c1      	b.n	8003fb8 <HAL_ETH_ConfigMAC+0x1a0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            assert_param( IS_ETH_SPEED( heth->Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( heth->Init.DuplexMode ) );

            if( macconf != NULL )
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8099 	beq.w	8003f7e <HAL_ETH_ConfigMAC+0x166>
                assert_param( IS_ETH_VLAN_TAG_COMPARISON( macconf->VLANTagComparison ) );
                assert_param( IS_ETH_VLAN_TAG_IDENTIFIER( macconf->VLANTagIdentifier ) );

                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]
                /* Clear WD, PCE, PS, TE and RE bits */
                tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4b5a      	ldr	r3, [pc, #360]	; (8003fc0 <HAL_ETH_ConfigMAC+0x1a8>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) (
                    macconf->Watchdog |
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
                    macconf->Jabber |
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
                    macconf->Watchdog |
 8003e64:	431a      	orrs	r2, r3
                    macconf->InterFrameGap |
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
                    macconf->Jabber |
 8003e6a:	431a      	orrs	r2, r3
                    macconf->CarrierSense |
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
                    macconf->InterFrameGap |
 8003e70:	431a      	orrs	r2, r3
                    heth->Init.Speed |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
                    macconf->CarrierSense |
 8003e76:	431a      	orrs	r2, r3
                    macconf->ReceiveOwn |
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
                    heth->Init.Speed |
 8003e7c:	431a      	orrs	r2, r3
                    macconf->LoopbackMode |
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
                    macconf->ReceiveOwn |
 8003e82:	431a      	orrs	r2, r3
                    heth->Init.DuplexMode |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
                    macconf->LoopbackMode |
 8003e88:	431a      	orrs	r2, r3
                    macconf->ChecksumOffload |
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
                    heth->Init.DuplexMode |
 8003e8e:	431a      	orrs	r2, r3
                    macconf->RetryTransmission |
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
                    macconf->ChecksumOffload |
 8003e94:	431a      	orrs	r2, r3
                    macconf->AutomaticPadCRCStrip |
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
                    macconf->RetryTransmission |
 8003e9a:	431a      	orrs	r2, r3
                    macconf->BackOffLimit |
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    macconf->AutomaticPadCRCStrip |
 8003ea0:	431a      	orrs	r2, r3
                    macconf->DeferralCheck );
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    macconf->BackOffLimit |
 8003ea6:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) (
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff9a 	bl	8003dea <prvWriteMACCR>

                /*----------------------- ETHERNET MACFFR Configuration --------------------*/
                /* Write to ETHERNET MACFFR */
                heth->Instance->MACFFR = ( uint32_t ) (
                    macconf->ReceiveAll |
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                    macconf->SourceAddrFilter |
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    macconf->ReceiveAll |
 8003ebe:	431a      	orrs	r2, r3
                    macconf->PassControlFrames |
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    macconf->SourceAddrFilter |
 8003ec4:	431a      	orrs	r2, r3
                    macconf->BroadcastFramesReception |
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    macconf->PassControlFrames |
 8003eca:	431a      	orrs	r2, r3
                    macconf->DestinationAddrFilter |
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    macconf->BroadcastFramesReception |
 8003ed0:	431a      	orrs	r2, r3
                    macconf->PromiscuousMode |
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                    macconf->DestinationAddrFilter |
 8003ed6:	431a      	orrs	r2, r3
                    macconf->MulticastFramesFilter |
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    macconf->PromiscuousMode |
 8003edc:	ea42 0103 	orr.w	r1, r2, r3
                    macconf->UnicastFramesFilter );
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                heth->Instance->MACFFR = ( uint32_t ) (
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
                    macconf->MulticastFramesFilter |
 8003ee8:	430a      	orrs	r2, r1
                heth->Instance->MACFFR = ( uint32_t ) (
 8003eea:	605a      	str	r2, [r3, #4]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACFFR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 8003ef4:	f7ff ff1c 	bl	8003d30 <vRegisterDelay>
                heth->Instance->MACFFR = tmpreg;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]

                /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
                /* Write to ETHERNET MACHTHR */
                heth->Instance->MACHTHR = ( uint32_t ) macconf->HashTableHigh;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f08:	609a      	str	r2, [r3, #8]

                /* Write to ETHERNET MACHTLR */
                heth->Instance->MACHTLR = ( uint32_t ) macconf->HashTableLow;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f12:	60da      	str	r2, [r3, #12]
                /*----------------------- ETHERNET MACFCR Configuration --------------------*/

                /* Get the ETHERNET MACFCR value */
                tmpreg = heth->Instance->MACFCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	60fb      	str	r3, [r7, #12]
                /* Clear xx bits */
                tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003f22:	4013      	ands	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( (
                                             macconf->PauseTime << 16 ) |
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	041a      	lsls	r2, r3, #16
                                         macconf->ZeroQuantaPause |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                                             macconf->PauseTime << 16 ) |
 8003f30:	431a      	orrs	r2, r3
                                         macconf->PauseLowThreshold |
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                                         macconf->ZeroQuantaPause |
 8003f36:	431a      	orrs	r2, r3
                                         macconf->UnicastPauseFrameDetect |
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                                         macconf->PauseLowThreshold |
 8003f3c:	431a      	orrs	r2, r3
                                         macconf->ReceiveFlowControl |
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                                         macconf->UnicastPauseFrameDetect |
 8003f42:	431a      	orrs	r2, r3
                                         macconf->TransmitFlowControl );
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                         macconf->ReceiveFlowControl |
 8003f48:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) ( (
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACFCR */
                prvWriteMACFCR( heth, tmpreg );
 8003f50:	68f9      	ldr	r1, [r7, #12]
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ff14 	bl	8003d80 <prvWriteMACFCR>

                /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                                           macconf->VLANTagIdentifier );
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACVLANTR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 8003f70:	f7ff fede 	bl	8003d30 <vRegisterDelay>
                heth->Instance->MACVLANTR = tmpreg;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	61da      	str	r2, [r3, #28]
 8003f7c:	e013      	b.n	8003fa6 <HAL_ETH_ConfigMAC+0x18e>
            }
            else /* macconf == NULL : here we just configure Speed and Duplex mode */
            {
                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]

                /* Clear FES and DM bits */
                tmpreg &= ~( ( uint32_t ) 0x00004800uL );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003f8c:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( heth->Init.Speed | heth->Init.DuplexMode );
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ff22 	bl	8003dea <prvWriteMACCR>
            }

            /* Set the ETH state to Ready */
            heth->State = HAL_ETH_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
        }
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	ff20810f 	.word	0xff20810f

08003fc4 <ETH_MACDMAConfig>:
 * @param  err: Ethernet Init error
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth,
                                      uint32_t err )
        {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b0b0      	sub	sp, #192	; 0xc0
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
            ETH_MACInitTypeDef macinit;
            ETH_DMAInitTypeDef dmainit;
            uint32_t tmpreg = 0uL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            if( err != ETH_SUCCESS ) /* Auto-negotiation failed */
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <ETH_MACDMAConfig+0x26>
            {
                /* Set Ethernet duplex mode to Full-duplex */
                heth->Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe0:	60da      	str	r2, [r3, #12]

                /* Set Ethernet speed to 100M */
                heth->Init.Speed = ETH_SPEED_100M;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fe8:	609a      	str	r2, [r3, #8]
            }

            /* Ethernet MAC default initialization **************************************/
            macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	64bb      	str	r3, [r7, #72]	; 0x48
            macinit.Jabber = ETH_JABBER_ENABLE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
            macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	653b      	str	r3, [r7, #80]	; 0x50
            macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	657b      	str	r3, [r7, #84]	; 0x54
            macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	65bb      	str	r3, [r7, #88]	; 0x58
            macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	65fb      	str	r3, [r7, #92]	; 0x5c

            if( heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <ETH_MACDMAConfig+0x4e>
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800400a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800400e:	663b      	str	r3, [r7, #96]	; 0x60
 8004010:	e001      	b.n	8004016 <ETH_MACDMAConfig+0x52>
            }
            else
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004012:	2300      	movs	r3, #0
 8004014:	663b      	str	r3, [r7, #96]	; 0x60
            }

            macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800401a:	667b      	str	r3, [r7, #100]	; 0x64
            macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800401c:	2300      	movs	r3, #0
 800401e:	66bb      	str	r3, [r7, #104]	; 0x68
            macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004020:	2300      	movs	r3, #0
 8004022:	66fb      	str	r3, [r7, #108]	; 0x6c
            macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	673b      	str	r3, [r7, #112]	; 0x70
            macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004028:	2300      	movs	r3, #0
 800402a:	677b      	str	r3, [r7, #116]	; 0x74
            macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	67bb      	str	r3, [r7, #120]	; 0x78
            macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004030:	2340      	movs	r3, #64	; 0x40
 8004032:	67fb      	str	r3, [r7, #124]	; 0x7c
            macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800403a:	2300      	movs	r3, #0
 800403c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            macinit.HashTableHigh = 0x0uL;
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            macinit.HashTableLow = 0x0uL;
 8004058:	2300      	movs	r3, #0
 800405a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            macinit.PauseTime = 0x0uL;
 800405e:	2300      	movs	r3, #0
 8004060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800406a:	2300      	movs	r3, #0
 800406c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            macinit.VLANTagIdentifier = 0x0uL;
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

            /*------------------------ ETHERNET MACCR Configuration --------------------*/
            /* Get the ETHERNET MACCR value */
            tmpreg = heth->Instance->MACCR;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear WD, PCE, PS, TE and RE bits */
            tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004098:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800409c:	4b91      	ldr	r3, [pc, #580]	; (80042e4 <ETH_MACDMAConfig+0x320>)
 800409e:	4013      	ands	r3, r2
 80040a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the IPCO bit according to ETH ChecksumOffload value */
            /* Set the DR bit according to ETH RetryTransmission value */
            /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
            /* Set the BL bit according to ETH BackOffLimit value */
            /* Set the DC bit according to ETH DeferralCheck value */
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 80040a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                                     macinit.Jabber |
 80040a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 80040a8:	431a      	orrs	r2, r3
                                     macinit.InterFrameGap |
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                                     macinit.Jabber |
 80040ac:	431a      	orrs	r2, r3
                                     macinit.CarrierSense |
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                                     macinit.InterFrameGap |
 80040b0:	431a      	orrs	r2, r3
                                     heth->Init.Speed |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
                                     macinit.CarrierSense |
 80040b6:	431a      	orrs	r2, r3
                                     macinit.ReceiveOwn |
 80040b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                                     heth->Init.Speed |
 80040ba:	431a      	orrs	r2, r3
                                     macinit.LoopbackMode |
 80040bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                                     macinit.ReceiveOwn |
 80040be:	431a      	orrs	r2, r3
                                     heth->Init.DuplexMode |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
                                     macinit.LoopbackMode |
 80040c4:	431a      	orrs	r2, r3
                                     macinit.ChecksumOffload |
 80040c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                                     heth->Init.DuplexMode |
 80040c8:	431a      	orrs	r2, r3
                                     macinit.RetryTransmission |
 80040ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                                     macinit.ChecksumOffload |
 80040cc:	431a      	orrs	r2, r3
                                     macinit.AutomaticPadCRCStrip |
 80040ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                                     macinit.RetryTransmission |
 80040d0:	431a      	orrs	r2, r3
                                     macinit.BackOffLimit |
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                                     macinit.AutomaticPadCRCStrip |
 80040d4:	431a      	orrs	r2, r3
                                     macinit.DeferralCheck );
 80040d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                                     macinit.BackOffLimit |
 80040d8:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 80040da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET MACCR */
            prvWriteMACCR( heth, tmpreg );
 80040e4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff fe7e 	bl	8003dea <prvWriteMACCR>
            /* Set the DAIF bit according to ETH DestinationAddrFilter value */
            /* Set the PR bit according to ETH PromiscuousMode value */
            /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
            /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
            /* Write to ETHERNET MACFFR */
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 80040ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                                    macinit.SourceAddrFilter |
 80040f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 80040f2:	431a      	orrs	r2, r3
                                                    macinit.PassControlFrames |
 80040f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                                    macinit.SourceAddrFilter |
 80040f6:	431a      	orrs	r2, r3
                                                    macinit.BroadcastFramesReception |
 80040f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                                    macinit.PassControlFrames |
 80040fc:	431a      	orrs	r2, r3
                                                    macinit.DestinationAddrFilter |
 80040fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                                    macinit.BroadcastFramesReception |
 8004102:	431a      	orrs	r2, r3
                                                    macinit.PromiscuousMode |
 8004104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                                    macinit.DestinationAddrFilter |
 8004108:	431a      	orrs	r2, r3
                                                    macinit.MulticastFramesFilter |
 800410a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                                    macinit.PromiscuousMode |
 800410e:	ea42 0103 	orr.w	r1, r2, r3
                                                    macinit.UnicastFramesFilter );
 8004112:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
                                                    macinit.MulticastFramesFilter |
 800411a:	430a      	orrs	r2, r1
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 800411c:	605a      	str	r2, [r3, #4]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACFFR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 8004128:	f7ff fe02 	bl	8003d30 <vRegisterDelay>
            heth->Instance->MACFFR = tmpreg;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004134:	605a      	str	r2, [r3, #4]

            /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
            /* Write to ETHERNET MACHTHR */
            heth->Instance->MACHTHR = ( uint32_t ) macinit.HashTableHigh;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800413e:	609a      	str	r2, [r3, #8]

            /* Write to ETHERNET MACHTLR */
            heth->Instance->MACHTLR = ( uint32_t ) macinit.HashTableLow;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004148:	60da      	str	r2, [r3, #12]
            /*----------------------- ETHERNET MACFCR Configuration -------------------*/

            /* Get the ETHERNET MACFCR value */
            tmpreg = heth->Instance->MACFCR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004154:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004158:	f64f 7341 	movw	r3, #65345	; 0xff41
 800415c:	4013      	ands	r3, r2
 800415e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
            /* Set the PLT bit according to ETH PauseLowThreshold value */
            /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
            /* Set the RFE bit according to ETH ReceiveFlowControl value */
            /* Set the TFE bit according to ETH TransmitFlowControl value */
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 8004162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004166:	041a      	lsls	r2, r3, #16
                                     macinit.ZeroQuantaPause |
 8004168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 800416c:	431a      	orrs	r2, r3
                                     macinit.PauseLowThreshold |
 800416e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                                     macinit.ZeroQuantaPause |
 8004172:	431a      	orrs	r2, r3
                                     macinit.UnicastPauseFrameDetect |
 8004174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                                     macinit.PauseLowThreshold |
 8004178:	431a      	orrs	r2, r3
                                     macinit.ReceiveFlowControl |
 800417a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                                     macinit.UnicastPauseFrameDetect |
 800417e:	431a      	orrs	r2, r3
                                     macinit.TransmitFlowControl );
 8004180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                                     macinit.ReceiveFlowControl |
 8004184:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 8004186:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET MACFCR */
            prvWriteMACFCR( heth, tmpreg );
 8004190:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff fdf3 	bl	8003d80 <prvWriteMACFCR>

            /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
            /* Set the ETV bit according to ETH VLANTagComparison value */
            /* Set the VL bit according to ETH VLANTagIdentifier value */
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 800419a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                                       macinit.VLANTagIdentifier );
 800419e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	61da      	str	r2, [r3, #28]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACVLANTR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 80041b4:	f7ff fdbc 	bl	8003d30 <vRegisterDelay>
            heth->Instance->MACVLANTR = tmpreg;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041c0:	61da      	str	r2, [r3, #28]

            /* Ethernet DMA default initialization ************************************/
            dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
            dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80041c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ca:	60fb      	str	r3, [r7, #12]
            dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
            dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80041d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041d4:	617b      	str	r3, [r7, #20]
            dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
            dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
            dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80041de:	2300      	movs	r3, #0
 80041e0:	623b      	str	r3, [r7, #32]
            dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
            dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80041e6:	2304      	movs	r3, #4
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
            dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80041ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80041f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
            dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
            dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80041fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004200:	63bb      	str	r3, [r7, #56]	; 0x38
            dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	63fb      	str	r3, [r7, #60]	; 0x3c
            dmainit.DescriptorSkipLength = 0x0uL;
 8004206:	2300      	movs	r3, #0
 8004208:	643b      	str	r3, [r7, #64]	; 0x40
            dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800420a:	2300      	movs	r3, #0
 800420c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Get the ETHERNET DMAOMR value */
            tmpreg = heth->Instance->DMAOMR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f241 0318 	movw	r3, #4120	; 0x1018
 8004216:	4413      	add	r3, r2
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800421e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <ETH_MACDMAConfig+0x324>)
 8004224:	4013      	ands	r3, r2
 8004226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the TTC bit according to ETH TransmitThresholdControl value */
            /* Set the FEF bit according to ETH ForwardErrorFrames value */
            /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
            /* Set the RTC bit according to ETH ReceiveThresholdControl value */
            /* Set the OSF bit according to ETH SecondFrameOperate value */
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 800422a:	68ba      	ldr	r2, [r7, #8]
                                     dmainit.ReceiveStoreForward |
 800422c:	68fb      	ldr	r3, [r7, #12]
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 800422e:	431a      	orrs	r2, r3
                                     dmainit.FlushReceivedFrame |
 8004230:	693b      	ldr	r3, [r7, #16]
                                     dmainit.ReceiveStoreForward |
 8004232:	431a      	orrs	r2, r3
                                     dmainit.TransmitStoreForward |
 8004234:	697b      	ldr	r3, [r7, #20]
                                     dmainit.FlushReceivedFrame |
 8004236:	431a      	orrs	r2, r3
                                     dmainit.TransmitThresholdControl |
 8004238:	69bb      	ldr	r3, [r7, #24]
                                     dmainit.TransmitStoreForward |
 800423a:	431a      	orrs	r2, r3
                                     dmainit.ForwardErrorFrames |
 800423c:	69fb      	ldr	r3, [r7, #28]
                                     dmainit.TransmitThresholdControl |
 800423e:	431a      	orrs	r2, r3
                                     dmainit.ForwardUndersizedGoodFrames |
 8004240:	6a3b      	ldr	r3, [r7, #32]
                                     dmainit.ForwardErrorFrames |
 8004242:	431a      	orrs	r2, r3
                                     dmainit.ReceiveThresholdControl |
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                                     dmainit.ForwardUndersizedGoodFrames |
 8004246:	431a      	orrs	r2, r3
                                     dmainit.SecondFrameOperate );
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                     dmainit.ReceiveThresholdControl |
 800424a:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 800424c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET DMAOMR */
            prvWriteDMAOMR( heth, tmpreg );
 8004256:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fda6 	bl	8003dac <prvWriteDMAOMR>
            /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
            /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
            /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
            /* Set the DSL bit according to ETH DesciptorSkipLength value */
            /* Set the PR and DA bits according to ETH DMAArbitration value */
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 8004260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                                    dmainit.FixedBurst |
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 8004264:	431a      	orrs	r2, r3
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                    dmainit.FixedBurst |
 8004268:	431a      	orrs	r2, r3
                                                    dmainit.TxDMABurstLength |
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800426c:	431a      	orrs	r2, r3
                                                    dmainit.EnhancedDescriptorFormat |
 800426e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                                    dmainit.TxDMABurstLength |
 8004270:	431a      	orrs	r2, r3
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 8004272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004274:	009b      	lsls	r3, r3, #2
                                                    dmainit.EnhancedDescriptorFormat |
 8004276:	431a      	orrs	r2, r3
                                                    dmainit.DMAArbitration |
 8004278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 800427a:	431a      	orrs	r2, r3
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004288:	601a      	str	r2, [r3, #0]
                                                    ETH_DMABMR_USP ); /* Enable use of separate PBL for Rx and Tx */

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->DMABMR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 8004298:	f7ff fd4a 	bl	8003d30 <vRegisterDelay>
            heth->Instance->DMABMR = tmpreg;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042a8:	601a      	str	r2, [r3, #0]

            if( heth->Init.RxMode == ETH_RXINTERRUPT_MODE )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10d      	bne.n	80042ce <ETH_MACDMAConfig+0x30a>
            {
                /* Enable the Ethernet Rx Interrupt */
                __HAL_ETH_DMA_ENABLE_IT( ( heth ), ETH_DMA_IT_NIS | ETH_DMA_IT_R );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	f241 031c 	movw	r3, #4124	; 0x101c
 80042ba:	4413      	add	r3, r2
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6811      	ldr	r1, [r2, #0]
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <ETH_MACDMAConfig+0x328>)
 80042c4:	431a      	orrs	r2, r3
 80042c6:	f241 031c 	movw	r3, #4124	; 0x101c
 80042ca:	440b      	add	r3, r1
 80042cc:	601a      	str	r2, [r3, #0]
            }

            /* Initialize MAC address in ethernet MAC */
            ETH_MACAddressConfig( heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr );
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	461a      	mov	r2, r3
 80042d4:	2100      	movs	r1, #0
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f80a 	bl	80042f0 <ETH_MACAddressConfig>
        }
 80042dc:	bf00      	nop
 80042de:	37c0      	adds	r7, #192	; 0xc0
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	ff20810f 	.word	0xff20810f
 80042e8:	f8de3f23 	.word	0xf8de3f23
 80042ec:	00010040 	.word	0x00010040

080042f0 <ETH_MACAddressConfig>:
 * @retval HAL status
 */
        static void ETH_MACAddressConfig( ETH_HandleTypeDef * heth,
                                          uint32_t MacAddr,
                                          uint8_t * Addr )
        {
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
            /* Check the parameters */
            assert_param( IS_ETH_MAC_ADDRESS0123( MacAddr ) );

            /* Calculate the selected MAC address high register */
            /* Register ETH_MACA0HR: Bit 31 MO: Always 1. */
            tmpreg = 0x80000000uL | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3305      	adds	r3, #5
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	3204      	adds	r2, #4
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004310:	617b      	str	r3, [r7, #20]
            /* Load the selected MAC address high register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + MacAddr ) ) ) = tmpreg;
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <ETH_MACAddressConfig+0x6c>)
 8004316:	4413      	add	r3, r2
 8004318:	461a      	mov	r2, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6013      	str	r3, [r2, #0]
            /* Calculate the selected MAC address low register */
            tmpreg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) Addr[ 1 ] << 8 ) | Addr[ 0 ];
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3303      	adds	r3, #3
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	061a      	lsls	r2, r3, #24
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3302      	adds	r3, #2
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3301      	adds	r3, #1
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	4313      	orrs	r3, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

            /* Load the selected MAC address low register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + MacAddr ) ) ) = tmpreg;
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <ETH_MACAddressConfig+0x70>)
 8004346:	4413      	add	r3, r2
 8004348:	461a      	mov	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	6013      	str	r3, [r2, #0]
        }
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40028040 	.word	0x40028040
 8004360:	40028044 	.word	0x40028044

08004364 <ETH_MACTransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionEnable( ETH_HandleTypeDef * heth )
        {
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_TE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f043 0308 	orr.w	r3, r3, #8
 8004376:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fd35 	bl	8003dea <prvWriteMACCR>
        }
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <ETH_MACTransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionDisable( ETH_HandleTypeDef * heth )
        {
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_TE );
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 0308 	bic.w	r3, r3, #8
 800439a:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 800439c:	68f9      	ldr	r1, [r7, #12]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fd23 	bl	8003dea <prvWriteMACCR>
        }
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <ETH_MACReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionEnable( ETH_HandleTypeDef * heth )
        {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_RE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f043 0304 	orr.w	r3, r3, #4
 80043be:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fd10 	bl	8003dea <prvWriteMACCR>
        }
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <ETH_MACReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionDisable( ETH_HandleTypeDef * heth )
        {
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_RE );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 0304 	bic.w	r3, r3, #4
 80043e4:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fcfd 	bl	8003dea <prvWriteMACCR>
        }
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <ETH_DMATransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionEnable( ETH_HandleTypeDef * heth )
        {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
            /* Enable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_ST;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	f241 0318 	movw	r3, #4120	; 0x1018
 8004408:	4413      	add	r3, r2
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004410:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fcc8 	bl	8003dac <prvWriteDMAOMR>
        }
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <ETH_DMATransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionDisable( ETH_HandleTypeDef * heth )
        {
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
            /* Disable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_ST );
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	f241 0318 	movw	r3, #4120	; 0x1018
 8004434:	4413      	add	r3, r2
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800443c:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff fcb2 	bl	8003dac <prvWriteDMAOMR>
        }
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <ETH_DMAReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionEnable( ETH_HandleTypeDef * heth )
        {
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
            /* Enable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_SR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004460:	4413      	add	r3, r2
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fc9c 	bl	8003dac <prvWriteDMAOMR>
        }
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <ETH_DMAReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionDisable( ETH_HandleTypeDef * heth )
        {
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
            /* Disable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_SR );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	f241 0318 	movw	r3, #4120	; 0x1018
 800448c:	4413      	add	r3, r2
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 0302 	bic.w	r3, r3, #2
 8004494:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fc86 	bl	8003dac <prvWriteDMAOMR>
        }
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <ETH_FlushTransmitFIFO>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_FlushTransmitFIFO( ETH_HandleTypeDef * heth )
        {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
            /* Set the Flush Transmit FIFO bit */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_FTF;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80044b8:	4413      	add	r3, r2
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c0:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4619      	mov	r1, r3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fc70 	bl	8003dac <prvWriteDMAOMR>
        }
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80044da:	201c      	movs	r0, #28
 80044dc:	f002 fd9c 	bl	8007018 <pvPortMalloc>
 80044e0:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f9be 	bl	8004874 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80044f8:	687b      	ldr	r3, [r7, #4]
    }
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	; 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
    EventBits_t uxReturn, uxControlBits = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 800451a:	2300      	movs	r3, #0
 800451c:	623b      	str	r3, [r7, #32]

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <xEventGroupWaitBits+0x2a>
 8004524:	4951      	ldr	r1, [pc, #324]	; (800466c <xEventGroupWaitBits+0x168>)
 8004526:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800452a:	f7fc fb45 	bl	8000bb8 <vAssertCalled>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <xEventGroupWaitBits+0x3e>
 8004538:	494c      	ldr	r1, [pc, #304]	; (800466c <xEventGroupWaitBits+0x168>)
 800453a:	f240 1049 	movw	r0, #329	; 0x149
 800453e:	f7fc fb3b 	bl	8000bb8 <vAssertCalled>
    configASSERT( uxBitsToWaitFor != 0 );
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <xEventGroupWaitBits+0x4e>
 8004548:	4948      	ldr	r1, [pc, #288]	; (800466c <xEventGroupWaitBits+0x168>)
 800454a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800454e:	f7fc fb33 	bl	8000bb8 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004552:	f001 ff37 	bl	80063c4 <xTaskGetSchedulerState>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <xEventGroupWaitBits+0x5e>
 800455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <xEventGroupWaitBits+0x62>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xEventGroupWaitBits+0x64>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <xEventGroupWaitBits+0x72>
 800456c:	493f      	ldr	r1, [pc, #252]	; (800466c <xEventGroupWaitBits+0x168>)
 800456e:	f240 104d 	movw	r0, #333	; 0x14d
 8004572:	f7fc fb21 	bl	8000bb8 <vAssertCalled>
        }
    #endif

    vTaskSuspendAll();
 8004576:	f001 fac9 	bl	8005b0c <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	61fb      	str	r3, [r7, #28]

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	69f8      	ldr	r0, [r7, #28]
 8004586:	f000 f953 	bl	8004830 <prvTestWaitCondition>
 800458a:	61b8      	str	r0, [r7, #24]

        if( xWaitConditionMet != pdFALSE )
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00e      	beq.n	80045b0 <xEventGroupWaitBits+0xac>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTicksToWait = ( TickType_t ) 0;
 8004596:	2300      	movs	r3, #0
 8004598:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d028      	beq.n	80045f2 <xEventGroupWaitBits+0xee>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	401a      	ands	r2, r3
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e020      	b.n	80045f2 <xEventGroupWaitBits+0xee>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <xEventGroupWaitBits+0xbc>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTimeoutOccurred = pdTRUE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	e018      	b.n	80045f2 <xEventGroupWaitBits+0xee>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <xEventGroupWaitBits+0xca>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <xEventGroupWaitBits+0xd8>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1d18      	adds	r0, r3, #4
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	4313      	orrs	r3, r2
 80045e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e8:	4619      	mov	r1, r3
 80045ea:	f001 fc75 	bl	8005ed8 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 80045f2:	f001 fa99 	bl	8005b28 <xTaskResumeAll>
 80045f6:	6178      	str	r0, [r7, #20]

    if( xTicksToWait != ( TickType_t ) 0 )
 80045f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d031      	beq.n	8004662 <xEventGroupWaitBits+0x15e>
    {
        if( xAlreadyYielded == pdFALSE )
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <xEventGroupWaitBits+0x110>
        {
            portYIELD_WITHIN_API();
 8004604:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <xEventGroupWaitBits+0x16c>)
 8004606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8004614:	f002 f85e 	bl	80066d4 <uxTaskResetEventItemValue>
 8004618:	62f8      	str	r0, [r7, #44]	; 0x2c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11a      	bne.n	800465a <xEventGroupWaitBits+0x156>
        {
            taskENTER_CRITICAL();
 8004624:	f002 ffd0 	bl	80075c8 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004634:	f000 f8fc 	bl	8004830 <prvTestWaitCondition>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <xEventGroupWaitBits+0x14e>
                {
                    if( xClearOnExit != pdFALSE )
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d006      	beq.n	8004652 <xEventGroupWaitBits+0x14e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	43db      	mvns	r3, r3
 800464c:	401a      	ands	r2, r3
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8004652:	2301      	movs	r3, #1
 8004654:	623b      	str	r3, [r7, #32]
            }
            taskEXIT_CRITICAL();
 8004656:	f002 ffe3 	bl	8007620 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004664:	4618      	mov	r0, r3
 8004666:	3730      	adds	r7, #48	; 0x30
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	080138a0 	.word	0x080138a0
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60fb      	str	r3, [r7, #12]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <xEventGroupClearBits+0x1e>
 8004688:	4910      	ldr	r1, [pc, #64]	; (80046cc <xEventGroupClearBits+0x58>)
 800468a:	f240 10df 	movw	r0, #479	; 0x1df
 800468e:	f7fc fa93 	bl	8000bb8 <vAssertCalled>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <xEventGroupClearBits+0x32>
 800469c:	490b      	ldr	r1, [pc, #44]	; (80046cc <xEventGroupClearBits+0x58>)
 800469e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80046a2:	f7fc fa89 	bl	8000bb8 <vAssertCalled>

    taskENTER_CRITICAL();
 80046a6:	f002 ff8f 	bl	80075c8 <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60bb      	str	r3, [r7, #8]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	43db      	mvns	r3, r3
 80046b8:	401a      	ands	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 80046be:	f002 ffaf 	bl	8007620 <vPortExitCritical>

    return uxReturn;
 80046c2:	68bb      	ldr	r3, [r7, #8]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	080138a0 	.word	0x080138a0

080046d0 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80046da:	2300      	movs	r3, #0
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d104      	bne.n	80046f6 <xEventGroupSetBits+0x26>
 80046ec:	4938      	ldr	r1, [pc, #224]	; (80047d0 <xEventGroupSetBits+0x100>)
 80046ee:	f240 201f 	movw	r0, #543	; 0x21f
 80046f2:	f7fc fa61 	bl	8000bb8 <vAssertCalled>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <xEventGroupSetBits+0x3a>
 8004700:	4933      	ldr	r1, [pc, #204]	; (80047d0 <xEventGroupSetBits+0x100>)
 8004702:	f44f 7008 	mov.w	r0, #544	; 0x220
 8004706:	f7fc fa57 	bl	8000bb8 <vAssertCalled>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	3304      	adds	r3, #4
 800470e:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	3308      	adds	r3, #8
 8004714:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 8004716:	f001 f9f9 	bl	8005b0c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	431a      	orrs	r2, r3
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 800472c:	e03c      	b.n	80047a8 <xEventGroupSetBits+0xd8>
        {
            pxNext = listGET_NEXT( pxListItem );
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004744:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800474c:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d108      	bne.n	800476a <xEventGroupSetBits+0x9a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <xEventGroupSetBits+0xac>
                {
                    xMatchFound = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
 8004768:	e008      	b.n	800477c <xEventGroupSetBits+0xac>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	429a      	cmp	r2, r3
 8004776:	d101      	bne.n	800477c <xEventGroupSetBits+0xac>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8004778:	2301      	movs	r3, #1
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <xEventGroupSetBits+0xd4>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <xEventGroupSetBits+0xc4>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 800478c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800479c:	4619      	mov	r1, r3
 800479e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047a0:	f001 fc52 	bl	8006048 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        while( pxListItem != pxListEnd )
 80047a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1be      	bne.n	800472e <xEventGroupSetBits+0x5e>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	43db      	mvns	r3, r3
 80047b8:	401a      	ands	r2, r3
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 80047be:	f001 f9b3 	bl	8005b28 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	681b      	ldr	r3, [r3, #0]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3730      	adds	r7, #48	; 0x30
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	080138a0 	.word	0x080138a0

080047d4 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60fb      	str	r3, [r7, #12]
    const List_t * pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3304      	adds	r3, #4
 80047e4:	60bb      	str	r3, [r7, #8]

    vTaskSuspendAll();
 80047e6:	f001 f991 	bl	8005b0c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80047ea:	e011      	b.n	8004810 <vEventGroupDelete+0x3c>
        {
            /* Unblock the task, returning 0 as the event list is being deleted
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3308      	adds	r3, #8
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d104      	bne.n	8004802 <vEventGroupDelete+0x2e>
 80047f8:	490c      	ldr	r1, [pc, #48]	; (800482c <vEventGroupDelete+0x58>)
 80047fa:	f240 207f 	movw	r0, #639	; 0x27f
 80047fe:	f7fc f9db 	bl	8000bb8 <vAssertCalled>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800480a:	4618      	mov	r0, r3
 800480c:	f001 fc1c 	bl	8006048 <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e9      	bne.n	80047ec <vEventGroupDelete+0x18>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
            {
                /* The event group can only have been allocated dynamically - free
                 * it again. */
                vPortFree( pxEventBits );
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f002 fcb7 	bl	800718c <vPortFree>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
    ( void ) xTaskResumeAll();
 800481e:	f001 f983 	bl	8005b28 <xTaskResumeAll>
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	080138a0 	.word	0x080138a0

08004830 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d107      	bne.n	8004856 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e007      	b.n	8004866 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	d101      	bne.n	8004866 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8004862:	2301      	movs	r3, #1
 8004864:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8004866:	697b      	ldr	r3, [r7, #20]
}
 8004868:	4618      	mov	r0, r3
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f103 0208 	add.w	r2, r3, #8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f103 0208 	add.w	r2, r3, #8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f103 0208 	add.w	r2, r3, #8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d103      	bne.n	8004936 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e00c      	b.n	8004950 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3308      	adds	r3, #8
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e002      	b.n	8004944 <vListInsert+0x2e>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d2f6      	bcs.n	800493e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	601a      	str	r2, [r3, #0]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6892      	ldr	r2, [r2, #8]
 800499e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6852      	ldr	r2, [r2, #4]
 80049a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d103      	bne.n	80049bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	1e5a      	subs	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d104      	bne.n	80049fa <xQueueGenericReset+0x1e>
 80049f0:	492a      	ldr	r1, [pc, #168]	; (8004a9c <xQueueGenericReset+0xc0>)
 80049f2:	f240 100d 	movw	r0, #269	; 0x10d
 80049f6:	f7fc f8df 	bl	8000bb8 <vAssertCalled>

    taskENTER_CRITICAL();
 80049fa:	f002 fde5 	bl	80075c8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	68f9      	ldr	r1, [r7, #12]
 8004a08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	441a      	add	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	441a      	add	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	22ff      	movs	r2, #255	; 0xff
 8004a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	22ff      	movs	r2, #255	; 0xff
 8004a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d114      	bne.n	8004a7a <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01a      	beq.n	8004a8e <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3310      	adds	r3, #16
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 fa95 	bl	8005f8c <xTaskRemoveFromEventList>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <xQueueGenericReset+0xc4>)
 8004a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	e009      	b.n	8004a8e <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3310      	adds	r3, #16
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fef8 	bl	8004874 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3324      	adds	r3, #36	; 0x24
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fef3 	bl	8004874 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004a8e:	f002 fdc7 	bl	8007620 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004a92:	2301      	movs	r3, #1
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	080138cc 	.word	0x080138cc
 8004aa0:	e000ed04 	.word	0xe000ed04

08004aa4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <xQueueGenericCreate+0x1e>
 8004ab8:	491c      	ldr	r1, [pc, #112]	; (8004b2c <xQueueGenericCreate+0x88>)
 8004aba:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8004abe:	f7fc f87b 	bl	8000bb8 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d006      	beq.n	8004ae0 <xQueueGenericCreate+0x3c>
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d101      	bne.n	8004ae4 <xQueueGenericCreate+0x40>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <xQueueGenericCreate+0x42>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <xQueueGenericCreate+0x50>
 8004aea:	4910      	ldr	r1, [pc, #64]	; (8004b2c <xQueueGenericCreate+0x88>)
 8004aec:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8004af0:	f7fc f862 	bl	8000bb8 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3354      	adds	r3, #84	; 0x54
 8004af8:	4618      	mov	r0, r3
 8004afa:	f002 fa8d 	bl	8007018 <pvPortMalloc>
 8004afe:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00d      	beq.n	8004b22 <xQueueGenericCreate+0x7e>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	3354      	adds	r3, #84	; 0x54
 8004b0e:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b10:	79fa      	ldrb	r2, [r7, #7]
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f807 	bl	8004b30 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004b22:	69bb      	ldr	r3, [r7, #24]
    }
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	080138cc 	.word	0x080138cc

08004b30 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d103      	bne.n	8004b4c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e002      	b.n	8004b52 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b5e:	2101      	movs	r1, #1
 8004b60:	69b8      	ldr	r0, [r7, #24]
 8004b62:	f7ff ff3b 	bl	80049dc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2200      	movs	r2, #0
 8004b72:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <xQueueCreateCountingSemaphore+0x1a>
 8004b8c:	490f      	ldr	r1, [pc, #60]	; (8004bcc <xQueueCreateCountingSemaphore+0x50>)
 8004b8e:	f240 20ea 	movw	r0, #746	; 0x2ea
 8004b92:	f7fc f811 	bl	8000bb8 <vAssertCalled>
        configASSERT( uxInitialCount <= uxMaxCount );
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d904      	bls.n	8004ba8 <xQueueCreateCountingSemaphore+0x2c>
 8004b9e:	490b      	ldr	r1, [pc, #44]	; (8004bcc <xQueueCreateCountingSemaphore+0x50>)
 8004ba0:	f240 20eb 	movw	r0, #747	; 0x2eb
 8004ba4:	f7fc f808 	bl	8000bb8 <vAssertCalled>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ba8:	2202      	movs	r2, #2
 8004baa:	2100      	movs	r1, #0
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ff79 	bl	8004aa4 <xQueueGenericCreate>
 8004bb2:	60f8      	str	r0, [r7, #12]

        if( xHandle != NULL )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <xQueueCreateCountingSemaphore+0x44>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
    }
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	080138cc 	.word	0x080138cc

08004bd0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <xQueueGenericSend+0x26>
 8004bec:	4978      	ldr	r1, [pc, #480]	; (8004dd0 <xQueueGenericSend+0x200>)
 8004bee:	f240 3009 	movw	r0, #777	; 0x309
 8004bf2:	f7fb ffe1 	bl	8000bb8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <xQueueGenericSend+0x34>
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <xQueueGenericSend+0x38>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <xQueueGenericSend+0x3a>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <xQueueGenericSend+0x48>
 8004c0e:	4970      	ldr	r1, [pc, #448]	; (8004dd0 <xQueueGenericSend+0x200>)
 8004c10:	f240 300a 	movw	r0, #778	; 0x30a
 8004c14:	f7fb ffd0 	bl	8000bb8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d103      	bne.n	8004c26 <xQueueGenericSend+0x56>
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <xQueueGenericSend+0x5a>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <xQueueGenericSend+0x5c>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d104      	bne.n	8004c3a <xQueueGenericSend+0x6a>
 8004c30:	4967      	ldr	r1, [pc, #412]	; (8004dd0 <xQueueGenericSend+0x200>)
 8004c32:	f240 300b 	movw	r0, #779	; 0x30b
 8004c36:	f7fb ffbf 	bl	8000bb8 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c3a:	f001 fbc3 	bl	80063c4 <xTaskGetSchedulerState>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <xQueueGenericSend+0x7a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <xQueueGenericSend+0x7e>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <xQueueGenericSend+0x80>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <xQueueGenericSend+0x8e>
 8004c54:	495e      	ldr	r1, [pc, #376]	; (8004dd0 <xQueueGenericSend+0x200>)
 8004c56:	f240 300e 	movw	r0, #782	; 0x30e
 8004c5a:	f7fb ffad 	bl	8000bb8 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004c5e:	f002 fcb3 	bl	80075c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d302      	bcc.n	8004c74 <xQueueGenericSend+0xa4>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d145      	bne.n	8004d00 <xQueueGenericSend+0x130>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	61fb      	str	r3, [r7, #28]

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	6a38      	ldr	r0, [r7, #32]
 8004c80:	f000 fb68 	bl	8005354 <prvCopyDataToQueue>
 8004c84:	61b8      	str	r0, [r7, #24]

                        if( pxQueue->pxQueueSetContainer != NULL )
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d014      	beq.n	8004cb8 <xQueueGenericSend+0xe8>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d102      	bne.n	8004c9a <xQueueGenericSend+0xca>
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d12e      	bne.n	8004cf8 <xQueueGenericSend+0x128>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004c9a:	6a38      	ldr	r0, [r7, #32]
 8004c9c:	f000 fcfe 	bl	800569c <prvNotifyQueueSetContainer>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d028      	beq.n	8004cf8 <xQueueGenericSend+0x128>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004ca6:	4b4b      	ldr	r3, [pc, #300]	; (8004dd4 <xQueueGenericSend+0x204>)
 8004ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	e01f      	b.n	8004cf8 <xQueueGenericSend+0x128>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d010      	beq.n	8004ce2 <xQueueGenericSend+0x112>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	3324      	adds	r3, #36	; 0x24
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 f961 	bl	8005f8c <xTaskRemoveFromEventList>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d013      	beq.n	8004cf8 <xQueueGenericSend+0x128>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8004cd0:	4b40      	ldr	r3, [pc, #256]	; (8004dd4 <xQueueGenericSend+0x204>)
 8004cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	e00a      	b.n	8004cf8 <xQueueGenericSend+0x128>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <xQueueGenericSend+0x128>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004ce8:	4b3a      	ldr	r3, [pc, #232]	; (8004dd4 <xQueueGenericSend+0x204>)
 8004cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004cf8:	f002 fc92 	bl	8007620 <vPortExitCritical>
                return pdPASS;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e063      	b.n	8004dc8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d06:	f002 fc8b 	bl	8007620 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e05c      	b.n	8004dc8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d14:	f107 0310 	add.w	r3, r7, #16
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 fa0f 	bl	800613c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004d22:	f002 fc7d 	bl	8007620 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004d26:	f000 fef1 	bl	8005b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004d2a:	f002 fc4d 	bl	80075c8 <vPortEnterCritical>
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d34:	b25b      	sxtb	r3, r3
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	d103      	bne.n	8004d44 <xQueueGenericSend+0x174>
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d103      	bne.n	8004d5a <xQueueGenericSend+0x18a>
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d5a:	f002 fc61 	bl	8007620 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d5e:	1d3a      	adds	r2, r7, #4
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 f9fe 	bl	8006168 <xTaskCheckForTimeOut>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d124      	bne.n	8004dbc <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d72:	6a38      	ldr	r0, [r7, #32]
 8004d74:	f000 fbf3 	bl	800555e <prvIsQueueFull>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d018      	beq.n	8004db0 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	3310      	adds	r3, #16
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 f886 	bl	8005e98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004d8c:	6a38      	ldr	r0, [r7, #32]
 8004d8e:	f000 fb71 	bl	8005474 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004d92:	f000 fec9 	bl	8005b28 <xTaskResumeAll>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f47f af60 	bne.w	8004c5e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004d9e:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <xQueueGenericSend+0x204>)
 8004da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	e756      	b.n	8004c5e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004db0:	6a38      	ldr	r0, [r7, #32]
 8004db2:	f000 fb5f 	bl	8005474 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004db6:	f000 feb7 	bl	8005b28 <xTaskResumeAll>
 8004dba:	e750      	b.n	8004c5e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004dbc:	6a38      	ldr	r0, [r7, #32]
 8004dbe:	f000 fb59 	bl	8005474 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004dc2:	f000 feb1 	bl	8005b28 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004dc6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3728      	adds	r7, #40	; 0x28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	080138cc 	.word	0x080138cc
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08c      	sub	sp, #48	; 0x30
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <xQueueGenericSendFromISR+0x22>
 8004df0:	494e      	ldr	r1, [pc, #312]	; (8004f2c <xQueueGenericSendFromISR+0x154>)
 8004df2:	f240 30dd 	movw	r0, #989	; 0x3dd
 8004df6:	f7fb fedf 	bl	8000bb8 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <xQueueGenericSendFromISR+0x30>
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <xQueueGenericSendFromISR+0x34>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <xQueueGenericSendFromISR+0x36>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <xQueueGenericSendFromISR+0x44>
 8004e12:	4946      	ldr	r1, [pc, #280]	; (8004f2c <xQueueGenericSendFromISR+0x154>)
 8004e14:	f240 30de 	movw	r0, #990	; 0x3de
 8004e18:	f7fb fece 	bl	8000bb8 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d103      	bne.n	8004e2a <xQueueGenericSendFromISR+0x52>
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <xQueueGenericSendFromISR+0x56>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <xQueueGenericSendFromISR+0x58>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <xQueueGenericSendFromISR+0x66>
 8004e34:	493d      	ldr	r1, [pc, #244]	; (8004f2c <xQueueGenericSendFromISR+0x154>)
 8004e36:	f240 30df 	movw	r0, #991	; 0x3df
 8004e3a:	f7fb febd 	bl	8000bb8 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e3e:	f002 fc9d 	bl	800777c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004e42:	f3ef 8211 	mrs	r2, BASEPRI
 8004e46:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004e4a:	b672      	cpsid	i
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	b662      	cpsie	i
 8004e5a:	61ba      	str	r2, [r7, #24]
 8004e5c:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <xQueueGenericSendFromISR+0x9c>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d14f      	bne.n	8004f14 <xQueueGenericSendFromISR+0x13c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8a:	f000 fa63 	bl	8005354 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004e8e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d129      	bne.n	8004eec <xQueueGenericSendFromISR+0x114>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d012      	beq.n	8004ec6 <xQueueGenericSendFromISR+0xee>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d102      	bne.n	8004eac <xQueueGenericSendFromISR+0xd4>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d130      	bne.n	8004f0e <xQueueGenericSendFromISR+0x136>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eae:	f000 fbf5 	bl	800569c <prvNotifyQueueSetContainer>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02a      	beq.n	8004f0e <xQueueGenericSendFromISR+0x136>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d027      	beq.n	8004f0e <xQueueGenericSendFromISR+0x136>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e023      	b.n	8004f0e <xQueueGenericSendFromISR+0x136>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01f      	beq.n	8004f0e <xQueueGenericSendFromISR+0x136>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	3324      	adds	r3, #36	; 0x24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 f85a 	bl	8005f8c <xTaskRemoveFromEventList>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d017      	beq.n	8004f0e <xQueueGenericSendFromISR+0x136>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d014      	beq.n	8004f0e <xQueueGenericSendFromISR+0x136>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e010      	b.n	8004f0e <xQueueGenericSendFromISR+0x136>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004eec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef2:	d104      	bne.n	8004efe <xQueueGenericSendFromISR+0x126>
 8004ef4:	490d      	ldr	r1, [pc, #52]	; (8004f2c <xQueueGenericSendFromISR+0x154>)
 8004ef6:	f44f 608d 	mov.w	r0, #1128	; 0x468
 8004efa:	f7fb fe5d 	bl	8000bb8 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004efe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f02:	3301      	adds	r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	b25a      	sxtb	r2, r3
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 8004f12:	e001      	b.n	8004f18 <xQueueGenericSendFromISR+0x140>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3730      	adds	r7, #48	; 0x30
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	080138cc 	.word	0x080138cc

08004f30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <xQueueReceive+0x24>
 8004f4a:	495f      	ldr	r1, [pc, #380]	; (80050c8 <xQueueReceive+0x198>)
 8004f4c:	f240 502c 	movw	r0, #1324	; 0x52c
 8004f50:	f7fb fe32 	bl	8000bb8 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <xQueueReceive+0x32>
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <xQueueReceive+0x36>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <xQueueReceive+0x38>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <xQueueReceive+0x46>
 8004f6c:	4956      	ldr	r1, [pc, #344]	; (80050c8 <xQueueReceive+0x198>)
 8004f6e:	f44f 60a6 	mov.w	r0, #1328	; 0x530
 8004f72:	f7fb fe21 	bl	8000bb8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f76:	f001 fa25 	bl	80063c4 <xTaskGetSchedulerState>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <xQueueReceive+0x56>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <xQueueReceive+0x5a>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <xQueueReceive+0x5c>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <xQueueReceive+0x6a>
 8004f90:	494d      	ldr	r1, [pc, #308]	; (80050c8 <xQueueReceive+0x198>)
 8004f92:	f240 5035 	movw	r0, #1333	; 0x535
 8004f96:	f7fb fe0f 	bl	8000bb8 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004f9a:	f002 fb15 	bl	80075c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01f      	beq.n	8004fea <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	6a38      	ldr	r0, [r7, #32]
 8004fae:	f000 fa3b 	bl	8005428 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00f      	beq.n	8004fe2 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	3310      	adds	r3, #16
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 ffe0 	bl	8005f8c <xTaskRemoveFromEventList>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004fd2:	4b3e      	ldr	r3, [pc, #248]	; (80050cc <xQueueReceive+0x19c>)
 8004fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004fe2:	f002 fb1d 	bl	8007620 <vPortExitCritical>
                return pdPASS;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e069      	b.n	80050be <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d103      	bne.n	8004ff8 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004ff0:	f002 fb16 	bl	8007620 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e062      	b.n	80050be <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	4618      	mov	r0, r3
 8005004:	f001 f89a 	bl	800613c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005008:	2301      	movs	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800500c:	f002 fb08 	bl	8007620 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005010:	f000 fd7c 	bl	8005b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005014:	f002 fad8 	bl	80075c8 <vPortEnterCritical>
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800501e:	b25b      	sxtb	r3, r3
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d103      	bne.n	800502e <xQueueReceive+0xfe>
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005034:	b25b      	sxtb	r3, r3
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d103      	bne.n	8005044 <xQueueReceive+0x114>
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005044:	f002 faec 	bl	8007620 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005048:	1d3a      	adds	r2, r7, #4
 800504a:	f107 0314 	add.w	r3, r7, #20
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f001 f889 	bl	8006168 <xTaskCheckForTimeOut>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d123      	bne.n	80050a4 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800505c:	6a38      	ldr	r0, [r7, #32]
 800505e:	f000 fa68 	bl	8005532 <prvIsQueueEmpty>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d017      	beq.n	8005098 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	3324      	adds	r3, #36	; 0x24
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4611      	mov	r1, r2
 8005070:	4618      	mov	r0, r3
 8005072:	f000 ff11 	bl	8005e98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005076:	6a38      	ldr	r0, [r7, #32]
 8005078:	f000 f9fc 	bl	8005474 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800507c:	f000 fd54 	bl	8005b28 <xTaskResumeAll>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d189      	bne.n	8004f9a <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <xQueueReceive+0x19c>)
 8005088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	e780      	b.n	8004f9a <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005098:	6a38      	ldr	r0, [r7, #32]
 800509a:	f000 f9eb 	bl	8005474 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800509e:	f000 fd43 	bl	8005b28 <xTaskResumeAll>
 80050a2:	e77a      	b.n	8004f9a <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80050a4:	6a38      	ldr	r0, [r7, #32]
 80050a6:	f000 f9e5 	bl	8005474 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80050aa:	f000 fd3d 	bl	8005b28 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050ae:	6a38      	ldr	r0, [r7, #32]
 80050b0:	f000 fa3f 	bl	8005532 <prvIsQueueEmpty>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f43f af6f 	beq.w	8004f9a <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80050bc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	080138cc 	.word	0x080138cc
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80050da:	2300      	movs	r3, #0
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <xQueueSemaphoreTake+0x26>
 80050ec:	4971      	ldr	r1, [pc, #452]	; (80052b4 <xQueueSemaphoreTake+0x1e4>)
 80050ee:	f240 50be 	movw	r0, #1470	; 0x5be
 80050f2:	f7fb fd61 	bl	8000bb8 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <xQueueSemaphoreTake+0x38>
 80050fe:	496d      	ldr	r1, [pc, #436]	; (80052b4 <xQueueSemaphoreTake+0x1e4>)
 8005100:	f240 50c2 	movw	r0, #1474	; 0x5c2
 8005104:	f7fb fd58 	bl	8000bb8 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005108:	f001 f95c 	bl	80063c4 <xTaskGetSchedulerState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <xQueueSemaphoreTake+0x48>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <xQueueSemaphoreTake+0x4c>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <xQueueSemaphoreTake+0x4e>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <xQueueSemaphoreTake+0x5c>
 8005122:	4964      	ldr	r1, [pc, #400]	; (80052b4 <xQueueSemaphoreTake+0x1e4>)
 8005124:	f240 50c7 	movw	r0, #1479	; 0x5c7
 8005128:	f7fb fd46 	bl	8000bb8 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800512c:	f002 fa4c 	bl	80075c8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d024      	beq.n	8005186 <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	1e5a      	subs	r2, r3, #1
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <xQueueSemaphoreTake+0x86>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800514c:	f001 fada 	bl	8006704 <pvTaskIncrementMutexHeldCount>
 8005150:	4602      	mov	r2, r0
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00f      	beq.n	800517e <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3310      	adds	r3, #16
 8005162:	4618      	mov	r0, r3
 8005164:	f000 ff12 	bl	8005f8c <xTaskRemoveFromEventList>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800516e:	4b52      	ldr	r3, [pc, #328]	; (80052b8 <xQueueSemaphoreTake+0x1e8>)
 8005170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800517e:	f002 fa4f 	bl	8007620 <vPortExitCritical>
                return pdPASS;
 8005182:	2301      	movs	r3, #1
 8005184:	e091      	b.n	80052aa <xQueueSemaphoreTake+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <xQueueSemaphoreTake+0xd4>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <xQueueSemaphoreTake+0xcc>
 8005192:	4948      	ldr	r1, [pc, #288]	; (80052b4 <xQueueSemaphoreTake+0x1e4>)
 8005194:	f240 600d 	movw	r0, #1549	; 0x60d
 8005198:	f7fb fd0e 	bl	8000bb8 <vAssertCalled>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800519c:	f002 fa40 	bl	8007620 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e082      	b.n	80052aa <xQueueSemaphoreTake+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80051aa:	f107 030c 	add.w	r3, r7, #12
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 ffc4 	bl	800613c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80051b8:	f002 fa32 	bl	8007620 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80051bc:	f000 fca6 	bl	8005b0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80051c0:	f002 fa02 	bl	80075c8 <vPortEnterCritical>
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ca:	b25b      	sxtb	r3, r3
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d103      	bne.n	80051da <xQueueSemaphoreTake+0x10a>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051e0:	b25b      	sxtb	r3, r3
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d103      	bne.n	80051f0 <xQueueSemaphoreTake+0x120>
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f0:	f002 fa16 	bl	8007620 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051f4:	463a      	mov	r2, r7
 80051f6:	f107 030c 	add.w	r3, r7, #12
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 ffb3 	bl	8006168 <xTaskCheckForTimeOut>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d132      	bne.n	800526e <xQueueSemaphoreTake+0x19e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005208:	69f8      	ldr	r0, [r7, #28]
 800520a:	f000 f992 	bl	8005532 <prvIsQueueEmpty>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d026      	beq.n	8005262 <xQueueSemaphoreTake+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <xQueueSemaphoreTake+0x160>
                        {
                            taskENTER_CRITICAL();
 800521c:	f002 f9d4 	bl	80075c8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4618      	mov	r0, r3
 8005226:	f001 f8eb 	bl	8006400 <xTaskPriorityInherit>
 800522a:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 800522c:	f002 f9f8 	bl	8007620 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	3324      	adds	r3, #36	; 0x24
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fe2d 	bl	8005e98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800523e:	69f8      	ldr	r0, [r7, #28]
 8005240:	f000 f918 	bl	8005474 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005244:	f000 fc70 	bl	8005b28 <xTaskResumeAll>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	f47f af6e 	bne.w	800512c <xQueueSemaphoreTake+0x5c>
                {
                    portYIELD_WITHIN_API();
 8005250:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <xQueueSemaphoreTake+0x1e8>)
 8005252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	e764      	b.n	800512c <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8005262:	69f8      	ldr	r0, [r7, #28]
 8005264:	f000 f906 	bl	8005474 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005268:	f000 fc5e 	bl	8005b28 <xTaskResumeAll>
 800526c:	e75e      	b.n	800512c <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800526e:	69f8      	ldr	r0, [r7, #28]
 8005270:	f000 f900 	bl	8005474 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005274:	f000 fc58 	bl	8005b28 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005278:	69f8      	ldr	r0, [r7, #28]
 800527a:	f000 f95a 	bl	8005532 <prvIsQueueEmpty>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f43f af53 	beq.w	800512c <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 800528c:	f002 f99c 	bl	80075c8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005290:	69f8      	ldr	r0, [r7, #28]
 8005292:	f000 f847 	bl	8005324 <prvGetDisinheritPriorityAfterTimeout>
 8005296:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	6979      	ldr	r1, [r7, #20]
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 f994 	bl	80065cc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80052a4:	f002 f9bc 	bl	8007620 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80052a8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3728      	adds	r7, #40	; 0x28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	080138cc 	.word	0x080138cc
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d104      	bne.n	80052d4 <uxQueueMessagesWaiting+0x18>
 80052ca:	4908      	ldr	r1, [pc, #32]	; (80052ec <uxQueueMessagesWaiting+0x30>)
 80052cc:	f240 70be 	movw	r0, #1982	; 0x7be
 80052d0:	f7fb fc72 	bl	8000bb8 <vAssertCalled>

    taskENTER_CRITICAL();
 80052d4:	f002 f978 	bl	80075c8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80052de:	f002 f99f 	bl	8007620 <vPortExitCritical>

    return uxReturn;
 80052e2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	080138cc 	.word	0x080138cc

080052f0 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <vQueueDelete+0x1c>
 8005302:	4907      	ldr	r1, [pc, #28]	; (8005320 <vQueueDelete+0x30>)
 8005304:	f240 70eb 	movw	r0, #2027	; 0x7eb
 8005308:	f7fb fc56 	bl	8000bb8 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f967 	bl	80055e0 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The queue can only have been allocated dynamically - free it
             * again. */
            vPortFree( pxQueue );
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f001 ff3a 	bl	800718c <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	080138cc 	.word	0x080138cc

08005324 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b00      	cmp	r3, #0
 8005332:	d006      	beq.n	8005342 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f1c3 0305 	rsb	r3, r3, #5
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e001      	b.n	8005346 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8005346:	68fb      	ldr	r3, [r7, #12]
    }
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10d      	bne.n	800538e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d14d      	bne.n	8005416 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f001 f8b4 	bl	80064ec <xTaskPriorityDisinherit>
 8005384:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	e043      	b.n	8005416 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d119      	bne.n	80053c8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6858      	ldr	r0, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	461a      	mov	r2, r3
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	f00c f9df 	bl	8011762 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	441a      	add	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d32b      	bcc.n	8005416 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	e026      	b.n	8005416 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68d8      	ldr	r0, [r3, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	461a      	mov	r2, r3
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	f00c f9c5 	bl	8011762 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	425b      	negs	r3, r3
 80053e2:	441a      	add	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d207      	bcs.n	8005404 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	425b      	negs	r3, r3
 80053fe:	441a      	add	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d105      	bne.n	8005416 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	3b01      	subs	r3, #1
 8005414:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800541e:	697b      	ldr	r3, [r7, #20]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d018      	beq.n	800546c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	441a      	add	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	429a      	cmp	r2, r3
 8005452:	d303      	bcc.n	800545c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68d9      	ldr	r1, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	461a      	mov	r2, r3
 8005466:	6838      	ldr	r0, [r7, #0]
 8005468:	f00c f97b 	bl	8011762 <memcpy>
    }
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800547c:	f002 f8a4 	bl	80075c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005486:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005488:	e01e      	b.n	80054c8 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f902 	bl	800569c <prvNotifyQueueSetContainer>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d010      	beq.n	80054c0 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 800549e:	f000 febf 	bl	8006220 <vTaskMissedYield>
 80054a2:	e00d      	b.n	80054c0 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d012      	beq.n	80054d2 <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fd6b 	bl	8005f8c <xTaskRemoveFromEventList>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 80054bc:	f000 feb0 	bl	8006220 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80054c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	dcdc      	bgt.n	800548a <prvUnlockQueue+0x16>
 80054d0:	e000      	b.n	80054d4 <prvUnlockQueue+0x60>
                            break;
 80054d2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	22ff      	movs	r2, #255	; 0xff
 80054d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80054dc:	f002 f8a0 	bl	8007620 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80054e0:	f002 f872 	bl	80075c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ea:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80054ec:	e011      	b.n	8005512 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d012      	beq.n	800551c <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3310      	adds	r3, #16
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fd46 	bl	8005f8c <xTaskRemoveFromEventList>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8005506:	f000 fe8b 	bl	8006220 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800550a:	7bbb      	ldrb	r3, [r7, #14]
 800550c:	3b01      	subs	r3, #1
 800550e:	b2db      	uxtb	r3, r3
 8005510:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005516:	2b00      	cmp	r3, #0
 8005518:	dce9      	bgt.n	80054ee <prvUnlockQueue+0x7a>
 800551a:	e000      	b.n	800551e <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 800551c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	22ff      	movs	r2, #255	; 0xff
 8005522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005526:	f002 f87b 	bl	8007620 <vPortExitCritical>
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800553a:	f002 f845 	bl	80075c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	2b00      	cmp	r3, #0
 8005544:	d102      	bne.n	800554c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005546:	2301      	movs	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e001      	b.n	8005550 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005550:	f002 f866 	bl	8007620 <vPortExitCritical>

    return xReturn;
 8005554:	68fb      	ldr	r3, [r7, #12]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005566:	f002 f82f 	bl	80075c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	429a      	cmp	r2, r3
 8005574:	d102      	bne.n	800557c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005576:	2301      	movs	r3, #1
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	e001      	b.n	8005580 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005580:	f002 f84e 	bl	8007620 <vPortExitCritical>

    return xReturn;
 8005584:	68fb      	ldr	r3, [r7, #12]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e014      	b.n	80055ca <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055a0:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <vQueueAddToRegistry+0x4c>)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055ac:	490b      	ldr	r1, [pc, #44]	; (80055dc <vQueueAddToRegistry+0x4c>)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <vQueueAddToRegistry+0x4c>)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80055c2:	e005      	b.n	80055d0 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b07      	cmp	r3, #7
 80055ce:	d9e7      	bls.n	80055a0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	2000c808 	.word	0x2000c808

080055e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e016      	b.n	800561c <vQueueUnregisterQueue+0x3c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80055ee:	4a10      	ldr	r2, [pc, #64]	; (8005630 <vQueueUnregisterQueue+0x50>)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d10b      	bne.n	8005616 <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80055fe:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <vQueueUnregisterQueue+0x50>)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2100      	movs	r1, #0
 8005604:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005608:	4a09      	ldr	r2, [pc, #36]	; (8005630 <vQueueUnregisterQueue+0x50>)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	4413      	add	r3, r2
 8005610:	2200      	movs	r2, #0
 8005612:	605a      	str	r2, [r3, #4]
                break;
 8005614:	e005      	b.n	8005622 <vQueueUnregisterQueue+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3301      	adds	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b07      	cmp	r3, #7
 8005620:	d9e5      	bls.n	80055ee <vQueueUnregisterQueue+0xe>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	2000c808 	.word	0x2000c808

08005634 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005644:	f001 ffc0 	bl	80075c8 <vPortEnterCritical>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800564e:	b25b      	sxtb	r3, r3
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d103      	bne.n	800565e <vQueueWaitForMessageRestricted+0x2a>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005664:	b25b      	sxtb	r3, r3
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d103      	bne.n	8005674 <vQueueWaitForMessageRestricted+0x40>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005674:	f001 ffd4 	bl	8007620 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	3324      	adds	r3, #36	; 0x24
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fc57 	bl	8005f3c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	f7ff fef0 	bl	8005474 <prvUnlockQueue>
    }
 8005694:	bf00      	nop
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a8:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <prvNotifyQueueSetContainer+0x22>
 80056b4:	4924      	ldr	r1, [pc, #144]	; (8005748 <prvNotifyQueueSetContainer+0xac>)
 80056b6:	f640 3097 	movw	r0, #2967	; 0xb97
 80056ba:	f7fb fa7d 	bl	8000bb8 <vAssertCalled>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d304      	bcc.n	80056d4 <prvNotifyQueueSetContainer+0x38>
 80056ca:	491f      	ldr	r1, [pc, #124]	; (8005748 <prvNotifyQueueSetContainer+0xac>)
 80056cc:	f640 3098 	movw	r0, #2968	; 0xb98
 80056d0:	f7fb fa72 	bl	8000bb8 <vAssertCalled>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	429a      	cmp	r2, r3
 80056de:	d22e      	bcs.n	800573e <prvNotifyQueueSetContainer+0xa2>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e6:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	2200      	movs	r2, #0
 80056ec:	4619      	mov	r1, r3
 80056ee:	6938      	ldr	r0, [r7, #16]
 80056f0:	f7ff fe30 	bl	8005354 <prvCopyDataToQueue>
 80056f4:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 80056f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d10e      	bne.n	800571e <prvNotifyQueueSetContainer+0x82>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01a      	beq.n	800573e <prvNotifyQueueSetContainer+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	3324      	adds	r3, #36	; 0x24
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fc3d 	bl	8005f8c <xTaskRemoveFromEventList>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d012      	beq.n	800573e <prvNotifyQueueSetContainer+0xa2>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e00f      	b.n	800573e <prvNotifyQueueSetContainer+0xa2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 800571e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005722:	2b7f      	cmp	r3, #127	; 0x7f
 8005724:	d104      	bne.n	8005730 <prvNotifyQueueSetContainer+0x94>
 8005726:	4908      	ldr	r1, [pc, #32]	; (8005748 <prvNotifyQueueSetContainer+0xac>)
 8005728:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800572c:	f7fb fa44 	bl	8000bb8 <vAssertCalled>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	3301      	adds	r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	b25a      	sxtb	r2, r3
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800573e:	697b      	ldr	r3, [r7, #20]
    }
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	080138cc 	.word	0x080138cc

0800574c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af04      	add	r7, sp, #16
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fc59 	bl	8007018 <pvPortMalloc>
 8005766:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00e      	beq.n	800578c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800576e:	20b8      	movs	r0, #184	; 0xb8
 8005770:	f001 fc52 	bl	8007018 <pvPortMalloc>
 8005774:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
 8005782:	e005      	b.n	8005790 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005784:	6978      	ldr	r0, [r7, #20]
 8005786:	f001 fd01 	bl	800718c <vPortFree>
 800578a:	e001      	b.n	8005790 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d013      	beq.n	80057be <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	2300      	movs	r3, #0
 800579a:	9303      	str	r3, [sp, #12]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	9302      	str	r3, [sp, #8]
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f80f 	bl	80057d0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80057b2:	69f8      	ldr	r0, [r7, #28]
 80057b4:	f000 f8b4 	bl	8005920 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80057b8:	2301      	movs	r3, #1
 80057ba:	61bb      	str	r3, [r7, #24]
 80057bc:	e002      	b.n	80057c4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057be:	f04f 33ff 	mov.w	r3, #4294967295
 80057c2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80057c4:	69bb      	ldr	r3, [r7, #24]
    }
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	461a      	mov	r2, r3
 80057e8:	21a5      	movs	r1, #165	; 0xa5
 80057ea:	f00b ffde 	bl	80117aa <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80057f8:	440b      	add	r3, r1
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f023 0307 	bic.w	r3, r3, #7
 8005806:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <prvInitialiseNewTask+0x4c>
 8005812:	493f      	ldr	r1, [pc, #252]	; (8005910 <prvInitialiseNewTask+0x140>)
 8005814:	f240 305e 	movw	r0, #862	; 0x35e
 8005818:	f7fb f9ce 	bl	8000bb8 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01f      	beq.n	8005862 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	e012      	b.n	800584e <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	4413      	add	r3, r2
 800582e:	7819      	ldrb	r1, [r3, #0]
 8005830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4413      	add	r3, r2
 8005836:	3334      	adds	r3, #52	; 0x34
 8005838:	460a      	mov	r2, r1
 800583a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d006      	beq.n	8005856 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	3301      	adds	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b09      	cmp	r3, #9
 8005852:	d9e9      	bls.n	8005828 <prvInitialiseNewTask+0x58>
 8005854:	e000      	b.n	8005858 <prvInitialiseNewTask+0x88>
            {
                break;
 8005856:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005860:	e003      	b.n	800586a <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	2b04      	cmp	r3, #4
 800586e:	d901      	bls.n	8005874 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005870:	2304      	movs	r3, #4
 8005872:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	6a3a      	ldr	r2, [r7, #32]
 8005878:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	6a3a      	ldr	r2, [r7, #32]
 800587e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	2200      	movs	r2, #0
 8005884:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	3304      	adds	r3, #4
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff f812 	bl	80048b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	3318      	adds	r3, #24
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff f80d 	bl	80048b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	f1c3 0205 	rsb	r2, r3, #5
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	33b0      	adds	r3, #176	; 0xb0
 80058b4:	2204      	movs	r2, #4
 80058b6:	2100      	movs	r1, #0
 80058b8:	4618      	mov	r0, r3
 80058ba:	f00b ff76 	bl	80117aa <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	33b4      	adds	r3, #180	; 0xb4
 80058c2:	2201      	movs	r2, #1
 80058c4:	2100      	movs	r1, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	f00b ff6f 	bl	80117aa <memset>
    #if ( configUSE_NEWLIB_REENTRANT == 1 )
        {
            /* Initialise this task's Newlib reent structure.
             * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
             * for additional information. */
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	3350      	adds	r3, #80	; 0x50
 80058d0:	2260      	movs	r2, #96	; 0x60
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f00b ff68 	bl	80117aa <memset>
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <prvInitialiseNewTask+0x144>)
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	4a0d      	ldr	r2, [pc, #52]	; (8005918 <prvInitialiseNewTask+0x148>)
 80058e4:	659a      	str	r2, [r3, #88]	; 0x58
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	4a0c      	ldr	r2, [pc, #48]	; (800591c <prvInitialiseNewTask+0x14c>)
 80058ea:	65da      	str	r2, [r3, #92]	; 0x5c
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	68f9      	ldr	r1, [r7, #12]
 80058f0:	6938      	ldr	r0, [r7, #16]
 80058f2:	f001 fd5f 	bl	80073b4 <pxPortInitialiseStack>
 80058f6:	4602      	mov	r2, r0
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005906:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005908:	bf00      	nop
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	080138f0 	.word	0x080138f0
 8005914:	08015478 	.word	0x08015478
 8005918:	08015498 	.word	0x08015498
 800591c:	08015458 	.word	0x08015458

08005920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005928:	f001 fe4e 	bl	80075c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800592c:	4b2c      	ldr	r3, [pc, #176]	; (80059e0 <prvAddNewTaskToReadyList+0xc0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	4a2b      	ldr	r2, [pc, #172]	; (80059e0 <prvAddNewTaskToReadyList+0xc0>)
 8005934:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005936:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800593e:	4a29      	ldr	r2, [pc, #164]	; (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005944:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <prvAddNewTaskToReadyList+0xc0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d110      	bne.n	800596e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800594c:	f000 fc8c 	bl	8006268 <prvInitialiseTaskLists>
 8005950:	e00d      	b.n	800596e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005952:	4b25      	ldr	r3, [pc, #148]	; (80059e8 <prvAddNewTaskToReadyList+0xc8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800595a:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	d802      	bhi.n	800596e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005968:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800596e:	4b1f      	ldr	r3, [pc, #124]	; (80059ec <prvAddNewTaskToReadyList+0xcc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <prvAddNewTaskToReadyList+0xcc>)
 8005976:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005978:	4b1c      	ldr	r3, [pc, #112]	; (80059ec <prvAddNewTaskToReadyList+0xcc>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	2201      	movs	r2, #1
 8005986:	409a      	lsls	r2, r3
 8005988:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <prvAddNewTaskToReadyList+0xd0>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	4a18      	ldr	r2, [pc, #96]	; (80059f0 <prvAddNewTaskToReadyList+0xd0>)
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <prvAddNewTaskToReadyList+0xd4>)
 80059a0:	441a      	add	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7fe ff90 	bl	80048ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80059ae:	f001 fe37 	bl	8007620 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80059b2:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <prvAddNewTaskToReadyList+0xc8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00e      	beq.n	80059d8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059ba:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d207      	bcs.n	80059d8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <prvAddNewTaskToReadyList+0xd8>)
 80059ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000324 	.word	0x20000324
 80059e4:	2000024c 	.word	0x2000024c
 80059e8:	20000330 	.word	0x20000330
 80059ec:	20000340 	.word	0x20000340
 80059f0:	2000032c 	.word	0x2000032c
 80059f4:	20000250 	.word	0x20000250
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d011      	beq.n	8005a32 <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <vTaskDelay+0x54>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <vTaskDelay+0x24>
 8005a16:	490f      	ldr	r1, [pc, #60]	; (8005a54 <vTaskDelay+0x58>)
 8005a18:	f240 503f 	movw	r0, #1343	; 0x53f
 8005a1c:	f7fb f8cc 	bl	8000bb8 <vAssertCalled>
            vTaskSuspendAll();
 8005a20:	f000 f874 	bl	8005b0c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a24:	2100      	movs	r1, #0
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 ff80 	bl	800692c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005a2c:	f000 f87c 	bl	8005b28 <xTaskResumeAll>
 8005a30:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d107      	bne.n	8005a48 <vTaskDelay+0x4c>
        {
            portYIELD_WITHIN_API();
 8005a38:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <vTaskDelay+0x5c>)
 8005a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005a48:	bf00      	nop
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	2000034c 	.word	0x2000034c
 8005a54:	080138f0 	.word	0x080138f0
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005a62:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <vTaskStartScheduler+0x88>)
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	2300      	movs	r3, #0
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2282      	movs	r2, #130	; 0x82
 8005a6e:	491e      	ldr	r1, [pc, #120]	; (8005ae8 <vTaskStartScheduler+0x8c>)
 8005a70:	481e      	ldr	r0, [pc, #120]	; (8005aec <vTaskStartScheduler+0x90>)
 8005a72:	f7ff fe6b 	bl	800574c <xTaskCreate>
 8005a76:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d102      	bne.n	8005a84 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005a7e:	f000 ffbb 	bl	80069f8 <xTimerCreateTimerTask>
 8005a82:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d11c      	bne.n	8005ac4 <vTaskStartScheduler+0x68>
        __asm volatile
 8005a8a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005a8e:	b672      	cpsid	i
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	b662      	cpsie	i
 8005a9e:	603b      	str	r3, [r7, #0]
            {
                /* Switch Newlib's _impure_ptr variable to point to the _reent
                 * structure specific to the task that will run first.
                 * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aa0:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <vTaskStartScheduler+0x94>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3350      	adds	r3, #80	; 0x50
 8005aa6:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <vTaskStartScheduler+0x98>)
 8005aa8:	6013      	str	r3, [r2, #0]
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005aaa:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <vTaskStartScheduler+0x9c>)
 8005aac:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <vTaskStartScheduler+0xa0>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ab8:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <vTaskStartScheduler+0xa4>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005abe:	f001 fd01 	bl	80074c4 <xPortStartScheduler>
 8005ac2:	e008      	b.n	8005ad6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d104      	bne.n	8005ad6 <vTaskStartScheduler+0x7a>
 8005acc:	490d      	ldr	r1, [pc, #52]	; (8005b04 <vTaskStartScheduler+0xa8>)
 8005ace:	f640 0036 	movw	r0, #2102	; 0x836
 8005ad2:	f7fb f871 	bl	8000bb8 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <vTaskStartScheduler+0xac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000348 	.word	0x20000348
 8005ae8:	08013914 	.word	0x08013914
 8005aec:	08006239 	.word	0x08006239
 8005af0:	2000024c 	.word	0x2000024c
 8005af4:	20000034 	.word	0x20000034
 8005af8:	20000344 	.word	0x20000344
 8005afc:	20000330 	.word	0x20000330
 8005b00:	20000328 	.word	0x20000328
 8005b04:	080138f0 	.word	0x080138f0
 8005b08:	2000000c 	.word	0x2000000c

08005b0c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <vTaskSuspendAll+0x18>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3301      	adds	r3, #1
 8005b16:	4a03      	ldr	r2, [pc, #12]	; (8005b24 <vTaskSuspendAll+0x18>)
 8005b18:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005b1a:	bf00      	nop
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	2000034c 	.word	0x2000034c

08005b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005b36:	4b3e      	ldr	r3, [pc, #248]	; (8005c30 <xTaskResumeAll+0x108>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <xTaskResumeAll+0x20>
 8005b3e:	493d      	ldr	r1, [pc, #244]	; (8005c34 <xTaskResumeAll+0x10c>)
 8005b40:	f640 00a9 	movw	r0, #2217	; 0x8a9
 8005b44:	f7fb f838 	bl	8000bb8 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005b48:	f001 fd3e 	bl	80075c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005b4c:	4b38      	ldr	r3, [pc, #224]	; (8005c30 <xTaskResumeAll+0x108>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	4a37      	ldr	r2, [pc, #220]	; (8005c30 <xTaskResumeAll+0x108>)
 8005b54:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b56:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <xTaskResumeAll+0x108>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d161      	bne.n	8005c22 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b5e:	4b36      	ldr	r3, [pc, #216]	; (8005c38 <xTaskResumeAll+0x110>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d05d      	beq.n	8005c22 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b66:	e02e      	b.n	8005bc6 <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b68:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <xTaskResumeAll+0x114>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3318      	adds	r3, #24
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fe ff07 	bl	8004988 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe ff02 	bl	8004988 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	2201      	movs	r2, #1
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <xTaskResumeAll+0x118>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	4a2b      	ldr	r2, [pc, #172]	; (8005c40 <xTaskResumeAll+0x118>)
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <xTaskResumeAll+0x11c>)
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f7fe fe8e 	bl	80048ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb6:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <xTaskResumeAll+0x120>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d302      	bcc.n	8005bc6 <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 8005bc0:	4b22      	ldr	r3, [pc, #136]	; (8005c4c <xTaskResumeAll+0x124>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <xTaskResumeAll+0x114>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1cc      	bne.n	8005b68 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005bd4:	f000 fbca 	bl	800636c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <xTaskResumeAll+0x128>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d010      	beq.n	8005c06 <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005be4:	f000 f848 	bl	8005c78 <xTaskIncrementTick>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 8005bee:	4b17      	ldr	r3, [pc, #92]	; (8005c4c <xTaskResumeAll+0x124>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f1      	bne.n	8005be4 <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 8005c00:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <xTaskResumeAll+0x128>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005c06:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <xTaskResumeAll+0x124>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005c12:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <xTaskResumeAll+0x12c>)
 8005c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005c22:	f001 fcfd 	bl	8007620 <vPortExitCritical>

    return xAlreadyYielded;
 8005c26:	68bb      	ldr	r3, [r7, #8]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	2000034c 	.word	0x2000034c
 8005c34:	080138f0 	.word	0x080138f0
 8005c38:	20000324 	.word	0x20000324
 8005c3c:	200002e4 	.word	0x200002e4
 8005c40:	2000032c 	.word	0x2000032c
 8005c44:	20000250 	.word	0x20000250
 8005c48:	2000024c 	.word	0x2000024c
 8005c4c:	20000338 	.word	0x20000338
 8005c50:	20000334 	.word	0x20000334
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <xTaskGetTickCount+0x1c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005c64:	687b      	ldr	r3, [r7, #4]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20000328 	.word	0x20000328

08005c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c82:	4b4b      	ldr	r3, [pc, #300]	; (8005db0 <xTaskIncrementTick+0x138>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f040 8088 	bne.w	8005d9c <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c8c:	4b49      	ldr	r3, [pc, #292]	; (8005db4 <xTaskIncrementTick+0x13c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3301      	adds	r3, #1
 8005c92:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005c94:	4a47      	ldr	r2, [pc, #284]	; (8005db4 <xTaskIncrementTick+0x13c>)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d11a      	bne.n	8005cd6 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8005ca0:	4b45      	ldr	r3, [pc, #276]	; (8005db8 <xTaskIncrementTick+0x140>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <xTaskIncrementTick+0x3c>
 8005caa:	4944      	ldr	r1, [pc, #272]	; (8005dbc <xTaskIncrementTick+0x144>)
 8005cac:	f640 20bc 	movw	r0, #2748	; 0xabc
 8005cb0:	f7fa ff82 	bl	8000bb8 <vAssertCalled>
 8005cb4:	4b40      	ldr	r3, [pc, #256]	; (8005db8 <xTaskIncrementTick+0x140>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	4b41      	ldr	r3, [pc, #260]	; (8005dc0 <xTaskIncrementTick+0x148>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a3e      	ldr	r2, [pc, #248]	; (8005db8 <xTaskIncrementTick+0x140>)
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4a3f      	ldr	r2, [pc, #252]	; (8005dc0 <xTaskIncrementTick+0x148>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <xTaskIncrementTick+0x14c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	4a3d      	ldr	r2, [pc, #244]	; (8005dc4 <xTaskIncrementTick+0x14c>)
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	f000 fb4b 	bl	800636c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005cd6:	4b3c      	ldr	r3, [pc, #240]	; (8005dc8 <xTaskIncrementTick+0x150>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d348      	bcc.n	8005d72 <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce0:	4b35      	ldr	r3, [pc, #212]	; (8005db8 <xTaskIncrementTick+0x140>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cea:	4b37      	ldr	r3, [pc, #220]	; (8005dc8 <xTaskIncrementTick+0x150>)
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf0:	601a      	str	r2, [r3, #0]
                    break;
 8005cf2:	e03e      	b.n	8005d72 <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf4:	4b30      	ldr	r3, [pc, #192]	; (8005db8 <xTaskIncrementTick+0x140>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d203      	bcs.n	8005d14 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005d0c:	4a2e      	ldr	r2, [pc, #184]	; (8005dc8 <xTaskIncrementTick+0x150>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d12:	e02e      	b.n	8005d72 <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fe fe35 	bl	8004988 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	3318      	adds	r3, #24
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fe fe2c 	bl	8004988 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	2201      	movs	r2, #1
 8005d36:	409a      	lsls	r2, r3
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <xTaskIncrementTick+0x154>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	4a23      	ldr	r2, [pc, #140]	; (8005dcc <xTaskIncrementTick+0x154>)
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4a20      	ldr	r2, [pc, #128]	; (8005dd0 <xTaskIncrementTick+0x158>)
 8005d50:	441a      	add	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f7fe fdb8 	bl	80048ce <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d62:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <xTaskIncrementTick+0x15c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d3b9      	bcc.n	8005ce0 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d70:	e7b6      	b.n	8005ce0 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d72:	4b18      	ldr	r3, [pc, #96]	; (8005dd4 <xTaskIncrementTick+0x15c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d78:	4915      	ldr	r1, [pc, #84]	; (8005dd0 <xTaskIncrementTick+0x158>)
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d901      	bls.n	8005d8e <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005d8e:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <xTaskIncrementTick+0x160>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	e004      	b.n	8005da6 <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005d9c:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <xTaskIncrementTick+0x164>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3301      	adds	r3, #1
 8005da2:	4a0e      	ldr	r2, [pc, #56]	; (8005ddc <xTaskIncrementTick+0x164>)
 8005da4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005da6:	697b      	ldr	r3, [r7, #20]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	2000034c 	.word	0x2000034c
 8005db4:	20000328 	.word	0x20000328
 8005db8:	200002dc 	.word	0x200002dc
 8005dbc:	080138f0 	.word	0x080138f0
 8005dc0:	200002e0 	.word	0x200002e0
 8005dc4:	2000033c 	.word	0x2000033c
 8005dc8:	20000344 	.word	0x20000344
 8005dcc:	2000032c 	.word	0x2000032c
 8005dd0:	20000250 	.word	0x20000250
 8005dd4:	2000024c 	.word	0x2000024c
 8005dd8:	20000338 	.word	0x20000338
 8005ddc:	20000334 	.word	0x20000334

08005de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005de6:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <vTaskSwitchContext+0x9c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <vTaskSwitchContext+0xa0>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005df4:	e03e      	b.n	8005e74 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8005df6:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <vTaskSwitchContext+0xa0>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <vTaskSwitchContext+0xa4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	fab3 f383 	clz	r3, r3
 8005e08:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	f1c3 031f 	rsb	r3, r3, #31
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	491d      	ldr	r1, [pc, #116]	; (8005e88 <vTaskSwitchContext+0xa8>)
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d104      	bne.n	8005e30 <vTaskSwitchContext+0x50>
 8005e26:	4919      	ldr	r1, [pc, #100]	; (8005e8c <vTaskSwitchContext+0xac>)
 8005e28:	f640 30f7 	movw	r0, #3063	; 0xbf7
 8005e2c:	f7fa fec4 	bl	8000bb8 <vAssertCalled>
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <vTaskSwitchContext+0xa8>)
 8005e3c:	4413      	add	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	3308      	adds	r3, #8
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d104      	bne.n	8005e60 <vTaskSwitchContext+0x80>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	4a0a      	ldr	r2, [pc, #40]	; (8005e90 <vTaskSwitchContext+0xb0>)
 8005e68:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <vTaskSwitchContext+0xb0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3350      	adds	r3, #80	; 0x50
 8005e70:	4a08      	ldr	r2, [pc, #32]	; (8005e94 <vTaskSwitchContext+0xb4>)
 8005e72:	6013      	str	r3, [r2, #0]
}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	2000034c 	.word	0x2000034c
 8005e80:	20000338 	.word	0x20000338
 8005e84:	2000032c 	.word	0x2000032c
 8005e88:	20000250 	.word	0x20000250
 8005e8c:	080138f0 	.word	0x080138f0
 8005e90:	2000024c 	.word	0x2000024c
 8005e94:	20000034 	.word	0x20000034

08005e98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d104      	bne.n	8005eb2 <vTaskPlaceOnEventList+0x1a>
 8005ea8:	4909      	ldr	r1, [pc, #36]	; (8005ed0 <vTaskPlaceOnEventList+0x38>)
 8005eaa:	f640 4011 	movw	r0, #3089	; 0xc11
 8005eae:	f7fa fe83 	bl	8000bb8 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <vTaskPlaceOnEventList+0x3c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3318      	adds	r3, #24
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fe fd2b 	bl	8004916 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	6838      	ldr	r0, [r7, #0]
 8005ec4:	f000 fd32 	bl	800692c <prvAddCurrentTaskToDelayedList>
}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	080138f0 	.word	0x080138f0
 8005ed4:	2000024c 	.word	0x2000024c

08005ed8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <vTaskPlaceOnUnorderedEventList+0x1c>
 8005eea:	4911      	ldr	r1, [pc, #68]	; (8005f30 <vTaskPlaceOnUnorderedEventList+0x58>)
 8005eec:	f640 4024 	movw	r0, #3108	; 0xc24
 8005ef0:	f7fa fe62 	bl	8000bb8 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 8005ef4:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <vTaskPlaceOnUnorderedEventList+0x5c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <vTaskPlaceOnUnorderedEventList+0x2e>
 8005efc:	490c      	ldr	r1, [pc, #48]	; (8005f30 <vTaskPlaceOnUnorderedEventList+0x58>)
 8005efe:	f640 4028 	movw	r0, #3112	; 0xc28
 8005f02:	f7fa fe59 	bl	8000bb8 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005f06:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <vTaskPlaceOnUnorderedEventList+0x60>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005f10:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <vTaskPlaceOnUnorderedEventList+0x60>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3318      	adds	r3, #24
 8005f18:	4619      	mov	r1, r3
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7fe fcd7 	bl	80048ce <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f20:	2101      	movs	r1, #1
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fd02 	bl	800692c <prvAddCurrentTaskToDelayedList>
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	080138f0 	.word	0x080138f0
 8005f34:	2000034c 	.word	0x2000034c
 8005f38:	2000024c 	.word	0x2000024c

08005f3c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <vTaskPlaceOnEventListRestricted+0x1c>
 8005f4e:	490d      	ldr	r1, [pc, #52]	; (8005f84 <vTaskPlaceOnEventListRestricted+0x48>)
 8005f50:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 8005f54:	f7fa fe30 	bl	8000bb8 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <vTaskPlaceOnEventListRestricted+0x4c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3318      	adds	r3, #24
 8005f5e:	4619      	mov	r1, r3
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7fe fcb4 	bl	80048ce <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 8005f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f70:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	68b8      	ldr	r0, [r7, #8]
 8005f76:	f000 fcd9 	bl	800692c <prvAddCurrentTaskToDelayedList>
    }
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	080138f0 	.word	0x080138f0
 8005f88:	2000024c 	.word	0x2000024c

08005f8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <xTaskRemoveFromEventList+0x20>
 8005fa2:	4922      	ldr	r1, [pc, #136]	; (800602c <xTaskRemoveFromEventList+0xa0>)
 8005fa4:	f44f 6047 	mov.w	r0, #3184	; 0xc70
 8005fa8:	f7fa fe06 	bl	8000bb8 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	3318      	adds	r3, #24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fce9 	bl	8004988 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb6:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <xTaskRemoveFromEventList+0xa4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d11c      	bne.n	8005ff8 <xTaskRemoveFromEventList+0x6c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fce0 	bl	8004988 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	2201      	movs	r2, #1
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	4b18      	ldr	r3, [pc, #96]	; (8006034 <xTaskRemoveFromEventList+0xa8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	4a17      	ldr	r2, [pc, #92]	; (8006034 <xTaskRemoveFromEventList+0xa8>)
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4a14      	ldr	r2, [pc, #80]	; (8006038 <xTaskRemoveFromEventList+0xac>)
 8005fe8:	441a      	add	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7fe fc6c 	bl	80048ce <vListInsertEnd>
 8005ff6:	e005      	b.n	8006004 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	3318      	adds	r3, #24
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	480f      	ldr	r0, [pc, #60]	; (800603c <xTaskRemoveFromEventList+0xb0>)
 8006000:	f7fe fc65 	bl	80048ce <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <xTaskRemoveFromEventList+0xb4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	429a      	cmp	r2, r3
 8006010:	d905      	bls.n	800601e <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006012:	2301      	movs	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006016:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <xTaskRemoveFromEventList+0xb8>)
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e001      	b.n	8006022 <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8006022:	68fb      	ldr	r3, [r7, #12]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	080138f0 	.word	0x080138f0
 8006030:	2000034c 	.word	0x2000034c
 8006034:	2000032c 	.word	0x2000032c
 8006038:	20000250 	.word	0x20000250
 800603c:	200002e4 	.word	0x200002e4
 8006040:	2000024c 	.word	0x2000024c
 8006044:	20000338 	.word	0x20000338

08006048 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 8006052:	4b23      	ldr	r3, [pc, #140]	; (80060e0 <vTaskRemoveFromUnorderedEventList+0x98>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <vTaskRemoveFromUnorderedEventList+0x1c>
 800605a:	4922      	ldr	r1, [pc, #136]	; (80060e4 <vTaskRemoveFromUnorderedEventList+0x9c>)
 800605c:	f640 40a8 	movw	r0, #3240	; 0xca8
 8006060:	f7fa fdaa 	bl	8000bb8 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	60fb      	str	r3, [r7, #12]
    configASSERT( pxUnblockedTCB );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <vTaskRemoveFromUnorderedEventList+0x3c>
 800607a:	491a      	ldr	r1, [pc, #104]	; (80060e4 <vTaskRemoveFromUnorderedEventList+0x9c>)
 800607c:	f44f 604b 	mov.w	r0, #3248	; 0xcb0
 8006080:	f7fa fd9a 	bl	8000bb8 <vAssertCalled>
    ( void ) uxListRemove( pxEventListItem );
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7fe fc7f 	bl	8004988 <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3304      	adds	r3, #4
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fc7a 	bl	8004988 <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	2201      	movs	r2, #1
 800609a:	409a      	lsls	r2, r3
 800609c:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <vTaskRemoveFromUnorderedEventList+0xa0>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	4a11      	ldr	r2, [pc, #68]	; (80060e8 <vTaskRemoveFromUnorderedEventList+0xa0>)
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4a0e      	ldr	r2, [pc, #56]	; (80060ec <vTaskRemoveFromUnorderedEventList+0xa4>)
 80060b4:	441a      	add	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3304      	adds	r3, #4
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f7fe fc06 	bl	80048ce <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <vTaskRemoveFromUnorderedEventList+0xa8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d902      	bls.n	80060d6 <vTaskRemoveFromUnorderedEventList+0x8e>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 80060d0:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <vTaskRemoveFromUnorderedEventList+0xac>)
 80060d2:	2201      	movs	r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
    }
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	2000034c 	.word	0x2000034c
 80060e4:	080138f0 	.word	0x080138f0
 80060e8:	2000032c 	.word	0x2000032c
 80060ec:	20000250 	.word	0x20000250
 80060f0:	2000024c 	.word	0x2000024c
 80060f4:	20000338 	.word	0x20000338

080060f8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <vTaskSetTimeOutState+0x18>
 8006106:	490a      	ldr	r1, [pc, #40]	; (8006130 <vTaskSetTimeOutState+0x38>)
 8006108:	f640 40d4 	movw	r0, #3284	; 0xcd4
 800610c:	f7fa fd54 	bl	8000bb8 <vAssertCalled>
    taskENTER_CRITICAL();
 8006110:	f001 fa5a 	bl	80075c8 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <vTaskSetTimeOutState+0x3c>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <vTaskSetTimeOutState+0x40>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8006124:	f001 fa7c 	bl	8007620 <vPortExitCritical>
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	080138f0 	.word	0x080138f0
 8006134:	2000033c 	.word	0x2000033c
 8006138:	20000328 	.word	0x20000328

0800613c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <vTaskInternalSetTimeOutState+0x24>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <vTaskInternalSetTimeOutState+0x28>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	605a      	str	r2, [r3, #4]
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	2000033c 	.word	0x2000033c
 8006164:	20000328 	.word	0x20000328

08006168 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <xTaskCheckForTimeOut+0x1a>
 8006178:	4926      	ldr	r1, [pc, #152]	; (8006214 <xTaskCheckForTimeOut+0xac>)
 800617a:	f640 40eb 	movw	r0, #3307	; 0xceb
 800617e:	f7fa fd1b 	bl	8000bb8 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <xTaskCheckForTimeOut+0x2a>
 8006188:	4922      	ldr	r1, [pc, #136]	; (8006214 <xTaskCheckForTimeOut+0xac>)
 800618a:	f640 40ec 	movw	r0, #3308	; 0xcec
 800618e:	f7fa fd13 	bl	8000bb8 <vAssertCalled>

    taskENTER_CRITICAL();
 8006192:	f001 fa19 	bl	80075c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006196:	4b20      	ldr	r3, [pc, #128]	; (8006218 <xTaskCheckForTimeOut+0xb0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ae:	d102      	bne.n	80061b6 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	e026      	b.n	8006204 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b18      	ldr	r3, [pc, #96]	; (800621c <xTaskCheckForTimeOut+0xb4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d00a      	beq.n	80061d8 <xTaskCheckForTimeOut+0x70>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d305      	bcc.n	80061d8 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e015      	b.n	8006204 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d20b      	bcs.n	80061fa <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1ad2      	subs	r2, r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff ffa4 	bl	800613c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e004      	b.n	8006204 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006200:	2301      	movs	r3, #1
 8006202:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8006204:	f001 fa0c 	bl	8007620 <vPortExitCritical>

    return xReturn;
 8006208:	697b      	ldr	r3, [r7, #20]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	080138f0 	.word	0x080138f0
 8006218:	20000328 	.word	0x20000328
 800621c:	2000033c 	.word	0x2000033c

08006220 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006224:	4b03      	ldr	r3, [pc, #12]	; (8006234 <vTaskMissedYield+0x14>)
 8006226:	2201      	movs	r2, #1
 8006228:	601a      	str	r2, [r3, #0]
}
 800622a:	bf00      	nop
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	20000338 	.word	0x20000338

08006238 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006240:	f000 f852 	bl	80062e8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <prvIdleTask+0x28>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d9f9      	bls.n	8006240 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <prvIdleTask+0x2c>)
 800624e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800625c:	e7f0      	b.n	8006240 <prvIdleTask+0x8>
 800625e:	bf00      	nop
 8006260:	20000250 	.word	0x20000250
 8006264:	e000ed04 	.word	0xe000ed04

08006268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800626e:	2300      	movs	r3, #0
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	e00c      	b.n	800628e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4a12      	ldr	r2, [pc, #72]	; (80062c8 <prvInitialiseTaskLists+0x60>)
 8006280:	4413      	add	r3, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe faf6 	bl	8004874 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3301      	adds	r3, #1
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b04      	cmp	r3, #4
 8006292:	d9ef      	bls.n	8006274 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006294:	480d      	ldr	r0, [pc, #52]	; (80062cc <prvInitialiseTaskLists+0x64>)
 8006296:	f7fe faed 	bl	8004874 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800629a:	480d      	ldr	r0, [pc, #52]	; (80062d0 <prvInitialiseTaskLists+0x68>)
 800629c:	f7fe faea 	bl	8004874 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80062a0:	480c      	ldr	r0, [pc, #48]	; (80062d4 <prvInitialiseTaskLists+0x6c>)
 80062a2:	f7fe fae7 	bl	8004874 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80062a6:	480c      	ldr	r0, [pc, #48]	; (80062d8 <prvInitialiseTaskLists+0x70>)
 80062a8:	f7fe fae4 	bl	8004874 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80062ac:	480b      	ldr	r0, [pc, #44]	; (80062dc <prvInitialiseTaskLists+0x74>)
 80062ae:	f7fe fae1 	bl	8004874 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80062b2:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <prvInitialiseTaskLists+0x78>)
 80062b4:	4a05      	ldr	r2, [pc, #20]	; (80062cc <prvInitialiseTaskLists+0x64>)
 80062b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <prvInitialiseTaskLists+0x7c>)
 80062ba:	4a05      	ldr	r2, [pc, #20]	; (80062d0 <prvInitialiseTaskLists+0x68>)
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000250 	.word	0x20000250
 80062cc:	200002b4 	.word	0x200002b4
 80062d0:	200002c8 	.word	0x200002c8
 80062d4:	200002e4 	.word	0x200002e4
 80062d8:	200002f8 	.word	0x200002f8
 80062dc:	20000310 	.word	0x20000310
 80062e0:	200002dc 	.word	0x200002dc
 80062e4:	200002e0 	.word	0x200002e0

080062e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ee:	e019      	b.n	8006324 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80062f0:	f001 f96a 	bl	80075c8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f4:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <prvCheckTasksWaitingTermination+0x4c>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe fb41 	bl	8004988 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <prvCheckTasksWaitingTermination+0x50>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3b01      	subs	r3, #1
 800630c:	4a0a      	ldr	r2, [pc, #40]	; (8006338 <prvCheckTasksWaitingTermination+0x50>)
 800630e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006310:	4b0a      	ldr	r3, [pc, #40]	; (800633c <prvCheckTasksWaitingTermination+0x54>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3b01      	subs	r3, #1
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <prvCheckTasksWaitingTermination+0x54>)
 8006318:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800631a:	f001 f981 	bl	8007620 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f80e 	bl	8006340 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006324:	4b05      	ldr	r3, [pc, #20]	; (800633c <prvCheckTasksWaitingTermination+0x54>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e1      	bne.n	80062f0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	200002f8 	.word	0x200002f8
 8006338:	20000324 	.word	0x20000324
 800633c:	2000030c 	.word	0x2000030c

08006340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
         * to the task to free any memory allocated at the application level.
         * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
         * for additional information. */
        #if ( configUSE_NEWLIB_REENTRANT == 1 )
            {
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3350      	adds	r3, #80	; 0x50
 800634c:	4618      	mov	r0, r3
 800634e:	f00b fed9 	bl	8012104 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	4618      	mov	r0, r3
 8006358:	f000 ff18 	bl	800718c <vPortFree>
                vPortFree( pxTCB );
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 ff15 	bl	800718c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <prvResetNextTaskUnblockTime+0x30>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d104      	bne.n	8006384 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <prvResetNextTaskUnblockTime+0x34>)
 800637c:	f04f 32ff 	mov.w	r2, #4294967295
 8006380:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006382:	e005      	b.n	8006390 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <prvResetNextTaskUnblockTime+0x30>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a04      	ldr	r2, [pc, #16]	; (80063a0 <prvResetNextTaskUnblockTime+0x34>)
 800638e:	6013      	str	r3, [r2, #0]
}
 8006390:	bf00      	nop
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	200002dc 	.word	0x200002dc
 80063a0:	20000344 	.word	0x20000344

080063a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <xTaskGetCurrentTaskHandle+0x1c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	607b      	str	r3, [r7, #4]

        return xReturn;
 80063b0:	687b      	ldr	r3, [r7, #4]
    }
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	2000024c 	.word	0x2000024c

080063c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <xTaskGetSchedulerState+0x34>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80063d2:	2301      	movs	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
 80063d6:	e008      	b.n	80063ea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d8:	4b08      	ldr	r3, [pc, #32]	; (80063fc <xTaskGetSchedulerState+0x38>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80063e0:	2302      	movs	r3, #2
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	e001      	b.n	80063ea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80063ea:	687b      	ldr	r3, [r7, #4]
    }
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	20000330 	.word	0x20000330
 80063fc:	2000034c 	.word	0x2000034c

08006400 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d05e      	beq.n	80064d4 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	4b31      	ldr	r3, [pc, #196]	; (80064e0 <xTaskPriorityInherit+0xe0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	429a      	cmp	r2, r3
 8006422:	d24e      	bcs.n	80064c2 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	db06      	blt.n	800643a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800642c:	4b2c      	ldr	r3, [pc, #176]	; (80064e0 <xTaskPriorityInherit+0xe0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	f1c3 0205 	rsb	r2, r3, #5
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6959      	ldr	r1, [r3, #20]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4a26      	ldr	r2, [pc, #152]	; (80064e4 <xTaskPriorityInherit+0xe4>)
 800644c:	4413      	add	r3, r2
 800644e:	4299      	cmp	r1, r3
 8006450:	d12f      	bne.n	80064b2 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	3304      	adds	r3, #4
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fa96 	bl	8004988 <uxListRemove>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	2201      	movs	r2, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	43da      	mvns	r2, r3
 800646e:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <xTaskPriorityInherit+0xe8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4013      	ands	r3, r2
 8006474:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <xTaskPriorityInherit+0xe8>)
 8006476:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006478:	4b19      	ldr	r3, [pc, #100]	; (80064e0 <xTaskPriorityInherit+0xe0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	2201      	movs	r2, #1
 8006488:	409a      	lsls	r2, r3
 800648a:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <xTaskPriorityInherit+0xe8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4313      	orrs	r3, r2
 8006490:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <xTaskPriorityInherit+0xe8>)
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4a10      	ldr	r2, [pc, #64]	; (80064e4 <xTaskPriorityInherit+0xe4>)
 80064a2:	441a      	add	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f7fe fa0f 	bl	80048ce <vListInsertEnd>
 80064b0:	e004      	b.n	80064bc <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064b2:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <xTaskPriorityInherit+0xe0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80064bc:	2301      	movs	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e008      	b.n	80064d4 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <xTaskPriorityInherit+0xe0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d201      	bcs.n	80064d4 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80064d4:	68fb      	ldr	r3, [r7, #12]
    }
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	2000024c 	.word	0x2000024c
 80064e4:	20000250 	.word	0x20000250
 80064e8:	2000032c 	.word	0x2000032c

080064ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d057      	beq.n	80065b2 <xTaskPriorityDisinherit+0xc6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006502:	4b2e      	ldr	r3, [pc, #184]	; (80065bc <xTaskPriorityDisinherit+0xd0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	d004      	beq.n	8006516 <xTaskPriorityDisinherit+0x2a>
 800650c:	492c      	ldr	r1, [pc, #176]	; (80065c0 <xTaskPriorityDisinherit+0xd4>)
 800650e:	f241 003d 	movw	r0, #4157	; 0x103d
 8006512:	f7fa fb51 	bl	8000bb8 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <xTaskPriorityDisinherit+0x3c>
 800651e:	4928      	ldr	r1, [pc, #160]	; (80065c0 <xTaskPriorityDisinherit+0xd4>)
 8006520:	f241 003e 	movw	r0, #4158	; 0x103e
 8006524:	f7fa fb48 	bl	8000bb8 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652c:	1e5a      	subs	r2, r3, #1
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653a:	429a      	cmp	r2, r3
 800653c:	d039      	beq.n	80065b2 <xTaskPriorityDisinherit+0xc6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d135      	bne.n	80065b2 <xTaskPriorityDisinherit+0xc6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	3304      	adds	r3, #4
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe fa1c 	bl	8004988 <uxListRemove>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	2201      	movs	r2, #1
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	43da      	mvns	r2, r3
 8006562:	4b18      	ldr	r3, [pc, #96]	; (80065c4 <xTaskPriorityDisinherit+0xd8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4013      	ands	r3, r2
 8006568:	4a16      	ldr	r2, [pc, #88]	; (80065c4 <xTaskPriorityDisinherit+0xd8>)
 800656a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	f1c3 0205 	rsb	r2, r3, #5
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	2201      	movs	r2, #1
 8006586:	409a      	lsls	r2, r3
 8006588:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <xTaskPriorityDisinherit+0xd8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4313      	orrs	r3, r2
 800658e:	4a0d      	ldr	r2, [pc, #52]	; (80065c4 <xTaskPriorityDisinherit+0xd8>)
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <xTaskPriorityDisinherit+0xdc>)
 80065a0:	441a      	add	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f7fe f990 	bl	80048ce <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80065ae:	2301      	movs	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80065b2:	68fb      	ldr	r3, [r7, #12]
    }
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	2000024c 	.word	0x2000024c
 80065c0:	080138f0 	.word	0x080138f0
 80065c4:	2000032c 	.word	0x2000032c
 80065c8:	20000250 	.word	0x20000250

080065cc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80065da:	2301      	movs	r3, #1
 80065dc:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d06b      	beq.n	80066bc <vTaskPriorityDisinheritAfterTimeout+0xf0>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d104      	bne.n	80065f6 <vTaskPriorityDisinheritAfterTimeout+0x2a>
 80065ec:	4935      	ldr	r1, [pc, #212]	; (80066c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80065ee:	f241 008d 	movw	r0, #4237	; 0x108d
 80065f2:	f7fa fae1 	bl	8000bb8 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d902      	bls.n	8006606 <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e002      	b.n	800660c <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660a:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	429a      	cmp	r2, r3
 8006614:	d052      	beq.n	80066bc <vTaskPriorityDisinheritAfterTimeout+0xf0>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	d14d      	bne.n	80066bc <vTaskPriorityDisinheritAfterTimeout+0xf0>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8006620:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	429a      	cmp	r2, r3
 8006628:	d104      	bne.n	8006634 <vTaskPriorityDisinheritAfterTimeout+0x68>
 800662a:	4926      	ldr	r1, [pc, #152]	; (80066c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800662c:	f241 00a8 	movw	r0, #4264	; 0x10a8
 8006630:	f7fa fac2 	bl	8000bb8 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	db04      	blt.n	8006652 <vTaskPriorityDisinheritAfterTimeout+0x86>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f1c3 0205 	rsb	r2, r3, #5
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	6959      	ldr	r1, [r3, #20]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4a1a      	ldr	r2, [pc, #104]	; (80066cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006662:	4413      	add	r3, r2
 8006664:	4299      	cmp	r1, r3
 8006666:	d129      	bne.n	80066bc <vTaskPriorityDisinheritAfterTimeout+0xf0>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	3304      	adds	r3, #4
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe f98b 	bl	8004988 <uxListRemove>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <vTaskPriorityDisinheritAfterTimeout+0xc2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	2201      	movs	r2, #1
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	43da      	mvns	r2, r3
 8006684:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4013      	ands	r3, r2
 800668a:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800668c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	2201      	movs	r2, #1
 8006694:	409a      	lsls	r2, r3
 8006696:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4313      	orrs	r3, r2
 800669c:	4a0c      	ldr	r2, [pc, #48]	; (80066d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4a07      	ldr	r2, [pc, #28]	; (80066cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066ae:	441a      	add	r2, r3
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f7fe f909 	bl	80048ce <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80066bc:	bf00      	nop
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	080138f0 	.word	0x080138f0
 80066c8:	2000024c 	.word	0x2000024c
 80066cc:	20000250 	.word	0x20000250
 80066d0:	2000032c 	.word	0x2000032c

080066d4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80066da:	4b09      	ldr	r3, [pc, #36]	; (8006700 <uxTaskResetEventItemValue+0x2c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e2:	4b07      	ldr	r3, [pc, #28]	; (8006700 <uxTaskResetEventItemValue+0x2c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <uxTaskResetEventItemValue+0x2c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f1c2 0205 	rsb	r2, r2, #5
 80066f0:	619a      	str	r2, [r3, #24]

    return uxReturn;
 80066f2:	687b      	ldr	r3, [r7, #4]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	2000024c 	.word	0x2000024c

08006704 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <pvTaskIncrementMutexHeldCount+0x24>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <pvTaskIncrementMutexHeldCount+0x24>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006716:	3201      	adds	r2, #1
 8006718:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800671a:	4b03      	ldr	r3, [pc, #12]	; (8006728 <pvTaskIncrementMutexHeldCount+0x24>)
 800671c:	681b      	ldr	r3, [r3, #0]
    }
 800671e:	4618      	mov	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	2000024c 	.word	0x2000024c

0800672c <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <ulTaskGenericNotifyTake+0x1c>
 800673e:	492a      	ldr	r1, [pc, #168]	; (80067e8 <ulTaskGenericNotifyTake+0xbc>)
 8006740:	f241 2052 	movw	r0, #4690	; 0x1252
 8006744:	f7fa fa38 	bl	8000bb8 <vAssertCalled>

        taskENTER_CRITICAL();
 8006748:	f000 ff3e 	bl	80075c8 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800674c:	4b27      	ldr	r3, [pc, #156]	; (80067ec <ulTaskGenericNotifyTake+0xc0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	322c      	adds	r2, #44	; 0x2c
 8006754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d115      	bne.n	8006788 <ulTaskGenericNotifyTake+0x5c>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800675c:	4b23      	ldr	r3, [pc, #140]	; (80067ec <ulTaskGenericNotifyTake+0xc0>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	33b4      	adds	r3, #180	; 0xb4
 8006766:	2201      	movs	r2, #1
 8006768:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <ulTaskGenericNotifyTake+0x5c>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006770:	2101      	movs	r1, #1
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f8da 	bl	800692c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006778:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <ulTaskGenericNotifyTake+0xc4>)
 800677a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006788:	f000 ff4a 	bl	8007620 <vPortExitCritical>

        taskENTER_CRITICAL();
 800678c:	f000 ff1c 	bl	80075c8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006790:	4b16      	ldr	r3, [pc, #88]	; (80067ec <ulTaskGenericNotifyTake+0xc0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	322c      	adds	r2, #44	; 0x2c
 8006798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d012      	beq.n	80067ca <ulTaskGenericNotifyTake+0x9e>
            {
                if( xClearCountOnExit != pdFALSE )
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <ulTaskGenericNotifyTake+0x8e>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 80067aa:	4b10      	ldr	r3, [pc, #64]	; (80067ec <ulTaskGenericNotifyTake+0xc0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	322c      	adds	r2, #44	; 0x2c
 80067b2:	2100      	movs	r1, #0
 80067b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80067b8:	e007      	b.n	80067ca <ulTaskGenericNotifyTake+0x9e>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 80067ba:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <ulTaskGenericNotifyTake+0xc0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	1e51      	subs	r1, r2, #1
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	322c      	adds	r2, #44	; 0x2c
 80067c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80067ca:	4b08      	ldr	r3, [pc, #32]	; (80067ec <ulTaskGenericNotifyTake+0xc0>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	33b4      	adds	r3, #180	; 0xb4
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80067d8:	f000 ff22 	bl	8007620 <vPortExitCritical>

        return ulReturn;
 80067dc:	697b      	ldr	r3, [r7, #20]
    }
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	080138f0 	.word	0x080138f0
 80067ec:	2000024c 	.word	0x2000024c
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <vTaskGenericNotifyGiveFromISR+0x1c>
 8006806:	4942      	ldr	r1, [pc, #264]	; (8006910 <vTaskGenericNotifyGiveFromISR+0x11c>)
 8006808:	f241 30f8 	movw	r0, #5112	; 0x13f8
 800680c:	f7fa f9d4 	bl	8000bb8 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d004      	beq.n	8006820 <vTaskGenericNotifyGiveFromISR+0x2c>
 8006816:	493e      	ldr	r1, [pc, #248]	; (8006910 <vTaskGenericNotifyGiveFromISR+0x11c>)
 8006818:	f241 30f9 	movw	r0, #5113	; 0x13f9
 800681c:	f7fa f9cc 	bl	8000bb8 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006820:	f000 ffac 	bl	800777c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 8006828:	f3ef 8211 	mrs	r2, BASEPRI
 800682c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006830:	b672      	cpsid	i
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	b662      	cpsie	i
 8006840:	61ba      	str	r2, [r7, #24]
 8006842:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8006844:	69bb      	ldr	r3, [r7, #24]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006846:	623b      	str	r3, [r7, #32]
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	4413      	add	r3, r2
 800684e:	33b4      	adds	r3, #180	; 0xb4
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	77fb      	strb	r3, [r7, #31]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4413      	add	r3, r2
 800685a:	33b4      	adds	r3, #180	; 0xb4
 800685c:	2202      	movs	r2, #2
 800685e:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	322c      	adds	r2, #44	; 0x2c
 8006866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	322c      	adds	r2, #44	; 0x2c
 8006872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006876:	7ffb      	ldrb	r3, [r7, #31]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d13f      	bne.n	80068fc <vTaskGenericNotifyGiveFromISR+0x108>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	d004      	beq.n	800688e <vTaskGenericNotifyGiveFromISR+0x9a>
 8006884:	4922      	ldr	r1, [pc, #136]	; (8006910 <vTaskGenericNotifyGiveFromISR+0x11c>)
 8006886:	f241 401f 	movw	r0, #5151	; 0x141f
 800688a:	f7fa f995 	bl	8000bb8 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <vTaskGenericNotifyGiveFromISR+0x120>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d11c      	bne.n	80068d0 <vTaskGenericNotifyGiveFromISR+0xdc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	3304      	adds	r3, #4
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe f874 	bl	8004988 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	2201      	movs	r2, #1
 80068a6:	409a      	lsls	r2, r3
 80068a8:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <vTaskGenericNotifyGiveFromISR+0x124>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	4a1a      	ldr	r2, [pc, #104]	; (8006918 <vTaskGenericNotifyGiveFromISR+0x124>)
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b6:	4613      	mov	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4a17      	ldr	r2, [pc, #92]	; (800691c <vTaskGenericNotifyGiveFromISR+0x128>)
 80068c0:	441a      	add	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	3304      	adds	r3, #4
 80068c6:	4619      	mov	r1, r3
 80068c8:	4610      	mov	r0, r2
 80068ca:	f7fe f800 	bl	80048ce <vListInsertEnd>
 80068ce:	e005      	b.n	80068dc <vTaskGenericNotifyGiveFromISR+0xe8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	3318      	adds	r3, #24
 80068d4:	4619      	mov	r1, r3
 80068d6:	4812      	ldr	r0, [pc, #72]	; (8006920 <vTaskGenericNotifyGiveFromISR+0x12c>)
 80068d8:	f7fd fff9 	bl	80048ce <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e0:	4b10      	ldr	r3, [pc, #64]	; (8006924 <vTaskGenericNotifyGiveFromISR+0x130>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d908      	bls.n	80068fc <vTaskGenericNotifyGiveFromISR+0x108>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <vTaskGenericNotifyGiveFromISR+0x102>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80068f6:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <vTaskGenericNotifyGiveFromISR+0x134>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f383 8811 	msr	BASEPRI, r3
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8006906:	bf00      	nop
 8006908:	3728      	adds	r7, #40	; 0x28
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	080138f0 	.word	0x080138f0
 8006914:	2000034c 	.word	0x2000034c
 8006918:	2000032c 	.word	0x2000032c
 800691c:	20000250 	.word	0x20000250
 8006920:	200002e4 	.word	0x200002e4
 8006924:	2000024c 	.word	0x2000024c
 8006928:	20000338 	.word	0x20000338

0800692c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006936:	4b29      	ldr	r3, [pc, #164]	; (80069dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800693c:	4b28      	ldr	r3, [pc, #160]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3304      	adds	r3, #4
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe f820 	bl	8004988 <uxListRemove>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800694e:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	2201      	movs	r2, #1
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43da      	mvns	r2, r3
 800695c:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4013      	ands	r3, r2
 8006962:	4a20      	ldr	r2, [pc, #128]	; (80069e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006964:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d10a      	bne.n	8006984 <prvAddCurrentTaskToDelayedList+0x58>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006974:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3304      	adds	r3, #4
 800697a:	4619      	mov	r1, r3
 800697c:	481a      	ldr	r0, [pc, #104]	; (80069e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800697e:	f7fd ffa6 	bl	80048ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006982:	e026      	b.n	80069d2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800698c:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	429a      	cmp	r2, r3
 800699a:	d209      	bcs.n	80069b0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800699c:	4b13      	ldr	r3, [pc, #76]	; (80069ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f7fd ffb4 	bl	8004916 <vListInsert>
}
 80069ae:	e010      	b.n	80069d2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b0:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f7fd ffaa 	bl	8004916 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80069c2:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d202      	bcs.n	80069d2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80069cc:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6013      	str	r3, [r2, #0]
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000328 	.word	0x20000328
 80069e0:	2000024c 	.word	0x2000024c
 80069e4:	2000032c 	.word	0x2000032c
 80069e8:	20000310 	.word	0x20000310
 80069ec:	200002e0 	.word	0x200002e0
 80069f0:	200002dc 	.word	0x200002dc
 80069f4:	20000344 	.word	0x20000344

080069f8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006a02:	f000 fad3 	bl	8006fac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006a06:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <xTimerCreateTimerTask+0x48>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <xTimerCreateTimerTask+0x4c>)
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	2304      	movs	r3, #4
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	2300      	movs	r3, #0
 8006a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006a1c:	490a      	ldr	r1, [pc, #40]	; (8006a48 <xTimerCreateTimerTask+0x50>)
 8006a1e:	480b      	ldr	r0, [pc, #44]	; (8006a4c <xTimerCreateTimerTask+0x54>)
 8006a20:	f7fe fe94 	bl	800574c <xTaskCreate>
 8006a24:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <xTimerCreateTimerTask+0x3e>
 8006a2c:	4908      	ldr	r1, [pc, #32]	; (8006a50 <xTimerCreateTimerTask+0x58>)
 8006a2e:	f240 100d 	movw	r0, #269	; 0x10d
 8006a32:	f7fa f8c1 	bl	8000bb8 <vAssertCalled>
        return xReturn;
 8006a36:	687b      	ldr	r3, [r7, #4]
    }
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000380 	.word	0x20000380
 8006a44:	20000384 	.word	0x20000384
 8006a48:	0801392c 	.word	0x0801392c
 8006a4c:	08006b7d 	.word	0x08006b7d
 8006a50:	08013934 	.word	0x08013934

08006a54 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <xTimerGenericCommand+0x22>
 8006a6c:	491c      	ldr	r1, [pc, #112]	; (8006ae0 <xTimerGenericCommand+0x8c>)
 8006a6e:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8006a72:	f7fa f8a1 	bl	8000bb8 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006a76:	4b1b      	ldr	r3, [pc, #108]	; (8006ae4 <xTimerGenericCommand+0x90>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d02a      	beq.n	8006ad4 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b05      	cmp	r3, #5
 8006a8e:	dc18      	bgt.n	8006ac2 <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a90:	f7ff fc98 	bl	80063c4 <xTaskGetSchedulerState>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d109      	bne.n	8006aae <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <xTimerGenericCommand+0x90>)
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	f107 0114 	add.w	r1, r7, #20
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	f7fe f893 	bl	8004bd0 <xQueueGenericSend>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24
 8006aac:	e012      	b.n	8006ad4 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006aae:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <xTimerGenericCommand+0x90>)
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	f107 0114 	add.w	r1, r7, #20
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f7fe f889 	bl	8004bd0 <xQueueGenericSend>
 8006abe:	6278      	str	r0, [r7, #36]	; 0x24
 8006ac0:	e008      	b.n	8006ad4 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ac2:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <xTimerGenericCommand+0x90>)
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f107 0114 	add.w	r1, r7, #20
 8006aca:	2300      	movs	r3, #0
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	f7fe f983 	bl	8004dd8 <xQueueGenericSendFromISR>
 8006ad2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3728      	adds	r7, #40	; 0x28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	08013934 	.word	0x08013934
 8006ae4:	20000380 	.word	0x20000380

08006ae8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af2:	4b20      	ldr	r3, [pc, #128]	; (8006b74 <prvProcessExpiredTimer+0x8c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fd ff41 	bl	8004988 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01d      	beq.n	8006b50 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	18d1      	adds	r1, r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 f8cf 	bl	8006cc4 <prvInsertTimerInActiveList>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01a      	beq.n	8006b62 <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2300      	movs	r3, #0
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	2100      	movs	r1, #0
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff ff8c 	bl	8006a54 <xTimerGenericCommand>
 8006b3c:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10e      	bne.n	8006b62 <prvProcessExpiredTimer+0x7a>
 8006b44:	490c      	ldr	r1, [pc, #48]	; (8006b78 <prvProcessExpiredTimer+0x90>)
 8006b46:	f44f 7005 	mov.w	r0, #532	; 0x214
 8006b4a:	f7fa f835 	bl	8000bb8 <vAssertCalled>
 8006b4e:	e008      	b.n	8006b62 <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	4798      	blx	r3
    }
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000378 	.word	0x20000378
 8006b78:	08013934 	.word	0x08013934

08006b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b84:	f107 0308 	add.w	r3, r7, #8
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f857 	bl	8006c3c <prvGetNextExpireTime>
 8006b8e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4619      	mov	r1, r3
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f803 	bl	8006ba0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006b9a:	f000 f8d5 	bl	8006d48 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b9e:	e7f1      	b.n	8006b84 <prvTimerTask+0x8>

08006ba0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006baa:	f7fe ffaf 	bl	8005b0c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bae:	f107 0308 	add.w	r3, r7, #8
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f866 	bl	8006c84 <prvSampleTimeNow>
 8006bb8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d130      	bne.n	8006c22 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <prvProcessTimerOrBlockTask+0x3c>
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d806      	bhi.n	8006bdc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006bce:	f7fe ffab 	bl	8005b28 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bd2:	68f9      	ldr	r1, [r7, #12]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ff87 	bl	8006ae8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006bda:	e024      	b.n	8006c26 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006be2:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <prvProcessTimerOrBlockTask+0x90>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <prvProcessTimerOrBlockTask+0x50>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <prvProcessTimerOrBlockTask+0x52>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <prvProcessTimerOrBlockTask+0x94>)
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7fe fd17 	bl	8005634 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006c06:	f7fe ff8f 	bl	8005b28 <xTaskResumeAll>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <prvProcessTimerOrBlockTask+0x98>)
 8006c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
    }
 8006c20:	e001      	b.n	8006c26 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006c22:	f7fe ff81 	bl	8005b28 <xTaskResumeAll>
    }
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	2000037c 	.word	0x2000037c
 8006c34:	20000380 	.word	0x20000380
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <prvGetNextExpireTime+0x44>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <prvGetNextExpireTime+0x16>
 8006c4e:	2201      	movs	r2, #1
 8006c50:	e000      	b.n	8006c54 <prvGetNextExpireTime+0x18>
 8006c52:	2200      	movs	r2, #0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d105      	bne.n	8006c6c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <prvGetNextExpireTime+0x44>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	e001      	b.n	8006c70 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006c70:	68fb      	ldr	r3, [r7, #12]
    }
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20000378 	.word	0x20000378

08006c84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006c8c:	f7fe ffe4 	bl	8005c58 <xTaskGetTickCount>
 8006c90:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006c92:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <prvSampleTimeNow+0x3c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d205      	bcs.n	8006ca8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006c9c:	f000 f926 	bl	8006eec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	e002      	b.n	8006cae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006cae:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <prvSampleTimeNow+0x3c>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
    }
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000388 	.word	0x20000388

08006cc4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d812      	bhi.n	8006d10 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	1ad2      	subs	r2, r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d302      	bcc.n	8006cfe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	e01b      	b.n	8006d36 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006cfe:	4b10      	ldr	r3, [pc, #64]	; (8006d40 <prvInsertTimerInActiveList+0x7c>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fd fe04 	bl	8004916 <vListInsert>
 8006d0e:	e012      	b.n	8006d36 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d206      	bcs.n	8006d26 <prvInsertTimerInActiveList+0x62>
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e007      	b.n	8006d36 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <prvInsertTimerInActiveList+0x80>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f7fd fdf0 	bl	8004916 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006d36:	697b      	ldr	r3, [r7, #20]
    }
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	2000037c 	.word	0x2000037c
 8006d44:	20000378 	.word	0x20000378

08006d48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08c      	sub	sp, #48	; 0x30
 8006d4c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d4e:	e0b9      	b.n	8006ec4 <prvProcessReceivedCommands+0x17c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da13      	bge.n	8006d7e <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d56:	f107 0308 	add.w	r3, r7, #8
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <prvProcessReceivedCommands+0x26>
 8006d64:	495f      	ldr	r1, [pc, #380]	; (8006ee4 <prvProcessReceivedCommands+0x19c>)
 8006d66:	f240 20fa 	movw	r0, #762	; 0x2fa
 8006d6a:	f7f9 ff25 	bl	8000bb8 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d74:	6850      	ldr	r0, [r2, #4]
 8006d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d78:	6892      	ldr	r2, [r2, #8]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f2c0 809e 	blt.w	8006ec2 <prvProcessReceivedCommands+0x17a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fd fdf6 	bl	8004988 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d9c:	1d3b      	adds	r3, r7, #4
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff ff70 	bl	8006c84 <prvSampleTimeNow>
 8006da4:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b09      	cmp	r3, #9
 8006daa:	f200 808b 	bhi.w	8006ec4 <prvProcessReceivedCommands+0x17c>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <prvProcessReceivedCommands+0x6c>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006ddd 	.word	0x08006ddd
 8006db8:	08006ddd 	.word	0x08006ddd
 8006dbc:	08006ddd 	.word	0x08006ddd
 8006dc0:	08006e47 	.word	0x08006e47
 8006dc4:	08006e5b 	.word	0x08006e5b
 8006dc8:	08006e99 	.word	0x08006e99
 8006dcc:	08006ddd 	.word	0x08006ddd
 8006dd0:	08006ddd 	.word	0x08006ddd
 8006dd4:	08006e47 	.word	0x08006e47
 8006dd8:	08006e5b 	.word	0x08006e5b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	18d1      	adds	r1, r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	6a38      	ldr	r0, [r7, #32]
 8006dfc:	f7ff ff62 	bl	8006cc4 <prvInsertTimerInActiveList>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d05e      	beq.n	8006ec4 <prvProcessReceivedCommands+0x17c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	6a38      	ldr	r0, [r7, #32]
 8006e0c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d053      	beq.n	8006ec4 <prvProcessReceivedCommands+0x17c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	441a      	add	r2, r3
 8006e24:	2300      	movs	r3, #0
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6a38      	ldr	r0, [r7, #32]
 8006e2e:	f7ff fe11 	bl	8006a54 <xTimerGenericCommand>
 8006e32:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d144      	bne.n	8006ec4 <prvProcessReceivedCommands+0x17c>
 8006e3a:	492a      	ldr	r1, [pc, #168]	; (8006ee4 <prvProcessReceivedCommands+0x19c>)
 8006e3c:	f240 3036 	movw	r0, #822	; 0x336
 8006e40:	f7f9 feba 	bl	8000bb8 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006e44:	e03e      	b.n	8006ec4 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006e58:	e034      	b.n	8006ec4 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d104      	bne.n	8006e84 <prvProcessReceivedCommands+0x13c>
 8006e7a:	491a      	ldr	r1, [pc, #104]	; (8006ee4 <prvProcessReceivedCommands+0x19c>)
 8006e7c:	f240 304f 	movw	r0, #847	; 0x34f
 8006e80:	f7f9 fe9a 	bl	8000bb8 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	18d1      	adds	r1, r2, r3
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	6a38      	ldr	r0, [r7, #32]
 8006e92:	f7ff ff17 	bl	8006cc4 <prvInsertTimerInActiveList>
                        break;
 8006e96:	e015      	b.n	8006ec4 <prvProcessReceivedCommands+0x17c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d103      	bne.n	8006eae <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 8006ea6:	6a38      	ldr	r0, [r7, #32]
 8006ea8:	f000 f970 	bl	800718c <vPortFree>
 8006eac:	e00a      	b.n	8006ec4 <prvProcessReceivedCommands+0x17c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006ec0:	e000      	b.n	8006ec4 <prvProcessReceivedCommands+0x17c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006ec2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ec4:	4b08      	ldr	r3, [pc, #32]	; (8006ee8 <prvProcessReceivedCommands+0x1a0>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f107 0108 	add.w	r1, r7, #8
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe f82e 	bl	8004f30 <xQueueReceive>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f47f af3a 	bne.w	8006d50 <prvProcessReceivedCommands+0x8>
        }
    }
 8006edc:	bf00      	nop
 8006ede:	3728      	adds	r7, #40	; 0x28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	08013934 	.word	0x08013934
 8006ee8:	20000380 	.word	0x20000380

08006eec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ef2:	e042      	b.n	8006f7a <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ef4:	4b2a      	ldr	r3, [pc, #168]	; (8006fa0 <prvSwitchTimerLists+0xb4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006efe:	4b28      	ldr	r3, [pc, #160]	; (8006fa0 <prvSwitchTimerLists+0xb4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fd fd3b 	bl	8004988 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d028      	beq.n	8006f7a <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	4413      	add	r3, r2
 8006f30:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d90e      	bls.n	8006f58 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f46:	4b16      	ldr	r3, [pc, #88]	; (8006fa0 <prvSwitchTimerLists+0xb4>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4610      	mov	r0, r2
 8006f52:	f7fd fce0 	bl	8004916 <vListInsert>
 8006f56:	e010      	b.n	8006f7a <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	2100      	movs	r1, #0
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fd76 	bl	8006a54 <xTimerGenericCommand>
 8006f68:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <prvSwitchTimerLists+0x8e>
 8006f70:	490c      	ldr	r1, [pc, #48]	; (8006fa4 <prvSwitchTimerLists+0xb8>)
 8006f72:	f240 30a9 	movw	r0, #937	; 0x3a9
 8006f76:	f7f9 fe1f 	bl	8000bb8 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f7a:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <prvSwitchTimerLists+0xb4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1b7      	bne.n	8006ef4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006f84:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <prvSwitchTimerLists+0xb4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006f8a:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <prvSwitchTimerLists+0xbc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <prvSwitchTimerLists+0xb4>)
 8006f90:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006f92:	4a05      	ldr	r2, [pc, #20]	; (8006fa8 <prvSwitchTimerLists+0xbc>)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6013      	str	r3, [r2, #0]
    }
 8006f98:	bf00      	nop
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20000378 	.word	0x20000378
 8006fa4:	08013934 	.word	0x08013934
 8006fa8:	2000037c 	.word	0x2000037c

08006fac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006fb0:	f000 fb0a 	bl	80075c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006fb4:	4b12      	ldr	r3, [pc, #72]	; (8007000 <prvCheckForValidListAndQueue+0x54>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d11d      	bne.n	8006ff8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006fbc:	4811      	ldr	r0, [pc, #68]	; (8007004 <prvCheckForValidListAndQueue+0x58>)
 8006fbe:	f7fd fc59 	bl	8004874 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006fc2:	4811      	ldr	r0, [pc, #68]	; (8007008 <prvCheckForValidListAndQueue+0x5c>)
 8006fc4:	f7fd fc56 	bl	8004874 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006fc8:	4b10      	ldr	r3, [pc, #64]	; (800700c <prvCheckForValidListAndQueue+0x60>)
 8006fca:	4a0e      	ldr	r2, [pc, #56]	; (8007004 <prvCheckForValidListAndQueue+0x58>)
 8006fcc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006fce:	4b10      	ldr	r3, [pc, #64]	; (8007010 <prvCheckForValidListAndQueue+0x64>)
 8006fd0:	4a0d      	ldr	r2, [pc, #52]	; (8007008 <prvCheckForValidListAndQueue+0x5c>)
 8006fd2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2110      	movs	r1, #16
 8006fd8:	2005      	movs	r0, #5
 8006fda:	f7fd fd63 	bl	8004aa4 <xQueueGenericCreate>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <prvCheckForValidListAndQueue+0x54>)
 8006fe2:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006fe4:	4b06      	ldr	r3, [pc, #24]	; (8007000 <prvCheckForValidListAndQueue+0x54>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <prvCheckForValidListAndQueue+0x54>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4908      	ldr	r1, [pc, #32]	; (8007014 <prvCheckForValidListAndQueue+0x68>)
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe facc 	bl	8005590 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006ff8:	f000 fb12 	bl	8007620 <vPortExitCritical>
    }
 8006ffc:	bf00      	nop
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000380 	.word	0x20000380
 8007004:	20000350 	.word	0x20000350
 8007008:	20000364 	.word	0x20000364
 800700c:	20000378 	.word	0x20000378
 8007010:	2000037c 	.word	0x2000037c
 8007014:	0801395c 	.word	0x0801395c

08007018 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8007024:	f7fe fd72 	bl	8005b0c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007028:	4b51      	ldr	r3, [pc, #324]	; (8007170 <pvPortMalloc+0x158>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007030:	f000 f904 	bl	800723c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007034:	4b4f      	ldr	r3, [pc, #316]	; (8007174 <pvPortMalloc+0x15c>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4013      	ands	r3, r2
 800703c:	2b00      	cmp	r3, #0
 800703e:	f040 8085 	bne.w	800714c <pvPortMalloc+0x134>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d016      	beq.n	8007076 <pvPortMalloc+0x5e>
            {
                xWantedSize += xHeapStructSize;
 8007048:	2208      	movs	r2, #8
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00d      	beq.n	8007076 <pvPortMalloc+0x5e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f023 0307 	bic.w	r3, r3, #7
 8007060:	3308      	adds	r3, #8
 8007062:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <pvPortMalloc+0x5e>
 800706e:	4942      	ldr	r1, [pc, #264]	; (8007178 <pvPortMalloc+0x160>)
 8007070:	2097      	movs	r0, #151	; 0x97
 8007072:	f7f9 fda1 	bl	8000bb8 <vAssertCalled>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d067      	beq.n	800714c <pvPortMalloc+0x134>
 800707c:	4b3f      	ldr	r3, [pc, #252]	; (800717c <pvPortMalloc+0x164>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d862      	bhi.n	800714c <pvPortMalloc+0x134>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007086:	4b3e      	ldr	r3, [pc, #248]	; (8007180 <pvPortMalloc+0x168>)
 8007088:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 800708a:	4b3d      	ldr	r3, [pc, #244]	; (8007180 <pvPortMalloc+0x168>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007090:	e004      	b.n	800709c <pvPortMalloc+0x84>
                {
                    pxPreviousBlock = pxBlock;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d903      	bls.n	80070ae <pvPortMalloc+0x96>
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f1      	bne.n	8007092 <pvPortMalloc+0x7a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 80070ae:	4b30      	ldr	r3, [pc, #192]	; (8007170 <pvPortMalloc+0x158>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d049      	beq.n	800714c <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2208      	movs	r2, #8
 80070be:	4413      	add	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	2308      	movs	r3, #8
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d918      	bls.n	800710c <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <pvPortMalloc+0xdc>
 80070ec:	4922      	ldr	r1, [pc, #136]	; (8007178 <pvPortMalloc+0x160>)
 80070ee:	20c5      	movs	r0, #197	; 0xc5
 80070f0:	f7f9 fd62 	bl	8000bb8 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	1ad2      	subs	r2, r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007106:	68b8      	ldr	r0, [r7, #8]
 8007108:	f000 f8fa 	bl	8007300 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800710c:	4b1b      	ldr	r3, [pc, #108]	; (800717c <pvPortMalloc+0x164>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	4a19      	ldr	r2, [pc, #100]	; (800717c <pvPortMalloc+0x164>)
 8007118:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800711a:	4b18      	ldr	r3, [pc, #96]	; (800717c <pvPortMalloc+0x164>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b19      	ldr	r3, [pc, #100]	; (8007184 <pvPortMalloc+0x16c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d203      	bcs.n	800712e <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007126:	4b15      	ldr	r3, [pc, #84]	; (800717c <pvPortMalloc+0x164>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a16      	ldr	r2, [pc, #88]	; (8007184 <pvPortMalloc+0x16c>)
 800712c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	4b10      	ldr	r3, [pc, #64]	; (8007174 <pvPortMalloc+0x15c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	431a      	orrs	r2, r3
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007142:	4b11      	ldr	r3, [pc, #68]	; (8007188 <pvPortMalloc+0x170>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3301      	adds	r3, #1
 8007148:	4a0f      	ldr	r2, [pc, #60]	; (8007188 <pvPortMalloc+0x170>)
 800714a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800714c:	f7fe fcec 	bl	8005b28 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <pvPortMalloc+0x14c>
 800715a:	4907      	ldr	r1, [pc, #28]	; (8007178 <pvPortMalloc+0x160>)
 800715c:	f44f 7083 	mov.w	r0, #262	; 0x106
 8007160:	f7f9 fd2a 	bl	8000bb8 <vAssertCalled>
    return pvReturn;
 8007164:	68fb      	ldr	r3, [r7, #12]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	2000bb94 	.word	0x2000bb94
 8007174:	2000bba8 	.word	0x2000bba8
 8007178:	08013964 	.word	0x08013964
 800717c:	2000bb98 	.word	0x2000bb98
 8007180:	2000bb8c 	.word	0x2000bb8c
 8007184:	2000bb9c 	.word	0x2000bb9c
 8007188:	2000bba0 	.word	0x2000bba0

0800718c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d041      	beq.n	8007222 <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800719e:	2308      	movs	r3, #8
 80071a0:	425b      	negs	r3, r3
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	4b1e      	ldr	r3, [pc, #120]	; (800722c <vPortFree+0xa0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4013      	ands	r3, r2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d104      	bne.n	80071c4 <vPortFree+0x38>
 80071ba:	491d      	ldr	r1, [pc, #116]	; (8007230 <vPortFree+0xa4>)
 80071bc:	f44f 708d 	mov.w	r0, #282	; 0x11a
 80071c0:	f7f9 fcfa 	bl	8000bb8 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <vPortFree+0x4a>
 80071cc:	4918      	ldr	r1, [pc, #96]	; (8007230 <vPortFree+0xa4>)
 80071ce:	f240 101b 	movw	r0, #283	; 0x11b
 80071d2:	f7f9 fcf1 	bl	8000bb8 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	4b14      	ldr	r3, [pc, #80]	; (800722c <vPortFree+0xa0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01e      	beq.n	8007222 <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d11a      	bne.n	8007222 <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	4b0e      	ldr	r3, [pc, #56]	; (800722c <vPortFree+0xa0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	43db      	mvns	r3, r3
 80071f6:	401a      	ands	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80071fc:	f7fe fc86 	bl	8005b0c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <vPortFree+0xa8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4413      	add	r3, r2
 800720a:	4a0a      	ldr	r2, [pc, #40]	; (8007234 <vPortFree+0xa8>)
 800720c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800720e:	68b8      	ldr	r0, [r7, #8]
 8007210:	f000 f876 	bl	8007300 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007214:	4b08      	ldr	r3, [pc, #32]	; (8007238 <vPortFree+0xac>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	4a07      	ldr	r2, [pc, #28]	; (8007238 <vPortFree+0xac>)
 800721c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800721e:	f7fe fc83 	bl	8005b28 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	2000bba8 	.word	0x2000bba8
 8007230:	08013964 	.word	0x08013964
 8007234:	2000bb98 	.word	0x2000bb98
 8007238:	2000bba4 	.word	0x2000bba4

0800723c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007242:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8007246:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007248:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <prvHeapInit+0xac>)
 800724a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00c      	beq.n	8007270 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3307      	adds	r3, #7
 800725a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	4a1f      	ldr	r2, [pc, #124]	; (80072e8 <prvHeapInit+0xac>)
 800726c:	4413      	add	r3, r2
 800726e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007274:	4a1d      	ldr	r2, [pc, #116]	; (80072ec <prvHeapInit+0xb0>)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800727a:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <prvHeapInit+0xb0>)
 800727c:	2200      	movs	r2, #0
 800727e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	4413      	add	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007288:	2208      	movs	r2, #8
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	1a9b      	subs	r3, r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0307 	bic.w	r3, r3, #7
 8007296:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <prvHeapInit+0xb4>)
 800729c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800729e:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <prvHeapInit+0xb4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80072a6:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <prvHeapInit+0xb4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <prvHeapInit+0xb4>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <prvHeapInit+0xb8>)
 80072ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	4a09      	ldr	r2, [pc, #36]	; (80072f8 <prvHeapInit+0xbc>)
 80072d2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072d4:	4b09      	ldr	r3, [pc, #36]	; (80072fc <prvHeapInit+0xc0>)
 80072d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072da:	601a      	str	r2, [r3, #0]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	2000038c 	.word	0x2000038c
 80072ec:	2000bb8c 	.word	0x2000bb8c
 80072f0:	2000bb94 	.word	0x2000bb94
 80072f4:	2000bb9c 	.word	0x2000bb9c
 80072f8:	2000bb98 	.word	0x2000bb98
 80072fc:	2000bba8 	.word	0x2000bba8

08007300 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007308:	4b28      	ldr	r3, [pc, #160]	; (80073ac <prvInsertBlockIntoFreeList+0xac>)
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e002      	b.n	8007314 <prvInsertBlockIntoFreeList+0x14>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d8f7      	bhi.n	800730e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	4413      	add	r3, r2
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d108      	bne.n	8007342 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	441a      	add	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	441a      	add	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d118      	bne.n	8007388 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <prvInsertBlockIntoFreeList+0xb0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d00d      	beq.n	800737e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	441a      	add	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e008      	b.n	8007390 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800737e:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <prvInsertBlockIntoFreeList+0xb0>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e003      	b.n	8007390 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d002      	beq.n	800739e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	2000bb8c 	.word	0x2000bb8c
 80073b0:	2000bb94 	.word	0x2000bb94

080073b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3b04      	subs	r3, #4
 80073c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f023 0201 	bic.w	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3b04      	subs	r3, #4
 80073e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80073e4:	4a0c      	ldr	r2, [pc, #48]	; (8007418 <pxPortInitialiseStack+0x64>)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3b14      	subs	r3, #20
 80073ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3b04      	subs	r3, #4
 80073fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f06f 0202 	mvn.w	r2, #2
 8007402:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3b20      	subs	r3, #32
 8007408:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	0800741d 	.word	0x0800741d

0800741c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007426:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <prvTaskExitError+0x44>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d003      	beq.n	8007438 <prvTaskExitError+0x1c>
 8007430:	490c      	ldr	r1, [pc, #48]	; (8007464 <prvTaskExitError+0x48>)
 8007432:	20df      	movs	r0, #223	; 0xdf
 8007434:	f7f9 fbc0 	bl	8000bb8 <vAssertCalled>
        __asm volatile
 8007438:	f04f 0340 	mov.w	r3, #64	; 0x40
 800743c:	b672      	cpsid	i
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	b662      	cpsie	i
 800744c:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800744e:	bf00      	nop
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0fc      	beq.n	8007450 <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20000010 	.word	0x20000010
 8007464:	0801399c 	.word	0x0801399c
	...

08007470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007470:	4b07      	ldr	r3, [pc, #28]	; (8007490 <pxCurrentTCBConst2>)
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	6808      	ldr	r0, [r1, #0]
 8007476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	f380 8809 	msr	PSP, r0
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8811 	msr	BASEPRI, r0
 800748a:	4770      	bx	lr
 800748c:	f3af 8000 	nop.w

08007490 <pxCurrentTCBConst2>:
 8007490:	2000024c 	.word	0x2000024c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop

08007498 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007498:	4808      	ldr	r0, [pc, #32]	; (80074bc <prvPortStartFirstTask+0x24>)
 800749a:	6800      	ldr	r0, [r0, #0]
 800749c:	6800      	ldr	r0, [r0, #0]
 800749e:	f380 8808 	msr	MSP, r0
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f380 8814 	msr	CONTROL, r0
 80074aa:	b662      	cpsie	i
 80074ac:	b661      	cpsie	f
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	df00      	svc	0
 80074b8:	bf00      	nop
 80074ba:	0000      	.short	0x0000
 80074bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop

080074c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074ca:	4b38      	ldr	r3, [pc, #224]	; (80075ac <xPortStartScheduler+0xe8>)
 80074cc:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	22ff      	movs	r2, #255	; 0xff
 80074da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074e4:	79fb      	ldrb	r3, [r7, #7]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	4b30      	ldr	r3, [pc, #192]	; (80075b0 <xPortStartScheduler+0xec>)
 80074f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074f2:	4b30      	ldr	r3, [pc, #192]	; (80075b4 <xPortStartScheduler+0xf0>)
 80074f4:	2207      	movs	r2, #7
 80074f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074f8:	e009      	b.n	800750e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80074fa:	4b2e      	ldr	r3, [pc, #184]	; (80075b4 <xPortStartScheduler+0xf0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3b01      	subs	r3, #1
 8007500:	4a2c      	ldr	r2, [pc, #176]	; (80075b4 <xPortStartScheduler+0xf0>)
 8007502:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	b2db      	uxtb	r3, r3
 800750c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007516:	2b80      	cmp	r3, #128	; 0x80
 8007518:	d0ef      	beq.n	80074fa <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800751a:	4b26      	ldr	r3, [pc, #152]	; (80075b4 <xPortStartScheduler+0xf0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f1c3 0307 	rsb	r3, r3, #7
 8007522:	2b04      	cmp	r3, #4
 8007524:	d004      	beq.n	8007530 <xPortStartScheduler+0x6c>
 8007526:	4924      	ldr	r1, [pc, #144]	; (80075b8 <xPortStartScheduler+0xf4>)
 8007528:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800752c:	f7f9 fb44 	bl	8000bb8 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007530:	4b20      	ldr	r3, [pc, #128]	; (80075b4 <xPortStartScheduler+0xf0>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f1c3 0307 	rsb	r3, r3, #7
 8007538:	2b04      	cmp	r3, #4
 800753a:	d004      	beq.n	8007546 <xPortStartScheduler+0x82>
 800753c:	491e      	ldr	r1, [pc, #120]	; (80075b8 <xPortStartScheduler+0xf4>)
 800753e:	f240 1053 	movw	r0, #339	; 0x153
 8007542:	f7f9 fb39 	bl	8000bb8 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007546:	4b1b      	ldr	r3, [pc, #108]	; (80075b4 <xPortStartScheduler+0xf0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	4a19      	ldr	r2, [pc, #100]	; (80075b4 <xPortStartScheduler+0xf0>)
 800754e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007550:	4b18      	ldr	r3, [pc, #96]	; (80075b4 <xPortStartScheduler+0xf0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007558:	4a16      	ldr	r2, [pc, #88]	; (80075b4 <xPortStartScheduler+0xf0>)
 800755a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	b2da      	uxtb	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007564:	4b15      	ldr	r3, [pc, #84]	; (80075bc <xPortStartScheduler+0xf8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a14      	ldr	r2, [pc, #80]	; (80075bc <xPortStartScheduler+0xf8>)
 800756a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800756e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007570:	4b12      	ldr	r3, [pc, #72]	; (80075bc <xPortStartScheduler+0xf8>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a11      	ldr	r2, [pc, #68]	; (80075bc <xPortStartScheduler+0xf8>)
 8007576:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800757a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800757c:	f000 f8ce 	bl	800771c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007580:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <xPortStartScheduler+0xfc>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007586:	f000 f8ed 	bl	8007764 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800758a:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <xPortStartScheduler+0x100>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a0d      	ldr	r2, [pc, #52]	; (80075c4 <xPortStartScheduler+0x100>)
 8007590:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007594:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007596:	f7ff ff7f 	bl	8007498 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800759a:	f7fe fc21 	bl	8005de0 <vTaskSwitchContext>
    prvTaskExitError();
 800759e:	f7ff ff3d 	bl	800741c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	e000e400 	.word	0xe000e400
 80075b0:	2000bbac 	.word	0x2000bbac
 80075b4:	2000bbb0 	.word	0x2000bbb0
 80075b8:	0801399c 	.word	0x0801399c
 80075bc:	e000ed20 	.word	0xe000ed20
 80075c0:	20000010 	.word	0x20000010
 80075c4:	e000ef34 	.word	0xe000ef34

080075c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80075d2:	b672      	cpsid	i
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	b662      	cpsie	i
 80075e2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80075e4:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <vPortEnterCritical+0x4c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3301      	adds	r3, #1
 80075ea:	4a0a      	ldr	r2, [pc, #40]	; (8007614 <vPortEnterCritical+0x4c>)
 80075ec:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <vPortEnterCritical+0x4c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d109      	bne.n	800760a <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075f6:	4b08      	ldr	r3, [pc, #32]	; (8007618 <vPortEnterCritical+0x50>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <vPortEnterCritical+0x42>
 8007600:	4906      	ldr	r1, [pc, #24]	; (800761c <vPortEnterCritical+0x54>)
 8007602:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8007606:	f7f9 fad7 	bl	8000bb8 <vAssertCalled>
    }
}
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000010 	.word	0x20000010
 8007618:	e000ed04 	.word	0xe000ed04
 800761c:	0801399c 	.word	0x0801399c

08007620 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007626:	4b0d      	ldr	r3, [pc, #52]	; (800765c <vPortExitCritical+0x3c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <vPortExitCritical+0x18>
 800762e:	490c      	ldr	r1, [pc, #48]	; (8007660 <vPortExitCritical+0x40>)
 8007630:	f240 109f 	movw	r0, #415	; 0x19f
 8007634:	f7f9 fac0 	bl	8000bb8 <vAssertCalled>
    uxCriticalNesting--;
 8007638:	4b08      	ldr	r3, [pc, #32]	; (800765c <vPortExitCritical+0x3c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3b01      	subs	r3, #1
 800763e:	4a07      	ldr	r2, [pc, #28]	; (800765c <vPortExitCritical+0x3c>)
 8007640:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007642:	4b06      	ldr	r3, [pc, #24]	; (800765c <vPortExitCritical+0x3c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <vPortExitCritical+0x34>
 800764a:	2300      	movs	r3, #0
 800764c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20000010 	.word	0x20000010
 8007660:	0801399c 	.word	0x0801399c
	...

08007670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007670:	f3ef 8009 	mrs	r0, PSP
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <pxCurrentTCBConst>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	f01e 0f10 	tst.w	lr, #16
 8007680:	bf08      	it	eq
 8007682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	6010      	str	r0, [r2, #0]
 800768c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007690:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007694:	b672      	cpsid	i
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	b662      	cpsie	i
 80076a4:	f7fe fb9c 	bl	8005de0 <vTaskSwitchContext>
 80076a8:	f04f 0000 	mov.w	r0, #0
 80076ac:	f380 8811 	msr	BASEPRI, r0
 80076b0:	bc09      	pop	{r0, r3}
 80076b2:	6819      	ldr	r1, [r3, #0]
 80076b4:	6808      	ldr	r0, [r1, #0]
 80076b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	f01e 0f10 	tst.w	lr, #16
 80076be:	bf08      	it	eq
 80076c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076c4:	f380 8809 	msr	PSP, r0
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop

080076d0 <pxCurrentTCBConst>:
 80076d0:	2000024c 	.word	0x2000024c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop

080076d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
        __asm volatile
 80076de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80076e2:	b672      	cpsid	i
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	b662      	cpsie	i
 80076f2:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80076f4:	f7fe fac0 	bl	8005c78 <xTaskIncrementTick>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <SysTick_Handler+0x2e>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076fe:	4b06      	ldr	r3, [pc, #24]	; (8007718 <SysTick_Handler+0x40>)
 8007700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	2300      	movs	r3, #0
 8007708:	603b      	str	r3, [r7, #0]
        __asm volatile
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	e000ed04 	.word	0xe000ed04

0800771c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007720:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <vPortSetupTimerInterrupt+0x34>)
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007726:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <vPortSetupTimerInterrupt+0x38>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800772c:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <vPortSetupTimerInterrupt+0x3c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0a      	ldr	r2, [pc, #40]	; (800775c <vPortSetupTimerInterrupt+0x40>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	099b      	lsrs	r3, r3, #6
 8007738:	4a09      	ldr	r2, [pc, #36]	; (8007760 <vPortSetupTimerInterrupt+0x44>)
 800773a:	3b01      	subs	r3, #1
 800773c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800773e:	4b04      	ldr	r3, [pc, #16]	; (8007750 <vPortSetupTimerInterrupt+0x34>)
 8007740:	2207      	movs	r2, #7
 8007742:	601a      	str	r2, [r3, #0]
}
 8007744:	bf00      	nop
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	e000e010 	.word	0xe000e010
 8007754:	e000e018 	.word	0xe000e018
 8007758:	20000000 	.word	0x20000000
 800775c:	10624dd3 	.word	0x10624dd3
 8007760:	e000e014 	.word	0xe000e014

08007764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007774 <vPortEnableVFP+0x10>
 8007768:	6801      	ldr	r1, [r0, #0]
 800776a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800776e:	6001      	str	r1, [r0, #0]
 8007770:	4770      	bx	lr
 8007772:	0000      	.short	0x0000
 8007774:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop

0800777c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007782:	f3ef 8305 	mrs	r3, IPSR
 8007786:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d90e      	bls.n	80077ac <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800778e:	4a10      	ldr	r2, [pc, #64]	; (80077d0 <vPortValidateInterruptPriority+0x54>)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4413      	add	r3, r2
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007798:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <vPortValidateInterruptPriority+0x58>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	78fa      	ldrb	r2, [r7, #3]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d204      	bcs.n	80077ac <vPortValidateInterruptPriority+0x30>
 80077a2:	490d      	ldr	r1, [pc, #52]	; (80077d8 <vPortValidateInterruptPriority+0x5c>)
 80077a4:	f240 20f2 	movw	r0, #754	; 0x2f2
 80077a8:	f7f9 fa06 	bl	8000bb8 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <vPortValidateInterruptPriority+0x60>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077b4:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <vPortValidateInterruptPriority+0x64>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d904      	bls.n	80077c6 <vPortValidateInterruptPriority+0x4a>
 80077bc:	4906      	ldr	r1, [pc, #24]	; (80077d8 <vPortValidateInterruptPriority+0x5c>)
 80077be:	f240 3002 	movw	r0, #770	; 0x302
 80077c2:	f7f9 f9f9 	bl	8000bb8 <vAssertCalled>
    }
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	e000e3f0 	.word	0xe000e3f0
 80077d4:	2000bbac 	.word	0x2000bbac
 80077d8:	0801399c 	.word	0x0801399c
 80077dc:	e000ed0c 	.word	0xe000ed0c
 80077e0:	2000bbb0 	.word	0x2000bbb0

080077e4 <vCastPointerTo_ARPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xARP_PACKET ARPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ARPPacket_t )
    {
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 80077ec:	687b      	ldr	r3, [r7, #4]
    }
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
	...

080077fc <eARPProcessPacket>:
 * @param[in] pxARPFrame: The ARP Frame (the ARP packet).
 *
 * @return An enum which says whether to return the frame or to release it.
 */
eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8007804:	2300      	movs	r3, #0
 8007806:	77fb      	strb	r3, [r7, #31]
    uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;
/* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    pxARPHeader = &( pxARPFrame->xARPHeader );
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	330e      	adds	r3, #14
 800780c:	61bb      	str	r3, [r7, #24]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	330e      	adds	r3, #14
 8007812:	617b      	str	r3, [r7, #20]
    pvCopyDest = &ulSenderProtocolAddress;
 8007814:	f107 0308 	add.w	r3, r7, #8
 8007818:	613b      	str	r3, [r7, #16]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	601a      	str	r2, [r3, #0]
    /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
    ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	60fb      	str	r3, [r7, #12]

    traceARP_PACKET_RECEIVED();

    /* Don't do anything if the local IP address is zero because
     * that means a DHCP request has not completed. */
    if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800782a:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <eARPProcessPacket+0x118>)
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d068      	beq.n	8007904 <eARPProcessPacket+0x108>
    {
        switch( pxARPHeader->usOperation )
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	88db      	ldrh	r3, [r3, #6]
 8007836:	b29b      	uxth	r3, r3
 8007838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783c:	d003      	beq.n	8007846 <eARPProcessPacket+0x4a>
 800783e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007842:	d057      	beq.n	80078f4 <eARPProcessPacket+0xf8>
                #endif /* ipconfigARP_USE_CLASH_DETECTION */
                break;

            default:
                /* Invalid. */
                break;
 8007844:	e061      	b.n	800790a <eARPProcessPacket+0x10e>
                if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8007846:	4b33      	ldr	r3, [pc, #204]	; (8007914 <eARPProcessPacket+0x118>)
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	429a      	cmp	r2, r3
 800784e:	d15b      	bne.n	8007908 <eARPProcessPacket+0x10c>
                    vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	3308      	adds	r3, #8
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f000 f861 	bl	8007920 <vARPRefreshCacheEntry>
                    pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2200      	movs	r2, #0
 8007862:	719a      	strb	r2, [r3, #6]
 8007864:	2200      	movs	r2, #0
 8007866:	f042 0202 	orr.w	r2, r2, #2
 800786a:	71da      	strb	r2, [r3, #7]
                    if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	429a      	cmp	r2, r3
 8007872:	d11a      	bne.n	80078aa <eARPProcessPacket+0xae>
                        pvCopySource = xBroadcastMACAddress.ucBytes;
 8007874:	4b28      	ldr	r3, [pc, #160]	; (8007918 <eARPProcessPacket+0x11c>)
 8007876:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3306      	adds	r3, #6
 800787c:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 800787e:	2206      	movs	r2, #6
 8007880:	6979      	ldr	r1, [r7, #20]
 8007882:	6938      	ldr	r0, [r7, #16]
 8007884:	f009 ff6d 	bl	8011762 <memcpy>
                        ( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	3312      	adds	r3, #18
 800788c:	2206      	movs	r2, #6
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f009 ff8a 	bl	80117aa <memset>
                        pxARPHeader->ulTargetProtocolAddress = 0UL;
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2200      	movs	r2, #0
 800789a:	761a      	strb	r2, [r3, #24]
 800789c:	2200      	movs	r2, #0
 800789e:	765a      	strb	r2, [r3, #25]
 80078a0:	2200      	movs	r2, #0
 80078a2:	769a      	strb	r2, [r3, #26]
 80078a4:	2200      	movs	r2, #0
 80078a6:	76da      	strb	r2, [r3, #27]
 80078a8:	e00d      	b.n	80078c6 <eARPProcessPacket+0xca>
                        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	3308      	adds	r3, #8
 80078ae:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	3312      	adds	r3, #18
 80078b4:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80078b6:	2206      	movs	r2, #6
 80078b8:	6979      	ldr	r1, [r7, #20]
 80078ba:	6938      	ldr	r0, [r7, #16]
 80078bc:	f009 ff51 	bl	8011762 <memcpy>
                        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	619a      	str	r2, [r3, #24]
                    pvCopySource = ipLOCAL_MAC_ADDRESS;
 80078c6:	4b13      	ldr	r3, [pc, #76]	; (8007914 <eARPProcessPacket+0x118>)
 80078c8:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	3308      	adds	r3, #8
 80078ce:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80078d0:	2206      	movs	r2, #6
 80078d2:	6979      	ldr	r1, [r7, #20]
 80078d4:	6938      	ldr	r0, [r7, #16]
 80078d6:	f009 ff44 	bl	8011762 <memcpy>
                    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 80078da:	4b10      	ldr	r3, [pc, #64]	; (800791c <eARPProcessPacket+0x120>)
 80078dc:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	330e      	adds	r3, #14
 80078e2:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	601a      	str	r2, [r3, #0]
                    eReturn = eReturnEthernetFrame;
 80078ee:	2302      	movs	r3, #2
 80078f0:	77fb      	strb	r3, [r7, #31]
                break;
 80078f2:	e009      	b.n	8007908 <eARPProcessPacket+0x10c>
                vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	3308      	adds	r3, #8
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	4611      	mov	r1, r2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f80f 	bl	8007920 <vARPRefreshCacheEntry>
                break;
 8007902:	e002      	b.n	800790a <eARPProcessPacket+0x10e>
        }
    }
 8007904:	bf00      	nop
 8007906:	e000      	b.n	800790a <eARPProcessPacket+0x10e>
                break;
 8007908:	bf00      	nop

    return eReturn;
 800790a:	7ffb      	ldrb	r3, [r7, #31]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3720      	adds	r7, #32
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20000018 	.word	0x20000018
 8007918:	08015404 	.word	0x08015404
 800791c:	2000002c 	.word	0x2000002c

08007920 <vARPRefreshCacheEntry>:
 * @param[in] ulIPAddress: 32-bit representation of the IP-address whose mapping
 *                         is being updated.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
    BaseType_t x = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	61fb      	str	r3, [r7, #28]
    BaseType_t xIpEntry = -1;
 800792e:	f04f 33ff 	mov.w	r3, #4294967295
 8007932:	61bb      	str	r3, [r7, #24]
    BaseType_t xMacEntry = -1;
 8007934:	f04f 33ff 	mov.w	r3, #4294967295
 8007938:	617b      	str	r3, [r7, #20]
    BaseType_t xUseEntry = 0;
 800793a:	2300      	movs	r3, #0
 800793c:	613b      	str	r3, [r7, #16]
    uint8_t ucMinAgeFound = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )

        /* Only process the IP address if it is on the local network.
         * Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
         * and netmask are still unknown. */
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8007942:	4b70      	ldr	r3, [pc, #448]	; (8007b04 <vARPRefreshCacheEntry+0x1e4>)
 8007944:	695a      	ldr	r2, [r3, #20]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	405a      	eors	r2, r3
 800794a:	4b6f      	ldr	r3, [pc, #444]	; (8007b08 <vARPRefreshCacheEntry+0x1e8>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	4013      	ands	r3, r2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <vARPRefreshCacheEntry+0x3e>
            ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 8007954:	4b6b      	ldr	r3, [pc, #428]	; (8007b04 <vARPRefreshCacheEntry+0x1e4>)
 8007956:	695b      	ldr	r3, [r3, #20]
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8007958:	2b00      	cmp	r3, #0
 800795a:	f040 80d0 	bne.w	8007afe <vARPRefreshCacheEntry+0x1de>

        if( pdTRUE )
    #endif
    {
        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	3b01      	subs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007964:	2300      	movs	r3, #0
 8007966:	61fb      	str	r3, [r7, #28]
 8007968:	e067      	b.n	8007a3a <vARPRefreshCacheEntry+0x11a>
        {
            BaseType_t xMatchingMAC;

            if( pxMACAddress != NULL )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d015      	beq.n	800799c <vARPRefreshCacheEntry+0x7c>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	4613      	mov	r3, r2
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4a64      	ldr	r2, [pc, #400]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 800797c:	4413      	add	r3, r2
 800797e:	3304      	adds	r3, #4
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	2206      	movs	r2, #6
 8007984:	4618      	mov	r0, r3
 8007986:	f009 fedd 	bl	8011744 <memcmp>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <vARPRefreshCacheEntry+0x76>
                {
                    xMatchingMAC = pdTRUE;
 8007990:	2301      	movs	r3, #1
 8007992:	60bb      	str	r3, [r7, #8]
 8007994:	e004      	b.n	80079a0 <vARPRefreshCacheEntry+0x80>
                }
                else
                {
                    xMatchingMAC = pdFALSE;
 8007996:	2300      	movs	r3, #0
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	e001      	b.n	80079a0 <vARPRefreshCacheEntry+0x80>
                }
            }
            else
            {
                xMatchingMAC = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	60bb      	str	r3, [r7, #8]
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80079a0:	495a      	ldr	r1, [pc, #360]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	4613      	mov	r3, r2
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	4413      	add	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	440b      	add	r3, r1
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d120      	bne.n	80079f8 <vARPRefreshCacheEntry+0xd8>
            {
                if( pxMACAddress == NULL )
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <vARPRefreshCacheEntry+0xa2>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    xIpEntry = x;
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	61bb      	str	r3, [r7, #24]
                    break;
 80079c0:	e03e      	b.n	8007a40 <vARPRefreshCacheEntry+0x120>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d014      	beq.n	80079f2 <vARPRefreshCacheEntry+0xd2>
                {
                    /* This function will be called for each received packet
                     * As this is by far the most common path the coding standard
                     * is relaxed in this case and a return is permitted as an
                     * optimisation. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80079c8:	4950      	ldr	r1, [pc, #320]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	4613      	mov	r3, r2
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	330a      	adds	r3, #10
 80079d8:	2296      	movs	r2, #150	; 0x96
 80079da:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80079dc:	494b      	ldr	r1, [pc, #300]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	4613      	mov	r3, r2
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	330b      	adds	r3, #11
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
                    return;
 80079f0:	e085      	b.n	8007afe <vARPRefreshCacheEntry+0x1de>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                xIpEntry = x;
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	e01d      	b.n	8007a34 <vARPRefreshCacheEntry+0x114>
            }
            else if( xMatchingMAC != pdFALSE )
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <vARPRefreshCacheEntry+0xe4>
                    if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
                    {
                        xMacEntry = x;
                    }
                #else /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
                    xMacEntry = x;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	e017      	b.n	8007a34 <vARPRefreshCacheEntry+0x114>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8007a04:	4941      	ldr	r1, [pc, #260]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	330a      	adds	r3, #10
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	7bfa      	ldrb	r2, [r7, #15]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d90b      	bls.n	8007a34 <vARPRefreshCacheEntry+0x114>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 8007a1c:	493b      	ldr	r1, [pc, #236]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	4613      	mov	r3, r2
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	330a      	adds	r3, #10
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	73fb      	strb	r3, [r7, #15]
                xUseEntry = x;
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	613b      	str	r3, [r7, #16]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	3301      	adds	r3, #1
 8007a38:	61fb      	str	r3, [r7, #28]
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	2b05      	cmp	r3, #5
 8007a3e:	dd94      	ble.n	800796a <vARPRefreshCacheEntry+0x4a>
            {
                /* Nothing happens to this cache entry for now. */
            }
        }

        if( xMacEntry >= 0 )
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	db11      	blt.n	8007a6a <vARPRefreshCacheEntry+0x14a>
        {
            xUseEntry = xMacEntry;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	613b      	str	r3, [r7, #16]

            if( xIpEntry >= 0 )
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	db11      	blt.n	8007a74 <vARPRefreshCacheEntry+0x154>
            {
                /* Both the MAC address as well as the IP address were found in
                 * different locations: clear the entry which matches the
                 * IP-address */
                ( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	4613      	mov	r3, r2
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4a2c      	ldr	r2, [pc, #176]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 8007a5c:	4413      	add	r3, r2
 8007a5e:	220c      	movs	r2, #12
 8007a60:	2100      	movs	r1, #0
 8007a62:	4618      	mov	r0, r3
 8007a64:	f009 fea1 	bl	80117aa <memset>
 8007a68:	e004      	b.n	8007a74 <vARPRefreshCacheEntry+0x154>
            }
        }
        else if( xIpEntry >= 0 )
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	db01      	blt.n	8007a74 <vARPRefreshCacheEntry+0x154>
        {
            /* An entry containing the IP-address was found, but it had a different MAC address */
            xUseEntry = xIpEntry;
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	613b      	str	r3, [r7, #16]
        {
            /* No matching entry found. */
        }

        /* If the entry was not found, we use the oldest entry and set the IPaddress */
        xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8007a74:	4925      	ldr	r1, [pc, #148]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	440b      	add	r3, r1
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	601a      	str	r2, [r3, #0]

        if( pxMACAddress != NULL )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d021      	beq.n	8007ad0 <vARPRefreshCacheEntry+0x1b0>
        {
            ( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4a1d      	ldr	r2, [pc, #116]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 8007a98:	4413      	add	r3, r2
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	2206      	movs	r2, #6
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f009 fe5e 	bl	8011762 <memcpy>

            iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
            /* And this entry does not need immediate attention */
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007aa6:	4919      	ldr	r1, [pc, #100]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	440b      	add	r3, r1
 8007ab4:	330a      	adds	r3, #10
 8007ab6:	2296      	movs	r2, #150	; 0x96
 8007ab8:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007aba:	4914      	ldr	r1, [pc, #80]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	330b      	adds	r3, #11
 8007aca:	2201      	movs	r2, #1
 8007acc:	701a      	strb	r2, [r3, #0]
 8007ace:	e016      	b.n	8007afe <vARPRefreshCacheEntry+0x1de>
        }
        else if( xIpEntry < 0 )
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	da13      	bge.n	8007afe <vARPRefreshCacheEntry+0x1de>
        {
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007ad6:	490d      	ldr	r1, [pc, #52]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	4613      	mov	r3, r2
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	330a      	adds	r3, #10
 8007ae6:	2205      	movs	r2, #5
 8007ae8:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007aea:	4908      	ldr	r1, [pc, #32]	; (8007b0c <vARPRefreshCacheEntry+0x1ec>)
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4613      	mov	r3, r2
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	4413      	add	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	440b      	add	r3, r1
 8007af8:	330b      	adds	r3, #11
 8007afa:	2200      	movs	r2, #0
 8007afc:	701a      	strb	r2, [r3, #0]
        else
        {
            /* Nothing will be stored. */
        }
    }
}
 8007afe:	3720      	adds	r7, #32
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000018 	.word	0x20000018
 8007b08:	2000bc7c 	.word	0x2000bc7c
 8007b0c:	2000bbb4 	.word	0x2000bbb4

08007b10 <eARPGetCacheEntry>:
 *         addressing needs a gateway but there isn't a gateway defined) then return
 *         eCantSendPacket.
 */
eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                      MACAddress_t * const pxMACAddress )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturn;
    uint32_t ulAddressToLookup;

    ulAddressToLookup = *pulIPAddress;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60bb      	str	r3, [r7, #8]

    #if ( ipconfigUSE_LLMNR == 1 )
        if( ulAddressToLookup == ipLLMNR_IP_ADDR ) /* Is in network byte order. */
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	4a33      	ldr	r2, [pc, #204]	; (8007bf0 <eARPGetCacheEntry+0xe0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d108      	bne.n	8007b3a <eARPGetCacheEntry+0x2a>
        {
            /* The LLMNR IP-address has a fixed virtual MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	4a32      	ldr	r2, [pc, #200]	; (8007bf4 <eARPGetCacheEntry+0xe4>)
 8007b2c:	6811      	ldr	r1, [r2, #0]
 8007b2e:	6019      	str	r1, [r3, #0]
 8007b30:	8892      	ldrh	r2, [r2, #4]
 8007b32:	809a      	strh	r2, [r3, #4]
            eReturn = eARPCacheHit;
 8007b34:	2301      	movs	r3, #1
 8007b36:	73fb      	strb	r3, [r7, #15]
 8007b38:	e054      	b.n	8007be4 <eARPGetCacheEntry+0xd4>
        }
        else
    #endif

    if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8007b3a:	68b8      	ldr	r0, [r7, #8]
 8007b3c:	f001 fe84 	bl	8009848 <xIsIPv4Multicast>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d006      	beq.n	8007b54 <eARPGetCacheEntry+0x44>
    {
        /* Get the lowest 23 bits of the IP-address. */
        vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	68b8      	ldr	r0, [r7, #8]
 8007b4a:	f001 fea5 	bl	8009898 <vSetMultiCastIPv4MacAddress>

        eReturn = eARPCacheHit;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	73fb      	strb	r3, [r7, #15]
 8007b52:	e047      	b.n	8007be4 <eARPGetCacheEntry+0xd4>
    }
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5c:	d005      	beq.n	8007b6a <eARPGetCacheEntry+0x5a>
             ( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) ) /* Or a local broadcast address, eg 192.168.1.255? */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b25      	ldr	r3, [pc, #148]	; (8007bf8 <eARPGetCacheEntry+0xe8>)
 8007b64:	691b      	ldr	r3, [r3, #16]
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d108      	bne.n	8007b7c <eARPGetCacheEntry+0x6c>
    {
        /* This is a broadcast so it uses the broadcast MAC address. */
        ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	4a23      	ldr	r2, [pc, #140]	; (8007bfc <eARPGetCacheEntry+0xec>)
 8007b6e:	6811      	ldr	r1, [r2, #0]
 8007b70:	6019      	str	r1, [r3, #0]
 8007b72:	8892      	ldrh	r2, [r2, #4]
 8007b74:	809a      	strh	r2, [r3, #4]
        eReturn = eARPCacheHit;
 8007b76:	2301      	movs	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
 8007b7a:	e033      	b.n	8007be4 <eARPGetCacheEntry+0xd4>
    }
    else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 8007b7c:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <eARPGetCacheEntry+0xf0>)
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d102      	bne.n	8007b8a <eARPGetCacheEntry+0x7a>
    {
        /* The IP address has not yet been assigned, so there is nothing that
         * can be done. */
        eReturn = eCantSendPacket;
 8007b84:	2302      	movs	r3, #2
 8007b86:	73fb      	strb	r3, [r7, #15]
 8007b88:	e02c      	b.n	8007be4 <eARPGetCacheEntry+0xd4>
    }
    else
    {
        eReturn = eARPCacheMiss;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]

        if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4b1b      	ldr	r3, [pc, #108]	; (8007c00 <eARPGetCacheEntry+0xf0>)
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	405a      	eors	r2, r3
 8007b98:	4b17      	ldr	r3, [pc, #92]	; (8007bf8 <eARPGetCacheEntry+0xe8>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <eARPGetCacheEntry+0xaa>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 8007ba2:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <eARPGetCacheEntry+0xe8>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <eARPGetCacheEntry+0xa2>
                {
                    ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 8007baa:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <eARPGetCacheEntry+0xe8>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	60bb      	str	r3, [r7, #8]
 8007bb0:	e006      	b.n	8007bc0 <eARPGetCacheEntry+0xb0>
                }
                else
                {
                    ulAddressToLookup = *pulIPAddress;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60bb      	str	r3, [r7, #8]
 8007bb8:	e002      	b.n	8007bc0 <eARPGetCacheEntry+0xb0>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60bb      	str	r3, [r7, #8]
            if( eReturn == eARPCacheMiss ) /*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */
        #else
            /* No cache look-up was done, so the result is still 'eARPCacheMiss'. */
        #endif
        {
            if( ulAddressToLookup == 0UL )
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <eARPGetCacheEntry+0xbc>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	73fb      	strb	r3, [r7, #15]
 8007bca:	e00b      	b.n	8007be4 <eARPGetCacheEntry+0xd4>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	68b8      	ldr	r0, [r7, #8]
 8007bd0:	f000 f818 	bl	8007c04 <prvCacheLookup>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]

                if( eReturn == eARPCacheMiss )
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <eARPGetCacheEntry+0xd4>
                {
                    /* It might be that the ARP has to go to the gateway. */
                    *pulIPAddress = ulAddressToLookup;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }

    return eReturn;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	fc0000e0 	.word	0xfc0000e0
 8007bf4:	080153fc 	.word	0x080153fc
 8007bf8:	2000bc7c 	.word	0x2000bc7c
 8007bfc:	08015404 	.word	0x08015404
 8007c00:	20000018 	.word	0x20000018

08007c04 <prvCacheLookup>:
 * @return When the IP-address is found: eARPCacheHit, when not found: eARPCacheMiss,
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                          MACAddress_t * const pxMACAddress )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
    BaseType_t x;
    eARPLookupResult_t eReturn = eARPCacheMiss;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	72fb      	strb	r3, [r7, #11]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	e02b      	b.n	8007c70 <prvCacheLookup+0x6c>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007c18:	4919      	ldr	r1, [pc, #100]	; (8007c80 <prvCacheLookup+0x7c>)
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d11d      	bne.n	8007c6a <prvCacheLookup+0x66>
        {
            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007c2e:	4914      	ldr	r1, [pc, #80]	; (8007c80 <prvCacheLookup+0x7c>)
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	4613      	mov	r3, r2
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	330b      	adds	r3, #11
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <prvCacheLookup+0x46>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                eReturn = eCantSendPacket;
 8007c44:	2302      	movs	r3, #2
 8007c46:	72fb      	strb	r3, [r7, #11]
                /* A valid entry was found. */
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
                eReturn = eARPCacheHit;
            }

            break;
 8007c48:	e015      	b.n	8007c76 <prvCacheLookup+0x72>
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007c4a:	6838      	ldr	r0, [r7, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4a0a      	ldr	r2, [pc, #40]	; (8007c80 <prvCacheLookup+0x7c>)
 8007c58:	4413      	add	r3, r2
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	2206      	movs	r2, #6
 8007c5e:	4619      	mov	r1, r3
 8007c60:	f009 fd7f 	bl	8011762 <memcpy>
                eReturn = eARPCacheHit;
 8007c64:	2301      	movs	r3, #1
 8007c66:	72fb      	strb	r3, [r7, #11]
            break;
 8007c68:	e005      	b.n	8007c76 <prvCacheLookup+0x72>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	ddd0      	ble.n	8007c18 <prvCacheLookup+0x14>
        }
    }

    return eReturn;
 8007c76:	7afb      	ldrb	r3, [r7, #11]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	2000bbb4 	.word	0x2000bbb4

08007c84 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
void vARPAgeCache( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
    BaseType_t x;
    TickType_t xTimeNow;

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	e063      	b.n	8007d58 <vARPAgeCache+0xd4>
    {
        /* If the entry is valid (its age is greater than zero). */
        if( xARPCache[ x ].ucAge > 0U )
 8007c90:	4940      	ldr	r1, [pc, #256]	; (8007d94 <vARPAgeCache+0x110>)
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	4613      	mov	r3, r2
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	330a      	adds	r3, #10
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d055      	beq.n	8007d52 <vARPAgeCache+0xce>
        {
            /* Decrement the age value of the entry in this ARP cache table row.
             * When the age reaches zero it is no longer considered valid. */
            ( xARPCache[ x ].ucAge )--;
 8007ca6:	493b      	ldr	r1, [pc, #236]	; (8007d94 <vARPAgeCache+0x110>)
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	330a      	adds	r3, #10
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b2d8      	uxtb	r0, r3
 8007cbc:	4935      	ldr	r1, [pc, #212]	; (8007d94 <vARPAgeCache+0x110>)
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	330a      	adds	r3, #10
 8007ccc:	4602      	mov	r2, r0
 8007cce:	701a      	strb	r2, [r3, #0]

            /* If the entry is not yet valid, then it is waiting an ARP
             * reply, and the ARP request should be retransmitted. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007cd0:	4930      	ldr	r1, [pc, #192]	; (8007d94 <vARPAgeCache+0x110>)
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	330b      	adds	r3, #11
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <vARPAgeCache+0x7a>
            {
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007ce6:	492b      	ldr	r1, [pc, #172]	; (8007d94 <vARPAgeCache+0x110>)
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	4613      	mov	r3, r2
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	440b      	add	r3, r1
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 f852 	bl	8007da0 <FreeRTOS_OutputARPRequest>
 8007cfc:	e015      	b.n	8007d2a <vARPAgeCache+0xa6>
            }
            else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007cfe:	4925      	ldr	r1, [pc, #148]	; (8007d94 <vARPAgeCache+0x110>)
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	330a      	adds	r3, #10
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d80a      	bhi.n	8007d2a <vARPAgeCache+0xa6>
            {
                /* This entry will get removed soon.  See if the MAC address is
                 * still valid to prevent this happening. */
                iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007d14:	491f      	ldr	r1, [pc, #124]	; (8007d94 <vARPAgeCache+0x110>)
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	440b      	add	r3, r1
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 f83b 	bl	8007da0 <FreeRTOS_OutputARPRequest>
            else
            {
                /* The age has just ticked down, with nothing to do. */
            }

            if( xARPCache[ x ].ucAge == 0U )
 8007d2a:	491a      	ldr	r1, [pc, #104]	; (8007d94 <vARPAgeCache+0x110>)
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	330a      	adds	r3, #10
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d108      	bne.n	8007d52 <vARPAgeCache+0xce>
            {
                /* The entry is no longer valid.  Wipe it out. */
                iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                xARPCache[ x ].ulIPAddress = 0UL;
 8007d40:	4914      	ldr	r1, [pc, #80]	; (8007d94 <vARPAgeCache+0x110>)
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	005b      	lsls	r3, r3, #1
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3301      	adds	r3, #1
 8007d56:	607b      	str	r3, [r7, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	dd98      	ble.n	8007c90 <vARPAgeCache+0xc>
            }
        }
    }

    xTimeNow = xTaskGetTickCount();
 8007d5e:	f7fd ff7b 	bl	8005c58 <xTaskGetTickCount>
 8007d62:	6038      	str	r0, [r7, #0]

    if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8007d64:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <vARPAgeCache+0x114>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d007      	beq.n	8007d7c <vARPAgeCache+0xf8>
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <vARPAgeCache+0x114>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d907      	bls.n	8007d8c <vARPAgeCache+0x108>
    {
        FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 8007d7c:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <vARPAgeCache+0x118>)
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f80d 	bl	8007da0 <FreeRTOS_OutputARPRequest>
        xLastGratuitousARPTime = xTimeNow;
 8007d86:	4a04      	ldr	r2, [pc, #16]	; (8007d98 <vARPAgeCache+0x114>)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	6013      	str	r3, [r2, #0]
    }
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	2000bbb4 	.word	0x2000bbb4
 8007d98:	2000bbfc 	.word	0x2000bbfc
 8007d9c:	20000018 	.word	0x20000018

08007da0 <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress: A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    /* This is called from the context of the IP event task, so a block time
     * must not be used. */
    pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8007da8:	2100      	movs	r1, #0
 8007daa:	202a      	movs	r0, #42	; 0x2a
 8007dac:	f009 fbda 	bl	8011564 <pxGetNetworkBufferWithDescriptor>
 8007db0:	6138      	str	r0, [r7, #16]

    if( pxNetworkBuffer != NULL )
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d037      	beq.n	8007e28 <FreeRTOS_OutputARPRequest+0x88>
    {
        pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	615a      	str	r2, [r3, #20]
        vARPGenerateRequestPacket( pxNetworkBuffer );
 8007dbe:	6938      	ldr	r0, [r7, #16]
 8007dc0:	f000 f836 	bl	8007e30 <vARPGenerateRequestPacket>

        #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	2b3b      	cmp	r3, #59	; 0x3b
 8007dca:	d812      	bhi.n	8007df2 <FreeRTOS_OutputARPRequest+0x52>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	e008      	b.n	8007de6 <FreeRTOS_OutputARPRequest+0x46>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	4413      	add	r3, r2
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	3301      	adds	r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b3b      	cmp	r3, #59	; 0x3b
 8007dea:	ddf3      	ble.n	8007dd4 <FreeRTOS_OutputARPRequest+0x34>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	223c      	movs	r2, #60	; 0x3c
 8007df0:	61da      	str	r2, [r3, #28]
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

        if( xIsCallingFromIPTask() != 0 )
 8007df2:	f001 f99b 	bl	800912c <xIsCallingFromIPTask>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d004      	beq.n	8007e06 <FreeRTOS_OutputARPRequest+0x66>
        {
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            /* Only the IP-task is allowed to call this function directly. */
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	6938      	ldr	r0, [r7, #16]
 8007e00:	f008 fb78 	bl	80104f4 <xNetworkInterfaceOutput>
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
            }
        }
    }
}
 8007e04:	e010      	b.n	8007e28 <FreeRTOS_OutputARPRequest+0x88>
            xSendEvent.eEventType = eNetworkTxEvent;
 8007e06:	2302      	movs	r3, #2
 8007e08:	723b      	strb	r3, [r7, #8]
            xSendEvent.pvData = pxNetworkBuffer;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	60fb      	str	r3, [r7, #12]
            if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8007e0e:	f107 0308 	add.w	r3, r7, #8
 8007e12:	f04f 31ff 	mov.w	r1, #4294967295
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fc1e 	bl	8009658 <xSendEventStructToIPTask>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d102      	bne.n	8007e28 <FreeRTOS_OutputARPRequest+0x88>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007e22:	6938      	ldr	r0, [r7, #16]
 8007e24:	f009 fc18 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
}
 8007e28:	bf00      	nop
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer: Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
    void * pvCopyDest;

    /* Buffer allocation ensures that buffers always have space
     * for an ARP packet. See buffer allocation implementations 1
     * and 2 under portable/BufferManagement. */
    configASSERT( pxNetworkBuffer != NULL );
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d104      	bne.n	8007e48 <vARPGenerateRequestPacket+0x18>
 8007e3e:	4923      	ldr	r1, [pc, #140]	; (8007ecc <vARPGenerateRequestPacket+0x9c>)
 8007e40:	f240 302a 	movw	r0, #810	; 0x32a
 8007e44:	f7f8 feb8 	bl	8000bb8 <vAssertCalled>
    configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	2b29      	cmp	r3, #41	; 0x29
 8007e4e:	d804      	bhi.n	8007e5a <vARPGenerateRequestPacket+0x2a>
 8007e50:	491e      	ldr	r1, [pc, #120]	; (8007ecc <vARPGenerateRequestPacket+0x9c>)
 8007e52:	f240 302b 	movw	r0, #811	; 0x32b
 8007e56:	f7f8 feaf 	bl	8000bb8 <vAssertCalled>

    pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fcc0 	bl	80077e4 <vCastPointerTo_ARPPacket_t>
 8007e64:	6178      	str	r0, [r7, #20]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = xDefaultPartARPPacketHeader;
 8007e66:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <vARPGenerateRequestPacket+0xa0>)
 8007e68:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8007e6e:	2226      	movs	r2, #38	; 0x26
 8007e70:	6939      	ldr	r1, [r7, #16]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f009 fc75 	bl	8011762 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8007e78:	4b16      	ldr	r3, [pc, #88]	; (8007ed4 <vARPGenerateRequestPacket+0xa4>)
 8007e7a:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	3306      	adds	r3, #6
 8007e80:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007e82:	2206      	movs	r2, #6
 8007e84:	6939      	ldr	r1, [r7, #16]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f009 fc6b 	bl	8011762 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8007e8c:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <vARPGenerateRequestPacket+0xa4>)
 8007e8e:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	3316      	adds	r3, #22
 8007e94:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007e96:	2206      	movs	r2, #6
 8007e98:	6939      	ldr	r1, [r7, #16]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f009 fc61 	bl	8011762 <memcpy>

    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 8007ea0:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <vARPGenerateRequestPacket+0xa8>)
 8007ea2:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	331c      	adds	r3, #28
 8007ea8:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	601a      	str	r2, [r3, #0]
    pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	695a      	ldr	r2, [r3, #20]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

    pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	222a      	movs	r2, #42	; 0x2a
 8007ec2:	61da      	str	r2, [r3, #28]

    iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8007ec4:	bf00      	nop
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	080139d0 	.word	0x080139d0
 8007ed0:	080153d4 	.word	0x080153d4
 8007ed4:	20000018 	.word	0x20000018
 8007ed8:	2000002c 	.word	0x2000002c

08007edc <FreeRTOS_ClearARP>:

/**
 * @brief A call to this function will clear the ARP cache.
 */
void FreeRTOS_ClearARP( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
    ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007ee0:	2248      	movs	r2, #72	; 0x48
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	4802      	ldr	r0, [pc, #8]	; (8007ef0 <FreeRTOS_ClearARP+0x14>)
 8007ee6:	f009 fc60 	bl	80117aa <memset>
}
 8007eea:	bf00      	nop
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	2000bbb4 	.word	0x2000bbb4

08007ef4 <vCastPointerTo_UDPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xUDP_PACKET UDPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
    {
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 8007efc:	687b      	ldr	r3, [r7, #4]
    }
 8007efe:	4618      	mov	r0, r3
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <usChar2u16>:
               ( ( ( uint32_t ) apChr[ 3 ] ) );
    }

    static portINLINE uint16_t usChar2u16( const uint8_t * apChr );
    static portINLINE uint16_t usChar2u16( const uint8_t * apChr )
    {
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
        return ( uint16_t )
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	021b      	lsls	r3, r3, #8
 8007f1a:	b29a      	uxth	r2, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
        return ( uint16_t )
 8007f24:	4313      	orrs	r3, r2
 8007f26:	b29b      	uxth	r3, r3
    }
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <vCastPointerTo_DNSMessage_t>:
 * @brief Utility function to cast pointer of a type to pointer of type DNSMessage_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DNSMessage_t )
    {
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
        return ( DNSMessage_t * ) pvArgument;
 8007f3c:	687b      	ldr	r3, [r7, #4]
    }
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <vCastPointerTo_DNSAnswerRecord_t>:
 * @brief Utility function to cast pointer of a type to pointer of type DNSAnswerRecord_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DNSAnswerRecord_t )
    {
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
        return ( DNSAnswerRecord_t * ) pvArgument;
 8007f52:	687b      	ldr	r3, [r7, #4]
    }
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <vCastPointerTo_LLMNRAnswer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type LLMNRAnswer_t.
 *
 * @return The casted pointer.
 */
        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( LLMNRAnswer_t )
        {
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
            return ( LLMNRAnswer_t * ) pvArgument;
 8007f68:	687b      	ldr	r3, [r7, #4]
        }
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <vCastPointerTo_NBNSAnswer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NBNSAnswer_t.
 *
 * @return The casted pointer.
 */
        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NBNSAnswer_t )
        {
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
            return ( NBNSAnswer_t * ) pvArgument;
 8007f7e:	687b      	ldr	r3, [r7, #4]
        }
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <prvReadNameField>:
 */
        _static size_t prvReadNameField( const uint8_t * pucByte,
                                         size_t uxRemainingBytes,
                                         char * pcName,
                                         size_t uxDestLen )
        {
 8007f8c:	b480      	push	{r7}
 8007f8e:	b089      	sub	sp, #36	; 0x24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
            size_t uxNameLen = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61fb      	str	r3, [r7, #28]
            size_t uxIndex = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61bb      	str	r3, [r7, #24]
            size_t uxSourceLen = uxRemainingBytes;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	613b      	str	r3, [r7, #16]

            /* uxCount gets the values from pucByte and counts down to 0.
             * No need to have a different type than that of pucByte */
            size_t uxCount;

            if( uxSourceLen == ( size_t ) 0U )
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d102      	bne.n	8007fb2 <prvReadNameField+0x26>
            {
                /* Return 0 value in case of error. */
                uxIndex = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	e078      	b.n	80080a4 <prvReadNameField+0x118>
            }

            /* Determine if the name is the fully coded name, or an offset to the name
             * elsewhere in the message. */
            else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8007fc0:	d14a      	bne.n	8008058 <prvReadNameField+0xcc>
            {
                /* Jump over the two byte offset. */
                if( uxSourceLen > sizeof( uint16_t ) )
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d903      	bls.n	8007fd0 <prvReadNameField+0x44>
                {
                    uxIndex += sizeof( uint16_t );
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	3302      	adds	r3, #2
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	e069      	b.n	80080a4 <prvReadNameField+0x118>
                }
                else
                {
                    uxIndex = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	e066      	b.n	80080a4 <prvReadNameField+0x118>
                /* 'uxIndex' points to the full name. Walk over the string. */
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
                {
                    /* If this is not the first time through the loop, then add a
                     * separator in the output. */
                    if( ( uxNameLen > 0U ) )
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00e      	beq.n	8007ffa <prvReadNameField+0x6e>
                    {
                        if( uxNameLen >= uxDestLen )
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d302      	bcc.n	8007fea <prvReadNameField+0x5e>
                        {
                            uxIndex = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61bb      	str	r3, [r7, #24]
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
 8007fe8:	e040      	b.n	800806c <prvReadNameField+0xe0>
                        }

                        pcName[ uxNameLen ] = '.';
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	4413      	add	r3, r2
 8007ff0:	222e      	movs	r2, #46	; 0x2e
 8007ff2:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
                    }

                    /* Process the first/next sub-string. */
                    uxCount = ( size_t ) pucByte[ uxIndex ];
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	4413      	add	r3, r2
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	617b      	str	r3, [r7, #20]
                    uxIndex++;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	3301      	adds	r3, #1
 8008008:	61bb      	str	r3, [r7, #24]

                    if( ( uxIndex + uxCount ) > uxSourceLen )
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	4413      	add	r3, r2
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	429a      	cmp	r2, r3
 8008014:	d217      	bcs.n	8008046 <prvReadNameField+0xba>
                    {
                        uxIndex = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	61bb      	str	r3, [r7, #24]
                        break;
 800801a:	e027      	b.n	800806c <prvReadNameField+0xe0>
                    }

                    while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
                    {
                        if( uxNameLen >= uxDestLen )
 800801c:	69fa      	ldr	r2, [r7, #28]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d302      	bcc.n	800802a <prvReadNameField+0x9e>
                        {
                            uxIndex = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	61bb      	str	r3, [r7, #24]
                            break;
 8008028:	e016      	b.n	8008058 <prvReadNameField+0xcc>

                            /* break out of inner loop here
                             * break out of outer loop at the test uxNameLen >= uxDestLen. */
                        }

                        pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	441a      	add	r2, r3
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	440b      	add	r3, r1
 8008036:	7812      	ldrb	r2, [r2, #0]
 8008038:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	3301      	adds	r3, #1
 800803e:	61fb      	str	r3, [r7, #28]
                        uxIndex++;
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	3301      	adds	r3, #1
 8008044:	61bb      	str	r3, [r7, #24]
                    while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	1e5a      	subs	r2, r3, #1
 800804a:	617a      	str	r2, [r7, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <prvReadNameField+0xcc>
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	429a      	cmp	r2, r3
 8008056:	d3e1      	bcc.n	800801c <prvReadNameField+0x90>
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	429a      	cmp	r2, r3
 800805e:	d205      	bcs.n	800806c <prvReadNameField+0xe0>
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	4413      	add	r3, r2
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1b4      	bne.n	8007fd6 <prvReadNameField+0x4a>
                    }
                }

                /* Confirm that a fully formed name was found. */
                if( uxIndex > 0U )
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d018      	beq.n	80080a4 <prvReadNameField+0x118>
                {
                    if( ( uxNameLen < uxDestLen ) && ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] == 0U ) )
 8008072:	69fa      	ldr	r2, [r7, #28]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d212      	bcs.n	80080a0 <prvReadNameField+0x114>
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	429a      	cmp	r2, r3
 8008080:	d20e      	bcs.n	80080a0 <prvReadNameField+0x114>
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	4413      	add	r3, r2
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d108      	bne.n	80080a0 <prvReadNameField+0x114>
                    {
                        pcName[ uxNameLen ] = '\0';
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	4413      	add	r3, r2
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
                        uxIndex++;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	3301      	adds	r3, #1
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	e001      	b.n	80080a4 <prvReadNameField+0x118>
                    }
                    else
                    {
                        uxIndex = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	61bb      	str	r3, [r7, #24]
                    }
                }
            }

            return uxIndex;
 80080a4:	69bb      	ldr	r3, [r7, #24]
        }
 80080a6:	4618      	mov	r0, r3
 80080a8:	3724      	adds	r7, #36	; 0x24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <prvSkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    _static size_t prvSkipNameField( const uint8_t * pucByte,
                                     size_t uxLength )
    {
 80080b2:	b480      	push	{r7}
 80080b4:	b087      	sub	sp, #28
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <prvSkipNameField+0x1e>
        {
            uxIndex = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	e03f      	b.n	8008150 <prvSkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	4413      	add	r3, r2
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080dc:	2bc0      	cmp	r3, #192	; 0xc0
 80080de:	d11f      	bne.n	8008120 <prvSkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d903      	bls.n	80080ee <prvSkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	3302      	adds	r3, #2
 80080ea:	613b      	str	r3, [r7, #16]
 80080ec:	e030      	b.n	8008150 <prvSkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	e02d      	b.n	8008150 <prvSkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	4413      	add	r3, r2
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	3301      	adds	r3, #1
 80080fe:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	429a      	cmp	r2, r3
 8008106:	d908      	bls.n	800811a <prvSkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4413      	add	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	e002      	b.n	8008120 <prvSkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	613b      	str	r3, [r7, #16]
                    break;
 800811e:	e008      	b.n	8008132 <prvSkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4413      	add	r3, r2
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <prvSkipNameField+0x80>
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d8e0      	bhi.n	80080f4 <prvSkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00b      	beq.n	8008150 <prvSkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	4413      	add	r3, r2
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d103      	bne.n	800814c <prvSkipNameField+0x9a>
                {
                    uxIndex++;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	3301      	adds	r3, #1
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	e001      	b.n	8008150 <prvSkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008150:	693b      	ldr	r3, [r7, #16]
    }
 8008152:	4618      	mov	r0, r3
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <ulDNSHandlePacket>:
 *
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	2b29      	cmp	r3, #41	; 0x29
 800816c:	d90f      	bls.n	800818e <ulDNSHandlePacket+0x30>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	3b2a      	subs	r3, #42	; 0x2a
 8008174:	60fb      	str	r3, [r7, #12]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b0b      	cmp	r3, #11
 800817a:	d908      	bls.n	800818e <ulDNSHandlePacket+0x30>
            {
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	332a      	adds	r3, #42	; 0x2a
 8008182:	60bb      	str	r3, [r7, #8]

                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) prvParseDNSReply( pucPayLoadBuffer,
 8008184:	2200      	movs	r2, #0
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	68b8      	ldr	r0, [r7, #8]
 800818a:	f000 f821 	bl	80081d0 <prvParseDNSReply>
                                           pdFALSE );
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 800818e:	2300      	movs	r3, #0
    }
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <ulNBNSHandlePacket>:
 * @param[in] pxNetworkBuffer: The network buffer holding the NBNS packet.
 *
 * @return pdFAIL to show that the packet was not consumed.
 */
        uint32_t ulNBNSHandlePacket( NetworkBufferDescriptor_t * pxNetworkBuffer )
        {
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
            UDPPacket_t * pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7ff fea5 	bl	8007ef4 <vCastPointerTo_UDPPacket_t>
 80081aa:	60f8      	str	r0, [r7, #12]
            uint8_t * pucUDPPayloadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( *pxUDPPacket ) ] );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	332a      	adds	r3, #42	; 0x2a
 80081b2:	60bb      	str	r3, [r7, #8]

            prvTreatNBNS( pucUDPPayloadBuffer,
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	69d9      	ldr	r1, [r3, #28]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80081be:	461a      	mov	r2, r3
 80081c0:	68b8      	ldr	r0, [r7, #8]
 80081c2:	f000 fb3d 	bl	8008840 <prvTreatNBNS>
                          pxNetworkBuffer->xDataLength,
                          pxUDPPacket->xIPHeader.ulSourceIPAddress );

            /* The packet was not consumed. */
            return pdFAIL;
 80081c6:	2300      	movs	r3, #0
        }
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <prvParseDNSReply>:
 *         0 if xExpected set to pdFALSE.
 */
    _static uint32_t prvParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                       size_t uxBufferLength,
                                       BaseType_t xExpected )
    {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b0aa      	sub	sp, #168	; 0xa8
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
        DNSMessage_t * pxDNSMessageHeader;
        /* This pointer is not used to modify anything */
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        uint32_t ulIPAddress = 0UL;
 80081dc:	2300      	movs	r3, #0
 80081de:	637b      	str	r3, [r7, #52]	; 0x34

        #if ( ipconfigUSE_LLMNR == 1 )
            char * pcRequestedName = NULL;
 80081e0:	2300      	movs	r3, #0
 80081e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        #endif
        uint8_t * pucByte;
        size_t uxSourceBytesRemaining;
        uint16_t x, usDataLength, usQuestions;
        uint16_t usType = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        BaseType_t xReturn = pdTRUE;
 80081ec:	2301      	movs	r3, #1
 80081ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_LLMNR == 1 )
            uint16_t usClass = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        #endif
        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            BaseType_t xDoStore = xExpected;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	66bb      	str	r3, [r7, #104]	; 0x68
            char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = "";
 80081fc:	2300      	movs	r3, #0
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	609a      	str	r2, [r3, #8]
        #endif
        const size_t uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 800820c:	2304      	movs	r3, #4
 800820e:	667b      	str	r3, [r7, #100]	; 0x64

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b0b      	cmp	r3, #11
 8008214:	d803      	bhi.n	800821e <prvParseDNSReply+0x4e>
        {
            xReturn = pdFALSE;
 8008216:	2300      	movs	r3, #0
 8008218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800821c:	e2fd      	b.n	800881a <prvParseDNSReply+0x64a>
        }
        else
        {
            uxSourceBytesRemaining = uxBufferLength;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

            /* Parse the DNS message header. Map the byte stream onto a structure
             * for easier access. */
            pxDNSMessageHeader = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucUDPPayloadBuffer );
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fe85 	bl	8007f34 <vCastPointerTo_DNSMessage_t>
 800822a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                size_t uxResult;

                /* Start at the first byte after the header. */
                pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	330c      	adds	r3, #12
 8008238:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 800823c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008240:	3b0c      	subs	r3, #12
 8008242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Skip any question records. */
                usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8008246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800824a:	889b      	ldrh	r3, [r3, #4]
 800824c:	b29b      	uxth	r3, r3
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	b21a      	sxth	r2, r3
 8008252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008256:	889b      	ldrh	r3, [r3, #4]
 8008258:	b29b      	uxth	r3, r3
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	b29b      	uxth	r3, r3
 800825e:	b21b      	sxth	r3, r3
 8008260:	4313      	orrs	r3, r2
 8008262:	b21b      	sxth	r3, r3
 8008264:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

                for( x = 0U; x < usQuestions; x++ )
 8008268:	2300      	movs	r3, #0
 800826a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800826e:	e077      	b.n	8008360 <prvParseDNSReply+0x190>
                {
                    #if ( ipconfigUSE_LLMNR == 1 )
                        {
                            if( x == 0U )
 8008270:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008274:	2b00      	cmp	r3, #0
 8008276:	d103      	bne.n	8008280 <prvParseDNSReply+0xb0>
                            {
                                pcRequestedName = ( char * ) pucByte;
 8008278:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800827c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                            }
                        }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8008280:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008284:	2b00      	cmp	r3, #0
 8008286:	d123      	bne.n	80082d0 <prvParseDNSReply+0x100>
                        {
                            uxResult = prvReadNameField( pucByte,
 8008288:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800828c:	2310      	movs	r3, #16
 800828e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008292:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008296:	f7ff fe79 	bl	8007f8c <prvReadNameField>
 800829a:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                         uxSourceBytesRemaining,
                                                         pcName,
                                                         sizeof( pcName ) );

                            /* Check for a malformed response. */
                            if( uxResult == 0U )
 800829c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <prvParseDNSReply+0xda>
                            {
                                xReturn = pdFALSE;
 80082a2:	2300      	movs	r3, #0
 80082a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                break;
 80082a8:	e060      	b.n	800836c <prvParseDNSReply+0x19c>
                            }

                            uxBytesRead += uxResult;
 80082aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082b0:	4413      	add	r3, r2
 80082b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            pucByte = &( pucByte[ uxResult ] );
 80082b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082bc:	4413      	add	r3, r2
 80082be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= uxResult;
 80082c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80082c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082ce:	e01f      	b.n	8008310 <prvParseDNSReply+0x140>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = prvSkipNameField( pucByte,
 80082d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082d4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80082d8:	f7ff feeb 	bl	80080b2 <prvSkipNameField>
 80082dc:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                     uxSourceBytesRemaining );

                        /* Check for a malformed response. */
                        if( uxResult == 0U )
 80082de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d103      	bne.n	80082ec <prvParseDNSReply+0x11c>
                        {
                            xReturn = pdFALSE;
 80082e4:	2300      	movs	r3, #0
 80082e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 80082ea:	e03f      	b.n	800836c <prvParseDNSReply+0x19c>
                        }

                        uxBytesRead += uxResult;
 80082ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082f2:	4413      	add	r3, r2
 80082f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        pucByte = &( pucByte[ uxResult ] );
 80082f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082fe:	4413      	add	r3, r2
 8008300:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= uxResult;
 8008304:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    }

                    /* Check the remaining buffer size. */
                    if( uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008314:	2b03      	cmp	r3, #3
 8008316:	d91a      	bls.n	800834e <prvParseDNSReply+0x17e>
                    {
                        #if ( ipconfigUSE_LLMNR == 1 )
                            {
                                /* usChar2u16 returns value in host endianness. */
                                usType = usChar2u16( pucByte );
 8008318:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800831c:	f7ff fdf5 	bl	8007f0a <usChar2u16>
 8008320:	4603      	mov	r3, r0
 8008322:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                                usClass = usChar2u16( &( pucByte[ 2 ] ) );
 8008326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800832a:	3302      	adds	r3, #2
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff fdec 	bl	8007f0a <usChar2u16>
 8008332:	4603      	mov	r3, r0
 8008334:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                            }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        pucByte = &( pucByte[ sizeof( uint32_t ) ] );
 8008338:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800833c:	3304      	adds	r3, #4
 800833e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= sizeof( uint32_t );
 8008342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008346:	3b04      	subs	r3, #4
 8008348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800834c:	e003      	b.n	8008356 <prvParseDNSReply+0x186>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        break;
 8008354:	e00a      	b.n	800836c <prvParseDNSReply+0x19c>
                for( x = 0U; x < usQuestions; x++ )
 8008356:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800835a:	3301      	adds	r3, #1
 800835c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008360:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008364:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008368:	429a      	cmp	r2, r3
 800836a:	d381      	bcc.n	8008270 <prvParseDNSReply+0xa0>
                    }
                }

                if( xReturn == pdFALSE )
 800836c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 824f 	beq.w	8008814 <prvParseDNSReply+0x644>
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                /* Search through the answer records. */
                pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8008376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800837a:	88db      	ldrh	r3, [r3, #6]
 800837c:	b29b      	uxth	r3, r3
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	b21a      	sxth	r2, r3
 8008382:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008386:	88db      	ldrh	r3, [r3, #6]
 8008388:	b29b      	uxth	r3, r3
 800838a:	0a1b      	lsrs	r3, r3, #8
 800838c:	b29b      	uxth	r3, r3
 800838e:	b21b      	sxth	r3, r3
 8008390:	4313      	orrs	r3, r2
 8008392:	b21b      	sxth	r3, r3
 8008394:	b29a      	uxth	r2, r3
 8008396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800839a:	80da      	strh	r2, [r3, #6]

                if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 800839c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083a0:	885b      	ldrh	r3, [r3, #2]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 80083a8:	2b80      	cmp	r3, #128	; 0x80
 80083aa:	f040 80ff 	bne.w	80085ac <prvParseDNSReply+0x3dc>
                {
                    const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 80083ae:	2301      	movs	r3, #1
 80083b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                    uint16_t usNumARecordsStored = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 80083ba:	2300      	movs	r3, #0
 80083bc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80083c0:	e0ea      	b.n	8008598 <prvParseDNSReply+0x3c8>
                    {
                        BaseType_t xDoAccept;

                        if( usNumARecordsStored >= usCount )
 80083c2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80083c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80083ca:	429a      	cmp	r2, r3
 80083cc:	f080 8224 	bcs.w	8008818 <prvParseDNSReply+0x648>
                        {
                            /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                            break;
                        }

                        uxResult = prvSkipNameField( pucByte,
 80083d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083d4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80083d8:	f7ff fe6b 	bl	80080b2 <prvSkipNameField>
 80083dc:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                     uxSourceBytesRemaining );

                        /* Check for a malformed response. */
                        if( uxResult == 0U )
 80083de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <prvParseDNSReply+0x21c>
                        {
                            xReturn = pdFALSE;
 80083e4:	2300      	movs	r3, #0
 80083e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 80083ea:	e216      	b.n	800881a <prvParseDNSReply+0x64a>
                        }

                        uxBytesRead += uxResult;
 80083ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083f2:	4413      	add	r3, r2
 80083f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        pucByte = &( pucByte[ uxResult ] );
 80083f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083fe:	4413      	add	r3, r2
 8008400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= uxResult;
 8008404:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Is there enough data for an IPv4 A record answer and, if so,
                         * is this an A record? */
                        if( uxSourceBytesRemaining < sizeof( uint16_t ) )
 8008410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008414:	2b01      	cmp	r3, #1
 8008416:	d803      	bhi.n	8008420 <prvParseDNSReply+0x250>
                        {
                            xReturn = pdFALSE;
 8008418:	2300      	movs	r3, #0
 800841a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800841e:	e1fc      	b.n	800881a <prvParseDNSReply+0x64a>
                        }

                        usType = usChar2u16( pucByte );
 8008420:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008424:	f7ff fd71 	bl	8007f0a <usChar2u16>
 8008428:	4603      	mov	r3, r0
 800842a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

                        if( usType == ( uint16_t ) dnsTYPE_A_HOST )
 800842e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8008432:	2b01      	cmp	r3, #1
 8008434:	d10b      	bne.n	800844e <prvParseDNSReply+0x27e>
                        {
                            if( uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength ) )
 8008436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008438:	330a      	adds	r3, #10
 800843a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800843e:	429a      	cmp	r2, r3
 8008440:	d302      	bcc.n	8008448 <prvParseDNSReply+0x278>
                            {
                                xDoAccept = pdTRUE;
 8008442:	2301      	movs	r3, #1
 8008444:	67bb      	str	r3, [r7, #120]	; 0x78
 8008446:	e004      	b.n	8008452 <prvParseDNSReply+0x282>
                            }
                            else
                            {
                                xDoAccept = pdFALSE;
 8008448:	2300      	movs	r3, #0
 800844a:	67bb      	str	r3, [r7, #120]	; 0x78
 800844c:	e001      	b.n	8008452 <prvParseDNSReply+0x282>
                            }
                        }
                        else
                        {
                            /* Unknown host type. */
                            xDoAccept = pdFALSE;
 800844e:	2300      	movs	r3, #0
 8008450:	67bb      	str	r3, [r7, #120]	; 0x78
                        }

                        if( xDoAccept != pdFALSE )
 8008452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008454:	2b00      	cmp	r3, #0
 8008456:	d05f      	beq.n	8008518 <prvParseDNSReply+0x348>
                        {
                            /* This is the required record type and is of sufficient size. */

                            /* Mapping pucByte to a DNSAnswerRecord allows easy access of the
                             * fields of the structure. */
                            pxDNSAnswerRecord = ipCAST_PTR_TO_TYPE_PTR( DNSAnswerRecord_t, pucByte );
 8008458:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800845c:	f7ff fd75 	bl	8007f4a <vCastPointerTo_DNSAnswerRecord_t>
 8008460:	6478      	str	r0, [r7, #68]	; 0x44

                            /* Sanity check the data length of an IPv4 answer. */
                            if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == ( uint16_t ) uxAddressLength )
 8008462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008464:	891b      	ldrh	r3, [r3, #8]
 8008466:	b29b      	uxth	r3, r3
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	b21a      	sxth	r2, r3
 800846c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800846e:	891b      	ldrh	r3, [r3, #8]
 8008470:	b29b      	uxth	r3, r3
 8008472:	0a1b      	lsrs	r3, r3, #8
 8008474:	b29b      	uxth	r3, r3
 8008476:	b21b      	sxth	r3, r3
 8008478:	4313      	orrs	r3, r2
 800847a:	b21b      	sxth	r3, r3
 800847c:	b29a      	uxth	r2, r3
 800847e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008480:	b29b      	uxth	r3, r3
 8008482:	429a      	cmp	r2, r3
 8008484:	d139      	bne.n	80084fa <prvParseDNSReply+0x32a>
                                /*
                                 * Use helper variables for memcpy() to remain
                                 * compliant with MISRA Rule 21.15.  These should be
                                 * optimized away.
                                 */
                                pvCopySource = &pucByte[ sizeof( DNSAnswerRecord_t ) ];
 8008486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800848a:	330a      	adds	r3, #10
 800848c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                pvCopyDest = &ulIPAddress;
 800848e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008492:	63bb      	str	r3, [r7, #56]	; 0x38
                                ( void ) memcpy( pvCopyDest, pvCopySource, uxAddressLength );
 8008494:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008496:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800849a:	f009 f962 	bl	8011762 <memcpy>
                                    {
                                        char cBuffer[ 16 ];

                                        /* The reply will only be stored in the DNS cache when the
                                         * request was issued by this device. */
                                        if( xDoStore != pdFALSE )
 800849e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00d      	beq.n	80084c0 <prvParseDNSReply+0x2f0>
                                        {
                                            ( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 80084a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80084ac:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084b0:	2300      	movs	r3, #0
 80084b2:	f000 fba1 	bl	8008bf8 <prvProcessDNSCache>
                                            usNumARecordsStored++; /* Track # of A records stored */
 80084b6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80084ba:	3301      	adds	r3, #1
 80084bc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                                        }

                                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 80084c0:	f107 0214 	add.w	r2, r7, #20
 80084c4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80084c8:	2310      	movs	r3, #16
 80084ca:	2002      	movs	r0, #2
 80084cc:	f002 fbe6 	bl	800ac9c <FreeRTOS_inet_ntop>
                                        /* Show what has happened. */
                                        FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 80084d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	4618      	mov	r0, r3
 80084da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <prvParseDNSReply+0x314>
 80084e0:	4b61      	ldr	r3, [pc, #388]	; (8008668 <prvParseDNSReply+0x498>)
 80084e2:	e000      	b.n	80084e6 <prvParseDNSReply+0x316>
 80084e4:	4b61      	ldr	r3, [pc, #388]	; (800866c <prvParseDNSReply+0x49c>)
 80084e6:	f107 0114 	add.w	r1, r7, #20
 80084ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	460b      	mov	r3, r1
 80084f2:	4601      	mov	r1, r0
 80084f4:	485e      	ldr	r0, [pc, #376]	; (8008670 <prvParseDNSReply+0x4a0>)
 80084f6:	f7f8 fa29 	bl	800094c <vLoggingPrintf>
                                                           ( xDoStore != 0 ) ? "" : " NOT" ) );
                                    }
                                #endif /* ipconfigUSE_DNS_CACHE */
                            }

                            pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) + uxAddressLength ] );
 80084fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084fc:	330a      	adds	r3, #10
 80084fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008502:	4413      	add	r3, r2
 8008504:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength );
 8008508:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800850c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	3b0a      	subs	r3, #10
 8008512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008516:	e03a      	b.n	800858e <prvParseDNSReply+0x3be>
                        }
                        else if( uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 8008518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800851c:	2b09      	cmp	r3, #9
 800851e:	d936      	bls.n	800858e <prvParseDNSReply+0x3be>
                        {
                            /* It's not an A record, so skip it. Get the header location
                             * and then jump over the header. */
                            /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */
                            pxDNSAnswerRecord = ipCAST_PTR_TO_TYPE_PTR( DNSAnswerRecord_t, pucByte );
 8008520:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008524:	f7ff fd11 	bl	8007f4a <vCastPointerTo_DNSAnswerRecord_t>
 8008528:	6478      	str	r0, [r7, #68]	; 0x44

                            pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800852a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800852e:	330a      	adds	r3, #10
 8008530:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8008534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008538:	3b0a      	subs	r3, #10
 800853a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                            /* Determine the length of the answer data from the header. */
                            usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 800853e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008540:	891b      	ldrh	r3, [r3, #8]
 8008542:	b29b      	uxth	r3, r3
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	b21a      	sxth	r2, r3
 8008548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800854a:	891b      	ldrh	r3, [r3, #8]
 800854c:	b29b      	uxth	r3, r3
 800854e:	0a1b      	lsrs	r3, r3, #8
 8008550:	b29b      	uxth	r3, r3
 8008552:	b21b      	sxth	r3, r3
 8008554:	4313      	orrs	r3, r2
 8008556:	b21b      	sxth	r3, r3
 8008558:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                            /* Jump over the answer. */
                            if( uxSourceBytesRemaining >= usDataLength )
 800855c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008560:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008564:	429a      	cmp	r2, r3
 8008566:	d30e      	bcc.n	8008586 <prvParseDNSReply+0x3b6>
                            {
                                pucByte = &( pucByte[ usDataLength ] );
 8008568:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800856c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008570:	4413      	add	r3, r2
 8008572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                                uxSourceBytesRemaining -= usDataLength;
 8008576:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800857a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008584:	e003      	b.n	800858e <prvParseDNSReply+0x3be>
                            }
                            else
                            {
                                /* Malformed response. */
                                xReturn = pdFALSE;
 8008586:	2300      	movs	r3, #0
 8008588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                break;
 800858c:	e145      	b.n	800881a <prvParseDNSReply+0x64a>
                    for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 800858e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008592:	3301      	adds	r3, #1
 8008594:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800859c:	88db      	ldrh	r3, [r3, #6]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80085a4:	429a      	cmp	r2, r3
 80085a6:	f4ff af0c 	bcc.w	80083c2 <prvParseDNSReply+0x1f2>
 80085aa:	e136      	b.n	800881a <prvParseDNSReply+0x64a>
                        }
                    }
                }

                #if ( ipconfigUSE_LLMNR == 1 )
                    else if( ( usQuestions != ( uint16_t ) 0U ) && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) && ( pcRequestedName != NULL ) )
 80085ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 8132 	beq.w	800881a <prvParseDNSReply+0x64a>
 80085b6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	f040 812d 	bne.w	800881a <prvParseDNSReply+0x64a>
 80085c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	f040 8128 	bne.w	800881a <prvParseDNSReply+0x64a>
 80085ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 8123 	beq.w	800881a <prvParseDNSReply+0x64a>
                    {
                        /* If this is not a reply to our DNS request, it might an LLMNR
                         * request. */
                        if( xApplicationDNSQueryHook( &( pcRequestedName[ 1 ] ) ) != pdFALSE )
 80085d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085d8:	3301      	adds	r3, #1
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f8 f9c0 	bl	8000960 <xApplicationDNSQueryHook>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 8119 	beq.w	800881a <prvParseDNSReply+0x64a>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	677b      	str	r3, [r7, #116]	; 0x74
                            NetworkBufferDescriptor_t * pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 ff18 	bl	8009422 <pxUDPPayloadBuffer_to_NetworkBuffer>
 80085f2:	6738      	str	r0, [r7, #112]	; 0x70
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 80085f4:	2300      	movs	r3, #0
 80085f6:	66fb      	str	r3, [r7, #108]	; 0x6c

                            if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 80085f8:	4b1e      	ldr	r3, [pc, #120]	; (8008674 <prvParseDNSReply+0x4a4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d13d      	bne.n	800867c <prvParseDNSReply+0x4ac>
 8008600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008602:	2b00      	cmp	r3, #0
 8008604:	d03a      	beq.n	800867c <prvParseDNSReply+0x4ac>
                            {
                                size_t uxDataLength = uxBufferLength + sizeof( UDPHeader_t ) + sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	332a      	adds	r3, #42	; 0x2a
 800860a:	65bb      	str	r3, [r7, #88]	; 0x58

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 800860c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800860e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008610:	61da      	str	r2, [r3, #28]
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, uxDataLength + sizeof( LLMNRAnswer_t ) );
 8008612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008614:	3310      	adds	r3, #16
 8008616:	4619      	mov	r1, r3
 8008618:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800861a:	f000 fea7 	bl	800936c <pxDuplicateNetworkBufferWithDescriptor>
 800861e:	6778      	str	r0, [r7, #116]	; 0x74

                                if( pxNewBuffer != NULL )
 8008620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008622:	2b00      	cmp	r3, #0
 8008624:	d028      	beq.n	8008678 <prvParseDNSReply+0x4a8>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8008626:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	657b      	str	r3, [r7, #84]	; 0x54
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 8008630:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	653b      	str	r3, [r7, #80]	; 0x50

                                    pxNetworkBuffer = pxNewBuffer;
 800863a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800863c:	673b      	str	r3, [r7, #112]	; 0x70
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 800863e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	332a      	adds	r3, #42	; 0x2a
 8008644:	66fb      	str	r3, [r7, #108]	; 0x6c

                                    pucByte = &( pucNewBuffer[ xOffset1 ] );
 8008646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800864a:	4413      	add	r3, r2
 800864c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                                    pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 8008650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008652:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008654:	4413      	add	r3, r2
 8008656:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                                    pxDNSMessageHeader = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucNewBuffer );
 800865a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800865c:	f7ff fc6a 	bl	8007f34 <vCastPointerTo_DNSMessage_t>
 8008660:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8008664:	e00a      	b.n	800867c <prvParseDNSReply+0x4ac>
 8008666:	bf00      	nop
 8008668:	08013aec 	.word	0x08013aec
 800866c:	08013af0 	.word	0x08013af0
 8008670:	08013af8 	.word	0x08013af8
 8008674:	08015454 	.word	0x08015454
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	673b      	str	r3, [r7, #112]	; 0x70
                                }
                            }

                            /* The test on 'pucNewBuffer' is only to satisfy lint. */
                            if( ( pxNetworkBuffer != NULL ) && ( pucNewBuffer != NULL ) )
 800867c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 80cb 	beq.w	800881a <prvParseDNSReply+0x64a>
 8008684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80c7 	beq.w	800881a <prvParseDNSReply+0x64a>
                            {
                                pxAnswer = ipCAST_PTR_TO_TYPE_PTR( LLMNRAnswer_t, pucByte );
 800868c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008690:	f7ff fc66 	bl	8007f60 <vCastPointerTo_LLMNRAnswer_t>
 8008694:	64f8      	str	r0, [r7, #76]	; 0x4c

                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                #ifndef _lint
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
 8008696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800869a:	3302      	adds	r3, #2
 800869c:	2280      	movs	r2, #128	; 0x80
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086a4:	3303      	adds	r3, #3
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                       /* Provide a single answer */
 80086aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086ae:	3306      	adds	r3, #6
 80086b0:	2200      	movs	r2, #0
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086b8:	3307      	adds	r3, #7
 80086ba:	2201      	movs	r2, #1
 80086bc:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                  /* No authority */
 80086be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086c2:	3308      	adds	r3, #8
 80086c4:	2200      	movs	r2, #0
 80086c6:	701a      	strb	r2, [r3, #0]
 80086c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086cc:	3309      	adds	r3, #9
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                 /* No additional info */
 80086d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086d6:	330a      	adds	r3, #10
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086e0:	330b      	adds	r3, #11
 80086e2:	2200      	movs	r2, #0
 80086e4:	701a      	strb	r2, [r3, #0]
                                #endif /* lint */

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 80086e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e8:	22c0      	movs	r2, #192	; 0xc0
 80086ea:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( pcRequestedName - ( char * ) pucNewBuffer );
 80086ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80086f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f8:	705a      	strb	r2, [r3, #1]

                                #ifndef _lint
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 80086fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fc:	3302      	adds	r3, #2
 80086fe:	2200      	movs	r2, #0
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008704:	3303      	adds	r3, #3
 8008706:	2201      	movs	r2, #1
 8008708:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );   /* 1: Class IN */
 800870a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800870c:	3304      	adds	r3, #4
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008714:	3305      	adds	r3, #5
 8008716:	2201      	movs	r2, #1
 8008718:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800871a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871c:	3306      	adds	r3, #6
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008724:	3307      	adds	r3, #7
 8008726:	2204      	movs	r2, #4
 8008728:	701a      	strb	r2, [r3, #0]
 800872a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800872c:	3308      	adds	r3, #8
 800872e:	2293      	movs	r2, #147	; 0x93
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008734:	3309      	adds	r3, #9
 8008736:	22e0      	movs	r2, #224	; 0xe0
 8008738:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 800873a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873c:	330a      	adds	r3, #10
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	330b      	adds	r3, #11
 8008746:	2204      	movs	r2, #4
 8008748:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 800874a:	4b3c      	ldr	r3, [pc, #240]	; (800883c <prvParseDNSReply+0x66c>)
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	061a      	lsls	r2, r3, #24
 8008750:	4b3a      	ldr	r3, [pc, #232]	; (800883c <prvParseDNSReply+0x66c>)
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	021b      	lsls	r3, r3, #8
 8008756:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800875a:	431a      	orrs	r2, r3
 800875c:	4b37      	ldr	r3, [pc, #220]	; (800883c <prvParseDNSReply+0x66c>)
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	0a1b      	lsrs	r3, r3, #8
 8008762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008766:	431a      	orrs	r2, r3
 8008768:	4b34      	ldr	r3, [pc, #208]	; (800883c <prvParseDNSReply+0x66c>)
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	0e1b      	lsrs	r3, r3, #24
 800876e:	4313      	orrs	r3, r2
 8008770:	0e1a      	lsrs	r2, r3, #24
 8008772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008774:	330c      	adds	r3, #12
 8008776:	b2d2      	uxtb	r2, r2
 8008778:	701a      	strb	r2, [r3, #0]
 800877a:	4b30      	ldr	r3, [pc, #192]	; (800883c <prvParseDNSReply+0x66c>)
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	061a      	lsls	r2, r3, #24
 8008780:	4b2e      	ldr	r3, [pc, #184]	; (800883c <prvParseDNSReply+0x66c>)
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800878a:	431a      	orrs	r2, r3
 800878c:	4b2b      	ldr	r3, [pc, #172]	; (800883c <prvParseDNSReply+0x66c>)
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	0a1b      	lsrs	r3, r3, #8
 8008792:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008796:	431a      	orrs	r2, r3
 8008798:	4b28      	ldr	r3, [pc, #160]	; (800883c <prvParseDNSReply+0x66c>)
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	0e1b      	lsrs	r3, r3, #24
 800879e:	4313      	orrs	r3, r2
 80087a0:	0c1a      	lsrs	r2, r3, #16
 80087a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a4:	330d      	adds	r3, #13
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <prvParseDNSReply+0x66c>)
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	061a      	lsls	r2, r3, #24
 80087b0:	4b22      	ldr	r3, [pc, #136]	; (800883c <prvParseDNSReply+0x66c>)
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	021b      	lsls	r3, r3, #8
 80087b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087ba:	431a      	orrs	r2, r3
 80087bc:	4b1f      	ldr	r3, [pc, #124]	; (800883c <prvParseDNSReply+0x66c>)
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	0a1b      	lsrs	r3, r3, #8
 80087c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087c6:	431a      	orrs	r2, r3
 80087c8:	4b1c      	ldr	r3, [pc, #112]	; (800883c <prvParseDNSReply+0x66c>)
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	0e1b      	lsrs	r3, r3, #24
 80087ce:	4313      	orrs	r3, r2
 80087d0:	0a1a      	lsrs	r2, r3, #8
 80087d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d4:	330e      	adds	r3, #14
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	4b18      	ldr	r3, [pc, #96]	; (800883c <prvParseDNSReply+0x66c>)
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	0e1a      	lsrs	r2, r3, #24
 80087e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e2:	330f      	adds	r3, #15
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	701a      	strb	r2, [r3, #0]
                                #endif /* lint */
                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 80087e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3310      	adds	r3, #16
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

                                prvReplyDNSMessage( pxNetworkBuffer, usLength );
 80087fa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80087fe:	4619      	mov	r1, r3
 8008800:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008802:	f000 f98b 	bl	8008b1c <prvReplyDNSMessage>

                                if( pxNewBuffer != NULL )
 8008806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008808:	2b00      	cmp	r3, #0
 800880a:	d006      	beq.n	800881a <prvParseDNSReply+0x64a>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 800880c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800880e:	f008 ff23 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
 8008812:	e002      	b.n	800881a <prvParseDNSReply+0x64a>
                    break;
 8008814:	bf00      	nop
 8008816:	e000      	b.n	800881a <prvParseDNSReply+0x64a>
                            break;
 8008818:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 800881a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <prvParseDNSReply+0x658>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = dnsPARSE_ERROR;
 8008822:	2300      	movs	r3, #0
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
 8008826:	e004      	b.n	8008832 <prvParseDNSReply+0x662>
        }
        else if( xExpected == pdFALSE )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <prvParseDNSReply+0x662>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0UL;
 800882e:	2300      	movs	r3, #0
 8008830:	637b      	str	r3, [r7, #52]	; 0x34

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            ( void ) xDoStore;
        #endif

        return ulIPAddress;
 8008832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8008834:	4618      	mov	r0, r3
 8008836:	37a0      	adds	r7, #160	; 0xa0
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20000018 	.word	0x20000018

08008840 <prvTreatNBNS>:
 * @param[in] ulIPAddress: IP address of the sender.
 */
        static void prvTreatNBNS( uint8_t * pucPayload,
                                  size_t uxBufferLength,
                                  uint32_t ulIPAddress )
        {
 8008840:	b580      	push	{r7, lr}
 8008842:	b094      	sub	sp, #80	; 0x50
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
            uint16_t usFlags, usType, usClass;
            uint8_t * pucSource, * pucTarget;
            uint8_t ucByte;
            uint8_t ucNBNSName[ 17 ];
            uint8_t * pucUDPPayloadBuffer = pucPayload;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	643b      	str	r3, [r7, #64]	; 0x40
            NetworkBufferDescriptor_t * pxNetworkBuffer;
            size_t uxBytesNeeded = sizeof( UDPPacket_t ) + sizeof( NBNSRequest_t );
 8008850:	235c      	movs	r3, #92	; 0x5c
 8008852:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Check for minimum buffer size. */
            if( uxBufferLength < uxBytesNeeded )
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008858:	429a      	cmp	r2, r3
 800885a:	f0c0 8157 	bcc.w	8008b0c <prvTreatNBNS+0x2cc>
            {
                return;
            }

            /* Read the request flags in host endianness. */
            usFlags = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usFlags ) ] ) );
 800885e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008860:	3302      	adds	r3, #2
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff fb51 	bl	8007f0a <usChar2u16>
 8008868:	4603      	mov	r3, r0
 800886a:	86fb      	strh	r3, [r7, #54]	; 0x36

            if( ( usFlags & dnsNBNS_FLAGS_OPCODE_MASK ) == dnsNBNS_FLAGS_OPCODE_QUERY )
 800886c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800886e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8008872:	2b00      	cmp	r3, #0
 8008874:	f040 814b 	bne.w	8008b0e <prvTreatNBNS+0x2ce>
            {
                usType = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usType ) ] ) );
 8008878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887a:	332e      	adds	r3, #46	; 0x2e
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff fb44 	bl	8007f0a <usChar2u16>
 8008882:	4603      	mov	r3, r0
 8008884:	86bb      	strh	r3, [r7, #52]	; 0x34
                usClass = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usClass ) ] ) );
 8008886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008888:	3330      	adds	r3, #48	; 0x30
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff fb3d 	bl	8007f0a <usChar2u16>
 8008890:	4603      	mov	r3, r0
 8008892:	867b      	strh	r3, [r7, #50]	; 0x32
                /* Not used for now */
                ( void ) usClass;

                /* For NBNS a name is 16 bytes long, written with capitals only.
                 * Make sure that the copy is terminated with a zero. */
                pucTarget = &( ucNBNSName[ sizeof( ucNBNSName ) - 2U ] );
 8008894:	f107 0310 	add.w	r3, r7, #16
 8008898:	330f      	adds	r3, #15
 800889a:	64bb      	str	r3, [r7, #72]	; 0x48
                pucTarget[ 1 ] = ( uint8_t ) 0U;
 800889c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800889e:	3301      	adds	r3, #1
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]

                /* Start with decoding the last 2 bytes. */
                pucSource = &( pucUDPPayloadBuffer[ ( dnsNBNS_ENCODED_NAME_LENGTH - 2 ) + offsetof( NBNSRequest_t, ucName ) ] );
 80088a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a6:	332b      	adds	r3, #43	; 0x2b
 80088a8:	64fb      	str	r3, [r7, #76]	; 0x4c

                for( ; ; )
                {
                    const uint8_t ucCharA = ( uint8_t ) 0x41U;
 80088aa:	2341      	movs	r3, #65	; 0x41
 80088ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                    ucByte = ( ( uint8_t ) ( ( pucSource[ 0 ] - ucCharA ) << 4 ) ) | ( pucSource[ 1 ] - ucCharA );
 80088b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b2:	781a      	ldrb	r2, [r3, #0]
 80088b4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	b25a      	sxtb	r2, r3
 80088c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c4:	3301      	adds	r3, #1
 80088c6:	7819      	ldrb	r1, [r3, #0]
 80088c8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80088cc:	1acb      	subs	r3, r1, r3
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	4313      	orrs	r3, r2
 80088d4:	b25b      	sxtb	r3, r3
 80088d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

                    /* Make sure there are no trailing spaces in the name. */
                    if( ( ucByte == ( uint8_t ) ' ' ) && ( pucTarget[ 1 ] == 0U ) )
 80088da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d107      	bne.n	80088f2 <prvTreatNBNS+0xb2>
 80088e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e4:	3301      	adds	r3, #1
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <prvTreatNBNS+0xb2>
                    {
                        ucByte = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    }

                    *pucTarget = ucByte;
 80088f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80088f8:	701a      	strb	r2, [r3, #0]

                    if( pucTarget == ucNBNSName )
 80088fa:	f107 0310 	add.w	r3, r7, #16
 80088fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008900:	429a      	cmp	r2, r3
 8008902:	d006      	beq.n	8008912 <prvTreatNBNS+0xd2>
                    {
                        break;
                    }

                    pucTarget -= 1;
 8008904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008906:	3b01      	subs	r3, #1
 8008908:	64bb      	str	r3, [r7, #72]	; 0x48
                    pucSource -= 2;
 800890a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800890c:	3b02      	subs	r3, #2
 800890e:	64fb      	str	r3, [r7, #76]	; 0x4c
                {
 8008910:	e7cb      	b.n	80088aa <prvTreatNBNS+0x6a>
                        break;
 8008912:	bf00      	nop
                }

                #if ( ipconfigUSE_DNS_CACHE == 1 )
                    {
                        if( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) != 0U )
 8008914:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008918:	2b00      	cmp	r3, #0
 800891a:	da06      	bge.n	800892a <prvTreatNBNS+0xea>
                        {
                            /* If this is a response from another device,
                             * add the name to the DNS cache */
                            ( void ) prvProcessDNSCache( ( char * ) ucNBNSName, &( ulIPAddress ), 0, pdFALSE );
 800891c:	1d39      	adds	r1, r7, #4
 800891e:	f107 0010 	add.w	r0, r7, #16
 8008922:	2300      	movs	r3, #0
 8008924:	2200      	movs	r2, #0
 8008926:	f000 f967 	bl	8008bf8 <prvProcessDNSCache>
                        /* Avoid compiler warnings. */
                        ( void ) ulIPAddress;
                    }
                #endif /* ipconfigUSE_DNS_CACHE */

                if( ( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) == 0U ) &&
 800892a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800892e:	2b00      	cmp	r3, #0
 8008930:	f2c0 80ed 	blt.w	8008b0e <prvTreatNBNS+0x2ce>
 8008934:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008936:	2b20      	cmp	r3, #32
 8008938:	f040 80e9 	bne.w	8008b0e <prvTreatNBNS+0x2ce>
                    ( usType == dnsNBNS_TYPE_NET_BIOS ) &&
                    ( xApplicationDNSQueryHook( ( const char * ) ucNBNSName ) != pdFALSE ) )
 800893c:	f107 0310 	add.w	r3, r7, #16
 8008940:	4618      	mov	r0, r3
 8008942:	f7f8 f80d 	bl	8000960 <xApplicationDNSQueryHook>
 8008946:	4603      	mov	r3, r0
                    ( usType == dnsNBNS_TYPE_NET_BIOS ) &&
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 80e0 	beq.w	8008b0e <prvTreatNBNS+0x2ce>
                    DNSMessage_t * pxMessage;
                    NBNSAnswer_t * pxAnswer;

                    /* Someone is looking for a device with ucNBNSName,
                     * prepare a positive reply. */
                    pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 800894e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008950:	f000 fd67 	bl	8009422 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008954:	63f8      	str	r0, [r7, #60]	; 0x3c

                    if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8008956:	4b6f      	ldr	r3, [pc, #444]	; (8008b14 <prvTreatNBNS+0x2d4>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d116      	bne.n	800898c <prvTreatNBNS+0x14c>
 800895e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008960:	2b00      	cmp	r3, #0
 8008962:	d013      	beq.n	800898c <prvTreatNBNS+0x14c>
                    {
                        NetworkBufferDescriptor_t * pxNewBuffer;

                        /* The field xDataLength was set to the total length of the UDP packet,
                         * i.e. the payload size plus sizeof( UDPPacket_t ). */
                        pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength + sizeof( NBNSAnswer_t ) );
 8008964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	3310      	adds	r3, #16
 800896a:	4619      	mov	r1, r3
 800896c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800896e:	f000 fcfd 	bl	800936c <pxDuplicateNetworkBufferWithDescriptor>
 8008972:	62f8      	str	r0, [r7, #44]	; 0x2c

                        if( pxNewBuffer != NULL )
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	2b00      	cmp	r3, #0
 8008978:	d006      	beq.n	8008988 <prvTreatNBNS+0x148>
                        {
                            pucUDPPayloadBuffer = &( pxNewBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 800897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	332a      	adds	r3, #42	; 0x2a
 8008980:	643b      	str	r3, [r7, #64]	; 0x40
                            pxNetworkBuffer = pxNewBuffer;
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008986:	e001      	b.n	800898c <prvTreatNBNS+0x14c>
                        }
                        else
                        {
                            /* Just prevent that a reply will be sent */
                            pxNetworkBuffer = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Should not occur: pucUDPPayloadBuffer is part of a xNetworkBufferDescriptor */
                    if( pxNetworkBuffer != NULL )
 800898c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80bd 	beq.w	8008b0e <prvTreatNBNS+0x2ce>
                    {
                        pxMessage = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucUDPPayloadBuffer );
 8008994:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008996:	f7ff facd 	bl	8007f34 <vCastPointerTo_DNSMessage_t>
 800899a:	62b8      	str	r0, [r7, #40]	; 0x28

                        /* As the fields in the structures are not word-aligned, we have to
                         * copy the values byte-by-byte using macro's vSetField16() and vSetField32() */
                        #ifndef _lint
                            vSetField16( pxMessage, DNSMessage_t, usFlags, dnsNBNS_QUERY_RESPONSE_FLAGS ); /* 0x8500 */
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	3302      	adds	r3, #2
 80089a0:	2285      	movs	r2, #133	; 0x85
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	3303      	adds	r3, #3
 80089a8:	2200      	movs	r2, #0
 80089aa:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usQuestions, 0 );
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	3304      	adds	r3, #4
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	3305      	adds	r3, #5
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAnswers, 1 );
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089be:	3306      	adds	r3, #6
 80089c0:	2200      	movs	r2, #0
 80089c2:	701a      	strb	r2, [r3, #0]
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	3307      	adds	r3, #7
 80089c8:	2201      	movs	r2, #1
 80089ca:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAuthorityRRs, 0 );
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	3308      	adds	r3, #8
 80089d0:	2200      	movs	r2, #0
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	3309      	adds	r3, #9
 80089d8:	2200      	movs	r2, #0
 80089da:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAdditionalRRs, 0 );
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	330a      	adds	r3, #10
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	330b      	adds	r3, #11
 80089e8:	2200      	movs	r2, #0
 80089ea:	701a      	strb	r2, [r3, #0]
                        #else
                            ( void ) pxMessage;
                        #endif

                        pxAnswer = ipCAST_PTR_TO_TYPE_PTR( NBNSAnswer_t, &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usType ) ] ) );
 80089ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ee:	332e      	adds	r3, #46	; 0x2e
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff fac0 	bl	8007f76 <vCastPointerTo_NBNSAnswer_t>
 80089f6:	6278      	str	r0, [r7, #36]	; 0x24

                        #ifndef _lint
                            vSetField16( pxAnswer, NBNSAnswer_t, usType, usType );            /* Type */
 80089f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80089fa:	0a1b      	lsrs	r3, r3, #8
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	3301      	adds	r3, #1
 8008a08:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usClass, dnsNBNS_CLASS_IN ); /* Class */
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	3302      	adds	r3, #2
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	3303      	adds	r3, #3
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	701a      	strb	r2, [r3, #0]
                            vSetField32( pxAnswer, NBNSAnswer_t, ulTTL, dnsNBNS_TTL_VALUE );
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	3304      	adds	r3, #4
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	3305      	adds	r3, #5
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	3306      	adds	r3, #6
 8008a32:	220e      	movs	r2, #14
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	3307      	adds	r3, #7
 8008a3a:	2210      	movs	r2, #16
 8008a3c:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usDataLength, 6 );           /* 6 bytes including the length field */
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	3308      	adds	r3, #8
 8008a42:	2200      	movs	r2, #0
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	3309      	adds	r3, #9
 8008a4a:	2206      	movs	r2, #6
 8008a4c:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usNbFlags, dnsNBNS_NAME_FLAGS );
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	330a      	adds	r3, #10
 8008a52:	2260      	movs	r2, #96	; 0x60
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	330b      	adds	r3, #11
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	701a      	strb	r2, [r3, #0]
                            vSetField32( pxAnswer, NBNSAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8008a5e:	4b2e      	ldr	r3, [pc, #184]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	061a      	lsls	r2, r3, #24
 8008a64:	4b2c      	ldr	r3, [pc, #176]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	021b      	lsls	r3, r3, #8
 8008a6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	4b29      	ldr	r3, [pc, #164]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	0a1b      	lsrs	r3, r3, #8
 8008a76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	4b26      	ldr	r3, [pc, #152]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	0e1b      	lsrs	r3, r3, #24
 8008a82:	4313      	orrs	r3, r2
 8008a84:	0e1a      	lsrs	r2, r3, #24
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	330c      	adds	r3, #12
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	4b22      	ldr	r3, [pc, #136]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	061a      	lsls	r2, r3, #24
 8008a94:	4b20      	ldr	r3, [pc, #128]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	4b1d      	ldr	r3, [pc, #116]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	0a1b      	lsrs	r3, r3, #8
 8008aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	4b1a      	ldr	r3, [pc, #104]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	0e1b      	lsrs	r3, r3, #24
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	0c1a      	lsrs	r2, r3, #16
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	330d      	adds	r3, #13
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	4b16      	ldr	r3, [pc, #88]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	061a      	lsls	r2, r3, #24
 8008ac4:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	4b11      	ldr	r3, [pc, #68]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	0a1b      	lsrs	r3, r3, #8
 8008ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ada:	431a      	orrs	r2, r3
 8008adc:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	0e1b      	lsrs	r3, r3, #24
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	0a1a      	lsrs	r2, r3, #8
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	330e      	adds	r3, #14
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <prvTreatNBNS+0x2d8>)
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	0e1a      	lsrs	r2, r3, #24
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	330f      	adds	r3, #15
 8008af8:	b2d2      	uxtb	r2, r2
 8008afa:	701a      	strb	r2, [r3, #0]
                        #else
                            ( void ) pxAnswer;
                        #endif

                        usLength = ( uint16_t ) ( sizeof( NBNSAnswer_t ) + ( size_t ) offsetof( NBNSRequest_t, usType ) );
 8008afc:	233e      	movs	r3, #62	; 0x3e
 8008afe:	847b      	strh	r3, [r7, #34]	; 0x22

                        prvReplyDNSMessage( pxNetworkBuffer, ( BaseType_t ) usLength );
 8008b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b02:	4619      	mov	r1, r3
 8008b04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b06:	f000 f809 	bl	8008b1c <prvReplyDNSMessage>
 8008b0a:	e000      	b.n	8008b0e <prvTreatNBNS+0x2ce>
                return;
 8008b0c:	bf00      	nop
                    }
                }
            }
        }
 8008b0e:	3750      	adds	r7, #80	; 0x50
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	08015454 	.word	0x08015454
 8008b18:	20000018 	.word	0x20000018

08008b1c <prvReplyDNSMessage>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the DNS message.
 * @param[in] lNetLength: The length of the DNS message.
 */
        static void prvReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                        BaseType_t lNetLength )
        {
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;

            pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff f9e2 	bl	8007ef4 <vCastPointerTo_UDPPacket_t>
 8008b30:	61f8      	str	r0, [r7, #28]
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	330e      	adds	r3, #14
 8008b36:	61bb      	str	r3, [r7, #24]
            pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	3322      	adds	r3, #34	; 0x22
 8008b3c:	617b      	str	r3, [r7, #20]
            /* HT: started using defines like 'ipSIZE_OF_xxx' */
            pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	331c      	adds	r3, #28
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	021b      	lsls	r3, r3, #8
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	331c      	adds	r3, #28
 8008b50:	0a1b      	lsrs	r3, r3, #8
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	4313      	orrs	r3, r2
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	805a      	strh	r2, [r3, #2]
            /* HT:endian: should not be translated, copying from packet to packet */
            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008b64:	4b22      	ldr	r3, [pc, #136]	; (8008bf0 <prvReplyDNSMessage+0xd4>)
 8008b66:	695a      	ldr	r2, [r3, #20]
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	60da      	str	r2, [r3, #12]
            pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	2280      	movs	r2, #128	; 0x80
 8008b70:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8008b72:	4b20      	ldr	r3, [pc, #128]	; (8008bf4 <prvReplyDNSMessage+0xd8>)
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	021b      	lsls	r3, r3, #8
 8008b78:	b21a      	sxth	r2, r3
 8008b7a:	4b1e      	ldr	r3, [pc, #120]	; (8008bf4 <prvReplyDNSMessage+0xd8>)
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	0a1b      	lsrs	r3, r3, #8
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	b21b      	sxth	r3, r3
 8008b84:	4313      	orrs	r3, r2
 8008b86:	b21b      	sxth	r3, r3
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8008b8e:	4b19      	ldr	r3, [pc, #100]	; (8008bf4 <prvReplyDNSMessage+0xd8>)
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	3301      	adds	r3, #1
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	4b17      	ldr	r3, [pc, #92]	; (8008bf4 <prvReplyDNSMessage+0xd8>)
 8008b98:	801a      	strh	r2, [r3, #0]
            pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	3308      	adds	r3, #8
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	809a      	strh	r2, [r3, #4]
            vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	785b      	ldrb	r3, [r3, #1]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	827b      	strh	r3, [r7, #18]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	885b      	ldrh	r3, [r3, #2]
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	801a      	strh	r2, [r3, #0]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	8a7a      	ldrh	r2, [r7, #18]
 8008bd0:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent */
            uxDataLength = ( ( size_t ) lNetLength ) + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	332a      	adds	r3, #42	; 0x2a
 8008bd6:	60fb      	str	r3, [r7, #12]
                    ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
                }
            #endif

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	61da      	str	r2, [r3, #28]

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008bde:	2100      	movs	r1, #0
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 f931 	bl	8009e48 <vReturnEthernetFrame>
        }
 8008be6:	bf00      	nop
 8008be8:	3720      	adds	r7, #32
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000018 	.word	0x20000018
 8008bf4:	2000bc78 	.word	0x2000bc78

08008bf8 <prvProcessDNSCache>:
 */
        static BaseType_t prvProcessDNSCache( const char * pcName,
                                              uint32_t * pulIP,
                                              uint32_t ulTTL,
                                              BaseType_t xLookUp )
        {
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b089      	sub	sp, #36	; 0x24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]
            BaseType_t x;
            BaseType_t xFound = pdFALSE;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61bb      	str	r3, [r7, #24]
            uint32_t ulCurrentTimeSeconds = ( xTaskGetTickCount() / portTICK_PERIOD_MS ) / 1000UL;
 8008c0a:	f7fd f825 	bl	8005c58 <xTaskGetTickCount>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b8f      	ldr	r3, [pc, #572]	; (8008e50 <prvProcessDNSCache+0x258>)
 8008c12:	fba3 2302 	umull	r2, r3, r3, r2
 8008c16:	099b      	lsrs	r3, r3, #6
 8008c18:	617b      	str	r3, [r7, #20]
            uint32_t ulIPAddressIndex = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	613b      	str	r3, [r7, #16]
            static BaseType_t xFreeEntry = 0;

            configASSERT( ( pcName != NULL ) );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d104      	bne.n	8008c2e <prvProcessDNSCache+0x36>
 8008c24:	498b      	ldr	r1, [pc, #556]	; (8008e54 <prvProcessDNSCache+0x25c>)
 8008c26:	f240 70d5 	movw	r0, #2005	; 0x7d5
 8008c2a:	f7f7 ffc5 	bl	8000bb8 <vAssertCalled>

            /* For each entry in the DNS cache table. */
            for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8008c2e:	2300      	movs	r3, #0
 8008c30:	61fb      	str	r3, [r7, #28]
 8008c32:	e096      	b.n	8008d62 <prvProcessDNSCache+0x16a>
            {
                if( xDNSCache[ x ].pcName[ 0 ] == ( char ) 0 )
 8008c34:	4988      	ldr	r1, [pc, #544]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	1a9b      	subs	r3, r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	440b      	add	r3, r1
 8008c42:	3304      	adds	r3, #4
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8087 	beq.w	8008d5a <prvProcessDNSCache+0x162>
                {
                    continue;
                }

                if( strcmp( xDNSCache[ x ].pcName, pcName ) == 0 )
 8008c4c:	69fa      	ldr	r2, [r7, #28]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	1a9b      	subs	r3, r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4a80      	ldr	r2, [pc, #512]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008c58:	4413      	add	r3, r2
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	68f9      	ldr	r1, [r7, #12]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7f7 faee 	bl	8000240 <strcmp>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d178      	bne.n	8008d5c <prvProcessDNSCache+0x164>
                {
                    /* Is this function called for a lookup or to add/update an IP address? */
                    if( xLookUp != pdFALSE )
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d052      	beq.n	8008d16 <prvProcessDNSCache+0x11e>
                    {
                        /* Confirm that the record is still fresh. */
                        if( ulCurrentTimeSeconds < ( xDNSCache[ x ].ulTimeWhenAddedInSeconds + FreeRTOS_ntohl( xDNSCache[ x ].ulTTL ) ) )
 8008c70:	4979      	ldr	r1, [pc, #484]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	4613      	mov	r3, r2
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	1a9b      	subs	r3, r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	3318      	adds	r3, #24
 8008c80:	6819      	ldr	r1, [r3, #0]
 8008c82:	4875      	ldr	r0, [pc, #468]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	4613      	mov	r3, r2
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4403      	add	r3, r0
 8008c90:	3314      	adds	r3, #20
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	0618      	lsls	r0, r3, #24
 8008c96:	4c70      	ldr	r4, [pc, #448]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4423      	add	r3, r4
 8008ca4:	3314      	adds	r3, #20
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	021b      	lsls	r3, r3, #8
 8008caa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008cae:	4318      	orrs	r0, r3
 8008cb0:	4c69      	ldr	r4, [pc, #420]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4423      	add	r3, r4
 8008cbe:	3314      	adds	r3, #20
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	0a1b      	lsrs	r3, r3, #8
 8008cc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008cc8:	4318      	orrs	r0, r3
 8008cca:	4c63      	ldr	r4, [pc, #396]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008ccc:	69fa      	ldr	r2, [r7, #28]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	1a9b      	subs	r3, r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4423      	add	r3, r4
 8008cd8:	3314      	adds	r3, #20
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	0e1b      	lsrs	r3, r3, #24
 8008cde:	4303      	orrs	r3, r0
 8008ce0:	440b      	add	r3, r1
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d20b      	bcs.n	8008d00 <prvProcessDNSCache+0x108>
                                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
                                ulIPAddressIndex = ucIndex;

                                xDNSCache[ x ].ucCurrentIPAddress++;
                            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */
                            *pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 8008ce8:	495b      	ldr	r1, [pc, #364]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008cea:	69fa      	ldr	r2, [r7, #28]
 8008cec:	4613      	mov	r3, r2
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	1a9b      	subs	r3, r3, r2
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e029      	b.n	8008d54 <prvProcessDNSCache+0x15c>
                        }
                        else
                        {
                            /* Age out the old cached record. */
                            xDNSCache[ x ].pcName[ 0 ] = ( char ) 0;
 8008d00:	4955      	ldr	r1, [pc, #340]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	4613      	mov	r3, r2
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	1a9b      	subs	r3, r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	3304      	adds	r3, #4
 8008d10:	2200      	movs	r2, #0
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	e01e      	b.n	8008d54 <prvProcessDNSCache+0x15c>

                                ulIPAddressIndex = xDNSCache[ x ].ucNumIPAddresses;
                                xDNSCache[ x ].ucNumIPAddresses++;
                            }
                        #endif
                        xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6819      	ldr	r1, [r3, #0]
 8008d1a:	484f      	ldr	r0, [pc, #316]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008d1c:	69fa      	ldr	r2, [r7, #28]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	1a9b      	subs	r3, r3, r2
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	4413      	add	r3, r2
 8008d28:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                        xDNSCache[ x ].ulTTL = ulTTL;
 8008d2c:	494a      	ldr	r1, [pc, #296]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	4613      	mov	r3, r2
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	1a9b      	subs	r3, r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	440b      	add	r3, r1
 8008d3a:	3314      	adds	r3, #20
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	601a      	str	r2, [r3, #0]
                        xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008d40:	4945      	ldr	r1, [pc, #276]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	4613      	mov	r3, r2
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	440b      	add	r3, r1
 8008d4e:	3318      	adds	r3, #24
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	601a      	str	r2, [r3, #0]
                    }

                    xFound = pdTRUE;
 8008d54:	2301      	movs	r3, #1
 8008d56:	61bb      	str	r3, [r7, #24]
                    break;
 8008d58:	e007      	b.n	8008d6a <prvProcessDNSCache+0x172>
                    continue;
 8008d5a:	bf00      	nop
            for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	f77f af65 	ble.w	8008c34 <prvProcessDNSCache+0x3c>
                }
            }

            if( xFound == pdFALSE )
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d146      	bne.n	8008dfe <prvProcessDNSCache+0x206>
            {
                if( xLookUp != pdFALSE )
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <prvProcessDNSCache+0x186>
                {
                    *pulIP = 0UL;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	e03f      	b.n	8008dfe <prvProcessDNSCache+0x206>
                }
                else
                {
                    /* Add or update the item. */
                    if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f7f7 fa68 	bl	8000254 <strlen>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b0f      	cmp	r3, #15
 8008d88:	d839      	bhi.n	8008dfe <prvProcessDNSCache+0x206>
                    {
                        ( void ) strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
 8008d8a:	4b34      	ldr	r3, [pc, #208]	; (8008e5c <prvProcessDNSCache+0x264>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4a30      	ldr	r2, [pc, #192]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008d98:	4413      	add	r3, r2
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	68f9      	ldr	r1, [r7, #12]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f009 fa6e 	bl	8012280 <strcpy>

                        xDNSCache[ xFreeEntry ].ulIPAddresses[ 0 ] = *pulIP;
 8008da4:	4b2d      	ldr	r3, [pc, #180]	; (8008e5c <prvProcessDNSCache+0x264>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	6819      	ldr	r1, [r3, #0]
 8008dac:	482a      	ldr	r0, [pc, #168]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008dae:	4613      	mov	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4403      	add	r3, r0
 8008db8:	6019      	str	r1, [r3, #0]
                        xDNSCache[ xFreeEntry ].ulTTL = ulTTL;
 8008dba:	4b28      	ldr	r3, [pc, #160]	; (8008e5c <prvProcessDNSCache+0x264>)
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	4926      	ldr	r1, [pc, #152]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	1a9b      	subs	r3, r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	440b      	add	r3, r1
 8008dca:	3314      	adds	r3, #20
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	601a      	str	r2, [r3, #0]
                        xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008dd0:	4b22      	ldr	r3, [pc, #136]	; (8008e5c <prvProcessDNSCache+0x264>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	4920      	ldr	r1, [pc, #128]	; (8008e58 <prvProcessDNSCache+0x260>)
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	3318      	adds	r3, #24
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	601a      	str	r2, [r3, #0]
                                             0,
                                             sizeof( xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ] ) *
                                             ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
                        #endif

                        xFreeEntry++;
 8008de6:	4b1d      	ldr	r3, [pc, #116]	; (8008e5c <prvProcessDNSCache+0x264>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3301      	adds	r3, #1
 8008dec:	4a1b      	ldr	r2, [pc, #108]	; (8008e5c <prvProcessDNSCache+0x264>)
 8008dee:	6013      	str	r3, [r2, #0]

                        if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8008df0:	4b1a      	ldr	r3, [pc, #104]	; (8008e5c <prvProcessDNSCache+0x264>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d102      	bne.n	8008dfe <prvProcessDNSCache+0x206>
                        {
                            xFreeEntry = 0;
 8008df8:	4b18      	ldr	r3, [pc, #96]	; (8008e5c <prvProcessDNSCache+0x264>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
                        }
                    }
                }
            }

            if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <prvProcessDNSCache+0x214>
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01c      	beq.n	8008e46 <prvProcessDNSCache+0x24e>
            {
                FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <prvProcessDNSCache+0x21e>
 8008e12:	4913      	ldr	r1, [pc, #76]	; (8008e60 <prvProcessDNSCache+0x268>)
 8008e14:	e000      	b.n	8008e18 <prvProcessDNSCache+0x220>
 8008e16:	4913      	ldr	r1, [pc, #76]	; (8008e64 <prvProcessDNSCache+0x26c>)
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	061a      	lsls	r2, r3, #24
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008e34:	431a      	orrs	r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	0e1b      	lsrs	r3, r3, #24
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4809      	ldr	r0, [pc, #36]	; (8008e68 <prvProcessDNSCache+0x270>)
 8008e42:	f7f7 fd83 	bl	800094c <vLoggingPrintf>
            }

            return xFound;
 8008e46:	69bb      	ldr	r3, [r7, #24]
        }
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3724      	adds	r7, #36	; 0x24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd90      	pop	{r4, r7, pc}
 8008e50:	10624dd3 	.word	0x10624dd3
 8008e54:	08013b30 	.word	0x08013b30
 8008e58:	2000bc00 	.word	0x2000bc00
 8008e5c:	2000bc70 	.word	0x2000bc70
 8008e60:	08013b60 	.word	0x08013b60
 8008e64:	08013b68 	.word	0x08013b68
 8008e68:	08013b6c 	.word	0x08013b6c

08008e6c <vCastPointerTo_EthernetHeader_t>:
    {
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
        return ( EthernetHeader_t * ) pvArgument;
 8008e74:	687b      	ldr	r3, [r7, #4]
    }
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <vCastConstPointerTo_EthernetHeader_t>:
    {
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
        return ( const EthernetHeader_t * ) pvArgument;
 8008e8a:	687b      	ldr	r3, [r7, #4]
    }
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <vCastPointerTo_ARPPacket_t>:
    {
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 8008ea0:	687b      	ldr	r3, [r7, #4]
    }
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <vCastPointerTo_IPPacket_t>:
    {
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
        return ( IPPacket_t * ) pvArgument;
 8008eb6:	687b      	ldr	r3, [r7, #4]
    }
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <vCastConstPointerTo_IPPacket_t>:
    {
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
        return ( const IPPacket_t * ) pvArgument;
 8008ecc:	687b      	ldr	r3, [r7, #4]
    }
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <vCastPointerTo_ICMPPacket_t>:
    {
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
        return ( ICMPPacket_t * ) pvArgument;
 8008ee2:	687b      	ldr	r3, [r7, #4]
    }
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <vCastConstPointerTo_UDPPacket_t>:
    {
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 8008ef8:	687b      	ldr	r3, [r7, #4]
    }
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <vCastPointerTo_ProtocolPacket_t>:
    {
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
        return ( ProtocolPacket_t * ) pvArgument;
 8008f0e:	687b      	ldr	r3, [r7, #4]
    }
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <vCastConstPointerTo_ProtocolPacket_t>:
    {
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
        return ( const ProtocolPacket_t * ) pvArgument;
 8008f24:	687b      	ldr	r3, [r7, #4]
    }
 8008f26:	4618      	mov	r0, r3
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 8008f3a:	687b      	ldr	r3, [r7, #4]
    }
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <vCastPointerTo_SocketSelect_t>:
             */
            EventGroupHandle_t xSelectGroup;
        } SocketSelect_t;

        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( SocketSelect_t )
        {
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
            return ( SocketSelect_t * ) pvArgument;
 8008f50:	687b      	ldr	r3, [r7, #4]
        }
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 8008f66:	687b      	ldr	r3, [r7, #4]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <prvIPTask>:
 *        the data of the IP-stack, and so it has no need of using mutexes.
 *
 * @param[in] pvParameters: Not used.
 */
static void prvIPTask( void * pvParameters )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]

    /* Generate a dummy message to say that the network connection has gone
     *  down.  This will cause this task to initialise the network interface.  After
     *  this it is the responsibility of the network interface hardware driver to
     *  send this message if a previously connected network is disconnected. */
    FreeRTOS_NetworkDown();
 8008f7c:	f000 f9da 	bl	8009334 <FreeRTOS_NetworkDown>

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* Initialise the TCP timer. */
            prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8008f80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f84:	4863      	ldr	r0, [pc, #396]	; (8009114 <prvIPTask+0x1a0>)
 8008f86:	f000 f989 	bl	800929c <prvIPTimerReload>
        }
    #endif

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 8008f8a:	4b63      	ldr	r3, [pc, #396]	; (8009118 <prvIPTask+0x1a4>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8008f90:	4862      	ldr	r0, [pc, #392]	; (800911c <prvIPTask+0x1a8>)
 8008f92:	f7f7 fcdb 	bl	800094c <vLoggingPrintf>
    {
        ipconfigWATCHDOG_TIMER();

        /* Check the ARP, DHCP and TCP timers to see if there is any periodic
         * or timeout processing to perform. */
        prvCheckNetworkTimers();
 8008f96:	f000 f91d 	bl	80091d4 <prvCheckNetworkTimers>

        /* Calculate the acceptable maximum sleep time. */
        xNextIPSleep = prvCalculateSleepTime();
 8008f9a:	f000 f8f3 	bl	8009184 <prvCalculateSleepTime>
 8008f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait until there is something to do. If the following call exits
         * due to a time out rather than a message being received, set a
         * 'NoEvent' value. */
        if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8008fa0:	4b5f      	ldr	r3, [pc, #380]	; (8009120 <prvIPTask+0x1ac>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f107 0114 	add.w	r1, r7, #20
 8008fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fb ffc0 	bl	8004f30 <xQueueReceive>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <prvIPTask+0x46>
        {
            xReceivedEvent.eEventType = eNoEvent;
 8008fb6:	23ff      	movs	r3, #255	; 0xff
 8008fb8:	753b      	strb	r3, [r7, #20]
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

        switch( xReceivedEvent.eEventType )
 8008fba:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	2b0d      	cmp	r3, #13
 8008fc2:	f200 809c 	bhi.w	80090fe <prvIPTask+0x18a>
 8008fc6:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <prvIPTask+0x58>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	080090ff 	.word	0x080090ff
 8008fd0:	08009005 	.word	0x08009005
 8008fd4:	08009011 	.word	0x08009011
 8008fd8:	08009023 	.word	0x08009023
 8008fdc:	08009037 	.word	0x08009037
 8008fe0:	0800909f 	.word	0x0800909f
 8008fe4:	080090ff 	.word	0x080090ff
 8008fe8:	080090c3 	.word	0x080090c3
 8008fec:	080090cf 	.word	0x080090cf
 8008ff0:	080090f9 	.word	0x080090f9
 8008ff4:	0800903d 	.word	0x0800903d
 8008ff8:	0800908d 	.word	0x0800908d
 8008ffc:	080090b1 	.word	0x080090b1
 8009000:	080090ff 	.word	0x080090ff
        {
            case eNetworkDownEvent:
                /* Attempt to establish a connection. */
                xNetworkUp = pdFALSE;
 8009004:	4b47      	ldr	r3, [pc, #284]	; (8009124 <prvIPTask+0x1b0>)
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]
                prvProcessNetworkDownEvent();
 800900a:	f000 fb7d 	bl	8009708 <prvProcessNetworkDownEvent>
                break;
 800900e:	e079      	b.n	8009104 <prvIPTask+0x190>
            case eNetworkRxEvent:

                /* The network hardware driver has received a new packet.  A
                 * pointer to the received buffer is located in the pvData member
                 * of the received event structure. */
                prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff ffa3 	bl	8008f5e <vCastPointerTo_NetworkBufferDescriptor_t>
 8009018:	4603      	mov	r3, r0
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f89c 	bl	8009158 <prvHandleEthernetPacket>
                break;
 8009020:	e070      	b.n	8009104 <prvIPTask+0x190>

            case eNetworkTxEvent:

               {
                   NetworkBufferDescriptor_t * pxDescriptor = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData );
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff ff9a 	bl	8008f5e <vCastPointerTo_NetworkBufferDescriptor_t>
 800902a:	61f8      	str	r0, [r7, #28]

                   /* Send a network packet. The ownership will  be transferred to
                    * the driver, which will release it after delivery. */
                   iptraceNETWORK_INTERFACE_OUTPUT( pxDescriptor->xDataLength, pxDescriptor->pucEthernetBuffer );
                   ( void ) xNetworkInterfaceOutput( pxDescriptor, pdTRUE );
 800902c:	2101      	movs	r1, #1
 800902e:	69f8      	ldr	r0, [r7, #28]
 8009030:	f007 fa60 	bl	80104f4 <xNetworkInterfaceOutput>
               }

               break;
 8009034:	e066      	b.n	8009104 <prvIPTask+0x190>

            case eARPTimerEvent:
                /* The ARP timer has expired, process the ARP cache. */
                vARPAgeCache();
 8009036:	f7fe fe25 	bl	8007c84 <vARPAgeCache>
                break;
 800903a:	e063      	b.n	8009104 <prvIPTask+0x190>
                /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
                 * to a port. The port number is communicated in the socket field
                 * usLocalPort. vSocketBind() will actually bind the socket and the
                 * API will unblock as soon as the eSOCKET_BOUND event is
                 * triggered. */
                pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff ff77 	bl	8008f32 <vCastPointerTo_FreeRTOS_Socket_t>
 8009044:	6238      	str	r0, [r7, #32]
                xAddress.sin_addr = 0U; /* For the moment. */
 8009046:	2300      	movs	r3, #0
 8009048:	613b      	str	r3, [r7, #16]
                xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800904e:	021b      	lsls	r3, r3, #8
 8009050:	b21a      	sxth	r2, r3
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	b29b      	uxth	r3, r3
 800905a:	b21b      	sxth	r3, r3
 800905c:	4313      	orrs	r3, r2
 800905e:	b21b      	sxth	r3, r3
 8009060:	b29b      	uxth	r3, r3
 8009062:	81fb      	strh	r3, [r7, #14]
                pxSocket->usLocalPort = 0U;
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	2200      	movs	r2, #0
 8009068:	849a      	strh	r2, [r3, #36]	; 0x24
                ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800906a:	f107 010c 	add.w	r1, r7, #12
 800906e:	2300      	movs	r3, #0
 8009070:	2208      	movs	r2, #8
 8009072:	6a38      	ldr	r0, [r7, #32]
 8009074:	f001 fb38 	bl	800a6e8 <vSocketBind>

                /* Before 'eSocketBindEvent' was sent it was tested that
                 * ( xEventGroup != NULL ) so it can be used now to wake up the
                 * user. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f043 0210 	orr.w	r2, r3, #16
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	601a      	str	r2, [r3, #0]
                vSocketWakeUpUser( pxSocket );
 8009084:	6a38      	ldr	r0, [r7, #32]
 8009086:	f001 fed7 	bl	800ae38 <vSocketWakeUpUser>
                break;
 800908a:	e03b      	b.n	8009104 <prvIPTask+0x190>

                /* The user API FreeRTOS_closesocket() has sent a message to the
                 * IP-task to actually close a socket. This is handled in
                 * vSocketClose().  As the socket gets closed, there is no way to
                 * report back to the API, so the API won't wait for the result */
                ( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff ff4f 	bl	8008f32 <vCastPointerTo_FreeRTOS_Socket_t>
 8009094:	4603      	mov	r3, r0
 8009096:	4618      	mov	r0, r3
 8009098:	f001 fbf6 	bl	800a888 <vSocketClose>
                break;
 800909c:	e032      	b.n	8009104 <prvIPTask+0x190>
            case eStackTxEvent:

                /* The network stack has generated a packet to send.  A
                 * pointer to the generated buffer is located in the pvData
                 * member of the received event structure. */
                vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7ff ff5c 	bl	8008f5e <vCastPointerTo_NetworkBufferDescriptor_t>
 80090a6:	4603      	mov	r3, r0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f006 fea9 	bl	800fe00 <vProcessGeneratedUDPPacket>
                break;
 80090ae:	e029      	b.n	8009104 <prvIPTask+0x190>
                            vSocketSelect( pxMessage->pxSocketSet );
                            ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                        }
                    #else
                        {
                            vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff ff48 	bl	8008f48 <vCastPointerTo_SocketSelect_t>
 80090b8:	4603      	mov	r3, r0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f002 f9da 	bl	800b474 <vSocketSelect>
                        }
                    #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
                #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
                break;
 80090c0:	e020      	b.n	8009104 <prvIPTask+0x190>
            case eTCPTimerEvent:
                #if ( ipconfigUSE_TCP == 1 )

                    /* Simply mark the TCP timer as expired so it gets processed
                     * the next time prvCheckNetworkTimers() is called. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80090c2:	4a14      	ldr	r2, [pc, #80]	; (8009114 <prvIPTask+0x1a0>)
 80090c4:	7813      	ldrb	r3, [r2, #0]
 80090c6:	f043 0302 	orr.w	r3, r3, #2
 80090ca:	7013      	strb	r3, [r2, #0]
                #endif /* ipconfigUSE_TCP */
                break;
 80090cc:	e01a      	b.n	8009104 <prvIPTask+0x190>

                /* The API FreeRTOS_accept() was called, the IP-task will now
                 * check if the listening socket (communicated in pvData) actually
                 * received a new connection. */
                #if ( ipconfigUSE_TCP == 1 )
                    pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7ff ff2e 	bl	8008f32 <vCastPointerTo_FreeRTOS_Socket_t>
 80090d6:	6238      	str	r0, [r7, #32]

                    if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 80090d8:	6a38      	ldr	r0, [r7, #32]
 80090da:	f005 fc3d 	bl	800e958 <xTCPCheckNewClient>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00e      	beq.n	8009102 <prvIPTask+0x18e>
                    {
                        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f043 0204 	orr.w	r2, r3, #4
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	601a      	str	r2, [r3, #0]
                        vSocketWakeUpUser( pxSocket );
 80090f0:	6a38      	ldr	r0, [r7, #32]
 80090f2:	f001 fea1 	bl	800ae38 <vSocketWakeUpUser>
                    }
                #endif /* ipconfigUSE_TCP */
                break;
 80090f6:	e004      	b.n	8009102 <prvIPTask+0x18e>
            case eTCPNetStat:

                /* FreeRTOS_netstat() was called to have the IP-task print an
                 * overview of all sockets and their connections */
                #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                    vTCPNetStat();
 80090f8:	f002 f8e2 	bl	800b2c0 <vTCPNetStat>
                #endif /* ipconfigUSE_TCP */
                break;
 80090fc:	e002      	b.n	8009104 <prvIPTask+0x190>
                /* xQueueReceive() returned because of a normal time-out. */
                break;

            default:
                /* Should not get here. */
                break;
 80090fe:	bf00      	nop
 8009100:	e000      	b.n	8009104 <prvIPTask+0x190>
                break;
 8009102:	bf00      	nop
        }

        if( xNetworkDownEventPending != pdFALSE )
 8009104:	4b08      	ldr	r3, [pc, #32]	; (8009128 <prvIPTask+0x1b4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f43f af44 	beq.w	8008f96 <prvIPTask+0x22>
        {
            /* A network down event could not be posted to the network event
             * queue because the queue was full.
             * As this code runs in the IP-task, it can be done directly by
             * calling prvProcessNetworkDownEvent(). */
            prvProcessNetworkDownEvent();
 800910e:	f000 fafb 	bl	8009708 <prvProcessNetworkDownEvent>
        prvCheckNetworkTimers();
 8009112:	e740      	b.n	8008f96 <prvIPTask+0x22>
 8009114:	2000bcc8 	.word	0x2000bcc8
 8009118:	2000bcdc 	.word	0x2000bcdc
 800911c:	08013b94 	.word	0x08013b94
 8009120:	2000bc74 	.word	0x2000bc74
 8009124:	2000bcb0 	.word	0x2000bcb0
 8009128:	2000bca4 	.word	0x2000bca4

0800912c <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8009132:	f7fd f937 	bl	80063a4 <xTaskGetCurrentTaskHandle>
 8009136:	4602      	mov	r2, r0
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <xIsCallingFromIPTask+0x28>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d102      	bne.n	8009146 <xIsCallingFromIPTask+0x1a>
    {
        xReturn = pdTRUE;
 8009140:	2301      	movs	r3, #1
 8009142:	607b      	str	r3, [r7, #4]
 8009144:	e001      	b.n	800914a <xIsCallingFromIPTask+0x1e>
    }
    else
    {
        xReturn = pdFALSE;
 8009146:	2300      	movs	r3, #0
 8009148:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 800914a:	687b      	ldr	r3, [r7, #4]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	2000bca8 	.word	0x2000bca8

08009158 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer: Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
             * member.  The loop below walks through the chain processing each packet
             * in the chain in turn. */
            do
            {
                /* Store a pointer to the buffer after pxBuffer for use later on. */
                pxNextBuffer = pxBuffer->pxNextBuffer;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	60fb      	str	r3, [r7, #12]

                /* Make it NULL to avoid using it later on. */
                pxBuffer->pxNextBuffer = NULL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	625a      	str	r2, [r3, #36]	; 0x24

                prvProcessEthernetPacket( pxBuffer );
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fb07 	bl	8009780 <prvProcessEthernetPacket>
                pxBuffer = pxNextBuffer;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	607b      	str	r3, [r7, #4]

                /* While there is another packet in the chain. */
            } while( pxBuffer != NULL );
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1f1      	bne.n	8009160 <prvHandleEthernetPacket+0x8>
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <prvCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
static TickType_t prvCalculateSleepTime( void )
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
    TickType_t xMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800918a:	f242 7310 	movw	r3, #10000	; 0x2710
 800918e:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009190:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <prvCalculateSleepTime+0x48>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d007      	beq.n	80091ae <prvCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 800919e:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <prvCalculateSleepTime+0x48>)
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d902      	bls.n	80091ae <prvCalculateSleepTime+0x2a>
        {
            xMaximumSleepTime = xARPTimer.ulReloadTime;
 80091a8:	4b08      	ldr	r3, [pc, #32]	; (80091cc <prvCalculateSleepTime+0x48>)
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	607b      	str	r3, [r7, #4]
        }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
        {
            if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 80091ae:	4b08      	ldr	r3, [pc, #32]	; (80091d0 <prvCalculateSleepTime+0x4c>)
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d902      	bls.n	80091be <prvCalculateSleepTime+0x3a>
            {
                xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 80091b8:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <prvCalculateSleepTime+0x4c>)
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    return xMaximumSleepTime;
 80091be:	687b      	ldr	r3, [r7, #4]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	2000bcb4 	.word	0x2000bcb4
 80091d0:	2000bcc8 	.word	0x2000bcc8

080091d4 <prvCheckNetworkTimers>:
/**
 * @brief Check the network timers (ARP/DHCP/DNS/TCP) and if they are
 *        expired, send an event to the IP-Task.
 */
static void prvCheckNetworkTimers( void )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 80091da:	481a      	ldr	r0, [pc, #104]	; (8009244 <prvCheckNetworkTimers+0x70>)
 80091dc:	f000 f86e 	bl	80092bc <prvIPTimerCheck>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <prvCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 80091e6:	2003      	movs	r0, #3
 80091e8:	f000 fa20 	bl	800962c <xSendEventToIPTask>
            TickType_t xNextTime;
            BaseType_t xCheckTCPSockets;

            /* If the IP task has messages waiting to be processed then
             * it will not sleep in any case. */
            if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 80091ec:	4b16      	ldr	r3, [pc, #88]	; (8009248 <prvCheckNetworkTimers+0x74>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fc f863 	bl	80052bc <uxQueueMessagesWaiting>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <prvCheckNetworkTimers+0x2e>
            {
                xWillSleep = pdTRUE;
 80091fc:	2301      	movs	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e001      	b.n	8009206 <prvCheckNetworkTimers+0x32>
            }
            else
            {
                xWillSleep = pdFALSE;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
            }

            /* Sockets need to be checked if the TCP timer has expired. */
            xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8009206:	4811      	ldr	r0, [pc, #68]	; (800924c <prvCheckNetworkTimers+0x78>)
 8009208:	f000 f858 	bl	80092bc <prvIPTimerCheck>
 800920c:	60b8      	str	r0, [r7, #8]

            /* Sockets will also be checked if there are TCP messages but the
            * message queue is empty (indicated by xWillSleep being true). */
            if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800920e:	4b10      	ldr	r3, [pc, #64]	; (8009250 <prvCheckNetworkTimers+0x7c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <prvCheckNetworkTimers+0x4c>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <prvCheckNetworkTimers+0x4c>
            {
                xCheckTCPSockets = pdTRUE;
 800921c:	2301      	movs	r3, #1
 800921e:	60bb      	str	r3, [r7, #8]
            }

            if( xCheckTCPSockets != pdFALSE )
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <prvCheckNetworkTimers+0x68>
            {
                /* Attend to the sockets, returning the period after which the
                 * check must be repeated. */
                xNextTime = xTCPTimerCheck( xWillSleep );
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f001 fe42 	bl	800aeb0 <xTCPTimerCheck>
 800922c:	6078      	str	r0, [r7, #4]
                prvIPTimerStart( &xTCPTimer, xNextTime );
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4806      	ldr	r0, [pc, #24]	; (800924c <prvCheckNetworkTimers+0x78>)
 8009232:	f000 f80f 	bl	8009254 <prvIPTimerStart>
                xProcessedTCPMessage = 0;
 8009236:	4b06      	ldr	r3, [pc, #24]	; (8009250 <prvCheckNetworkTimers+0x7c>)
 8009238:	2200      	movs	r2, #0
 800923a:	601a      	str	r2, [r3, #0]
            }
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800923c:	bf00      	nop
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	2000bcb4 	.word	0x2000bcb4
 8009248:	2000bc74 	.word	0x2000bc74
 800924c:	2000bcc8 	.word	0x2000bcc8
 8009250:	2000bcac 	.word	0x2000bcac

08009254 <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime: Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3304      	adds	r3, #4
 8009262:	4618      	mov	r0, r3
 8009264:	f7fc ff48 	bl	80060f8 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d105      	bne.n	8009280 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	7813      	ldrb	r3, [r2, #0]
 8009278:	f043 0302 	orr.w	r3, r3, #2
 800927c:	7013      	strb	r3, [r2, #0]
 800927e:	e004      	b.n	800928a <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	7813      	ldrb	r3, [r2, #0]
 8009284:	f36f 0341 	bfc	r3, #1, #1
 8009288:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	7813      	ldrb	r3, [r2, #0]
 800928e:	f043 0301 	orr.w	r3, r3, #1
 8009292:	7013      	strb	r3, [r2, #0]
}
 8009294:	bf00      	nop
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <prvIPTimerReload>:
 * @param[in] pxTimer: Pointer to the IP timer.
 * @param[in] xTime: Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff ffd0 	bl	8009254 <prvIPTimerStart>
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <prvIPTimerCheck>:
 * @param[in] pxTimer: Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d102      	bne.n	80092d8 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	e028      	b.n	800932a <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10f      	bne.n	8009306 <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	1d1a      	adds	r2, r3, #4
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	330c      	adds	r3, #12
 80092ee:	4619      	mov	r1, r3
 80092f0:	4610      	mov	r0, r2
 80092f2:	f7fc ff39 	bl	8006168 <xTaskCheckForTimeOut>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	7813      	ldrb	r3, [r2, #0]
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d008      	beq.n	8009326 <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff ff9a 	bl	8009254 <prvIPTimerStart>
            xReturn = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	e001      	b.n	800932a <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800932a:	68fb      	ldr	r3, [r7, #12]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <FreeRTOS_NetworkDown>:
 * @brief Send a network down event to the IP-task. If it fails to post a message,
 *         the failure will be noted in the variable 'xNetworkDownEventPending'
 *         and later on a 'network-down' event, it will be executed.
 */
void FreeRTOS_NetworkDown( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
    static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800933a:	2300      	movs	r3, #0
 800933c:	607b      	str	r3, [r7, #4]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4808      	ldr	r0, [pc, #32]	; (8009364 <FreeRTOS_NetworkDown+0x30>)
 8009342:	f000 f989 	bl	8009658 <xSendEventStructToIPTask>
 8009346:	4603      	mov	r3, r0
 8009348:	2b01      	cmp	r3, #1
 800934a:	d003      	beq.n	8009354 <FreeRTOS_NetworkDown+0x20>
    {
        /* Could not send the message, so it is still pending. */
        xNetworkDownEventPending = pdTRUE;
 800934c:	4b06      	ldr	r3, [pc, #24]	; (8009368 <FreeRTOS_NetworkDown+0x34>)
 800934e:	2201      	movs	r2, #1
 8009350:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        xNetworkDownEventPending = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009352:	e002      	b.n	800935a <FreeRTOS_NetworkDown+0x26>
        xNetworkDownEventPending = pdFALSE;
 8009354:	4b04      	ldr	r3, [pc, #16]	; (8009368 <FreeRTOS_NetworkDown+0x34>)
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]
}
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	0801540c 	.word	0x0801540c
 8009368:	2000bca4 	.word	0x2000bca4

0800936c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8009376:	2100      	movs	r1, #0
 8009378:	6838      	ldr	r0, [r7, #0]
 800937a:	f008 f8f3 	bl	8011564 <pxGetNetworkBufferWithDescriptor>
 800937e:	60f8      	str	r0, [r7, #12]

    if( pxNewBuffer != NULL )
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d017      	beq.n	80093b6 <pxDuplicateNetworkBufferWithDescriptor+0x4a>
    {
        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	61da      	str	r2, [r3, #28]

        /* Copy the original packet information. */
        pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	695a      	ldr	r2, [r3, #20]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8c1a      	ldrh	r2, [r3, #32]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	841a      	strh	r2, [r3, #32]
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	845a      	strh	r2, [r3, #34]	; 0x22
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6998      	ldr	r0, [r3, #24]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6999      	ldr	r1, [r3, #24]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f008 f9d6 	bl	8011762 <memcpy>
    }

    return pxNewBuffer;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d102      	bne.n	80093d6 <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	e011      	b.n	80093fa <prvPacketBuffer_to_NetworkBuffer+0x3a>
    }
    else
    {
        /* Obtain the network buffer from the zero copy pointer. */
        uxBuffer = ipPOINTER_CAST( uintptr_t, pvBuffer );
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60bb      	str	r3, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	3b0a      	subs	r3, #10
 80093e2:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d103      	bne.n	80093f6 <prvPacketBuffer_to_NetworkBuffer+0x36>
        {
            /* The following statement may trigger a:
             * warning: cast increases required alignment of target type [-Wcast-align].
             * It has been confirmed though that the alignment is suitable. */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	e001      	b.n	80093fa <prvPacketBuffer_to_NetworkBuffer+0x3a>
        }
        else
        {
            pxResult = NULL;
 80093f6:	2300      	movs	r3, #0
 80093f8:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 80093fa:	68fb      	ldr	r3, [r7, #12]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 8009410:	2100      	movs	r1, #0
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff ffd4 	bl	80093c0 <prvPacketBuffer_to_NetworkBuffer>
 8009418:	4603      	mov	r3, r0
    }
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
    return prvPacketBuffer_to_NetworkBuffer( pvBuffer, sizeof( UDPPacket_t ) );
 800942a:	212a      	movs	r1, #42	; 0x2a
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff ffc7 	bl	80093c0 <prvPacketBuffer_to_NetworkBuffer>
 8009432:	4603      	mov	r3, r0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <FreeRTOS_IPInit>:
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800943c:	b5b0      	push	{r4, r5, r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af02      	add	r7, sp, #8
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]

    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800944e:	f000 fd65 	bl	8009f1c <xIPIsNetworkTaskReady>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <FreeRTOS_IPInit+0x26>
 8009458:	4969      	ldr	r1, [pc, #420]	; (8009600 <FreeRTOS_IPInit+0x1c4>)
 800945a:	f44f 608e 	mov.w	r0, #1136	; 0x470
 800945e:	f7f7 fbab 	bl	8000bb8 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 8009462:	4b68      	ldr	r3, [pc, #416]	; (8009604 <FreeRTOS_IPInit+0x1c8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <FreeRTOS_IPInit+0x38>
 800946a:	4965      	ldr	r1, [pc, #404]	; (8009600 <FreeRTOS_IPInit+0x1c4>)
 800946c:	f240 4071 	movw	r0, #1137	; 0x471
 8009470:	f7f7 fba2 	bl	8000bb8 <vAssertCalled>
    configASSERT( xIPTaskHandle == NULL );
 8009474:	4b64      	ldr	r3, [pc, #400]	; (8009608 <FreeRTOS_IPInit+0x1cc>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <FreeRTOS_IPInit+0x4a>
 800947c:	4960      	ldr	r1, [pc, #384]	; (8009600 <FreeRTOS_IPInit+0x1c4>)
 800947e:	f240 4072 	movw	r0, #1138	; 0x472
 8009482:	f7f7 fb99 	bl	8000bb8 <vAssertCalled>
            configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
            configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
        }
    #endif /* ifndef _lint */
    /* Attempt to create the queue used to communicate with the IP task. */
    xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8009486:	2200      	movs	r2, #0
 8009488:	2108      	movs	r1, #8
 800948a:	2041      	movs	r0, #65	; 0x41
 800948c:	f7fb fb0a 	bl	8004aa4 <xQueueGenericCreate>
 8009490:	4602      	mov	r2, r0
 8009492:	4b5c      	ldr	r3, [pc, #368]	; (8009604 <FreeRTOS_IPInit+0x1c8>)
 8009494:	601a      	str	r2, [r3, #0]
    configASSERT( xNetworkEventQueue != NULL );
 8009496:	4b5b      	ldr	r3, [pc, #364]	; (8009604 <FreeRTOS_IPInit+0x1c8>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <FreeRTOS_IPInit+0x6c>
 800949e:	4958      	ldr	r1, [pc, #352]	; (8009600 <FreeRTOS_IPInit+0x1c4>)
 80094a0:	f240 4089 	movw	r0, #1161	; 0x489
 80094a4:	f7f7 fb88 	bl	8000bb8 <vAssertCalled>

    if( xNetworkEventQueue != NULL )
 80094a8:	4b56      	ldr	r3, [pc, #344]	; (8009604 <FreeRTOS_IPInit+0x1c8>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 809f 	beq.w	80095f0 <FreeRTOS_IPInit+0x1b4>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                /* A queue registry is normally used to assist a kernel aware
                 * debugger.  If one is in use then it will be helpful for the debugger
                 * to show information about the network event queue. */
                vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 80094b2:	4b54      	ldr	r3, [pc, #336]	; (8009604 <FreeRTOS_IPInit+0x1c8>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4955      	ldr	r1, [pc, #340]	; (800960c <FreeRTOS_IPInit+0x1d0>)
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fc f869 	bl	8005590 <vQueueAddToRegistry>
            }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 80094be:	f007 ffc7 	bl	8011450 <xNetworkBuffersInitialise>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	f040 8087 	bne.w	80095d8 <FreeRTOS_IPInit+0x19c>
        {
            /* Store the local IP and MAC address. */
            xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3303      	adds	r3, #3
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	061a      	lsls	r2, r3, #24
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3302      	adds	r3, #2
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	041b      	lsls	r3, r3, #16
 80094da:	431a      	orrs	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3301      	adds	r3, #1
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	021b      	lsls	r3, r3, #8
 80094e4:	4313      	orrs	r3, r2
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	7812      	ldrb	r2, [r2, #0]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	4a48      	ldr	r2, [pc, #288]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 80094ee:	6013      	str	r3, [r2, #0]
            xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	3303      	adds	r3, #3
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	061a      	lsls	r2, r3, #24
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	3302      	adds	r3, #2
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	041b      	lsls	r3, r3, #16
 8009500:	431a      	orrs	r2, r3
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	3301      	adds	r3, #1
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	4313      	orrs	r3, r2
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	7812      	ldrb	r2, [r2, #0]
 8009510:	4313      	orrs	r3, r2
 8009512:	4a3f      	ldr	r2, [pc, #252]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 8009514:	6053      	str	r3, [r2, #4]
            xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3303      	adds	r3, #3
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	061a      	lsls	r2, r3, #24
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3302      	adds	r3, #2
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	041b      	lsls	r3, r3, #16
 8009526:	431a      	orrs	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3301      	adds	r3, #1
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	021b      	lsls	r3, r3, #8
 8009530:	4313      	orrs	r3, r2
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	7812      	ldrb	r2, [r2, #0]
 8009536:	4313      	orrs	r3, r2
 8009538:	4a35      	ldr	r2, [pc, #212]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 800953a:	6093      	str	r3, [r2, #8]
            xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	3303      	adds	r3, #3
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	061a      	lsls	r2, r3, #24
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	3302      	adds	r3, #2
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	041b      	lsls	r3, r3, #16
 800954c:	431a      	orrs	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	3301      	adds	r3, #1
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	4313      	orrs	r3, r2
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	7812      	ldrb	r2, [r2, #0]
 800955c:	4313      	orrs	r3, r2
 800955e:	4a2c      	ldr	r2, [pc, #176]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 8009560:	60d3      	str	r3, [r2, #12]
            xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 8009562:	4b2b      	ldr	r3, [pc, #172]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	4b2a      	ldr	r3, [pc, #168]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	43db      	mvns	r3, r3
 800956c:	4313      	orrs	r3, r2
 800956e:	4a28      	ldr	r2, [pc, #160]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 8009570:	6113      	str	r3, [r2, #16]

            ( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8009572:	4a28      	ldr	r2, [pc, #160]	; (8009614 <FreeRTOS_IPInit+0x1d8>)
 8009574:	4b26      	ldr	r3, [pc, #152]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 8009576:	4614      	mov	r4, r2
 8009578:	461d      	mov	r5, r3
 800957a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800957c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	6023      	str	r3, [r4, #0]
                    *ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
                }
            #else
                {
                    /* The IP address is set from the value passed in. */
                    *ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8009582:	4b23      	ldr	r3, [pc, #140]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a24      	ldr	r2, [pc, #144]	; (8009618 <FreeRTOS_IPInit+0x1dc>)
 8009588:	6153      	str	r3, [r2, #20]

                    /* Added to prevent ARP flood to gateway.  Ensure the
                    * gateway is on the same subnet as the IP address. */
                    if( xNetworkAddressing.ulGatewayAddress != 0UL )
 800958a:	4b21      	ldr	r3, [pc, #132]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00e      	beq.n	80095b0 <FreeRTOS_IPInit+0x174>
                    {
                        configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 8009592:	4b21      	ldr	r3, [pc, #132]	; (8009618 <FreeRTOS_IPInit+0x1dc>)
 8009594:	695a      	ldr	r2, [r3, #20]
 8009596:	4b1e      	ldr	r3, [pc, #120]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	405a      	eors	r2, r3
 800959c:	4b1c      	ldr	r3, [pc, #112]	; (8009610 <FreeRTOS_IPInit+0x1d4>)
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	4013      	ands	r3, r2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d004      	beq.n	80095b0 <FreeRTOS_IPInit+0x174>
 80095a6:	4916      	ldr	r1, [pc, #88]	; (8009600 <FreeRTOS_IPInit+0x1c4>)
 80095a8:	f240 40af 	movw	r0, #1199	; 0x4af
 80095ac:	f7f7 fb04 	bl	8000bb8 <vAssertCalled>
                }
            #endif /* ipconfigUSE_DHCP == 1 */

            /* The MAC address is stored in the start of the default packet
             * header fragment, which is used when sending UDP packets. */
            ( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80095b0:	2206      	movs	r2, #6
 80095b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095b4:	4818      	ldr	r0, [pc, #96]	; (8009618 <FreeRTOS_IPInit+0x1dc>)
 80095b6:	f008 f8d4 	bl	8011762 <memcpy>

            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 80095ba:	f000 fdb3 	bl	800a124 <vNetworkSocketsInit>

            /* Create the task that processes Ethernet and stack events. */
            xReturn = xTaskCreate( prvIPTask,
 80095be:	4b12      	ldr	r3, [pc, #72]	; (8009608 <FreeRTOS_IPInit+0x1cc>)
 80095c0:	9301      	str	r3, [sp, #4]
 80095c2:	2303      	movs	r3, #3
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	2300      	movs	r3, #0
 80095c8:	f240 228a 	movw	r2, #650	; 0x28a
 80095cc:	4913      	ldr	r1, [pc, #76]	; (800961c <FreeRTOS_IPInit+0x1e0>)
 80095ce:	4814      	ldr	r0, [pc, #80]	; (8009620 <FreeRTOS_IPInit+0x1e4>)
 80095d0:	f7fc f8bc 	bl	800574c <xTaskCreate>
 80095d4:	6178      	str	r0, [r7, #20]
 80095d6:	e00e      	b.n	80095f6 <FreeRTOS_IPInit+0x1ba>
                                   ipconfigIP_TASK_PRIORITY,
                                   &( xIPTaskHandle ) );
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n" ) );
 80095d8:	4812      	ldr	r0, [pc, #72]	; (8009624 <FreeRTOS_IPInit+0x1e8>)
 80095da:	f7f7 f9b7 	bl	800094c <vLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <FreeRTOS_IPInit+0x1c8>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fb fe84 	bl	80052f0 <vQueueDelete>
            xNetworkEventQueue = NULL;
 80095e8:	4b06      	ldr	r3, [pc, #24]	; (8009604 <FreeRTOS_IPInit+0x1c8>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	e002      	b.n	80095f6 <FreeRTOS_IPInit+0x1ba>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n" ) );
 80095f0:	480d      	ldr	r0, [pc, #52]	; (8009628 <FreeRTOS_IPInit+0x1ec>)
 80095f2:	f7f7 f9ab 	bl	800094c <vLoggingPrintf>
    }

    return xReturn;
 80095f6:	697b      	ldr	r3, [r7, #20]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009600:	08013ba8 	.word	0x08013ba8
 8009604:	2000bc74 	.word	0x2000bc74
 8009608:	2000bca8 	.word	0x2000bca8
 800960c:	08013bd8 	.word	0x08013bd8
 8009610:	2000bc7c 	.word	0x2000bc7c
 8009614:	2000bc90 	.word	0x2000bc90
 8009618:	20000018 	.word	0x20000018
 800961c:	08013be0 	.word	0x08013be0
 8009620:	08008f75 	.word	0x08008f75
 8009624:	08013be8 	.word	0x08013be8
 8009628:	08013c20 	.word	0x08013c20

0800962c <xSendEventToIPTask>:
 * @param[in] eEvent: The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009642:	f107 030c 	add.w	r3, r7, #12
 8009646:	6979      	ldr	r1, [r7, #20]
 8009648:	4618      	mov	r0, r3
 800964a:	f000 f805 	bl	8009658 <xSendEventStructToIPTask>
 800964e:	4603      	mov	r3, r0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8009666:	f000 fc59 	bl	8009f1c <xIPIsNetworkTaskReady>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d107      	bne.n	8009680 <xSendEventStructToIPTask+0x28>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f993 3000 	ldrsb.w	r3, [r3]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 800967a:	2300      	movs	r3, #0
 800967c:	617b      	str	r3, [r7, #20]
 800967e:	e037      	b.n	80096f0 <xSendEventStructToIPTask+0x98>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
            {
                if( pxEvent->eEventType == eTCPTimerEvent )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f993 3000 	ldrsb.w	r3, [r3]
 800968a:	2b06      	cmp	r3, #6
 800968c:	d10e      	bne.n	80096ac <xSendEventStructToIPTask+0x54>
                {
                    /* TCP timer events are sent to wake the timer task when
                     * xTCPTimer has expired, but there is no point sending them if the
                     * IP task is already awake processing other message. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800968e:	4a1b      	ldr	r2, [pc, #108]	; (80096fc <xSendEventStructToIPTask+0xa4>)
 8009690:	7813      	ldrb	r3, [r2, #0]
 8009692:	f043 0302 	orr.w	r3, r3, #2
 8009696:	7013      	strb	r3, [r2, #0]

                    if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8009698:	4b19      	ldr	r3, [pc, #100]	; (8009700 <xSendEventStructToIPTask+0xa8>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f7fb fe0d 	bl	80052bc <uxQueueMessagesWaiting>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <xSendEventStructToIPTask+0x54>
                    {
                        /* Not actually going to send the message but this is not a
                         * failure as the message didn't need to be sent. */
                        xSendMessage = pdFALSE;
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
                    }
                }
            }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d01c      	beq.n	80096ec <xSendEventStructToIPTask+0x94>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 80096b2:	f7ff fd3b 	bl	800912c <xIsCallingFromIPTask>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d104      	bne.n	80096c6 <xSendEventStructToIPTask+0x6e>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <xSendEventStructToIPTask+0x6e>
            {
                uxUseTimeout = ( TickType_t ) 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 80096c6:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <xSendEventStructToIPTask+0xa8>)
 80096c8:	6818      	ldr	r0, [r3, #0]
 80096ca:	2300      	movs	r3, #0
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	f7fb fa7e 	bl	8004bd0 <xQueueGenericSend>
 80096d4:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <xSendEventStructToIPTask+0x98>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f993 3000 	ldrsb.w	r3, [r3]
 80096e2:	4619      	mov	r1, r3
 80096e4:	4807      	ldr	r0, [pc, #28]	; (8009704 <xSendEventStructToIPTask+0xac>)
 80096e6:	f7f7 f931 	bl	800094c <vLoggingPrintf>
 80096ea:	e001      	b.n	80096f0 <xSendEventStructToIPTask+0x98>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 80096ec:	2301      	movs	r3, #1
 80096ee:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 80096f0:	697b      	ldr	r3, [r7, #20]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	2000bcc8 	.word	0x2000bcc8
 8009700:	2000bc74 	.word	0x2000bc74
 8009704:	08013c5c 	.word	0x08013c5c

08009708 <prvProcessNetworkDownEvent>:

/**
 * @brief Process a 'Network down' event and complete required processing.
 */
static void prvProcessNetworkDownEvent( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
    /* Stop the ARP timer while there is no network. */
    xARPTimer.bActive = pdFALSE_UNSIGNED;
 800970c:	4a10      	ldr	r2, [pc, #64]	; (8009750 <prvProcessNetworkDownEvent+0x48>)
 800970e:	7813      	ldrb	r3, [r2, #0]
 8009710:	f36f 0300 	bfc	r3, #0, #1
 8009714:	7013      	strb	r3, [r2, #0]
            static BaseType_t xCallEventHook = pdFALSE;

            /* The first network down event is generated by the IP stack itself to
             * initialise the network hardware, so do not call the network down event
             * the first time through. */
            if( xCallEventHook == pdTRUE )
 8009716:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <prvProcessNetworkDownEvent+0x4c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d102      	bne.n	8009724 <prvProcessNetworkDownEvent+0x1c>
            {
                vApplicationIPNetworkEventHook( eNetworkDown );
 800971e:	2001      	movs	r0, #1
 8009720:	f7f7 fa08 	bl	8000b34 <vApplicationIPNetworkEventHook>
            }

            xCallEventHook = pdTRUE;
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <prvProcessNetworkDownEvent+0x4c>)
 8009726:	2201      	movs	r2, #1
 8009728:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigUSE_NETWORK_EVENT_HOOK == 1 */

    /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122,
     * treat network down as a "delivery problem" and flush the ARP cache for this
     * interface. */
    FreeRTOS_ClearARP();
 800972a:	f7fe fbd7 	bl	8007edc <FreeRTOS_ClearARP>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */
    if( xNetworkInterfaceInitialise() != pdPASS )
 800972e:	f006 fd65 	bl	80101fc <xNetworkInterfaceInitialise>
 8009732:	4603      	mov	r3, r0
 8009734:	2b01      	cmp	r3, #1
 8009736:	d006      	beq.n	8009746 <prvProcessNetworkDownEvent+0x3e>
    {
        /* Ideally the network interface initialisation function will only
         * return when the network is available.  In case this is not the case,
         * wait a while before retrying the initialisation. */
        vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 8009738:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800973c:	f7fc f95e 	bl	80059fc <vTaskDelay>
        FreeRTOS_NetworkDown();
 8009740:	f7ff fdf8 	bl	8009334 <FreeRTOS_NetworkDown>
                /* Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls();
            }
        #endif
    }
}
 8009744:	e001      	b.n	800974a <prvProcessNetworkDownEvent+0x42>
                vIPNetworkUpCalls();
 8009746:	f000 f807 	bl	8009758 <vIPNetworkUpCalls>
}
 800974a:	bf00      	nop
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	2000bcb4 	.word	0x2000bcb4
 8009754:	2000bce0 	.word	0x2000bce0

08009758 <vIPNetworkUpCalls>:

/**
 * @brief Perform all the required tasks when the network gets connected.
 */
void vIPNetworkUpCalls( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
    xNetworkUp = pdTRUE;
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <vIPNetworkUpCalls+0x20>)
 800975e:	2201      	movs	r2, #1
 8009760:	601a      	str	r2, [r3, #0]

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8009762:	2000      	movs	r0, #0
 8009764:	f7f7 f9e6 	bl	8000b34 <vApplicationIPNetworkEventHook>
            vDNSInitialise();
        }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8009768:	f242 7110 	movw	r1, #10000	; 0x2710
 800976c:	4803      	ldr	r0, [pc, #12]	; (800977c <vIPNetworkUpCalls+0x24>)
 800976e:	f7ff fd95 	bl	800929c <prvIPTimerReload>
}
 8009772:	bf00      	nop
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	2000bcb0 	.word	0x2000bcb0
 800977c:	2000bcb4 	.word	0x2000bcb4

08009780 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer: the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]

    configASSERT( pxNetworkBuffer != NULL );
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d104      	bne.n	800979c <prvProcessEthernetPacket+0x1c>
 8009792:	492c      	ldr	r1, [pc, #176]	; (8009844 <prvProcessEthernetPacket+0xc4>)
 8009794:	f240 607d 	movw	r0, #1661	; 0x67d
 8009798:	f7f7 fa0e 	bl	8000bb8 <vAssertCalled>

    iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    /* Interpret the Ethernet frame. */
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	2b0d      	cmp	r3, #13
 80097a2:	d939      	bls.n	8009818 <prvProcessEthernetPacket+0x98>
    {
        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 80097a4:	2301      	movs	r3, #1
 80097a6:	73fb      	strb	r3, [r7, #15]

        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */
        pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fb68 	bl	8008e82 <vCastConstPointerTo_EthernetHeader_t>
 80097b2:	60b8      	str	r0, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	899b      	ldrh	r3, [r3, #12]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	2b08      	cmp	r3, #8
 80097bc:	d015      	beq.n	80097ea <prvProcessEthernetPacket+0x6a>
 80097be:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80097c2:	d126      	bne.n	8009812 <prvProcessEthernetPacket+0x92>
            {
                case ipARP_FRAME_TYPE:

                    /* The Ethernet frame contains an ARP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	2b29      	cmp	r3, #41	; 0x29
 80097ca:	d90b      	bls.n	80097e4 <prvProcessEthernetPacket+0x64>
                    {
                        eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff fb61 	bl	8008e98 <vCastPointerTo_ARPPacket_t>
 80097d6:	4603      	mov	r3, r0
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fe f80f 	bl	80077fc <eARPProcessPacket>
 80097de:	4603      	mov	r3, r0
 80097e0:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 80097e2:	e01a      	b.n	800981a <prvProcessEthernetPacket+0x9a>
                        eReturned = eReleaseBuffer;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73fb      	strb	r3, [r7, #15]
                    break;
 80097e8:	e017      	b.n	800981a <prvProcessEthernetPacket+0x9a>

                case ipIPv4_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	2b21      	cmp	r3, #33	; 0x21
 80097f0:	d90c      	bls.n	800980c <prvProcessEthernetPacket+0x8c>
                    {
                        eReturned = prvProcessIPPacket( ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff fb59 	bl	8008eae <vCastPointerTo_IPPacket_t>
 80097fc:	4603      	mov	r3, r0
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	4618      	mov	r0, r3
 8009802:	f000 f921 	bl	8009a48 <prvProcessIPPacket>
 8009806:	4603      	mov	r3, r0
 8009808:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 800980a:	e006      	b.n	800981a <prvProcessEthernetPacket+0x9a>
                        eReturned = eReleaseBuffer;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
                    break;
 8009810:	e003      	b.n	800981a <prvProcessEthernetPacket+0x9a>

                default:
                    /* No other packet types are handled.  Nothing to do. */
                    eReturned = eReleaseBuffer;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
                    break;
 8009816:	e000      	b.n	800981a <prvProcessEthernetPacket+0x9a>
            }
        }
 8009818:	bf00      	nop
    }

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	2b02      	cmp	r3, #2
 800981e:	d002      	beq.n	8009826 <prvProcessEthernetPacket+0xa6>
 8009820:	2b03      	cmp	r3, #3
 8009822:	d009      	beq.n	8009838 <prvProcessEthernetPacket+0xb8>
 8009824:	e004      	b.n	8009830 <prvProcessEthernetPacket+0xb0>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009826:	2101      	movs	r1, #1
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fb0d 	bl	8009e48 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 800982e:	e004      	b.n	800983a <prvProcessEthernetPacket+0xba>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f007 ff11 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009836:	e000      	b.n	800983a <prvProcessEthernetPacket+0xba>
            break;
 8009838:	bf00      	nop
    }
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	08013ba8 	.word	0x08013ba8

08009848 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress: The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	061a      	lsls	r2, r3, #24
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	021b      	lsls	r3, r3, #8
 8009858:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800985c:	431a      	orrs	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	0a1b      	lsrs	r3, r3, #8
 8009862:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	0e1b      	lsrs	r3, r3, #24
 800986c:	4313      	orrs	r3, r2
 800986e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009876:	d306      	bcc.n	8009886 <xIsIPv4Multicast+0x3e>
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800987e:	d202      	bcs.n	8009886 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 8009880:	2301      	movs	r3, #1
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e001      	b.n	800988a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800988a:	68fb      	ldr	r3, [r7, #12]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress: IP address.
 * @param[out] pxMACAddress: Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	061a      	lsls	r2, r3, #24
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	0a1b      	lsrs	r3, r3, #8
 80098b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80098b8:	431a      	orrs	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	0e1b      	lsrs	r3, r3, #24
 80098be:	4313      	orrs	r3, r2
 80098c0:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2201      	movs	r2, #1
 80098c6:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2200      	movs	r2, #0
 80098cc:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	225e      	movs	r2, #94	; 0x5e
 80098d2:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	0c1b      	lsrs	r3, r3, #16
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	0a1b      	lsrs	r3, r3, #8
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	715a      	strb	r2, [r3, #5]
}
 80098f6:	bf00      	nop
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
	...

08009904 <prvAllowIPPacket>:
 * @return Whether the packet should be processed or dropped.
 */
static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
                                                  const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08a      	sub	sp, #40	; 0x28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009910:	2301      	movs	r3, #1
 8009912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	330e      	adds	r3, #14
 800991a:	623b      	str	r3, [r7, #32]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
        {
            /* In systems with a very small amount of RAM, it might be advantageous
             * to have incoming messages checked earlier, by the network card driver.
             * This method may decrease the usage of sparse network buffers. */
            uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	61fb      	str	r3, [r7, #28]

            /* Ensure that the incoming packet is not fragmented (only outgoing
             * packets can be fragmented) as these are the only handled IP frames
             * currently. */
            if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	88db      	ldrh	r3, [r3, #6]
 8009926:	b29b      	uxth	r3, r3
 8009928:	461a      	mov	r2, r3
 800992a:	f64f 730f 	movw	r3, #65295	; 0xff0f
 800992e:	4013      	ands	r3, r2
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <prvAllowIPPacket+0x38>
            {
                /* Can not handle, fragmented packet. */
                eReturn = eReleaseBuffer;
 8009934:	2300      	movs	r3, #0
 8009936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800993a:	e024      	b.n	8009986 <prvAllowIPPacket+0x82>
            }

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b44      	cmp	r3, #68	; 0x44
 8009942:	d903      	bls.n	800994c <prvAllowIPPacket+0x48>
                     ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	781b      	ldrb	r3, [r3, #0]
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8009948:	2b4f      	cmp	r3, #79	; 0x4f
 800994a:	d903      	bls.n	8009954 <prvAllowIPPacket+0x50>
            {
                /* Can not handle, unknown or invalid header version. */
                eReturn = eReleaseBuffer;
 800994c:	2300      	movs	r3, #0
 800994e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009952:	e018      	b.n	8009986 <prvAllowIPPacket+0x82>
            }
            /* Is the packet for this IP address? */
            else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 8009954:	4b37      	ldr	r3, [pc, #220]	; (8009a34 <prvAllowIPPacket+0x130>)
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	429a      	cmp	r2, r3
 800995c:	d013      	beq.n	8009986 <prvAllowIPPacket+0x82>
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009964:	d00f      	beq.n	8009986 <prvAllowIPPacket+0x82>
                     /* Is it the global broadcast address 255.255.255.255 ? */
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
                     /* Is it a specific broadcast address 192.168.1.255 ? */
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8009966:	4b34      	ldr	r3, [pc, #208]	; (8009a38 <prvAllowIPPacket+0x134>)
 8009968:	691b      	ldr	r3, [r3, #16]
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	429a      	cmp	r2, r3
 800996e:	d00a      	beq.n	8009986 <prvAllowIPPacket+0x82>
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4a32      	ldr	r2, [pc, #200]	; (8009a3c <prvAllowIPPacket+0x138>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d006      	beq.n	8009986 <prvAllowIPPacket+0x82>
                     #if ( ipconfigUSE_LLMNR == 1 )
                         /* Is it the LLMNR multicast address? */
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
                     #endif
                     /* Or (during DHCP negotiation) we have no IP-address yet? */
                     ( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 8009978:	4b2e      	ldr	r3, [pc, #184]	; (8009a34 <prvAllowIPPacket+0x130>)
 800997a:	695b      	ldr	r3, [r3, #20]
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <prvAllowIPPacket+0x82>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 8009980:	2300      	movs	r3, #0
 8009982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
        }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
        {
            if( eReturn == eProcessBuffer )
 8009986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800998a:	2b01      	cmp	r3, #1
 800998c:	d10d      	bne.n	80099aa <prvAllowIPPacket+0xa6>
            {
                if( xCheckSizeFields( ( uint8_t * ) ( pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer->xDataLength ) != pdPASS )
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	699a      	ldr	r2, [r3, #24]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	4619      	mov	r1, r3
 8009998:	4610      	mov	r0, r2
 800999a:	f000 f9bb 	bl	8009d14 <xCheckSizeFields>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d002      	beq.n	80099aa <prvAllowIPPacket+0xa6>
                {
                    /* Some of the length checks were not successful. */
                    eReturn = eReleaseBuffer;
 80099a4:	2300      	movs	r3, #0
 80099a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Check if this is a UDP packet without a checksum. */
                    if( eReturn == eProcessBuffer )
 80099aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d13a      	bne.n	8009a28 <prvAllowIPPacket+0x124>
                        /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                         * and so UDP packets carrying a protocol checksum of 0, will
                         * be dropped. */

                        /* Identify the next protocol. */
                        if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	7ddb      	ldrb	r3, [r3, #23]
 80099b6:	2b11      	cmp	r3, #17
 80099b8:	d136      	bne.n	8009a28 <prvAllowIPPacket+0x124>
                        {
                            ProtocolPacket_t * pxProtPack;
                            const uint16_t * pusChecksum;

                            /* pxProtPack will point to the offset were the protocols begin. */
                            pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pxNetworkBuffer->pucEthernetBuffer[ uxHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	699a      	ldr	r2, [r3, #24]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3b14      	subs	r3, #20
 80099c2:	4413      	add	r3, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff fa9e 	bl	8008f06 <vCastPointerTo_ProtocolPacket_t>
 80099ca:	61b8      	str	r0, [r7, #24]
                            pusChecksum = ( const uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	3328      	adds	r3, #40	; 0x28
 80099d0:	617b      	str	r3, [r7, #20]

                            if( *pusChecksum == ( uint16_t ) 0U )
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d126      	bne.n	8009a28 <prvAllowIPPacket+0x124>
                            {
                                #if ( ipconfigHAS_PRINTF != 0 )
                                    {
                                        static BaseType_t xCount = 0;

                                        if( xCount < 5 )
 80099da:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <prvAllowIPPacket+0x13c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b04      	cmp	r3, #4
 80099e0:	dc1f      	bgt.n	8009a22 <prvAllowIPPacket+0x11e>
                                        {
                                            FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80099e8:	061a      	lsls	r2, r3, #24
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80099f0:	021b      	lsls	r3, r3, #8
 80099f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099f6:	431a      	orrs	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80099fe:	0a1b      	lsrs	r3, r3, #8
 8009a00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009a04:	431a      	orrs	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009a0c:	0e1b      	lsrs	r3, r3, #24
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	4619      	mov	r1, r3
 8009a12:	480c      	ldr	r0, [pc, #48]	; (8009a44 <prvAllowIPPacket+0x140>)
 8009a14:	f7f6 ff9a 	bl	800094c <vLoggingPrintf>
                                                               FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                            xCount++;
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <prvAllowIPPacket+0x13c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	4a08      	ldr	r2, [pc, #32]	; (8009a40 <prvAllowIPPacket+0x13c>)
 8009a20:	6013      	str	r3, [r2, #0]
                                        }
                                    }
                                #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                                /* Protocol checksum not accepted. */
                                eReturn = eReleaseBuffer;
 8009a22:	2300      	movs	r3, #0
 8009a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* to avoid warning unused parameters */
            ( void ) uxHeaderLength;
        }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 8009a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3728      	adds	r7, #40	; 0x28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20000018 	.word	0x20000018
 8009a38:	2000bc7c 	.word	0x2000bc7c
 8009a3c:	fc0000e0 	.word	0xfc0000e0
 8009a40:	2000bce4 	.word	0x2000bce4
 8009a44:	08013c88 	.word	0x08013c88

08009a48 <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b090      	sub	sp, #64	; 0x40
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	330e      	adds	r3, #14
 8009a56:	63bb      	str	r3, [r7, #56]	; 0x38
    size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	637b      	str	r3, [r7, #52]	; 0x34
    UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009a66:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t ucProtocol;

    /* Bound the calculated header length: take away the Ethernet header size,
     * then check if the IP header is claiming to be longer than the remaining
     * total packet size. Also check for minimal header field length. */
    if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	3b0e      	subs	r3, #14
 8009a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d802      	bhi.n	8009a7a <prvProcessIPPacket+0x32>
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	2b13      	cmp	r3, #19
 8009a78:	d803      	bhi.n	8009a82 <prvProcessIPPacket+0x3a>
        ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
    {
        eReturn = eReleaseBuffer;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009a80:	e0cb      	b.n	8009c1a <prvProcessIPPacket+0x1d2>
    }
    else
    {
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	7ddb      	ldrb	r3, [r3, #23]
 8009a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        /* Check if the IP headers are acceptable and if it has our destination. */
        eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff ff38 	bl	8009904 <prvAllowIPPacket>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        if( eReturn == eProcessBuffer )
 8009a9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	f040 80b8 	bne.w	8009c14 <prvProcessIPPacket+0x1cc>
        {
            /* Are there IP-options. */
            if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	2b14      	cmp	r3, #20
 8009aa8:	d927      	bls.n	8009afa <prvProcessIPPacket+0xb2>
                 * The extra space is used for IP-options. */
                #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
                    {
                        /* All structs of headers expect a IP header size of 20 bytes
                         * IP header options were included, we'll ignore them and cut them out. */
                        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	3b14      	subs	r3, #20
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
                        /* From: the previous start of UDP/ICMP/TCP data. */
                        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	699a      	ldr	r2, [r3, #24]
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	330e      	adds	r3, #14
 8009ab8:	4413      	add	r3, r2
 8009aba:	627b      	str	r3, [r7, #36]	; 0x24
                        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
                        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	3322      	adds	r3, #34	; 0x22
 8009ac2:	623b      	str	r3, [r7, #32]
                        /* How many: total length minus the options and the lower headers. */
                        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	69da      	ldr	r2, [r3, #28]
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	3b22      	subs	r3, #34	; 0x22
 8009ace:	61fb      	str	r3, [r7, #28]

                        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 8009ad0:	69fa      	ldr	r2, [r7, #28]
 8009ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ad4:	6a38      	ldr	r0, [r7, #32]
 8009ad6:	f007 fe4f 	bl	8011778 <memmove>
                        pxNetworkBuffer->xDataLength -= optlen;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	69da      	ldr	r2, [r3, #28]
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	1ad2      	subs	r2, r2, r3
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	61da      	str	r2, [r3, #28]

                        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
                        pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	f023 030f 	bic.w	r3, r3, #15
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	f043 0305 	orr.w	r3, r3, #5
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	701a      	strb	r2, [r3, #0]
                        eReturn = eReleaseBuffer;
                    }
                #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */
            }

            if( eReturn != eReleaseBuffer )
 8009afa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 8088 	beq.w	8009c14 <prvProcessIPPacket+0x1cc>
            {
                /* Add the IP and MAC addresses to the ARP table if they are not
                 * already there - otherwise refresh the age of the existing
                 * entry. */
                if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b08:	2b11      	cmp	r3, #17
 8009b0a:	d007      	beq.n	8009b1c <prvProcessIPPacket+0xd4>
                    /* Refresh the ARP cache with the IP/MAC-address of the received
                     *  packet. For UDP packets, this will be done later in
                     *  xProcessReceivedUDPPacket(), as soon as it's know that the message
                     *  will be handled.  This will prevent the ARP cache getting
                     *  overwritten with the IP address of useless broadcast packets. */
                    vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	1d9a      	adds	r2, r3, #6
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	4619      	mov	r1, r3
 8009b16:	4610      	mov	r0, r2
 8009b18:	f7fd ff02 	bl	8007920 <vARPRefreshCacheEntry>
                }

                switch( ucProtocol )
 8009b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b20:	2b06      	cmp	r3, #6
 8009b22:	d068      	beq.n	8009bf6 <prvProcessIPPacket+0x1ae>
 8009b24:	2b11      	cmp	r3, #17
 8009b26:	d01d      	beq.n	8009b64 <prvProcessIPPacket+0x11c>
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d000      	beq.n	8009b2e <prvProcessIPPacket+0xe6>
                                xProcessedTCPMessage++;
                                break;
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        break;
 8009b2c:	e075      	b.n	8009c1a <prvProcessIPPacket+0x1d2>
                            if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	2b29      	cmp	r3, #41	; 0x29
 8009b34:	d912      	bls.n	8009b5c <prvProcessIPPacket+0x114>
                                ICMPPacket_t * pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff f9cd 	bl	8008eda <vCastPointerTo_ICMPPacket_t>
 8009b40:	60b8      	str	r0, [r7, #8]
                                if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	691a      	ldr	r2, [r3, #16]
 8009b46:	4b38      	ldr	r3, [pc, #224]	; (8009c28 <prvProcessIPPacket+0x1e0>)
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d164      	bne.n	8009c18 <prvProcessIPPacket+0x1d0>
                                    eReturn = prvProcessICMPPacket( pxICMPPacket );
 8009b4e:	68b8      	ldr	r0, [r7, #8]
 8009b50:	f000 f8c6 	bl	8009ce0 <prvProcessICMPPacket>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 8009b5a:	e05d      	b.n	8009c18 <prvProcessIPPacket+0x1d0>
                                eReturn = eReleaseBuffer;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 8009b62:	e059      	b.n	8009c18 <prvProcessIPPacket+0x1d0>
                           const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7ff f9c1 	bl	8008ef0 <vCastConstPointerTo_UDPPacket_t>
 8009b6e:	61b8      	str	r0, [r7, #24]
                           usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength );
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	021b      	lsls	r3, r3, #8
 8009b78:	b21a      	sxth	r2, r3
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	0a1b      	lsrs	r3, r3, #8
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	b21b      	sxth	r3, r3
 8009b86:	4313      	orrs	r3, r2
 8009b88:	b21b      	sxth	r3, r3
 8009b8a:	82fb      	strh	r3, [r7, #22]
                           if( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	2b29      	cmp	r3, #41	; 0x29
 8009b92:	d92a      	bls.n	8009bea <prvProcessIPPacket+0x1a2>
 8009b94:	8afb      	ldrh	r3, [r7, #22]
 8009b96:	2b07      	cmp	r3, #7
 8009b98:	d927      	bls.n	8009bea <prvProcessIPPacket+0x1a2>
                               uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	69db      	ldr	r3, [r3, #28]
 8009b9e:	3b2a      	subs	r3, #42	; 0x2a
 8009ba0:	613b      	str	r3, [r7, #16]
                               uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 8009ba2:	8afb      	ldrh	r3, [r7, #22]
 8009ba4:	3b08      	subs	r3, #8
 8009ba6:	60fb      	str	r3, [r7, #12]
                               if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d904      	bls.n	8009bba <prvProcessIPPacket+0x172>
                                   pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	61da      	str	r2, [r3, #28]
                               pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	841a      	strh	r2, [r3, #32]
                               pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	615a      	str	r2, [r3, #20]
                               if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6838      	ldr	r0, [r7, #0]
 8009bd8:	f006 f9ca 	bl	800ff70 <xProcessReceivedUDPPacket>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d107      	bne.n	8009bf2 <prvProcessIPPacket+0x1aa>
                                   eReturn = eFrameConsumed;
 8009be2:	2303      	movs	r3, #3
 8009be4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                           {
 8009be8:	e003      	b.n	8009bf2 <prvProcessIPPacket+0x1aa>
                               eReturn = eReleaseBuffer;
 8009bea:	2300      	movs	r3, #0
 8009bec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                       break;
 8009bf0:	e013      	b.n	8009c1a <prvProcessIPPacket+0x1d2>
                           {
 8009bf2:	bf00      	nop
                       break;
 8009bf4:	e011      	b.n	8009c1a <prvProcessIPPacket+0x1d2>
                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8009bf6:	6838      	ldr	r0, [r7, #0]
 8009bf8:	f004 fb4a 	bl	800e290 <xProcessReceivedTCPPacket>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d102      	bne.n	8009c08 <prvProcessIPPacket+0x1c0>
                                    eReturn = eFrameConsumed;
 8009c02:	2303      	movs	r3, #3
 8009c04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                xProcessedTCPMessage++;
 8009c08:	4b08      	ldr	r3, [pc, #32]	; (8009c2c <prvProcessIPPacket+0x1e4>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	4a07      	ldr	r2, [pc, #28]	; (8009c2c <prvProcessIPPacket+0x1e4>)
 8009c10:	6013      	str	r3, [r2, #0]
                                break;
 8009c12:	e002      	b.n	8009c1a <prvProcessIPPacket+0x1d2>
                }
            }
 8009c14:	bf00      	nop
 8009c16:	e000      	b.n	8009c1a <prvProcessIPPacket+0x1d2>
                        break;
 8009c18:	bf00      	nop
        }
    }

    return eReturn;
 8009c1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3740      	adds	r7, #64	; 0x40
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000018 	.word	0x20000018
 8009c2c:	2000bcac 	.word	0x2000bcac

08009c30 <prvProcessICMPEchoRequest>:
 * @brief Process an ICMP echo request.
 *
 * @param[in,out] pxICMPPacket: The IP packet that contains the ICMP message.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
    {
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint16_t usRequest;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3322      	adds	r3, #34	; 0x22
 8009c3c:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	330e      	adds	r3, #14
 8009c42:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8009c52:	4b22      	ldr	r3, [pc, #136]	; (8009cdc <prvProcessICMPEchoRequest+0xac>)
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	60da      	str	r2, [r3, #12]
         * has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
         * usGenerateChecksum(). */

        /* due to compiler warning "integer operation result is out of range" */

        usRequest = ( uint16_t ) ( ( uint16_t ) ipICMP_ECHO_REQUEST << 8 );
 8009c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c5e:	81fb      	strh	r3, [r7, #14]

        if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	885b      	ldrh	r3, [r3, #2]
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	89fb      	ldrh	r3, [r7, #14]
 8009c68:	43db      	mvns	r3, r3
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	021b      	lsls	r3, r3, #8
 8009c6e:	b299      	uxth	r1, r3
 8009c70:	89f8      	ldrh	r0, [r7, #14]
 8009c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c76:	1a1b      	subs	r3, r3, r0
 8009c78:	0a1b      	lsrs	r3, r3, #8
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d312      	bcc.n	8009caa <prvProcessICMPEchoRequest+0x7a>
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	885b      	ldrh	r3, [r3, #2]
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	89fb      	ldrh	r3, [r7, #14]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	021b      	lsls	r3, r3, #8
 8009c92:	b299      	uxth	r1, r3
 8009c94:	89fb      	ldrh	r3, [r7, #14]
 8009c96:	3301      	adds	r3, #1
 8009c98:	0a1b      	lsrs	r3, r3, #8
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	430b      	orrs	r3, r1
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	4413      	add	r3, r2
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	805a      	strh	r2, [r3, #2]
 8009ca8:	e010      	b.n	8009ccc <prvProcessICMPEchoRequest+0x9c>
        }
        else
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	885b      	ldrh	r3, [r3, #2]
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	89fb      	ldrh	r3, [r7, #14]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	b219      	sxth	r1, r3
 8009cb6:	89fb      	ldrh	r3, [r7, #14]
 8009cb8:	0a1b      	lsrs	r3, r3, #8
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	b21b      	sxth	r3, r3
 8009cbe:	430b      	orrs	r3, r1
 8009cc0:	b21b      	sxth	r3, r3
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	4413      	add	r3, r2
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	805a      	strh	r2, [r3, #2]
        }

        return eReturnEthernetFrame;
 8009ccc:	2302      	movs	r3, #2
    }
 8009cce:	4618      	mov	r0, r3
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000018 	.word	0x20000018

08009ce0 <prvProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
    {
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d008      	beq.n	8009d08 <prvProcessICMPPacket+0x28>
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	d000      	beq.n	8009cfc <prvProcessICMPPacket+0x1c>
                #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                break;

            default:
                /* Only ICMP echo packets are handled. */
                break;
 8009cfa:	e006      	b.n	8009d0a <prvProcessICMPPacket+0x2a>
                    eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff ff97 	bl	8009c30 <prvProcessICMPEchoRequest>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73fb      	strb	r3, [r7, #15]
                break;
 8009d06:	e000      	b.n	8009d0a <prvProcessICMPPacket+0x2a>
                break;
 8009d08:	bf00      	nop
        }

        return eReturn;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
    }
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <xCheckSizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer,
                                        size_t uxBufferLength )
    {
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b08c      	sub	sp, #48	; 0x30
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
        const ProtocolPacket_t * pxProtPack;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	62bb      	str	r3, [r7, #40]	; 0x28

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8009d22:	2300      	movs	r3, #0
 8009d24:	627b      	str	r3, [r7, #36]	; 0x24

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b21      	cmp	r3, #33	; 0x21
 8009d2a:	d802      	bhi.n	8009d32 <xCheckSizeFields+0x1e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009d30:	e07b      	b.n	8009e2a <xCheckSizeFields+0x116>
            }

            /* Map the buffer onto a IP-Packet struct to easily access the
             * fields of the IP packet. */
            pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff f8c6 	bl	8008ec4 <vCastConstPointerTo_IPPacket_t>
 8009d38:	6238      	str	r0, [r7, #32]

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	7b9b      	ldrb	r3, [r3, #14]
 8009d3e:	83fb      	strh	r3, [r7, #30]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8009d40:	8bfb      	ldrh	r3, [r7, #30]
 8009d42:	2b44      	cmp	r3, #68	; 0x44
 8009d44:	d902      	bls.n	8009d4c <xCheckSizeFields+0x38>
 8009d46:	8bfb      	ldrh	r3, [r7, #30]
 8009d48:	2b4f      	cmp	r3, #79	; 0x4f
 8009d4a:	d902      	bls.n	8009d52 <xCheckSizeFields+0x3e>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009d50:	e06b      	b.n	8009e2a <xCheckSizeFields+0x116>
            }

            ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 8009d52:	8bfb      	ldrh	r3, [r7, #30]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009d5c:	83fb      	strh	r3, [r7, #30]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8009d5e:	8bfb      	ldrh	r3, [r7, #30]
 8009d60:	61bb      	str	r3, [r7, #24]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	330e      	adds	r3, #14
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d202      	bcs.n	8009d72 <xCheckSizeFields+0x5e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009d70:	e05b      	b.n	8009e2a <xCheckSizeFields+0x116>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	7c1a      	ldrb	r2, [r3, #16]
 8009d76:	7c5b      	ldrb	r3, [r3, #17]
 8009d78:	021b      	lsls	r3, r3, #8
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	82fb      	strh	r3, [r7, #22]
            usLength = FreeRTOS_ntohs( usLength );
 8009d7e:	8afb      	ldrh	r3, [r7, #22]
 8009d80:	021b      	lsls	r3, r3, #8
 8009d82:	b21a      	sxth	r2, r3
 8009d84:	8afb      	ldrh	r3, [r7, #22]
 8009d86:	0a1b      	lsrs	r3, r3, #8
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	b21b      	sxth	r3, r3
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	b21b      	sxth	r3, r3
 8009d90:	82fb      	strh	r3, [r7, #22]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8009d92:	8afb      	ldrh	r3, [r7, #22]
 8009d94:	330e      	adds	r3, #14
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d202      	bcs.n	8009da2 <xCheckSizeFields+0x8e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009da0:	e043      	b.n	8009e2a <xCheckSizeFields+0x116>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	7ddb      	ldrb	r3, [r3, #23]
 8009da6:	757b      	strb	r3, [r7, #21]
             * protocol (Layer 3 or 4) header will be aligned, which is the convenience
             * of this calculation. */

            /* Map the Buffer onto the Protocol Packet struct for easy access to the
             * struct fields. */
            pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	3b14      	subs	r3, #20
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	4413      	add	r3, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff f8b3 	bl	8008f1c <vCastConstPointerTo_ProtocolPacket_t>
 8009db6:	6138      	str	r0, [r7, #16]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009db8:	7d7b      	ldrb	r3, [r7, #21]
 8009dba:	2b11      	cmp	r3, #17
 8009dbc:	d103      	bne.n	8009dc6 <xCheckSizeFields+0xb2>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	3316      	adds	r3, #22
 8009dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dc4:	e013      	b.n	8009dee <xCheckSizeFields+0xda>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8009dc6:	7d7b      	ldrb	r3, [r7, #21]
 8009dc8:	2b06      	cmp	r3, #6
 8009dca:	d103      	bne.n	8009dd4 <xCheckSizeFields+0xc0>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	3322      	adds	r3, #34	; 0x22
 8009dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dd2:	e00c      	b.n	8009dee <xCheckSizeFields+0xda>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8009dd4:	7d7b      	ldrb	r3, [r7, #21]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d002      	beq.n	8009de0 <xCheckSizeFields+0xcc>
 8009dda:	7d7b      	ldrb	r3, [r7, #21]
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d103      	bne.n	8009de8 <xCheckSizeFields+0xd4>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	3316      	adds	r3, #22
 8009de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009de6:	e002      	b.n	8009dee <xCheckSizeFields+0xda>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8009de8:	2305      	movs	r3, #5
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009dec:	e01d      	b.n	8009e2a <xCheckSizeFields+0x116>
            }

            if( uxBufferLength < uxMinimumLength )
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d202      	bcs.n	8009dfc <xCheckSizeFields+0xe8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8009df6:	2306      	movs	r3, #6
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009dfa:	e016      	b.n	8009e2a <xCheckSizeFields+0x116>
            }

            uxLength = ( size_t ) usLength;
 8009dfc:	8afb      	ldrh	r3, [r7, #22]
 8009dfe:	60fb      	str	r3, [r7, #12]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]

            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b07      	cmp	r3, #7
 8009e10:	d906      	bls.n	8009e20 <xCheckSizeFields+0x10c>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009e18:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d902      	bls.n	8009e26 <xCheckSizeFields+0x112>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8009e20:	2307      	movs	r3, #7
 8009e22:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009e24:	e001      	b.n	8009e2a <xCheckSizeFields+0x116>
            }

            xResult = pdPASS;
 8009e26:	2301      	movs	r3, #1
 8009e28:	62bb      	str	r3, [r7, #40]	; 0x28
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d003      	beq.n	8009e38 <xCheckSizeFields+0x124>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
 8009e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e32:	4804      	ldr	r0, [pc, #16]	; (8009e44 <xCheckSizeFields+0x130>)
 8009e34:	f7f6 fd8a 	bl	800094c <vLoggingPrintf>
        }

        return xResult;
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3730      	adds	r7, #48	; 0x30
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	08013cc4 	.word	0x08013cc4

08009e48 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer: The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend: Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
        {
            if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	2b3b      	cmp	r3, #59	; 0x3b
 8009e58:	d818      	bhi.n	8009e8c <vReturnEthernetFrame+0x44>
            {
                BaseType_t xIndex;

                FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4827      	ldr	r0, [pc, #156]	; (8009f00 <vReturnEthernetFrame+0xb8>)
 8009e62:	f7f6 fd73 	bl	800094c <vLoggingPrintf>

                for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	61fb      	str	r3, [r7, #28]
 8009e6c:	e008      	b.n	8009e80 <vReturnEthernetFrame+0x38>
                {
                    pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	699a      	ldr	r2, [r3, #24]
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	4413      	add	r3, r2
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]
                for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	2b3b      	cmp	r3, #59	; 0x3b
 8009e84:	ddf3      	ble.n	8009e6e <vReturnEthernetFrame+0x26>
                }

                pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	223c      	movs	r2, #60	; 0x3c
 8009e8a:	61da      	str	r2, [r3, #28]
            }
        }
    #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d111      	bne.n	8009eb6 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	69db      	ldr	r3, [r3, #28]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff fa67 	bl	800936c <pxDuplicateNetworkBufferWithDescriptor>
 8009e9e:	61b8      	str	r0, [r7, #24]

            if( pxNewBuffer != NULL )
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d005      	beq.n	8009eb2 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	69da      	ldr	r2, [r3, #28]
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	61da      	str	r2, [r3, #28]
            }

            pxNetworkBuffer = pxNewBuffer;
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d01d      	beq.n	8009ef8 <vReturnEthernetFrame+0xb0>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* Map the Buffer to Ethernet Header struct for easy access to fields. */
        pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe ffd3 	bl	8008e6c <vCastPointerTo_EthernetHeader_t>
 8009ec6:	6178      	str	r0, [r7, #20]
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        /* Swap source and destination MAC addresses. */
        pvCopySource = &pxEthernetHeader->xSourceAddress;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	3306      	adds	r3, #6
 8009ecc:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8009ed2:	2206      	movs	r2, #6
 8009ed4:	6939      	ldr	r1, [r7, #16]
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f007 fc43 	bl	8011762 <memcpy>

        pvCopySource = ipLOCAL_MAC_ADDRESS;
 8009edc:	4b09      	ldr	r3, [pc, #36]	; (8009f04 <vReturnEthernetFrame+0xbc>)
 8009ede:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	3306      	adds	r3, #6
 8009ee4:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009ee6:	2206      	movs	r2, #6
 8009ee8:	6939      	ldr	r1, [r7, #16]
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f007 fc39 	bl	8011762 <memcpy>

        /* Send! */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f006 fafe 	bl	80104f4 <xNetworkInterfaceOutput>
    }
}
 8009ef8:	bf00      	nop
 8009efa:	3720      	adds	r7, #32
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	08013e14 	.word	0x08013e14
 8009f04:	20000018 	.word	0x20000018

08009f08 <FreeRTOS_GetMACAddress>:
 * @brief Get the MAC address.
 *
 * @return The pointer to MAC address.
 */
const uint8_t * FreeRTOS_GetMACAddress( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	af00      	add	r7, sp, #0
    return ipLOCAL_MAC_ADDRESS;
 8009f0c:	4b02      	ldr	r3, [pc, #8]	; (8009f18 <FreeRTOS_GetMACAddress+0x10>)
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	20000018 	.word	0x20000018

08009f1c <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8009f20:	4b03      	ldr	r3, [pc, #12]	; (8009f30 <xIPIsNetworkTaskReady+0x14>)
 8009f22:	681b      	ldr	r3, [r3, #0]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	2000bcdc 	.word	0x2000bcdc

08009f34 <FreeRTOS_max_uint32>:
        {
            return ( a >= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_max_uint32( uint32_t a,
                                                        uint32_t b )
        {
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
            return ( a >= b ) ? a : b;
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	4293      	cmp	r3, r2
 8009f44:	bf38      	it	cc
 8009f46:	4613      	movcc	r3, r2
        }
 8009f48:	4618      	mov	r0, r3
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <FreeRTOS_round_up>:
        {
            return ( a <= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_round_up( uint32_t a,
                                                      uint32_t d )
        {
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
            return d * ( ( a + d - 1U ) / d );
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	4413      	add	r3, r2
 8009f64:	1e5a      	subs	r2, r3, #1
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	fb02 f303 	mul.w	r3, r2, r3
        }
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <uxStreamBufferSpace>:
                                                  const size_t uxLower,
                                                  const size_t uxUpper );
    static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t * pxBuffer,
                                                  const size_t uxLower,
                                                  const size_t uxUpper )
    {
 8009f7e:	b480      	push	{r7}
 8009f80:	b087      	sub	sp, #28
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	691a      	ldr	r2, [r3, #16]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	441a      	add	r2, r3
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d304      	bcc.n	8009fae <uxStreamBufferSpace+0x30>
        {
            uxCount -= pxBuffer->LENGTH;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 8009fae:	697b      	ldr	r3, [r7, #20]
    }
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	371c      	adds	r7, #28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <uxStreamBufferDistance>:
                                                     const size_t uxLower,
                                                     const size_t uxUpper );
    static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t * pxBuffer,
                                                     const size_t uxLower,
                                                     const size_t uxUpper )
    {
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	441a      	add	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d304      	bcc.n	8009fea <uxStreamBufferDistance+0x2e>
        {
            uxCount -= pxBuffer->LENGTH;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 8009fea:	697b      	ldr	r3, [r7, #20]
    }
 8009fec:	4618      	mov	r0, r3
 8009fee:	371c      	adds	r7, #28
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer )
    {
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
 * before hitting on uxTail */
        size_t uxHead = pxBuffer->uxHead;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	68f9      	ldr	r1, [r7, #12]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff ffb4 	bl	8009f7e <uxStreamBufferSpace>
 800a016:	4603      	mov	r3, r0
    }
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer )
    {
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
 * or the number of items which can still be added to uxFront,
 * before hitting on uxTail */

        size_t uxFront = pxBuffer->uxFront;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	68f9      	ldr	r1, [r7, #12]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7ff ffa0 	bl	8009f7e <uxStreamBufferSpace>
 800a03e:	4603      	mov	r3, r0
    }
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer )
    {
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
 * before reaching uxHead */
        size_t uxHead = pxBuffer->uxHead;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	68b9      	ldr	r1, [r7, #8]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff ffab 	bl	8009fbc <uxStreamBufferDistance>
 800a066:	4603      	mov	r3, r0
    }
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800a078:	687b      	ldr	r3, [r7, #4]
    }
 800a07a:	4618      	mov	r0, r3
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <vCastConstPointerTo_FreeRTOS_Socket_t>:
    {
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
        return ( const FreeRTOS_Socket_t * ) pvArgument;
 800a08e:	687b      	ldr	r3, [r7, #4]
    }
 800a090:	4618      	mov	r0, r3
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 800a0a4:	687b      	ldr	r3, [r7, #4]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <vCastPointerTo_StreamBuffer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type StreamBuffer_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( StreamBuffer_t )
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b083      	sub	sp, #12
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
    return ( StreamBuffer_t * ) pvArgument;
 800a0ba:	687b      	ldr	r3, [r7, #4]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <prvValidSocket+0x1a>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e0:	d102      	bne.n	800a0e8 <prvValidSocket+0x20>
    {
        xReturn = pdFALSE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	617b      	str	r3, [r7, #20]
 800a0e6:	e015      	b.n	800a114 <prvValidSocket+0x4c>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d006      	beq.n	800a0fc <prvValidSocket+0x34>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d102      	bne.n	800a0fc <prvValidSocket+0x34>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	617b      	str	r3, [r7, #20]
 800a0fa:	e00b      	b.n	800a114 <prvValidSocket+0x4c>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	429a      	cmp	r2, r3
 800a108:	d002      	beq.n	800a110 <prvValidSocket+0x48>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800a10a:	2300      	movs	r3, #0
 800a10c:	617b      	str	r3, [r7, #20]
 800a10e:	e001      	b.n	800a114 <prvValidSocket+0x4c>
    }
    else
    {
        xReturn = pdTRUE;
 800a110:	2301      	movs	r3, #1
 800a112:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a114:	697b      	ldr	r3, [r7, #20]
}
 800a116:	4618      	mov	r0, r3
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
	...

0800a124 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800a128:	4803      	ldr	r0, [pc, #12]	; (800a138 <vNetworkSocketsInit+0x14>)
 800a12a:	f7fa fba3 	bl	8004874 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
        {
            vListInitialise( &xBoundTCPSocketsList );
 800a12e:	4803      	ldr	r0, [pc, #12]	; (800a13c <vNetworkSocketsInit+0x18>)
 800a130:	f7fa fba0 	bl	8004874 <vListInitialise>
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800a134:	bf00      	nop
 800a136:	bd80      	pop	{r7, pc}
 800a138:	2000c85c 	.word	0x2000c85c
 800a13c:	2000c848 	.word	0x2000c848

0800a140 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800a14e:	2301      	movs	r3, #1
 800a150:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800a156:	f7ff fee1 	bl	8009f1c <xIPIsNetworkTaskReady>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d102      	bne.n	800a166 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	e04e      	b.n	800a204 <prvDetermineSocketSize+0xc4>
    }
    else
    {
        /* Only Ethernet is currently supported. */
        configASSERT( xDomain == FREERTOS_AF_INET );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d004      	beq.n	800a176 <prvDetermineSocketSize+0x36>
 800a16c:	4928      	ldr	r1, [pc, #160]	; (800a210 <prvDetermineSocketSize+0xd0>)
 800a16e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800a172:	f7f6 fd21 	bl	8000bb8 <vAssertCalled>

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800a176:	4b27      	ldr	r3, [pc, #156]	; (800a214 <prvDetermineSocketSize+0xd4>)
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17e:	d004      	beq.n	800a18a <prvDetermineSocketSize+0x4a>
 800a180:	4923      	ldr	r1, [pc, #140]	; (800a210 <prvDetermineSocketSize+0xd0>)
 800a182:	f240 104b 	movw	r0, #331	; 0x14b
 800a186:	f7f6 fd17 	bl	8000bb8 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
            {
                /* Check if the TCP socket-list has been initialised. */
                configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800a18a:	4b23      	ldr	r3, [pc, #140]	; (800a218 <prvDetermineSocketSize+0xd8>)
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a192:	d004      	beq.n	800a19e <prvDetermineSocketSize+0x5e>
 800a194:	491e      	ldr	r1, [pc, #120]	; (800a210 <prvDetermineSocketSize+0xd0>)
 800a196:	f240 104f 	movw	r0, #335	; 0x14f
 800a19a:	f7f6 fd0d 	bl	8000bb8 <vAssertCalled>
            }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b11      	cmp	r3, #17
 800a1a2:	d110      	bne.n	800a1c6 <prvDetermineSocketSize+0x86>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d009      	beq.n	800a1be <prvDetermineSocketSize+0x7e>
            {
                xReturn = pdFAIL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS );
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d004      	beq.n	800a1be <prvDetermineSocketSize+0x7e>
 800a1b4:	4916      	ldr	r1, [pc, #88]	; (800a210 <prvDetermineSocketSize+0xd0>)
 800a1b6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800a1ba:	f7f6 fcfd 	bl	8000bb8 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	224c      	movs	r2, #76	; 0x4c
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	e01e      	b.n	800a204 <prvDetermineSocketSize+0xc4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b06      	cmp	r3, #6
 800a1ca:	d111      	bne.n	800a1f0 <prvDetermineSocketSize+0xb0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d009      	beq.n	800a1e6 <prvDetermineSocketSize+0xa6>
                {
                    xReturn = pdFAIL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS );
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d004      	beq.n	800a1e6 <prvDetermineSocketSize+0xa6>
 800a1dc:	490c      	ldr	r1, [pc, #48]	; (800a210 <prvDetermineSocketSize+0xd0>)
 800a1de:	f240 1065 	movw	r0, #357	; 0x165
 800a1e2:	f7f6 fce9 	bl	8000bb8 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	e009      	b.n	800a204 <prvDetermineSocketSize+0xc4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS );
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d004      	beq.n	800a204 <prvDetermineSocketSize+0xc4>
 800a1fa:	4905      	ldr	r1, [pc, #20]	; (800a210 <prvDetermineSocketSize+0xd0>)
 800a1fc:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 800a200:	f7f6 fcda 	bl	8000bb8 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800a204:	697b      	ldr	r3, [r7, #20]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	08013f2c 	.word	0x08013f2c
 800a214:	2000c85c 	.word	0x2000c85c
 800a218:	2000c848 	.word	0x2000c848

0800a21c <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800a228:	2301      	movs	r3, #1
 800a22a:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;

    if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800a22c:	f107 0310 	add.w	r3, r7, #16
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	68b9      	ldr	r1, [r7, #8]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f7ff ff83 	bl	800a140 <prvDetermineSocketSize>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d103      	bne.n	800a248 <FreeRTOS_socket+0x2c>
    {
        xReturn = FREERTOS_INVALID_SOCKET;
 800a240:	f04f 33ff 	mov.w	r3, #4294967295
 800a244:	61fb      	str	r3, [r7, #28]
 800a246:	e080      	b.n	800a34a <FreeRTOS_socket+0x12e>
    {
        /* Allocate the structure that will hold the socket information. The
        * size depends on the type of socket: UDP sockets need less space. A
        * define 'pvPortMallocSocket' will used to allocate the necessary space.
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fc fee4 	bl	8007018 <pvPortMalloc>
 800a250:	4603      	mov	r3, r0
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff ff0c 	bl	800a070 <vCastPointerTo_FreeRTOS_Socket_t>
 800a258:	61b8      	str	r0, [r7, #24]

        if( pxSocket == NULL )
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d103      	bne.n	800a268 <FreeRTOS_socket+0x4c>
        {
            xReturn = FREERTOS_INVALID_SOCKET;
 800a260:	f04f 33ff 	mov.w	r3, #4294967295
 800a264:	61fb      	str	r3, [r7, #28]
 800a266:	e070      	b.n	800a34a <FreeRTOS_socket+0x12e>
            iptraceFAILED_TO_CREATE_SOCKET();
        }
        else
        {
            xEventGroup = xEventGroupCreate();
 800a268:	f7fa f934 	bl	80044d4 <xEventGroupCreate>
 800a26c:	6178      	str	r0, [r7, #20]

            if( xEventGroup == NULL )
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <FreeRTOS_socket+0x66>
            {
                vPortFreeSocket( pxSocket );
 800a274:	69b8      	ldr	r0, [r7, #24]
 800a276:	f7fc ff89 	bl	800718c <vPortFree>
                xReturn = FREERTOS_INVALID_SOCKET;
 800a27a:	f04f 33ff 	mov.w	r3, #4294967295
 800a27e:	61fb      	str	r3, [r7, #28]
 800a280:	e063      	b.n	800a34a <FreeRTOS_socket+0x12e>
                    /* Lint wants at least a comment, in case the macro is empty. */
                    iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
                }

                /* Clear the entire space to avoid nulling individual entries. */
                ( void ) memset( pxSocket, 0, uxSocketSize );
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	461a      	mov	r2, r3
 800a286:	2100      	movs	r1, #0
 800a288:	69b8      	ldr	r0, [r7, #24]
 800a28a:	f007 fa8e 	bl	80117aa <memset>

                pxSocket->xEventGroup = xEventGroup;
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	605a      	str	r2, [r3, #4]

                /* Initialise the socket's members.  The semaphore will be created
                 * if the socket is bound to an address, for now the pointer to the
                 * semaphore is just set to NULL to show it has not been created. */
                if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b11      	cmp	r3, #17
 800a298:	d104      	bne.n	800a2a4 <FreeRTOS_socket+0x88>
                {
                    vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	3338      	adds	r3, #56	; 0x38
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fa fae8 	bl	8004874 <vListInitialise>
                            pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
                        }
                    #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
                }

                vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fa fb03 	bl	80048b4 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	69ba      	ldr	r2, [r7, #24]
 800a2b2:	615a      	str	r2, [r3, #20]

                pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ba:	61da      	str	r2, [r3, #28]
                pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c2:	621a      	str	r2, [r3, #32]
                pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                pxSocket->ucProtocol = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

                #if ( ipconfigUSE_TCP == 1 )
                    {
                        if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b06      	cmp	r3, #6
 800a2da:	d134      	bne.n	800a346 <FreeRTOS_socket+0x12a>
                        {
                            /* StreamSize is expressed in number of bytes */
                            /* Round up buffer sizes to nearest multiple of MSS */
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a2e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                            pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ipconfigTCP_MSS;
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a2ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                            pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2f6:	66da      	str	r2, [r3, #108]	; 0x6c
                            pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800a2f8:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800a2fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a300:	f7ff fe28 	bl	8009f54 <FreeRTOS_round_up>
 800a304:	4602      	mov	r2, r0
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	671a      	str	r2, [r3, #112]	; 0x70
                            /* Use half of the buffer size of the TCP windows */
                            #if ( ipconfigUSE_TCP_WIN == 1 )
                                {
                                    pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a30e:	08db      	lsrs	r3, r3, #3
 800a310:	4a10      	ldr	r2, [pc, #64]	; (800a354 <FreeRTOS_socket+0x138>)
 800a312:	fba2 2303 	umull	r2, r3, r2, r3
 800a316:	099b      	lsrs	r3, r3, #6
 800a318:	4619      	mov	r1, r3
 800a31a:	2001      	movs	r0, #1
 800a31c:	f7ff fe0a 	bl	8009f34 <FreeRTOS_max_uint32>
 800a320:	4602      	mov	r2, r0
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                                    pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32c:	08db      	lsrs	r3, r3, #3
 800a32e:	4a09      	ldr	r2, [pc, #36]	; (800a354 <FreeRTOS_socket+0x138>)
 800a330:	fba2 2303 	umull	r2, r3, r2, r3
 800a334:	099b      	lsrs	r3, r3, #6
 800a336:	4619      	mov	r1, r3
 800a338:	2001      	movs	r0, #1
 800a33a:	f7ff fdfb 	bl	8009f34 <FreeRTOS_max_uint32>
 800a33e:	4602      	mov	r2, r0
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                             * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
                             * socket is connected and data is exchanged. */
                        }
                    }
                #endif /* ipconfigUSE_TCP == 1 */
                xReturn = pxSocket;
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	61fb      	str	r3, [r7, #28]
    }

    /* Remove compiler warnings in the case the configASSERT() is not defined. */
    ( void ) xDomain;

    return xReturn;
 800a34a:	69fb      	ldr	r3, [r7, #28]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3720      	adds	r7, #32
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	2ce33e6d 	.word	0x2ce33e6d

0800a358 <FreeRTOS_recvfrom>:
                           void * pvBuffer,
                           size_t uxBufferLength,
                           BaseType_t xFlags,
                           struct freertos_sockaddr * pxSourceAddress,
                           socklen_t * pxSourceAddressLength )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b092      	sub	sp, #72	; 0x48
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	603b      	str	r3, [r7, #0]
    BaseType_t lPacketCount;
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    const void * pvCopySource;
    FreeRTOS_Socket_t const * pxSocket = xSocket;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	633b      	str	r3, [r7, #48]	; 0x30
    TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800a36a:	2300      	movs	r3, #0
 800a36c:	61fb      	str	r3, [r7, #28]
    BaseType_t xTimed = pdFALSE;
 800a36e:	2300      	movs	r3, #0
 800a370:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;
    int32_t lReturn;
    EventBits_t xEventBits = ( EventBits_t ) 0;
 800a372:	2300      	movs	r3, #0
 800a374:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t uxPayloadLength;

    if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800a376:	2201      	movs	r2, #1
 800a378:	2111      	movs	r1, #17
 800a37a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a37c:	f7ff fea4 	bl	800a0c8 <prvValidSocket>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d103      	bne.n	800a38e <FreeRTOS_recvfrom+0x36>
    {
        lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a386:	f06f 0315 	mvn.w	r3, #21
 800a38a:	637b      	str	r3, [r7, #52]	; 0x34
 800a38c:	e08e      	b.n	800a4ac <FreeRTOS_recvfrom+0x154>
    }
    else
    {
        lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* The function prototype is designed to maintain the expected Berkeley
         * sockets standard, but this implementation does not use all the parameters. */
        ( void ) pxSourceAddressLength;

        while( lPacketCount == 0 )
 800a394:	e02f      	b.n	800a3f6 <FreeRTOS_recvfrom+0x9e>
        {
            if( xTimed == pdFALSE )
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d111      	bne.n	800a3c0 <FreeRTOS_recvfrom+0x68>
            {
                /* Check to see if the socket is non blocking on the first
                 * iteration.  */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0 )
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d02a      	beq.n	800a3fe <FreeRTOS_recvfrom+0xa6>
                        }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( ( UBaseType_t ) xFlags ) & ( ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) ) != 0U )
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	f003 0310 	and.w	r3, r3, #16
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d127      	bne.n	800a402 <FreeRTOS_recvfrom+0xaa>
                {
                    break;
                }

                /* To ensure this part only executes once. */
                xTimed = pdTRUE;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800a3b6:	f107 0314 	add.w	r3, r7, #20
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fb fe9c 	bl	80060f8 <vTaskSetTimeOutState>
            }

            /* Wait for arrival of data.  While waiting, the IP-task may set the
             * 'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
             * socket, thus unblocking this API call. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, ( ( EventBits_t ) eSOCKET_RECEIVE ) | ( ( EventBits_t ) eSOCKET_INTR ),
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	6858      	ldr	r0, [r3, #4]
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	2141      	movs	r1, #65	; 0x41
 800a3ce:	f7fa f899 	bl	8004504 <xEventGroupWaitBits>
 800a3d2:	62f8      	str	r0, [r7, #44]	; 0x2c
                {
                    ( void ) xEventBits;
                }
            #endif /* ipconfigSUPPORT_SIGNALS */

            lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	63fb      	str	r3, [r7, #60]	; 0x3c

            if( lPacketCount != 0 )
 800a3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d112      	bne.n	800a406 <FreeRTOS_recvfrom+0xae>
            {
                break;
            }

            /* Has the timeout been reached ? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800a3e0:	f107 021c 	add.w	r2, r7, #28
 800a3e4:	f107 0314 	add.w	r3, r7, #20
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fb febc 	bl	8006168 <xTaskCheckForTimeOut>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <FreeRTOS_recvfrom+0xb2>
        while( lPacketCount == 0 )
 800a3f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d0cc      	beq.n	800a396 <FreeRTOS_recvfrom+0x3e>
 800a3fc:	e006      	b.n	800a40c <FreeRTOS_recvfrom+0xb4>
                    break;
 800a3fe:	bf00      	nop
 800a400:	e004      	b.n	800a40c <FreeRTOS_recvfrom+0xb4>
                    break;
 800a402:	bf00      	nop
 800a404:	e002      	b.n	800a40c <FreeRTOS_recvfrom+0xb4>
                break;
 800a406:	bf00      	nop
 800a408:	e000      	b.n	800a40c <FreeRTOS_recvfrom+0xb4>
            {
                break;
 800a40a:	bf00      	nop
            }
        } /* while( lPacketCount == 0 ) */

        if( lPacketCount != 0 )
 800a40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d049      	beq.n	800a4a6 <FreeRTOS_recvfrom+0x14e>
        {
            taskENTER_CRITICAL();
 800a412:	f7fd f8d9 	bl	80075c8 <vPortEnterCritical>
            {
                /* The owner of the list item is the network buffer. */
                pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fe3d 	bl	800a09c <vCastPointerTo_NetworkBufferDescriptor_t>
 800a422:	62b8      	str	r0, [r7, #40]	; 0x28

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d103      	bne.n	800a436 <FreeRTOS_recvfrom+0xde>
                {
                    /* Remove the network buffer from the list of buffers waiting to
                     * be processed by the socket. */
                    ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a430:	4618      	mov	r0, r3
 800a432:	f7fa faa9 	bl	8004988 <uxListRemove>
                }
            }
            taskEXIT_CRITICAL();
 800a436:	f7fd f8f3 	bl	8007620 <vPortExitCritical>

            /* The returned value is the length of the payload data, which is
             * calculated at the total packet size minus the headers.
             * The validity of `xDataLength` prvProcessIPPacket has been confirmed
             * in 'prvProcessIPPacket()'. */
            uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	3b2a      	subs	r3, #42	; 0x2a
 800a440:	627b      	str	r3, [r7, #36]	; 0x24
            lReturn = ( int32_t ) uxPayloadLength;
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	637b      	str	r3, [r7, #52]	; 0x34

            if( pxSourceAddress != NULL )
 800a446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d007      	beq.n	800a45c <FreeRTOS_recvfrom+0x104>
            {
                pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	8c1a      	ldrh	r2, [r3, #32]
 800a450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a452:	805a      	strh	r2, [r3, #2]
                pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	695a      	ldr	r2, [r3, #20]
 800a458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a45a:	605a      	str	r2, [r3, #4]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b00      	cmp	r3, #0
 800a464:	d118      	bne.n	800a498 <FreeRTOS_recvfrom+0x140>
            {
                /* The zero copy flag is not set.  Truncate the length if it won't
                 * fit in the provided buffer. */
                if( lReturn > ( int32_t ) uxBufferLength )
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a46a:	429a      	cmp	r2, r3
 800a46c:	dd01      	ble.n	800a472 <FreeRTOS_recvfrom+0x11a>
                {
                    iptraceRECVFROM_DISCARDING_BYTES( ( uxBufferLength - lReturn ) );
                    lReturn = ( int32_t ) uxBufferLength;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	637b      	str	r3, [r7, #52]	; 0x34
                }

                /* Copy the received data into the provided buffer, then release the
                 * network buffer. */
                pvCopySource = ( const void * ) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	332a      	adds	r3, #42	; 0x2a
 800a478:	623b      	str	r3, [r7, #32]
                ( void ) memcpy( pvBuffer, pvCopySource, ( size_t ) lReturn );
 800a47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47c:	461a      	mov	r2, r3
 800a47e:	6a39      	ldr	r1, [r7, #32]
 800a480:	68b8      	ldr	r0, [r7, #8]
 800a482:	f007 f96e 	bl	8011762 <memcpy>

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	f003 0304 	and.w	r3, r3, #4
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10d      	bne.n	800a4ac <FreeRTOS_recvfrom+0x154>
                {
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a492:	f007 f8e1 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
 800a496:	e009      	b.n	800a4ac <FreeRTOS_recvfrom+0x154>
            {
                /* The zero copy flag was set.  pvBuffer is not a buffer into which
                 * the received data can be copied, but a pointer that must be set to
                 * point to the buffer in which the received data has already been
                 * placed. */
                *( ( void ** ) pvBuffer ) = ipPOINTER_CAST( void *, &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e002      	b.n	800a4ac <FreeRTOS_recvfrom+0x154>
                iptraceRECVFROM_INTERRUPTED();
            }
        #endif /* ipconfigSUPPORT_SIGNALS */
        else
        {
            lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800a4a6:	f06f 030a 	mvn.w	r3, #10
 800a4aa:	637b      	str	r3, [r7, #52]	; 0x34
            iptraceRECVFROM_TIMEOUT();
        }
    }

    return lReturn;
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3740      	adds	r7, #64	; 0x40
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b090      	sub	sp, #64	; 0x40
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	603b      	str	r3, [r7, #0]
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    void * pvCopyDest;
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800a4c6:	2304      	movs	r3, #4
 800a4c8:	f887 3020 	strb.w	r3, [r7, #32]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    TickType_t xTicksToWait;
    int32_t lReturn = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	63bb      	str	r3, [r7, #56]	; 0x38
    FreeRTOS_Socket_t const * pxSocket;
    const size_t uxMaxPayloadLength = ipMAX_UDP_PAYLOAD_LENGTH;
 800a4d4:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 800a4d8:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t uxPayloadOffset = ipUDP_PAYLOAD_OFFSET_IPv4;
 800a4da:	232a      	movs	r3, #42	; 0x2a
 800a4dc:	633b      	str	r3, [r7, #48]	; 0x30


    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pvBuffer != NULL );
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <FreeRTOS_sendto+0x3a>
 800a4e8:	4944      	ldr	r1, [pc, #272]	; (800a5fc <FreeRTOS_sendto+0x144>)
 800a4ea:	f240 4015 	movw	r0, #1045	; 0x415
 800a4ee:	f7f6 fb63 	bl	8000bb8 <vAssertCalled>

    if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d87a      	bhi.n	800a5f0 <FreeRTOS_sendto+0x138>
    {
        /* If the socket is not already bound to an address, bind it now.
         * Passing NULL as the address parameter tells FreeRTOS_bind() to select
         * the address to bind to. */
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d107      	bne.n	800a512 <FreeRTOS_sendto+0x5a>
            ( FreeRTOS_bind( xSocket, NULL, 0U ) == 0 ) )
 800a502:	2200      	movs	r2, #0
 800a504:	2100      	movs	r1, #0
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 f87a 	bl	800a600 <FreeRTOS_bind>
 800a50c:	4603      	mov	r3, r0
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d16e      	bne.n	800a5f0 <FreeRTOS_sendto+0x138>
        {
            xTicksToWait = pxSocket->xSendBlockTime;
 800a512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	617b      	str	r3, [r7, #20]
                        xTicksToWait = ( TickType_t ) 0;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	f003 0310 	and.w	r3, r3, #16
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <FreeRTOS_sendto+0x6e>
            {
                xTicksToWait = ( TickType_t ) 0;
 800a522:	2300      	movs	r3, #0
 800a524:	617b      	str	r3, [r7, #20]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d128      	bne.n	800a582 <FreeRTOS_sendto+0xca>
            {
                /* Zero copy is not set, so obtain a network buffer into
                 * which the payload will be copied. */
                vTaskSetTimeOutState( &xTimeOut );
 800a530:	f107 0318 	add.w	r3, r7, #24
 800a534:	4618      	mov	r0, r3
 800a536:	f7fb fddf 	bl	80060f8 <vTaskSetTimeOutState>

                /* Block until a buffer becomes available, or until a
                 * timeout has been reached */
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800a53a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4413      	add	r3, r2
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f007 f80d 	bl	8011564 <pxGetNetworkBufferWithDescriptor>
 800a54a:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( pxNetworkBuffer != NULL )
 800a54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01b      	beq.n	800a58a <FreeRTOS_sendto+0xd2>
                {
                    pvCopyDest = ( void * ) &pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ];
 800a552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a554:	699a      	ldr	r2, [r3, #24]
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	4413      	add	r3, r2
 800a55a:	62bb      	str	r3, [r7, #40]	; 0x28
                    ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	68b9      	ldr	r1, [r7, #8]
 800a560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a562:	f007 f8fe 	bl	8011762 <memcpy>

                    if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800a566:	f107 0214 	add.w	r2, r7, #20
 800a56a:	f107 0318 	add.w	r3, r7, #24
 800a56e:	4611      	mov	r1, r2
 800a570:	4618      	mov	r0, r3
 800a572:	f7fb fdf9 	bl	8006168 <xTaskCheckForTimeOut>
 800a576:	4603      	mov	r3, r0
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d106      	bne.n	800a58a <FreeRTOS_sendto+0xd2>
                    {
                        /* The entire block time has been used up. */
                        xTicksToWait = ( TickType_t ) 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	e003      	b.n	800a58a <FreeRTOS_sendto+0xd2>
            else
            {
                /* When zero copy is used, pvBuffer is a pointer to the
                 * payload of a buffer that has already been obtained from the
                 * stack.  Obtain the network buffer pointer from the buffer. */
                pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800a582:	68b8      	ldr	r0, [r7, #8]
 800a584:	f7fe ff4d 	bl	8009422 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800a588:	63f8      	str	r0, [r7, #60]	; 0x3c
            }

            if( pxNetworkBuffer != NULL )
 800a58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d02f      	beq.n	800a5f0 <FreeRTOS_sendto+0x138>
            {
                /* xDataLength is the size of the total packet, including the Ethernet header. */
                pxNetworkBuffer->xDataLength = uxTotalDataLength + sizeof( UDPPacket_t );
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800a596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a598:	61da      	str	r2, [r3, #28]
                pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800a59a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a59c:	885a      	ldrh	r2, [r3, #2]
 800a59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a0:	841a      	strh	r2, [r3, #32]
                pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5aa:	845a      	strh	r2, [r3, #34]	; 0x22
                pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 800a5ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b2:	615a      	str	r2, [r3, #20]

                /* The socket options are passed to the IP layer in the
                 * space that will eventually get used by the Ethernet header. */
                pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800a5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	3306      	adds	r3, #6
 800a5ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5bc:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800a5c0:	701a      	strb	r2, [r3, #0]

                /* Tell the networking task that the packet needs sending. */
                xStackTxEvent.pvData = pxNetworkBuffer;
 800a5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24

                /* Ask the IP-task to send this packet */
                if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	f107 0320 	add.w	r3, r7, #32
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff f842 	bl	8009658 <xSendEventStructToIPTask>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d102      	bne.n	800a5e0 <FreeRTOS_sendto+0x128>
                {
                    /* The packet was successfully sent to the IP task. */
                    lReturn = ( int32_t ) uxTotalDataLength;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5de:	e007      	b.n	800a5f0 <FreeRTOS_sendto+0x138>
                }
                else
                {
                    /* If the buffer was allocated in this function, release
                     * it. */
                    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <FreeRTOS_sendto+0x138>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a5ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a5ec:	f007 f834 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
    {
        /* The data is longer than the available buffer space. */
        iptraceSENDTO_DATA_TOO_LONG();
    }

    return lReturn;
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
} /* Tested */
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3740      	adds	r7, #64	; 0x40
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	08013f2c 	.word	0x08013f2c

0800a600 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b08a      	sub	sp, #40	; 0x28
 800a604:	af02      	add	r7, sp, #8
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	61bb      	str	r3, [r7, #24]
    BaseType_t xReturn = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	61fb      	str	r3, [r7, #28]

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800a614:	f7fe fd8a 	bl	800912c <xIsCallingFromIPTask>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d004      	beq.n	800a628 <FreeRTOS_bind+0x28>
 800a61e:	492f      	ldr	r1, [pc, #188]	; (800a6dc <FreeRTOS_bind+0xdc>)
 800a620:	f240 40ad 	movw	r0, #1197	; 0x4ad
 800a624:	f7f6 fac8 	bl	8000bb8 <vAssertCalled>

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d003      	beq.n	800a636 <FreeRTOS_bind+0x36>
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a634:	d103      	bne.n	800a63e <FreeRTOS_bind+0x3e>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a636:	f06f 0315 	mvn.w	r3, #21
 800a63a:	61fb      	str	r3, [r7, #28]
 800a63c:	e048      	b.n	800a6d0 <FreeRTOS_bind+0xd0>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d009      	beq.n	800a65a <FreeRTOS_bind+0x5a>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a64a:	4619      	mov	r1, r3
 800a64c:	4824      	ldr	r0, [pc, #144]	; (800a6e0 <FreeRTOS_bind+0xe0>)
 800a64e:	f7f6 f97d 	bl	800094c <vLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a652:	f06f 0315 	mvn.w	r3, #21
 800a656:	61fb      	str	r3, [r7, #28]
 800a658:	e03a      	b.n	800a6d0 <FreeRTOS_bind+0xd0>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800a65a:	2309      	movs	r3, #9
 800a65c:	743b      	strb	r3, [r7, #16]
        xBindEvent.pvData = xSocket;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	617b      	str	r3, [r7, #20]

        if( pxAddress != NULL )
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00e      	beq.n	800a686 <FreeRTOS_bind+0x86>
        {
            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	885b      	ldrh	r3, [r3, #2]
 800a66c:	021b      	lsls	r3, r3, #8
 800a66e:	b21a      	sxth	r2, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	885b      	ldrh	r3, [r3, #2]
 800a674:	0a1b      	lsrs	r3, r3, #8
 800a676:	b29b      	uxth	r3, r3
 800a678:	b21b      	sxth	r3, r3
 800a67a:	4313      	orrs	r3, r2
 800a67c:	b21b      	sxth	r3, r3
 800a67e:	b29a      	uxth	r2, r3
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	849a      	strh	r2, [r3, #36]	; 0x24
 800a684:	e002      	b.n	800a68c <FreeRTOS_bind+0x8c>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	2200      	movs	r2, #0
 800a68a:	849a      	strh	r2, [r3, #36]	; 0x24
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800a68c:	f107 0310 	add.w	r3, r7, #16
 800a690:	f04f 31ff 	mov.w	r1, #4294967295
 800a694:	4618      	mov	r0, r3
 800a696:	f7fe ffdf 	bl	8009658 <xSendEventStructToIPTask>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d106      	bne.n	800a6ae <FreeRTOS_bind+0xae>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800a6a0:	4810      	ldr	r0, [pc, #64]	; (800a6e4 <FreeRTOS_bind+0xe4>)
 800a6a2:	f7f6 f953 	bl	800094c <vLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800a6a6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800a6aa:	61fb      	str	r3, [r7, #28]
 800a6ac:	e010      	b.n	800a6d0 <FreeRTOS_bind+0xd0>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	6858      	ldr	r0, [r3, #4]
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	2110      	movs	r1, #16
 800a6be:	f7f9 ff21 	bl	8004504 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d102      	bne.n	800a6d0 <FreeRTOS_bind+0xd0>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a6ca:	f06f 0315 	mvn.w	r3, #21
 800a6ce:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    return xReturn;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3720      	adds	r7, #32
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	08013f2c 	.word	0x08013f2c
 800a6e0:	08013f80 	.word	0x08013f80
 800a6e4:	08013fac 	.word	0x08013fac

0800a6e8 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08a      	sub	sp, #40	; 0x28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
 800a6f4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	627b      	str	r3, [r7, #36]	; 0x24
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	61fb      	str	r3, [r7, #28]
    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a704:	2b06      	cmp	r3, #6
 800a706:	d102      	bne.n	800a70e <vSocketBind+0x26>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800a708:	4b43      	ldr	r3, [pc, #268]	; (800a818 <vSocketBind+0x130>)
 800a70a:	623b      	str	r3, [r7, #32]
 800a70c:	e001      	b.n	800a712 <vSocketBind+0x2a>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800a70e:	4b43      	ldr	r3, [pc, #268]	; (800a81c <vSocketBind+0x134>)
 800a710:	623b      	str	r3, [r7, #32]

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) uxAddressLength;

    configASSERT( pxSocket != NULL );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <vSocketBind+0x3a>
 800a718:	4941      	ldr	r1, [pc, #260]	; (800a820 <vSocketBind+0x138>)
 800a71a:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 800a71e:	f7f6 fa4b 	bl	8000bb8 <vAssertCalled>
    configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a728:	d104      	bne.n	800a734 <vSocketBind+0x4c>
 800a72a:	493d      	ldr	r1, [pc, #244]	; (800a820 <vSocketBind+0x138>)
 800a72c:	f240 5011 	movw	r0, #1297	; 0x511
 800a730:	f7f6 fa42 	bl	8000bb8 <vAssertCalled>
            /* pxAddress will be NULL if sendto() was called on a socket without the
             * socket being bound to an address. In this case, automatically allocate
             * an address to the socket.  There is a small chance that the allocated
             * port will already be in use - if that is the case, then the check below
             * [pxListFindListItemWithValue()] will result in an error being returned. */
            if( pxAddress == NULL )
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d105      	bne.n	800a746 <vSocketBind+0x5e>
            {
                pxAddress = &xAddress;
 800a73a:	f107 0314 	add.w	r3, r7, #20
 800a73e:	61fb      	str	r3, [r7, #28]
                /* Put the port to zero to be assigned later. */
                pxAddress->sin_port = 0U;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	2200      	movs	r2, #0
 800a744:	805a      	strh	r2, [r3, #2]
        }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d104      	bne.n	800a756 <vSocketBind+0x6e>
 800a74c:	4934      	ldr	r1, [pc, #208]	; (800a820 <vSocketBind+0x138>)
 800a74e:	f240 5025 	movw	r0, #1317	; 0x525
 800a752:	f7f6 fa31 	bl	8000bb8 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	885b      	ldrh	r3, [r3, #2]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d111      	bne.n	800a782 <vSocketBind+0x9a>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a764:	4618      	mov	r0, r3
 800a766:	f000 f961 	bl	800aa2c <prvGetPrivatePortNumber>
 800a76a:	4603      	mov	r3, r0
 800a76c:	461a      	mov	r2, r3
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	885b      	ldrh	r3, [r3, #2]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d103      	bne.n	800a782 <vSocketBind+0x9a>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800a77a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
 800a780:	e045      	b.n	800a80e <vSocketBind+0x126>
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            /* Check to ensure the port is not already in use.  If the bind is
             * called internally, a port MAY be used by more than one socket. */
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d004      	beq.n	800a792 <vSocketBind+0xaa>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a78e:	2b06      	cmp	r3, #6
 800a790:	d024      	beq.n	800a7dc <vSocketBind+0xf4>
                ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	885b      	ldrh	r3, [r3, #2]
 800a796:	4619      	mov	r1, r3
 800a798:	6a38      	ldr	r0, [r7, #32]
 800a79a:	f000 f99f 	bl	800aadc <pxListFindListItemWithValue>
 800a79e:	4603      	mov	r3, r0
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d01b      	beq.n	800a7dc <vSocketBind+0xf4>
            {
                FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a7aa:	2b06      	cmp	r3, #6
 800a7ac:	d101      	bne.n	800a7b2 <vSocketBind+0xca>
 800a7ae:	491d      	ldr	r1, [pc, #116]	; (800a824 <vSocketBind+0x13c>)
 800a7b0:	e000      	b.n	800a7b4 <vSocketBind+0xcc>
 800a7b2:	491d      	ldr	r1, [pc, #116]	; (800a828 <vSocketBind+0x140>)
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	885b      	ldrh	r3, [r3, #2]
 800a7b8:	021b      	lsls	r3, r3, #8
 800a7ba:	b21a      	sxth	r2, r3
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	885b      	ldrh	r3, [r3, #2]
 800a7c0:	0a1b      	lsrs	r3, r3, #8
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	b21b      	sxth	r3, r3
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	b21b      	sxth	r3, r3
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4817      	ldr	r0, [pc, #92]	; (800a82c <vSocketBind+0x144>)
 800a7d0:	f7f6 f8bc 	bl	800094c <vLoggingPrintf>
                                         ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                         FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800a7d4:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7da:	e018      	b.n	800a80e <vSocketBind+0x126>
            }
            else
            {
                /* Allocate the port number to the socket.
                 * This macro will set 'xBoundSocketListItem->xItemValue' */
                socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	885b      	ldrh	r3, [r3, #2]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	609a      	str	r2, [r3, #8]

                /* And also store it in a socket field 'usLocalPort' in host-byte-order,
                 * mostly used for logging and debugging purposes */
                pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	885b      	ldrh	r3, [r3, #2]
 800a7ea:	021b      	lsls	r3, r3, #8
 800a7ec:	b21a      	sxth	r2, r3
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	885b      	ldrh	r3, [r3, #2]
 800a7f2:	0a1b      	lsrs	r3, r3, #8
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	b21b      	sxth	r3, r3
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	b21b      	sxth	r3, r3
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	849a      	strh	r2, [r3, #36]	; 0x24
                            vTaskSuspendAll();
                        }
                    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

                    /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
                    vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3308      	adds	r3, #8
 800a806:	4619      	mov	r1, r3
 800a808:	6a38      	ldr	r0, [r7, #32]
 800a80a:	f7fa f860 	bl	80048ce <vListInsertEnd>
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /* Tested */
 800a810:	4618      	mov	r0, r3
 800a812:	3728      	adds	r7, #40	; 0x28
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	2000c848 	.word	0x2000c848
 800a81c:	2000c85c 	.word	0x2000c85c
 800a820:	08013f2c 	.word	0x08013f2c
 800a824:	08013fd0 	.word	0x08013fd0
 800a828:	08013fd4 	.word	0x08013fd4
 800a82c:	08013fd8 	.word	0x08013fd8

0800a830 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
    #endif
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800a838:	230a      	movs	r3, #10
 800a83a:	733b      	strb	r3, [r7, #12]
    xCloseEvent.pvData = xSocket;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	613b      	str	r3, [r7, #16]

    if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <FreeRTOS_closesocket+0x1e>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d102      	bne.n	800a854 <FreeRTOS_closesocket+0x24>
    {
        xResult = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	617b      	str	r3, [r7, #20]
 800a852:	e011      	b.n	800a878 <FreeRTOS_closesocket+0x48>
         * packet handling. */

        /* Note when changing the time-out value below, it must be checked who is calling
         * this function. If it is called by the IP-task, a deadlock could occur.
         * The IP-task would only call it in case of a user call-back */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800a854:	f107 030c 	add.w	r3, r7, #12
 800a858:	2100      	movs	r1, #0
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fefc 	bl	8009658 <xSendEventStructToIPTask>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d106      	bne.n	800a874 <FreeRTOS_closesocket+0x44>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800a866:	4807      	ldr	r0, [pc, #28]	; (800a884 <FreeRTOS_closesocket+0x54>)
 800a868:	f7f6 f870 	bl	800094c <vLoggingPrintf>
            xResult = -1;
 800a86c:	f04f 33ff 	mov.w	r3, #4294967295
 800a870:	617b      	str	r3, [r7, #20]
 800a872:	e001      	b.n	800a878 <FreeRTOS_closesocket+0x48>
        }
        else
        {
            xResult = 1;
 800a874:	2301      	movs	r3, #1
 800a876:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800a878:	697b      	ldr	r3, [r7, #20]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	08013ffc 	.word	0x08013ffc

0800a888 <vSocketClose>:
 * @param[in] pxSocket: The socket descriptor of the socket being closed.
 *
 * @return Returns NULL, always.
 */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800a888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af02      	add	r7, sp, #8
 800a88e:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* For TCP: clean up a little more. */
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a896:	2b06      	cmp	r3, #6
 800a898:	d122      	bne.n	800a8e0 <vSocketClose+0x58>
            {
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d004      	beq.n	800a8ac <vSocketClose+0x24>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f006 fed6 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
                        }

                        /* Free the resources which were claimed by the tcpWin member */
                        vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	33d8      	adds	r3, #216	; 0xd8
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f004 fb03 	bl	800eebc <vTCPWindowDestroy>
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* Free the input and output streams */
                if( pxSocket->u.xTCP.rxStream != NULL )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d004      	beq.n	800a8c8 <vSocketClose+0x40>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                    vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fc fc62 	bl	800718c <vPortFree>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <vSocketClose+0x52>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                    vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fc fc59 	bl	800718c <vPortFree>
                }

                /* In case this is a child socket, make sure the child-count of the
                 * parent socket is decreased. */
                prvTCPSetSocketCount( pxSocket );
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f850 	bl	800a980 <prvTCPSetSocketCount>
        }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d004      	beq.n	800a8f2 <vSocketClose+0x6a>
            {
                vTaskSuspendAll();
            }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3308      	adds	r3, #8
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7fa f84b 	bl	8004988 <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a8f8:	2b11      	cmp	r3, #17
 800a8fa:	d112      	bne.n	800a922 <vSocketClose+0x9a>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800a8fc:	e00d      	b.n	800a91a <vSocketClose+0x92>
        {
            pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	4618      	mov	r0, r3
 800a906:	f7ff fbc9 	bl	800a09c <vCastPointerTo_NetworkBufferDescriptor_t>
 800a90a:	60f8      	str	r0, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fa f83a 	bl	8004988 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f006 fe9f 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1ed      	bne.n	800a8fe <vSocketClose+0x76>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d004      	beq.n	800a934 <vSocketClose+0xac>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f9 ff50 	bl	80047d4 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
        {
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a93a:	2b06      	cmp	r3, #6
 800a93c:	d114      	bne.n	800a968 <vSocketClose+0xe0>
            {
                FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%u to %lxip:%u]: buffers %lu socks %lu\n",
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a942:	461d      	mov	r5, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a94c:	461e      	mov	r6, r3
 800a94e:	f006 feb7 	bl	80116c0 <uxGetNumberOfFreeNetworkBuffers>
 800a952:	4602      	mov	r2, r0
 800a954:	4b08      	ldr	r3, [pc, #32]	; (800a978 <vSocketClose+0xf0>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	9301      	str	r3, [sp, #4]
 800a95a:	9200      	str	r2, [sp, #0]
 800a95c:	4633      	mov	r3, r6
 800a95e:	4622      	mov	r2, r4
 800a960:	4629      	mov	r1, r5
 800a962:	4806      	ldr	r0, [pc, #24]	; (800a97c <vSocketClose+0xf4>)
 800a964:	f7f5 fff2 	bl	800094c <vLoggingPrintf>
        }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7fc fc0f 	bl	800718c <vPortFree>

    return NULL;
 800a96e:	2300      	movs	r3, #0
} /* Tested */
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a978:	2000c848 	.word	0x2000c848
 800a97c:	0801401c 	.word	0x0801401c

0800a980 <prvTCPSetSocketCount>:
 *        keep a pointer to it.
 *
 * @param[in] pxSocketToDelete: The socket being closed.
 */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af02      	add	r7, sp, #8
 800a986:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800a988:	4b24      	ldr	r3, [pc, #144]	; (800aa1c <prvTCPSetSocketCount+0x9c>)
 800a98a:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a990:	81fb      	strh	r3, [r7, #14]

        for( pxIterator = listGET_NEXT( pxEnd );
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	617b      	str	r3, [r7, #20]
 800a998:	e038      	b.n	800aa0c <prvTCPSetSocketCount+0x8c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7ff fb66 	bl	800a070 <vCastPointerTo_FreeRTOS_Socket_t>
 800a9a4:	60b8      	str	r0, [r7, #8]

            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d12a      	bne.n	800aa06 <prvTCPSetSocketCount+0x86>
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800a9b4:	89fa      	ldrh	r2, [r7, #14]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d125      	bne.n	800aa06 <prvTCPSetSocketCount+0x86>
                ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d020      	beq.n	800aa06 <prvTCPSetSocketCount+0x86>
            {
                pxOtherSocket->u.xTCP.usChildCount--;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a9d8:	4619      	mov	r1, r3
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d101      	bne.n	800a9f8 <prvTCPSetSocketCount+0x78>
 800a9f4:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <prvTCPSetSocketCount+0xa0>)
 800a9f6:	e000      	b.n	800a9fa <prvTCPSetSocketCount+0x7a>
 800a9f8:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <prvTCPSetSocketCount+0xa4>)
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	480a      	ldr	r0, [pc, #40]	; (800aa28 <prvTCPSetSocketCount+0xa8>)
 800aa00:	f7f5 ffa4 	bl	800094c <vLoggingPrintf>
                                         pxOtherSocket->usLocalPort,
                                         pxOtherSocket->u.xTCP.usChildCount,
                                         pxOtherSocket->u.xTCP.usBacklog,
                                         ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                break;
 800aa04:	e006      	b.n	800aa14 <prvTCPSetSocketCount+0x94>
             pxIterator = listGET_NEXT( pxIterator ) )
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	617b      	str	r3, [r7, #20]
        for( pxIterator = listGET_NEXT( pxEnd );
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d1c2      	bne.n	800a99a <prvTCPSetSocketCount+0x1a>
            }
        }
    }
 800aa14:	bf00      	nop
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	2000c850 	.word	0x2000c850
 800aa20:	0801405c 	.word	0x0801405c
 800aa24:	08014060 	.word	0x08014060
 800aa28:	08014064 	.word	0x08014064

0800aa2c <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800aa34:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800aa38:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800aa3a:	89fb      	ldrh	r3, [r7, #14]
 800aa3c:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b06      	cmp	r3, #6
 800aa4a:	d102      	bne.n	800aa52 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800aa4c:	4b21      	ldr	r3, [pc, #132]	; (800aad4 <prvGetPrivatePortNumber+0xa8>)
 800aa4e:	613b      	str	r3, [r7, #16]
 800aa50:	e001      	b.n	800aa56 <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800aa52:	4b21      	ldr	r3, [pc, #132]	; (800aad8 <prvGetPrivatePortNumber+0xac>)
 800aa54:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800aa56:	f107 0308 	add.w	r3, r7, #8
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7f5 ffa4 	bl	80009a8 <xApplicationGetRandomNumber>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d030      	beq.n	800aac8 <prvGetPrivatePortNumber+0x9c>
        }

        /* Map the random to a candidate port. */
        usResult =
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
            ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount );
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	b29b      	uxth	r3, r3
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800aa6a:	89fa      	ldrh	r2, [r7, #14]
 800aa6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa70:	fb02 f201 	mul.w	r2, r2, r1
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	b29b      	uxth	r3, r3
        usResult =
 800aa78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa7c:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800aa7e:	8abb      	ldrh	r3, [r7, #20]
 800aa80:	021b      	lsls	r3, r3, #8
 800aa82:	b21a      	sxth	r2, r3
 800aa84:	8abb      	ldrh	r3, [r7, #20]
 800aa86:	0a1b      	lsrs	r3, r3, #8
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	b21b      	sxth	r3, r3
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	b21b      	sxth	r3, r3
 800aa90:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800aa92:	4619      	mov	r1, r3
 800aa94:	6938      	ldr	r0, [r7, #16]
 800aa96:	f000 f821 	bl	800aadc <pxListFindListItemWithValue>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10a      	bne.n	800aab6 <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800aaa0:	8abb      	ldrh	r3, [r7, #20]
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	b21a      	sxth	r2, r3
 800aaa6:	8abb      	ldrh	r3, [r7, #20]
 800aaa8:	0a1b      	lsrs	r3, r3, #8
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	b21b      	sxth	r3, r3
 800aaae:	4313      	orrs	r3, r2
 800aab0:	b21b      	sxth	r3, r3
 800aab2:	82bb      	strh	r3, [r7, #20]
            break;
 800aab4:	e009      	b.n	800aaca <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800aaba:	8afb      	ldrh	r3, [r7, #22]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800aac0:	8afb      	ldrh	r3, [r7, #22]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1c7      	bne.n	800aa56 <prvGetPrivatePortNumber+0x2a>
 800aac6:	e000      	b.n	800aaca <prvGetPrivatePortNumber+0x9e>
            break;
 800aac8:	bf00      	nop

    return usResult;
 800aaca:	8abb      	ldrh	r3, [r7, #20]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	2000c848 	.word	0x2000c848
 800aad8:	2000c85c 	.word	0x2000c85c

0800aadc <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800aae6:	2300      	movs	r3, #0
 800aae8:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800aaea:	f7ff fa17 	bl	8009f1c <xIPIsNetworkTaskReady>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d018      	beq.n	800ab26 <pxListFindListItemWithValue+0x4a>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d015      	beq.n	800ab26 <pxListFindListItemWithValue+0x4a>
    {
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	3308      	adds	r3, #8
 800aafe:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	613b      	str	r3, [r7, #16]
 800ab06:	e00a      	b.n	800ab1e <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d102      	bne.n	800ab18 <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	617b      	str	r3, [r7, #20]
                break;
 800ab16:	e006      	b.n	800ab26 <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	613b      	str	r3, [r7, #16]
        for( pxIterator = listGET_NEXT( pxEnd );
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d1f0      	bne.n	800ab08 <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800ab26:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	480d      	ldr	r0, [pc, #52]	; (800ab74 <pxUDPSocketLookup+0x44>)
 800ab40:	f7ff ffcc 	bl	800aadc <pxListFindListItemWithValue>
 800ab44:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00d      	beq.n	800ab68 <pxUDPSocketLookup+0x38>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff fa8d 	bl	800a070 <vCastPointerTo_FreeRTOS_Socket_t>
 800ab56:	60f8      	str	r0, [r7, #12]
        configASSERT( pxSocket != NULL );
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d104      	bne.n	800ab68 <pxUDPSocketLookup+0x38>
 800ab5e:	4906      	ldr	r1, [pc, #24]	; (800ab78 <pxUDPSocketLookup+0x48>)
 800ab60:	f640 008b 	movw	r0, #2187	; 0x88b
 800ab64:	f7f6 f828 	bl	8000bb8 <vAssertCalled>
    }

    return pxSocket;
 800ab68:	68fb      	ldr	r3, [r7, #12]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	2000c85c 	.word	0x2000c85c
 800ab78:	08013f2c 	.word	0x08013f2c

0800ab7c <FreeRTOS_inet_ntoa>:
 * @return If all checks pass, then the pointer returned will be same as pcBuffer
 *         and will have the address stored in the location. Else, NULL is returned.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b08d      	sub	sp, #52	; 0x34
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800ab8a:	1d3b      	adds	r3, r7, #4
 800ab8c:	61bb      	str	r3, [r7, #24]
    const char * pcResult = pcBuffer;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	627b      	str	r3, [r7, #36]	; 0x24
    const socklen_t uxSize = 16;
 800ab92:	2310      	movs	r3, #16
 800ab94:	617b      	str	r3, [r7, #20]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800ab96:	2300      	movs	r3, #0
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab9a:	e073      	b.n	800ac84 <FreeRTOS_inet_ntoa+0x108>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800ab9c:	69ba      	ldr	r2, [r7, #24]
 800ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba0:	4413      	add	r3, r2
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800aba8:	2302      	movs	r3, #2
 800abaa:	61fb      	str	r3, [r7, #28]
        socklen_t uxNeeded;

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800abac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800abb0:	4b39      	ldr	r3, [pc, #228]	; (800ac98 <FreeRTOS_inet_ntoa+0x11c>)
 800abb2:	fba3 1302 	umull	r1, r3, r3, r2
 800abb6:	08d9      	lsrs	r1, r3, #3
 800abb8:	460b      	mov	r3, r1
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	440b      	add	r3, r1
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	b2d9      	uxtb	r1, r3
 800abc4:	f107 020c 	add.w	r2, r7, #12
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	4413      	add	r3, r2
 800abcc:	460a      	mov	r2, r1
 800abce:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800abd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abd4:	4a30      	ldr	r2, [pc, #192]	; (800ac98 <FreeRTOS_inet_ntoa+0x11c>)
 800abd6:	fba2 2303 	umull	r2, r3, r2, r3
 800abda:	08db      	lsrs	r3, r3, #3
 800abdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( uxSource == 1U )
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d003      	beq.n	800abee <FreeRTOS_inet_ntoa+0x72>
            {
                break;
            }

            uxSource--;
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	3b01      	subs	r3, #1
 800abea:	61fb      	str	r3, [r7, #28]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800abec:	e7de      	b.n	800abac <FreeRTOS_inet_ntoa+0x30>
                break;
 800abee:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800abf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abf4:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800abf6:	2300      	movs	r3, #0
 800abf8:	61fb      	str	r3, [r7, #28]
 800abfa:	e009      	b.n	800ac10 <FreeRTOS_inet_ntoa+0x94>
        {
            if( pucDigits[ uxSource ] != 0U )
 800abfc:	f107 020c 	add.w	r2, r7, #12
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	4413      	add	r3, r2
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d106      	bne.n	800ac18 <FreeRTOS_inet_ntoa+0x9c>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d9f2      	bls.n	800abfc <FreeRTOS_inet_ntoa+0x80>
 800ac16:	e000      	b.n	800ac1a <FreeRTOS_inet_ntoa+0x9e>
            {
                break;
 800ac18:	bf00      	nop
            }
        }

        /* Write e.g. "192.", which is 3 digits and a dot. */
        uxNeeded = ( ( socklen_t ) sockDIGIT_COUNT - uxSource ) + 1U;
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	f1c3 0304 	rsb	r3, r3, #4
 800ac20:	613b      	str	r3, [r7, #16]

        if( ( uxIndex + uxNeeded ) > uxSize )
 800ac22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	4413      	add	r3, r2
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d213      	bcs.n	800ac56 <FreeRTOS_inet_ntoa+0xda>
        {
            /* The result won't fit. */
            pcResult = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	627b      	str	r3, [r7, #36]	; 0x24
 800ac32:	e02a      	b.n	800ac8a <FreeRTOS_inet_ntoa+0x10e>
            break;
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800ac34:	f107 020c 	add.w	r2, r7, #12
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	781a      	ldrb	r2, [r3, #0]
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	440b      	add	r3, r1
 800ac44:	3230      	adds	r2, #48	; 0x30
 800ac46:	b2d2      	uxtb	r2, r2
 800ac48:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	62bb      	str	r3, [r7, #40]	; 0x28
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	3301      	adds	r3, #1
 800ac54:	61fb      	str	r3, [r7, #28]
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d9eb      	bls.n	800ac34 <FreeRTOS_inet_ntoa+0xb8>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d805      	bhi.n	800ac6e <FreeRTOS_inet_ntoa+0xf2>
        {
            pcBuffer[ uxIndex ] = '.';
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	4413      	add	r3, r2
 800ac68:	222e      	movs	r2, #46	; 0x2e
 800ac6a:	701a      	strb	r2, [r3, #0]
 800ac6c:	e004      	b.n	800ac78 <FreeRTOS_inet_ntoa+0xfc>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	4413      	add	r3, r2
 800ac74:	2200      	movs	r2, #0
 800ac76:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	62bb      	str	r3, [r7, #40]	; 0x28
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800ac7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac80:	3301      	adds	r3, #1
 800ac82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	d988      	bls.n	800ab9c <FreeRTOS_inet_ntoa+0x20>
    }

    return pcResult;
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3734      	adds	r7, #52	; 0x34
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	cccccccd 	.word	0xcccccccd

0800ac9c <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b02      	cmp	r3, #2
 800acae:	d106      	bne.n	800acbe <FreeRTOS_inet_ntop+0x22>
    {
        case FREERTOS_AF_INET:
            pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	68b8      	ldr	r0, [r7, #8]
 800acb6:	f000 f80a 	bl	800acce <FreeRTOS_inet_ntop4>
 800acba:	6178      	str	r0, [r7, #20]
            break;
 800acbc:	e002      	b.n	800acc4 <FreeRTOS_inet_ntop+0x28>

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800acbe:	2300      	movs	r3, #0
 800acc0:	617b      	str	r3, [r7, #20]
            break;
 800acc2:	bf00      	nop
    }

    return pcResult;
 800acc4:	697b      	ldr	r3, [r7, #20]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b088      	sub	sp, #32
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b0f      	cmp	r3, #15
 800acde:	d802      	bhi.n	800ace6 <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	61fb      	str	r3, [r7, #28]
 800ace4:	e00e      	b.n	800ad04 <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800ace6:	f107 0314 	add.w	r3, r7, #20
 800acea:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff ff3e 	bl	800ab7c <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800ad04:	69fb      	ldr	r3, [r7, #28]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <FreeRTOS_inet_pton4>:
 *
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
BaseType_t FreeRTOS_inet_pton4( const char * pcSource,
                                void * pvDestination )
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b08d      	sub	sp, #52	; 0x34
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
    const uint32_t ulDecimalBase = 10U;
 800ad18:	230a      	movs	r3, #10
 800ad1a:	61fb      	str	r3, [r7, #28]
    uint8_t ucOctet[ socketMAX_IP_ADDRESS_OCTETS ];
    uint32_t ulReturn = 0UL, ulValue;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60fb      	str	r3, [r7, #12]
    UBaseType_t uxOctetNumber;
    BaseType_t xResult = pdPASS;
 800ad20:	2301      	movs	r3, #1
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
    const char * pcIPAddress = pcSource;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	623b      	str	r3, [r7, #32]
    const void * pvCopySource;

    /* Translate "192.168.2.100" to a 32-bit number, network-endian. */
    for( uxOctetNumber = 0U; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 800ad28:	2300      	movs	r3, #0
 800ad2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad2c:	e043      	b.n	800adb6 <FreeRTOS_inet_pton4+0xa8>
    {
        ulValue = 0UL;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	62fb      	str	r3, [r7, #44]	; 0x2c

        while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800ad32:	e011      	b.n	800ad58 <FreeRTOS_inet_pton4+0x4a>
        {
            BaseType_t xChar;

            /* Move previous read characters into the next decimal
             * position. */
            ulValue *= ulDecimalBase;
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	69fa      	ldr	r2, [r7, #28]
 800ad38:	fb02 f303 	mul.w	r3, r2, r3
 800ad3c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Add the binary value of the ascii character. */
            xChar = ( BaseType_t ) pcIPAddress[ 0 ];
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	61bb      	str	r3, [r7, #24]
            xChar = xChar - ( BaseType_t ) '0';
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	3b30      	subs	r3, #48	; 0x30
 800ad48:	61bb      	str	r3, [r7, #24]
            ulValue += ( uint32_t ) xChar;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad4e:	4413      	add	r3, r2
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Move to next character in the string. */
            pcIPAddress++;
 800ad52:	6a3b      	ldr	r3, [r7, #32]
 800ad54:	3301      	adds	r3, #1
 800ad56:	623b      	str	r3, [r7, #32]
        while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800ad58:	6a3b      	ldr	r3, [r7, #32]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b2f      	cmp	r3, #47	; 0x2f
 800ad5e:	d903      	bls.n	800ad68 <FreeRTOS_inet_pton4+0x5a>
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2b39      	cmp	r3, #57	; 0x39
 800ad66:	d9e5      	bls.n	800ad34 <FreeRTOS_inet_pton4+0x26>
        }

        /* Check characters were read. */
        if( pcIPAddress == pcSource )
 800ad68:	6a3a      	ldr	r2, [r7, #32]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d101      	bne.n	800ad74 <FreeRTOS_inet_pton4+0x66>
        {
            xResult = pdFAIL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Check the value fits in an 8-bit number. */
        if( ulValue > 0xffUL )
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	2bff      	cmp	r3, #255	; 0xff
 800ad78:	d902      	bls.n	800ad80 <FreeRTOS_inet_pton4+0x72>
        {
            xResult = pdFAIL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad7e:	e014      	b.n	800adaa <FreeRTOS_inet_pton4+0x9c>
        }
        else
        {
            ucOctet[ uxOctetNumber ] = ( uint8_t ) ulValue;
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	b2d9      	uxtb	r1, r3
 800ad84:	f107 0210 	add.w	r2, r7, #16
 800ad88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8a:	4413      	add	r3, r2
 800ad8c:	460a      	mov	r2, r1
 800ad8e:	701a      	strb	r2, [r3, #0]

            /* Check the next character is as expected. */
            if( uxOctetNumber < ( socketMAX_IP_ADDRESS_OCTETS - 1U ) )
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d809      	bhi.n	800adaa <FreeRTOS_inet_pton4+0x9c>
            {
                if( *pcIPAddress != '.' )
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad9c:	d002      	beq.n	800ada4 <FreeRTOS_inet_pton4+0x96>
                {
                    xResult = pdFAIL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	627b      	str	r3, [r7, #36]	; 0x24
 800ada2:	e002      	b.n	800adaa <FreeRTOS_inet_pton4+0x9c>
                }
                else
                {
                    /* Move past the dot. */
                    pcIPAddress++;
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	3301      	adds	r3, #1
 800ada8:	623b      	str	r3, [r7, #32]
                }
            }
        }

        if( xResult == pdFAIL )
 800adaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adac:	2b00      	cmp	r3, #0
 800adae:	d006      	beq.n	800adbe <FreeRTOS_inet_pton4+0xb0>
    for( uxOctetNumber = 0U; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 800adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb2:	3301      	adds	r3, #1
 800adb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d9b8      	bls.n	800ad2e <FreeRTOS_inet_pton4+0x20>
 800adbc:	e000      	b.n	800adc0 <FreeRTOS_inet_pton4+0xb2>
        {
            /* No point going on. */
            break;
 800adbe:	bf00      	nop
        }
    }

    if( *pcIPAddress != ( char ) 0 )
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <FreeRTOS_inet_pton4+0xbe>
    {
        /* Expected the end of the string. */
        xResult = pdFAIL;
 800adc8:	2300      	movs	r3, #0
 800adca:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( uxOctetNumber != socketMAX_IP_ADDRESS_OCTETS )
 800adcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adce:	2b04      	cmp	r3, #4
 800add0:	d001      	beq.n	800add6 <FreeRTOS_inet_pton4+0xc8>
    {
        /* Didn't read enough octets. */
        xResult = pdFAIL;
 800add2:	2300      	movs	r3, #0
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xResult == pdPASS )
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	2b01      	cmp	r3, #1
 800adda:	d10b      	bne.n	800adf4 <FreeRTOS_inet_pton4+0xe6>
    {
        /* lint: ucOctet has been set because xResult == pdPASS. */
        ulReturn = FreeRTOS_inet_addr_quick( ucOctet[ 0 ], ucOctet[ 1 ], ucOctet[ 2 ], ucOctet[ 3 ] );
 800addc:	7cfb      	ldrb	r3, [r7, #19]
 800adde:	061a      	lsls	r2, r3, #24
 800ade0:	7cbb      	ldrb	r3, [r7, #18]
 800ade2:	041b      	lsls	r3, r3, #16
 800ade4:	431a      	orrs	r2, r3
 800ade6:	7c7b      	ldrb	r3, [r7, #17]
 800ade8:	021b      	lsls	r3, r3, #8
 800adea:	4313      	orrs	r3, r2
 800adec:	7c3a      	ldrb	r2, [r7, #16]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]
 800adf2:	e001      	b.n	800adf8 <FreeRTOS_inet_pton4+0xea>
    }
    else
    {
        ulReturn = 0UL;
 800adf4:	2300      	movs	r3, #0
 800adf6:	60fb      	str	r3, [r7, #12]
    }

    pvCopySource = ( const void * ) &ulReturn;
 800adf8:	f107 030c 	add.w	r3, r7, #12
 800adfc:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvDestination, pvCopySource, sizeof( ulReturn ) );
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	461a      	mov	r2, r3
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	601a      	str	r2, [r3, #0]

    return xResult;
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3734      	adds	r7, #52	; 0x34
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <FreeRTOS_inet_addr>:
 *                         (dotted decimal) format.
 *
 * @return The 32-bit representation of IP(v4) address.
 */
uint32_t FreeRTOS_inet_addr( const char * pcIPAddress )
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
    uint32_t ulReturn = 0UL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]

    /* inet_pton AF_INET target is a 4-byte 'struct in_addr'. */
    ( void ) FreeRTOS_inet_pton4( pcIPAddress, &( ulReturn ) );
 800ae22:	f107 030c 	add.w	r3, r7, #12
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff ff70 	bl	800ad0e <FreeRTOS_inet_pton4>

    return ulReturn;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket: The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
        }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            if( pxSocket->pxSocketSet != NULL )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d015      	beq.n	800ae74 <vSocketWakeUpUser+0x3c>
            {
                EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	0a1b      	lsrs	r3, r3, #8
 800ae4e:	f003 030f 	and.w	r3, r3, #15
 800ae52:	60fb      	str	r3, [r7, #12]

                if( xSelectBits != 0UL )
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00c      	beq.n	800ae74 <vSocketWakeUpUser+0x3c>
                {
                    pxSocket->xSocketBits |= xSelectBits;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	431a      	orrs	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	631a      	str	r2, [r3, #48]	; 0x30
                    ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68f9      	ldr	r1, [r7, #12]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7f9 fc2e 	bl	80046d0 <xEventGroupSetBits>
                }
            }

            pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	601a      	str	r2, [r3, #0]
        }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00b      	beq.n	800aea0 <vSocketWakeUpUser+0x68>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d007      	beq.n	800aea0 <vSocketWakeUpUser+0x68>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4610      	mov	r0, r2
 800ae9c:	f7f9 fc18 	bl	80046d0 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0UL;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
}
 800aea6:	bf00      	nop
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <xTCPTimerCheck>:
 * @param[in] xWillSleep: Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08a      	sub	sp, #40	; 0x28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800aeb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aebc:	627b      	str	r3, [r7, #36]	; 0x24
        TickType_t xNow = xTaskGetTickCount();
 800aebe:	f7fa fecb 	bl	8005c58 <xTaskGetTickCount>
 800aec2:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800aec4:	4b32      	ldr	r3, [pc, #200]	; (800af90 <xTCPTimerCheck+0xe0>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	623b      	str	r3, [r7, #32]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800aece:	4b31      	ldr	r3, [pc, #196]	; (800af94 <xTCPTimerCheck+0xe4>)
 800aed0:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800aed2:	4b31      	ldr	r3, [pc, #196]	; (800af98 <xTCPTimerCheck+0xe8>)
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800aed8:	4a2d      	ldr	r2, [pc, #180]	; (800af90 <xTCPTimerCheck+0xe0>)
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800aede:	6a3b      	ldr	r3, [r7, #32]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d14c      	bne.n	800af7e <xTCPTimerCheck+0xce>
        {
            xDelta = 1U;
 800aee4:	2301      	movs	r3, #1
 800aee6:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800aee8:	e049      	b.n	800af7e <xTCPTimerCheck+0xce>
        {
            pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7ff f8be 	bl	800a070 <vCastPointerTo_FreeRTOS_Socket_t>
 800aef4:	6138      	str	r0, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af02:	2b00      	cmp	r3, #0
 800af04:	d100      	bne.n	800af08 <xTCPTimerCheck+0x58>
            {
                continue;
 800af06:	e03a      	b.n	800af7e <xTCPTimerCheck+0xce>
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af0e:	461a      	mov	r2, r3
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	4293      	cmp	r3, r2
 800af14:	d20a      	bcs.n	800af2c <xTCPTimerCheck+0x7c>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	b29b      	uxth	r3, r3
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	b29a      	uxth	r2, r3
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800af2a:	e00b      	b.n	800af44 <xTCPTimerCheck+0x94>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2200      	movs	r2, #0
 800af30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                xRc = xTCPSocketCheck( pxSocket );
 800af34:	6938      	ldr	r0, [r7, #16]
 800af36:	f000 ff2d 	bl	800bd94 <xTCPSocketCheck>
 800af3a:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	da00      	bge.n	800af44 <xTCPTimerCheck+0x94>
                {
                    /* Continue because the socket was deleted. */
                    continue;
 800af42:	e01c      	b.n	800af7e <xTCPTimerCheck+0xce>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d008      	beq.n	800af5e <xTCPTimerCheck+0xae>
            {
                if( xWillSleep != pdFALSE )
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <xTCPTimerCheck+0xaa>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800af52:	6938      	ldr	r0, [r7, #16]
 800af54:	f7ff ff70 	bl	800ae38 <vSocketWakeUpUser>
 800af58:	e001      	b.n	800af5e <xTCPTimerCheck+0xae>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00a      	beq.n	800af7e <xTCPTimerCheck+0xce>
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af6e:	461a      	mov	r2, r3
 800af70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af72:	4293      	cmp	r3, r2
 800af74:	d903      	bls.n	800af7e <xTCPTimerCheck+0xce>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
        while( pxIterator != pxEnd )
 800af7e:	69fa      	ldr	r2, [r7, #28]
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	429a      	cmp	r2, r3
 800af84:	d1b1      	bne.n	800aeea <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800af88:	4618      	mov	r0, r3
 800af8a:	3728      	adds	r7, #40	; 0x28
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	2000bce8 	.word	0x2000bce8
 800af94:	2000c850 	.word	0x2000c850
 800af98:	2000c848 	.word	0x2000c848

0800af9c <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           uint32_t ulRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08a      	sub	sp, #40	; 0x28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	623b      	str	r3, [r7, #32]
 800afae:	2300      	movs	r3, #0
 800afb0:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800afb2:	4b1c      	ldr	r3, [pc, #112]	; (800b024 <pxTCPSocketLookup+0x88>)
 800afb4:	61bb      	str	r3, [r7, #24]

        /* Parameter not yet supported. */
        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	627b      	str	r3, [r7, #36]	; 0x24
 800afbc:	e024      	b.n	800b008 <pxTCPSocketLookup+0x6c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff f854 	bl	800a070 <vCastPointerTo_FreeRTOS_Socket_t>
 800afc8:	6178      	str	r0, [r7, #20]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d115      	bne.n	800b002 <pxTCPSocketLookup+0x66>
            {
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d102      	bne.n	800afe6 <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	61fb      	str	r3, [r7, #28]
 800afe4:	e00d      	b.n	800b002 <pxTCPSocketLookup+0x66>
                }
                else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	b29b      	uxth	r3, r3
 800afee:	429a      	cmp	r2, r3
 800aff0:	d107      	bne.n	800b002 <pxTCPSocketLookup+0x66>
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d102      	bne.n	800b002 <pxTCPSocketLookup+0x66>
                {
                    /* For sockets not in listening mode, find a match with
                     * xLocalPort, ulRemoteIP AND xRemotePort. */
                    pxResult = pxSocket;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	623b      	str	r3, [r7, #32]
                    break;
 800b000:	e006      	b.n	800b010 <pxTCPSocketLookup+0x74>
             pxIterator = listGET_NEXT( pxIterator ) )
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	627b      	str	r3, [r7, #36]	; 0x24
        for( pxIterator = listGET_NEXT( pxEnd );
 800b008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d1d6      	bne.n	800afbe <pxTCPSocketLookup+0x22>
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d101      	bne.n	800b01a <pxTCPSocketLookup+0x7e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	623b      	str	r3, [r7, #32]
        }

        return pxResult;
 800b01a:	6a3b      	ldr	r3, [r7, #32]
    }
 800b01c:	4618      	mov	r0, r3
 800b01e:	3728      	adds	r7, #40	; 0x28
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	2000c850 	.word	0x2000c850

0800b028 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800b028:	b580      	push	{r7, lr}
 800b02a:	b086      	sub	sp, #24
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d025      	beq.n	800b084 <prvTCPCreateStream+0x5c>
        {
            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b03c:	617b      	str	r3, [r7, #20]

            if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b042:	2b00      	cmp	r3, #0
 800b044:	d10c      	bne.n	800b060 <prvTCPCreateStream+0x38>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b04a:	4613      	mov	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4413      	add	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	461a      	mov	r2, r3
 800b054:	4b32      	ldr	r3, [pc, #200]	; (800b120 <prvTCPCreateStream+0xf8>)
 800b056:	fba3 2302 	umull	r2, r3, r3, r2
 800b05a:	095a      	lsrs	r2, r3, #5
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	665a      	str	r2, [r3, #100]	; 0x64
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b064:	2b00      	cmp	r3, #0
 800b066:	d110      	bne.n	800b08a <prvTCPCreateStream+0x62>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	011b      	lsls	r3, r3, #4
 800b074:	461a      	mov	r2, r3
 800b076:	4b2a      	ldr	r3, [pc, #168]	; (800b120 <prvTCPCreateStream+0xf8>)
 800b078:	fba3 2302 	umull	r2, r3, r3, r2
 800b07c:	095a      	lsrs	r2, r3, #5
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	669a      	str	r2, [r3, #104]	; 0x68
 800b082:	e002      	b.n	800b08a <prvTCPCreateStream+0x62>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b088:	617b      	str	r3, [r7, #20]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	3304      	adds	r3, #4
 800b08e:	617b      	str	r3, [r7, #20]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f023 0303 	bic.w	r3, r3, #3
 800b096:	617b      	str	r3, [r7, #20]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	3314      	adds	r3, #20
 800b09c:	613b      	str	r3, [r7, #16]

        pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 800b09e:	6938      	ldr	r0, [r7, #16]
 800b0a0:	f7fb ffba 	bl	8007018 <pvPortMalloc>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff f803 	bl	800a0b2 <vCastPointerTo_StreamBuffer_t>
 800b0ac:	60f8      	str	r0, [r7, #12]

        if( pxBuffer == NULL )
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10e      	bne.n	800b0d2 <prvTCPCreateStream+0xaa>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800b0b4:	481b      	ldr	r0, [pc, #108]	; (800b124 <prvTCPCreateStream+0xfc>)
 800b0b6:	f7f5 fc49 	bl	800094c <vLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b0c0:	f043 0308 	orr.w	r3, r3, #8
 800b0c4:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800b0c8:	2108      	movs	r1, #8
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 fd74 	bl	800cbb8 <vTCPStateChange>
 800b0d0:	e020      	b.n	800b114 <prvTCPCreateStream+0xec>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800b0d2:	2214      	movs	r2, #20
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f006 fb67 	bl	80117aa <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800b0e2:	4b11      	ldr	r3, [pc, #68]	; (800b128 <prvTCPCreateStream+0x100>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00a      	beq.n	800b100 <prvTCPCreateStream+0xd8>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <prvTCPCreateStream+0xcc>
 800b0f0:	2152      	movs	r1, #82	; 0x52
 800b0f2:	e000      	b.n	800b0f6 <prvTCPCreateStream+0xce>
 800b0f4:	2154      	movs	r1, #84	; 0x54
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	480c      	ldr	r0, [pc, #48]	; (800b12c <prvTCPCreateStream+0x104>)
 800b0fc:	f7f5 fc26 	bl	800094c <vLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <prvTCPCreateStream+0xe6>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	675a      	str	r2, [r3, #116]	; 0x74
 800b10c:	e002      	b.n	800b114 <prvTCPCreateStream+0xec>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	679a      	str	r2, [r3, #120]	; 0x78
            }
        }

        return pxBuffer;
 800b114:	68fb      	ldr	r3, [r7, #12]
    }
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	51eb851f 	.word	0x51eb851f
 800b124:	080141e4 	.word	0x080141e4
 800b128:	2000bd10 	.word	0x2000bd10
 800b12c:	08014208 	.word	0x08014208

0800b130 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800b130:	b5b0      	push	{r4, r5, r7, lr}
 800b132:	b08c      	sub	sp, #48	; 0x30
 800b134:	af04      	add	r7, sp, #16
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b142:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	61bb      	str	r3, [r7, #24]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10a      	bne.n	800b164 <lTCPAddRxdata+0x34>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800b14e:	2101      	movs	r1, #1
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff ff69 	bl	800b028 <prvTCPCreateStream>
 800b156:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d102      	bne.n	800b164 <lTCPAddRxdata+0x34>
            {
                xResult = -1;
 800b15e:	f04f 33ff 	mov.w	r3, #4294967295
 800b162:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	2b00      	cmp	r3, #0
 800b168:	db5c      	blt.n	800b224 <lTCPAddRxdata+0xf4>
                        pcData = NULL;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	68b9      	ldr	r1, [r7, #8]
 800b170:	69f8      	ldr	r0, [r7, #28]
 800b172:	f000 fb45 	bl	800b800 <uxStreamBufferAdd>
 800b176:	4603      	mov	r3, r0
 800b178:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    if( xResult != ( int32_t ) ulByteCount )
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d013      	beq.n	800b1aa <lTCPAddRxdata+0x7a>
                    {
                        FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	681c      	ldr	r4, [r3, #0]
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	689d      	ldr	r5, [r3, #8]
 800b18a:	69f8      	ldr	r0, [r7, #28]
 800b18c:	f7fe ff48 	bl	800a020 <uxStreamBufferFrontSpace>
 800b190:	4602      	mov	r2, r0
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	9303      	str	r3, [sp, #12]
 800b198:	9202      	str	r2, [sp, #8]
 800b19a:	9501      	str	r5, [sp, #4]
 800b19c:	9400      	str	r4, [sp, #0]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	68b9      	ldr	r1, [r7, #8]
 800b1a4:	4822      	ldr	r0, [pc, #136]	; (800b230 <lTCPAddRxdata+0x100>)
 800b1a6:	f7f5 fbd1 	bl	800094c <vLoggingPrintf>
                                                 ( UBaseType_t ) pxStream->uxFront ) );
                    }
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d139      	bne.n	800b224 <lTCPAddRxdata+0xf4>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    /* See if running out of space. */
                    if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d11f      	bne.n	800b200 <lTCPAddRxdata+0xd0>
                    {
                        size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe ff2b 	bl	800a020 <uxStreamBufferFrontSpace>
 800b1ca:	6178      	str	r0, [r7, #20]

                        if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d814      	bhi.n	800b200 <lTCPAddRxdata+0xd0>
                        {
                            pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                            pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b1ea:	f043 0301 	orr.w	r3, r3, #1
 800b1ee:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                            /* bLowWater was reached, send the changed window size. */
                            pxSocket->u.xTCP.usTimeout = 1U;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800b1fa:	2006      	movs	r0, #6
 800b1fc:	f7fe fa16 	bl	800962c <xSendEventToIPTask>
                        }
                    }

                    /* New incoming data is available, wake up the user.   User's
                     * semaphores will be set just before the IP-task goes asleep. */
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f043 0201 	orr.w	r2, r3, #1
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d005      	beq.n	800b224 <lTCPAddRxdata+0xf4>
                            {
                                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	601a      	str	r2, [r3, #0]
                    #endif
                }
            }
        }

        return xResult;
 800b224:	69bb      	ldr	r3, [r7, #24]
    }
 800b226:	4618      	mov	r0, r3
 800b228:	3720      	adds	r7, #32
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bdb0      	pop	{r4, r5, r7, pc}
 800b22e:	bf00      	nop
 800b230:	08014244 	.word	0x08014244

0800b234 <FreeRTOS_tx_space>:
 * @param[in] xSocket: the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b246:	2b06      	cmp	r3, #6
 800b248:	d003      	beq.n	800b252 <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b24a:	f06f 0315 	mvn.w	r3, #21
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	e00e      	b.n	800b270 <FreeRTOS_tx_space+0x3c>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b256:	2b00      	cmp	r3, #0
 800b258:	d007      	beq.n	800b26a <FreeRTOS_tx_space+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe feca 	bl	8009ff8 <uxStreamBufferGetSpace>
 800b264:	4603      	mov	r3, r0
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	e002      	b.n	800b270 <FreeRTOS_tx_space+0x3c>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26e:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800b270:	68fb      	ldr	r3, [r7, #12]
    }
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b28c:	2b06      	cmp	r3, #6
 800b28e:	d003      	beq.n	800b298 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b290:	f06f 0315 	mvn.w	r3, #21
 800b294:	60fb      	str	r3, [r7, #12]
 800b296:	e00d      	b.n	800b2b4 <FreeRTOS_rx_size+0x3a>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d007      	beq.n	800b2b0 <FreeRTOS_rx_size+0x36>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe fecf 	bl	800a048 <uxStreamBufferGetSize>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	60fb      	str	r3, [r7, #12]
 800b2ae:	e001      	b.n	800b2b4 <FreeRTOS_rx_size+0x3a>
        }
        else
        {
            xReturn = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
    }
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800b2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2c4:	b095      	sub	sp, #84	; 0x54
 800b2c6:	af06      	add	r7, sp, #24
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	633b      	str	r3, [r7, #48]	; 0x30
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800b2cc:	f006 fa04 	bl	80116d8 <uxGetMinimumFreeNetworkBuffers>
 800b2d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800b2d2:	f006 f9f5 	bl	80116c0 <uxGetNumberOfFreeNetworkBuffers>
 800b2d6:	62b8      	str	r0, [r7, #40]	; 0x28

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800b2d8:	4b5a      	ldr	r3, [pc, #360]	; (800b444 <vTCPNetStat+0x184>)
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e0:	d003      	beq.n	800b2ea <vTCPNetStat+0x2a>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800b2e2:	4859      	ldr	r0, [pc, #356]	; (800b448 <vTCPNetStat+0x188>)
 800b2e4:	f7f5 fb32 	bl	800094c <vLoggingPrintf>
                               ( UBaseType_t ) count,
                               ( UBaseType_t ) uxMinimum,
                               ( UBaseType_t ) uxCurrent,
                               ( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800b2e8:	e0a7      	b.n	800b43a <vTCPNetStat+0x17a>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800b2ea:	4b58      	ldr	r3, [pc, #352]	; (800b44c <vTCPNetStat+0x18c>)
 800b2ec:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800b2ee:	4b58      	ldr	r3, [pc, #352]	; (800b450 <vTCPNetStat+0x190>)
 800b2f0:	623b      	str	r3, [r7, #32]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800b2f2:	4858      	ldr	r0, [pc, #352]	; (800b454 <vTCPNetStat+0x194>)
 800b2f4:	f7f5 fb2a 	bl	800094c <vLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b2f8:	4b52      	ldr	r3, [pc, #328]	; (800b444 <vTCPNetStat+0x184>)
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b2fe:	e073      	b.n	800b3e8 <vTCPNetStat+0x128>
                const FreeRTOS_Socket_t * pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	4618      	mov	r0, r3
 800b306:	f7fe febe 	bl	800a086 <vCastConstPointerTo_FreeRTOS_Socket_t>
 800b30a:	61f8      	str	r0, [r7, #28]
                    TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800b30c:	f7fa fca4 	bl	8005c58 <xTaskGetTickCount>
 800b310:	4602      	mov	r2, r0
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	61bb      	str	r3, [r7, #24]
                char ucChildText[ 16 ] = "";
 800b31a:	2300      	movs	r3, #0
 800b31c:	607b      	str	r3, [r7, #4]
 800b31e:	f107 0308 	add.w	r3, r7, #8
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	605a      	str	r2, [r3, #4]
 800b328:	609a      	str	r2, [r3, #8]
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b330:	2b01      	cmp	r3, #1
 800b332:	d11e      	bne.n	800b372 <vTCPNetStat+0xb2>
                                                         ( int32_t ) pxSocket->u.xTCP.usChildCount,
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800b33a:	461a      	mov	r2, r3
                                                         ( int32_t ) pxSocket->u.xTCP.usBacklog );
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800b342:	1d38      	adds	r0, r7, #4
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	4613      	mov	r3, r2
 800b348:	4a43      	ldr	r2, [pc, #268]	; (800b458 <vTCPNetStat+0x198>)
 800b34a:	2110      	movs	r1, #16
 800b34c:	f006 ff46 	bl	80121dc <sniprintf>
 800b350:	6178      	str	r0, [r7, #20]
                    configASSERT( copied_len >= 0 );
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	da04      	bge.n	800b362 <vTCPNetStat+0xa2>
 800b358:	4940      	ldr	r1, [pc, #256]	; (800b45c <vTCPNetStat+0x19c>)
 800b35a:	f241 1064 	movw	r0, #4452	; 0x1164
 800b35e:	f7f5 fc2b 	bl	8000bb8 <vAssertCalled>
                    configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) );
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b0f      	cmp	r3, #15
 800b366:	dd04      	ble.n	800b372 <vTCPNetStat+0xb2>
 800b368:	493c      	ldr	r1, [pc, #240]	; (800b45c <vTCPNetStat+0x19c>)
 800b36a:	f241 1065 	movw	r0, #4453	; 0x1165
 800b36e:	f7f5 fc23 	bl	8000bb8 <vAssertCalled>
                FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b376:	4698      	mov	r8, r3
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b380:	4699      	mov	r9, r3
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b386:	2b00      	cmp	r3, #0
 800b388:	bf14      	ite	ne
 800b38a:	2301      	movne	r3, #1
 800b38c:	2300      	moveq	r3, #0
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	461d      	mov	r5, r3
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b396:	2b00      	cmp	r3, #0
 800b398:	bf14      	ite	ne
 800b39a:	2301      	movne	r3, #1
 800b39c:	2300      	moveq	r3, #0
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	461e      	mov	r6, r3
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f003 fab7 	bl	800e91c <FreeRTOS_GetTCPStateName>
 800b3ae:	4601      	mov	r1, r0
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	4a2b      	ldr	r2, [pc, #172]	; (800b460 <vTCPNetStat+0x1a0>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	bf28      	it	cs
 800b3b8:	4613      	movcs	r3, r2
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	1d3a      	adds	r2, r7, #4
 800b3c4:	9205      	str	r2, [sp, #20]
 800b3c6:	9004      	str	r0, [sp, #16]
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	9102      	str	r1, [sp, #8]
 800b3cc:	9601      	str	r6, [sp, #4]
 800b3ce:	9500      	str	r5, [sp, #0]
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	4641      	mov	r1, r8
 800b3d6:	4823      	ldr	r0, [pc, #140]	; (800b464 <vTCPNetStat+0x1a4>)
 800b3d8:	f7f5 fab8 	bl	800094c <vLoggingPrintf>
                count++;
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	3301      	adds	r3, #1
 800b3e0:	633b      	str	r3, [r7, #48]	; 0x30
                 pxIterator = listGET_NEXT( pxIterator ) )
 800b3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	637b      	str	r3, [r7, #52]	; 0x34
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b3e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d187      	bne.n	800b300 <vTCPNetStat+0x40>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800b3f0:	4b1d      	ldr	r3, [pc, #116]	; (800b468 <vTCPNetStat+0x1a8>)
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b3f6:	e014      	b.n	800b422 <vTCPNetStat+0x162>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 800b3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	021b      	lsls	r3, r3, #8
 800b400:	b29a      	uxth	r2, r3
 800b402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	b29b      	uxth	r3, r3
 800b40a:	4313      	orrs	r3, r2
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	4619      	mov	r1, r3
 800b410:	4816      	ldr	r0, [pc, #88]	; (800b46c <vTCPNetStat+0x1ac>)
 800b412:	f7f5 fa9b 	bl	800094c <vLoggingPrintf>
                count++;
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	3301      	adds	r3, #1
 800b41a:	633b      	str	r3, [r7, #48]	; 0x30
                 pxIterator = listGET_NEXT( pxIterator ) )
 800b41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	637b      	str	r3, [r7, #52]	; 0x34
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800b422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b424:	6a3b      	ldr	r3, [r7, #32]
 800b426:	429a      	cmp	r2, r3
 800b428:	d1e6      	bne.n	800b3f8 <vTCPNetStat+0x138>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %lu sockets %lu < %lu < %ld buffers free\n",
 800b42a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b42c:	233c      	movs	r3, #60	; 0x3c
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b434:	480e      	ldr	r0, [pc, #56]	; (800b470 <vTCPNetStat+0x1b0>)
 800b436:	f7f5 fa89 	bl	800094c <vLoggingPrintf>
    }
 800b43a:	bf00      	nop
 800b43c:	373c      	adds	r7, #60	; 0x3c
 800b43e:	46bd      	mov	sp, r7
 800b440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b444:	2000c848 	.word	0x2000c848
 800b448:	0801428c 	.word	0x0801428c
 800b44c:	2000c850 	.word	0x2000c850
 800b450:	2000c864 	.word	0x2000c864
 800b454:	080142a8 	.word	0x080142a8
 800b458:	080142f0 	.word	0x080142f0
 800b45c:	08013f2c 	.word	0x08013f2c
 800b460:	000f423f 	.word	0x000f423f
 800b464:	080142f8 	.word	0x080142f8
 800b468:	2000c85c 	.word	0x2000c85c
 800b46c:	08014328 	.word	0x08014328
 800b470:	08014338 	.word	0x08014338

0800b474 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet: The socket-set which is to be waited on for change.
 */
    void vSocketSelect( SocketSelect_t * pxSocketSet )
    {
 800b474:	b580      	push	{r7, lr}
 800b476:	b08c      	sub	sp, #48	; 0x30
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800b47c:	2301      	movs	r3, #1
 800b47e:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	627b      	str	r3, [r7, #36]	; 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800b484:	2300      	movs	r3, #0
 800b486:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b488:	e0e4      	b.n	800b654 <vSocketSelect+0x1e0>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800b48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <vSocketSelect+0x22>
            {
                pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 800b490:	4b85      	ldr	r3, [pc, #532]	; (800b6a8 <vSocketSelect+0x234>)
 800b492:	61fb      	str	r3, [r7, #28]
 800b494:	e001      	b.n	800b49a <vSocketSelect+0x26>
            }

            #if ipconfigUSE_TCP == 1
                else
                {
                    pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800b496:	4b85      	ldr	r3, [pc, #532]	; (800b6ac <vSocketSelect+0x238>)
 800b498:	61fb      	str	r3, [r7, #28]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	623b      	str	r3, [r7, #32]
 800b4a0:	e0d0      	b.n	800b644 <vSocketSelect+0x1d0>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe fde2 	bl	800a070 <vCastPointerTo_FreeRTOS_Socket_t>
 800b4ac:	60b8      	str	r0, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	f040 80c1 	bne.w	800b63c <vSocketSelect+0x1c8>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	62bb      	str	r3, [r7, #40]	; 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b4c4:	2b06      	cmp	r3, #6
 800b4c6:	f040 80a3 	bne.w	800b610 <vSocketSelect+0x19c>
                    {
                        /* Check if the socket has already been accepted by the
                         * owner.  If not, it is useless to return it from a
                         * select(). */
                        BaseType_t bAccepted = pdFALSE;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	61bb      	str	r3, [r7, #24]

                        if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d109      	bne.n	800b4f2 <vSocketSelect+0x7e>
                        {
                            if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4e4:	f003 0302 	and.w	r3, r3, #2
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <vSocketSelect+0x7e>
                            {
                                bAccepted = pdTRUE;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	61bb      	str	r3, [r7, #24]
                            }
                        }

                        /* Is the set owner interested in READ events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d038      	beq.n	800b570 <vSocketSelect+0xfc>
                        {
                            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b504:	2b01      	cmp	r3, #1
 800b506:	d111      	bne.n	800b52c <vSocketSelect+0xb8>
                            {
                                if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d02f      	beq.n	800b570 <vSocketSelect+0xfc>
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d026      	beq.n	800b570 <vSocketSelect+0xfc>
                                {
                                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	f043 0301 	orr.w	r3, r3, #1
 800b528:	62bb      	str	r3, [r7, #40]	; 0x28
 800b52a:	e021      	b.n	800b570 <vSocketSelect+0xfc>
                                }
                            }
                            else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b532:	f003 0308 	and.w	r3, r3, #8
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00c      	beq.n	800b556 <vSocketSelect+0xe2>
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b542:	f003 0302 	and.w	r3, r3, #2
 800b546:	b2db      	uxtb	r3, r3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d004      	beq.n	800b556 <vSocketSelect+0xe2>
                            {
                                /* This socket has the re-use flag. After connecting it turns into
                                 * a connected socket. Set the READ event, so that accept() will be called. */
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	f043 0301 	orr.w	r3, r3, #1
 800b552:	62bb      	str	r3, [r7, #40]	; 0x28
 800b554:	e00c      	b.n	800b570 <vSocketSelect+0xfc>
                            }
                            else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d009      	beq.n	800b570 <vSocketSelect+0xfc>
 800b55c:	68b8      	ldr	r0, [r7, #8]
 800b55e:	f7ff fe8c 	bl	800b27a <FreeRTOS_rx_size>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	dd03      	ble.n	800b570 <vSocketSelect+0xfc>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	f043 0301 	orr.w	r3, r3, #1
 800b56e:	62bb      	str	r3, [r7, #40]	; 0x28
                                /* Nothing. */
                            }
                        }

                        /* Is the set owner interested in EXCEPTION events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	f003 0304 	and.w	r3, r3, #4
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00d      	beq.n	800b598 <vSocketSelect+0x124>
                        {
                            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b582:	2b08      	cmp	r3, #8
 800b584:	d004      	beq.n	800b590 <vSocketSelect+0x11c>
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d103      	bne.n	800b598 <vSocketSelect+0x124>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	f043 0304 	orr.w	r3, r3, #4
 800b596:	62bb      	str	r3, [r7, #40]	; 0x28
                            }
                        }

                        /* Is the set owner interested in WRITE events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59c:	f003 0302 	and.w	r3, r3, #2
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d043      	beq.n	800b62c <vSocketSelect+0x1b8>
                        {
                            BaseType_t bMatch = pdFALSE;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	617b      	str	r3, [r7, #20]

                            if( bAccepted != 0 )
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d007      	beq.n	800b5be <vSocketSelect+0x14a>
                            {
                                if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800b5ae:	68b8      	ldr	r0, [r7, #8]
 800b5b0:	f7ff fe40 	bl	800b234 <FreeRTOS_tx_space>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	dd01      	ble.n	800b5be <vSocketSelect+0x14a>
                                {
                                    bMatch = pdTRUE;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch == pdFALSE )
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d11d      	bne.n	800b600 <vSocketSelect+0x18c>
                            {
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5ca:	f003 0308 	and.w	r3, r3, #8
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d015      	beq.n	800b600 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800b5da:	2b04      	cmp	r3, #4
 800b5dc:	d910      	bls.n	800b600 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5e4:	f003 0310 	and.w	r3, r3, #16
 800b5e8:	b2db      	uxtb	r3, r3
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d108      	bne.n	800b600 <vSocketSelect+0x18c>
                                {
                                    pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b5f4:	f043 0310 	orr.w	r3, r3, #16
 800b5f8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                                    bMatch = pdTRUE;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch != pdFALSE )
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d012      	beq.n	800b62c <vSocketSelect+0x1b8>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800b606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b608:	f043 0302 	orr.w	r3, r3, #2
 800b60c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b60e:	e00d      	b.n	800b62c <vSocketSelect+0x1b8>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d007      	beq.n	800b62c <vSocketSelect+0x1b8>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800b620:	2b00      	cmp	r3, #0
 800b622:	d003      	beq.n	800b62c <vSocketSelect+0x1b8>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b626:	f043 0301 	orr.w	r3, r3, #1
 800b62a:	62bb      	str	r3, [r7, #40]	; 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b630:	631a      	str	r2, [r3, #48]	; 0x30

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800b632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b636:	4313      	orrs	r3, r2
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
 800b63a:	e000      	b.n	800b63e <vSocketSelect+0x1ca>
                    continue;
 800b63c:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800b644:	6a3a      	ldr	r2, [r7, #32]
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	429a      	cmp	r2, r3
 800b64a:	f47f af2a 	bne.w	800b4a2 <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	3301      	adds	r3, #1
 800b652:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	429a      	cmp	r2, r3
 800b65a:	f77f af16 	ble.w	800b48a <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2100      	movs	r1, #0
 800b664:	4618      	mov	r0, r3
 800b666:	f7f9 f805 	bl	8004674 <xEventGroupClearBits>
 800b66a:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	43da      	mvns	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	4013      	ands	r3, r2
 800b674:	f003 030f 	and.w	r3, r3, #15
 800b678:	60fb      	str	r3, [r7, #12]
                 * and cleared in FreeRTOS_select(). */
                xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
            }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d005      	beq.n	800b68c <vSocketSelect+0x218>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68f9      	ldr	r1, [r7, #12]
 800b686:	4618      	mov	r0, r3
 800b688:	f7f8 fff4 	bl	8004674 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b692:	f043 0310 	orr.w	r3, r3, #16
 800b696:	4619      	mov	r1, r3
 800b698:	4610      	mov	r0, r2
 800b69a:	f7f9 f819 	bl	80046d0 <xEventGroupSetBits>
    }
 800b69e:	bf00      	nop
 800b6a0:	3730      	adds	r7, #48	; 0x30
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	2000c864 	.word	0x2000c864
 800b6ac:	2000c850 	.word	0x2000c850

0800b6b0 <FreeRTOS_min_uint32>:
        {
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	bf28      	it	cs
 800b6c2:	4613      	movcs	r3, r2
        }
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <uxStreamBufferSpace>:
    {
 800b6d0:	b480      	push	{r7}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	691a      	ldr	r2, [r3, #16]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	441a      	add	r2, r3
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d304      	bcc.n	800b700 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	617b      	str	r3, [r7, #20]
        return uxCount;
 800b700:	697b      	ldr	r3, [r7, #20]
    }
 800b702:	4618      	mov	r0, r3
 800b704:	371c      	adds	r7, #28
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <uxStreamBufferDistance>:
    {
 800b70e:	b480      	push	{r7}
 800b710:	b087      	sub	sp, #28
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	691a      	ldr	r2, [r3, #16]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	441a      	add	r2, r3
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d304      	bcc.n	800b73c <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	617b      	str	r3, [r7, #20]
        return uxCount;
 800b73c:	697b      	ldr	r3, [r7, #20]
    }
 800b73e:	4618      	mov	r0, r3
 800b740:	371c      	adds	r7, #28
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <uxStreamBufferGetSpace>:
    {
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b084      	sub	sp, #16
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	68f9      	ldr	r1, [r7, #12]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7ff ffb4 	bl	800b6d0 <uxStreamBufferSpace>
 800b768:	4603      	mov	r3, r0
    }
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <uxStreamBufferGetSize>:
    {
 800b772:	b580      	push	{r7, lr}
 800b774:	b084      	sub	sp, #16
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	68b9      	ldr	r1, [r7, #8]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7ff ffbf 	bl	800b70e <uxStreamBufferDistance>
 800b790:	4603      	mov	r3, r0
    }
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <xStreamBufferLessThenEqual>:
                                                             const size_t uxLeft,
                                                             const size_t uxRight );
    static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * pxBuffer,
                                                             const size_t uxLeft,
                                                             const size_t uxRight )
    {
 800b79a:	b480      	push	{r7}
 800b79c:	b087      	sub	sp, #28
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	60b9      	str	r1, [r7, #8]
 800b7a4:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;
        size_t uxTail = pxBuffer->uxTail;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	613b      	str	r3, [r7, #16]

        /* Returns true if ( uxLeft < uxRight ) */
        if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U ) ) != 0U )
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d201      	bcs.n	800b7b8 <xStreamBufferLessThenEqual+0x1e>
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	e000      	b.n	800b7ba <xStreamBufferLessThenEqual+0x20>
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	6879      	ldr	r1, [r7, #4]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	4299      	cmp	r1, r3
 800b7c0:	d201      	bcs.n	800b7c6 <xStreamBufferLessThenEqual+0x2c>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e000      	b.n	800b7c8 <xStreamBufferLessThenEqual+0x2e>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d009      	beq.n	800b7e0 <xStreamBufferLessThenEqual+0x46>
        {
            if( uxRight < uxTail )
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d202      	bcs.n	800b7da <xStreamBufferLessThenEqual+0x40>
            {
                xReturn = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	e00b      	b.n	800b7f2 <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	e008      	b.n	800b7f2 <xStreamBufferLessThenEqual+0x58>
            }
        }
        else
        {
            if( uxLeft <= uxRight )
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d802      	bhi.n	800b7ee <xStreamBufferLessThenEqual+0x54>
            {
                xReturn = pdTRUE;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	617b      	str	r3, [r7, #20]
 800b7ec:	e001      	b.n	800b7f2 <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
            }
        }

        return xReturn;
 800b7f2:	697b      	ldr	r3, [r7, #20]
    }
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	371c      	adds	r7, #28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          const uint8_t * pucData,
                          size_t uxByteCount )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	603b      	str	r3, [r7, #0]
    size_t uxSpace, uxNextHead, uxFirst;
    size_t uxCount = uxByteCount;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	617b      	str	r3, [r7, #20]

    uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f7ff ff99 	bl	800b74a <uxStreamBufferGetSpace>
 800b818:	61f8      	str	r0, [r7, #28]

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800b81a:	69fa      	ldr	r2, [r7, #28]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d904      	bls.n	800b82c <uxStreamBufferAdd+0x2c>
    {
        uxSpace -= uxOffset;
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	61fb      	str	r3, [r7, #28]
 800b82a:	e001      	b.n	800b830 <uxStreamBufferAdd+0x30>
    }
    else
    {
        uxSpace = 0U;
 800b82c:	2300      	movs	r3, #0
 800b82e:	61fb      	str	r3, [r7, #28]
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800b830:	6979      	ldr	r1, [r7, #20]
 800b832:	69f8      	ldr	r0, [r7, #28]
 800b834:	f7ff ff3c 	bl	800b6b0 <FreeRTOS_min_uint32>
 800b838:	6178      	str	r0, [r7, #20]

    if( uxCount != 0U )
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d05a      	beq.n	800b8f6 <uxStreamBufferAdd+0xf6>
    {
        uxNextHead = pxBuffer->uxHead;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00d      	beq.n	800b868 <uxStreamBufferAdd+0x68>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800b84c:	69ba      	ldr	r2, [r7, #24]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	4413      	add	r3, r2
 800b852:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d304      	bcc.n	800b868 <uxStreamBufferAdd+0x68>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	69ba      	ldr	r2, [r7, #24]
 800b864:	1ad3      	subs	r3, r2, r3
 800b866:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d022      	beq.n	800b8b4 <uxStreamBufferAdd+0xb4>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	691a      	ldr	r2, [r3, #16]
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	6979      	ldr	r1, [r7, #20]
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff ff19 	bl	800b6b0 <FreeRTOS_min_uint32>
 800b87e:	6138      	str	r0, [r7, #16]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	3310      	adds	r3, #16
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	3304      	adds	r3, #4
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	6879      	ldr	r1, [r7, #4]
 800b88e:	4618      	mov	r0, r3
 800b890:	f005 ff67 	bl	8011762 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d90b      	bls.n	800b8b4 <uxStreamBufferAdd+0xb4>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f103 0014 	add.w	r0, r3, #20
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	18d1      	adds	r1, r2, r3
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	f005 ff57 	bl	8011762 <memcpy>
            }
        }

        if( uxOffset == 0U )
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d110      	bne.n	800b8dc <uxStreamBufferAdd+0xdc>
        {
            /* ( uxOffset == 0 ) means: write at uxHead position */
            uxNextHead += uxCount;
 800b8ba:	69ba      	ldr	r2, [r7, #24]
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	4413      	add	r3, r2
 800b8c0:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	69ba      	ldr	r2, [r7, #24]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d304      	bcc.n	800b8d6 <uxStreamBufferAdd+0xd6>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	69ba      	ldr	r2, [r7, #24]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxHead = uxNextHead;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	69ba      	ldr	r2, [r7, #24]
 800b8da:	609a      	str	r2, [r3, #8]
        }

        if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f7ff ff58 	bl	800b79a <xStreamBufferLessThenEqual>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <uxStreamBufferAdd+0xf6>
        {
            /* Advance the front pointer */
            pxBuffer->uxFront = uxNextHead;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	60da      	str	r2, [r3, #12]
        }
    }

    return uxCount;
 800b8f6:	697b      	ldr	r3, [r7, #20]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3720      	adds	r7, #32
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          uint8_t * pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	603b      	str	r3, [r7, #0]
    size_t uxSize, uxCount, uxFirst, uxNextTail;

    /* How much data is available? */
    uxSize = uxStreamBufferGetSize( pxBuffer );
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f7ff ff2f 	bl	800b772 <uxStreamBufferGetSize>
 800b914:	61f8      	str	r0, [r7, #28]

    if( uxSize > uxOffset )
 800b916:	69fa      	ldr	r2, [r7, #28]
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d904      	bls.n	800b928 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800b91e:	69fa      	ldr	r2, [r7, #28]
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	61fb      	str	r3, [r7, #28]
 800b926:	e001      	b.n	800b92c <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800b928:	2300      	movs	r3, #0
 800b92a:	61fb      	str	r3, [r7, #28]
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	69f8      	ldr	r0, [r7, #28]
 800b930:	f7ff febe 	bl	800b6b0 <FreeRTOS_min_uint32>
 800b934:	6178      	str	r0, [r7, #20]

    if( uxCount > 0U )
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d050      	beq.n	800b9de <uxStreamBufferGet+0xde>
    {
        uxNextTail = pxBuffer->uxTail;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00d      	beq.n	800b964 <uxStreamBufferGet+0x64>
        {
            uxNextTail += uxOffset;
 800b948:	69ba      	ldr	r2, [r7, #24]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	4413      	add	r3, r2
 800b94e:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	69ba      	ldr	r2, [r7, #24]
 800b956:	429a      	cmp	r2, r3
 800b958:	d304      	bcc.n	800b964 <uxStreamBufferGet+0x64>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d022      	beq.n	800b9b0 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	691a      	ldr	r2, [r3, #16]
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	6979      	ldr	r1, [r7, #20]
 800b974:	4618      	mov	r0, r3
 800b976:	f7ff fe9b 	bl	800b6b0 <FreeRTOS_min_uint32>
 800b97a:	6138      	str	r0, [r7, #16]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	3310      	adds	r3, #16
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	4413      	add	r3, r2
 800b984:	3304      	adds	r3, #4
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f005 fee9 	bl	8011762 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	429a      	cmp	r2, r3
 800b996:	d90b      	bls.n	800b9b0 <uxStreamBufferGet+0xb0>
            {
                /*...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	18d0      	adds	r0, r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f103 0114 	add.w	r1, r3, #20
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f005 fed9 	bl	8011762 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d113      	bne.n	800b9de <uxStreamBufferGet+0xde>
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d110      	bne.n	800b9de <uxStreamBufferGet+0xde>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	69ba      	ldr	r2, [r7, #24]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d304      	bcc.n	800b9d8 <uxStreamBufferGet+0xd8>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	69ba      	ldr	r2, [r7, #24]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxTail = uxNextTail;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	69ba      	ldr	r2, [r7, #24]
 800b9dc:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800b9de:	697b      	ldr	r3, [r7, #20]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3720      	adds	r7, #32
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <FreeRTOS_min_int32>:
        {
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	bfa8      	it	ge
 800b9fa:	4613      	movge	r3, r2
        }
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <FreeRTOS_min_uint32>:
        {
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	4293      	cmp	r3, r2
 800ba18:	bf28      	it	cs
 800ba1a:	4613      	movcs	r3, r2
        }
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <uxStreamBufferSpace>:
    {
 800ba28:	b480      	push	{r7}
 800ba2a:	b087      	sub	sp, #28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	691a      	ldr	r2, [r3, #16]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	441a      	add	r2, r3
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	3b01      	subs	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	697a      	ldr	r2, [r7, #20]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d304      	bcc.n	800ba58 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	617b      	str	r3, [r7, #20]
        return uxCount;
 800ba58:	697b      	ldr	r3, [r7, #20]
    }
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	371c      	adds	r7, #28
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <uxStreamBufferDistance>:
    {
 800ba66:	b480      	push	{r7}
 800ba68:	b087      	sub	sp, #28
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	60f8      	str	r0, [r7, #12]
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	691a      	ldr	r2, [r3, #16]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	441a      	add	r2, r3
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d304      	bcc.n	800ba94 <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	617b      	str	r3, [r7, #20]
        return uxCount;
 800ba94:	697b      	ldr	r3, [r7, #20]
    }
 800ba96:	4618      	mov	r0, r3
 800ba98:	371c      	adds	r7, #28
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <uxStreamBufferGetSpace>:
    {
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	68f9      	ldr	r1, [r7, #12]
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7ff ffb4 	bl	800ba28 <uxStreamBufferSpace>
 800bac0:	4603      	mov	r3, r0
    }
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <uxStreamBufferFrontSpace>:
    {
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
        size_t uxFront = pxBuffer->uxFront;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	68f9      	ldr	r1, [r7, #12]
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7ff ffa0 	bl	800ba28 <uxStreamBufferSpace>
 800bae8:	4603      	mov	r3, r0
    }
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <uxStreamBufferMidSpace>:
    {
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	60fb      	str	r3, [r7, #12]
        size_t uxMid = pxBuffer->uxMid;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	68b9      	ldr	r1, [r7, #8]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7ff ffab 	bl	800ba66 <uxStreamBufferDistance>
 800bb10:	4603      	mov	r3, r0
    }
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <vStreamBufferMoveMid>:
    {
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
        size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff ffe4 	bl	800baf2 <uxStreamBufferMidSpace>
 800bb2a:	60b8      	str	r0, [r7, #8]
        size_t uxMoveCount = uxCount;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	60fb      	str	r3, [r7, #12]
        if( uxMoveCount > uxSize )
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d901      	bls.n	800bb3c <vStreamBufferMoveMid+0x22>
            uxMoveCount = uxSize;
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	60fb      	str	r3, [r7, #12]
        pxBuffer->uxMid += uxMoveCount;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	441a      	add	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	605a      	str	r2, [r3, #4]
        if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d306      	bcc.n	800bb62 <vStreamBufferMoveMid+0x48>
            pxBuffer->uxMid -= pxBuffer->LENGTH;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685a      	ldr	r2, [r3, #4]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	1ad2      	subs	r2, r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	605a      	str	r2, [r3, #4]
    }
 800bb62:	bf00      	nop
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <vCastConstPointerTo_IPHeader_t>:
    {
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
        return ( const IPHeader_t * ) pvArgument;
 800bb72:	687b      	ldr	r3, [r7, #4]
    }
 800bb74:	4618      	mov	r0, r3
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <vCastPointerTo_TCPPacket_t>:
    {
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
        return ( TCPPacket_t * ) pvArgument;
 800bb88:	687b      	ldr	r3, [r7, #4]
    }
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <vCastConstPointerTo_TCPPacket_t>:
    {
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
        return ( const TCPPacket_t * ) pvArgument;
 800bb9e:	687b      	ldr	r3, [r7, #4]
    }
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <vCastPointerTo_ProtocolHeaders_t>:
    {
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
        return ( ProtocolHeaders_t * ) pvArgument;
 800bbb4:	687b      	ldr	r3, [r7, #4]
    }
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <vCastConstPointerTo_ProtocolHeaders_t>:
    {
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
        return ( const ProtocolHeaders_t * ) pvArgument;
 800bbca:	687b      	ldr	r3, [r7, #4]
    }
 800bbcc:	4618      	mov	r0, r3
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800bbe0:	687b      	ldr	r3, [r7, #4]
    }
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <ulChar2u32>:
    {
 800bbee:	b480      	push	{r7}
 800bbf0:	b083      	sub	sp, #12
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	061a      	lsls	r2, r3, #24
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	041b      	lsls	r3, r3, #16
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800bc04:	431a      	orrs	r2, r3
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3302      	adds	r3, #2
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	021b      	lsls	r3, r3, #8
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800bc0e:	4313      	orrs	r3, r2
               ( ( ( uint32_t ) apChr[ 3 ] ) );
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	3203      	adds	r2, #3
 800bc14:	7812      	ldrb	r2, [r2, #0]
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800bc16:	4313      	orrs	r3, r2
    }
 800bc18:	4618      	mov	r0, r3
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <usChar2u16>:
    {
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	021b      	lsls	r3, r3, #8
 800bc34:	b29a      	uxth	r2, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	b29b      	uxth	r3, r3
        return ( uint16_t )
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	b29b      	uxth	r3, r3
    }
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
	...

0800bc50 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    static BaseType_t prvTCPSocketIsActive( eIPTCPState_t xStatus )
    {
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	4603      	mov	r3, r0
 800bc58:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( xStatus )
 800bc5a:	79fb      	ldrb	r3, [r7, #7]
 800bc5c:	2b0b      	cmp	r3, #11
 800bc5e:	d81e      	bhi.n	800bc9e <prvTCPSocketIsActive+0x4e>
 800bc60:	a201      	add	r2, pc, #4	; (adr r2, 800bc68 <prvTCPSocketIsActive+0x18>)
 800bc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc66:	bf00      	nop
 800bc68:	0800bc99 	.word	0x0800bc99
 800bc6c:	0800bc9f 	.word	0x0800bc9f
 800bc70:	0800bc9f 	.word	0x0800bc9f
 800bc74:	0800bc9f 	.word	0x0800bc9f
 800bc78:	0800bc9f 	.word	0x0800bc9f
 800bc7c:	0800bc9f 	.word	0x0800bc9f
 800bc80:	0800bc9f 	.word	0x0800bc9f
 800bc84:	0800bc99 	.word	0x0800bc99
 800bc88:	0800bc99 	.word	0x0800bc99
 800bc8c:	0800bc99 	.word	0x0800bc99
 800bc90:	0800bc9f 	.word	0x0800bc9f
 800bc94:	0800bc99 	.word	0x0800bc99
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	60fb      	str	r3, [r7, #12]
                break;
 800bc9c:	e002      	b.n	800bca4 <prvTCPSocketIsActive+0x54>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	60fb      	str	r3, [r7, #12]
                break;
 800bca2:	bf00      	nop
        }

        return xResult;
 800bca4:	68fb      	ldr	r3, [r7, #12]
    }
 800bca6:	4618      	mov	r0, r3
 800bca8:	3714      	adds	r7, #20
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop

0800bcb4 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800bcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcb6:	b089      	sub	sp, #36	; 0x24
 800bcb8:	af02      	add	r7, sp, #8
 800bcba:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;
            eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bcc2:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800bcc4:	7cfb      	ldrb	r3, [r7, #19]
 800bcc6:	2b08      	cmp	r3, #8
 800bcc8:	d81a      	bhi.n	800bd00 <prvTCPStatusAgeCheck+0x4c>
 800bcca:	a201      	add	r2, pc, #4	; (adr r2, 800bcd0 <prvTCPStatusAgeCheck+0x1c>)
 800bccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd0:	0800bcfb 	.word	0x0800bcfb
 800bcd4:	0800bcfb 	.word	0x0800bcfb
 800bcd8:	0800bd01 	.word	0x0800bd01
 800bcdc:	0800bd01 	.word	0x0800bd01
 800bce0:	0800bd01 	.word	0x0800bd01
 800bce4:	0800bcf5 	.word	0x0800bcf5
 800bce8:	0800bd01 	.word	0x0800bd01
 800bcec:	0800bd01 	.word	0x0800bd01
 800bcf0:	0800bcfb 	.word	0x0800bcfb
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	617b      	str	r3, [r7, #20]
                    break;
 800bcf8:	e005      	b.n	800bd06 <prvTCPStatusAgeCheck+0x52>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	617b      	str	r3, [r7, #20]
                    break;
 800bcfe:	e002      	b.n	800bd06 <prvTCPStatusAgeCheck+0x52>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800bd00:	2301      	movs	r3, #1
 800bd02:	617b      	str	r3, [r7, #20]
                    break;
 800bd04:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d03b      	beq.n	800bd84 <prvTCPStatusAgeCheck+0xd0>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800bd0c:	f7f9 ffa4 	bl	8005c58 <xTaskGetTickCount>
 800bd10:	4602      	mov	r2, r0
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f247 5230 	movw	r2, #30000	; 0x7530
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d92f      	bls.n	800bd84 <prvTCPStatusAgeCheck+0xd0>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bd28:	461d      	mov	r5, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bd32:	461e      	mov	r6, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f002 fdee 	bl	800e91c <FreeRTOS_GetTCPStateName>
 800bd40:	4603      	mov	r3, r0
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	4633      	mov	r3, r6
 800bd46:	4622      	mov	r2, r4
 800bd48:	4629      	mov	r1, r5
 800bd4a:	4811      	ldr	r0, [pc, #68]	; (800bd90 <prvTCPStatusAgeCheck+0xdc>)
 800bd4c:	f7f4 fdfe 	bl	800094c <vLoggingPrintf>
                                                     FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
                        }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800bd50:	2108      	movs	r1, #8
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 ff30 	bl	800cbb8 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd5e:	f003 0304 	and.w	r3, r3, #4
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00d      	beq.n	800bd84 <prvTCPStatusAgeCheck+0xd0>
                    {
                        if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd6e:	f003 0308 	and.w	r3, r3, #8
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d102      	bne.n	800bd7e <prvTCPStatusAgeCheck+0xca>
                        {
                            /* As it did not get connected, and the user can never
                             * accept() it anymore, it will be deleted now.  Called from
                             * the IP-task, so it's safe to call the internal Close
                             * function: vSocketClose(). */
                            ( void ) vSocketClose( pxSocket );
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7fe fd85 	bl	800a888 <vSocketClose>
                        }

                        /* Return a negative value to tell to inform the caller
                         * xTCPTimerCheck()
                         * that the socket got closed and may not be accessed anymore. */
                        xResult = -1;
 800bd7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd82:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800bd84:	697b      	ldr	r3, [r7, #20]
        }
 800bd86:	4618      	mov	r0, r3
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	08014374 	.word	0x08014374

0800bd94 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800bd94:	b590      	push	{r4, r7, lr}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af02      	add	r7, sp, #8
 800bd9a:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800bda0:	2300      	movs	r3, #0
 800bda2:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d906      	bls.n	800bdbc <xTCPSocketCheck+0x28>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d002      	beq.n	800bdbc <xTCPSocketCheck+0x28>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f001 fab6 	bl	800d328 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d04f      	beq.n	800be64 <xTCPSocketCheck+0xd0>
                {
                    /* The first task of this regular socket check is to send-out delayed
                     * ACK's. */
                    if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdca:	f003 0320 	and.w	r3, r3, #32
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d13b      	bne.n	800be4c <xTCPSocketCheck+0xb8>
                    {
                        /* Earlier data was received but not yet acknowledged.  This
                         * function is called when the TCP timer for the socket expires, the
                         * ACK may be sent now. */
                        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d02e      	beq.n	800be3c <xTCPSocketCheck+0xa8>
                        {
                            if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800bdde:	4b2f      	ldr	r3, [pc, #188]	; (800be9c <xTCPSocketCheck+0x108>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	dd20      	ble.n	800be28 <xTCPSocketCheck+0x94>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bdea:	2b17      	cmp	r3, #23
 800bdec:	d01c      	beq.n	800be28 <xTCPSocketCheck+0x94>
                            {
                                FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %u)\n",
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bdf8:	461c      	mov	r4, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800be06:	1ad1      	subs	r1, r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	2228      	movs	r2, #40	; 0x28
 800be18:	9201      	str	r2, [sp, #4]
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	460b      	mov	r3, r1
 800be1e:	4622      	mov	r2, r4
 800be20:	4601      	mov	r1, r0
 800be22:	481f      	ldr	r0, [pc, #124]	; (800bea0 <xTCPSocketCheck+0x10c>)
 800be24:	f7f4 fd92 	bl	800094c <vLoggingPrintf>
                                                         pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
                                                         pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
                                                         ( unsigned ) ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
                            }

                            prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800be2c:	2301      	movs	r3, #1
 800be2e:	2228      	movs	r2, #40	; 0x28
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f8d9 	bl	800bfe8 <prvTCPReturnPacket>

                            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                                {
                                    /* The ownership has been passed to the SEND routine,
                                     * clear the pointer to it. */
                                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	67da      	str	r2, [r3, #124]	; 0x7c
                                }
                            #endif /* ipconfigZERO_COPY_TX_DRIVER */
                        }

                        if( prvTCPNextTimeout( pxSocket ) > 1U )
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f001 f9e3 	bl	800d208 <prvTCPNextTimeout>
 800be42:	4603      	mov	r3, r0
 800be44:	2b01      	cmp	r3, #1
 800be46:	d901      	bls.n	800be4c <xTCPSocketCheck+0xb8>
                        {
                            /* Tell the code below that this function is ready. */
                            xReady = pdTRUE;
 800be48:	2301      	movs	r3, #1
 800be4a:	60bb      	str	r3, [r7, #8]
                        /* The user wants to perform an active shutdown(), skip sending
                         * the delayed ACK.  The function prvTCPSendPacket() will send the
                         * FIN along with the ACK's. */
                    }

                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d007      	beq.n	800be64 <xTCPSocketCheck+0xd0>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be58:	4618      	mov	r0, r3
 800be5a:	f005 fbfd 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
                        pxSocket->u.xTCP.pxAckMessage = NULL;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	67da      	str	r2, [r3, #124]	; 0x7c
                    }
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d113      	bne.n	800be92 <xTCPSocketCheck+0xfe>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800be70:	2b04      	cmp	r3, #4
 800be72:	d804      	bhi.n	800be7e <xTCPSocketCheck+0xea>
                ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN ) )
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d102      	bne.n	800be84 <xTCPSocketCheck+0xf0>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f810 	bl	800bea4 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f001 f9bf 	bl	800d208 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
                {
                    /* In all (non-connected) states in which keep-alive messages can not be sent
                     * the anti-hang protocol will close sockets that are 'hanging'. */
                    xResult = prvTCPStatusAgeCheck( pxSocket );
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7ff ff12 	bl	800bcb4 <prvTCPStatusAgeCheck>
 800be90:	60f8      	str	r0, [r7, #12]
                }
            #endif
        }

        return xResult;
 800be92:	68fb      	ldr	r3, [r7, #12]
    }
 800be94:	4618      	mov	r0, r3
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd90      	pop	{r4, r7, pc}
 800be9c:	2000bd10 	.word	0x2000bd10
 800bea0:	080143ac 	.word	0x080143ac

0800bea4 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    static int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d010      	beq.n	800bee0 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60bb      	str	r3, [r7, #8]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800bec2:	f107 0308 	add.w	r3, r7, #8
 800bec6:	4619      	mov	r1, r3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f85d 	bl	800bf88 <prvTCPSendRepeated>
 800bece:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d051      	beq.n	800bf7a <prvTCPSendPacket+0xd6>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	4618      	mov	r0, r3
 800beda:	f005 fbbd 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
 800bede:	e04c      	b.n	800bf7a <prvTCPSendPacket+0xd6>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	d90c      	bls.n	800bf04 <prvTCPSendPacket+0x60>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bef2:	461a      	mov	r2, r3
 800bef4:	4823      	ldr	r0, [pc, #140]	; (800bf84 <prvTCPSendPacket+0xe0>)
 800bef6:	f7f4 fd29 	bl	800094c <vLoggingPrintf>
                                         pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800befa:	2108      	movs	r1, #8
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fe5b 	bl	800cbb8 <vTCPStateChange>
 800bf02:	e03a      	b.n	800bf7a <prvTCPSendPacket+0xd6>
            }
            else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf0a:	f003 0308 	and.w	r3, r3, #8
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d105      	bne.n	800bf20 <prvTCPSendPacket+0x7c>
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 faa3 	bl	800c460 <prvTCPPrepareConnect>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d12c      	bne.n	800bf7a <prvTCPSendPacket+0xd6>
            {
                ProtocolHeaders_t * pxProtocolHeaders;
                const UBaseType_t uxHeaderSize = ipSIZE_OF_IPv4_HEADER;
 800bf20:	2314      	movs	r3, #20
 800bf22:	617b      	str	r3, [r7, #20]

                /* Or else, if the connection has been prepared, or can be prepared
                 * now, proceed to send the packet with the SYN flag.
                 * prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
                 * the Ethernet address of the peer or the gateway is found. */
                pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxHeaderSize ] ) );
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	330e      	adds	r3, #14
 800bf28:	3380      	adds	r3, #128	; 0x80
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	3302      	adds	r3, #2
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff fe3b 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800bf36:	6138      	str	r0, [r7, #16]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fdc5 	bl	800cacc <prvSetSynAckOptions>
 800bf42:	60f8      	str	r0, [r7, #12]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	3328      	adds	r3, #40	; 0x28
 800bf48:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	3314      	adds	r3, #20
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bf64:	3301      	adds	r3, #1
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800bf6e:	69fa      	ldr	r2, [r7, #28]
 800bf70:	2300      	movs	r3, #0
 800bf72:	2100      	movs	r1, #0
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f837 	bl	800bfe8 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800bf7a:	69fb      	ldr	r3, [r7, #28]
    }
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3720      	adds	r7, #32
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	080143d8 	.word	0x080143d8

0800bf88 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                       NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b086      	sub	sp, #24
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 800bf92:	2300      	movs	r3, #0
 800bf94:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 800bf96:	2300      	movs	r3, #0
 800bf98:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	e019      	b.n	800bfd4 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 ff81 	bl	800ceac <prvTCPPrepareSend>
 800bfaa:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	dd14      	ble.n	800bfdc <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	6819      	ldr	r1, [r3, #0]
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	2301      	movs	r3, #1
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f814 	bl	800bfe8 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    *ppxNetworkBuffer = NULL;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
                }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 800bfc6:	693a      	ldr	r2, [r7, #16]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	4413      	add	r3, r2
 800bfcc:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	617b      	str	r3, [r7, #20]
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	2b07      	cmp	r3, #7
 800bfd8:	d9e2      	bls.n	800bfa0 <prvTCPSendRepeated+0x18>
 800bfda:	e000      	b.n	800bfde <prvTCPSendRepeated+0x56>
                break;
 800bfdc:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800bfde:	693b      	ldr	r3, [r7, #16]
    }
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3718      	adds	r7, #24
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <prvTCPReturnPacket>:
 */
    static void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                                    NetworkBufferDescriptor_t * pxDescriptor,
                                    uint32_t ulLen,
                                    BaseType_t xReleaseAfterSend )
    {
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b0a0      	sub	sp, #128	; 0x80
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        BaseType_t xDoRelease = xReleaseAfterSend;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	67fb      	str	r3, [r7, #124]	; 0x7c
        EthernetHeader_t * pxEthernetHeader;
        uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
        const TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	66bb      	str	r3, [r7, #104]	; 0x68
        void * pvCopyDest;


        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 800bffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10f      	bne.n	800c024 <prvTCPReturnPacket+0x3c>
        {
            pxNetworkBuffer = &xTempBuffer;
 800c004:	f107 0314 	add.w	r3, r7, #20
 800c008:	66bb      	str	r3, [r7, #104]	; 0x68

            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
 800c00a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c00c:	2200      	movs	r2, #0
 800c00e:	625a      	str	r2, [r3, #36]	; 0x24
                }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800c016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c018:	619a      	str	r2, [r3, #24]
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c01a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c01c:	2246      	movs	r2, #70	; 0x46
 800c01e:	61da      	str	r2, [r3, #28]
            xDoRelease = pdFALSE;
 800c020:	2300      	movs	r3, #0
 800c022:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                if( xDoRelease == pdFALSE )
 800c024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10e      	bne.n	800c048 <prvTCPReturnPacket+0x60>
                {
                    pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 800c02a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	4619      	mov	r1, r3
 800c030:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c032:	f7fd f99b 	bl	800936c <pxDuplicateNetworkBufferWithDescriptor>
 800c036:	66b8      	str	r0, [r7, #104]	; 0x68

                    if( pxNetworkBuffer == NULL )
 800c038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d102      	bne.n	800c044 <prvTCPReturnPacket+0x5c>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 800c03e:	489b      	ldr	r0, [pc, #620]	; (800c2ac <prvTCPReturnPacket+0x2c4>)
 800c040:	f7f4 fc84 	bl	800094c <vLoggingPrintf>
                    }

                    xDoRelease = pdTRUE;
 800c044:	2301      	movs	r3, #1
 800c046:	67fb      	str	r3, [r7, #124]	; 0x7c
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL )
 800c048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 81bd 	beq.w	800c3ca <prvTCPReturnPacket+0x3e2>
        #endif
        {
            /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800c050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c052:	699b      	ldr	r3, [r3, #24]
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff fd93 	bl	800bb80 <vCastPointerTo_TCPPacket_t>
 800c05a:	6638      	str	r0, [r7, #96]	; 0x60
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800c05c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c05e:	330e      	adds	r3, #14
 800c060:	65fb      	str	r3, [r7, #92]	; 0x5c
            pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800c062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c064:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 80f8 	beq.w	800c25e <prvTCPReturnPacket+0x276>
            {
                /* Calculate the space in the RX buffer in order to advertise the
                 * size of this socket's reception window. */
                pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	33d8      	adds	r3, #216	; 0xd8
 800c072:	653b      	str	r3, [r7, #80]	; 0x50

                if( pxSocket->u.xTCP.rxStream != NULL )
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d006      	beq.n	800c08a <prvTCPReturnPacket+0xa2>
                {
                    /* An RX stream was created already, see how much space is
                     * available. */
                    ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff fd22 	bl	800baca <uxStreamBufferFrontSpace>
 800c086:	67b8      	str	r0, [r7, #120]	; 0x78
 800c088:	e002      	b.n	800c090 <prvTCPReturnPacket+0xa8>
                }
                else
                {
                    /* No RX stream has been created, the full stream size is
                     * available. */
                    ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c08e:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Take the minimum of the RX buffer space and the RX window size. */
                ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 800c090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c096:	4618      	mov	r0, r3
 800c098:	f7ff fcb6 	bl	800ba08 <FreeRTOS_min_uint32>
 800c09c:	6778      	str	r0, [r7, #116]	; 0x74

                if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d107      	bne.n	800c0be <prvTCPReturnPacket+0xd6>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0b4:	f003 0304 	and.w	r3, r3, #4
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <prvTCPReturnPacket+0xda>
                {
                    /* The low-water mark was reached, meaning there was little
                     * space left.  The socket will wait until the application has read
                     * or flushed the incoming data, and 'zero-window' will be
                     * advertised. */
                    ulSpace = 0U;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	677b      	str	r3, [r7, #116]	; 0x74
                }

                /* If possible, advertise an RX window size of at least 1 MSS, otherwise
                 * the peer might start 'zero window probing', i.e. sending small packets
                 * (1, 2, 4, 8... bytes). */
                if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d20a      	bcs.n	800c0e6 <prvTCPReturnPacket+0xfe>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d303      	bcc.n	800c0e6 <prvTCPReturnPacket+0xfe>
                {
                    ulSpace = pxSocket->u.xTCP.usCurMSS;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c0e4:	677b      	str	r3, [r7, #116]	; 0x74
                }

                /* Avoid overflow of the 16-bit win field. */
                #if ( ipconfigUSE_TCP_WIN != 0 )
                    {
                        ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0f0:	40d3      	lsrs	r3, r2
 800c0f2:	66fb      	str	r3, [r7, #108]	; 0x6c
                    {
                        ulWinSize = ulSpace;
                    }
                #endif

                if( ulWinSize > 0xfffcUL )
 800c0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0f6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d902      	bls.n	800c104 <prvTCPReturnPacket+0x11c>
                {
                    ulWinSize = 0xfffcUL;
 800c0fe:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800c102:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800c104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c106:	b29b      	uxth	r3, r3
 800c108:	021b      	lsls	r3, r3, #8
 800c10a:	b21a      	sxth	r2, r3
 800c10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c10e:	b29b      	uxth	r3, r3
 800c110:	0a1b      	lsrs	r3, r3, #8
 800c112:	b29b      	uxth	r3, r3
 800c114:	b21b      	sxth	r3, r3
 800c116:	4313      	orrs	r3, r2
 800c118:	b21b      	sxth	r3, r3
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c11e:	861a      	strh	r2, [r3, #48]	; 0x30

                /* The new window size has been advertised, switch off the flag. */
                pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c126:	f36f 0300 	bfc	r3, #0, #1
 800c12a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Later on, when deciding to delay an ACK, a precise estimate is needed
                 * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
                 * highest sequence number minus 1 that the socket will accept. */
                pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800c12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c130:	691a      	ldr	r2, [r3, #16]
 800c132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c134:	441a      	add	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	645a      	str	r2, [r3, #68]	; 0x44

                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	b2db      	uxtb	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d02f      	beq.n	800c1aa <prvTCPReturnPacket+0x1c2>
                    {
                        /* Sending a keep-alive packet, send the current sequence number
                         * minus 1, which will be recognised as a keep-alive packet and
                         * responded to by acknowledging the last byte. */
                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c150:	f36f 0341 	bfc	r3, #1, #1
 800c154:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                        pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c15e:	f043 0304 	orr.w	r3, r3, #4
 800c162:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                        pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c16c:	1e5a      	subs	r2, r3, #1
 800c16e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c170:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
                        pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800c174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c176:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c17a:	061a      	lsls	r2, r3, #24
 800c17c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c17e:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c182:	021b      	lsls	r3, r3, #8
 800c184:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c188:	431a      	orrs	r2, r3
 800c18a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c18c:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c190:	0a1b      	lsrs	r3, r3, #8
 800c192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c196:	431a      	orrs	r2, r3
 800c198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c19a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c19e:	0e1b      	lsrs	r3, r3, #24
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1a4:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c1a8:	e042      	b.n	800c230 <prvTCPReturnPacket+0x248>
                    }
                    else
                #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
                {
                    pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c1b0:	061a      	lsls	r2, r3, #24
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c1b8:	021b      	lsls	r3, r3, #8
 800c1ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c1be:	431a      	orrs	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c1c6:	0a1b      	lsrs	r3, r3, #8
 800c1c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c1cc:	431a      	orrs	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c1d4:	0e1b      	lsrs	r3, r3, #24
 800c1d6:	431a      	orrs	r2, r3
 800c1d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1da:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

                    if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800c1de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d021      	beq.n	800c230 <prvTCPReturnPacket+0x248>
                    {
                        /* Suppress FIN in case this packet carries earlier data to be
                         * retransmitted. */
                        uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	3b28      	subs	r3, #40	; 0x28
 800c1f0:	64fb      	str	r3, [r7, #76]	; 0x4c

                        if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800c1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f8:	441a      	add	r2, r3
 800c1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d016      	beq.n	800c230 <prvTCPReturnPacket+0x248>
                        {
                            pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 800c202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c204:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c208:	f023 0301 	bic.w	r3, r3, #1
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c210:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                            FreeRTOS_debug_printf( ( "Suppress FIN for %lu + %lu < %lu\n",
 800c214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c21a:	69db      	ldr	r3, [r3, #28]
 800c21c:	1ad1      	subs	r1, r2, r3
 800c21e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c22a:	4821      	ldr	r0, [pc, #132]	; (800c2b0 <prvTCPReturnPacket+0x2c8>)
 800c22c:	f7f4 fb8e 	bl	800094c <vLoggingPrintf>
                        }
                    }
                }

                /* Tell which sequence number is expected next time */
                pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800c230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	061a      	lsls	r2, r3, #24
 800c236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	021b      	lsls	r3, r3, #8
 800c23c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c240:	431a      	orrs	r2, r3
 800c242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c244:	691b      	ldr	r3, [r3, #16]
 800c246:	0a1b      	lsrs	r3, r3, #8
 800c248:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c24c:	431a      	orrs	r2, r3
 800c24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	0e1b      	lsrs	r3, r3, #24
 800c254:	431a      	orrs	r2, r3
 800c256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c258:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800c25c:	e00d      	b.n	800c27a <prvTCPReturnPacket+0x292>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800c25e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c260:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c264:	657b      	str	r3, [r7, #84]	; 0x54
 800c266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c268:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800c26c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c26e:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c274:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c276:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800c27a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c27c:	2280      	movs	r2, #128	; 0x80
 800c27e:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	b29b      	uxth	r3, r3
 800c284:	021b      	lsls	r3, r3, #8
 800c286:	b29a      	uxth	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	0a1b      	lsrs	r3, r3, #8
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	4313      	orrs	r3, r2
 800c290:	b29a      	uxth	r2, r3
 800c292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c294:	805a      	strh	r2, [r3, #2]

            if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d003      	beq.n	800c2a4 <prvTCPReturnPacket+0x2bc>
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <prvTCPReturnPacket+0x2cc>)
 800c29e:	695b      	ldr	r3, [r3, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d109      	bne.n	800c2b8 <prvTCPReturnPacket+0x2d0>
            {
                /* When pxSocket is NULL, this function is called by prvTCPSendReset()
                * and the IP-addresses must be swapped.
                * Also swap the IP-addresses in case the IP-tack doesn't have an
                * IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ). */
                ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800c2a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	673b      	str	r3, [r7, #112]	; 0x70
 800c2aa:	e008      	b.n	800c2be <prvTCPReturnPacket+0x2d6>
 800c2ac:	080143f8 	.word	0x080143f8
 800c2b0:	08014420 	.word	0x08014420
 800c2b4:	20000018 	.word	0x20000018
            }
            else
            {
                ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c2b8:	4b46      	ldr	r3, [pc, #280]	; (800c3d4 <prvTCPReturnPacket+0x3ec>)
 800c2ba:	695b      	ldr	r3, [r3, #20]
 800c2bc:	673b      	str	r3, [r7, #112]	; 0x70
            }

            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800c2be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c0:	68da      	ldr	r2, [r3, #12]
 800c2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c4:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800c2c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c2ca:	60da      	str	r2, [r3, #12]
            vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800c2cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ce:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c2d2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c2d6:	021b      	lsls	r3, r3, #8
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c2de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2e6:	845a      	strh	r2, [r3, #34]	; 0x22
 800c2e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ea:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800c2ee:	849a      	strh	r2, [r3, #36]	; 0x24

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800c2f0:	4b39      	ldr	r3, [pc, #228]	; (800c3d8 <prvTCPReturnPacket+0x3f0>)
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	021b      	lsls	r3, r3, #8
 800c2f6:	b21a      	sxth	r2, r3
 800c2f8:	4b37      	ldr	r3, [pc, #220]	; (800c3d8 <prvTCPReturnPacket+0x3f0>)
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	0a1b      	lsrs	r3, r3, #8
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	b21b      	sxth	r3, r3
 800c302:	4313      	orrs	r3, r2
 800c304:	b21b      	sxth	r3, r3
 800c306:	b29a      	uxth	r2, r3
 800c308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c30a:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800c30c:	4b32      	ldr	r3, [pc, #200]	; (800c3d8 <prvTCPReturnPacket+0x3f0>)
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	3301      	adds	r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	4b30      	ldr	r3, [pc, #192]	; (800c3d8 <prvTCPReturnPacket+0x3f0>)
 800c316:	801a      	strh	r2, [r3, #0]
            pxIPHeader->usFragmentOffset = 0U;
 800c318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c31a:	2200      	movs	r2, #0
 800c31c:	719a      	strb	r2, [r3, #6]
 800c31e:	2200      	movs	r2, #0
 800c320:	71da      	strb	r2, [r3, #7]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f103 020e 	add.w	r2, r3, #14
 800c328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c32a:	61da      	str	r2, [r3, #28]
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
 800c32c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c32e:	2200      	movs	r2, #0
 800c330:	625a      	str	r2, [r3, #36]	; 0x24
                }
            #endif

            /* Fill in the destination MAC addresses. */
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800c332:	6db8      	ldr	r0, [r7, #88]	; 0x58
                             ( const void * ) ( &( pxEthernetHeader->xSourceAddress ) ),
 800c334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c336:	3306      	adds	r3, #6
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800c338:	2206      	movs	r2, #6
 800c33a:	4619      	mov	r1, r3
 800c33c:	f005 fa11 	bl	8011762 <memcpy>
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            /* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
            pvCopySource = ipLOCAL_MAC_ADDRESS;
 800c340:	4b24      	ldr	r3, [pc, #144]	; (800c3d4 <prvTCPReturnPacket+0x3ec>)
 800c342:	647b      	str	r3, [r7, #68]	; 0x44
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800c344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c346:	3306      	adds	r3, #6
 800c348:	643b      	str	r3, [r7, #64]	; 0x40
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c34a:	2206      	movs	r2, #6
 800c34c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c34e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c350:	f005 fa07 	bl	8011762 <memcpy>

            #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800c354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c356:	69db      	ldr	r3, [r3, #28]
 800c358:	2b3b      	cmp	r3, #59	; 0x3b
 800c35a:	d812      	bhi.n	800c382 <prvTCPReturnPacket+0x39a>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800c35c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c35e:	69db      	ldr	r3, [r3, #28]
 800c360:	667b      	str	r3, [r7, #100]	; 0x64
 800c362:	e008      	b.n	800c376 <prvTCPReturnPacket+0x38e>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800c364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c366:	699a      	ldr	r2, [r3, #24]
 800c368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c36a:	4413      	add	r3, r2
 800c36c:	2200      	movs	r2, #0
 800c36e:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800c370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c372:	3301      	adds	r3, #1
 800c374:	667b      	str	r3, [r7, #100]	; 0x64
 800c376:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c378:	2b3b      	cmp	r3, #59	; 0x3b
 800c37a:	ddf3      	ble.n	800c364 <prvTCPReturnPacket+0x37c>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800c37c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c37e:	223c      	movs	r2, #60	; 0x3c
 800c380:	61da      	str	r2, [r3, #28]
                }
            #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 800c382:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c384:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c386:	f004 f8b5 	bl	80104f4 <xNetworkInterfaceOutput>

            if( xDoRelease == pdFALSE )
 800c38a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d11c      	bne.n	800c3ca <prvTCPReturnPacket+0x3e2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800c390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c392:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c396:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c39a:	021b      	lsls	r3, r3, #8
 800c39c:	4313      	orrs	r3, r2
 800c39e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c3a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3a8:	845a      	strh	r2, [r3, #34]	; 0x22
 800c3aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3ac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c3ae:	849a      	strh	r2, [r3, #36]	; 0x24
                pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800c3b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3b2:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800c3b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3b8:	f8c3 201a 	str.w	r2, [r3, #26]
                ( void ) memcpy( ( void * ) ( pxEthernetHeader->xSourceAddress.ucBytes ), ( const void * ) ( pxEthernetHeader->xDestinationAddress.ucBytes ), ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c3bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3be:	3306      	adds	r3, #6
 800c3c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3c2:	2206      	movs	r2, #6
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f005 f9cc 	bl	8011762 <memcpy>
            else
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    }
 800c3ca:	bf00      	nop
 800c3cc:	3780      	adds	r7, #128	; 0x80
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20000018 	.word	0x20000018
 800c3d8:	2000bc78 	.word	0x2000bc78

0800c3dc <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    static void prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 800c3dc:	b5b0      	push	{r4, r5, r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af02      	add	r7, sp, #8
 800c3e2:	6078      	str	r0, [r7, #4]
        if( xTCPWindowLoggingLevel != 0 )
 800c3e4:	4b1c      	ldr	r3, [pc, #112]	; (800c458 <prvTCPCreateWindow+0x7c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d011      	beq.n	800c410 <prvTCPCreateWindow+0x34>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c3f2:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c3f6:	fb02 f103 	mul.w	r1, r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	4603      	mov	r3, r0
 800c40a:	4814      	ldr	r0, [pc, #80]	; (800c45c <prvTCPCreateWindow+0x80>)
 800c40c:	f7f4 fa9e 	bl	800094c <vLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        vTCPWindowCreate(
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
            &pxSocket->u.xTCP.xTCPWindow,
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c41c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c420:	fb02 f103 	mul.w	r1, r2, r3
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c42a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c42e:	fb02 f403 	mul.w	r4, r2, r3
        vTCPWindowCreate(
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 50e8 	ldr.w	r5, [r3, #232]	; 0xe8
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
        vTCPWindowCreate(
 800c444:	9201      	str	r2, [sp, #4]
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	462b      	mov	r3, r5
 800c44a:	4622      	mov	r2, r4
 800c44c:	f002 fd66 	bl	800ef1c <vTCPWindowCreate>
    }
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bdb0      	pop	{r4, r5, r7, pc}
 800c458:	2000bd10 	.word	0x2000bd10
 800c45c:	08014444 	.word	0x08014444

0800c460 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 800c460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c462:	b093      	sub	sp, #76	; 0x4c
 800c464:	af06      	add	r7, sp, #24
 800c466:	6078      	str	r0, [r7, #4]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        eARPLookupResult_t eReturned;
        uint32_t ulRemoteIP;
        MACAddress_t xEthAddress;
        BaseType_t xReturn = pdTRUE;
 800c468:	2301      	movs	r3, #1
 800c46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulInitialSequenceNumber = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	62bb      	str	r3, [r7, #40]	; 0x28

        #if ( ipconfigHAS_PRINTF != 0 )
            {
                /* Only necessary for nicer logging. */
                ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 800c470:	f107 030c 	add.w	r3, r7, #12
 800c474:	2206      	movs	r2, #6
 800c476:	2100      	movs	r1, #0
 800c478:	4618      	mov	r0, r3
 800c47a:	f005 f996 	bl	80117aa <memset>
            }
        #endif /* ipconfigHAS_PRINTF != 0 */

        ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c482:	061a      	lsls	r2, r3, #24
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c488:	021b      	lsls	r3, r3, #8
 800c48a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c48e:	431a      	orrs	r2, r3
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c494:	0a1b      	lsrs	r3, r3, #8
 800c496:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c49a:	431a      	orrs	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a0:	0e1b      	lsrs	r3, r3, #24
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	617b      	str	r3, [r7, #20]

        /* Determine the ARP cache status for the requested IP address. */
        eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800c4a6:	f107 020c 	add.w	r2, r7, #12
 800c4aa:	f107 0314 	add.w	r3, r7, #20
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fb fb2d 	bl	8007b10 <eARPGetCacheEntry>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        switch( eReturned )
 800c4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d037      	beq.n	800c534 <prvTCPPrepareConnect+0xd4>

            case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
            case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
            default:
                /* Count the number of times it could not find the ARP address. */
                pxSocket->u.xTCP.ucRepCount++;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	061a      	lsls	r2, r3, #24
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	021b      	lsls	r3, r3, #8
 800c4e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	0a1b      	lsrs	r3, r3, #8
 800c4ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c4ee:	431a      	orrs	r2, r3
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	0e1b      	lsrs	r3, r3, #24
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	f897 e027 	ldrb.w	lr, [r7, #39]	; 0x27
 800c4fa:	7b38      	ldrb	r0, [r7, #12]
 800c4fc:	7b7c      	ldrb	r4, [r7, #13]
 800c4fe:	7bbd      	ldrb	r5, [r7, #14]
 800c500:	7bfe      	ldrb	r6, [r7, #15]
 800c502:	f897 c010 	ldrb.w	ip, [r7, #16]
 800c506:	f8c7 c000 	str.w	ip, [r7]
 800c50a:	f897 c011 	ldrb.w	ip, [r7, #17]
 800c50e:	4663      	mov	r3, ip
 800c510:	9305      	str	r3, [sp, #20]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	9304      	str	r3, [sp, #16]
 800c516:	9603      	str	r6, [sp, #12]
 800c518:	9502      	str	r5, [sp, #8]
 800c51a:	9401      	str	r4, [sp, #4]
 800c51c:	9000      	str	r0, [sp, #0]
 800c51e:	4673      	mov	r3, lr
 800c520:	4859      	ldr	r0, [pc, #356]	; (800c688 <prvTCPPrepareConnect+0x228>)
 800c522:	f7f4 fa13 	bl	800094c <vLoggingPrintf>
                                         xEthAddress.ucBytes[ 3 ],
                                         xEthAddress.ucBytes[ 4 ],
                                         xEthAddress.ucBytes[ 5 ] ) );

                /* And issue a (new) ARP request */
                FreeRTOS_OutputARPRequest( ulRemoteIP );
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fb fc39 	bl	8007da0 <FreeRTOS_OutputARPRequest>
                xReturn = pdFALSE;
 800c52e:	2300      	movs	r3, #0
 800c530:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800c532:	e000      	b.n	800c536 <prvTCPPrepareConnect+0xd6>
                break;            /* We can now prepare the SYN packet. */
 800c534:	bf00      	nop
        }

        if( xReturn != pdFALSE )
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00f      	beq.n	800c55c <prvTCPPrepareConnect+0xfc>
        {
            /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
            ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800c53c:	4b53      	ldr	r3, [pc, #332]	; (800c68c <prvTCPPrepareConnect+0x22c>)
 800c53e:	6958      	ldr	r0, [r3, #20]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c54c:	f7f4 fa3a 	bl	80009c4 <ulApplicationGetNextSequenceNumber>
 800c550:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                          pxSocket->usLocalPort,
                                                                          pxSocket->u.xTCP.ulRemoteIP,
                                                                          pxSocket->u.xTCP.usRemotePort );

            /* Check for a random number generation error. */
            if( ulInitialSequenceNumber == 0UL )
 800c552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c554:	2b00      	cmp	r3, #0
 800c556:	d101      	bne.n	800c55c <prvTCPPrepareConnect+0xfc>
            {
                xReturn = pdFALSE;
 800c558:	2300      	movs	r3, #0
 800c55a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        if( xReturn != pdFALSE )
 800c55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f000 808d 	beq.w	800c67e <prvTCPPrepareConnect+0x21e>
            uint16_t usLength;

            /* The MAC-address of the peer (or gateway) has been found,
             * now prepare the initial TCP packet and some fields in the socket. Map
             * the buffer onto the TCPPacket_t struct to easily access it's field. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3382      	adds	r3, #130	; 0x82
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff fb09 	bl	800bb80 <vCastPointerTo_TCPPacket_t>
 800c56e:	6238      	str	r0, [r7, #32]
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	330e      	adds	r3, #14
 800c574:	61fb      	str	r3, [r7, #28]

            /* reset the retry counter to zero. */
            pxSocket->u.xTCP.ucRepCount = 0U;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

            /* And remember that the connect/SYN data are prepared. */
            pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c584:	f043 0308 	orr.w	r3, r3, #8
 800c588:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

            /* Now that the Ethernet address is known, the initial packet can be
             * prepared. */
            ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	3382      	adds	r3, #130	; 0x82
 800c590:	2246      	movs	r2, #70	; 0x46
 800c592:	2100      	movs	r1, #0
 800c594:	4618      	mov	r0, r3
 800c596:	f005 f908 	bl	80117aa <memset>

            /* Write the Ethernet address in Source, because it will be swapped by
             * prvTCPReturnPacket(). */
            ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 800c59a:	6a3b      	ldr	r3, [r7, #32]
 800c59c:	3306      	adds	r3, #6
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f107 030c 	add.w	r3, r7, #12
 800c5a4:	6818      	ldr	r0, [r3, #0]
 800c5a6:	6010      	str	r0, [r2, #0]
 800c5a8:	889b      	ldrh	r3, [r3, #4]
 800c5aa:	8093      	strh	r3, [r2, #4]

            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f042 0208 	orr.w	r2, r2, #8
 800c5b4:	731a      	strb	r2, [r3, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionHeaderLength = 0x45U;
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	2245      	movs	r2, #69	; 0x45
 800c5be:	701a      	strb	r2, [r3, #0]
            usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800c5c0:	2338      	movs	r3, #56	; 0x38
 800c5c2:	837b      	strh	r3, [r7, #26]
            pxIPHeader->usLength = FreeRTOS_htons( usLength );
 800c5c4:	8b7b      	ldrh	r3, [r7, #26]
 800c5c6:	021b      	lsls	r3, r3, #8
 800c5c8:	b21a      	sxth	r2, r3
 800c5ca:	8b7b      	ldrh	r3, [r7, #26]
 800c5cc:	0a1b      	lsrs	r3, r3, #8
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	b21b      	sxth	r3, r3
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	b21b      	sxth	r3, r3
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	2280      	movs	r2, #128	; 0x80
 800c5e0:	721a      	strb	r2, [r3, #8]

            pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	2206      	movs	r2, #6
 800c5e6:	725a      	strb	r2, [r3, #9]

            /* Addresses and ports will be stored swapped because prvTCPReturnPacket
             * will swap them back while replying. */
            pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c5e8:	4b28      	ldr	r3, [pc, #160]	; (800c68c <prvTCPPrepareConnect+0x22c>)
 800c5ea:	695a      	ldr	r2, [r3, #20]
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f4:	061a      	lsls	r2, r3, #24
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fa:	021b      	lsls	r3, r3, #8
 800c5fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c600:	431a      	orrs	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c606:	0a1b      	lsrs	r3, r3, #8
 800c608:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c60c:	431a      	orrs	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c612:	0e1b      	lsrs	r3, r3, #24
 800c614:	431a      	orrs	r2, r3
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	60da      	str	r2, [r3, #12]

            pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c61e:	021b      	lsls	r3, r3, #8
 800c620:	b21a      	sxth	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c626:	0a1b      	lsrs	r3, r3, #8
 800c628:	b29b      	uxth	r3, r3
 800c62a:	b21b      	sxth	r3, r3
 800c62c:	4313      	orrs	r3, r2
 800c62e:	b21b      	sxth	r3, r3
 800c630:	b29a      	uxth	r2, r3
 800c632:	6a3b      	ldr	r3, [r7, #32]
 800c634:	845a      	strh	r2, [r3, #34]	; 0x22
            pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c63a:	021b      	lsls	r3, r3, #8
 800c63c:	b21a      	sxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c642:	0a1b      	lsrs	r3, r3, #8
 800c644:	b29b      	uxth	r3, r3
 800c646:	b21b      	sxth	r3, r3
 800c648:	4313      	orrs	r3, r2
 800c64a:	b21b      	sxth	r3, r3
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	6a3b      	ldr	r3, [r7, #32]
 800c650:	849a      	strh	r2, [r3, #36]	; 0x24

            /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
             * isn't known yet. */
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

            /* Start with ISN (Initial Sequence Number). */
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c65e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
             * the high nibble of the TCP offset field. */
            pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 800c662:	6a3b      	ldr	r3, [r7, #32]
 800c664:	2250      	movs	r2, #80	; 0x50
 800c666:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Only set the SYN flag. */
            pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	2202      	movs	r2, #2
 800c66e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

            /* Set the values of usInitMSS / usCurMSS for this socket. */
            prvSocketSetMSS( pxSocket );
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f001 fdc8 	bl	800e208 <prvSocketSetMSS>

            /* The initial sequence numbers at our side are known.  Later
             * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
             * first wait for a SYN+ACK reply. */
            prvTCPCreateWindow( pxSocket );
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff feaf 	bl	800c3dc <prvTCPCreateWindow>
        }

        return xReturn;
 800c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800c680:	4618      	mov	r0, r3
 800c682:	3734      	adds	r7, #52	; 0x34
 800c684:	46bd      	mov	sp, r7
 800c686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c688:	0801447c 	.word	0x0801447c
 800c68c:	20000018 	.word	0x20000018

0800c690 <prvTCPFlagMeaning>:
 * @param[in] xFlags: The TCP flags.
 *
 * @return The string containing the flags.
 */
        static const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 800c690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c692:	b08d      	sub	sp, #52	; 0x34
 800c694:	af08      	add	r7, sp, #32
 800c696:	6078      	str	r0, [r7, #4]
            static char retString[ 10 ];
            size_t uxFlags = ( size_t ) xFlags;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d002      	beq.n	800c6ac <prvTCPFlagMeaning+0x1c>
 800c6a6:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800c6aa:	e001      	b.n	800c6b0 <prvTCPFlagMeaning+0x20>
 800c6ac:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <prvTCPFlagMeaning+0x2e>
 800c6ba:	2353      	movs	r3, #83	; 0x53
 800c6bc:	e000      	b.n	800c6c0 <prvTCPFlagMeaning+0x30>
 800c6be:	232e      	movs	r3, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 800c6c0:	68fa      	ldr	r2, [r7, #12]
 800c6c2:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 800c6c6:	2a00      	cmp	r2, #0
 800c6c8:	d001      	beq.n	800c6ce <prvTCPFlagMeaning+0x3e>
 800c6ca:	2252      	movs	r2, #82	; 0x52
 800c6cc:	e000      	b.n	800c6d0 <prvTCPFlagMeaning+0x40>
 800c6ce:	222e      	movs	r2, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 800c6d0:	68f9      	ldr	r1, [r7, #12]
 800c6d2:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 800c6d6:	2900      	cmp	r1, #0
 800c6d8:	d001      	beq.n	800c6de <prvTCPFlagMeaning+0x4e>
 800c6da:	2150      	movs	r1, #80	; 0x50
 800c6dc:	e000      	b.n	800c6e0 <prvTCPFlagMeaning+0x50>
 800c6de:	212e      	movs	r1, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d001      	beq.n	800c6ee <prvTCPFlagMeaning+0x5e>
 800c6ea:	2041      	movs	r0, #65	; 0x41
 800c6ec:	e000      	b.n	800c6f0 <prvTCPFlagMeaning+0x60>
 800c6ee:	202e      	movs	r0, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 800c6f0:	68fc      	ldr	r4, [r7, #12]
 800c6f2:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 800c6f6:	2c00      	cmp	r4, #0
 800c6f8:	d001      	beq.n	800c6fe <prvTCPFlagMeaning+0x6e>
 800c6fa:	2455      	movs	r4, #85	; 0x55
 800c6fc:	e000      	b.n	800c700 <prvTCPFlagMeaning+0x70>
 800c6fe:	242e      	movs	r4, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 800c700:	68fd      	ldr	r5, [r7, #12]
 800c702:	f005 0540 	and.w	r5, r5, #64	; 0x40
            ( void ) snprintf( retString,
 800c706:	2d00      	cmp	r5, #0
 800c708:	d001      	beq.n	800c70e <prvTCPFlagMeaning+0x7e>
 800c70a:	2545      	movs	r5, #69	; 0x45
 800c70c:	e000      	b.n	800c710 <prvTCPFlagMeaning+0x80>
 800c70e:	252e      	movs	r5, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 800c710:	68fe      	ldr	r6, [r7, #12]
 800c712:	f006 0680 	and.w	r6, r6, #128	; 0x80
            ( void ) snprintf( retString,
 800c716:	2e00      	cmp	r6, #0
 800c718:	d001      	beq.n	800c71e <prvTCPFlagMeaning+0x8e>
 800c71a:	2643      	movs	r6, #67	; 0x43
 800c71c:	e000      	b.n	800c720 <prvTCPFlagMeaning+0x90>
 800c71e:	262e      	movs	r6, #46	; 0x2e
 800c720:	9606      	str	r6, [sp, #24]
 800c722:	9505      	str	r5, [sp, #20]
 800c724:	9404      	str	r4, [sp, #16]
 800c726:	9003      	str	r0, [sp, #12]
 800c728:	9102      	str	r1, [sp, #8]
 800c72a:	9201      	str	r2, [sp, #4]
 800c72c:	9300      	str	r3, [sp, #0]
 800c72e:	4663      	mov	r3, ip
 800c730:	4a04      	ldr	r2, [pc, #16]	; (800c744 <prvTCPFlagMeaning+0xb4>)
 800c732:	210a      	movs	r1, #10
 800c734:	4804      	ldr	r0, [pc, #16]	; (800c748 <prvTCPFlagMeaning+0xb8>)
 800c736:	f005 fd51 	bl	80121dc <sniprintf>
            return retString;
 800c73a:	4b03      	ldr	r3, [pc, #12]	; (800c748 <prvTCPFlagMeaning+0xb8>)
        }
 800c73c:	4618      	mov	r0, r3
 800c73e:	3714      	adds	r7, #20
 800c740:	46bd      	mov	sp, r7
 800c742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c744:	080144c0 	.word	0x080144c0
 800c748:	2000bcec 	.word	0x2000bcec

0800c74c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    _static void prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                  const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08c      	sub	sp, #48	; 0x30
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer );
 800c756:	2322      	movs	r3, #34	; 0x22
 800c758:	623b      	str	r3, [r7, #32]
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	699a      	ldr	r2, [r3, #24]
 800c75e:	6a3b      	ldr	r3, [r7, #32]
 800c760:	4413      	add	r3, r2
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff fa22 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800c768:	61f8      	str	r0, [r7, #28]
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ( sizeof( TCPHeader_t ) - sizeof( pxTCPHeader->ucOptdata ) );
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	3314      	adds	r3, #20
 800c76e:	61bb      	str	r3, [r7, #24]
        size_t uxOptionsLength;
        size_t uxResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	617b      	str	r3, [r7, #20]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	3314      	adds	r3, #20
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	7b1b      	ldrb	r3, [r3, #12]
 800c77e:	2b50      	cmp	r3, #80	; 0x50
 800c780:	d93e      	bls.n	800c800 <prvCheckOptions+0xb4>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	7b1b      	ldrb	r3, [r3, #12]
 800c786:	091b      	lsrs	r3, r3, #4
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	3b05      	subs	r3, #5
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	74fb      	strb	r3, [r7, #19]
            uxOptionsLength = ( size_t ) ucLength;
 800c792:	7cfb      	ldrb	r3, [r7, #19]
 800c794:	627b      	str	r3, [r7, #36]	; 0x24

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	69db      	ldr	r3, [r3, #28]
 800c79a:	69ba      	ldr	r2, [r7, #24]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d22f      	bcs.n	800c800 <prvCheckOptions+0xb4>
            {
                /* Validate options size calculation. */
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	69db      	ldr	r3, [r3, #28]
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d22a      	bcs.n	800c800 <prvCheckOptions+0xb4>
                    ( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	69da      	ldr	r2, [r3, #28]
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	1ad3      	subs	r3, r2, r3
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800c7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d823      	bhi.n	800c800 <prvCheckOptions+0xb4>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	7b5b      	ldrb	r3, [r3, #13]
 800c7bc:	f003 0302 	and.w	r3, r3, #2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d002      	beq.n	800c7ca <prvCheckOptions+0x7e>
                    {
                        xHasSYNFlag = pdTRUE;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7c8:	e001      	b.n	800c7ce <prvCheckOptions+0x82>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d012      	beq.n	800c7fa <prvCheckOptions+0xae>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        uxResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 800c7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7dc:	f000 f814 	bl	800c808 <prvSingleStepTCPHeaderOptions>
 800c7e0:	60f8      	str	r0, [r7, #12]

                        if( uxResult == 0UL )
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00a      	beq.n	800c7fe <prvCheckOptions+0xb2>
                        {
                            break;
                        }

                        uxOptionsLength -= uxResult;
 800c7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	627b      	str	r3, [r7, #36]	; 0x24
                        pucPtr = &( pucPtr[ uxResult ] );
 800c7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if( uxOptionsLength == 0U )
 800c7f8:	e7e9      	b.n	800c7ce <prvCheckOptions+0x82>
                            break;
 800c7fa:	bf00      	nop
 800c7fc:	e000      	b.n	800c800 <prvCheckOptions+0xb4>
                            break;
 800c7fe:	bf00      	nop
                    }
                }
            }
        }
    }
 800c800:	bf00      	nop
 800c802:	3730      	adds	r7, #48	; 0x30
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <prvSingleStepTCPHeaderOptions>:
 */
    _static size_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08a      	sub	sp, #40	; 0x28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	61bb      	str	r3, [r7, #24]
        uint8_t ucLen;
        size_t uxIndex;
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	33d8      	adds	r3, #216	; 0xd8
 800c81e:	617b      	str	r3, [r7, #20]
        BaseType_t xReturn = pdFALSE;
 800c820:	2300      	movs	r3, #0
 800c822:	61fb      	str	r3, [r7, #28]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <prvSingleStepTCPHeaderOptions+0x2a>
        {
            /* End of options. */
            uxIndex = 0U;
 800c82c:	2300      	movs	r3, #0
 800c82e:	623b      	str	r3, [r7, #32]
 800c830:	e0d2      	b.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	2b01      	cmp	r3, #1
 800c838:	d102      	bne.n	800c840 <prvSingleStepTCPHeaderOptions+0x38>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            uxIndex = 1U;
 800c83a:	2301      	movs	r3, #1
 800c83c:	623b      	str	r3, [r7, #32]
 800c83e:	e0cb      	b.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
        }
        else if( uxRemainingOptionsBytes < 2U )
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d802      	bhi.n	800c84c <prvSingleStepTCPHeaderOptions+0x44>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            uxIndex = 0U;
 800c846:	2300      	movs	r3, #0
 800c848:	623b      	str	r3, [r7, #32]
 800c84a:	e0c5      	b.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	2b03      	cmp	r3, #3
 800c852:	d11c      	bne.n	800c88e <prvSingleStepTCPHeaderOptions+0x86>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	2b02      	cmp	r3, #2
 800c858:	d904      	bls.n	800c864 <prvSingleStepTCPHeaderOptions+0x5c>
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3301      	adds	r3, #1
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	2b03      	cmp	r3, #3
 800c862:	d002      	beq.n	800c86a <prvSingleStepTCPHeaderOptions+0x62>
                {
                    uxIndex = 0U;
 800c864:	2300      	movs	r3, #0
 800c866:	623b      	str	r3, [r7, #32]
 800c868:	e0b6      	b.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <prvSingleStepTCPHeaderOptions+0x80>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	789a      	ldrb	r2, [r3, #2]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c880:	f043 0310 	orr.w	r3, r3, #16
 800c884:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                    }

                    uxIndex = tcpTCP_OPT_WSOPT_LEN;
 800c888:	2303      	movs	r3, #3
 800c88a:	623b      	str	r3, [r7, #32]
 800c88c:	e0a4      	b.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	2b02      	cmp	r3, #2
 800c894:	d16e      	bne.n	800c974 <prvSingleStepTCPHeaderOptions+0x16c>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	2b03      	cmp	r3, #3
 800c89a:	d904      	bls.n	800c8a6 <prvSingleStepTCPHeaderOptions+0x9e>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	2b04      	cmp	r3, #4
 800c8a4:	d002      	beq.n	800c8ac <prvSingleStepTCPHeaderOptions+0xa4>
            {
                uxIndex = 0U;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	623b      	str	r3, [r7, #32]
 800c8aa:	e095      	b.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3302      	adds	r3, #2
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff f9b7 	bl	800bc24 <usChar2u16>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d00f      	beq.n	800c8e8 <prvSingleStepTCPHeaderOptions+0xe0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d104      	bne.n	800c8d8 <prvSingleStepTCPHeaderOptions+0xd0>
                    {
                        uxIndex = 0U;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	623b      	str	r3, [r7, #32]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	61fb      	str	r3, [r7, #28]
 800c8d6:	e007      	b.n	800c8e8 <prvSingleStepTCPHeaderOptions+0xe0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c8de:	693a      	ldr	r2, [r7, #16]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4840      	ldr	r0, [pc, #256]	; (800c9e4 <prvSingleStepTCPHeaderOptions+0x1dc>)
 800c8e4:	f7f4 f832 	bl	800094c <vLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d174      	bne.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
                {
                    if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d238      	bcs.n	800c96e <prvSingleStepTCPHeaderOptions+0x166>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c902:	f043 0301 	orr.w	r3, r3, #1
 800c906:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                        if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c910:	461a      	mov	r2, r3
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	4293      	cmp	r3, r2
 800c916:	d20c      	bcs.n	800c932 <prvSingleStepTCPHeaderOptions+0x12a>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	4619      	mov	r1, r3
 800c922:	4831      	ldr	r0, [pc, #196]	; (800c9e8 <prvSingleStepTCPHeaderOptions+0x1e0>)
 800c924:	f7f4 f812 	bl	800094c <vLoggingPrintf>
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	fbb2 f3f3 	udiv	r3, r2, r3
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	fb02 f203 	mul.w	r2, r2, r3
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	b29a      	uxth	r2, r3
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	b29a      	uxth	r2, r3
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	b29a      	uxth	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                    }

                    uxIndex = tcpTCP_OPT_MSS_LEN;
 800c96e:	2304      	movs	r3, #4
 800c970:	623b      	str	r3, [r7, #32]
 800c972:	e031      	b.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	785b      	ldrb	r3, [r3, #1]
 800c978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            uxIndex = 0U;
 800c97c:	2300      	movs	r3, #0
 800c97e:	623b      	str	r3, [r7, #32]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 800c980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c984:	2b01      	cmp	r3, #1
 800c986:	d927      	bls.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
 800c988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c98c:	69ba      	ldr	r2, [r7, #24]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d322      	bcc.n	800c9d8 <prvSingleStepTCPHeaderOptions+0x1d0>
                    {
                        /* Selective ACK: the peer has received a packet but it is missing
                         * earlier packets. At least this packet does not need retransmission
                         * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                         */
                        if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b05      	cmp	r3, #5
 800c998:	d119      	bne.n	800c9ce <prvSingleStepTCPHeaderOptions+0x1c6>
                        {
                            ucLen -= 2U;
 800c99a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c99e:	3b02      	subs	r3, #2
 800c9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            uxIndex += 2U;
 800c9a4:	6a3b      	ldr	r3, [r7, #32]
 800c9a6:	3302      	adds	r3, #2
 800c9a8:	623b      	str	r3, [r7, #32]

                            while( ucLen >= ( uint8_t ) 8U )
 800c9aa:	e00c      	b.n	800c9c6 <prvSingleStepTCPHeaderOptions+0x1be>
                            {
                                prvReadSackOption( pucPtr, uxIndex, pxSocket );
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	6a39      	ldr	r1, [r7, #32]
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f000 f81b 	bl	800c9ec <prvReadSackOption>
                                uxIndex += 8U;
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	623b      	str	r3, [r7, #32]
                                ucLen -= 8U;
 800c9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9c0:	3b08      	subs	r3, #8
 800c9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            while( ucLen >= ( uint8_t ) 8U )
 800c9c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ca:	2b07      	cmp	r3, #7
 800c9cc:	d8ee      	bhi.n	800c9ac <prvSingleStepTCPHeaderOptions+0x1a4>
                            /* ucLen should be 0 by now. */
                        }
                    }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                uxIndex += ( size_t ) ucLen;
 800c9ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9d2:	6a3a      	ldr	r2, [r7, #32]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	623b      	str	r3, [r7, #32]
            }
        }
        return uxIndex;
 800c9d8:	6a3b      	ldr	r3, [r7, #32]
    }
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3728      	adds	r7, #40	; 0x28
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	080144d4 	.word	0x080144d4
 800c9e8:	080144ec 	.word	0x080144ec

0800c9ec <prvReadSackOption>:
 * @param[in] pxSocket: Socket handling the TCP connection.
 */
        _static void prvReadSackOption( const uint8_t * const pucPtr,
                                        size_t uxIndex,
                                        FreeRTOS_Socket_t * const pxSocket )
        {
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08a      	sub	sp, #40	; 0x28
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff f8f5 	bl	800bbee <ulChar2u32>
 800ca04:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff f8ed 	bl	800bbee <ulChar2u32>
 800ca14:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	33d8      	adds	r3, #216	; 0xd8
 800ca1a:	69ba      	ldr	r2, [r7, #24]
 800ca1c:	69f9      	ldr	r1, [r7, #28]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f003 f994 	bl	800fd4c <ulTCPWindowTxSack>
 800ca24:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d01d      	beq.n	800ca6a <prvReadSackOption+0x7e>
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01a      	beq.n	800ca6a <prvReadSackOption+0x7e>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ca38:	2300      	movs	r3, #0
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2100      	movs	r1, #0
 800ca42:	f7fe ff5d 	bl	800b900 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f043 0202 	orr.w	r2, r3, #2
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d005      	beq.n	800ca6a <prvReadSackOption+0x7e>
                        {
                            /* The field 'xEventBits' is used to store regular socket events
                             * (at most 8), as well as 'select events', which will be left-shifted.
                             */
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	601a      	str	r2, [r3, #0]
                            pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
                        }
                    }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 800ca6a:	bf00      	nop
 800ca6c:	3720      	adds	r7, #32
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
	...

0800ca74 <prvWinScaleFactor>:
 * @param[in] pxSocket: The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800ca88:	fb02 f303 	mul.w	r3, r2, r3
 800ca8c:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffUL )
 800ca92:	e005      	b.n	800caa0 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	085b      	lsrs	r3, r3, #1
 800ca98:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 800ca9a:	7afb      	ldrb	r3, [r7, #11]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffUL )
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caa6:	d2f5      	bcs.n	800ca94 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cab4:	461a      	mov	r2, r3
 800cab6:	7afb      	ldrb	r3, [r7, #11]
 800cab8:	4803      	ldr	r0, [pc, #12]	; (800cac8 <prvWinScaleFactor+0x54>)
 800caba:	f7f3 ff47 	bl	800094c <vLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     ( unsigned ) pxSocket->u.xTCP.usInitMSS,
                                     ucFactor ) );

            return ucFactor;
 800cabe:	7afb      	ldrb	r3, [r7, #11]
        }
 800cac0:	4618      	mov	r0, r3
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	08014504 	.word	0x08014504

0800cacc <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                            TCPHeader_t * pxTCPHeader )
    {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cadc:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	2202      	movs	r2, #2
 800cae2:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2204      	movs	r2, #4
 800cae8:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800caea:	89fb      	ldrh	r3, [r7, #14]
 800caec:	0a1b      	lsrs	r3, r3, #8
 800caee:	b29b      	uxth	r3, r3
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 800caf6:	89fb      	ldrh	r3, [r7, #14]
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7ff ffb8 	bl	800ca74 <prvWinScaleFactor>
 800cb04:	4603      	mov	r3, r0
 800cb06:	461a      	mov	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

                pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2201      	movs	r2, #1
 800cb12:	761a      	strb	r2, [r3, #24]
                pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2203      	movs	r2, #3
 800cb18:	765a      	strb	r2, [r3, #25]
                pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2203      	movs	r2, #3
 800cb1e:	769a      	strb	r2, [r3, #26]
                pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	76da      	strb	r2, [r3, #27]
                uxOptionsLength = 8U;
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	60bb      	str	r3, [r7, #8]
            }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	4413      	add	r3, r2
 800cb34:	3314      	adds	r3, #20
 800cb36:	2201      	movs	r2, #1
 800cb38:	701a      	strb	r2, [r3, #0]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	683a      	ldr	r2, [r7, #0]
 800cb40:	4413      	add	r3, r2
 800cb42:	2201      	movs	r2, #1
 800cb44:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	3302      	adds	r3, #2
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	2204      	movs	r2, #4
 800cb50:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	3303      	adds	r3, #3
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	4413      	add	r3, r2
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	751a      	strb	r2, [r3, #20]
                uxOptionsLength += 4U;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	3304      	adds	r3, #4
 800cb62:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 800cb64:	68bb      	ldr	r3, [r7, #8]
    }
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    static void prvTCPTouchSocket( FreeRTOS_Socket_t * pxSocket )
    {
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b082      	sub	sp, #8
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800cb76:	f7f9 f86f 	bl	8005c58 <xTaskGetTickCount>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	661a      	str	r2, [r3, #96]	; 0x60
            }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            {
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cb86:	f36f 0382 	bfc	r3, #2, #1
 800cb8a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cb94:	f36f 0341 	bfc	r3, #1, #1
 800cb98:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800cba4:	f7f9 f858 	bl	8005c58 <xTaskGetTickCount>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	65da      	str	r2, [r3, #92]	; 0x5c
            }
        #endif

        ( void ) pxSocket;
    }
 800cbae:	bf00      	nop
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
	...

0800cbb8 <vTCPStateChange>:
 * @param[in] pxSocket: The socket whose state we are trying to change.
 * @param[in] eTCPState: The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 800cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbbc:	b088      	sub	sp, #32
 800cbbe:	af02      	add	r7, sp, #8
 800cbc0:	6078      	str	r0, [r7, #4]
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = NULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	617b      	str	r3, [r7, #20]
        BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cbd0:	2b04      	cmp	r3, #4
 800cbd2:	d906      	bls.n	800cbe2 <vTCPStateChange+0x2a>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cbda:	2b08      	cmp	r3, #8
 800cbdc:	d001      	beq.n	800cbe2 <vTCPStateChange+0x2a>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e000      	b.n	800cbe4 <vTCPStateChange+0x2c>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	613b      	str	r3, [r7, #16]
        BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800cbe6:	78fb      	ldrb	r3, [r7, #3]
 800cbe8:	2b04      	cmp	r3, #4
 800cbea:	d904      	bls.n	800cbf6 <vTCPStateChange+0x3e>
 800cbec:	78fb      	ldrb	r3, [r7, #3]
 800cbee:	2b08      	cmp	r3, #8
 800cbf0:	d001      	beq.n	800cbf6 <vTCPStateChange+0x3e>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e000      	b.n	800cbf8 <vTCPStateChange+0x40>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            BaseType_t xPreviousState = ( BaseType_t ) pxSocket->u.xTCP.ucTCPState;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cc00:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
        #endif

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 800cc02:	693a      	ldr	r2, [r7, #16]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	f000 8082 	beq.w	800cd10 <vTCPStateChange+0x158>
        {
            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d05e      	beq.n	800ccd0 <vTCPStateChange+0x118>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc18:	f003 0304 	and.w	r3, r3, #4
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d043      	beq.n	800ccaa <vTCPStateChange+0xf2>
                {
                    /* Now that it is connected, find it's parent. */
                    if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc28:	f003 0308 	and.w	r3, r3, #8
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <vTCPStateChange+0x80>
                    {
                        xParent = pxSocket;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	617b      	str	r3, [r7, #20]
 800cc36:	e00a      	b.n	800cc4e <vTCPStateChange+0x96>
                    }
                    else
                    {
                        xParent = pxSocket->u.xTCP.pxPeerSocket;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc3c:	617b      	str	r3, [r7, #20]
                        configASSERT( xParent != NULL );
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d104      	bne.n	800cc4e <vTCPStateChange+0x96>
 800cc44:	495d      	ldr	r1, [pc, #372]	; (800cdbc <vTCPStateChange+0x204>)
 800cc46:	f240 60c4 	movw	r0, #1732	; 0x6c4
 800cc4a:	f7f3 ffb5 	bl	8000bb8 <vAssertCalled>
                    }

                    if( xParent != NULL )
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d018      	beq.n	800cc86 <vTCPStateChange+0xce>
                    {
                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d102      	bne.n	800cc62 <vTCPStateChange+0xaa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	655a      	str	r2, [r3, #84]	; 0x54
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f043 0204 	orr.w	r2, r3, #4
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                            {
                                /* Library support FreeRTOS_select().  Receiving a new
                                 * connection is being translated as a READ event. */
                                if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d005      	beq.n	800cc86 <vTCPStateChange+0xce>
                                {
                                    xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	601a      	str	r2, [r3, #0]
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cc92:	f36f 0382 	bfc	r3, #2, #1
 800cc96:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cca0:	f043 0302 	orr.w	r3, r3, #2
 800cca4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800cca8:	e024      	b.n	800ccf4 <vTCPStateChange+0x13c>
                }
                else
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f043 0208 	orr.w	r2, r3, #8
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccba:	f003 0302 	and.w	r3, r3, #2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d018      	beq.n	800ccf4 <vTCPStateChange+0x13c>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	e011      	b.n	800ccf4 <vTCPStateChange+0x13c>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting a semaphore. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f043 0220 	orr.w	r2, r3, #32
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d005      	beq.n	800ccf4 <vTCPStateChange+0x13c>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	601a      	str	r2, [r3, #0]
                        xConnected = pxSocket;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe ffa8 	bl	800bc50 <prvTCPSocketIsActive>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d125      	bne.n	800cd52 <vTCPStateChange+0x19a>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cd0e:	e020      	b.n	800cd52 <vTCPStateChange+0x19a>
            }
        }
        else
        {
            if( ( ( BaseType_t ) eTCPState ) == ( ( BaseType_t ) eCLOSED ) )
 800cd10:	78fb      	ldrb	r3, [r7, #3]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d11d      	bne.n	800cd52 <vTCPStateChange+0x19a>
            {
                /* Socket goes to status eCLOSED because of a RST.
                 * When nobody owns the socket yet, delete it. */
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd1c:	f003 0304 	and.w	r3, r3, #4
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d107      	bne.n	800cd36 <vTCPStateChange+0x17e>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd2c:	f003 0302 	and.w	r3, r3, #2
 800cd30:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00d      	beq.n	800cd52 <vTCPStateChange+0x19a>
                {
                    FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
 800cd36:	4822      	ldr	r0, [pc, #136]	; (800cdc0 <vTCPStateChange+0x208>)
 800cd38:	f7f3 fe08 	bl	800094c <vLoggingPrintf>

                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd42:	f003 0308 	and.w	r3, r3, #8
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <vTCPStateChange+0x19a>
                    {
                        ( void ) FreeRTOS_closesocket( pxSocket );
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7fd fd6f 	bl	800a830 <FreeRTOS_closesocket>
                }
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	78fa      	ldrb	r2, [r7, #3]
 800cd56:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff ff07 	bl	800cb6e <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
            {
                if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800cd60:	4b18      	ldr	r3, [pc, #96]	; (800cdc4 <vTCPStateChange+0x20c>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	db1d      	blt.n	800cda4 <vTCPStateChange+0x1ec>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd6c:	2b17      	cmp	r3, #23
 800cd6e:	d019      	beq.n	800cda4 <vTCPStateChange+0x1ec>
                {
                    FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd74:	461e      	mov	r6, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cd7e:	4698      	mov	r8, r3
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f001 fdca 	bl	800e91c <FreeRTOS_GetTCPStateName>
 800cd88:	4605      	mov	r5, r0
 800cd8a:	78fb      	ldrb	r3, [r7, #3]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f001 fdc5 	bl	800e91c <FreeRTOS_GetTCPStateName>
 800cd92:	4603      	mov	r3, r0
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	9500      	str	r5, [sp, #0]
 800cd98:	4643      	mov	r3, r8
 800cd9a:	4622      	mov	r2, r4
 800cd9c:	4631      	mov	r1, r6
 800cd9e:	480a      	ldr	r0, [pc, #40]	; (800cdc8 <vTCPStateChange+0x210>)
 800cda0:	f7f3 fdd4 	bl	800094c <vLoggingPrintf>
                    xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
                }
            }
        #endif

        if( xParent != NULL )
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d002      	beq.n	800cdb0 <vTCPStateChange+0x1f8>
        {
            vSocketWakeUpUser( xParent );
 800cdaa:	6978      	ldr	r0, [r7, #20]
 800cdac:	f7fe f844 	bl	800ae38 <vSocketWakeUpUser>
        }
    }
 800cdb0:	bf00      	nop
 800cdb2:	3718      	adds	r7, #24
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdba:	bf00      	nop
 800cdbc:	08014538 	.word	0x08014538
 800cdc0:	0801456c 	.word	0x0801456c
 800cdc4:	2000bd10 	.word	0x2000bd10
 800cdc8:	08014590 	.word	0x08014590

0800cdcc <prvTCPBufferResize>:
 */
    static NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                           NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                           int32_t lDataLen,
                                                           UBaseType_t uxOptionsLength )
    {
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 800cdda:	4b32      	ldr	r3, [pc, #200]	; (800cea4 <prvTCPBufferResize+0xd8>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00b      	beq.n	800cdfa <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800cde2:	f240 53f2 	movw	r3, #1522	; 0x5f2
 800cde6:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d102      	bne.n	800cdf4 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	e019      	b.n	800ce28 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	617b      	str	r3, [r7, #20]
 800cdf8:	e016      	b.n	800ce28 <prvTCPBufferResize+0x5c>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	4413      	add	r3, r2
 800ce00:	3336      	adds	r3, #54	; 0x36
 800ce02:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	2b45      	cmp	r3, #69	; 0x45
 800ce08:	d801      	bhi.n	800ce0e <prvTCPBufferResize+0x42>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800ce0a:	2346      	movs	r3, #70	; 0x46
 800ce0c:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d004      	beq.n	800ce1e <prvTCPBufferResize+0x52>
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	69db      	ldr	r3, [r3, #28]
 800ce18:	69ba      	ldr	r2, [r7, #24]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d902      	bls.n	800ce24 <prvTCPBufferResize+0x58>
            {
                xResize = pdTRUE;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	e001      	b.n	800ce28 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800ce24:	2300      	movs	r3, #0
 800ce26:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d023      	beq.n	800ce76 <prvTCPBufferResize+0xaa>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 800ce2e:	2100      	movs	r1, #0
 800ce30:	69b8      	ldr	r0, [r7, #24]
 800ce32:	f004 fb97 	bl	8011564 <pxGetNetworkBufferWithDescriptor>
 800ce36:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d02c      	beq.n	800ce98 <prvTCPBufferResize+0xcc>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	69ba      	ldr	r2, [r7, #24]
 800ce42:	61da      	str	r2, [r3, #28]

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00c      	beq.n	800ce64 <prvTCPBufferResize+0x98>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	6998      	ldr	r0, [r3, #24]
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	6999      	ldr	r1, [r3, #24]
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	69db      	ldr	r3, [r3, #28]
 800ce56:	461a      	mov	r2, r3
 800ce58:	f004 fc83 	bl	8011762 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ce5c:	68b8      	ldr	r0, [r7, #8]
 800ce5e:	f004 fbfb 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
 800ce62:	e019      	b.n	800ce98 <prvTCPBufferResize+0xcc>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	6998      	ldr	r0, [r3, #24]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	3382      	adds	r3, #130	; 0x82
 800ce6c:	2246      	movs	r2, #70	; 0x46
 800ce6e:	4619      	mov	r1, r3
 800ce70:	f004 fc77 	bl	8011762 <memcpy>
 800ce74:	e010      	b.n	800ce98 <prvTCPBufferResize+0xcc>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d104      	bne.n	800ce86 <prvTCPBufferResize+0xba>
 800ce7c:	490a      	ldr	r1, [pc, #40]	; (800cea8 <prvTCPBufferResize+0xdc>)
 800ce7e:	f240 70b9 	movw	r0, #1977	; 0x7b9
 800ce82:	f7f3 fe99 	bl	8000bb8 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	4413      	add	r3, r2
 800ce90:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	61da      	str	r2, [r3, #28]
        }

        return pxReturn;
 800ce98:	69fb      	ldr	r3, [r7, #28]
    }
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3720      	adds	r7, #32
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	08015454 	.word	0x08015454
 800cea8:	08014538 	.word	0x08014538

0800ceac <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                                      NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                      UBaseType_t uxOptionsLength )
    {
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b096      	sub	sp, #88	; 0x58
 800ceb0:	af02      	add	r7, sp, #8
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	63fb      	str	r3, [r7, #60]	; 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d004      	beq.n	800cece <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	699b      	ldr	r3, [r3, #24]
 800ceca:	64bb      	str	r3, [r7, #72]	; 0x48
 800cecc:	e002      	b.n	800ced4 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	3382      	adds	r3, #130	; 0x82
 800ced2:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800ced4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ced6:	3322      	adds	r3, #34	; 0x22
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fe fe67 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800cede:	6478      	str	r0, [r7, #68]	; 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	33d8      	adds	r3, #216	; 0xd8
 800cee4:	63bb      	str	r3, [r7, #56]	; 0x38
        lDataLen = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	64fb      	str	r3, [r7, #76]	; 0x4c
        lStreamPos = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 800ceee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef0:	7b5b      	ldrb	r3, [r3, #13]
 800cef2:	f043 0310 	orr.w	r3, r3, #16
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cefa:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f000 809e 	beq.w	800d042 <prvTCPPrepareSend+0x196>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usCurMSS > 1U )
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d90a      	bls.n	800cf26 <prvTCPPrepareSend+0x7a>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cf16:	f107 0210 	add.w	r2, r7, #16
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf1e:	f002 fc45 	bl	800f7ac <ulTCPWindowTxGet>
 800cf22:	4603      	mov	r3, r0
 800cf24:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            if( lDataLen > 0 )
 800cf26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f340 808a 	ble.w	800d042 <prvTCPPrepareSend+0x196>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	6819      	ldr	r1, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f7ff ff48 	bl	800cdcc <prvTCPBufferResize>
 800cf3c:	6378      	str	r0, [r7, #52]	; 0x34

                if( pxNewBuffer != NULL )
 800cf3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d07b      	beq.n	800d03c <prvTCPPrepareSend+0x190>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf48:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800cf4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf4c:	699b      	ldr	r3, [r3, #24]
 800cf4e:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Map the byte stream onto ProtocolHeaders_t struct for easy
                     * access to the fields. */
                    pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800cf50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf52:	3322      	adds	r3, #34	; 0x22
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fe fe29 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800cf5a:	6478      	str	r0, [r7, #68]	; 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	3336      	adds	r3, #54	; 0x36
 800cf60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf62:	4413      	add	r3, r2
 800cf64:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	4619      	mov	r1, r3
 800cf74:	f7fe fd77 	bl	800ba66 <uxStreamBufferDistance>
 800cf78:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cf7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf80:	2301      	movs	r3, #1
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	4613      	mov	r3, r2
 800cf86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf8a:	f7fe fcb9 	bl	800b900 <uxStreamBufferGet>
 800cf8e:	62b8      	str	r0, [r7, #40]	; 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            if( ulDataGot != ( uint32_t ) lDataLen )
 800cf90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d007      	beq.n	800cfa8 <prvTCPPrepareSend+0xfc>
                            {
                                FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 800cf98:	6939      	ldr	r1, [r7, #16]
 800cf9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfa2:	4894      	ldr	r0, [pc, #592]	; (800d1f4 <prvTCPPrepareSend+0x348>)
 800cfa4:	f7f3 fcd2 	bl	800094c <vLoggingPrintf>
                        }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d044      	beq.n	800d042 <prvTCPPrepareSend+0x196>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d13c      	bne.n	800d042 <prvTCPPrepareSend+0x196>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	4619      	mov	r1, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	f7fe fd45 	bl	800ba66 <uxStreamBufferDistance>
 800cfdc:	6278      	str	r0, [r7, #36]	; 0x24

                        if( ulDistance == ulDataGot )
 800cfde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d12d      	bne.n	800d042 <prvTCPPrepareSend+0x196>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                                {
                                    /* the order of volatile accesses is undefined
                                     *  so such workaround */
                                    size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	623b      	str	r3, [r7, #32]
                                    size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	61fb      	str	r3, [r7, #28]
                                    size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	61bb      	str	r3, [r7, #24]

                                    FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d00a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d00c:	487a      	ldr	r0, [pc, #488]	; (800d1f8 <prvTCPPrepareSend+0x34c>)
 800d00e:	f7f3 fc9d 	bl	800094c <vLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800d012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d014:	7b5b      	ldrb	r3, [r3, #13]
 800d016:	f043 0301 	orr.w	r3, r3, #1
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d01e:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d026:	441a      	add	r2, r3
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	625a      	str	r2, [r3, #36]	; 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d036:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d03a:	e002      	b.n	800d042 <prvTCPPrepareSend+0x196>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 800d03c:	f04f 33ff 	mov.w	r3, #4294967295
 800d040:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 800d042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d044:	2b00      	cmp	r3, #0
 800d046:	f2c0 8095 	blt.w	800d174 <prvTCPPrepareSend+0x2c8>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d050:	2b05      	cmp	r3, #5
 800d052:	f040 808f 	bne.w	800d174 <prvTCPPrepareSend+0x2c8>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d05c:	f003 0320 	and.w	r3, r3, #32
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2b00      	cmp	r3, #0
 800d064:	d029      	beq.n	800d0ba <prvTCPPrepareSend+0x20e>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800d066:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d068:	f002 fae8 	bl	800f63c <xTCPWindowTxDone>
 800d06c:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d023      	beq.n	800d0ba <prvTCPPrepareSend+0x20e>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d078:	f36f 1345 	bfc	r3, #5, #1
 800d07c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800d080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d082:	7b5b      	ldrb	r3, [r3, #13]
 800d084:	f043 0301 	orr.w	r3, r3, #1
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d08c:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d098:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d0a2:	f043 0301 	orr.w	r3, r3, #1
 800d0a6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ac:	6a1a      	ldr	r2, [r3, #32]
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b0:	625a      	str	r2, [r3, #36]	; 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800d0b2:	2106      	movs	r1, #6
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f7ff fd7f 	bl	800cbb8 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
                {
                    if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d0c0:	2b03      	cmp	r3, #3
 800d0c2:	d90e      	bls.n	800d0e2 <prvTCPPrepareSend+0x236>
                    {
                        FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	484b      	ldr	r0, [pc, #300]	; (800d1fc <prvTCPPrepareSend+0x350>)
 800d0d0:	f7f3 fc3c 	bl	800094c <vLoggingPrintf>
                                                 pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                                 pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                        vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d0d4:	2108      	movs	r1, #8
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f7ff fd6e 	bl	800cbb8 <vTCPStateChange>
                        lDataLen = -1;
 800d0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d0e0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    }

                    if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800d0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d145      	bne.n	800d174 <prvTCPPrepareSend+0x2c8>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0ee:	f003 0301 	and.w	r3, r3, #1
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d13d      	bne.n	800d174 <prvTCPPrepareSend+0x2c8>
                    {
                        /* If there is no data to be sent, and no window-update message,
                         * we might want to send a keep-alive message. */
                        TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800d0f8:	f7f8 fdae 	bl	8005c58 <xTaskGetTickCount>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	617b      	str	r3, [r7, #20]
                        TickType_t xMax;
                        xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 800d106:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d10a:	643b      	str	r3, [r7, #64]	; 0x40

                        if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d112:	2b00      	cmp	r3, #0
 800d114:	d002      	beq.n	800d11c <prvTCPPrepareSend+0x270>
                        {
                            xMax = ( TickType_t ) ( 3U * configTICK_RATE_HZ );
 800d116:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d11a:	643b      	str	r3, [r7, #64]	; 0x40
                        }

                        if( xAge > xMax )
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d120:	429a      	cmp	r2, r3
 800d122:	d927      	bls.n	800d174 <prvTCPPrepareSend+0x2c8>
                        {
                            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800d124:	f7f8 fd98 	bl	8005c58 <xTaskGetTickCount>
 800d128:	4602      	mov	r2, r0
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	65da      	str	r2, [r3, #92]	; 0x5c

                            if( xTCPWindowLoggingLevel != 0 )
 800d12e:	4b34      	ldr	r3, [pc, #208]	; (800d200 <prvTCPPrepareSend+0x354>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00a      	beq.n	800d14c <prvTCPPrepareSend+0x2a0>
                            {
                                FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d13e:	461a      	mov	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d146:	482f      	ldr	r0, [pc, #188]	; (800d204 <prvTCPPrepareSend+0x358>)
 800d148:	f7f3 fc00 	bl	800094c <vLoggingPrintf>
                                                         pxSocket->u.xTCP.ulRemoteIP,
                                                         pxSocket->u.xTCP.usRemotePort,
                                                         pxSocket->u.xTCP.ucKeepRepCount ) );
                            }

                            pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d152:	f043 0302 	orr.w	r3, r3, #2
 800d156:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                            pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d160:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            pxSocket->u.xTCP.ucKeepRepCount++;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d16a:	3301      	adds	r3, #1
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        /* Anything to send, a change of the advertised window size, or maybe send a
         * keep-alive message? */
        if( ( lDataLen > 0 ) ||
 800d174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d176:	2b00      	cmp	r3, #0
 800d178:	dc0f      	bgt.n	800d19a <prvTCPPrepareSend+0x2ee>
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	b2db      	uxtb	r3, r3
        if( ( lDataLen > 0 ) ||
 800d186:	2b00      	cmp	r3, #0
 800d188:	d107      	bne.n	800d19a <prvTCPPrepareSend+0x2ee>
            ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d190:	f003 0302 	and.w	r3, r3, #2
 800d194:	b2db      	uxtb	r3, r3
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d196:	2b00      	cmp	r3, #0
 800d198:	d026      	beq.n	800d1e8 <prvTCPPrepareSend+0x33c>
        {
            pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800d19a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d19c:	7b5b      	ldrb	r3, [r3, #13]
 800d19e:	f023 0308 	bic.w	r3, r3, #8
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a6:	735a      	strb	r2, [r3, #13]
            pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	3314      	adds	r3, #20
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1b6:	731a      	strb	r2, [r3, #12]

            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 800d1b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1ba:	7b5b      	ldrb	r3, [r3, #13]
 800d1bc:	f043 0310 	orr.w	r3, r3, #16
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1c4:	735a      	strb	r2, [r3, #13]

            if( lDataLen != 0L )
 800d1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d006      	beq.n	800d1da <prvTCPPrepareSend+0x32e>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 800d1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1ce:	7b5b      	ldrb	r3, [r3, #13]
 800d1d0:	f043 0308 	orr.w	r3, r3, #8
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1d8:	735a      	strb	r2, [r3, #13]
            }

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	3328      	adds	r3, #40	; 0x28
 800d1de:	63fb      	str	r3, [r7, #60]	; 0x3c
            lDataLen += ( int32_t ) uxIntermediateResult;
 800d1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1e4:	4413      	add	r3, r2
 800d1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
        }

        return lDataLen;
 800d1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3750      	adds	r7, #80	; 0x50
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	080145b4 	.word	0x080145b4
 800d1f8:	080145e8 	.word	0x080145e8
 800d1fc:	08014610 	.word	0x08014610
 800d200:	2000bd10 	.word	0x2000bd10
 800d204:	08014630 	.word	0x08014630

0800d208 <prvTCPNextTimeout>:
 * @param[in] pxSocket: The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t * pxSocket )
    {
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af02      	add	r7, sp, #8
 800d20e:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d210:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d214:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d144      	bne.n	800d2aa <prvTCPNextTimeout+0xa2>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d226:	f003 0308 	and.w	r3, r3, #8
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d012      	beq.n	800d256 <prvTCPNextTimeout+0x4e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d236:	2b02      	cmp	r3, #2
 800d238:	d809      	bhi.n	800d24e <prvTCPNextTimeout+0x46>
                {
                    ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d240:	3b01      	subs	r3, #1
 800d242:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d246:	fa02 f303 	lsl.w	r3, r2, r3
 800d24a:	60bb      	str	r3, [r7, #8]
 800d24c:	e006      	b.n	800d25c <prvTCPNextTimeout+0x54>
                }
                else
                {
                    ulDelayMs = 11000UL;
 800d24e:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800d252:	60bb      	str	r3, [r7, #8]
 800d254:	e002      	b.n	800d25c <prvTCPNextTimeout+0x54>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500UL;
 800d256:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d25a:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d264:	461a      	mov	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d26c:	4618      	mov	r0, r3
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	4603      	mov	r3, r0
 800d274:	482a      	ldr	r0, [pc, #168]	; (800d320 <prvTCPNextTimeout+0x118>)
 800d276:	f7f3 fb69 	bl	800094c <vLoggingPrintf>
                                     pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d280:	fb02 f303 	mul.w	r3, r2, r3
 800d284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d288:	d30a      	bcc.n	800d2a0 <prvTCPNextTimeout+0x98>
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d290:	fb02 f303 	mul.w	r3, r2, r3
 800d294:	4a23      	ldr	r2, [pc, #140]	; (800d324 <prvTCPNextTimeout+0x11c>)
 800d296:	fba2 2303 	umull	r2, r3, r2, r3
 800d29a:	099b      	lsrs	r3, r3, #6
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	e000      	b.n	800d2a2 <prvTCPNextTimeout+0x9a>
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d2a8:	e033      	b.n	800d312 <prvTCPNextTimeout+0x10a>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d12e      	bne.n	800d312 <prvTCPNextTimeout+0x10a>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d2c0:	f107 0208 	add.w	r2, r7, #8
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	f002 fa11 	bl	800f6ec <xTCPWindowTxHasData>
 800d2ca:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d108      	bne.n	800d2e4 <prvTCPNextTimeout+0xdc>
            {
                if( xResult != ( BaseType_t ) 0 )
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <prvTCPNextTimeout+0xd6>
                {
                    ulDelayMs = 1UL;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	60bb      	str	r3, [r7, #8]
 800d2dc:	e002      	b.n	800d2e4 <prvTCPNextTimeout+0xdc>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d2de:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d2e2:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d2ea:	fb02 f303 	mul.w	r3, r2, r3
 800d2ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2f2:	d30a      	bcc.n	800d30a <prvTCPNextTimeout+0x102>
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d2fa:	fb02 f303 	mul.w	r3, r2, r3
 800d2fe:	4a09      	ldr	r2, [pc, #36]	; (800d324 <prvTCPNextTimeout+0x11c>)
 800d300:	fba2 2303 	umull	r2, r3, r2, r3
 800d304:	099b      	lsrs	r3, r3, #6
 800d306:	b29a      	uxth	r2, r3
 800d308:	e000      	b.n	800d30c <prvTCPNextTimeout+0x104>
 800d30a:	2201      	movs	r2, #1
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    }
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	08014650 	.word	0x08014650
 800d324:	10624dd3 	.word	0x10624dd3

0800d328 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket: The socket owning the connection.
 */
    static void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d334:	4618      	mov	r0, r3
 800d336:	f7fe fbdc 	bl	800baf2 <uxStreamBufferMidSpace>
 800d33a:	4603      	mov	r3, r0
 800d33c:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	dd17      	ble.n	800d374 <prvTCPAddTxData+0x4c>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800d34a:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d350:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800d352:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d358:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800d35a:	f002 f873 	bl	800f444 <lTCPWindowTxAdd>
 800d35e:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2b00      	cmp	r3, #0
 800d364:	dd06      	ble.n	800d374 <prvTCPAddTxData+0x4c>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d36a:	68ba      	ldr	r2, [r7, #8]
 800d36c:	4611      	mov	r1, r2
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fe fbd3 	bl	800bb1a <vStreamBufferMoveMid>
            }
        }
    }
 800d374:	bf00      	nop
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d37c:	b5b0      	push	{r4, r5, r7, lr}
 800d37e:	b08a      	sub	sp, #40	; 0x28
 800d380:	af02      	add	r7, sp, #8
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	699b      	ldr	r3, [r3, #24]
 800d38a:	3322      	adds	r3, #34	; 0x22
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7fe fc0d 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800d392:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d398:	2300      	movs	r3, #0
 800d39a:	74fb      	strb	r3, [r7, #19]
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	7b5b      	ldrb	r3, [r3, #13]
 800d3a0:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	33d8      	adds	r3, #216	; 0xd8
 800d3a6:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	061a      	lsls	r2, r3, #24
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3bc:	431a      	orrs	r2, r3
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	0a1b      	lsrs	r3, r3, #8
 800d3c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d3c8:	431a      	orrs	r2, r3
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	0e1b      	lsrs	r3, r3, #24
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800d3d4:	7cbb      	ldrb	r3, [r7, #18]
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d004      	beq.n	800d3e8 <prvTCPHandleFin+0x6c>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	695b      	ldr	r3, [r3, #20]
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10b      	bne.n	800d410 <prvTCPHandleFin+0x94>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6a1a      	ldr	r2, [r3, #32]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	625a      	str	r2, [r3, #36]	; 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d40a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d40e:	e00c      	b.n	800d42a <prvTCPHandleFin+0xae>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d414:	3301      	adds	r3, #1
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d106      	bne.n	800d42a <prvTCPHandleFin+0xae>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d422:	f043 0301 	orr.w	r3, r3, #1
 800d426:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10b      	bne.n	800d452 <prvTCPHandleFin+0xd6>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2211      	movs	r2, #17
 800d446:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 800d448:	210a      	movs	r1, #10
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7ff fbb4 	bl	800cbb8 <vTCPStateChange>
 800d450:	e023      	b.n	800d49a <prvTCPHandleFin+0x11e>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d456:	1c5a      	adds	r2, r3, #1
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d462:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d466:	b2db      	uxtb	r3, r3
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d103      	bne.n	800d474 <prvTCPHandleFin+0xf8>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	2200      	movs	r2, #0
 800d470:	735a      	strb	r2, [r3, #13]
 800d472:	e012      	b.n	800d49a <prvTCPHandleFin+0x11e>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d47a:	f003 0302 	and.w	r3, r3, #2
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	d103      	bne.n	800d48c <prvTCPHandleFin+0x110>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	2210      	movs	r2, #16
 800d488:	735a      	strb	r2, [r3, #13]
 800d48a:	e002      	b.n	800d492 <prvTCPHandleFin+0x116>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2200      	movs	r2, #0
 800d490:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d492:	2108      	movs	r1, #8
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff fb8f 	bl	800cbb8 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6a1a      	ldr	r2, [r3, #32]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	62da      	str	r2, [r3, #44]	; 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	7b5b      	ldrb	r3, [r3, #13]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d006      	beq.n	800d4b8 <prvTCPHandleFin+0x13c>
        {
            ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4b0:	3328      	adds	r3, #40	; 0x28
 800d4b2:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 800d4b4:	7cfb      	ldrb	r3, [r7, #19]
 800d4b6:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4be:	3314      	adds	r3, #20
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	b2da      	uxtb	r2, r3
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 800d4ca:	4b14      	ldr	r3, [pc, #80]	; (800d51c <prvTCPHandleFin+0x1a0>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d01f      	beq.n	800d512 <prvTCPHandleFin+0x196>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %lu, cur/nxt %lu/%lu) ourSeqNr %lu | Rx %lu\n",
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	69db      	ldr	r3, [r3, #28]
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	1ad0      	subs	r0, r2, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6a1a      	ldr	r2, [r3, #32]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	69db      	ldr	r3, [r3, #28]
 800d4e2:	1ad4      	subs	r4, r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	1ad5      	subs	r5, r2, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	6911      	ldr	r1, [r2, #16]
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	68d2      	ldr	r2, [r2, #12]
 800d500:	1a8a      	subs	r2, r1, r2
 800d502:	9201      	str	r2, [sp, #4]
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	462b      	mov	r3, r5
 800d508:	4622      	mov	r2, r4
 800d50a:	4601      	mov	r1, r0
 800d50c:	4804      	ldr	r0, [pc, #16]	; (800d520 <prvTCPHandleFin+0x1a4>)
 800d50e:	f7f3 fa1d 	bl	800094c <vLoggingPrintf>
                                     pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
        }

        return xSendLength;
 800d512:	69fb      	ldr	r3, [r7, #28]
    }
 800d514:	4618      	mov	r0, r3
 800d516:	3720      	adds	r7, #32
 800d518:	46bd      	mov	sp, r7
 800d51a:	bdb0      	pop	{r4, r5, r7, pc}
 800d51c:	2000bd10 	.word	0x2000bd10
 800d520:	0801467c 	.word	0x0801467c

0800d524 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    static BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint8_t ** ppucRecvData )
    {
 800d524:	b580      	push	{r7, lr}
 800d526:	b08c      	sub	sp, #48	; 0x30
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	699b      	ldr	r3, [r3, #24]
 800d532:	3322      	adds	r3, #34	; 0x22
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fb39 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800d53a:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800d53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53e:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */
        const IPHeader_t * pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	330e      	adds	r3, #14
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe fb0f 	bl	800bb6a <vCastConstPointerTo_IPHeader_t>
 800d54c:	6238      	str	r0, [r7, #32]
        const size_t xIPHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800d54e:	2314      	movs	r3, #20
 800d550:	61fb      	str	r3, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 800d552:	2300      	movs	r3, #0
 800d554:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	7b1b      	ldrb	r3, [r3, #12]
 800d55a:	089b      	lsrs	r3, r3, #2
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800d562:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 800d564:	7efb      	ldrb	r3, [r7, #27]
 800d566:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	699a      	ldr	r2, [r3, #24]
 800d56c:	6979      	ldr	r1, [r7, #20]
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	440b      	add	r3, r1
 800d572:	330e      	adds	r3, #14
 800d574:	441a      	add	r2, r3
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	69db      	ldr	r3, [r3, #28]
 800d57e:	3b0e      	subs	r3, #14
 800d580:	62fb      	str	r3, [r7, #44]	; 0x2c

        usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	885b      	ldrh	r3, [r3, #2]
 800d586:	b29b      	uxth	r3, r3
 800d588:	021b      	lsls	r3, r3, #8
 800d58a:	b21a      	sxth	r2, r3
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	885b      	ldrh	r3, [r3, #2]
 800d590:	b29b      	uxth	r3, r3
 800d592:	0a1b      	lsrs	r3, r3, #8
 800d594:	b29b      	uxth	r3, r3
 800d596:	b21b      	sxth	r3, r3
 800d598:	4313      	orrs	r3, r2
 800d59a:	b21b      	sxth	r3, r3
 800d59c:	827b      	strh	r3, [r7, #18]
        lLength = ( int32_t ) usLength;
 800d59e:	8a7b      	ldrh	r3, [r7, #18]
 800d5a0:	60fb      	str	r3, [r7, #12]

        if( lReceiveLength > lLength )
 800d5a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	dd01      	ble.n	800d5ae <prvCheckRxData+0x8a>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 800d5ae:	69fa      	ldr	r2, [r7, #28]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	dd06      	ble.n	800d5c8 <prvCheckRxData+0xa4>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 800d5ba:	69fa      	ldr	r2, [r7, #28]
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	4413      	add	r3, r2
 800d5c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5c6:	e001      	b.n	800d5cc <prvCheckRxData+0xa8>
        }
        else
        {
            lReceiveLength = 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	7b5b      	ldrb	r3, [r3, #13]
 800d5d0:	f003 0320 	and.w	r3, r3, #32
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d01c      	beq.n	800d612 <prvCheckRxData+0xee>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	8a5b      	ldrh	r3, [r3, #18]
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	021b      	lsls	r3, r3, #8
 800d5e0:	b21a      	sxth	r2, r3
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e4:	8a5b      	ldrh	r3, [r3, #18]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	0a1b      	lsrs	r3, r3, #8
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	b21b      	sxth	r3, r3
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	b21b      	sxth	r3, r3
 800d5f2:	b29b      	uxth	r3, r3
 800d5f4:	60bb      	str	r3, [r7, #8]
            *ppucRecvData += lUrgentLength;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	441a      	add	r2, r3
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d606:	f7fe f9ef 	bl	800b9e8 <FreeRTOS_min_int32>
 800d60a:	4602      	mov	r2, r0
 800d60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60e:	1a9b      	subs	r3, r3, r2
 800d610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        return ( BaseType_t ) lReceiveLength;
 800d612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800d614:	4618      	mov	r0, r3
 800d616:	3730      	adds	r7, #48	; 0x30
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <prvStoreRxData>:
 */
    static BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                                      const uint8_t * pucRecvData,
                                      NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint32_t ulReceiveLength )
    {
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08c      	sub	sp, #48	; 0x30
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
 800d628:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	699b      	ldr	r3, [r3, #24]
 800d62e:	3322      	adds	r3, #34	; 0x22
 800d630:	4618      	mov	r0, r3
 800d632:	f7fe fac6 	bl	800bbc2 <vCastConstPointerTo_ProtocolHeaders_t>
 800d636:	6278      	str	r0, [r7, #36]	; 0x24
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63a:	623b      	str	r3, [r7, #32]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	33d8      	adds	r3, #216	; 0xd8
 800d640:	61fb      	str	r3, [r7, #28]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 800d642:	2300      	movs	r3, #0
 800d644:	62bb      	str	r3, [r7, #40]	; 0x28

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d646:	6a3b      	ldr	r3, [r7, #32]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	061a      	lsls	r2, r3, #24
 800d64c:	6a3b      	ldr	r3, [r7, #32]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	021b      	lsls	r3, r3, #8
 800d652:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d656:	431a      	orrs	r2, r3
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	0a1b      	lsrs	r3, r3, #8
 800d65e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d662:	431a      	orrs	r2, r3
 800d664:	6a3b      	ldr	r3, [r7, #32]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	0e1b      	lsrs	r3, r3, #24
 800d66a:	4313      	orrs	r3, r2
 800d66c:	61bb      	str	r3, [r7, #24]

        if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d044      	beq.n	800d6fe <prvStoreRxData+0xe2>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d67a:	2b03      	cmp	r3, #3
 800d67c:	d93f      	bls.n	800d6fe <prvStoreRxData+0xe2>
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d682:	2b00      	cmp	r3, #0
 800d684:	d006      	beq.n	800d694 <prvStoreRxData+0x78>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fe fa09 	bl	800baa2 <uxStreamBufferGetSpace>
 800d690:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d692:	e002      	b.n	800d69a <prvStoreRxData+0x7e>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d698:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	69b9      	ldr	r1, [r7, #24]
 800d6a0:	69f8      	ldr	r0, [r7, #28]
 800d6a2:	f001 fd5b 	bl	800f15c <lTCPWindowRxCheck>
 800d6a6:	6178      	str	r0, [r7, #20]

            if( lOffset >= 0 )
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	db15      	blt.n	800d6da <prvStoreRxData+0xbe>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800d6ae:	6979      	ldr	r1, [r7, #20]
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	f7fd fd3b 	bl	800b130 <lTCPAddRxdata>
 800d6ba:	6138      	str	r0, [r7, #16]

                if( lStored != ( int32_t ) ulReceiveLength )
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d00a      	beq.n	800d6da <prvStoreRxData+0xbe>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );
 800d6c4:	683a      	ldr	r2, [r7, #0]
 800d6c6:	6939      	ldr	r1, [r7, #16]
 800d6c8:	4812      	ldr	r0, [pc, #72]	; (800d714 <prvStoreRxData+0xf8>)
 800d6ca:	f7f3 f93f 	bl	800094c <vLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 fd8c 	bl	800e1ec <prvTCPSendReset>
                    xResult = -1;
 800d6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d8:	62bb      	str	r3, [r7, #40]	; 0x28
            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    /* Now lTCPAddRxdata() will move the rxHead pointer forward
                     * so data becomes available to the user immediately
                     * In case the low-water mark is reached, bLowWater will be set. */
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d113      	bne.n	800d708 <prvStoreRxData+0xec>
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00f      	beq.n	800d708 <prvStoreRxData+0xec>
                    {
                        ( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f7fd fd1d 	bl	800b130 <lTCPAddRxdata>
                        pxTCPWindow->ulUserDataLength = 0;
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	631a      	str	r2, [r3, #48]	; 0x30
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800d6fc:	e004      	b.n	800d708 <prvStoreRxData+0xec>
                }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	2200      	movs	r2, #0
 800d702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d706:	e000      	b.n	800d70a <prvStoreRxData+0xee>
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800d708:	bf00      	nop
        }

        return xResult;
 800d70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 800d70c:	4618      	mov	r0, r3
 800d70e:	3730      	adds	r7, #48	; 0x30
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	080146c0 	.word	0x080146c0

0800d718 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    static UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d718:	b590      	push	{r4, r7, lr}
 800d71a:	b08b      	sub	sp, #44	; 0x2c
 800d71c:	af02      	add	r7, sp, #8
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	3322      	adds	r3, #34	; 0x22
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fe fa3f 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800d72e:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	33d8      	adds	r3, #216	; 0xd8
 800d738:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d740:	61fb      	str	r3, [r7, #28]
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            if( uxOptionsLength != 0U )
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d05b      	beq.n	800d800 <prvSetOptions+0xe8>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 800d748:	4b4e      	ldr	r3, [pc, #312]	; (800d884 <prvSetOptions+0x16c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	db43      	blt.n	800d7d8 <prvSetOptions+0xc0>
                {
                    FreeRTOS_debug_printf( ( "SACK[%d,%d]: optlen %lu sending %lu - %lu\n",
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d754:	4618      	mov	r0, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d75a:	461c      	mov	r4, r3
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d762:	061a      	lsls	r2, r3, #24
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d76a:	021b      	lsls	r3, r3, #8
 800d76c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d770:	431a      	orrs	r2, r3
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d778:	0a1b      	lsrs	r3, r3, #8
 800d77a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d77e:	431a      	orrs	r2, r3
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d786:	0e1b      	lsrs	r3, r3, #24
 800d788:	431a      	orrs	r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	693a      	ldr	r2, [r7, #16]
 800d794:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800d798:	0611      	lsls	r1, r2, #24
 800d79a:	693a      	ldr	r2, [r7, #16]
 800d79c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800d7a0:	0212      	lsls	r2, r2, #8
 800d7a2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800d7a6:	4311      	orrs	r1, r2
 800d7a8:	693a      	ldr	r2, [r7, #16]
 800d7aa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800d7ae:	0a12      	lsrs	r2, r2, #8
 800d7b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800d7b4:	4311      	orrs	r1, r2
 800d7b6:	693a      	ldr	r2, [r7, #16]
 800d7b8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800d7bc:	0e12      	lsrs	r2, r2, #24
 800d7be:	4311      	orrs	r1, r2
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800d7c6:	1a8a      	subs	r2, r1, r2
 800d7c8:	9201      	str	r2, [sp, #4]
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	4601      	mov	r1, r0
 800d7d2:	482d      	ldr	r0, [pc, #180]	; (800d888 <prvSetOptions+0x170>)
 800d7d4:	f7f3 f8ba 	bl	800094c <vLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	3380      	adds	r3, #128	; 0x80
 800d7dc:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	3314      	adds	r3, #20
 800d7e2:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 800d7e4:	69fa      	ldr	r2, [r7, #28]
 800d7e6:	68f9      	ldr	r1, [r7, #12]
 800d7e8:	68b8      	ldr	r0, [r7, #8]
 800d7ea:	f003 ffba 	bl	8011762 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	3314      	adds	r3, #20
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	731a      	strb	r2, [r3, #12]
 800d7fe:	e03c      	b.n	800d87a <prvSetOptions+0x162>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d806:	2b04      	cmp	r3, #4
 800d808:	d937      	bls.n	800d87a <prvSetOptions+0x162>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d02f      	beq.n	800d87a <prvSetOptions+0x162>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d820:	f36f 0300 	bfc	r3, #0, #1
 800d824:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

            if( xTCPWindowLoggingLevel >= 0 )
 800d828:	4b16      	ldr	r3, [pc, #88]	; (800d884 <prvSetOptions+0x16c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	db06      	blt.n	800d83e <prvSetOptions+0x126>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d836:	4619      	mov	r1, r3
 800d838:	4814      	ldr	r0, [pc, #80]	; (800d88c <prvSetOptions+0x174>)
 800d83a:	f7f3 f887 	bl	800094c <vLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2202      	movs	r2, #2
 800d842:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	2204      	movs	r2, #4
 800d848:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d850:	0a1b      	lsrs	r3, r3, #8
 800d852:	b29b      	uxth	r3, r3
 800d854:	b2da      	uxtb	r2, r3
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d860:	b2da      	uxtb	r2, r3
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 800d866:	2304      	movs	r3, #4
 800d868:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	3314      	adds	r3, #20
 800d870:	b2db      	uxtb	r3, r3
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	b2da      	uxtb	r2, r3
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 800d87a:	69fb      	ldr	r3, [r7, #28]
    }
 800d87c:	4618      	mov	r0, r3
 800d87e:	3724      	adds	r7, #36	; 0x24
 800d880:	46bd      	mov	sp, r7
 800d882:	bd90      	pop	{r4, r7, pc}
 800d884:	2000bd10 	.word	0x2000bd10
 800d888:	080146ec 	.word	0x080146ec
 800d88c:	08014718 	.word	0x08014718

0800d890 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800d890:	b590      	push	{r4, r7, lr}
 800d892:	b091      	sub	sp, #68	; 0x44
 800d894:	af02      	add	r7, sp, #8
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
 800d89c:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	3322      	adds	r3, #34	; 0x22
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fe f981 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800d8aa:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800d8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ae:	62bb      	str	r3, [r7, #40]	; 0x28
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	33d8      	adds	r3, #216	; 0xd8
 800d8b4:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	7b5b      	ldrb	r3, [r3, #13]
 800d8ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	061a      	lsls	r2, r3, #24
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	021b      	lsls	r3, r3, #8
 800d8ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	0a1b      	lsrs	r3, r3, #8
 800d8d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d8da:	431a      	orrs	r2, r3
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	0e1b      	lsrs	r3, r3, #24
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	61fb      	str	r3, [r7, #28]
        BaseType_t xSendLength = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	637b      	str	r3, [r7, #52]	; 0x34
        UBaseType_t uxIntermediateResult = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	61bb      	str	r3, [r7, #24]

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 800d8ee:	2310      	movs	r3, #16
 800d8f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d105      	bne.n	800d90a <prvHandleSynReceived+0x7a>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 800d8fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d902:	f043 0302 	orr.w	r3, r3, #2
 800d906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 800d90a:	2317      	movs	r3, #23
 800d90c:	75fb      	strb	r3, [r7, #23]

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800d90e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d912:	7dfb      	ldrb	r3, [r7, #23]
 800d914:	4013      	ands	r3, r2
 800d916:	b2db      	uxtb	r3, r3
 800d918:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d03f      	beq.n	800d9a0 <prvHandleSynReceived+0x110>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d926:	2b04      	cmp	r3, #4
 800d928:	d101      	bne.n	800d92e <prvHandleSynReceived+0x9e>
 800d92a:	4967      	ldr	r1, [pc, #412]	; (800dac8 <prvHandleSynReceived+0x238>)
 800d92c:	e000      	b.n	800d930 <prvHandleSynReceived+0xa0>
 800d92e:	4967      	ldr	r1, [pc, #412]	; (800dacc <prvHandleSynReceived+0x23c>)
 800d930:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d938:	4865      	ldr	r0, [pc, #404]	; (800dad0 <prvHandleSynReceived+0x240>)
 800d93a:	f7f3 f807 	bl	800094c <vLoggingPrintf>
                                     ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d93e:	2108      	movs	r1, #8
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f7ff f939 	bl	800cbb8 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 800d946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	061a      	lsls	r2, r3, #24
 800d94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	021b      	lsls	r3, r3, #8
 800d952:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d956:	431a      	orrs	r2, r3
 800d958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	0a1b      	lsrs	r3, r3, #8
 800d95e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d962:	431a      	orrs	r2, r3
 800d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	0e1b      	lsrs	r3, r3, #24
 800d96a:	431a      	orrs	r2, r3
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	62da      	str	r2, [r3, #44]	; 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800d970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d972:	69fa      	ldr	r2, [r7, #28]
 800d974:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d978:	7b5b      	ldrb	r3, [r3, #13]
 800d97a:	f043 0304 	orr.w	r3, r3, #4
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d982:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	3328      	adds	r3, #40	; 0x28
 800d988:	61bb      	str	r3, [r7, #24]
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	637b      	str	r3, [r7, #52]	; 0x34

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	b2db      	uxtb	r3, r3
 800d992:	3314      	adds	r3, #20
 800d994:	b2db      	uxtb	r3, r3
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99c:	731a      	strb	r2, [r3, #12]
 800d99e:	e08d      	b.n	800dabc <prvHandleSynReceived+0x22c>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d9ba:	2b02      	cmp	r3, #2
 800d9bc:	d12a      	bne.n	800da14 <prvHandleSynReceived+0x184>
            {
                /* Map the Last packet onto the ProtocolHeader_t struct for easy access to the fields. */
                ProtocolHeaders_t * pxLastHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	33a4      	adds	r3, #164	; 0xa4
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe f8f2 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800d9c8:	6138      	str	r0, [r7, #16]
                                                                            &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	2210      	movs	r2, #16
 800d9ce:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d2:	2210      	movs	r2, #16
 800d9d4:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800d9e8:	69f9      	ldr	r1, [r7, #28]
 800d9ea:	f001 fadd 	bl	800efa8 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f4:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	1c5a      	adds	r2, r3, #1
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fc:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	6a1b      	ldr	r3, [r3, #32]
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da06:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da0c:	1c5a      	adds	r2, r3, #1
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da10:	635a      	str	r2, [r3, #52]	; 0x34
 800da12:	e005      	b.n	800da20 <prvHandleSynReceived+0x190>
            }
            else if( ulReceiveLength == 0U )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d102      	bne.n	800da20 <prvHandleSynReceived+0x190>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1c:	69fa      	ldr	r2, [r7, #28]
 800da1e:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da22:	69db      	ldr	r3, [r3, #28]
 800da24:	1c5a      	adds	r2, r3, #1
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	62da      	str	r2, [r3, #44]	; 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800da30:	2b02      	cmp	r3, #2
 800da32:	d101      	bne.n	800da38 <prvHandleSynReceived+0x1a8>
 800da34:	4927      	ldr	r1, [pc, #156]	; (800dad4 <prvHandleSynReceived+0x244>)
 800da36:	e000      	b.n	800da3a <prvHandleSynReceived+0x1aa>
 800da38:	4927      	ldr	r1, [pc, #156]	; (800dad8 <prvHandleSynReceived+0x248>)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da3e:	461c      	mov	r4, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800da48:	4618      	mov	r0, r3
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800da54:	b2db      	uxtb	r3, r3
 800da56:	9301      	str	r3, [sp, #4]
 800da58:	9000      	str	r0, [sp, #0]
 800da5a:	4613      	mov	r3, r2
 800da5c:	4622      	mov	r2, r4
 800da5e:	481f      	ldr	r0, [pc, #124]	; (800dadc <prvHandleSynReceived+0x24c>)
 800da60:	f7f2 ff74 	bl	800094c <vLoggingPrintf>
                                             pxSocket->u.xTCP.usRemotePort,
                                             ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
                }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d002      	beq.n	800da74 <prvHandleSynReceived+0x1e4>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00f      	beq.n	800da94 <prvHandleSynReceived+0x204>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da76:	2210      	movs	r2, #16
 800da78:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	3328      	adds	r3, #40	; 0x28
 800da7e:	61bb      	str	r3, [r7, #24]
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	637b      	str	r3, [r7, #52]	; 0x34
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	b2db      	uxtb	r3, r3
 800da88:	3314      	adds	r3, #20
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da92:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
                {
                    if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da9a:	f003 0310 	and.w	r3, r3, #16
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d107      	bne.n	800dab4 <prvHandleSynReceived+0x224>
                    {
                        /* The other party did not send a scaling factor.
                         * A shifting factor in this side must be canceled. */
                        pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2200      	movs	r2, #0
 800daa8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 800dab4:	2105      	movs	r1, #5
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f7ff f87e 	bl	800cbb8 <vTCPStateChange>
        }

        return xSendLength;
 800dabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800dabe:	4618      	mov	r0, r3
 800dac0:	373c      	adds	r7, #60	; 0x3c
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd90      	pop	{r4, r7, pc}
 800dac6:	bf00      	nop
 800dac8:	0801472c 	.word	0x0801472c
 800dacc:	0801473c 	.word	0x0801473c
 800dad0:	0801474c 	.word	0x0801474c
 800dad4:	08014770 	.word	0x08014770
 800dad8:	08014778 	.word	0x08014778
 800dadc:	08014780 	.word	0x08014780

0800dae0 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b096      	sub	sp, #88	; 0x58
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	699b      	ldr	r3, [r3, #24]
 800daf4:	3322      	adds	r3, #34	; 0x22
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fe f858 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800dafc:	6478      	str	r0, [r7, #68]	; 0x44
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800dafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db00:	643b      	str	r3, [r7, #64]	; 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	33d8      	adds	r3, #216	; 0xd8
 800db06:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800db08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db0a:	7b5b      	ldrb	r3, [r3, #13]
 800db0c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 800db10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	061a      	lsls	r2, r3, #24
 800db16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	021b      	lsls	r3, r3, #8
 800db1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db20:	431a      	orrs	r2, r3
 800db22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	0a1b      	lsrs	r3, r3, #8
 800db28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800db2c:	431a      	orrs	r2, r3
 800db2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	0e1b      	lsrs	r3, r3, #24
 800db34:	4313      	orrs	r3, r2
 800db36:	637b      	str	r3, [r7, #52]	; 0x34
 800db38:	2300      	movs	r3, #0
 800db3a:	633b      	str	r3, [r7, #48]	; 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800db3c:	2300      	movs	r3, #0
 800db3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db40:	2300      	movs	r3, #0
 800db42:	64bb      	str	r3, [r7, #72]	; 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 800db44:	2300      	movs	r3, #0
 800db46:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800db48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db4a:	89db      	ldrh	r3, [r3, #14]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	021b      	lsls	r3, r3, #8
 800db50:	b21a      	sxth	r2, r3
 800db52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db54:	89db      	ldrh	r3, [r3, #14]
 800db56:	b29b      	uxth	r3, r3
 800db58:	0a1b      	lsrs	r3, r3, #8
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	b21b      	sxth	r3, r3
 800db5e:	4313      	orrs	r3, r2
 800db60:	b21b      	sxth	r3, r3
 800db62:	857b      	strh	r3, [r7, #42]	; 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800db64:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ulWindowSize =
                    ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800db78:	fa03 f202 	lsl.w	r2, r3, r2
                pxSocket->u.xTCP.ulWindowSize =
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 800db82:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800db86:	f003 0310 	and.w	r3, r3, #16
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d03c      	beq.n	800dc08 <prvHandleEstablished+0x128>
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 800db8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db90:	689b      	ldr	r3, [r3, #8]
 800db92:	061a      	lsls	r2, r3, #24
 800db94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	021b      	lsls	r3, r3, #8
 800db9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db9e:	431a      	orrs	r2, r3
 800dba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	0a1b      	lsrs	r3, r3, #8
 800dba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dbaa:	431a      	orrs	r2, r3
 800dbac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	0e1b      	lsrs	r3, r3, #24
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbb8:	f002 f8aa 	bl	800fd10 <ulTCPWindowTxAck>
 800dbbc:	6278      	str	r0, [r7, #36]	; 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d020      	beq.n	800dc08 <prvHandleEstablished+0x128>
 800dbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d01d      	beq.n	800dc08 <prvHandleEstablished+0x128>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	2100      	movs	r1, #0
 800dbda:	f7fd fe91 	bl	800b900 <uxStreamBufferGet>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d011      	beq.n	800dc08 <prvHandleEstablished+0x128>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f043 0202 	orr.w	r2, r3, #2
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf4:	f003 0302 	and.w	r3, r3, #2
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d005      	beq.n	800dc08 <prvHandleEstablished+0x128>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	601a      	str	r2, [r3, #0]
            }
        }

        /* If this socket has a stream for transmission, add the data to the
         * outgoing segment(s). */
        if( pxSocket->u.xTCP.txStream != NULL )
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d002      	beq.n	800dc16 <prvHandleEstablished+0x136>
        {
            prvTCPAddTxData( pxSocket );
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f7ff fb89 	bl	800d328 <prvTCPAddTxData>
        }

        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800dc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc18:	6a1a      	ldr	r2, [r3, #32]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

        if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc26:	f003 0320 	and.w	r3, r3, #32
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d105      	bne.n	800dc3c <prvHandleEstablished+0x15c>
 800dc30:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dc34:	f003 0301 	and.w	r3, r3, #1
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d06a      	beq.n	800dd12 <prvHandleEstablished+0x232>
        {
            /* Peer is requesting to stop, see if we're really finished. */
            xMayClose = pdTRUE;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Checks are only necessary if we haven't sent a FIN yet. */
            if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d139      	bne.n	800dcc4 <prvHandleEstablished+0x1e4>
            {
                /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800dc50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dc52:	f001 f89f 	bl	800ed94 <xTCPWindowRxEmpty>
 800dc56:	6238      	str	r0, [r7, #32]
                bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800dc58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dc5a:	f001 fcef 	bl	800f63c <xTCPWindowTxDone>
 800dc5e:	61f8      	str	r0, [r7, #28]

                if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d002      	beq.n	800dc6c <prvHandleEstablished+0x18c>
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10e      	bne.n	800dc8a <prvHandleEstablished+0x1aa>
                {
                    /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                    FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc70:	4619      	mov	r1, r3
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dc76:	461a      	mov	r2, r3
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	9300      	str	r3, [sp, #0]
 800dc7c:	6a3b      	ldr	r3, [r7, #32]
 800dc7e:	483f      	ldr	r0, [pc, #252]	; (800dd7c <prvHandleEstablished+0x29c>)
 800dc80:	f7f2 fe64 	bl	800094c <vLoggingPrintf>
                                             pxSocket->usLocalPort,
                                             pxSocket->u.xTCP.usRemotePort,
                                             bRxComplete, bTxDone ) );
                    xMayClose = pdFALSE;
 800dc84:	2300      	movs	r3, #0
 800dc86:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc88:	e01c      	b.n	800dcc4 <prvHandleEstablished+0x1e4>
                }
                else
                {
                    ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800dc8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	441a      	add	r2, r3
 800dc90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	633b      	str	r3, [r7, #48]	; 0x30
                    lDistance = ( int32_t ) ulIntermediateResult;
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	61bb      	str	r3, [r7, #24]

                    if( lDistance > 1 )
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	dd10      	ble.n	800dcc4 <prvHandleEstablished+0x1e4>
                    {
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
 800dca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dca4:	691a      	ldr	r2, [r3, #16]
 800dca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	1ad1      	subs	r1, r2, r3
 800dcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcae:	699a      	ldr	r2, [r3, #24]
 800dcb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	460a      	mov	r2, r1
 800dcb8:	69b9      	ldr	r1, [r7, #24]
 800dcba:	4831      	ldr	r0, [pc, #196]	; (800dd80 <prvHandleEstablished+0x2a0>)
 800dcbc:	f7f2 fe46 	bl	800094c <vLoggingPrintf>
                                                 lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
                                                 pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

                        xMayClose = pdFALSE;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                }
            }

            if( xTCPWindowLoggingLevel > 0 )
 800dcc4:	4b2f      	ldr	r3, [pc, #188]	; (800dd84 <prvHandleEstablished+0x2a4>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	dd11      	ble.n	800dcf0 <prvHandleEstablished+0x210>
            {
                FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dcd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcd4:	1ad1      	subs	r1, r2, r3
 800dcd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcd8:	6a1a      	ldr	r2, [r3, #32]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	460a      	mov	r2, r1
 800dce8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dcea:	4827      	ldr	r0, [pc, #156]	; (800dd88 <prvHandleEstablished+0x2a8>)
 800dcec:	f7f2 fe2e 	bl	800094c <vLoggingPrintf>
                                         xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
                                         pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
            }

            if( xMayClose != pdFALSE )
 800dcf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00d      	beq.n	800dd12 <prvHandleEstablished+0x232>
            {
                pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800dcfc:	f043 0320 	orr.w	r3, r3, #32
 800dd00:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f7ff fb36 	bl	800d37c <prvTCPHandleFin>
 800dd10:	64f8      	str	r0, [r7, #76]	; 0x4c
            }
        }

        if( xMayClose == pdFALSE )
 800dd12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d12c      	bne.n	800dd72 <prvHandleEstablished+0x292>
        {
            pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800dd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd1a:	2210      	movs	r2, #16
 800dd1c:	735a      	strb	r2, [r3, #13]

            if( ulReceiveLength != 0U )
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d018      	beq.n	800dd56 <prvHandleEstablished+0x276>
            {
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	3328      	adds	r3, #40	; 0x28
 800dd28:	62fb      	str	r3, [r7, #44]	; 0x2c
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800dd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2c:	64fb      	str	r3, [r7, #76]	; 0x4c
                /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	3314      	adds	r3, #20
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd3c:	731a      	strb	r2, [r3, #12]

                if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d003      	beq.n	800dd56 <prvHandleEstablished+0x276>
                {
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800dd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd54:	621a      	str	r2, [r3, #32]

            /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
             * can not send-out both TCP options and also a full packet. Sending
             * options (SACK) is always more urgent than sending data, which can be
             * sent later. */
            if( uxOptionsLength == 0U )
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d10a      	bne.n	800dd72 <prvHandleEstablished+0x292>
            {
                /* prvTCPPrepareSend might allocate a bigger network buffer, if
                 * necessary. */
                lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	68b9      	ldr	r1, [r7, #8]
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f7ff f8a3 	bl	800ceac <prvTCPPrepareSend>
 800dd66:	6178      	str	r0, [r7, #20]

                if( lSendResult > 0 )
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	dd01      	ble.n	800dd72 <prvHandleEstablished+0x292>
                {
                    xSendLength = ( BaseType_t ) lSendResult;
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }
        }

        return xSendLength;
 800dd72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800dd74:	4618      	mov	r0, r3
 800dd76:	3750      	adds	r7, #80	; 0x50
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	080147b0 	.word	0x080147b0
 800dd80:	080147e0 	.word	0x080147e0
 800dd84:	2000bd10 	.word	0x2000bd10
 800dd88:	08014818 	.word	0x08014818

0800dd8c <prvSendData>:
 */
    static BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                   uint32_t ulReceiveLength,
                                   BaseType_t xByteCount )
    {
 800dd8c:	b5b0      	push	{r4, r5, r7, lr}
 800dd8e:	b090      	sub	sp, #64	; 0x40
 800dd90:	af04      	add	r7, sp, #16
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
 800dd98:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	699b      	ldr	r3, [r3, #24]
 800dda0:	3322      	adds	r3, #34	; 0x22
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7fd ff02 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800dda8:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800ddaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddac:	627b      	str	r3, [r7, #36]	; 0x24
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	33d8      	adds	r3, #216	; 0xd8
 800ddb2:	623b      	str	r3, [r7, #32]
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	62fb      	str	r3, [r7, #44]	; 0x2c
            #endif
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
            {
                #if ( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
                    {
                        lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ddce:	005b      	lsls	r3, r3, #1
 800ddd0:	617b      	str	r3, [r7, #20]
                #endif /* ipconfigTCP_ACK_EARLIER_PACKET */

                /* In case we're receiving data continuously, we might postpone sending
                 * an ACK to gain performance. */
                /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
                if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d071      	beq.n	800debc <prvSendData+0x130>
 800ddd8:	69ba      	ldr	r2, [r7, #24]
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	db6d      	blt.n	800debc <prvSendData+0x130>
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dde6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddea:	b2db      	uxtb	r3, r3
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d165      	bne.n	800debc <prvSendData+0x130>
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800ddf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf2:	2b28      	cmp	r3, #40	; 0x28
 800ddf4:	d162      	bne.n	800debc <prvSendData+0x130>
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
 800ddfc:	2b05      	cmp	r3, #5
 800ddfe:	d15d      	bne.n	800debc <prvSendData+0x130>
                    ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )                              /* There are no other flags than an ACK. */
 800de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de02:	7b5b      	ldrb	r3, [r3, #13]
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800de04:	2b10      	cmp	r3, #16
 800de06:	d159      	bne.n	800debc <prvSendData+0x130>
                {
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	429a      	cmp	r2, r3
 800de12:	d00c      	beq.n	800de2e <prvSendData+0xa2>
                    {
                        /* There was still a delayed in queue, delete it. */
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <prvSendData+0x9a>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de20:	4618      	mov	r0, r3
 800de22:	f003 fc19 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
                        }

                        pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800de34:	461a      	mov	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4293      	cmp	r3, r2
 800de3a:	d307      	bcc.n	800de4c <prvSendData+0xc0>
                        ( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) ) /* There are less than 2 x MSS space in the Rx buffer. */
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800de42:	005b      	lsls	r3, r3, #1
 800de44:	461a      	mov	r2, r3
                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	4293      	cmp	r3, r2
 800de4a:	da04      	bge.n	800de56 <prvSendData+0xca>
                    {
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2202      	movs	r2, #2
 800de50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800de54:	e003      	b.n	800de5e <prvSendData+0xd2>
                    else
                    {
                        /* Normally a delayed ACK should wait 200 ms for a next incoming
                         * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                         * for full-size message. */
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2214      	movs	r2, #20
 800de5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    }

                    if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800de5e:	4b3a      	ldr	r3, [pc, #232]	; (800df48 <prvSendData+0x1bc>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2b01      	cmp	r3, #1
 800de64:	dd24      	ble.n	800deb0 <prvSendData+0x124>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de6a:	2b17      	cmp	r3, #23
 800de6c:	d020      	beq.n	800deb0 <prvSendData+0x124>
                    {
                        FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %lu) tmout %u d %lu\n",
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de72:	461c      	mov	r4, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800de78:	461d      	mov	r5, r3
 800de7a:	6a3b      	ldr	r3, [r7, #32]
 800de7c:	691a      	ldr	r2, [r3, #16]
 800de7e:	6a3b      	ldr	r3, [r7, #32]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	1ad1      	subs	r1, r2, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800de8a:	6a3b      	ldr	r3, [r7, #32]
 800de8c:	69db      	ldr	r3, [r3, #28]
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800de96:	4610      	mov	r0, r2
 800de98:	69ba      	ldr	r2, [r7, #24]
 800de9a:	9203      	str	r2, [sp, #12]
 800de9c:	9002      	str	r0, [sp, #8]
 800de9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dea0:	9201      	str	r2, [sp, #4]
 800dea2:	9300      	str	r3, [sp, #0]
 800dea4:	460b      	mov	r3, r1
 800dea6:	462a      	mov	r2, r5
 800dea8:	4621      	mov	r1, r4
 800deaa:	4828      	ldr	r0, [pc, #160]	; (800df4c <prvSendData+0x1c0>)
 800deac:	f7f2 fd4e 	bl	800094c <vLoggingPrintf>
                                                 pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                                 xSendLength,
                                                 pxSocket->u.xTCP.usTimeout, lRxSpace ) );
                    }

                    *ppxNetworkBuffer = NULL;
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2200      	movs	r2, #0
 800deb4:	601a      	str	r2, [r3, #0]
                    xSendLength = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800deba:	e011      	b.n	800dee0 <prvSendData+0x154>
                }
                else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00d      	beq.n	800dee0 <prvSendData+0x154>
                {
                    /* As an ACK is not being delayed, remove any earlier delayed ACK
                     * message. */
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	429a      	cmp	r2, r3
 800dece:	d004      	beq.n	800deda <prvSendData+0x14e>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ded4:	4618      	mov	r0, r3
 800ded6:	f003 fbbf 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	67da      	str	r2, [r3, #124]	; 0x7c
                ( void ) pxTCPHeader;
                ( void ) lRxSpace;
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 800dee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d02a      	beq.n	800df3c <prvSendData+0x1b0>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800dee6:	4b18      	ldr	r3, [pc, #96]	; (800df48 <prvSendData+0x1bc>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2b01      	cmp	r3, #1
 800deec:	dd1c      	ble.n	800df28 <prvSendData+0x19c>
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800def2:	2b17      	cmp	r3, #23
 800def4:	d018      	beq.n	800df28 <prvSendData+0x19c>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %lu SEQ %lu (len %lu)\n",
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800defa:	4618      	mov	r0, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800df00:	461c      	mov	r4, r3
 800df02:	6a3b      	ldr	r3, [r7, #32]
 800df04:	691a      	ldr	r2, [r3, #16]
 800df06:	6a3b      	ldr	r3, [r7, #32]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	1ad1      	subs	r1, r2, r3
 800df0c:	6a3b      	ldr	r3, [r7, #32]
 800df0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df10:	6a3b      	ldr	r3, [r7, #32]
 800df12:	69db      	ldr	r3, [r3, #28]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df18:	9201      	str	r2, [sp, #4]
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	460b      	mov	r3, r1
 800df1e:	4622      	mov	r2, r4
 800df20:	4601      	mov	r1, r0
 800df22:	480b      	ldr	r0, [pc, #44]	; (800df50 <prvSendData+0x1c4>)
 800df24:	f7f2 fd12 	bl	800094c <vLoggingPrintf>
                                         xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	6819      	ldr	r1, [r3, #0]
 800df2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df2e:	2301      	movs	r3, #1
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f7fe f859 	bl	800bfe8 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* The driver has taken ownership of the Network Buffer. */
                    *ppxNetworkBuffer = NULL;
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	2200      	movs	r2, #0
 800df3a:	601a      	str	r2, [r3, #0]
                }
            #endif
        }

        return xSendLength;
 800df3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800df3e:	4618      	mov	r0, r3
 800df40:	3730      	adds	r7, #48	; 0x30
 800df42:	46bd      	mov	sp, r7
 800df44:	bdb0      	pop	{r4, r5, r7, pc}
 800df46:	bf00      	nop
 800df48:	2000bd10 	.word	0x2000bd10
 800df4c:	08014854 	.word	0x08014854
 800df50:	08014890 	.word	0x08014890

0800df54 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800df54:	b580      	push	{r7, lr}
 800df56:	b08c      	sub	sp, #48	; 0x30
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	699b      	ldr	r3, [r3, #24]
 800df64:	3322      	adds	r3, #34	; 0x22
 800df66:	4618      	mov	r0, r3
 800df68:	f7fd fe20 	bl	800bbac <vCastPointerTo_ProtocolHeaders_t>
 800df6c:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800df6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df70:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xSendLength = 0;
 800df72:	2300      	movs	r3, #0
 800df74:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800df76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	061a      	lsls	r2, r3, #24
 800df7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	021b      	lsls	r3, r3, #8
 800df82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df86:	431a      	orrs	r2, r3
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	0a1b      	lsrs	r3, r3, #8
 800df8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800df92:	431a      	orrs	r2, r3
 800df94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	0e1b      	lsrs	r3, r3, #24
 800df9a:	4313      	orrs	r3, r2
 800df9c:	623b      	str	r3, [r7, #32]
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	61fb      	str	r3, [r7, #28]
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	7b5b      	ldrb	r3, [r3, #13]
 800dfa6:	76fb      	strb	r3, [r7, #27]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	33d8      	adds	r3, #216	; 0xd8
 800dfac:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIntermediateResult = 0;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	613b      	str	r3, [r7, #16]

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f107 0208 	add.w	r2, r7, #8
 800dfba:	4611      	mov	r1, r2
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7ff fab1 	bl	800d524 <prvCheckRxData>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dfcc:	2b04      	cmp	r3, #4
 800dfce:	d90c      	bls.n	800dfea <prvTCPHandleState+0x96>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	691a      	ldr	r2, [r3, #16]
 800dfd4:	6a3b      	ldr	r3, [r7, #32]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d106      	bne.n	800dfea <prvTCPHandleState+0x96>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800dfe2:	f043 0301 	orr.w	r3, r3, #1
 800dfe6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        if( ( ulSequenceNumber + ulReceiveLength ) > pxTCPWindow->rx.ulHighestSequenceNumber )
 800dfea:	6a3a      	ldr	r2, [r7, #32]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	441a      	add	r2, r3
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d904      	bls.n	800e002 <prvTCPHandleState+0xae>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800dff8:	6a3a      	ldr	r2, [r7, #32]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	441a      	add	r2, r3
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800e002:	68b9      	ldr	r1, [r7, #8]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f7ff fb06 	bl	800d61c <prvStoreRxData>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	da03      	bge.n	800e01e <prvTCPHandleState+0xca>
        {
            xSendLength = -1;
 800e016:	f04f 33ff 	mov.w	r3, #4294967295
 800e01a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e01c:	e0a6      	b.n	800e16c <prvTCPHandleState+0x218>
        }
        else
        {
            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4619      	mov	r1, r3
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff fb77 	bl	800d718 <prvSetOptions>
 800e02a:	61f8      	str	r0, [r7, #28]

            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e032:	2b04      	cmp	r3, #4
 800e034:	d10b      	bne.n	800e04e <prvTCPHandleState+0xfa>
 800e036:	7efb      	ldrb	r3, [r7, #27]
 800e038:	f003 031f 	and.w	r3, r3, #31
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	d106      	bne.n	800e04e <prvTCPHandleState+0xfa>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 800e040:	4852      	ldr	r0, [pc, #328]	; (800e18c <prvTCPHandleState+0x238>)
 800e042:	f7f2 fc83 	bl	800094c <vLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 800e046:	2103      	movs	r1, #3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7fe fdb5 	bl	800cbb8 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800e04e:	7efb      	ldrb	r3, [r7, #27]
 800e050:	f003 0301 	and.w	r3, r3, #1
 800e054:	2b00      	cmp	r3, #0
 800e056:	d022      	beq.n	800e09e <prvTCPHandleState+0x14a>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e05e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e062:	b2db      	uxtb	r3, r3
 800e064:	2b00      	cmp	r3, #0
 800e066:	d11a      	bne.n	800e09e <prvTCPHandleState+0x14a>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e068:	6a3a      	ldr	r2, [r7, #32]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	441a      	add	r2, r3
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e07c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d106      	bne.n	800e09e <prvTCPHandleState+0x14a>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800e096:	f043 0302 	orr.w	r3, r3, #2
 800e09a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                }
            }

            switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e0a4:	2b0b      	cmp	r3, #11
 800e0a6:	d860      	bhi.n	800e16a <prvTCPHandleState+0x216>
 800e0a8:	a201      	add	r2, pc, #4	; (adr r2, 800e0b0 <prvTCPHandleState+0x15c>)
 800e0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ae:	bf00      	nop
 800e0b0:	0800e16b 	.word	0x0800e16b
 800e0b4:	0800e16b 	.word	0x0800e16b
 800e0b8:	0800e139 	.word	0x0800e139
 800e0bc:	0800e0e1 	.word	0x0800e0e1
 800e0c0:	0800e139 	.word	0x0800e139
 800e0c4:	0800e14b 	.word	0x0800e14b
 800e0c8:	0800e15b 	.word	0x0800e15b
 800e0cc:	0800e15b 	.word	0x0800e15b
 800e0d0:	0800e16b 	.word	0x0800e16b
 800e0d4:	0800e16b 	.word	0x0800e16b
 800e0d8:	0800e15b 	.word	0x0800e15b
 800e0dc:	0800e16b 	.word	0x0800e16b
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800e0e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f7fe fcf2 	bl	800cacc <prvSetSynAckOptions>
 800e0e8:	61f8      	str	r0, [r7, #28]
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ec:	2212      	movs	r2, #18
 800e0ee:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	3328      	adds	r3, #40	; 0x28
 800e0f4:	613b      	str	r3, [r7, #16]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	3314      	adds	r3, #20
 800e100:	b2db      	uxtb	r3, r3
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	b2da      	uxtb	r2, r3
 800e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e108:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800e10a:	2104      	movs	r1, #4
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7fe fd53 	bl	800cbb8 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	1c5a      	adds	r2, r3, #1
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 800e11a:	6a3b      	ldr	r3, [r7, #32]
 800e11c:	1c5a      	adds	r2, r3, #1
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	69db      	ldr	r3, [r3, #28]
 800e126:	1c5a      	adds	r2, r3, #1
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	635a      	str	r2, [r3, #52]	; 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	69db      	ldr	r3, [r3, #28]
 800e130:	1c5a      	adds	r2, r3, #1
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	621a      	str	r2, [r3, #32]
                    break;
 800e136:	e019      	b.n	800e16c <prvTCPHandleState+0x218>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	6819      	ldr	r1, [r3, #0]
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f7ff fba5 	bl	800d890 <prvHandleSynReceived>
 800e146:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800e148:	e010      	b.n	800e16c <prvTCPHandleState+0x218>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	6839      	ldr	r1, [r7, #0]
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7ff fcc5 	bl	800dae0 <prvHandleEstablished>
 800e156:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800e158:	e008      	b.n	800e16c <prvTCPHandleState+0x218>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4619      	mov	r1, r3
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7ff f90b 	bl	800d37c <prvTCPHandleFin>
 800e166:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800e168:	e000      	b.n	800e16c <prvTCPHandleState+0x218>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 800e16a:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 800e16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16e:	2b00      	cmp	r3, #0
 800e170:	dd06      	ble.n	800e180 <prvTCPHandleState+0x22c>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	6839      	ldr	r1, [r7, #0]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7ff fe07 	bl	800dd8c <prvSendData>
 800e17e:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        return xSendLength;
 800e180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800e182:	4618      	mov	r0, r3
 800e184:	3730      	adds	r7, #48	; 0x30
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	080148bc 	.word	0x080148bc

0800e190 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    static BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                     uint8_t ucTCPFlags )
    {
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	460b      	mov	r3, r1
 800e19a:	70fb      	strb	r3, [r7, #3]
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
            {
                /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */
                TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	699b      	ldr	r3, [r3, #24]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fd fced 	bl	800bb80 <vCastPointerTo_TCPPacket_t>
 800e1a6:	60f8      	str	r0, [r7, #12]
                const uint32_t ulSendLength =
 800e1a8:	2328      	movs	r3, #40	; 0x28
 800e1aa:	60bb      	str	r3, [r7, #8]
                    ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ); /* Plus 0 options. */

                pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	78fa      	ldrb	r2, [r7, #3]
 800e1b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2250      	movs	r2, #80	; 0x50
 800e1b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 800e1bc:	2300      	movs	r3, #0
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	6879      	ldr	r1, [r7, #4]
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	f7fd ff10 	bl	800bfe8 <prvTCPReturnPacket>
            }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return pdFAIL;
 800e1c8:	2300      	movs	r3, #0
    }
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b082      	sub	sp, #8
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 800e1da:	2110      	movs	r1, #16
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7ff ffd7 	bl	800e190 <prvTCPSendSpecialPacketHelper>
 800e1e2:	4603      	mov	r3, r0
    }
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 800e1f4:	2114      	movs	r1, #20
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7ff ffca 	bl	800e190 <prvTCPSendSpecialPacketHelper>
 800e1fc:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 800e1fe:	4618      	mov	r0, r3
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket: The socket whose MSS is to be set.
 */
    static void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
        uint32_t ulMSS = ipconfigTCP_MSS;
 800e210:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e214:	60fb      	str	r3, [r7, #12]

        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e21a:	061a      	lsls	r2, r3, #24
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e220:	021b      	lsls	r3, r3, #8
 800e222:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e226:	431a      	orrs	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22c:	0a1b      	lsrs	r3, r3, #8
 800e22e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e232:	431a      	orrs	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e238:	0e1b      	lsrs	r3, r3, #24
 800e23a:	431a      	orrs	r2, r3
 800e23c:	4b11      	ldr	r3, [pc, #68]	; (800e284 <prvSocketSetMSS+0x7c>)
 800e23e:	695b      	ldr	r3, [r3, #20]
 800e240:	405a      	eors	r2, r3
 800e242:	4b11      	ldr	r3, [pc, #68]	; (800e288 <prvSocketSetMSS+0x80>)
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	4013      	ands	r3, r2
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d005      	beq.n	800e258 <prvSocketSetMSS+0x50>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800e24c:	68f9      	ldr	r1, [r7, #12]
 800e24e:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800e252:	f7fd fbd9 	bl	800ba08 <FreeRTOS_min_uint32>
 800e256:	60f8      	str	r0, [r7, #12]
        }

        FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e260:	68f9      	ldr	r1, [r7, #12]
 800e262:	480a      	ldr	r0, [pc, #40]	; (800e28c <prvSocketSetMSS+0x84>)
 800e264:	f7f2 fb72 	bl	800094c <vLoggingPrintf>

        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ulMSS;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	b29a      	uxth	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }
 800e27c:	bf00      	nop
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	20000018 	.word	0x20000018
 800e288:	2000bc7c 	.word	0x2000bc7c
 800e28c:	080148fc 	.word	0x080148fc

0800e290 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 800e290:	b580      	push	{r7, lr}
 800e292:	b092      	sub	sp, #72	; 0x48
 800e294:	af02      	add	r7, sp, #8
 800e296:	6078      	str	r0, [r7, #4]
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	60fb      	str	r3, [r7, #12]

        /* Map the buffer onto a ProtocolHeaders_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	699b      	ldr	r3, [r3, #24]
 800e2a0:	3322      	adds	r3, #34	; 0x22
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fd fc8d 	bl	800bbc2 <vCastConstPointerTo_ProtocolHeaders_t>
 800e2a8:	6378      	str	r0, [r7, #52]	; 0x34
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        FreeRTOS_Socket_t * pxSocket;
        uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 800e2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ac:	7b5b      	ldrb	r3, [r3, #13]
 800e2ae:	867b      	strh	r3, [r7, #50]	; 0x32
        uint32_t ulLocalIP;
        uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 800e2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b2:	885b      	ldrh	r3, [r3, #2]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	021b      	lsls	r3, r3, #8
 800e2b8:	b21a      	sxth	r2, r3
 800e2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2bc:	885b      	ldrh	r3, [r3, #2]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	0a1b      	lsrs	r3, r3, #8
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	b21b      	sxth	r3, r3
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	b21b      	sxth	r3, r3
 800e2ca:	863b      	strh	r3, [r7, #48]	; 0x30
        uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 800e2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	021b      	lsls	r3, r3, #8
 800e2d4:	b21a      	sxth	r2, r3
 800e2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	0a1b      	lsrs	r3, r3, #8
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	b21b      	sxth	r3, r3
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	b21b      	sxth	r3, r3
 800e2e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t ulRemoteIP;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800e2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	061a      	lsls	r2, r3, #24
 800e2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	021b      	lsls	r3, r3, #8
 800e2f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e2f8:	431a      	orrs	r2, r3
 800e2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	0a1b      	lsrs	r3, r3, #8
 800e300:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e304:	431a      	orrs	r2, r3
 800e306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	0e1b      	lsrs	r3, r3, #24
 800e30c:	4313      	orrs	r3, r2
 800e30e:	62bb      	str	r3, [r7, #40]	; 0x28
        uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );
 800e310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	061a      	lsls	r2, r3, #24
 800e316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e318:	689b      	ldr	r3, [r3, #8]
 800e31a:	021b      	lsls	r3, r3, #8
 800e31c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e320:	431a      	orrs	r2, r3
 800e322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	0a1b      	lsrs	r3, r3, #8
 800e328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e32c:	431a      	orrs	r2, r3
 800e32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	0e1b      	lsrs	r3, r3, #24
 800e334:	4313      	orrs	r3, r2
 800e336:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xResult = pdPASS;
 800e338:	2301      	movs	r3, #1
 800e33a:	63bb      	str	r3, [r7, #56]	; 0x38

        configASSERT( pxNetworkBuffer != NULL );
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d104      	bne.n	800e34c <xProcessReceivedTCPPacket+0xbc>
 800e342:	49af      	ldr	r1, [pc, #700]	; (800e600 <xProcessReceivedTCPPacket+0x370>)
 800e344:	f640 5088 	movw	r0, #3464	; 0xd88
 800e348:	f7f2 fc36 	bl	8000bb8 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	699b      	ldr	r3, [r3, #24]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d104      	bne.n	800e35e <xProcessReceivedTCPPacket+0xce>
 800e354:	49aa      	ldr	r1, [pc, #680]	; (800e600 <xProcessReceivedTCPPacket+0x370>)
 800e356:	f640 5089 	movw	r0, #3465	; 0xd89
 800e35a:	f7f2 fc2d 	bl	8000bb8 <vAssertCalled>
        const IPHeader_t * pxIPHeader;

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	69db      	ldr	r3, [r3, #28]
 800e362:	2b35      	cmp	r3, #53	; 0x35
 800e364:	d802      	bhi.n	800e36c <xProcessReceivedTCPPacket+0xdc>
        {
            xResult = pdFAIL;
 800e366:	2300      	movs	r3, #0
 800e368:	63bb      	str	r3, [r7, #56]	; 0x38
 800e36a:	e143      	b.n	800e5f4 <xProcessReceivedTCPPacket+0x364>
        }
        else
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	699b      	ldr	r3, [r3, #24]
 800e370:	330e      	adds	r3, #14
 800e372:	4618      	mov	r0, r3
 800e374:	f7fd fbf9 	bl	800bb6a <vCastConstPointerTo_IPHeader_t>
 800e378:	6238      	str	r0, [r7, #32]
            ulLocalIP = FreeRTOS_htonl( pxIPHeader->ulDestinationIPAddress );
 800e37a:	6a3b      	ldr	r3, [r7, #32]
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	061a      	lsls	r2, r3, #24
 800e380:	6a3b      	ldr	r3, [r7, #32]
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	021b      	lsls	r3, r3, #8
 800e386:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e38a:	431a      	orrs	r2, r3
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	0a1b      	lsrs	r3, r3, #8
 800e392:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e396:	431a      	orrs	r2, r3
 800e398:	6a3b      	ldr	r3, [r7, #32]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	0e1b      	lsrs	r3, r3, #24
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	61fb      	str	r3, [r7, #28]
            ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 800e3a2:	6a3b      	ldr	r3, [r7, #32]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	061a      	lsls	r2, r3, #24
 800e3a8:	6a3b      	ldr	r3, [r7, #32]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	021b      	lsls	r3, r3, #8
 800e3ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3b2:	431a      	orrs	r2, r3
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	0a1b      	lsrs	r3, r3, #8
 800e3ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e3be:	431a      	orrs	r2, r3
 800e3c0:	6a3b      	ldr	r3, [r7, #32]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	0e1b      	lsrs	r3, r3, #24
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	61bb      	str	r3, [r7, #24]

            /* Find the destination socket, and if not found: return a socket listing to
             * the destination PORT. */
            pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800e3ca:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800e3cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e3ce:	69ba      	ldr	r2, [r7, #24]
 800e3d0:	69f8      	ldr	r0, [r7, #28]
 800e3d2:	f7fc fde3 	bl	800af9c <pxTCPSocketLookup>
 800e3d6:	63f8      	str	r0, [r7, #60]	; 0x3c

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 800e3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d008      	beq.n	800e3f0 <xProcessReceivedTCPPacket+0x160>
 800e3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3e0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fd fc33 	bl	800bc50 <prvTCPSocketIsActive>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d116      	bne.n	800e41e <xProcessReceivedTCPPacket+0x18e>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%lxip:%d)\n", xLocalPort, ulRemoteIP, xRemotePort ) );
 800e3f0:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800e3f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e3f4:	69ba      	ldr	r2, [r7, #24]
 800e3f6:	4883      	ldr	r0, [pc, #524]	; (800e604 <xProcessReceivedTCPPacket+0x374>)
 800e3f8:	f7f2 faa8 	bl	800094c <vLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800e3fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e3fe:	f003 031f 	and.w	r3, r3, #31
 800e402:	2b10      	cmp	r3, #16
 800e404:	d008      	beq.n	800e418 <xProcessReceivedTCPPacket+0x188>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 800e406:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e408:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d103      	bne.n	800e418 <xProcessReceivedTCPPacket+0x188>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	4618      	mov	r0, r3
 800e414:	f7ff feea 	bl	800e1ec <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 800e418:	2300      	movs	r3, #0
 800e41a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e41c:	e092      	b.n	800e544 <xProcessReceivedTCPPacket+0x2b4>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 800e41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800e426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e428:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d129      	bne.n	800e484 <xProcessReceivedTCPPacket+0x1f4>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 800e430:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e432:	f003 031f 	and.w	r3, r3, #31
 800e436:	2b02      	cmp	r3, #2
 800e438:	d018      	beq.n	800e46c <xProcessReceivedTCPPacket+0x1dc>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
 800e43a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fe f927 	bl	800c690 <prvTCPFlagMeaning>
 800e442:	4601      	mov	r1, r0
 800e444:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e446:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e448:	9300      	str	r3, [sp, #0]
 800e44a:	4613      	mov	r3, r2
 800e44c:	69ba      	ldr	r2, [r7, #24]
 800e44e:	486e      	ldr	r0, [pc, #440]	; (800e608 <xProcessReceivedTCPPacket+0x378>)
 800e450:	f7f2 fa7c 	bl	800094c <vLoggingPrintf>
                                                         prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 800e454:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e456:	f003 0304 	and.w	r3, r3, #4
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d103      	bne.n	800e466 <xProcessReceivedTCPPacket+0x1d6>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	4618      	mov	r0, r3
 800e462:	f7ff fec3 	bl	800e1ec <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 800e466:	2300      	movs	r3, #0
 800e468:	63bb      	str	r3, [r7, #56]	; 0x38
 800e46a:	e06b      	b.n	800e544 <xProcessReceivedTCPPacket+0x2b4>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	4619      	mov	r1, r3
 800e470:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e472:	f000 f8cf 	bl	800e614 <prvHandleListen>
 800e476:	63f8      	str	r0, [r7, #60]	; 0x3c

                        if( pxSocket == NULL )
 800e478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d162      	bne.n	800e544 <xProcessReceivedTCPPacket+0x2b4>
                        {
                            xResult = pdFAIL;
 800e47e:	2300      	movs	r3, #0
 800e480:	63bb      	str	r3, [r7, #56]	; 0x38
 800e482:	e05f      	b.n	800e544 <xProcessReceivedTCPPacket+0x2b4>
                } /* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 800e484:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e486:	f003 0304 	and.w	r3, r3, #4
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d038      	beq.n	800e500 <xProcessReceivedTCPPacket+0x270>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
 800e48e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e490:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e492:	69b9      	ldr	r1, [r7, #24]
 800e494:	485d      	ldr	r0, [pc, #372]	; (800e60c <xProcessReceivedTCPPacket+0x37c>)
 800e496:	f7f2 fa59 	bl	800094c <vLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800e49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e49c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	d10b      	bne.n	800e4bc <xProcessReceivedTCPPacket+0x22c>
                        {
                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 800e4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4a6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d123      	bne.n	800e4fa <xProcessReceivedTCPPacket+0x26a>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e4b6:	f7fe fb7f 	bl	800cbb8 <vTCPStateChange>
 800e4ba:	e01e      	b.n	800e4fa <xProcessReceivedTCPPacket+0x26a>
                            }
                        }
                        else
                        {
                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800e4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e4c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d104      	bne.n	800e4d2 <xProcessReceivedTCPPacket+0x242>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e4cc:	f7fe fb74 	bl	800cbb8 <vTCPStateChange>
 800e4d0:	e013      	b.n	800e4fa <xProcessReceivedTCPPacket+0x26a>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800e4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e4d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d90d      	bls.n	800e4fa <xProcessReceivedTCPPacket+0x26a>
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800e4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4e0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
                                                            pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) ) )
 800e4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800e4ea:	4413      	add	r3, r2
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800e4ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d203      	bcs.n	800e4fa <xProcessReceivedTCPPacket+0x26a>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7ff fe6c 	bl	800e1d2 <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4fe:	e021      	b.n	800e544 <xProcessReceivedTCPPacket+0x2b4>
                    }
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 800e500:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e502:	f003 031f 	and.w	r3, r3, #31
 800e506:	2b02      	cmp	r3, #2
 800e508:	d10d      	bne.n	800e526 <xProcessReceivedTCPPacket+0x296>
 800e50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e510:	2b04      	cmp	r3, #4
 800e512:	d908      	bls.n	800e526 <xProcessReceivedTCPPacket+0x296>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );
 800e514:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e516:	461a      	mov	r2, r3
 800e518:	69b9      	ldr	r1, [r7, #24]
 800e51a:	483d      	ldr	r0, [pc, #244]	; (800e610 <xProcessReceivedTCPPacket+0x380>)
 800e51c:	f7f2 fa16 	bl	800094c <vLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 800e520:	2300      	movs	r3, #0
 800e522:	63bb      	str	r3, [r7, #56]	; 0x38
 800e524:	e00e      	b.n	800e544 <xProcessReceivedTCPPacket+0x2b4>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t lOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 800e526:	2322      	movs	r3, #34	; 0x22
 800e528:	617b      	str	r3, [r7, #20]
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	3380      	adds	r3, #128	; 0x80
 800e52e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e530:	4413      	add	r3, r2
 800e532:	1c98      	adds	r0, r3, #2
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ lOffset ] ) ),
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	699a      	ldr	r2, [r3, #24]
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800e53c:	2214      	movs	r2, #20
 800e53e:	4619      	mov	r1, r3
 800e540:	f003 f90f 	bl	8011762 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                    }
                }
            }

            if( xResult != pdFAIL )
 800e544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e546:	2b00      	cmp	r3, #0
 800e548:	d054      	beq.n	800e5f4 <xProcessReceivedTCPPacket+0x364>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL );
 800e54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d104      	bne.n	800e55a <xProcessReceivedTCPPacket+0x2ca>
 800e550:	492b      	ldr	r1, [pc, #172]	; (800e600 <xProcessReceivedTCPPacket+0x370>)
 800e552:	f44f 6062 	mov.w	r0, #3616	; 0xe20
 800e556:	f7f2 fb2f 	bl	8000bb8 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 800e55a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e55c:	f7fe fb07 	bl	800cb6e <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 800e560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e562:	7b1b      	ldrb	r3, [r3, #12]
 800e564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e568:	2b50      	cmp	r3, #80	; 0x50
 800e56a:	d904      	bls.n	800e576 <xProcessReceivedTCPPacket+0x2e6>
                {
                    prvCheckOptions( pxSocket, pxNetworkBuffer );
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	4619      	mov	r1, r3
 800e570:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e572:	f7fe f8eb 	bl	800c74c <prvCheckOptions>
                }

                usWindow = FreeRTOS_ntohs( pxProtocolHeaders->xTCPHeader.usWindow );
 800e576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e578:	89db      	ldrh	r3, [r3, #14]
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	021b      	lsls	r3, r3, #8
 800e57e:	b21a      	sxth	r2, r3
 800e580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e582:	89db      	ldrh	r3, [r3, #14]
 800e584:	b29b      	uxth	r3, r3
 800e586:	0a1b      	lsrs	r3, r3, #8
 800e588:	b29b      	uxth	r3, r3
 800e58a:	b21b      	sxth	r3, r3
 800e58c:	4313      	orrs	r3, r2
 800e58e:	b21b      	sxth	r3, r3
 800e590:	827b      	strh	r3, [r7, #18]
                pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800e592:	8a7a      	ldrh	r2, [r7, #18]
 800e594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e596:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 800e59a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e59c:	f003 0302 	and.w	r3, r3, #2
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d10a      	bne.n	800e5ba <xProcessReceivedTCPPacket+0x32a>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800e5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e5aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5ac:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800e5b0:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 800e5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* In prvTCPHandleState() the incoming messages will be handled
                 * depending on the current state of the connection. */
                if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800e5ba:	f107 030c 	add.w	r3, r7, #12
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5c2:	f7ff fcc7 	bl	800df54 <prvTCPHandleState>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	dd05      	ble.n	800e5d8 <xProcessReceivedTCPPacket+0x348>
                {
                    /* prvTCPHandleState() has sent a message, see if there are more to
                     * be transmitted. */
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800e5cc:	f107 030c 	add.w	r3, r7, #12
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5d4:	f7fd fcd8 	bl	800bf88 <prvTCPSendRepeated>
                        }
                    #endif /* ipconfigUSE_TCP_WIN */
                }

                if( pxNetworkBuffer != NULL )
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d005      	beq.n	800e5ea <xProcessReceivedTCPPacket+0x35a>
                {
                    /* We must check if the buffer is unequal to NULL, because the
                     * socket might keep a reference to it in case a delayed ACK must be
                     * sent. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f003 f839 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
                    #ifndef _lint
                        /* Clear pointers that are freed. */
                        pxNetworkBuffer = NULL;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60fb      	str	r3, [r7, #12]
                    #endif
                }

                /* And finally, calculate when this socket wants to be woken up. */
                ( void ) prvTCPNextTimeout( pxSocket );
 800e5ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5ec:	f7fe fe0c 	bl	800d208 <prvTCPNextTimeout>
                /* Return pdPASS to tell that the network buffer is 'consumed'. */
                xResult = pdPASS;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    }
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3740      	adds	r7, #64	; 0x40
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	08014538 	.word	0x08014538
 800e604:	08014928 	.word	0x08014928
 800e608:	08014958 	.word	0x08014958
 800e60c:	08014998 	.word	0x08014998
 800e610:	080149c0 	.word	0x080149c0

0800e614 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    static FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                                NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e614:	b580      	push	{r7, lr}
 800e616:	b08a      	sub	sp, #40	; 0x28
 800e618:	af02      	add	r7, sp, #8
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
        const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	699b      	ldr	r3, [r3, #24]
 800e622:	4618      	mov	r0, r3
 800e624:	f7fd fab7 	bl	800bb96 <vCastConstPointerTo_TCPPacket_t>
 800e628:	61b8      	str	r0, [r7, #24]
        FreeRTOS_Socket_t * pxReturn = NULL;
 800e62a:	2300      	movs	r3, #0
 800e62c:	61fb      	str	r3, [r7, #28]
        uint32_t ulInitialSequenceNumber;

        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800e62e:	4b68      	ldr	r3, [pc, #416]	; (800e7d0 <prvHandleListen+0x1bc>)
 800e630:	6958      	ldr	r0, [r3, #20]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e640:	b29b      	uxth	r3, r3
 800e642:	f7f2 f9bf 	bl	80009c4 <ulApplicationGetNextSequenceNumber>
 800e646:	6178      	str	r0, [r7, #20]
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );

        /* A pure SYN (without ACK) has come in, create a new socket to answer
         * it. */
        if( ulInitialSequenceNumber != 0UL )
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d057      	beq.n	800e6fe <prvHandleListen+0xea>
        {
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e654:	f003 0308 	and.w	r3, r3, #8
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00c      	beq.n	800e678 <prvHandleListen+0x64>
            {
                /* The flag bReuseSocket indicates that the same instance of the
                 * listening socket should be used for the connection. */
                pxReturn = pxSocket;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	61fb      	str	r3, [r7, #28]
                pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e668:	f043 0304 	orr.w	r3, r3, #4
 800e66c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	655a      	str	r2, [r3, #84]	; 0x54
 800e676:	e042      	b.n	800e6fe <prvHandleListen+0xea>
            }
            else
            {
                /* The socket does not have the bReuseSocket flag set meaning create a
                 * new socket when a connection comes in. */
                pxReturn = NULL;
 800e678:	2300      	movs	r3, #0
 800e67a:	61fb      	str	r3, [r7, #28]

                if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e688:	429a      	cmp	r2, r3
 800e68a:	d31b      	bcc.n	800e6c4 <prvHandleListen+0xb0>
                {
                    FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e690:	4619      	mov	r1, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e698:	461a      	mov	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d101      	bne.n	800e6b0 <prvHandleListen+0x9c>
 800e6ac:	4b49      	ldr	r3, [pc, #292]	; (800e7d4 <prvHandleListen+0x1c0>)
 800e6ae:	e000      	b.n	800e6b2 <prvHandleListen+0x9e>
 800e6b0:	4b49      	ldr	r3, [pc, #292]	; (800e7d8 <prvHandleListen+0x1c4>)
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	4849      	ldr	r0, [pc, #292]	; (800e7dc <prvHandleListen+0x1c8>)
 800e6b8:	f7f2 f948 	bl	800094c <vLoggingPrintf>
                                       pxSocket->usLocalPort,
                                       pxSocket->u.xTCP.usChildCount,
                                       pxSocket->u.xTCP.usBacklog,
                                       ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e6bc:	6838      	ldr	r0, [r7, #0]
 800e6be:	f7ff fd95 	bl	800e1ec <prvTCPSendReset>
 800e6c2:	e01c      	b.n	800e6fe <prvHandleListen+0xea>
                }
                else
                {
                    FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
 800e6c4:	2206      	movs	r2, #6
 800e6c6:	2101      	movs	r1, #1
 800e6c8:	2002      	movs	r0, #2
 800e6ca:	f7fb fda7 	bl	800a21c <FreeRTOS_socket>
 800e6ce:	6138      	str	r0, [r7, #16]
                                                      FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

                    if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d003      	beq.n	800e6de <prvHandleListen+0xca>
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6dc:	d106      	bne.n	800e6ec <prvHandleListen+0xd8>
                    {
                        FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 800e6de:	4840      	ldr	r0, [pc, #256]	; (800e7e0 <prvHandleListen+0x1cc>)
 800e6e0:	f7f2 f934 	bl	800094c <vLoggingPrintf>
                        ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e6e4:	6838      	ldr	r0, [r7, #0]
 800e6e6:	f7ff fd81 	bl	800e1ec <prvTCPSendReset>
 800e6ea:	e008      	b.n	800e6fe <prvHandleListen+0xea>
                    }
                    else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800e6ec:	6879      	ldr	r1, [r7, #4]
 800e6ee:	6938      	ldr	r0, [r7, #16]
 800e6f0:	f000 f878 	bl	800e7e4 <prvTCPSocketCopy>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d001      	beq.n	800e6fe <prvHandleListen+0xea>
                    {
                        /* The socket will be connected immediately, no time for the
                         * owner to setsockopt's, therefore copy properties of the server
                         * socket to the new socket.  Only the binding might fail (due to
                         * lack of resources). */
                        pxReturn = pxNewSocket;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	61fb      	str	r3, [r7, #28]
                    }
                }
            }
        }

        if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d05f      	beq.n	800e7c4 <prvHandleListen+0x1b0>
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d05c      	beq.n	800e7c4 <prvHandleListen+0x1b0>
        {
            /* Map the byte stream onto the ProtocolHeaders_t for easy access to the fields. */
            const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	699b      	ldr	r3, [r3, #24]
 800e70e:	3322      	adds	r3, #34	; 0x22
 800e710:	4618      	mov	r0, r3
 800e712:	f7fd fa56 	bl	800bbc2 <vCastConstPointerTo_ProtocolHeaders_t>
 800e716:	60f8      	str	r0, [r7, #12]
                                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );

            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	021b      	lsls	r3, r3, #8
 800e720:	b21a      	sxth	r2, r3
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e726:	b29b      	uxth	r3, r3
 800e728:	0a1b      	lsrs	r3, r3, #8
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	b21b      	sxth	r3, r3
 800e72e:	4313      	orrs	r3, r2
 800e730:	b21b      	sxth	r3, r3
 800e732:	b29a      	uxth	r2, r3
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	879a      	strh	r2, [r3, #60]	; 0x3c
            pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e73e:	061a      	lsls	r2, r3, #24
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e746:	021b      	lsls	r3, r3, #8
 800e748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e74c:	431a      	orrs	r2, r3
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e754:	0a1b      	lsrs	r3, r3, #8
 800e756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e75a:	431a      	orrs	r2, r3
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e762:	0e1b      	lsrs	r3, r3, #24
 800e764:	431a      	orrs	r2, r3
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	639a      	str	r2, [r3, #56]	; 0x38
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	061a      	lsls	r2, r3, #24
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	021b      	lsls	r3, r3, #8
 800e77e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e782:	431a      	orrs	r2, r3
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	0a1b      	lsrs	r3, r3, #8
 800e78a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e78e:	431a      	orrs	r2, r3
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	0e1b      	lsrs	r3, r3, #24
 800e796:	431a      	orrs	r2, r3
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
            prvSocketSetMSS( pxReturn );
 800e79e:	69f8      	ldr	r0, [r7, #28]
 800e7a0:	f7ff fd32 	bl	800e208 <prvSocketSetMSS>

            prvTCPCreateWindow( pxReturn );
 800e7a4:	69f8      	ldr	r0, [r7, #28]
 800e7a6:	f7fd fe19 	bl	800c3dc <prvTCPCreateWindow>

            vTCPStateChange( pxReturn, eSYN_FIRST );
 800e7aa:	2103      	movs	r1, #3
 800e7ac:	69f8      	ldr	r0, [r7, #28]
 800e7ae:	f7fe fa03 	bl	800cbb8 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            ( void ) memcpy( ( void * ) ( pxReturn->u.xTCP.xPacket.u.ucLastPacket ), ( const void * ) ( pxNetworkBuffer->pucEthernetBuffer ), sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	699b      	ldr	r3, [r3, #24]
 800e7bc:	2246      	movs	r2, #70	; 0x46
 800e7be:	4619      	mov	r1, r3
 800e7c0:	f002 ffcf 	bl	8011762 <memcpy>
        }

        return pxReturn;
 800e7c4:	69fb      	ldr	r3, [r7, #28]
    }
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3720      	adds	r7, #32
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	20000018 	.word	0x20000018
 800e7d4:	080149e4 	.word	0x080149e4
 800e7d8:	080149e8 	.word	0x080149e8
 800e7dc:	080149ec 	.word	0x080149ec
 800e7e0:	08014a1c 	.word	0x08014a1c

0800e7e4 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                        FreeRTOS_Socket_t * pxSocket )
    {
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b088      	sub	sp, #32
 800e7e8:	af02      	add	r7, sp, #8
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	69da      	ldr	r2, [r3, #28]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	61da      	str	r2, [r3, #28]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	6a1a      	ldr	r2, [r3, #32]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	621a      	str	r2, [r3, #32]
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	66da      	str	r2, [r3, #108]	; 0x6c
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	671a      	str	r2, [r3, #112]	; 0x70
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	665a      	str	r2, [r3, #100]	; 0x64
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	669a      	str	r2, [r3, #104]	; 0x68
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                /* Child socket of listening sockets will inherit the Socket Set
                 * Otherwise the owner has no chance of including it into the set. */
                if( pxSocket->pxSocketSet != NULL )
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e846:	2b00      	cmp	r3, #0
 800e848:	d009      	beq.n	800e85e <prvTCPSocketCopy+0x7a>
                {
                    pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	629a      	str	r2, [r3, #40]	; 0x28
                    pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e856:	f043 0205 	orr.w	r2, r3, #5
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	62da      	str	r2, [r3, #44]	; 0x2c
                }
            }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800e85e:	4b2a      	ldr	r3, [pc, #168]	; (800e908 <prvTCPSocketCopy+0x124>)
 800e860:	695b      	ldr	r3, [r3, #20]
 800e862:	613b      	str	r3, [r7, #16]
        xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e868:	021b      	lsls	r3, r3, #8
 800e86a:	b21a      	sxth	r2, r3
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e870:	0a1b      	lsrs	r3, r3, #8
 800e872:	b29b      	uxth	r3, r3
 800e874:	b21b      	sxth	r3, r3
 800e876:	4313      	orrs	r3, r2
 800e878:	b21b      	sxth	r3, r3
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	81fb      	strh	r3, [r7, #14]
                 * orphan temporarily.  Once this socket is really connected, the owner of
                 * the server socket will be notified. */

                /* When bPassQueued is true, the socket is an orphan until it gets
                 * connected. */
                pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e884:	f043 0304 	orr.w	r3, r3, #4
 800e888:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	683a      	ldr	r2, [r7, #0]
 800e890:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
                }
            }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e898:	3301      	adds	r3, #1
 800e89a:	b29a      	uxth	r2, r3
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d101      	bne.n	800e8c6 <prvTCPSocketCopy+0xe2>
 800e8c2:	4b12      	ldr	r3, [pc, #72]	; (800e90c <prvTCPSocketCopy+0x128>)
 800e8c4:	e000      	b.n	800e8c8 <prvTCPSocketCopy+0xe4>
 800e8c6:	4b12      	ldr	r3, [pc, #72]	; (800e910 <prvTCPSocketCopy+0x12c>)
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	4811      	ldr	r0, [pc, #68]	; (800e914 <prvTCPSocketCopy+0x130>)
 800e8ce:	f7f2 f83d 	bl	800094c <vLoggingPrintf>
                                 pxSocket->u.xTCP.usChildCount,
                                 pxSocket->u.xTCP.usBacklog,
                                 ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800e8d2:	f107 010c 	add.w	r1, r7, #12
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	2208      	movs	r2, #8
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7fb ff04 	bl	800a6e8 <vSocketBind>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d008      	beq.n	800e8f8 <prvTCPSocketCopy+0x114>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 800e8e6:	480c      	ldr	r0, [pc, #48]	; (800e918 <prvTCPSocketCopy+0x134>)
 800e8e8:	f7f2 f830 	bl	800094c <vLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7fb ffcb 	bl	800a888 <vSocketClose>
            xResult = pdFALSE;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	617b      	str	r3, [r7, #20]
 800e8f6:	e001      	b.n	800e8fc <prvTCPSocketCopy+0x118>
        }
        else
        {
            xResult = pdTRUE;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	617b      	str	r3, [r7, #20]
        }

        return xResult;
 800e8fc:	697b      	ldr	r3, [r7, #20]
    }
 800e8fe:	4618      	mov	r0, r3
 800e900:	3718      	adds	r7, #24
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	20000018 	.word	0x20000018
 800e90c:	080149e4 	.word	0x080149e4
 800e910:	080149e8 	.word	0x080149e8
 800e914:	08014a3c 	.word	0x08014a3c
 800e918:	08014a68 	.word	0x08014a68

0800e91c <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	db02      	blt.n	800e934 <FreeRTOS_GetTCPStateName+0x18>
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2b0c      	cmp	r3, #12
 800e932:	dd04      	ble.n	800e93e <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 800e934:	230d      	movs	r3, #13
 800e936:	60fb      	str	r3, [r7, #12]
                xIndex--;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	3b01      	subs	r3, #1
 800e93c:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 800e93e:	4a05      	ldr	r2, [pc, #20]	; (800e954 <FreeRTOS_GetTCPStateName+0x38>)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 800e946:	4618      	mov	r0, r3
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	08015414 	.word	0x08015414

0800e958 <xTCPCheckNewClient>:
 * @param[in] pxSocket: The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 800e958:	b580      	push	{r7, lr}
 800e95a:	b088      	sub	sp, #32
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e964:	021b      	lsls	r3, r3, #8
 800e966:	b21a      	sxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e96c:	0a1b      	lsrs	r3, r3, #8
 800e96e:	b29b      	uxth	r3, r3
 800e970:	b21b      	sxth	r3, r3
 800e972:	4313      	orrs	r3, r2
 800e974:	b21b      	sxth	r3, r3
 800e976:	b29b      	uxth	r3, r3
 800e978:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 800e97a:	2300      	movs	r3, #0
 800e97c:	61bb      	str	r3, [r7, #24]
        const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800e97e:	4b1b      	ldr	r3, [pc, #108]	; (800e9ec <xTCPCheckNewClient+0x94>)
 800e980:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e982:	4b1b      	ldr	r3, [pc, #108]	; (800e9f0 <xTCPCheckNewClient+0x98>)
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	61fb      	str	r3, [r7, #28]
 800e988:	e026      	b.n	800e9d8 <xTCPCheckNewClient+0x80>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	429a      	cmp	r2, r3
 800e992:	d11e      	bne.n	800e9d2 <xTCPCheckNewClient+0x7a>
            {
                pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fd f91d 	bl	800bbd8 <vCastPointerTo_FreeRTOS_Socket_t>
 800e99e:	60f8      	str	r0, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800e9a6:	2b06      	cmp	r3, #6
 800e9a8:	d113      	bne.n	800e9d2 <xTCPCheckNewClient+0x7a>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e9b0:	f003 0302 	and.w	r3, r3, #2
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d00b      	beq.n	800e9d2 <xTCPCheckNewClient+0x7a>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	655a      	str	r2, [r3, #84]	; 0x54
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	480b      	ldr	r0, [pc, #44]	; (800e9f4 <xTCPCheckNewClient+0x9c>)
 800e9c8:	f7f1 ffc0 	bl	800094c <vLoggingPrintf>
                    xResult = pdTRUE;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	61bb      	str	r3, [r7, #24]
                    break;
 800e9d0:	e006      	b.n	800e9e0 <xTCPCheckNewClient+0x88>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	61fb      	str	r3, [r7, #28]
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800e9d8:	69fa      	ldr	r2, [r7, #28]
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d1d4      	bne.n	800e98a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 800e9e0:	69bb      	ldr	r3, [r7, #24]
    }
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3720      	adds	r7, #32
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	2000c850 	.word	0x2000c850
 800e9f0:	2000c848 	.word	0x2000c848
 800e9f4:	08014a8c 	.word	0x08014a8c

0800e9f8 <FreeRTOS_min_int32>:
        {
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800ea02:	687a      	ldr	r2, [r7, #4]
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	4293      	cmp	r3, r2
 800ea08:	bfa8      	it	ge
 800ea0a:	4613      	movge	r3, r2
        }
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <FreeRTOS_min_uint32>:
        {
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	4293      	cmp	r3, r2
 800ea28:	bf28      	it	cs
 800ea2a:	4613      	movcs	r3, r2
        }
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <vCastPointerTo_TCPSegment_t>:
 * @brief Utility function to cast pointer of a type to pointer of type TCPSegment_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( TCPSegment_t )
    {
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
        return ( TCPSegment_t * ) pvArgument;
 800ea40:	687b      	ldr	r3, [r7, #4]
    }
 800ea42:	4618      	mov	r0, r3
 800ea44:	370c      	adds	r7, #12
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 800ea4e:	b480      	push	{r7}
 800ea50:	b085      	sub	sp, #20
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	db02      	blt.n	800ea68 <xSequenceLessThanOrEqual+0x1a>
            {
                xResult = pdTRUE;
 800ea62:	2301      	movs	r3, #1
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	e001      	b.n	800ea6c <xSequenceLessThanOrEqual+0x1e>
            }
            else
            {
                xResult = pdFALSE;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
        }
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3714      	adds	r7, #20
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr

0800ea7a <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThan( uint32_t a,
                                                        uint32_t b )
        {
 800ea7a:	b480      	push	{r7}
 800ea7c:	b085      	sub	sp, #20
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
 800ea82:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a < b */
            if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 800ea84:	683a      	ldr	r2, [r7, #0]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	db02      	blt.n	800ea96 <xSequenceLessThan+0x1c>
            {
                xResult = pdTRUE;
 800ea90:	2301      	movs	r3, #1
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	e001      	b.n	800ea9a <xSequenceLessThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800ea96:	2300      	movs	r3, #0
 800ea98:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
        }
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3714      	adds	r7, #20
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a,
                                                           uint32_t b )
        {
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a > b */
            if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	3b01      	subs	r3, #1
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	db02      	blt.n	800eac4 <xSequenceGreaterThan+0x1c>
            {
                xResult = pdTRUE;
 800eabe:	2301      	movs	r3, #1
 800eac0:	60fb      	str	r3, [r7, #12]
 800eac2:	e001      	b.n	800eac8 <xSequenceGreaterThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800eac4:	2300      	movs	r3, #0
 800eac6:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800eac8:	68fb      	ldr	r3, [r7, #12]
        }
 800eaca:	4618      	mov	r0, r3
 800eacc:	3714      	adds	r7, #20
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr

0800ead6 <xSequenceGreaterThanOrEqual>:
 * @return pdTRUE if a>=b, else pdFALSE.
 */

    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 800ead6:	b480      	push	{r7}
 800ead8:	b085      	sub	sp, #20
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
 800eade:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	db02      	blt.n	800eaf0 <xSequenceGreaterThanOrEqual+0x1a>
        {
            xResult = pdTRUE;
 800eaea:	2301      	movs	r3, #1
 800eaec:	60fb      	str	r3, [r7, #12]
 800eaee:	e001      	b.n	800eaf4 <xSequenceGreaterThanOrEqual+0x1e>
        }
        else
        {
            xResult = pdFALSE;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
    }
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <vListInsertFifo>:
 * @param[in] pxList: The list in which the item is to inserted.
 * @param[in] pxNewListItem: The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b082      	sub	sp, #8
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	3308      	adds	r3, #8
 800eb10:	461a      	mov	r2, r3
 800eb12:	6839      	ldr	r1, [r7, #0]
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 f81f 	bl	800eb58 <vListInsertGeneric>
        }
 800eb1a:	bf00      	nop
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer: The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b082      	sub	sp, #8
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
        pxTimer->ulBorn = xTaskGetTickCount();
 800eb2a:	f7f7 f895 	bl	8005c58 <xTaskGetTickCount>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	601a      	str	r2, [r3, #0]
    }
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <ulTimerGetAge>:
 * @param[in] pxTimer: The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
        return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 800eb44:	f7f7 f888 	bl	8005c58 <xTaskGetTickCount>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	1ad3      	subs	r3, r2, r3
    }
 800eb50:	4618      	mov	r0, r3
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <vListInsertGeneric>:
 * @param[in] pxWhere: Where should the item be inserted.
 */
    static void vListInsertGeneric( List_t * const pxList,
                                    ListItem_t * const pxNewListItem,
                                    MiniListItem_t * const pxWhere )
    {
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
        /* Insert a new list item into pxList, it does not sort the list,
         * but it puts the item just before xListEnd, so it will be the last item
         * returned by listGET_HEAD_ENTRY() */
        pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	605a      	str	r2, [r3, #4]
        pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	689a      	ldr	r2, [r3, #8]
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	609a      	str	r2, [r3, #8]
        pxWhere->pxPrevious->pxNext = pxNewListItem;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	605a      	str	r2, [r3, #4]
        pxWhere->pxPrevious = pxNewListItem;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	68ba      	ldr	r2, [r7, #8]
 800eb7e:	609a      	str	r2, [r3, #8]

        /* Remember which list the item is in. */
        listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	611a      	str	r2, [r3, #16]

        ( pxList->uxNumberOfItems )++;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	1c5a      	adds	r2, r3, #1
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	601a      	str	r2, [r3, #0]
    }
 800eb90:	bf00      	nop
 800eb92:	3714      	adds	r7, #20
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
            BaseType_t xIndex, xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 800eba2:	4829      	ldr	r0, [pc, #164]	; (800ec48 <prvCreateSectors+0xac>)
 800eba4:	f7f5 fe66 	bl	8004874 <vListInitialise>
            xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 800eba8:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800ebac:	f7f8 fa34 	bl	8007018 <pvPortMalloc>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7ff ff40 	bl	800ea38 <vCastPointerTo_TCPSegment_t>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	4b24      	ldr	r3, [pc, #144]	; (800ec4c <prvCreateSectors+0xb0>)
 800ebbc:	601a      	str	r2, [r3, #0]

            if( xTCPSegments == NULL )
 800ebbe:	4b23      	ldr	r3, [pc, #140]	; (800ec4c <prvCreateSectors+0xb0>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d107      	bne.n	800ebd6 <prvCreateSectors+0x3a>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 800ebc6:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800ebca:	4821      	ldr	r0, [pc, #132]	; (800ec50 <prvCreateSectors+0xb4>)
 800ebcc:	f7f1 febe 	bl	800094c <vLoggingPrintf>
                                         ( unsigned ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

                xReturn = pdFAIL;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	603b      	str	r3, [r7, #0]
 800ebd4:	e032      	b.n	800ec3c <prvCreateSectors+0xa0>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800ebd6:	4b1d      	ldr	r3, [pc, #116]	; (800ec4c <prvCreateSectors+0xb0>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800ebde:	2100      	movs	r1, #0
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f002 fde2 	bl	80117aa <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	607b      	str	r3, [r7, #4]
 800ebea:	e022      	b.n	800ec32 <prvCreateSectors+0x96>
                {
                    /* Could call vListInitialiseItem here but all data has been
                    * nulled already.  Set the owner to a segment descriptor. */
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800ebec:	4b17      	ldr	r3, [pc, #92]	; (800ec4c <prvCreateSectors+0xb0>)
 800ebee:	6819      	ldr	r1, [r3, #0]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	019a      	lsls	r2, r3, #6
 800ebf4:	4b15      	ldr	r3, [pc, #84]	; (800ec4c <prvCreateSectors+0xb0>)
 800ebf6:	6818      	ldr	r0, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	019b      	lsls	r3, r3, #6
 800ebfc:	4403      	add	r3, r0
 800ebfe:	440a      	add	r2, r1
 800ec00:	639a      	str	r2, [r3, #56]	; 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800ec02:	4b12      	ldr	r3, [pc, #72]	; (800ec4c <prvCreateSectors+0xb0>)
 800ec04:	6819      	ldr	r1, [r3, #0]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	019a      	lsls	r2, r3, #6
 800ec0a:	4b10      	ldr	r3, [pc, #64]	; (800ec4c <prvCreateSectors+0xb0>)
 800ec0c:	6818      	ldr	r0, [r3, #0]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	019b      	lsls	r3, r3, #6
 800ec12:	4403      	add	r3, r0
 800ec14:	440a      	add	r2, r1
 800ec16:	625a      	str	r2, [r3, #36]	; 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 800ec18:	4b0c      	ldr	r3, [pc, #48]	; (800ec4c <prvCreateSectors+0xb0>)
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	019b      	lsls	r3, r3, #6
 800ec20:	4413      	add	r3, r2
 800ec22:	332c      	adds	r3, #44	; 0x2c
 800ec24:	4619      	mov	r1, r3
 800ec26:	4808      	ldr	r0, [pc, #32]	; (800ec48 <prvCreateSectors+0xac>)
 800ec28:	f7ff ff6b 	bl	800eb02 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	3301      	adds	r3, #1
 800ec30:	607b      	str	r3, [r7, #4]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2bef      	cmp	r3, #239	; 0xef
 800ec36:	ddd9      	ble.n	800ebec <prvCreateSectors+0x50>
                }

                xReturn = pdPASS;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 800ec3c:	683b      	ldr	r3, [r7, #0]
        }
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3708      	adds	r7, #8
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	2000bcfc 	.word	0x2000bcfc
 800ec4c:	2000bcf8 	.word	0x2000bcf8
 800ec50:	08014b3c 	.word	0x08014b3c

0800ec54 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	613b      	str	r3, [r7, #16]

            /* Find a segment with a given sequence number in the list of received
             * segments. */
            pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	33ac      	adds	r3, #172	; 0xac
 800ec66:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	617b      	str	r3, [r7, #20]
 800ec6e:	e010      	b.n	800ec92 <xTCPWindowRxFind+0x3e>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7ff fedf 	bl	800ea38 <vCastPointerTo_TCPSegment_t>
 800ec7a:	60b8      	str	r0, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	683a      	ldr	r2, [r7, #0]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d102      	bne.n	800ec8c <xTCPWindowRxFind+0x38>
                {
                    pxReturn = pxSegment;
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	613b      	str	r3, [r7, #16]
                    break;
 800ec8a:	e006      	b.n	800ec9a <xTCPWindowRxFind+0x46>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	617b      	str	r3, [r7, #20]
            for( pxIterator = listGET_NEXT( pxEnd );
 800ec92:	697a      	ldr	r2, [r7, #20]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d1ea      	bne.n	800ec70 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 800ec9a:	693b      	ldr	r3, [r7, #16]
        }
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b088      	sub	sp, #32
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
 800ecb0:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800ecb2:	4b34      	ldr	r3, [pc, #208]	; (800ed84 <xTCPWindowNew+0xe0>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d10c      	bne.n	800ecd4 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <xTCPWindowNew+0x20>
 800ecc0:	2352      	movs	r3, #82	; 0x52
 800ecc2:	e000      	b.n	800ecc6 <xTCPWindowNew+0x22>
 800ecc4:	2354      	movs	r3, #84	; 0x54
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	482f      	ldr	r0, [pc, #188]	; (800ed88 <xTCPWindowNew+0xe4>)
 800ecca:	f7f1 fe3f 	bl	800094c <vLoggingPrintf>
                pxSegment = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	61fb      	str	r3, [r7, #28]
 800ecd2:	e052      	b.n	800ed7a <xTCPWindowNew+0xd6>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800ecd4:	4b2b      	ldr	r3, [pc, #172]	; (800ed84 <xTCPWindowNew+0xe0>)
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	61bb      	str	r3, [r7, #24]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7ff feaa 	bl	800ea38 <vCastPointerTo_TCPSegment_t>
 800ece4:	61f8      	str	r0, [r7, #28]

                configASSERT( pxItem != NULL );
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d104      	bne.n	800ecf6 <xTCPWindowNew+0x52>
 800ecec:	4927      	ldr	r1, [pc, #156]	; (800ed8c <xTCPWindowNew+0xe8>)
 800ecee:	f240 2035 	movw	r0, #565	; 0x235
 800ecf2:	f7f1 ff61 	bl	8000bb8 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d104      	bne.n	800ed06 <xTCPWindowNew+0x62>
 800ecfc:	4923      	ldr	r1, [pc, #140]	; (800ed8c <xTCPWindowNew+0xe8>)
 800ecfe:	f240 2036 	movw	r0, #566	; 0x236
 800ed02:	f7f1 ff59 	bl	8000bb8 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 800ed06:	69b8      	ldr	r0, [r7, #24]
 800ed08:	f7f5 fe3e 	bl	8004988 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d006      	beq.n	800ed20 <xTCPWindowNew+0x7c>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	33a4      	adds	r3, #164	; 0xa4
 800ed16:	69b9      	ldr	r1, [r7, #24]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7ff fef2 	bl	800eb02 <vListInsertFifo>
 800ed1e:	e005      	b.n	800ed2c <xTCPWindowNew+0x88>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	3390      	adds	r3, #144	; 0x90
 800ed24:	69b9      	ldr	r1, [r7, #24]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7ff feeb 	bl	800eb02 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	3310      	adds	r3, #16
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7ff fef6 	bl	800eb22 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <xTCPWindowNew+0xa2>
 800ed42:	2101      	movs	r1, #1
 800ed44:	e000      	b.n	800ed48 <xTCPWindowNew+0xa4>
 800ed46:	2100      	movs	r1, #0
 800ed48:	69fa      	ldr	r2, [r7, #28]
 800ed4a:	7d93      	ldrb	r3, [r2, #22]
 800ed4c:	f361 0382 	bfi	r3, r1, #2, #1
 800ed50:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                        UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 800ed64:	4b07      	ldr	r3, [pc, #28]	; (800ed84 <xTCPWindowNew+0xe0>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	617b      	str	r3, [r7, #20]

                        if( xLowestLength > xLength )
 800ed6a:	4b09      	ldr	r3, [pc, #36]	; (800ed90 <xTCPWindowNew+0xec>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	697a      	ldr	r2, [r7, #20]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d202      	bcs.n	800ed7a <xTCPWindowNew+0xd6>
                        {
                            xLowestLength = xLength;
 800ed74:	4a06      	ldr	r2, [pc, #24]	; (800ed90 <xTCPWindowNew+0xec>)
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	6013      	str	r3, [r2, #0]
                        }
                    }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 800ed7a:	69fb      	ldr	r3, [r7, #28]
        }
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3720      	adds	r7, #32
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	2000bcfc 	.word	0x2000bcfc
 800ed88:	08014b60 	.word	0x08014b60
 800ed8c:	08014b90 	.word	0x08014b90
 800ed90:	20000014 	.word	0x20000014

0800ed94 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d002      	beq.n	800edac <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 800eda6:	2300      	movs	r3, #0
 800eda8:	60fb      	str	r3, [r7, #12]
 800edaa:	e01d      	b.n	800ede8 <xTCPWindowRxEmpty+0x54>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	691a      	ldr	r2, [r3, #16]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	4619      	mov	r1, r3
 800edb6:	4610      	mov	r0, r2
 800edb8:	f7ff fe8d 	bl	800ead6 <xSequenceGreaterThanOrEqual>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d002      	beq.n	800edc8 <xTCPWindowRxEmpty+0x34>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 800edc2:	2301      	movs	r3, #1
 800edc4:	60fb      	str	r3, [r7, #12]
 800edc6:	e00f      	b.n	800ede8 <xTCPWindowRxEmpty+0x54>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	691a      	ldr	r2, [r3, #16]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	1ad1      	subs	r1, r2, r3
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	699a      	ldr	r2, [r3, #24]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	1ad3      	subs	r3, r2, r3
 800eddc:	461a      	mov	r2, r3
 800edde:	4805      	ldr	r0, [pc, #20]	; (800edf4 <xTCPWindowRxEmpty+0x60>)
 800ede0:	f7f1 fdb4 	bl	800094c <vLoggingPrintf>
                                         ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 800ede4:	2300      	movs	r3, #0
 800ede6:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 800ede8:	68fb      	ldr	r3, [r7, #12]
        }
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	08014bc4 	.word	0x08014bc4

0800edf8 <xTCPWindowGetHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d102      	bne.n	800ee0e <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	e00b      	b.n	800ee26 <xTCPWindowGetHead+0x2e>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	60bb      	str	r3, [r7, #8]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7ff fe0d 	bl	800ea38 <vCastPointerTo_TCPSegment_t>
 800ee1e:	60f8      	str	r0, [r7, #12]

                ( void ) uxListRemove( pxItem );
 800ee20:	68b8      	ldr	r0, [r7, #8]
 800ee22:	f7f5 fdb1 	bl	8004988 <uxListRemove>
            }

            return pxSegment;
 800ee26:	68fb      	ldr	r3, [r7, #12]
        }
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3710      	adds	r7, #16
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <xTCPWindowPeekHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b084      	sub	sp, #16
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d102      	bne.n	800ee46 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 800ee40:	2300      	movs	r3, #0
 800ee42:	60fb      	str	r3, [r7, #12]
 800ee44:	e008      	b.n	800ee58 <xTCPWindowPeekHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	60bb      	str	r3, [r7, #8]
                pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff fdf1 	bl	800ea38 <vCastPointerTo_TCPSegment_t>
 800ee56:	60f8      	str	r0, [r7, #12]
            }

            return pxReturn;
 800ee58:	68fb      	ldr	r3, [r7, #12]
        }
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
	...

0800ee64 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment: The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d004      	beq.n	800ee7e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3318      	adds	r3, #24
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7f5 fd85 	bl	8004988 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0UL;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0L;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0UL;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d004      	beq.n	800eea2 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	332c      	adds	r3, #44	; 0x2c
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7f5 fd73 	bl	8004988 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	332c      	adds	r3, #44	; 0x2c
 800eea6:	4619      	mov	r1, r3
 800eea8:	4803      	ldr	r0, [pc, #12]	; (800eeb8 <vTCPWindowFree+0x54>)
 800eeaa:	f7ff fe2a 	bl	800eb02 <vListInsertFifo>
        }
 800eeae:	bf00      	nop
 800eeb0:	3708      	adds	r7, #8
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	2000bcfc 	.word	0x2000bcfc

0800eebc <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 800eec4:	2300      	movs	r3, #0
 800eec6:	613b      	str	r3, [r7, #16]
 800eec8:	e020      	b.n	800ef0c <vTCPWindowDestroy+0x50>
            {
                if( xRound != 0 )
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d003      	beq.n	800eed8 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	33a4      	adds	r3, #164	; 0xa4
 800eed4:	617b      	str	r3, [r7, #20]
 800eed6:	e002      	b.n	800eede <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3390      	adds	r3, #144	; 0x90
 800eedc:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee6:	d10e      	bne.n	800ef06 <vTCPWindowDestroy+0x4a>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800eee8:	e009      	b.n	800eefe <vTCPWindowDestroy+0x42>
                    {
                        pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7ff fda1 	bl	800ea38 <vCastPointerTo_TCPSegment_t>
 800eef6:	60f8      	str	r0, [r7, #12]
                        vTCPWindowFree( pxSegment );
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f7ff ffb3 	bl	800ee64 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1f1      	bne.n	800eeea <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	613b      	str	r3, [r7, #16]
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	dddb      	ble.n	800eeca <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 800ef12:	bf00      	nop
 800ef14:	3718      	adds	r7, #24
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
	...

0800ef1c <vTCPWindowCreate>:
                           uint32_t ulRxWindowLength,
                           uint32_t ulTxWindowLength,
                           uint32_t ulAckNumber,
                           uint32_t ulSequenceNumber,
                           uint32_t ulMSS )
    {
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	607a      	str	r2, [r7, #4]
 800ef28:	603b      	str	r3, [r7, #0]
        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( xTCPSegments == NULL )
 800ef2a:	4b1c      	ldr	r3, [pc, #112]	; (800ef9c <vTCPWindowCreate+0x80>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d101      	bne.n	800ef36 <vTCPWindowCreate+0x1a>
                {
                    ( void ) prvCreateSectors();
 800ef32:	f7ff fe33 	bl	800eb9c <prvCreateSectors>
                }

                vListInitialise( &( pxWindow->xTxSegments ) );
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	3390      	adds	r3, #144	; 0x90
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7f5 fc9a 	bl	8004874 <vListInitialise>
                vListInitialise( &( pxWindow->xRxSegments ) );
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	33a4      	adds	r3, #164	; 0xa4
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7f5 fc95 	bl	8004874 <vListInitialise>

                vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	3340      	adds	r3, #64	; 0x40
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7f5 fc90 	bl	8004874 <vListInitialise>
                vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	3354      	adds	r3, #84	; 0x54
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7f5 fc8b 	bl	8004874 <vListInitialise>
                vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	3368      	adds	r3, #104	; 0x68
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7f5 fc86 	bl	8004874 <vListInitialise>
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 800ef68:	4b0d      	ldr	r3, [pc, #52]	; (800efa0 <vTCPWindowCreate+0x84>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d004      	beq.n	800ef7a <vTCPWindowCreate+0x5e>
        {
            FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	68b9      	ldr	r1, [r7, #8]
 800ef74:	480b      	ldr	r0, [pc, #44]	; (800efa4 <vTCPWindowCreate+0x88>)
 800ef76:	f7f1 fce9 	bl	800094c <vLoggingPrintf>
                                     ulRxWindowLength, ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	69ba      	ldr	r2, [r7, #24]
 800ef8a:	6839      	ldr	r1, [r7, #0]
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	f000 f80b 	bl	800efa8 <vTCPWindowInit>
    }
 800ef92:	bf00      	nop
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	2000bcf8 	.word	0x2000bcf8
 800efa0:	2000bd10 	.word	0x2000bd10
 800efa4:	08014bf4 	.word	0x08014bf4

0800efa8 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 800efa8:	b480      	push	{r7}
 800efaa:	b087      	sub	sp, #28
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
 800efb4:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 800efb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800efba:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0UL;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	7813      	ldrb	r3, [r2, #0]
 800efc6:	f043 0301 	orr.w	r3, r3, #1
 800efca:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0UL )
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d024      	beq.n	800f01c <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d004      	beq.n	800efe6 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	b29a      	uxth	r2, r3
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800efec:	461a      	mov	r2, r3
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d304      	bcc.n	800effe <vTCPWindowInit+0x56>
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800effa:	2b00      	cmp	r3, #0
 800effc:	d10e      	bne.n	800f01c <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	685a      	ldr	r2, [r3, #4]
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	fbb2 f3f3 	udiv	r3, r2, r3
 800f008:	683a      	ldr	r2, [r7, #0]
 800f00a:	fb02 f203 	mul.w	r2, r2, r3
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	b29a      	uxth	r2, r3
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	697a      	ldr	r2, [r7, #20]
 800f020:	639a      	str	r2, [r3, #56]	; 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	68ba      	ldr	r2, [r7, #8]
 800f026:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	635a      	str	r2, [r3, #52]	; 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	629a      	str	r2, [r3, #40]	; 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800f052:	bf00      	nop
 800f054:	371c      	adds	r7, #28
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr
	...

0800f060 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 800f060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f062:	b08f      	sub	sp, #60	; 0x3c
 800f064:	af04      	add	r7, sp, #16
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 800f06c:	2300      	movs	r3, #0
 800f06e:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800f070:	68ba      	ldr	r2, [r7, #8]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4413      	add	r3, r2
 800f076:	61fb      	str	r3, [r7, #28]
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	33ac      	adds	r3, #172	; 0xac
 800f07c:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	623b      	str	r3, [r7, #32]
 800f084:	e02a      	b.n	800f0dc <xTCPWindowRxConfirm+0x7c>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f086:	6a3b      	ldr	r3, [r7, #32]
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7ff fcd4 	bl	800ea38 <vCastPointerTo_TCPSegment_t>
 800f090:	6178      	str	r0, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	68b9      	ldr	r1, [r7, #8]
 800f098:	4618      	mov	r0, r3
 800f09a:	f7ff fd1c 	bl	800ead6 <xSequenceGreaterThanOrEqual>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d018      	beq.n	800f0d6 <xTCPWindowRxConfirm+0x76>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	69f9      	ldr	r1, [r7, #28]
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7ff fce5 	bl	800ea7a <xSequenceLessThan>
 800f0b0:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00f      	beq.n	800f0d6 <xTCPWindowRxConfirm+0x76>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800f0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00a      	beq.n	800f0d2 <xTCPWindowRxConfirm+0x72>
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	4610      	mov	r0, r2
 800f0c8:	f7ff fcd7 	bl	800ea7a <xSequenceLessThan>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <xTCPWindowRxConfirm+0x76>
                    {
                        pxBest = pxSegment;
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	627b      	str	r3, [r7, #36]	; 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f0d6:	6a3b      	ldr	r3, [r7, #32]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800f0dc:	6a3a      	ldr	r2, [r7, #32]
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d1d0      	bne.n	800f086 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d030      	beq.n	800f14c <xTCPWindowRxConfirm+0xec>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ec:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 800f0ee:	68ba      	ldr	r2, [r7, #8]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d104      	bne.n	800f0fe <xTCPWindowRxConfirm+0x9e>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800f0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f6:	689a      	ldr	r2, [r3, #8]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d026      	beq.n	800f14c <xTCPWindowRxConfirm+0xec>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %lu (+%ld=%lu) found %lu (+%ld=%lu)\n",
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f104:	461e      	mov	r6, r3
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	1ad5      	subs	r5, r2, r3
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	441a      	add	r2, r3
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f11c:	6811      	ldr	r1, [r2, #0]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	68d2      	ldr	r2, [r2, #12]
 800f122:	1a8a      	subs	r2, r1, r2
 800f124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f126:	6889      	ldr	r1, [r1, #8]
 800f128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f12a:	6800      	ldr	r0, [r0, #0]
 800f12c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800f12e:	68a4      	ldr	r4, [r4, #8]
 800f130:	4404      	add	r4, r0
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	68c0      	ldr	r0, [r0, #12]
 800f136:	1a20      	subs	r0, r4, r0
 800f138:	9003      	str	r0, [sp, #12]
 800f13a:	9102      	str	r1, [sp, #8]
 800f13c:	9201      	str	r2, [sp, #4]
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	462a      	mov	r2, r5
 800f144:	4631      	mov	r1, r6
 800f146:	4804      	ldr	r0, [pc, #16]	; (800f158 <xTCPWindowRxConfirm+0xf8>)
 800f148:	f7f1 fc00 	bl	800094c <vLoggingPrintf>
                                         pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
                                         pxBest->lDataLength,
                                         pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
            }

            return pxBest;
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800f14e:	4618      	mov	r0, r3
 800f150:	372c      	adds	r7, #44	; 0x2c
 800f152:	46bd      	mov	sp, r7
 800f154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f156:	bf00      	nop
 800f158:	08014c24 	.word	0x08014c24

0800f15c <lTCPWindowRxCheck>:
 */
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace )
        {
 800f15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f15e:	b091      	sub	sp, #68	; 0x44
 800f160:	af04      	add	r7, sp, #16
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
 800f168:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber, ulLast, ulSavedSequenceNumber, ulIntermediateResult = 0;
 800f16a:	2300      	movs	r3, #0
 800f16c:	623b      	str	r3, [r7, #32]
             * or there is not enough space.
             *
             * As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
             * if more Rx data may be passed to the user after this packet. */

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2200      	movs	r2, #0
 800f178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0UL;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2200      	movs	r2, #0
 800f180:	631a      	str	r2, [r3, #48]	; 0x30

            if( ulCurrentSequenceNumber == ulSequenceNumber )
 800f182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	429a      	cmp	r2, r3
 800f188:	d16a      	bne.n	800f260 <lTCPWindowRxCheck+0x104>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulLength > ulSpace )
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d908      	bls.n	800f1a4 <lTCPWindowRxCheck+0x48>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
 800f192:	683a      	ldr	r2, [r7, #0]
 800f194:	6879      	ldr	r1, [r7, #4]
 800f196:	4897      	ldr	r0, [pc, #604]	; (800f3f4 <lTCPWindowRxCheck+0x298>)
 800f198:	f7f1 fbd8 	bl	800094c <vLoggingPrintf>
                    lReturn = -1;
 800f19c:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800f1a2:	e122      	b.n	800f3ea <lTCPWindowRxCheck+0x28e>
                }
                else
                {
                    ulCurrentSequenceNumber += ulLength;
 800f1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	62fb      	str	r3, [r7, #44]	; 0x2c

                    if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d04e      	beq.n	800f254 <lTCPWindowRxCheck+0xf8>
                    {
                        ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	617b      	str	r3, [r7, #20]
                         * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                         * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                         * clean them out. */
                        do
                        {
                            pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	68b9      	ldr	r1, [r7, #8]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f7ff ff4e 	bl	800f060 <xTCPWindowRxConfirm>
 800f1c4:	61b8      	str	r0, [r7, #24]

                            if( pxFound != NULL )
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <lTCPWindowRxCheck+0x76>
                            {
                                /* Remove it because it will be passed to user directly. */
                                vTCPWindowFree( pxFound );
 800f1cc:	69b8      	ldr	r0, [r7, #24]
 800f1ce:	f7ff fe49 	bl	800ee64 <vTCPWindowFree>
                            }
                        } while( pxFound != NULL );
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1f0      	bne.n	800f1ba <lTCPWindowRxCheck+0x5e>

                        /*  Check for following segments that are already in the
                         * queue and increment ulCurrentSequenceNumber. */
                        for( ; ; )
                        {
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800f1d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7ff fd3a 	bl	800ec54 <xTCPWindowRxFind>
 800f1e0:	61b8      	str	r0, [r7, #24]

                            if( pxFound == NULL )
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d009      	beq.n	800f1fc <lTCPWindowRxCheck+0xa0>
                            {
                                break;
                            }

                            ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f0:	4413      	add	r3, r2
 800f1f2:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* As all packet below this one have been passed to the
                             * user it can be discarded. */
                            vTCPWindowFree( pxFound );
 800f1f4:	69b8      	ldr	r0, [r7, #24]
 800f1f6:	f7ff fe35 	bl	800ee64 <vTCPWindowFree>
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800f1fa:	e7ed      	b.n	800f1d8 <lTCPWindowRxCheck+0x7c>
                                break;
 800f1fc:	bf00      	nop
                        }

                        if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800f1fe:	697a      	ldr	r2, [r7, #20]
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	429a      	cmp	r2, r3
 800f204:	d026      	beq.n	800f254 <lTCPWindowRxCheck+0xf8>
                        {
                            /*  After the current data-package, there is more data
                             * to be popped. */
                            pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800f206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	1ad2      	subs	r2, r2, r3
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	631a      	str	r2, [r3, #48]	; 0x30

                            if( xTCPWindowLoggingLevel >= 1 )
 800f210:	4b79      	ldr	r3, [pc, #484]	; (800f3f8 <lTCPWindowRxCheck+0x29c>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	dd1d      	ble.n	800f254 <lTCPWindowRxCheck+0xf8>
                            {
                                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: retran %lu (Found %lu bytes at %lu cnt %ld)\n",
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f21e:	461c      	mov	r4, r3
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f226:	461d      	mov	r5, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	68ba      	ldr	r2, [r7, #8]
 800f22e:	1ad0      	subs	r0, r2, r3
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f234:	68fa      	ldr	r2, [r7, #12]
 800f236:	68d2      	ldr	r2, [r2, #12]
 800f238:	6979      	ldr	r1, [r7, #20]
 800f23a:	1a8a      	subs	r2, r1, r2
 800f23c:	68f9      	ldr	r1, [r7, #12]
 800f23e:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 800f242:	9102      	str	r1, [sp, #8]
 800f244:	9201      	str	r2, [sp, #4]
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	4603      	mov	r3, r0
 800f24a:	462a      	mov	r2, r5
 800f24c:	4621      	mov	r1, r4
 800f24e:	486b      	ldr	r0, [pc, #428]	; (800f3fc <lTCPWindowRxCheck+0x2a0>)
 800f250:	f7f1 fb7c 	bl	800094c <vLoggingPrintf>
                                                         listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                            }
                        }
                    }

                    pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f258:	611a      	str	r2, [r3, #16]

                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    lReturn = 0;
 800f25a:	2300      	movs	r3, #0
 800f25c:	627b      	str	r3, [r7, #36]	; 0x24
 800f25e:	e0c4      	b.n	800f3ea <lTCPWindowRxCheck+0x28e>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	3301      	adds	r3, #1
 800f264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f266:	429a      	cmp	r2, r3
 800f268:	d103      	bne.n	800f272 <lTCPWindowRxCheck+0x116>
            {
                /* Looks like a TCP keep-alive message.  Do not accept/store Rx data
                 * ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
                lReturn = -1;
 800f26a:	f04f 33ff 	mov.w	r3, #4294967295
 800f26e:	627b      	str	r3, [r7, #36]	; 0x24
 800f270:	e0bb      	b.n	800f3ea <lTCPWindowRxCheck+0x28e>
                /* The packet is not the one expected.  See if it falls within the Rx
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */
                ulLast = ulSequenceNumber + ulLength;
 800f272:	68ba      	ldr	r2, [r7, #8]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4413      	add	r3, r2
 800f278:	62bb      	str	r3, [r7, #40]	; 0x28

                ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 800f27a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	1ad3      	subs	r3, r2, r3
 800f280:	623b      	str	r3, [r7, #32]
                /* The cast from unsigned long to signed long is on purpose. */
                lDistance = ( int32_t ) ulIntermediateResult;
 800f282:	6a3b      	ldr	r3, [r7, #32]
 800f284:	61fb      	str	r3, [r7, #28]

                if( lDistance <= 0 )
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	dc03      	bgt.n	800f294 <lTCPWindowRxCheck+0x138>
                {
                    /* An earlier has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                    lReturn = -1;
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295
 800f290:	627b      	str	r3, [r7, #36]	; 0x24
 800f292:	e0aa      	b.n	800f3ea <lTCPWindowRxCheck+0x28e>
                }
                else if( lDistance > ( int32_t ) ulSpace )
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	69fa      	ldr	r2, [r7, #28]
 800f298:	429a      	cmp	r2, r3
 800f29a:	dd09      	ble.n	800f2b0 <lTCPWindowRxCheck+0x154>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	69f9      	ldr	r1, [r7, #28]
 800f2a2:	4857      	ldr	r0, [pc, #348]	; (800f400 <lTCPWindowRxCheck+0x2a4>)
 800f2a4:	f7f1 fb52 	bl	800094c <vLoggingPrintf>
                    lReturn = -1;
 800f2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ac:	627b      	str	r3, [r7, #36]	; 0x24
 800f2ae:	e09c      	b.n	800f3ea <lTCPWindowRxCheck+0x28e>
                     * This is useful because subsequent packets will be SACK'd with
                     * single one message
                     */
                    for( ; ; )
                    {
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800f2b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f7ff fcce 	bl	800ec54 <xTCPWindowRxFind>
 800f2b8:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d006      	beq.n	800f2ce <lTCPWindowRxCheck+0x172>
                        {
                            break;
                        }

                        ulLast += ( uint32_t ) pxFound->lDataLength;
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c8:	4413      	add	r3, r2
 800f2ca:	62bb      	str	r3, [r7, #40]	; 0x28
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800f2cc:	e7f0      	b.n	800f2b0 <lTCPWindowRxCheck+0x154>
                            break;
 800f2ce:	bf00      	nop
                    }

                    if( xTCPWindowLoggingLevel >= 1 )
 800f2d0:	4b49      	ldr	r3, [pc, #292]	; (800f3f8 <lTCPWindowRxCheck+0x29c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	dd1f      	ble.n	800f318 <lTCPWindowRxCheck+0x1bc>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f2de:	461d      	mov	r5, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f2e6:	461e      	mov	r6, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	1ad4      	subs	r4, r2, r3
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2f6:	1ad3      	subs	r3, r2, r3
 800f2f8:	68b9      	ldr	r1, [r7, #8]
 800f2fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2fc:	1a8a      	subs	r2, r1, r2
 800f2fe:	68f9      	ldr	r1, [r7, #12]
 800f300:	68c9      	ldr	r1, [r1, #12]
 800f302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f304:	1a41      	subs	r1, r0, r1
 800f306:	9102      	str	r1, [sp, #8]
 800f308:	9201      	str	r2, [sp, #4]
 800f30a:	9300      	str	r3, [sp, #0]
 800f30c:	4623      	mov	r3, r4
 800f30e:	4632      	mov	r2, r6
 800f310:	4629      	mov	r1, r5
 800f312:	483c      	ldr	r0, [pc, #240]	; (800f404 <lTCPWindowRxCheck+0x2a8>)
 800f314:	f7f1 fb1a 	bl	800094c <vLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
                    }

                    /* Now prepare the SACK message.
                     * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
                    pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	4a3b      	ldr	r2, [pc, #236]	; (800f408 <lTCPWindowRxCheck+0x2ac>)
 800f31c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* First sequence number that we received. */
                    pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	061a      	lsls	r2, r3, #24
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	021b      	lsls	r3, r3, #8
 800f328:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f32c:	431a      	orrs	r2, r3
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	0a1b      	lsrs	r3, r3, #8
 800f332:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f336:	431a      	orrs	r2, r3
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	0e1b      	lsrs	r3, r3, #24
 800f33c:	431a      	orrs	r2, r3
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                    /* Last + 1 */
                    pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 800f344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f346:	061a      	lsls	r2, r3, #24
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	021b      	lsls	r3, r3, #8
 800f34c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f350:	431a      	orrs	r2, r3
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	0a1b      	lsrs	r3, r3, #8
 800f356:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f35a:	431a      	orrs	r2, r3
 800f35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35e:	0e1b      	lsrs	r3, r3, #24
 800f360:	431a      	orrs	r2, r3
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

                    /* Which make 12 (3*4) option bytes. */
                    pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	220c      	movs	r2, #12
 800f36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                    pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800f370:	68b9      	ldr	r1, [r7, #8]
 800f372:	68f8      	ldr	r0, [r7, #12]
 800f374:	f7ff fc6e 	bl	800ec54 <xTCPWindowRxFind>
 800f378:	61b8      	str	r0, [r7, #24]

                    if( pxFound != NULL )
 800f37a:	69bb      	ldr	r3, [r7, #24]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d003      	beq.n	800f388 <lTCPWindowRxCheck+0x22c>
                    {
                        /* This out-of-sequence packet has been received for a
                         * second time.  It is already stored but do send a SACK
                         * again. */
                        lReturn = -1;
 800f380:	f04f 33ff 	mov.w	r3, #4294967295
 800f384:	627b      	str	r3, [r7, #36]	; 0x24
 800f386:	e030      	b.n	800f3ea <lTCPWindowRxCheck+0x28e>
                    }
                    else
                    {
                        pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	2301      	movs	r3, #1
 800f38c:	68b9      	ldr	r1, [r7, #8]
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7ff fc88 	bl	800eca4 <xTCPWindowNew>
 800f394:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d107      	bne.n	800f3ac <lTCPWindowRxCheck+0x250>
                        {
                            /* Can not send a SACK, because the segment cannot be
                             * stored. */
                            pxWindow->ucOptionLength = 0U;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                            /* Needs to be stored but there is no segment
                             * available. */
                            lReturn = -1;
 800f3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800f3aa:	e01e      	b.n	800f3ea <lTCPWindowRxCheck+0x28e>
                        }
                        else
                        {
                            if( xTCPWindowLoggingLevel != 0 )
 800f3ac:	4b12      	ldr	r3, [pc, #72]	; (800f3f8 <lTCPWindowRxCheck+0x29c>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d014      	beq.n	800f3de <lTCPWindowRxCheck+0x282>
                            {
                                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %lu (cnt %lu)\n",
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	68ba      	ldr	r2, [r7, #8]
 800f3ca:	1ad2      	subs	r2, r2, r3
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	480c      	ldr	r0, [pc, #48]	; (800f40c <lTCPWindowRxCheck+0x2b0>)
 800f3da:	f7f1 fab7 	bl	800094c <vLoggingPrintf>
                                FreeRTOS_flush_logging();
                            }

                            /* Return a positive value.  The packet may be accepted
                            * and stored but an earlier packet is still missing. */
                            ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	623b      	str	r3, [r7, #32]
                            lReturn = ( int32_t ) ulIntermediateResult;
 800f3e6:	6a3b      	ldr	r3, [r7, #32]
 800f3e8:	627b      	str	r3, [r7, #36]	; 0x24
                        }
                    }
                }
            }

            return lReturn;
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3734      	adds	r7, #52	; 0x34
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f4:	08014c6c 	.word	0x08014c6c
 800f3f8:	2000bd10 	.word	0x2000bd10
 800f3fc:	08014cb0 	.word	0x08014cb0
 800f400:	08014cf8 	.word	0x08014cf8
 800f404:	08014d40 	.word	0x08014d40
 800f408:	0a050101 	.word	0x0a050101
 800f40c:	08014d80 	.word	0x08014d80

0800f410 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 800f410:	b480      	push	{r7}
 800f412:	b087      	sub	sp, #28
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4413      	add	r3, r2
 800f422:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 800f424:	697a      	ldr	r2, [r7, #20]
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	429a      	cmp	r2, r3
 800f42a:	db03      	blt.n	800f434 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 800f42c:	697a      	ldr	r2, [r7, #20]
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 800f434:	697b      	ldr	r3, [r7, #20]
        }
 800f436:	4618      	mov	r0, r3
 800f438:	371c      	adds	r7, #28
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
	...

0800f444 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 800f444:	b580      	push	{r7, lr}
 800f446:	b08c      	sub	sp, #48	; 0x30
 800f448:	af02      	add	r7, sp, #8
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	627b      	str	r3, [r7, #36]	; 0x24
            int32_t lDone = 0;
 800f456:	2300      	movs	r3, #0
 800f458:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f462:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( pxSegment != NULL )
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	2b00      	cmp	r3, #0
 800f468:	f000 80d6 	beq.w	800f618 <lTCPWindowTxAdd+0x1d4>
            {
                if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	689a      	ldr	r2, [r3, #8]
 800f470:	69bb      	ldr	r3, [r7, #24]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	429a      	cmp	r2, r3
 800f476:	f280 80cf 	bge.w	800f618 <lTCPWindowTxAdd+0x1d4>
                {
                    if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	7d9b      	ldrb	r3, [r3, #22]
 800f47e:	f003 0301 	and.w	r3, r3, #1
 800f482:	b2db      	uxtb	r3, r3
 800f484:	2b00      	cmp	r3, #0
 800f486:	f040 80c7 	bne.w	800f618 <lTCPWindowTxAdd+0x1d4>
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	689b      	ldr	r3, [r3, #8]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f000 80c2 	beq.w	800f618 <lTCPWindowTxAdd+0x1d4>
                    {
                        /* Adding data to a segment that was already in the TX queue.  It
                         * will be filled-up to a maximum of MSS (maximum segment size). */
                        lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800f494:	69bb      	ldr	r3, [r7, #24]
 800f496:	685a      	ldr	r2, [r3, #4]
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	1ad3      	subs	r3, r2, r3
 800f49e:	4619      	mov	r1, r3
 800f4a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4a2:	f7ff faa9 	bl	800e9f8 <FreeRTOS_min_int32>
 800f4a6:	6178      	str	r0, [r7, #20]

                        pxSegment->lDataLength += lToWrite;
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	689a      	ldr	r2, [r3, #8]
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	441a      	add	r2, r3
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	609a      	str	r2, [r3, #8]

                        if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	689a      	ldr	r2, [r3, #8]
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	db02      	blt.n	800f4c6 <lTCPWindowTxAdd+0x82>
                        {
                            /* This segment is full, don't add more bytes. */
                            pxWindow->pxHeadSegment = NULL;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        lBytesLeft -= lToWrite;
 800f4c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	627b      	str	r3, [r7, #36]	; 0x24

                        /* ulNextTxSequenceNumber is the sequence number of the next byte to
                         * be stored for transmission. */
                        pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	441a      	add	r2, r3
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Increased the return value. */
                        lDone += lToWrite;
 800f4da:	6a3a      	ldr	r2, [r7, #32]
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	4413      	add	r3, r2
 800f4e0:	623b      	str	r3, [r7, #32]

                        /* Some detailed logging, for those who're interested. */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800f4e2:	4b52      	ldr	r3, [pc, #328]	; (800f62c <lTCPWindowTxAdd+0x1e8>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	dd1a      	ble.n	800f520 <lTCPWindowTxAdd+0xdc>
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f4f0:	2b17      	cmp	r3, #23
 800f4f2:	d015      	beq.n	800f520 <lTCPWindowTxAdd+0xdc>
                        {
                            FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4lu bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	69db      	ldr	r3, [r3, #28]
 800f4fc:	1ad1      	subs	r1, r2, r3
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	6898      	ldr	r0, [r3, #8]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	69db      	ldr	r3, [r3, #28]
 800f50a:	1ad3      	subs	r3, r2, r3
 800f50c:	69ba      	ldr	r2, [r7, #24]
 800f50e:	68d2      	ldr	r2, [r2, #12]
 800f510:	9201      	str	r2, [sp, #4]
 800f512:	9300      	str	r3, [sp, #0]
 800f514:	4603      	mov	r3, r0
 800f516:	460a      	mov	r2, r1
 800f518:	68b9      	ldr	r1, [r7, #8]
 800f51a:	4845      	ldr	r0, [pc, #276]	; (800f630 <lTCPWindowTxAdd+0x1ec>)
 800f51c:	f7f1 fa16 	bl	800094c <vLoggingPrintf>
                            FreeRTOS_flush_logging();
                        }

                        /* Calculate the next position in the circular data buffer, knowing
                         * its maximum length 'lMax'. */
                        lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800f520:	697a      	ldr	r2, [r7, #20]
 800f522:	6839      	ldr	r1, [r7, #0]
 800f524:	69f8      	ldr	r0, [r7, #28]
 800f526:	f7ff ff73 	bl	800f410 <lTCPIncrementTxPosition>
 800f52a:	61f8      	str	r0, [r7, #28]
                    }
                }
            }

            while( lBytesLeft > 0 )
 800f52c:	e074      	b.n	800f618 <lTCPWindowTxAdd+0x1d4>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f538:	461a      	mov	r2, r3
 800f53a:	2300      	movs	r3, #0
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f7ff fbb1 	bl	800eca4 <xTCPWindowNew>
 800f542:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d05e      	beq.n	800f608 <lTCPWindowTxAdd+0x1c4>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	4619      	mov	r1, r3
 800f550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f552:	f7ff fa51 	bl	800e9f8 <FreeRTOS_min_int32>
 800f556:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	697a      	ldr	r2, [r7, #20]
 800f55c:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 800f55e:	69bb      	ldr	r3, [r7, #24]
 800f560:	69fa      	ldr	r2, [r7, #28]
 800f562:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 800f564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	1ad3      	subs	r3, r2, r3
 800f56a:	627b      	str	r3, [r7, #36]	; 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800f56c:	697a      	ldr	r2, [r7, #20]
 800f56e:	6839      	ldr	r1, [r7, #0]
 800f570:	69f8      	ldr	r0, [r7, #28]
 800f572:	f7ff ff4d 	bl	800f410 <lTCPIncrementTxPosition>
 800f576:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	441a      	add	r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	635a      	str	r2, [r3, #52]	; 0x34
                    lDone += lToWrite;
 800f584:	6a3a      	ldr	r2, [r7, #32]
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	4413      	add	r3, r2
 800f58a:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	3318      	adds	r3, #24
 800f596:	4619      	mov	r1, r3
 800f598:	4610      	mov	r0, r2
 800f59a:	f7ff fab2 	bl	800eb02 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	689a      	ldr	r2, [r3, #8]
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	da03      	bge.n	800f5b2 <lTCPWindowTxAdd+0x16e>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	69ba      	ldr	r2, [r7, #24]
 800f5ae:	67da      	str	r2, [r3, #124]	; 0x7c
 800f5b0:	e002      	b.n	800f5b8 <lTCPWindowTxAdd+0x174>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f5be:	2b17      	cmp	r3, #23
 800f5c0:	d02a      	beq.n	800f618 <lTCPWindowTxAdd+0x1d4>
                    {
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f5c2:	4b1a      	ldr	r3, [pc, #104]	; (800f62c <lTCPWindowTxAdd+0x1e8>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	dc07      	bgt.n	800f5da <lTCPWindowTxAdd+0x196>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800f5ca:	4b18      	ldr	r3, [pc, #96]	; (800f62c <lTCPWindowTxAdd+0x1e8>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	dd22      	ble.n	800f618 <lTCPWindowTxAdd+0x1d4>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d01e      	beq.n	800f618 <lTCPWindowTxAdd+0x1d4>
                        {
                            FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: New %4ld bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	69db      	ldr	r3, [r3, #28]
 800f5e2:	1ad1      	subs	r1, r2, r3
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	6898      	ldr	r0, [r3, #8]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	69db      	ldr	r3, [r3, #28]
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	69ba      	ldr	r2, [r7, #24]
 800f5f4:	68d2      	ldr	r2, [r2, #12]
 800f5f6:	9201      	str	r2, [sp, #4]
 800f5f8:	9300      	str	r3, [sp, #0]
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	460a      	mov	r2, r1
 800f5fe:	68b9      	ldr	r1, [r7, #8]
 800f600:	480c      	ldr	r0, [pc, #48]	; (800f634 <lTCPWindowTxAdd+0x1f0>)
 800f602:	f7f1 f9a3 	bl	800094c <vLoggingPrintf>
 800f606:	e007      	b.n	800f618 <lTCPWindowTxAdd+0x1d4>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 800f608:	6a3b      	ldr	r3, [r7, #32]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d008      	beq.n	800f620 <lTCPWindowTxAdd+0x1dc>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
 800f60e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f610:	4809      	ldr	r0, [pc, #36]	; (800f638 <lTCPWindowTxAdd+0x1f4>)
 800f612:	f7f1 f99b 	bl	800094c <vLoggingPrintf>
                    }

                    break;
 800f616:	e003      	b.n	800f620 <lTCPWindowTxAdd+0x1dc>
            while( lBytesLeft > 0 )
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	dc87      	bgt.n	800f52e <lTCPWindowTxAdd+0xea>
 800f61e:	e000      	b.n	800f622 <lTCPWindowTxAdd+0x1de>
                    break;
 800f620:	bf00      	nop
                }
            }

            return lDone;
 800f622:	6a3b      	ldr	r3, [r7, #32]
        }
 800f624:	4618      	mov	r0, r3
 800f626:	3728      	adds	r7, #40	; 0x28
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	2000bd10 	.word	0x2000bd10
 800f630:	08014db0 	.word	0x08014db0
 800f634:	08014dfc 	.word	0x08014dfc
 800f638:	08014e48 	.word	0x08014e48

0800f63c <xTCPWindowTxDone>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 800f63c:	b480      	push	{r7}
 800f63e:	b083      	sub	sp, #12
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d101      	bne.n	800f652 <xTCPWindowTxDone+0x16>
 800f64e:	2301      	movs	r3, #1
 800f650:	e000      	b.n	800f654 <xTCPWindowTxDone+0x18>
 800f652:	2300      	movs	r3, #0
        }
 800f654:	4618      	mov	r0, r3
 800f656:	370c      	adds	r7, #12
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3354      	adds	r3, #84	; 0x54
 800f66e:	4618      	mov	r0, r3
 800f670:	f7ff fbde 	bl	800ee30 <xTCPWindowPeekHead>
 800f674:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d102      	bne.n	800f682 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 800f67c:	2300      	movs	r3, #0
 800f67e:	613b      	str	r3, [r7, #16]
 800f680:	e02f      	b.n	800f6e2 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a1b      	ldr	r3, [r3, #32]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d306      	bcc.n	800f69c <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a1b      	ldr	r3, [r3, #32]
 800f696:	1ad3      	subs	r3, r2, r3
 800f698:	617b      	str	r3, [r7, #20]
 800f69a:	e001      	b.n	800f6a0 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0UL;
 800f69c:	2300      	movs	r3, #0
 800f69e:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800f6a0:	6979      	ldr	r1, [r7, #20]
 800f6a2:	6838      	ldr	r0, [r7, #0]
 800f6a4:	f7ff f9b8 	bl	800ea18 <FreeRTOS_min_uint32>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	1a9b      	subs	r3, r3, r2
 800f6ae:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	689b      	ldr	r3, [r3, #8]
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d302      	bcc.n	800f6c2 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	613b      	str	r3, [r7, #16]
 800f6c0:	e001      	b.n	800f6c6 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00a      	beq.n	800f6e2 <prvTCPWindowTxHasSpace+0x82>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	689a      	ldr	r2, [r3, #8]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	689b      	ldr	r3, [r3, #8]
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	440b      	add	r3, r1
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d201      	bcs.n	800f6e2 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 800f6e2:	693b      	ldr	r3, [r7, #16]
        }
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3718      	adds	r7, #24
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b088      	sub	sp, #32
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f702:	2b00      	cmp	r3, #0
 800f704:	d002      	beq.n	800f70c <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 800f706:	2301      	movs	r3, #1
 800f708:	61fb      	str	r3, [r7, #28]
 800f70a:	e04a      	b.n	800f7a2 <xTCPWindowTxHasData+0xb6>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	3368      	adds	r3, #104	; 0x68
 800f710:	4618      	mov	r0, r3
 800f712:	f7ff fb8d 	bl	800ee30 <xTCPWindowPeekHead>
 800f716:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d019      	beq.n	800f752 <xTCPWindowTxHasData+0x66>
                {
                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	3310      	adds	r3, #16
 800f722:	4618      	mov	r0, r3
 800f724:	f7ff fa0a 	bl	800eb3c <ulTimerGetAge>
 800f728:	6178      	str	r0, [r7, #20]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f72e:	461a      	mov	r2, r3
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	7d1b      	ldrb	r3, [r3, #20]
 800f734:	fa02 f303 	lsl.w	r3, r2, r3
 800f738:	613b      	str	r3, [r7, #16]

                    if( ulMaxAge > ulAge )
 800f73a:	693a      	ldr	r2, [r7, #16]
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d904      	bls.n	800f74c <xTCPWindowTxHasData+0x60>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 800f742:	693a      	ldr	r2, [r7, #16]
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	1ad2      	subs	r2, r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 800f74c:	2301      	movs	r3, #1
 800f74e:	61fb      	str	r3, [r7, #28]
 800f750:	e027      	b.n	800f7a2 <xTCPWindowTxHasData+0xb6>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	3354      	adds	r3, #84	; 0x54
 800f756:	4618      	mov	r0, r3
 800f758:	f7ff fb6a 	bl	800ee30 <xTCPWindowPeekHead>
 800f75c:	61b8      	str	r0, [r7, #24]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d102      	bne.n	800f76a <xTCPWindowTxHasData+0x7e>
                    {
                        xReturn = pdFALSE;
 800f764:	2300      	movs	r3, #0
 800f766:	61fb      	str	r3, [r7, #28]
 800f768:	e01b      	b.n	800f7a2 <xTCPWindowTxHasData+0xb6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f76a:	68b9      	ldr	r1, [r7, #8]
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f7ff ff77 	bl	800f660 <prvTCPWindowTxHasSpace>
 800f772:	4603      	mov	r3, r0
 800f774:	2b00      	cmp	r3, #0
 800f776:	d102      	bne.n	800f77e <xTCPWindowTxHasData+0x92>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 800f778:	2300      	movs	r3, #0
 800f77a:	61fb      	str	r3, [r7, #28]
 800f77c:	e011      	b.n	800f7a2 <xTCPWindowTxHasData+0xb6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	f003 0302 	and.w	r3, r3, #2
 800f786:	b2db      	uxtb	r3, r3
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d008      	beq.n	800f79e <xTCPWindowTxHasData+0xb2>
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	689a      	ldr	r2, [r3, #8]
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	429a      	cmp	r2, r3
 800f796:	da02      	bge.n	800f79e <xTCPWindowTxHasData+0xb2>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 800f798:	2300      	movs	r3, #0
 800f79a:	61fb      	str	r3, [r7, #28]
 800f79c:	e001      	b.n	800f7a2 <xTCPWindowTxHasData+0xb6>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 800f79e:	2301      	movs	r3, #1
 800f7a0:	61fb      	str	r3, [r7, #28]
                    }
                }
            }

            return xReturn;
 800f7a2:	69fb      	ldr	r3, [r7, #28]
        }
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3720      	adds	r7, #32
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 800f7ac:	b590      	push	{r4, r7, lr}
 800f7ae:	b08b      	sub	sp, #44	; 0x2c
 800f7b0:	af02      	add	r7, sp, #8
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulMaxTime;
            uint32_t ulReturn = ~0UL;
 800f7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7bc:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	3340      	adds	r3, #64	; 0x40
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7ff fb18 	bl	800edf8 <xTCPWindowGetHead>
 800f7c8:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	62da      	str	r2, [r3, #44]	; 0x2c

            if( pxSegment == NULL )
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f040 80a8 	bne.w	800f92a <ulTCPWindowTxGet+0x17e>
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	3368      	adds	r3, #104	; 0x68
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7ff fb26 	bl	800ee30 <xTCPWindowPeekHead>
 800f7e4:	61f8      	str	r0, [r7, #28]

                if( pxSegment != NULL )
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d03e      	beq.n	800f86a <ulTCPWindowTxGet+0xbe>
                {
                    /* Do check the timing. */
                    ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	7d1b      	ldrb	r3, [r3, #20]
 800f7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f7fa:	617b      	str	r3, [r7, #20]

                    if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	3310      	adds	r3, #16
 800f800:	4618      	mov	r0, r3
 800f802:	f7ff f99b 	bl	800eb3c <ulTimerGetAge>
 800f806:	4602      	mov	r2, r0
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d22b      	bcs.n	800f866 <ulTCPWindowTxGet+0xba>
                    {
                        /* A normal (non-fast) retransmission.  Move it from the
                         * head of the waiting queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	3368      	adds	r3, #104	; 0x68
 800f812:	4618      	mov	r0, r3
 800f814:	f7ff faf0 	bl	800edf8 <xTCPWindowGetHead>
 800f818:	61f8      	str	r0, [r7, #28]
                        pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	2200      	movs	r2, #0
 800f81e:	755a      	strb	r2, [r3, #21]

                        /* Some detailed logging. */
                        if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800f820:	4b81      	ldr	r3, [pc, #516]	; (800fa28 <ulTCPWindowTxGet+0x27c>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d020      	beq.n	800f86a <ulTCPWindowTxGet+0xbe>
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f82e:	2b17      	cmp	r3, #23
 800f830:	d01b      	beq.n	800f86a <ulTCPWindowTxGet+0xbe>
                        {
                            FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %ld bytes for sequence number %lu (%lX)\n",
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f838:	4618      	mov	r0, r3
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f840:	461c      	mov	r4, r3
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	6899      	ldr	r1, [r3, #8]
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	69db      	ldr	r3, [r3, #28]
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	69fa      	ldr	r2, [r7, #28]
 800f852:	6812      	ldr	r2, [r2, #0]
 800f854:	9201      	str	r2, [sp, #4]
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	460b      	mov	r3, r1
 800f85a:	4622      	mov	r2, r4
 800f85c:	4601      	mov	r1, r0
 800f85e:	4873      	ldr	r0, [pc, #460]	; (800fa2c <ulTCPWindowTxGet+0x280>)
 800f860:	f7f1 f874 	bl	800094c <vLoggingPrintf>
 800f864:	e001      	b.n	800f86a <ulTCPWindowTxGet+0xbe>
                            FreeRTOS_flush_logging();
                        }
                    }
                    else
                    {
                        pxSegment = NULL;
 800f866:	2300      	movs	r3, #0
 800f868:	61fb      	str	r3, [r7, #28]
                    }
                }

                if( pxSegment == NULL )
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d178      	bne.n	800f962 <ulTCPWindowTxGet+0x1b6>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	3354      	adds	r3, #84	; 0x54
 800f874:	4618      	mov	r0, r3
 800f876:	f7ff fadb 	bl	800ee30 <xTCPWindowPeekHead>
 800f87a:	61f8      	str	r0, [r7, #28]

                    if( pxSegment == NULL )
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d102      	bne.n	800f888 <ulTCPWindowTxGet+0xdc>
                    {
                        /* No segments queued. */
                        ulReturn = 0UL;
 800f882:	2300      	movs	r3, #0
 800f884:	61bb      	str	r3, [r7, #24]
 800f886:	e06c      	b.n	800f962 <ulTCPWindowTxGet+0x1b6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	f003 0302 	and.w	r3, r3, #2
 800f890:	b2db      	uxtb	r3, r3
 800f892:	2b00      	cmp	r3, #0
 800f894:	d008      	beq.n	800f8a8 <ulTCPWindowTxGet+0xfc>
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	689a      	ldr	r2, [r3, #8]
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	da02      	bge.n	800f8a8 <ulTCPWindowTxGet+0xfc>
                    {
                        /* A segment has been queued but the driver waits until it
                         * has a full size of MSS. */
                        ulReturn = 0;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	61bb      	str	r3, [r7, #24]
 800f8a6:	e05c      	b.n	800f962 <ulTCPWindowTxGet+0x1b6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f8a8:	68b9      	ldr	r1, [r7, #8]
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f7ff fed8 	bl	800f660 <prvTCPWindowTxHasSpace>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d102      	bne.n	800f8bc <ulTCPWindowTxGet+0x110>
                    {
                        /* Peer has no more space at this moment. */
                        ulReturn = 0;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	61bb      	str	r3, [r7, #24]
 800f8ba:	e052      	b.n	800f962 <ulTCPWindowTxGet+0x1b6>
                    }
                    else
                    {
                        /* Move it out of the Tx queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	3354      	adds	r3, #84	; 0x54
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7ff fa99 	bl	800edf8 <xTCPWindowGetHead>
 800f8c6:	61f8      	str	r0, [r7, #28]

                        /* Don't let pxHeadSegment point to this segment any more,
                         * so no more data will be added. */
                        if( pxWindow->pxHeadSegment == pxSegment )
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8cc:	69fa      	ldr	r2, [r7, #28]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d102      	bne.n	800f8d8 <ulTCPWindowTxGet+0x12c>
                        {
                            pxWindow->pxHeadSegment = NULL;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        /* pxWindow->tx.highest registers the highest sequence
                         * number in our transmission window. */
                        pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	69fa      	ldr	r2, [r7, #28]
 800f8de:	6892      	ldr	r2, [r2, #8]
 800f8e0:	441a      	add	r2, r3
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	629a      	str	r2, [r3, #40]	; 0x28

                        /* ...and more detailed logging */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800f8e6:	4b50      	ldr	r3, [pc, #320]	; (800fa28 <ulTCPWindowTxGet+0x27c>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	dd39      	ble.n	800f962 <ulTCPWindowTxGet+0x1b6>
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f8f4:	2b17      	cmp	r3, #23
 800f8f6:	d034      	beq.n	800f962 <ulTCPWindowTxGet+0x1b6>
                        {
                            FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %ld bytes for sequence number %lu (ws %lu)\n",
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f8fe:	4618      	mov	r0, r3
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f906:	461c      	mov	r4, r3
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	6899      	ldr	r1, [r3, #8]
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	681a      	ldr	r2, [r3, #0]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	69db      	ldr	r3, [r3, #28]
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	68ba      	ldr	r2, [r7, #8]
 800f918:	9201      	str	r2, [sp, #4]
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	460b      	mov	r3, r1
 800f91e:	4622      	mov	r2, r4
 800f920:	4601      	mov	r1, r0
 800f922:	4843      	ldr	r0, [pc, #268]	; (800fa30 <ulTCPWindowTxGet+0x284>)
 800f924:	f7f1 f812 	bl	800094c <vLoggingPrintf>
 800f928:	e01b      	b.n	800f962 <ulTCPWindowTxGet+0x1b6>
            }
            else
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 800f92a:	4b3f      	ldr	r3, [pc, #252]	; (800fa28 <ulTCPWindowTxGet+0x27c>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d017      	beq.n	800f962 <ulTCPWindowTxGet+0x1b6>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %ld bytes for sequence number %lu (ws %lu)\n",
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f938:	4618      	mov	r0, r3
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f940:	461c      	mov	r4, r3
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	6899      	ldr	r1, [r3, #8]
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	69db      	ldr	r3, [r3, #28]
 800f94e:	1ad3      	subs	r3, r2, r3
 800f950:	68ba      	ldr	r2, [r7, #8]
 800f952:	9201      	str	r2, [sp, #4]
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	460b      	mov	r3, r1
 800f958:	4622      	mov	r2, r4
 800f95a:	4601      	mov	r1, r0
 800f95c:	4835      	ldr	r0, [pc, #212]	; (800fa34 <ulTCPWindowTxGet+0x288>)
 800f95e:	f7f0 fff5 	bl	800094c <vLoggingPrintf>
                    FreeRTOS_flush_logging();
                }
            }

            /* See if it has already been determined to return 0. */
            if( ulReturn != 0UL )
 800f962:	69bb      	ldr	r3, [r7, #24]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d05a      	beq.n	800fa1e <ulTCPWindowTxGet+0x272>
            {
                /* pxSegment is not NULL when ulReturn != 0UL. */
                configASSERT( pxSegment != NULL );
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d104      	bne.n	800f978 <ulTCPWindowTxGet+0x1cc>
 800f96e:	4932      	ldr	r1, [pc, #200]	; (800fa38 <ulTCPWindowTxGet+0x28c>)
 800f970:	f240 60d9 	movw	r0, #1753	; 0x6d9
 800f974:	f7f1 f920 	bl	8000bb8 <vAssertCalled>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d004      	beq.n	800f98a <ulTCPWindowTxGet+0x1de>
 800f980:	492d      	ldr	r1, [pc, #180]	; (800fa38 <ulTCPWindowTxGet+0x28c>)
 800f982:	f240 60da 	movw	r0, #1754	; 0x6da
 800f986:	f7f1 f917 	bl	8000bb8 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	3318      	adds	r3, #24
 800f994:	4619      	mov	r1, r3
 800f996:	4610      	mov	r0, r2
 800f998:	f7ff f8b3 	bl	800eb02 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800f99c:	69fa      	ldr	r2, [r7, #28]
 800f99e:	7d93      	ldrb	r3, [r2, #22]
 800f9a0:	f043 0301 	orr.w	r3, r3, #1
 800f9a4:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	7d1b      	ldrb	r3, [r3, #20]
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	7d1b      	ldrb	r3, [r3, #20]
 800f9b6:	2b04      	cmp	r3, #4
 800f9b8:	d121      	bne.n	800f9fe <ulTCPWindowTxGet+0x252>
                {
                    if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	689a      	ldr	r2, [r3, #8]
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f9c4:	005b      	lsls	r3, r3, #1
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d919      	bls.n	800f9fe <ulTCPWindowTxGet+0x252>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f9d8:	4618      	mov	r0, r3
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	689a      	ldr	r2, [r3, #8]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f9e4:	005b      	lsls	r3, r3, #1
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	4613      	mov	r3, r2
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	4813      	ldr	r0, [pc, #76]	; (800fa3c <ulTCPWindowTxGet+0x290>)
 800f9ee:	f7f0 ffad 	bl	800094c <vLoggingPrintf>
                                                 pxWindow->usPeerPortNumber,
                                                 pxWindow->usOurPortNumber,
                                                 pxWindow->xSize.ulTxWindowLength,
                                                 2U * pxWindow->usMSS ) );
                        pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f9f8:	005a      	lsls	r2, r3, #1
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	609a      	str	r2, [r3, #8]
                    }
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	3310      	adds	r3, #16
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7ff f88d 	bl	800eb22 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	68da      	ldr	r2, [r3, #12]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	689b      	ldr	r3, [r3, #8]
 800fa1c:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 800fa1e:	69bb      	ldr	r3, [r7, #24]
        }
 800fa20:	4618      	mov	r0, r3
 800fa22:	3724      	adds	r7, #36	; 0x24
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd90      	pop	{r4, r7, pc}
 800fa28:	2000bd10 	.word	0x2000bd10
 800fa2c:	08014e84 	.word	0x08014e84
 800fa30:	08014ed0 	.word	0x08014ed0
 800fa34:	08014f20 	.word	0x08014f20
 800fa38:	08014b90 	.word	0x08014b90
 800fa3c:	08014f70 	.word	0x08014f70

0800fa40 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 800fa40:	b5b0      	push	{r4, r5, r7, lr}
 800fa42:	b092      	sub	sp, #72	; 0x48
 800fa44:	af04      	add	r7, sp, #16
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	637b      	str	r3, [r7, #52]	; 0x34
            uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	633b      	str	r3, [r7, #48]	; 0x30
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	3398      	adds	r3, #152	; 0x98
 800fa58:	627b      	str	r3, [r7, #36]	; 0x24
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 800fa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	62fb      	str	r3, [r7, #44]	; 0x2c

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800fa60:	e0d4      	b.n	800fc0c <prvTCPWindowTxCheckAck+0x1cc>
            {
                xDoUnlink = pdFALSE;
 800fa62:	2300      	movs	r3, #0
 800fa64:	62bb      	str	r3, [r7, #40]	; 0x28
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800fa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fe ffe4 	bl	800ea38 <vCastPointerTo_TCPSegment_t>
 800fa70:	6238      	str	r0, [r7, #32]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800fa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800fa78:	6a3b      	ldr	r3, [r7, #32]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa80:	f7ff f812 	bl	800eaa8 <xSequenceGreaterThan>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d000      	beq.n	800fa8c <prvTCPWindowTxCheckAck+0x4c>
                {
                    continue;
 800fa8a:	e0bf      	b.n	800fc0c <prvTCPWindowTxCheckAck+0x1cc>
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800fa8c:	6a3b      	ldr	r3, [r7, #32]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa92:	429a      	cmp	r2, r3
 800fa94:	f040 80c7 	bne.w	800fc26 <prvTCPWindowTxCheckAck+0x1e6>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800fa98:	6a3b      	ldr	r3, [r7, #32]
 800fa9a:	689b      	ldr	r3, [r3, #8]
 800fa9c:	61fb      	str	r3, [r7, #28]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800fa9e:	6a3b      	ldr	r3, [r7, #32]
 800faa0:	7d9b      	ldrb	r3, [r3, #22]
 800faa2:	f003 0302 	and.w	r3, r3, #2
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d171      	bne.n	800fb90 <prvTCPWindowTxCheckAck+0x150>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	4413      	add	r3, r2
 800fab4:	6879      	ldr	r1, [r7, #4]
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fe fff6 	bl	800eaa8 <xSequenceGreaterThan>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d023      	beq.n	800fb0a <prvTCPWindowTxCheckAck+0xca>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                            {
                                uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 800fac2:	6a3b      	ldr	r3, [r7, #32]
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	69db      	ldr	r3, [r3, #28]
 800faca:	1ad3      	subs	r3, r2, r3
 800facc:	617b      	str	r3, [r7, #20]
                                FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %lu - %lu Partial sequence number %lu - %lu\n",
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800fad4:	461c      	mov	r4, r3
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fadc:	461d      	mov	r5, r3
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	69db      	ldr	r3, [r3, #28]
 800fae2:	697a      	ldr	r2, [r7, #20]
 800fae4:	1ad0      	subs	r0, r2, r3
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	69db      	ldr	r3, [r3, #28]
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	6979      	ldr	r1, [r7, #20]
 800faf0:	69fa      	ldr	r2, [r7, #28]
 800faf2:	440a      	add	r2, r1
 800faf4:	9202      	str	r2, [sp, #8]
 800faf6:	697a      	ldr	r2, [r7, #20]
 800faf8:	9201      	str	r2, [sp, #4]
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	4603      	mov	r3, r0
 800fafe:	462a      	mov	r2, r5
 800fb00:	4621      	mov	r1, r4
 800fb02:	484c      	ldr	r0, [pc, #304]	; (800fc34 <prvTCPWindowTxCheckAck+0x1f4>)
 800fb04:	f7f0 ff22 	bl	800094c <vLoggingPrintf>
                                                         ulFirstSeq - pxWindow->tx.ulFirstSequenceNumber,
                                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                         ulFirstSeq, ulFirstSeq + ulDataLength ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */
                        break;
 800fb08:	e08e      	b.n	800fc28 <prvTCPWindowTxCheckAck+0x1e8>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 800fb0a:	6a3a      	ldr	r2, [r7, #32]
 800fb0c:	7d93      	ldrb	r3, [r2, #22]
 800fb0e:	f043 0302 	orr.w	r3, r3, #2
 800fb12:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800fb14:	6a3b      	ldr	r3, [r7, #32]
 800fb16:	7d1b      	ldrb	r3, [r3, #20]
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d137      	bne.n	800fb8c <prvTCPWindowTxCheckAck+0x14c>
 800fb1c:	6a3b      	ldr	r3, [r7, #32]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	4413      	add	r3, r2
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d130      	bne.n	800fb8c <prvTCPWindowTxCheckAck+0x14c>
                    {
                        int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 800fb2a:	6a3b      	ldr	r3, [r7, #32]
 800fb2c:	3310      	adds	r3, #16
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7ff f804 	bl	800eb3c <ulTimerGetAge>
 800fb34:	4603      	mov	r3, r0
 800fb36:	61bb      	str	r3, [r7, #24]

                        if( pxWindow->lSRTT >= mS )
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb3c:	69ba      	ldr	r2, [r7, #24]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	dc0e      	bgt.n	800fb60 <prvTCPWindowTxCheckAck+0x120>
                        {
                            /* RTT becomes smaller: adapt slowly. */
                            pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb46:	4613      	mov	r3, r2
 800fb48:	00db      	lsls	r3, r3, #3
 800fb4a:	1a9a      	subs	r2, r3, r2
 800fb4c:	69bb      	ldr	r3, [r7, #24]
 800fb4e:	4413      	add	r3, r2
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	da00      	bge.n	800fb56 <prvTCPWindowTxCheckAck+0x116>
 800fb54:	3307      	adds	r3, #7
 800fb56:	10db      	asrs	r3, r3, #3
 800fb58:	461a      	mov	r2, r3
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	639a      	str	r2, [r3, #56]	; 0x38
 800fb5e:	e00e      	b.n	800fb7e <prvTCPWindowTxCheckAck+0x13e>
                        }
                        else
                        {
                            /* RTT becomes larger: adapt quicker */
                            pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb64:	4613      	mov	r3, r2
 800fb66:	005b      	lsls	r3, r3, #1
 800fb68:	441a      	add	r2, r3
 800fb6a:	69bb      	ldr	r3, [r7, #24]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	005b      	lsls	r3, r3, #1
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	da00      	bge.n	800fb76 <prvTCPWindowTxCheckAck+0x136>
 800fb74:	3307      	adds	r3, #7
 800fb76:	10db      	asrs	r3, r3, #3
 800fb78:	461a      	mov	r2, r3
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Cap to the minimum of 50ms. */
                        if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb82:	2b31      	cmp	r3, #49	; 0x31
 800fb84:	dc02      	bgt.n	800fb8c <prvTCPWindowTxCheckAck+0x14c>
                        {
                            pxWindow->lSRTT = winSRTT_CAP_mS;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2232      	movs	r2, #50	; 0x32
 800fb8a:	639a      	str	r2, [r3, #56]	; 0x38
                        }
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	62bb      	str	r3, [r7, #40]	; 0x28
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	6a1b      	ldr	r3, [r3, #32]
 800fb94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d128      	bne.n	800fbec <prvTCPWindowTxCheckAck+0x1ac>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800fb9a:	4b27      	ldr	r3, [pc, #156]	; (800fc38 <prvTCPWindowTxCheckAck+0x1f8>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	dd15      	ble.n	800fbce <prvTCPWindowTxCheckAck+0x18e>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fba8:	2b17      	cmp	r3, #23
 800fbaa:	d010      	beq.n	800fbce <prvTCPWindowTxCheckAck+0x18e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %lu - %lu Ready sequence number %lu\n",
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	69db      	ldr	r3, [r3, #28]
 800fbb0:	68ba      	ldr	r2, [r7, #8]
 800fbb2:	1ad1      	subs	r1, r2, r3
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	69db      	ldr	r3, [r3, #28]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	1ad0      	subs	r0, r2, r3
 800fbbc:	6a3b      	ldr	r3, [r7, #32]
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	69db      	ldr	r3, [r3, #28]
 800fbc4:	1ad3      	subs	r3, r2, r3
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	481c      	ldr	r0, [pc, #112]	; (800fc3c <prvTCPWindowTxCheckAck+0x1fc>)
 800fbca:	f7f0 febf 	bl	800094c <vLoggingPrintf>
                                                 ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                 pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	6a1a      	ldr	r2, [r3, #32]
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	441a      	add	r2, r3
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 800fbda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	4413      	add	r3, r2
 800fbe0:	637b      	str	r3, [r7, #52]	; 0x34

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 800fbe2:	6a38      	ldr	r0, [r7, #32]
 800fbe4:	f7ff f93e 	bl	800ee64 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	62bb      	str	r3, [r7, #40]	; 0x28
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800fbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d008      	beq.n	800fc04 <prvTCPWindowTxCheckAck+0x1c4>
 800fbf2:	6a3b      	ldr	r3, [r7, #32]
 800fbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d004      	beq.n	800fc04 <prvTCPWindowTxCheckAck+0x1c4>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 800fbfa:	6a3b      	ldr	r3, [r7, #32]
 800fbfc:	3318      	adds	r3, #24
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7f4 fec2 	bl	8004988 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 800fc04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	4413      	add	r3, r2
 800fc0a:	633b      	str	r3, [r7, #48]	; 0x30
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800fc0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d009      	beq.n	800fc28 <prvTCPWindowTxCheckAck+0x1e8>
 800fc14:	6879      	ldr	r1, [r7, #4]
 800fc16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc18:	f7fe ff2f 	bl	800ea7a <xSequenceLessThan>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f47f af1f 	bne.w	800fa62 <prvTCPWindowTxCheckAck+0x22>
 800fc24:	e000      	b.n	800fc28 <prvTCPWindowTxCheckAck+0x1e8>
                    break;
 800fc26:	bf00      	nop
            }

            return ulBytesConfirmed;
 800fc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        }
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3738      	adds	r7, #56	; 0x38
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bdb0      	pop	{r4, r5, r7, pc}
 800fc32:	bf00      	nop
 800fc34:	08014fa8 	.word	0x08014fa8
 800fc38:	2000bd10 	.word	0x2000bd10
 800fc3c:	08014ff4 	.word	0x08014ff4

0800fc40 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0UL;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	613b      	str	r3, [r7, #16]

            /* A higher Tx block has been acknowledged.  Now iterate through the
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	3370      	adds	r3, #112	; 0x70
 800fc52:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800fc5a:	e04c      	b.n	800fcf6 <prvTCPWindowFastRetransmit+0xb6>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7fe fee9 	bl	800ea38 <vCastPointerTo_TCPSegment_t>
 800fc66:	60b8      	str	r0, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	7d9b      	ldrb	r3, [r3, #22]
 800fc72:	f003 0302 	and.w	r3, r3, #2
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d13c      	bne.n	800fcf6 <prvTCPWindowFastRetransmit+0xb6>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	6839      	ldr	r1, [r7, #0]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fe fef9 	bl	800ea7a <xSequenceLessThan>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d033      	beq.n	800fcf6 <prvTCPWindowFastRetransmit+0xb6>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	7d5b      	ldrb	r3, [r3, #21]
 800fc92:	3301      	adds	r3, #1
 800fc94:	b2da      	uxtb	r2, r3
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	7d5b      	ldrb	r3, [r3, #21]
 800fc9e:	2b03      	cmp	r3, #3
 800fca0:	d129      	bne.n	800fcf6 <prvTCPWindowFastRetransmit+0xb6>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	2200      	movs	r2, #0
 800fca6:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800fca8:	4b17      	ldr	r3, [pc, #92]	; (800fd08 <prvTCPWindowFastRetransmit+0xc8>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	db11      	blt.n	800fcd4 <prvTCPWindowFastRetransmit+0x94>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fcb6:	2b17      	cmp	r3, #23
 800fcb8:	d00c      	beq.n	800fcd4 <prvTCPWindowFastRetransmit+0x94>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %lu < %lu\n",
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	69db      	ldr	r3, [r3, #28]
 800fcc2:	1ad1      	subs	r1, r2, r3
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	69db      	ldr	r3, [r3, #28]
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	461a      	mov	r2, r3
 800fcce:	480f      	ldr	r0, [pc, #60]	; (800fd0c <prvTCPWindowFastRetransmit+0xcc>)
 800fcd0:	f7f0 fe3c 	bl	800094c <vLoggingPrintf>
                                                         ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
                                FreeRTOS_flush_logging();
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	3318      	adds	r3, #24
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7f4 fe55 	bl	8004988 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	3318      	adds	r3, #24
 800fce8:	4619      	mov	r1, r3
 800fcea:	4610      	mov	r0, r2
 800fcec:	f7fe ff09 	bl	800eb02 <vListInsertFifo>
                            ulCount++;
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 800fcf6:	697a      	ldr	r2, [r7, #20]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d1ae      	bne.n	800fc5c <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 800fcfe:	693b      	ldr	r3, [r7, #16]
        }
 800fd00:	4618      	mov	r0, r3
 800fd02:	3718      	adds	r7, #24
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	2000bd10 	.word	0x2000bd10
 800fd0c:	08015034 	.word	0x08015034

0800fd10 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence, ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6a1b      	ldr	r3, [r3, #32]
 800fd1e:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 800fd20:	68b9      	ldr	r1, [r7, #8]
 800fd22:	6838      	ldr	r0, [r7, #0]
 800fd24:	f7fe fe93 	bl	800ea4e <xSequenceLessThanOrEqual>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d002      	beq.n	800fd34 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0UL;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	60fb      	str	r3, [r7, #12]
 800fd32:	e005      	b.n	800fd40 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 800fd34:	683a      	ldr	r2, [r7, #0]
 800fd36:	68b9      	ldr	r1, [r7, #8]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7ff fe81 	bl	800fa40 <prvTCPWindowTxCheckAck>
 800fd3e:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 800fd40:	68fb      	ldr	r3, [r7, #12]
        }
 800fd42:	4618      	mov	r0, r3
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
	...

0800fd4c <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 800fd4c:	b5b0      	push	{r4, r5, r7, lr}
 800fd4e:	b088      	sub	sp, #32
 800fd50:	af02      	add	r7, sp, #8
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6a1b      	ldr	r3, [r3, #32]
 800fd5c:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	68b9      	ldr	r1, [r7, #8]
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f7ff fe6c 	bl	800fa40 <prvTCPWindowTxCheckAck>
 800fd68:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 800fd6a:	68b9      	ldr	r1, [r7, #8]
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f7ff ff67 	bl	800fc40 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 800fd72:	4b16      	ldr	r3, [pc, #88]	; (800fdcc <ulTCPWindowTxSack+0x80>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	dd23      	ble.n	800fdc2 <ulTCPWindowTxSack+0x76>
 800fd7a:	6979      	ldr	r1, [r7, #20]
 800fd7c:	68b8      	ldr	r0, [r7, #8]
 800fd7e:	f7fe fe93 	bl	800eaa8 <xSequenceGreaterThan>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d01c      	beq.n	800fdc2 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %lu to %lu (ack = %lu)\n",
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800fd8e:	461c      	mov	r4, r3
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fd96:	461d      	mov	r5, r3
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	69db      	ldr	r3, [r3, #28]
 800fd9c:	68ba      	ldr	r2, [r7, #8]
 800fd9e:	1ad0      	subs	r0, r2, r3
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	69db      	ldr	r3, [r3, #28]
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	1ad3      	subs	r3, r2, r3
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	6a11      	ldr	r1, [r2, #32]
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	69d2      	ldr	r2, [r2, #28]
 800fdb0:	1a8a      	subs	r2, r1, r2
 800fdb2:	9201      	str	r2, [sp, #4]
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	462a      	mov	r2, r5
 800fdba:	4621      	mov	r1, r4
 800fdbc:	4804      	ldr	r0, [pc, #16]	; (800fdd0 <ulTCPWindowTxSack+0x84>)
 800fdbe:	f7f0 fdc5 	bl	800094c <vLoggingPrintf>
                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                         pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                FreeRTOS_flush_logging();
            }

            return ulAckCount;
 800fdc2:	693b      	ldr	r3, [r7, #16]
        }
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3718      	adds	r7, #24
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bdb0      	pop	{r4, r5, r7, pc}
 800fdcc:	2000bd10 	.word	0x2000bd10
 800fdd0:	08015074 	.word	0x08015074

0800fdd4 <vCastPointerTo_UDPPacket_t>:
    {
 800fdd4:	b480      	push	{r7}
 800fdd6:	b083      	sub	sp, #12
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 800fddc:	687b      	ldr	r3, [r7, #4]
    }
 800fdde:	4618      	mov	r0, r3
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr

0800fdea <vCastConstPointerTo_UDPPacket_t>:
    {
 800fdea:	b480      	push	{r7}
 800fdec:	b083      	sub	sp, #12
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 800fdf2:	687b      	ldr	r3, [r7, #4]
    }
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	370c      	adds	r7, #12
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer: The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b08c      	sub	sp, #48	; 0x30
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	695b      	ldr	r3, [r3, #20]
 800fe0c:	60fb      	str	r3, [r7, #12]
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    /* Map the UDP packet onto the start of the frame. */
    pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	699b      	ldr	r3, [r3, #24]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7ff ffde 	bl	800fdd4 <vCastPointerTo_UDPPacket_t>
 800fe18:	6278      	str	r0, [r7, #36]	; 0x24
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	69db      	ldr	r3, [r3, #28]
 800fe1e:	3b2a      	subs	r3, #42	; 0x2a
 800fe20:	623b      	str	r3, [r7, #32]
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800fe22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe24:	f107 030c 	add.w	r3, r7, #12
 800fe28:	4611      	mov	r1, r2
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7f7 fe70 	bl	8007b10 <eARPGetCacheEntry>
 800fe30:	4603      	mov	r3, r0
 800fe32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( eReturned != eCantSendPacket )
 800fe36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	d06d      	beq.n	800ff1a <vProcessGeneratedUDPPacket+0x11a>
    {
        if( eReturned == eARPCacheHit )
 800fe3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d156      	bne.n	800fef4 <vProcessGeneratedUDPPacket+0xf4>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 800fe46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe48:	330e      	adds	r3, #14
 800fe4a:	61fb      	str	r3, [r7, #28]
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	3322      	adds	r3, #34	; 0x22
 800fe50:	61bb      	str	r3, [r7, #24]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	8c1a      	ldrh	r2, [r3, #32]
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 800fe62:	6a3b      	ldr	r3, [r7, #32]
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	3308      	adds	r3, #8
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	69bb      	ldr	r3, [r7, #24]
 800fe6c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800fe6e:	69bb      	ldr	r3, [r7, #24]
 800fe70:	889b      	ldrh	r3, [r3, #4]
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	021b      	lsls	r3, r3, #8
 800fe76:	b21a      	sxth	r2, r3
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	889b      	ldrh	r3, [r3, #4]
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	0a1b      	lsrs	r3, r3, #8
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	b21b      	sxth	r3, r3
 800fe84:	4313      	orrs	r3, r2
 800fe86:	b21b      	sxth	r3, r3
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	2200      	movs	r2, #0
 800fe92:	719a      	strb	r2, [r3, #6]
 800fe94:	2200      	movs	r2, #0
 800fe96:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = xDefaultPartUDPPacketHeader.ucBytes;
 800fe98:	4b33      	ldr	r3, [pc, #204]	; (800ff68 <vProcessGeneratedUDPPacket+0x168>)
 800fe9a:	617b      	str	r3, [r7, #20]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	699b      	ldr	r3, [r3, #24]
 800fea0:	3306      	adds	r3, #6
 800fea2:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 800fea4:	2218      	movs	r2, #24
 800fea6:	6979      	ldr	r1, [r7, #20]
 800fea8:	6938      	ldr	r0, [r7, #16]
 800feaa:	f001 fc5a 	bl	8011762 <memcpy>
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 800feae:	6a3b      	ldr	r3, [r7, #32]
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	331c      	adds	r3, #28
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	885b      	ldrh	r3, [r3, #2]
 800febe:	b29b      	uxth	r3, r3
 800fec0:	021b      	lsls	r3, r3, #8
 800fec2:	b21a      	sxth	r2, r3
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	885b      	ldrh	r3, [r3, #2]
 800fec8:	b29b      	uxth	r3, r3
 800feca:	0a1b      	lsrs	r3, r3, #8
 800fecc:	b29b      	uxth	r3, r3
 800fece:	b21b      	sxth	r3, r3
 800fed0:	4313      	orrs	r3, r2
 800fed2:	b21b      	sxth	r3, r3
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	69fb      	ldr	r3, [r7, #28]
 800fed8:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	695a      	ldr	r2, [r3, #20]
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	611a      	str	r2, [r3, #16]

            #if ( ipconfigUSE_LLMNR == 1 )
                {
                    /* LLMNR messages are typically used on a LAN and they're
                     * not supposed to cross routers */
                    if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	695b      	ldr	r3, [r3, #20]
 800fee6:	4a21      	ldr	r2, [pc, #132]	; (800ff6c <vProcessGeneratedUDPPacket+0x16c>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d116      	bne.n	800ff1a <vProcessGeneratedUDPPacket+0x11a>
                    {
                        pxIPHeader->ucTimeToLive = 0x01;
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	2201      	movs	r2, #1
 800fef0:	721a      	strb	r2, [r3, #8]
 800fef2:	e012      	b.n	800ff1a <vProcessGeneratedUDPPacket+0x11a>
                        pxUDPPacket->xUDPHeader.usChecksum = 0U;
                    }
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 800fef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d10b      	bne.n	800ff14 <vProcessGeneratedUDPPacket+0x114>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress );
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	4619      	mov	r1, r3
 800ff00:	2000      	movs	r0, #0
 800ff02:	f7f7 fd0d 	bl	8007920 <vARPRefreshCacheEntry>

            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
            pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	615a      	str	r2, [r3, #20]
            vARPGenerateRequestPacket( pxNetworkBuffer );
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7f7 ff8f 	bl	8007e30 <vARPGenerateRequestPacket>
 800ff12:	e002      	b.n	800ff1a <vProcessGeneratedUDPPacket+0x11a>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 800ff14:	2302      	movs	r3, #2
 800ff16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    if( eReturned != eCantSendPacket )
 800ff1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff1e:	2b02      	cmp	r3, #2
 800ff20:	d01b      	beq.n	800ff5a <vProcessGeneratedUDPPacket+0x15a>
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	69db      	ldr	r3, [r3, #28]
 800ff26:	2b3b      	cmp	r3, #59	; 0x3b
 800ff28:	d812      	bhi.n	800ff50 <vProcessGeneratedUDPPacket+0x150>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	69db      	ldr	r3, [r3, #28]
 800ff2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff30:	e008      	b.n	800ff44 <vProcessGeneratedUDPPacket+0x144>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	699a      	ldr	r2, [r3, #24]
 800ff36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff38:	4413      	add	r3, r2
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800ff3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff40:	3301      	adds	r3, #1
 800ff42:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	2b3b      	cmp	r3, #59	; 0x3b
 800ff48:	ddf3      	ble.n	800ff32 <vProcessGeneratedUDPPacket+0x132>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	223c      	movs	r2, #60	; 0x3c
 800ff4e:	61da      	str	r2, [r3, #28]
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800ff50:	2101      	movs	r1, #1
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f000 face 	bl	80104f4 <xNetworkInterfaceOutput>
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 800ff58:	e002      	b.n	800ff60 <vProcessGeneratedUDPPacket+0x160>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f001 fb7c 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
}
 800ff60:	bf00      	nop
 800ff62:	3730      	adds	r7, #48	; 0x30
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	20000018 	.word	0x20000018
 800ff6c:	fc0000e0 	.word	0xfc0000e0

0800ff70 <xProcessReceivedUDPPacket>:
 *
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b086      	sub	sp, #24
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	460b      	mov	r3, r1
 800ff7a:	807b      	strh	r3, [r7, #2]
    BaseType_t xReturn = pdPASS;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    configASSERT( pxNetworkBuffer != NULL );
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d104      	bne.n	800ff90 <xProcessReceivedUDPPacket+0x20>
 800ff86:	4945      	ldr	r1, [pc, #276]	; (801009c <xProcessReceivedUDPPacket+0x12c>)
 800ff88:	f44f 7092 	mov.w	r0, #292	; 0x124
 800ff8c:	f7f0 fe14 	bl	8000bb8 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	699b      	ldr	r3, [r3, #24]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d104      	bne.n	800ffa2 <xProcessReceivedUDPPacket+0x32>
 800ff98:	4940      	ldr	r1, [pc, #256]	; (801009c <xProcessReceivedUDPPacket+0x12c>)
 800ff9a:	f240 1025 	movw	r0, #293	; 0x125
 800ff9e:	f7f0 fe0b 	bl	8000bb8 <vAssertCalled>

    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
    const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	699b      	ldr	r3, [r3, #24]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7ff ff1f 	bl	800fdea <vCastConstPointerTo_UDPPacket_t>
 800ffac:	6138      	str	r0, [r7, #16]

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 800ffae:	887b      	ldrh	r3, [r7, #2]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fa fdbd 	bl	800ab30 <pxUDPSocketLookup>
 800ffb6:	60f8      	str	r0, [r7, #12]

    if( pxSocket != NULL )
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d033      	beq.n	8010026 <xProcessReceivedUDPPacket+0xb6>
    {
        /* When refreshing the ARP cache with received UDP packets we must be
         * careful;  hundreds of broadcast messages may pass and if we're not
         * handling them, no use to fill the ARP cache with those IP addresses. */
        vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	1d9a      	adds	r2, r3, #6
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ffc8:	4619      	mov	r1, r3
 800ffca:	4610      	mov	r0, r2
 800ffcc:	f7f7 fca8 	bl	8007920 <vARPRefreshCacheEntry>
            if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
        #else
            /* xReturn is still pdPASS. */
        #endif
        {
            vTaskSuspendAll();
 800ffd0:	f7f5 fd9c 	bl	8005b0c <vTaskSuspendAll>
            {
                taskENTER_CRITICAL();
 800ffd4:	f7f7 faf8 	bl	80075c8 <vPortEnterCritical>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	3338      	adds	r3, #56	; 0x38
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	4611      	mov	r1, r2
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7f4 fc74 	bl	80048ce <vListInsertEnd>
                }
                taskEXIT_CRITICAL();
 800ffe6:	f7f7 fb1b 	bl	8007620 <vPortExitCritical>
            }
            ( void ) xTaskResumeAll();
 800ffea:	f7f5 fd9d 	bl	8005b28 <xTaskResumeAll>

            /* Set the socket's receive event */
            if( pxSocket->xEventGroup != NULL )
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d005      	beq.n	8010002 <xProcessReceivedUDPPacket+0x92>
            {
                ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	685b      	ldr	r3, [r3, #4]
 800fffa:	2101      	movs	r1, #1
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7f4 fb67 	bl	80046d0 <xEventGroupSetBits>
            }

            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010006:	2b00      	cmp	r3, #0
 8010008:	d043      	beq.n	8010092 <xProcessReceivedUDPPacket+0x122>
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801000e:	f003 0301 	and.w	r3, r3, #1
 8010012:	2b00      	cmp	r3, #0
 8010014:	d03d      	beq.n	8010092 <xProcessReceivedUDPPacket+0x122>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2101      	movs	r1, #1
 801001e:	4618      	mov	r0, r3
 8010020:	f7f4 fb56 	bl	80046d0 <xEventGroupSetBits>
 8010024:	e035      	b.n	8010092 <xProcessReceivedUDPPacket+0x122>
            else
        #endif

        #if ( ipconfigUSE_LLMNR == 1 )
            /* A LLMNR request, check for the destination port. */
            if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8010026:	887b      	ldrh	r3, [r7, #2]
 8010028:	f64e 3214 	movw	r2, #60180	; 0xeb14
 801002c:	4293      	cmp	r3, r2
 801002e:	d006      	beq.n	801003e <xProcessReceivedUDPPacket+0xce>
                ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010034:	b29b      	uxth	r3, r3
            if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8010036:	f64e 3214 	movw	r2, #60180	; 0xeb14
 801003a:	4293      	cmp	r3, r2
 801003c:	d10e      	bne.n	801005c <xProcessReceivedUDPPacket+0xec>
            {
                vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	1d9a      	adds	r2, r3, #6
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8010048:	4619      	mov	r1, r3
 801004a:	4610      	mov	r0, r2
 801004c:	f7f7 fc68 	bl	8007920 <vARPRefreshCacheEntry>
                xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f7f8 f884 	bl	800815e <ulDNSHandlePacket>
 8010056:	4603      	mov	r3, r0
 8010058:	617b      	str	r3, [r7, #20]
 801005a:	e01a      	b.n	8010092 <xProcessReceivedUDPPacket+0x122>
            else
        #endif /* ipconfigUSE_LLMNR */

        #if ( ipconfigUSE_NBNS == 1 )
            /* a NetBIOS request, check for the destination port */
            if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
 801005c:	887b      	ldrh	r3, [r7, #2]
 801005e:	f5b3 4f09 	cmp.w	r3, #35072	; 0x8900
 8010062:	d005      	beq.n	8010070 <xProcessReceivedUDPPacket+0x100>
                ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipNBNS_PORT ) ) )
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010068:	b29b      	uxth	r3, r3
            if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
 801006a:	f5b3 4f09 	cmp.w	r3, #35072	; 0x8900
 801006e:	d10e      	bne.n	801008e <xProcessReceivedUDPPacket+0x11e>
            {
                vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	1d9a      	adds	r2, r3, #6
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	f8d3 301a 	ldr.w	r3, [r3, #26]
 801007a:	4619      	mov	r1, r3
 801007c:	4610      	mov	r0, r2
 801007e:	f7f7 fc4f 	bl	8007920 <vARPRefreshCacheEntry>
                xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7f8 f888 	bl	8008198 <ulNBNSHandlePacket>
 8010088:	4603      	mov	r3, r0
 801008a:	617b      	str	r3, [r7, #20]
 801008c:	e001      	b.n	8010092 <xProcessReceivedUDPPacket+0x122>
            }
            else
        #endif /* ipconfigUSE_NBNS */
        {
            xReturn = pdFAIL;
 801008e:	2300      	movs	r3, #0
 8010090:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8010092:	697b      	ldr	r3, [r7, #20]
}
 8010094:	4618      	mov	r0, r3
 8010096:	3718      	adds	r7, #24
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	080150ac 	.word	0x080150ac

080100a0 <HAL_ETH_RxCpltCallback>:
};

/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80100a8:	2300      	movs	r3, #0
 80100aa:	60fb      	str	r3, [r7, #12]

    ( void ) heth;

    /* Ethernet RX-Complete callback function, elsewhere declared as weak. */
    ulISREvents |= EMAC_IF_RX_EVENT;
 80100ac:	4b10      	ldr	r3, [pc, #64]	; (80100f0 <HAL_ETH_RxCpltCallback+0x50>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f043 0301 	orr.w	r3, r3, #1
 80100b4:	4a0e      	ldr	r2, [pc, #56]	; (80100f0 <HAL_ETH_RxCpltCallback+0x50>)
 80100b6:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 80100b8:	4b0e      	ldr	r3, [pc, #56]	; (80100f4 <HAL_ETH_RxCpltCallback+0x54>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d012      	beq.n	80100e6 <HAL_ETH_RxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 80100c0:	4b0c      	ldr	r3, [pc, #48]	; (80100f4 <HAL_ETH_RxCpltCallback+0x54>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f107 020c 	add.w	r2, r7, #12
 80100c8:	2100      	movs	r1, #0
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7f6 fb92 	bl	80067f4 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d007      	beq.n	80100e6 <HAL_ETH_RxCpltCallback+0x46>
 80100d6:	4b08      	ldr	r3, [pc, #32]	; (80100f8 <HAL_ETH_RxCpltCallback+0x58>)
 80100d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100dc:	601a      	str	r2, [r3, #0]
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	f3bf 8f6f 	isb	sy
    }
}
 80100e6:	bf00      	nop
 80100e8:	3710      	adds	r7, #16
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	2000bd18 	.word	0x2000bd18
 80100f4:	2000bdac 	.word	0x2000bdac
 80100f8:	e000ed04 	.word	0xe000ed04

080100fc <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8010104:	2300      	movs	r3, #0
 8010106:	60fb      	str	r3, [r7, #12]
    ( void ) heth;

    /* This call-back is only useful in case packets are being sent
     * zero-copy.  Once they're sent, the buffers will be released
     * by the function vClearTXBuffers(). */
    ulISREvents |= EMAC_IF_TX_EVENT;
 8010108:	4b10      	ldr	r3, [pc, #64]	; (801014c <HAL_ETH_TxCpltCallback+0x50>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f043 0302 	orr.w	r3, r3, #2
 8010110:	4a0e      	ldr	r2, [pc, #56]	; (801014c <HAL_ETH_TxCpltCallback+0x50>)
 8010112:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8010114:	4b0e      	ldr	r3, [pc, #56]	; (8010150 <HAL_ETH_TxCpltCallback+0x54>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d012      	beq.n	8010142 <HAL_ETH_TxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 801011c:	4b0c      	ldr	r3, [pc, #48]	; (8010150 <HAL_ETH_TxCpltCallback+0x54>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f107 020c 	add.w	r2, r7, #12
 8010124:	2100      	movs	r1, #0
 8010126:	4618      	mov	r0, r3
 8010128:	f7f6 fb64 	bl	80067f4 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d007      	beq.n	8010142 <HAL_ETH_TxCpltCallback+0x46>
 8010132:	4b08      	ldr	r3, [pc, #32]	; (8010154 <HAL_ETH_TxCpltCallback+0x58>)
 8010134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	f3bf 8f4f 	dsb	sy
 801013e:	f3bf 8f6f 	isb	sy
    }
}
 8010142:	bf00      	nop
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	2000bd18 	.word	0x2000bd18
 8010150:	2000bdac 	.word	0x2000bdac
 8010154:	e000ed04 	.word	0xe000ed04

08010158 <vClearTXBuffers>:
/*-----------------------------------------------------------*/

static void vClearTXBuffers()
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
    __IO ETH_DMADescTypeDef * txLastDescriptor = xETH.TxDesc;
 801015e:	4b24      	ldr	r3, [pc, #144]	; (80101f0 <vClearTXBuffers+0x98>)
 8010160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010162:	60bb      	str	r3, [r7, #8]
    size_t uxCount = ( ( UBaseType_t ) ETH_TXBUFNB ) - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8010164:	4b23      	ldr	r3, [pc, #140]	; (80101f4 <vClearTXBuffers+0x9c>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4618      	mov	r0, r3
 801016a:	f7f5 f8a7 	bl	80052bc <uxQueueMessagesWaiting>
 801016e:	4603      	mov	r3, r0
 8010170:	f1c3 0304 	rsb	r3, r3, #4
 8010174:	60fb      	str	r3, [r7, #12]

    /* This function is called after a TX-completion interrupt.
     * It will release each Network Buffer used in xNetworkInterfaceOutput().
     * 'uxCount' represents the number of descriptors given to DMA for transmission.
     * After sending a packet, the DMA will clear the 'ETH_DMATXDESC_OWN' bit. */
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 8010176:	e02c      	b.n	80101d2 <vClearTXBuffers+0x7a>
    {
        if( ( DMATxDescToClear == txLastDescriptor ) && ( uxCount != ETH_TXBUFNB ) )
 8010178:	4b1f      	ldr	r3, [pc, #124]	; (80101f8 <vClearTXBuffers+0xa0>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	429a      	cmp	r2, r3
 8010180:	d102      	bne.n	8010188 <vClearTXBuffers+0x30>
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2b04      	cmp	r3, #4
 8010186:	d12d      	bne.n	80101e4 <vClearTXBuffers+0x8c>
            break;
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                ucPayLoad = ( uint8_t * ) DMATxDescToClear->Buffer1Addr;
 8010188:	4b1b      	ldr	r3, [pc, #108]	; (80101f8 <vClearTXBuffers+0xa0>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	607b      	str	r3, [r7, #4]

                if( ucPayLoad != NULL )
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00d      	beq.n	80101b2 <vClearTXBuffers+0x5a>
                {
                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f7f9 f936 	bl	8009408 <pxPacketBuffer_to_NetworkBuffer>
 801019c:	6038      	str	r0, [r7, #0]

                    if( pxNetworkBuffer != NULL )
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d002      	beq.n	80101aa <vClearTXBuffers+0x52>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80101a4:	6838      	ldr	r0, [r7, #0]
 80101a6:	f001 fa57 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
                    }

                    DMATxDescToClear->Buffer1Addr = ( uint32_t ) 0u;
 80101aa:	4b13      	ldr	r3, [pc, #76]	; (80101f8 <vClearTXBuffers+0xa0>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	2200      	movs	r2, #0
 80101b0:	609a      	str	r2, [r3, #8]
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        DMATxDescToClear = ( ETH_DMADescTypeDef * ) ( DMATxDescToClear->Buffer2NextDescAddr );
 80101b2:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <vClearTXBuffers+0xa0>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	461a      	mov	r2, r3
 80101ba:	4b0f      	ldr	r3, [pc, #60]	; (80101f8 <vClearTXBuffers+0xa0>)
 80101bc:	601a      	str	r2, [r3, #0]

        uxCount--;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	3b01      	subs	r3, #1
 80101c2:	60fb      	str	r3, [r7, #12]
        /* Tell the counting semaphore that one more TX descriptor is available. */
        xSemaphoreGive( xTXDescriptorSemaphore );
 80101c4:	4b0b      	ldr	r3, [pc, #44]	; (80101f4 <vClearTXBuffers+0x9c>)
 80101c6:	6818      	ldr	r0, [r3, #0]
 80101c8:	2300      	movs	r3, #0
 80101ca:	2200      	movs	r2, #0
 80101cc:	2100      	movs	r1, #0
 80101ce:	f7f4 fcff 	bl	8004bd0 <xQueueGenericSend>
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d006      	beq.n	80101e6 <vClearTXBuffers+0x8e>
 80101d8:	4b07      	ldr	r3, [pc, #28]	; (80101f8 <vClearTXBuffers+0xa0>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	daca      	bge.n	8010178 <vClearTXBuffers+0x20>
    }
}
 80101e2:	e000      	b.n	80101e6 <vClearTXBuffers+0x8e>
            break;
 80101e4:	bf00      	nop
}
 80101e6:	bf00      	nop
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	2000bd5c 	.word	0x2000bd5c
 80101f4:	2000bda4 	.word	0x2000bda4
 80101f8:	2000bda8 	.word	0x2000bda8

080101fc <xNetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceInitialise( void )
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef hal_eth_init_status;
    BaseType_t xResult;

    if( xMacInitStatus == eMACInit )
 8010202:	4b49      	ldr	r3, [pc, #292]	; (8010328 <xNetworkInterfaceInitialise+0x12c>)
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d167      	bne.n	80102da <xNetworkInterfaceInitialise+0xde>
    {
        xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TXBUFNB, ( UBaseType_t ) ETH_TXBUFNB );
 801020a:	2104      	movs	r1, #4
 801020c:	2004      	movs	r0, #4
 801020e:	f7f4 fcb5 	bl	8004b7c <xQueueCreateCountingSemaphore>
 8010212:	4602      	mov	r2, r0
 8010214:	4b45      	ldr	r3, [pc, #276]	; (801032c <xNetworkInterfaceInitialise+0x130>)
 8010216:	601a      	str	r2, [r3, #0]

        if( xTXDescriptorSemaphore == NULL )
 8010218:	4b44      	ldr	r3, [pc, #272]	; (801032c <xNetworkInterfaceInitialise+0x130>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d103      	bne.n	8010228 <xNetworkInterfaceInitialise+0x2c>
        {
            xMacInitStatus = eMACFailed;
 8010220:	4b41      	ldr	r3, [pc, #260]	; (8010328 <xNetworkInterfaceInitialise+0x12c>)
 8010222:	2202      	movs	r2, #2
 8010224:	701a      	strb	r2, [r3, #0]
 8010226:	e058      	b.n	80102da <xNetworkInterfaceInitialise+0xde>
        }
        else
        {
            /* Initialise ETH */

            xETH.Instance = ETH;
 8010228:	4b41      	ldr	r3, [pc, #260]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 801022a:	4a42      	ldr	r2, [pc, #264]	; (8010334 <xNetworkInterfaceInitialise+0x138>)
 801022c:	601a      	str	r2, [r3, #0]
            xETH.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801022e:	4b40      	ldr	r3, [pc, #256]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 8010230:	2201      	movs	r2, #1
 8010232:	605a      	str	r2, [r3, #4]
            xETH.Init.Speed = ETH_SPEED_100M;
 8010234:	4b3e      	ldr	r3, [pc, #248]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 8010236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801023a:	609a      	str	r2, [r3, #8]
            xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801023c:	4b3c      	ldr	r3, [pc, #240]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 801023e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010242:	60da      	str	r2, [r3, #12]
            /* Value of PhyAddress doesn't matter, will be probed for. */
            xETH.Init.PhyAddress = 0;
 8010244:	4b3a      	ldr	r3, [pc, #232]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 8010246:	2200      	movs	r2, #0
 8010248:	821a      	strh	r2, [r3, #16]

            xETH.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 801024a:	f7f9 fe5d 	bl	8009f08 <FreeRTOS_GetMACAddress>
 801024e:	4602      	mov	r2, r0
 8010250:	4b37      	ldr	r3, [pc, #220]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 8010252:	615a      	str	r2, [r3, #20]
            xETH.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8010254:	4b36      	ldr	r3, [pc, #216]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 8010256:	2201      	movs	r2, #1
 8010258:	619a      	str	r2, [r3, #24]
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
                {
                    /* using the ETH_CHECKSUM_BY_HARDWARE option:
                     * both the IP and the protocol checksums will be calculated
                     * by the peripheral. */
                    xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801025a:	4b35      	ldr	r3, [pc, #212]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 801025c:	2200      	movs	r2, #0
 801025e:	61da      	str	r2, [r3, #28]
                }
            #endif

            #if ( ipconfigUSE_RMII != 0 )
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8010260:	4b33      	ldr	r3, [pc, #204]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 8010262:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8010266:	621a      	str	r2, [r3, #32]
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
                }
            #endif /* ipconfigUSE_RMII */

            hal_eth_init_status = HAL_ETH_Init( &xETH );
 8010268:	4831      	ldr	r0, [pc, #196]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 801026a:	f7f3 fb3d 	bl	80038e8 <HAL_ETH_Init>
 801026e:	4603      	mov	r3, r0
 8010270:	70fb      	strb	r3, [r7, #3]

            /* Only for inspection by debugger. */
            ( void ) hal_eth_init_status;

            /* Set the TxDesc and RxDesc pointers. */
            xETH.TxDesc = DMATxDscrTab;
 8010272:	4b2f      	ldr	r3, [pc, #188]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 8010274:	4a30      	ldr	r2, [pc, #192]	; (8010338 <xNetworkInterfaceInitialise+0x13c>)
 8010276:	62da      	str	r2, [r3, #44]	; 0x2c
            xETH.RxDesc = DMARxDscrTab;
 8010278:	4b2d      	ldr	r3, [pc, #180]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 801027a:	4a30      	ldr	r2, [pc, #192]	; (801033c <xNetworkInterfaceInitialise+0x140>)
 801027c:	629a      	str	r2, [r3, #40]	; 0x28

            /* Make sure that all unused fields are cleared. */
            memset( &DMATxDscrTab, '\0', sizeof( DMATxDscrTab ) );
 801027e:	2280      	movs	r2, #128	; 0x80
 8010280:	2100      	movs	r1, #0
 8010282:	482d      	ldr	r0, [pc, #180]	; (8010338 <xNetworkInterfaceInitialise+0x13c>)
 8010284:	f001 fa91 	bl	80117aa <memset>
            memset( &DMARxDscrTab, '\0', sizeof( DMARxDscrTab ) );
 8010288:	2280      	movs	r2, #128	; 0x80
 801028a:	2100      	movs	r1, #0
 801028c:	482b      	ldr	r0, [pc, #172]	; (801033c <xNetworkInterfaceInitialise+0x140>)
 801028e:	f001 fa8c 	bl	80117aa <memset>

            /* Initialize Tx Descriptors list: Chain Mode */
            DMATxDescToClear = DMATxDscrTab;
 8010292:	4b2b      	ldr	r3, [pc, #172]	; (8010340 <xNetworkInterfaceInitialise+0x144>)
 8010294:	4a28      	ldr	r2, [pc, #160]	; (8010338 <xNetworkInterfaceInitialise+0x13c>)
 8010296:	601a      	str	r2, [r3, #0]

            /* Initialise TX-descriptors. */
            prvDMATxDescListInit();
 8010298:	f000 f862 	bl	8010360 <prvDMATxDescListInit>

            /* Initialise RX-descriptors. */
            prvDMARxDescListInit();
 801029c:	f000 f8a4 	bl	80103e8 <prvDMARxDescListInit>

            #if ( ipconfigUSE_LLMNR != 0 )
                {
                    /* Program the LLMNR address at index 1. */
                    prvMACAddressConfig( &xETH, ETH_MAC_ADDRESS1, ( uint8_t * ) xLLMNR_MACAddress );
 80102a0:	4a28      	ldr	r2, [pc, #160]	; (8010344 <xNetworkInterfaceInitialise+0x148>)
 80102a2:	2108      	movs	r1, #8
 80102a4:	4822      	ldr	r0, [pc, #136]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 80102a6:	f000 f8eb 	bl	8010480 <prvMACAddressConfig>
                }
            #endif

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 80102aa:	2001      	movs	r0, #1
 80102ac:	f000 fb08 	bl	80108c0 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             * possible priority to ensure the interrupt handler can return directly
             * to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             * notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &xEMACTaskHandle ) == pdPASS )
 80102b0:	4b25      	ldr	r3, [pc, #148]	; (8010348 <xNetworkInterfaceInitialise+0x14c>)
 80102b2:	9301      	str	r3, [sp, #4]
 80102b4:	2304      	movs	r3, #4
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	2300      	movs	r3, #0
 80102ba:	f44f 7282 	mov.w	r2, #260	; 0x104
 80102be:	4923      	ldr	r1, [pc, #140]	; (801034c <xNetworkInterfaceInitialise+0x150>)
 80102c0:	4823      	ldr	r0, [pc, #140]	; (8010350 <xNetworkInterfaceInitialise+0x154>)
 80102c2:	f7f5 fa43 	bl	800574c <xTaskCreate>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d103      	bne.n	80102d4 <xNetworkInterfaceInitialise+0xd8>
            {
                /* The xTXDescriptorSemaphore and the task are created successfully. */
                xMacInitStatus = eMACPass;
 80102cc:	4b16      	ldr	r3, [pc, #88]	; (8010328 <xNetworkInterfaceInitialise+0x12c>)
 80102ce:	2201      	movs	r2, #1
 80102d0:	701a      	strb	r2, [r3, #0]
 80102d2:	e002      	b.n	80102da <xNetworkInterfaceInitialise+0xde>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 80102d4:	4b14      	ldr	r3, [pc, #80]	; (8010328 <xNetworkInterfaceInitialise+0x12c>)
 80102d6:	2202      	movs	r2, #2
 80102d8:	701a      	strb	r2, [r3, #0]
            }
        }
    } /* if( xEMACTaskHandle == NULL ) */

    if( xMacInitStatus != eMACPass )
 80102da:	4b13      	ldr	r3, [pc, #76]	; (8010328 <xNetworkInterfaceInitialise+0x12c>)
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d002      	beq.n	80102e8 <xNetworkInterfaceInitialise+0xec>
    {
        /* EMAC initialisation failed, return pdFAIL. */
        xResult = pdFAIL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	607b      	str	r3, [r7, #4]
 80102e6:	e019      	b.n	801031c <xNetworkInterfaceInitialise+0x120>
    }
    else
    {
        if( xPhyObject.ulLinkStatusMask != 0uL )
 80102e8:	4b1a      	ldr	r3, [pc, #104]	; (8010354 <xNetworkInterfaceInitialise+0x158>)
 80102ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d013      	beq.n	8010318 <xNetworkInterfaceInitialise+0x11c>
        {
            xETH.Instance->DMAIER |= ETH_DMA_ALL_INTS;
 80102f0:	4b0f      	ldr	r3, [pc, #60]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	f241 031c 	movw	r3, #4124	; 0x101c
 80102f8:	4413      	add	r3, r2
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	4a0c      	ldr	r2, [pc, #48]	; (8010330 <xNetworkInterfaceInitialise+0x134>)
 80102fe:	6811      	ldr	r1, [r2, #0]
 8010300:	4a15      	ldr	r2, [pc, #84]	; (8010358 <xNetworkInterfaceInitialise+0x15c>)
 8010302:	431a      	orrs	r2, r3
 8010304:	f241 031c 	movw	r3, #4124	; 0x101c
 8010308:	440b      	add	r3, r1
 801030a:	601a      	str	r2, [r3, #0]
            xResult = pdPASS;
 801030c:	2301      	movs	r3, #1
 801030e:	607b      	str	r3, [r7, #4]
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8010310:	4812      	ldr	r0, [pc, #72]	; (801035c <xNetworkInterfaceInitialise+0x160>)
 8010312:	f7f0 fb1b 	bl	800094c <vLoggingPrintf>
 8010316:	e001      	b.n	801031c <xNetworkInterfaceInitialise+0x120>
        }
        else
        {
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
            xResult = pdFAIL;
 8010318:	2300      	movs	r3, #0
 801031a:	607b      	str	r3, [r7, #4]
        }
    }

    /* When returning non-zero, the stack will become active and
     * start DHCP (in configured) */
    return xResult;
 801031c:	687b      	ldr	r3, [r7, #4]
}
 801031e:	4618      	mov	r0, r3
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	2000bd14 	.word	0x2000bd14
 801032c:	2000bda4 	.word	0x2000bda4
 8010330:	2000bd5c 	.word	0x2000bd5c
 8010334:	40028000 	.word	0x40028000
 8010338:	2000c880 	.word	0x2000c880
 801033c:	2000c900 	.word	0x2000c900
 8010340:	2000bda8 	.word	0x2000bda8
 8010344:	08015448 	.word	0x08015448
 8010348:	2000bdac 	.word	0x2000bdac
 801034c:	080150e0 	.word	0x080150e0
 8010350:	080109b5 	.word	0x080109b5
 8010354:	2000bd1c 	.word	0x2000bd1c
 8010358:	380163fb 	.word	0x380163fb
 801035c:	080150e8 	.word	0x080150e8

08010360 <prvDMATxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMATxDescListInit()
{
 8010360:	b480      	push	{r7}
 8010362:	b083      	sub	sp, #12
 8010364:	af00      	add	r7, sp, #0
    ETH_DMADescTypeDef * pxDMADescriptor;
    BaseType_t xIndex;

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMATxDscrTab;
 8010366:	4b1e      	ldr	r3, [pc, #120]	; (80103e0 <prvDMATxDescListInit+0x80>)
 8010368:	607b      	str	r3, [r7, #4]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 801036a:	2300      	movs	r3, #0
 801036c:	603b      	str	r3, [r7, #0]
 801036e:	e026      	b.n	80103be <prvDMATxDescListInit+0x5e>
    {
        /* Set Second Address Chained bit */
        pxDMADescriptor->Status = ETH_DMATXDESC_TCH;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010376:	601a      	str	r2, [r3, #0]
                /* Set Buffer1 address pointer */
                pxDMADescriptor->Buffer1Addr = ( uint32_t ) ( Tx_Buff[ xIndex ] );
            }
        #endif

        if( xETH.Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 8010378:	4b1a      	ldr	r3, [pc, #104]	; (80103e4 <prvDMATxDescListInit+0x84>)
 801037a:	69db      	ldr	r3, [r3, #28]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d106      	bne.n	801038e <prvDMATxDescListInit+0x2e>
        {
            /* Set the DMA Tx descriptors checksum insertion for TCP, UDP, and ICMP */
            pxDMADescriptor->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	601a      	str	r2, [r3, #0]
 801038c:	e005      	b.n	801039a <prvDMATxDescListInit+0x3a>
        }
        else
        {
            pxDMADescriptor->Status &= ~( ( uint32_t ) ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL );
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	601a      	str	r2, [r3, #0]
        }

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_TXBUFNB - 1 )
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	2b02      	cmp	r3, #2
 801039e:	d805      	bhi.n	80103ac <prvDMATxDescListInit+0x4c>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	3320      	adds	r3, #32
 80103a4:	461a      	mov	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	60da      	str	r2, [r3, #12]
 80103aa:	e002      	b.n	80103b2 <prvDMATxDescListInit+0x52>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMATxDscrTab;
 80103ac:	4a0c      	ldr	r2, [pc, #48]	; (80103e0 <prvDMATxDescListInit+0x80>)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	3301      	adds	r3, #1
 80103b6:	603b      	str	r3, [r7, #0]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	3320      	adds	r3, #32
 80103bc:	607b      	str	r3, [r7, #4]
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	2b03      	cmp	r3, #3
 80103c2:	d9d5      	bls.n	8010370 <prvDMATxDescListInit+0x10>
        }
    }

    /* Set Transmit Descriptor List Address Register */
    xETH.Instance->DMATDLAR = ( uint32_t ) DMATxDscrTab;
 80103c4:	4b07      	ldr	r3, [pc, #28]	; (80103e4 <prvDMATxDescListInit+0x84>)
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	4905      	ldr	r1, [pc, #20]	; (80103e0 <prvDMATxDescListInit+0x80>)
 80103ca:	f241 0310 	movw	r3, #4112	; 0x1010
 80103ce:	4413      	add	r3, r2
 80103d0:	6019      	str	r1, [r3, #0]
}
 80103d2:	bf00      	nop
 80103d4:	370c      	adds	r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr
 80103de:	bf00      	nop
 80103e0:	2000c880 	.word	0x2000c880
 80103e4:	2000bd5c 	.word	0x2000bd5c

080103e8 <prvDMARxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMARxDescListInit()
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
    /*
     * RX-descriptors.
     */

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMARxDscrTab;
 80103ee:	4b21      	ldr	r3, [pc, #132]	; (8010474 <prvDMARxDescListInit+0x8c>)
 80103f0:	60fb      	str	r3, [r7, #12]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 80103f2:	2300      	movs	r3, #0
 80103f4:	60bb      	str	r3, [r7, #8]
 80103f6:	e02f      	b.n	8010458 <prvDMARxDescListInit+0x70>
    {
        /* Set Buffer1 size and Second Address Chained bit */
        pxDMADescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80103fe:	605a      	str	r2, [r3, #4]
        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Set Buffer1 address pointer */
                NetworkBufferDescriptor_t * pxBuffer;

                pxBuffer = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, 100ul );
 8010400:	2164      	movs	r1, #100	; 0x64
 8010402:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8010406:	f001 f8ad 	bl	8011564 <pxGetNetworkBufferWithDescriptor>
 801040a:	6078      	str	r0, [r7, #4]

                /* If the assert below fails, make sure that there are at least 'ETH_RXBUFNB'
                 * Network Buffers available during start-up ( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) */
                configASSERT( pxBuffer != NULL );
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d104      	bne.n	801041c <prvDMARxDescListInit+0x34>
 8010412:	4919      	ldr	r1, [pc, #100]	; (8010478 <prvDMARxDescListInit+0x90>)
 8010414:	f240 2055 	movw	r0, #597	; 0x255
 8010418:	f7f0 fbce 	bl	8000bb8 <vAssertCalled>

                if( pxBuffer != NULL )
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d008      	beq.n	8010434 <prvDMARxDescListInit+0x4c>
                {
                    pxDMADescriptor->Buffer1Addr = ( uint32_t ) pxBuffer->pucEthernetBuffer;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	699b      	ldr	r3, [r3, #24]
 8010426:	461a      	mov	r2, r3
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	609a      	str	r2, [r3, #8]
                    pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010432:	601a      	str	r2, [r3, #0]
                pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_RXBUFNB - 1 )
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	2b02      	cmp	r3, #2
 8010438:	d805      	bhi.n	8010446 <prvDMARxDescListInit+0x5e>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	3320      	adds	r3, #32
 801043e:	461a      	mov	r2, r3
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	60da      	str	r2, [r3, #12]
 8010444:	e002      	b.n	801044c <prvDMARxDescListInit+0x64>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMARxDscrTab;
 8010446:	4a0b      	ldr	r2, [pc, #44]	; (8010474 <prvDMARxDescListInit+0x8c>)
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	3301      	adds	r3, #1
 8010450:	60bb      	str	r3, [r7, #8]
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	3320      	adds	r3, #32
 8010456:	60fb      	str	r3, [r7, #12]
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	2b03      	cmp	r3, #3
 801045c:	d9cc      	bls.n	80103f8 <prvDMARxDescListInit+0x10>
        }
    }

    /* Set Receive Descriptor List Address Register */
    xETH.Instance->DMARDLAR = ( uint32_t ) DMARxDscrTab;
 801045e:	4b07      	ldr	r3, [pc, #28]	; (801047c <prvDMARxDescListInit+0x94>)
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	4904      	ldr	r1, [pc, #16]	; (8010474 <prvDMARxDescListInit+0x8c>)
 8010464:	f241 030c 	movw	r3, #4108	; 0x100c
 8010468:	4413      	add	r3, r2
 801046a:	6019      	str	r1, [r3, #0]
}
 801046c:	bf00      	nop
 801046e:	3710      	adds	r7, #16
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	2000c900 	.word	0x2000c900
 8010478:	08015100 	.word	0x08015100
 801047c:	2000bd5c 	.word	0x2000bd5c

08010480 <prvMACAddressConfig>:
/*-----------------------------------------------------------*/

static void prvMACAddressConfig( ETH_HandleTypeDef * heth,
                                 uint32_t ulIndex,
                                 uint8_t * Addr )
{
 8010480:	b480      	push	{r7}
 8010482:	b087      	sub	sp, #28
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
    uint32_t ulTempReg;

    ( void ) heth;

    /* Calculate the selected MAC address high register. */
    ulTempReg = 0x80000000ul | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	3305      	adds	r3, #5
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	021b      	lsls	r3, r3, #8
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	3204      	adds	r2, #4
 8010498:	7812      	ldrb	r2, [r2, #0]
 801049a:	4313      	orrs	r3, r2
 801049c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80104a0:	617b      	str	r3, [r7, #20]

    /* Load the selected MAC address high register. */
    ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + ulIndex ) ) ) = ulTempReg;
 80104a2:	68ba      	ldr	r2, [r7, #8]
 80104a4:	4b11      	ldr	r3, [pc, #68]	; (80104ec <prvMACAddressConfig+0x6c>)
 80104a6:	4413      	add	r3, r2
 80104a8:	461a      	mov	r2, r3
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	6013      	str	r3, [r2, #0]

    /* Calculate the selected MAC address low register. */
    ulTempReg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) Addr[ 1 ] << 8 ) | Addr[ 0 ];
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	3303      	adds	r3, #3
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	061a      	lsls	r2, r3, #24
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	3302      	adds	r3, #2
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	041b      	lsls	r3, r3, #16
 80104be:	431a      	orrs	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3301      	adds	r3, #1
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	021b      	lsls	r3, r3, #8
 80104c8:	4313      	orrs	r3, r2
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	7812      	ldrb	r2, [r2, #0]
 80104ce:	4313      	orrs	r3, r2
 80104d0:	617b      	str	r3, [r7, #20]

    /* Load the selected MAC address low register */
    ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + ulIndex ) ) ) = ulTempReg;
 80104d2:	68ba      	ldr	r2, [r7, #8]
 80104d4:	4b06      	ldr	r3, [pc, #24]	; (80104f0 <prvMACAddressConfig+0x70>)
 80104d6:	4413      	add	r3, r2
 80104d8:	461a      	mov	r2, r3
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	6013      	str	r3, [r2, #0]
}
 80104de:	bf00      	nop
 80104e0:	371c      	adds	r7, #28
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	40028040 	.word	0x40028040
 80104f0:	40028044 	.word	0x40028044

080104f4 <xNetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor,
                                    BaseType_t bReleaseAfterSend )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b088      	sub	sp, #32
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 80104fe:	2300      	movs	r3, #0
 8010500:	61fb      	str	r3, [r7, #28]
    uint32_t ulTransmitSize = 0;
 8010502:	2300      	movs	r3, #0
 8010504:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDmaTxDesc;
/* Do not wait too long for a free TX DMA buffer. */
    const TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 50u );
 8010506:	2332      	movs	r3, #50	; 0x32
 8010508:	617b      	str	r3, [r7, #20]
            {
                ProtocolPacket_t * pxPacket;

                /* If the peripheral must calculate the checksum, it wants
                 * the protocol checksum to have a value of zero. */
                pxPacket = ( ProtocolPacket_t * ) ( pxDescriptor->pucEthernetBuffer );
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	699b      	ldr	r3, [r3, #24]
 801050e:	613b      	str	r3, [r7, #16]

                if( pxPacket->xICMPPacket.xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP )
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	7ddb      	ldrb	r3, [r3, #23]
 8010514:	2b01      	cmp	r3, #1
 8010516:	d106      	bne.n	8010526 <xNetworkInterfaceOutput+0x32>
                {
                    pxPacket->xICMPPacket.xICMPHeader.usChecksum = ( uint16_t ) 0u;
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	2200      	movs	r2, #0
 801051c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010520:	2200      	movs	r2, #0
 8010522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
            }
        #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM */

        if( xPhyObject.ulLinkStatusMask != 0 )
 8010526:	4b33      	ldr	r3, [pc, #204]	; (80105f4 <xNetworkInterfaceOutput+0x100>)
 8010528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801052a:	2b00      	cmp	r3, #0
 801052c:	d057      	beq.n	80105de <xNetworkInterfaceOutput+0xea>
        {
            if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 801052e:	4b32      	ldr	r3, [pc, #200]	; (80105f8 <xNetworkInterfaceOutput+0x104>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	6979      	ldr	r1, [r7, #20]
 8010534:	4618      	mov	r0, r3
 8010536:	f7f4 fdcb 	bl	80050d0 <xQueueSemaphoreTake>
 801053a:	4603      	mov	r3, r0
 801053c:	2b01      	cmp	r3, #1
 801053e:	d14d      	bne.n	80105dc <xNetworkInterfaceOutput+0xe8>
                break;
            }

            /* This function does the actual transmission of the packet. The packet is
             * contained in 'pxDescriptor' that is passed to the function. */
            pxDmaTxDesc = xETH.TxDesc;
 8010540:	4b2e      	ldr	r3, [pc, #184]	; (80105fc <xNetworkInterfaceOutput+0x108>)
 8010542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010544:	60fb      	str	r3, [r7, #12]

            /* Is this buffer available? */
            configASSERT( ( pxDmaTxDesc->Status & ETH_DMATXDESC_OWN ) == 0 );
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	da04      	bge.n	8010558 <xNetworkInterfaceOutput+0x64>
 801054e:	492c      	ldr	r1, [pc, #176]	; (8010600 <xNetworkInterfaceOutput+0x10c>)
 8010550:	f240 20b6 	movw	r0, #694	; 0x2b6
 8010554:	f7f0 fb30 	bl	8000bb8 <vAssertCalled>

            {
                /* Is this buffer available? */
                /* Get bytes in current buffer. */
                ulTransmitSize = pxDescriptor->xDataLength;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	69db      	ldr	r3, [r3, #28]
 801055c:	61bb      	str	r3, [r7, #24]

                if( ulTransmitSize > ETH_TX_BUF_SIZE )
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010564:	d902      	bls.n	801056c <xNetworkInterfaceOutput+0x78>
                {
                    ulTransmitSize = ETH_TX_BUF_SIZE;
 8010566:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801056a:	61bb      	str	r3, [r7, #24]
                        /* Copy the bytes. */
                        memcpy( ( void * ) pxDmaTxDesc->Buffer1Addr, pxDescriptor->pucEthernetBuffer, ulTransmitSize );
                    }
                #else
                    {
                        configASSERT( bReleaseAfterSend != 0 );
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d104      	bne.n	801057c <xNetworkInterfaceOutput+0x88>
 8010572:	4923      	ldr	r1, [pc, #140]	; (8010600 <xNetworkInterfaceOutput+0x10c>)
 8010574:	f240 20c9 	movw	r0, #713	; 0x2c9
 8010578:	f7f0 fb1e 	bl	8000bb8 <vAssertCalled>

                        /* Move the buffer. */
                        pxDmaTxDesc->Buffer1Addr = ( uint32_t ) pxDescriptor->pucEthernetBuffer;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	699b      	ldr	r3, [r3, #24]
 8010580:	461a      	mov	r2, r3
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	609a      	str	r2, [r3, #8]
                        /* The Network Buffer has been passed to DMA, no need to release it. */
                        bReleaseAfterSend = pdFALSE_UNSIGNED;
 8010586:	2300      	movs	r3, #0
 8010588:	603b      	str	r3, [r7, #0]

                /* Ask to set the IPv4 checksum.
                 * Also need an Interrupt on Completion so that 'vClearTXBuffers()' will be called.. */
                #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
                    {
                        pxDmaTxDesc->Status |= ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_IC;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681a      	ldr	r2, [r3, #0]
 801058e:	4b1d      	ldr	r3, [pc, #116]	; (8010604 <xNetworkInterfaceOutput+0x110>)
 8010590:	4313      	orrs	r3, r2
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	6013      	str	r3, [r2, #0]


                /* Prepare transmit descriptors to give to DMA. */

                /* Set LAST and FIRST segment */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f043 5240 	orr.w	r2, r3, #805306368	; 0x30000000
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	601a      	str	r2, [r3, #0]
                /* Set frame size */
                pxDmaTxDesc->ControlBufferSize = ( ulTransmitSize & ETH_DMATXDESC_TBS1 );
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	605a      	str	r2, [r3, #4]
                        cache_clean_invalidate_by_addr( pulBuffer, xlength );
                    }
                #endif

                /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_OWN;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	601a      	str	r2, [r3, #0]

                /* Point to next descriptor */
                xETH.TxDesc = ( ETH_DMADescTypeDef * ) ( xETH.TxDesc->Buffer2NextDescAddr );
 80105b8:	4b10      	ldr	r3, [pc, #64]	; (80105fc <xNetworkInterfaceOutput+0x108>)
 80105ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105bc:	68db      	ldr	r3, [r3, #12]
 80105be:	461a      	mov	r2, r3
 80105c0:	4b0e      	ldr	r3, [pc, #56]	; (80105fc <xNetworkInterfaceOutput+0x108>)
 80105c2:	62da      	str	r2, [r3, #44]	; 0x2c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80105c4:	f3bf 8f4f 	dsb	sy
                /* Ensure completion of memory access */
                __DSB();
                /* Resume DMA transmission*/
                xETH.Instance->DMATPDR = 0;
 80105c8:	4b0c      	ldr	r3, [pc, #48]	; (80105fc <xNetworkInterfaceOutput+0x108>)
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	f241 0304 	movw	r3, #4100	; 0x1004
 80105d0:	4413      	add	r3, r2
 80105d2:	2200      	movs	r2, #0
 80105d4:	601a      	str	r2, [r3, #0]
                iptraceNETWORK_INTERFACE_TRANSMIT();
                xReturn = pdPASS;
 80105d6:	2301      	movs	r3, #1
 80105d8:	61fb      	str	r3, [r7, #28]
 80105da:	e000      	b.n	80105de <xNetworkInterfaceOutput+0xea>
                break;
 80105dc:	bf00      	nop
            /* The PHY has no Link Status, packet shall be dropped. */
        }
    } while( 0 );

    /* The buffer has been sent so can be released. */
    if( bReleaseAfterSend != pdFALSE )
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d002      	beq.n	80105ea <xNetworkInterfaceOutput+0xf6>
    {
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f001 f837 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
    }

    return xReturn;
 80105ea:	69fb      	ldr	r3, [r7, #28]
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3720      	adds	r7, #32
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	2000bd1c 	.word	0x2000bd1c
 80105f8:	2000bda4 	.word	0x2000bda4
 80105fc:	2000bd5c 	.word	0x2000bd5c
 8010600:	08015100 	.word	0x08015100
 8010604:	40c00000 	.word	0x40c00000

08010608 <xMayAcceptPacket>:
/*-----------------------------------------------------------*/

static BaseType_t xMayAcceptPacket( uint8_t * pcBuffer )
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
    const ProtocolPacket_t * pxProtPacket = ( const ProtocolPacket_t * ) pcBuffer;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	60fb      	str	r3, [r7, #12]

    switch( pxProtPacket->xTCPPacket.xEthernetHeader.usFrameType )
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	899b      	ldrh	r3, [r3, #12]
 8010618:	b29b      	uxth	r3, r3
 801061a:	2b08      	cmp	r3, #8
 801061c:	d006      	beq.n	801062c <xMayAcceptPacket+0x24>
 801061e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010622:	d101      	bne.n	8010628 <xMayAcceptPacket+0x20>
    {
        case ipARP_FRAME_TYPE:
            /* Check it later. */
            return pdTRUE;
 8010624:	2301      	movs	r3, #1
 8010626:	e003      	b.n	8010630 <xMayAcceptPacket+0x28>
            /* Check it here. */
            break;

        default:
            /* Refuse the packet. */
            return pdFALSE;
 8010628:	2300      	movs	r3, #0
 801062a:	e001      	b.n	8010630 <xMayAcceptPacket+0x28>
            break;
 801062c:	bf00      	nop
                    return pdFALSE;
                }
            }
        }
    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    return pdTRUE;
 801062e:	2301      	movs	r3, #1
}
 8010630:	4618      	mov	r0, r3
 8010632:	3714      	adds	r7, #20
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <prvPassEthMessages>:
/*-----------------------------------------------------------*/

static void prvPassEthMessages( NetworkBufferDescriptor_t * pxDescriptor )
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xRxEvent;

    xRxEvent.eEventType = eNetworkRxEvent;
 8010644:	2301      	movs	r3, #1
 8010646:	733b      	strb	r3, [r7, #12]
    xRxEvent.pvData = ( void * ) pxDescriptor;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	613b      	str	r3, [r7, #16]

    if( xSendEventStructToIPTask( &xRxEvent, ( TickType_t ) 1000 ) != pdPASS )
 801064c:	f107 030c 	add.w	r3, r7, #12
 8010650:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010654:	4618      	mov	r0, r3
 8010656:	f7f8 ffff 	bl	8009658 <xSendEventStructToIPTask>
 801065a:	4603      	mov	r3, r0
 801065c:	2b01      	cmp	r3, #1
 801065e:	d00d      	beq.n	801067c <prvPassEthMessages+0x40>
         * use the task level function here. */
        #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                do
                {
                    NetworkBufferDescriptor_t * pxNext = pxDescriptor->pxNextBuffer;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010664:	617b      	str	r3, [r7, #20]
                    vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 fff6 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
                    pxDescriptor = pxNext;
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	607b      	str	r3, [r7, #4]
                } while( pxDescriptor != NULL );
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1f4      	bne.n	8010660 <prvPassEthMessages+0x24>
            {
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
            }
        #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
        iptraceETHERNET_RX_EVENT_LOST();
        FreeRTOS_printf( ( "prvPassEthMessages: Can not queue return packet!\n" ) );
 8010676:	4803      	ldr	r0, [pc, #12]	; (8010684 <prvPassEthMessages+0x48>)
 8010678:	f7f0 f968 	bl	800094c <vLoggingPrintf>
    }
    else
    {
        iptraceNETWORK_INTERFACE_RECEIVE();
    }
}
 801067c:	bf00      	nop
 801067e:	3718      	adds	r7, #24
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	08015134 	.word	0x08015134

08010688 <prvNetworkInterfaceInput>:

static BaseType_t prvNetworkInterfaceInput( void )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b08a      	sub	sp, #40	; 0x28
 801068c:	af00      	add	r7, sp, #0
    NetworkBufferDescriptor_t * pxCurDescriptor;
    NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 801068e:	2300      	movs	r3, #0
 8010690:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        NetworkBufferDescriptor_t * pxFirstDescriptor = NULL;
 8010692:	2300      	movs	r3, #0
 8010694:	623b      	str	r3, [r7, #32]
        NetworkBufferDescriptor_t * pxLastDescriptor = NULL;
 8010696:	2300      	movs	r3, #0
 8010698:	61fb      	str	r3, [r7, #28]
    #endif
    BaseType_t xReceivedLength = 0;
 801069a:	2300      	movs	r3, #0
 801069c:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDMARxDescriptor;
    const TickType_t xDescriptorWaitTime = pdMS_TO_TICKS( niDESCRIPTOR_WAIT_TIME_MS );
 801069e:	23fa      	movs	r3, #250	; 0xfa
 80106a0:	60fb      	str	r3, [r7, #12]
    uint8_t * pucBuffer;

    pxDMARxDescriptor = xETH.RxDesc;
 80106a2:	4b4f      	ldr	r3, [pc, #316]	; (80107e0 <prvNetworkInterfaceInput+0x158>)
 80106a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106a6:	617b      	str	r3, [r7, #20]

    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 80106a8:	e084      	b.n	80107b4 <prvNetworkInterfaceInput+0x12c>
    {
        BaseType_t xAccepted = pdTRUE;
 80106aa:	2301      	movs	r3, #1
 80106ac:	613b      	str	r3, [r7, #16]
        /* Get the Frame Length of the received packet: subtract 4 bytes of the CRC */
        xReceivedLength = ( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_FL ) >> ETH_DMARXDESC_FRAMELENGTHSHIFT ) - 4;
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	0c1b      	lsrs	r3, r3, #16
 80106b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80106b8:	3b04      	subs	r3, #4
 80106ba:	61bb      	str	r3, [r7, #24]

        pucBuffer = ( uint8_t * ) pxDMARxDescriptor->Buffer1Addr;
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	689b      	ldr	r3, [r3, #8]
 80106c0:	60bb      	str	r3, [r7, #8]

        /* Update the ETHERNET DMA global Rx descriptor with next Rx descriptor */
        /* Chained Mode */
        /* Selects the next DMA Rx descriptor list for next buffer to read */
        xETH.RxDesc = ( ETH_DMADescTypeDef * ) pxDMARxDescriptor->Buffer2NextDescAddr;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	461a      	mov	r2, r3
 80106c8:	4b45      	ldr	r3, [pc, #276]	; (80107e0 <prvNetworkInterfaceInput+0x158>)
 80106ca:	629a      	str	r2, [r3, #40]	; 0x28

        /* In order to make the code easier and faster, only packets in a single buffer
         * will be accepted.  This can be done by making the buffers large enough to
         * hold a complete Ethernet packet (1536 bytes).
         * Therefore, two sanity checks: */
        configASSERT( xReceivedLength <= ETH_RX_BUF_SIZE );
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80106d2:	d904      	bls.n	80106de <prvNetworkInterfaceInput+0x56>
 80106d4:	4943      	ldr	r1, [pc, #268]	; (80107e4 <prvNetworkInterfaceInput+0x15c>)
 80106d6:	f240 30a6 	movw	r0, #934	; 0x3a6
 80106da:	f7f0 fa6d 	bl	8000bb8 <vAssertCalled>

        if( ( pxDMARxDescriptor->Status & ( ETH_DMARXDESC_CE | ETH_DMARXDESC_IPV4HCE | ETH_DMARXDESC_FT ) ) != ETH_DMARXDESC_FT )
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	f003 03a2 	and.w	r3, r3, #162	; 0xa2
 80106e6:	2b20      	cmp	r3, #32
 80106e8:	d002      	beq.n	80106f0 <prvNetworkInterfaceInput+0x68>
        {
            /* Not an Ethernet frame-type or a checksum error. */
            xAccepted = pdFALSE;
 80106ea:	2300      	movs	r3, #0
 80106ec:	613b      	str	r3, [r7, #16]
 80106ee:	e003      	b.n	80106f8 <prvNetworkInterfaceInput+0x70>
        }
        else
        {
            /* See if this packet must be handled. */
            xAccepted = xMayAcceptPacket( pucBuffer );
 80106f0:	68b8      	ldr	r0, [r7, #8]
 80106f2:	f7ff ff89 	bl	8010608 <xMayAcceptPacket>
 80106f6:	6138      	str	r0, [r7, #16]
        }

        if( xAccepted != pdFALSE )
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00a      	beq.n	8010714 <prvNetworkInterfaceInput+0x8c>
        {
            /* The packet will be accepted, but check first if a new Network Buffer can
             * be obtained. If not, the packet will still be dropped. */
            pxNewDescriptor = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, xDescriptorWaitTime );
 80106fe:	68f9      	ldr	r1, [r7, #12]
 8010700:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8010704:	f000 ff2e 	bl	8011564 <pxGetNetworkBufferWithDescriptor>
 8010708:	6278      	str	r0, [r7, #36]	; 0x24

            if( pxNewDescriptor == NULL )
 801070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070c:	2b00      	cmp	r3, #0
 801070e:	d101      	bne.n	8010714 <prvNetworkInterfaceInput+0x8c>
            {
                /* A new descriptor can not be allocated now. This packet will be dropped. */
                xAccepted = pdFALSE;
 8010710:	2300      	movs	r3, #0
 8010712:	613b      	str	r3, [r7, #16]
        }

        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Find out which Network Buffer was originally passed to the descriptor. */
                pxCurDescriptor = pxPacketBuffer_to_NetworkBuffer( pucBuffer );
 8010714:	68b8      	ldr	r0, [r7, #8]
 8010716:	f7f8 fe77 	bl	8009408 <pxPacketBuffer_to_NetworkBuffer>
 801071a:	6078      	str	r0, [r7, #4]
                configASSERT( pxCurDescriptor != NULL );
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d104      	bne.n	801072c <prvNetworkInterfaceInput+0xa4>
 8010722:	4930      	ldr	r1, [pc, #192]	; (80107e4 <prvNetworkInterfaceInput+0x15c>)
 8010724:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 8010728:	f7f0 fa46 	bl	8000bb8 <vAssertCalled>
                    memcpy( pxNewDescriptor->pucEthernetBuffer, pucBuffer, xReceivedLength );
                }
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        if( xAccepted != pdFALSE )
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d013      	beq.n	801075a <prvNetworkInterfaceInput+0xd2>
        {
            pxCurDescriptor->xDataLength = xReceivedLength;
 8010732:	69ba      	ldr	r2, [r7, #24]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	61da      	str	r2, [r3, #28]
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxCurDescriptor->pxNextBuffer = NULL;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	625a      	str	r2, [r3, #36]	; 0x24

                    if( pxFirstDescriptor == NULL )
 801073e:	6a3b      	ldr	r3, [r7, #32]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d102      	bne.n	801074a <prvNetworkInterfaceInput+0xc2>
                    {
                        /* Becomes the first message */
                        pxFirstDescriptor = pxCurDescriptor;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	623b      	str	r3, [r7, #32]
 8010748:	e005      	b.n	8010756 <prvNetworkInterfaceInput+0xce>
                    }
                    else if( pxLastDescriptor != NULL )
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <prvNetworkInterfaceInput+0xce>
                    {
                        /* Add to the tail */
                        pxLastDescriptor->pxNextBuffer = pxCurDescriptor;
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	625a      	str	r2, [r3, #36]	; 0x24
                    }

                    pxLastDescriptor = pxCurDescriptor;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	61fb      	str	r3, [r7, #28]

        /* Release descriptors to DMA */
        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Set Buffer1 address pointer */
                if( pxNewDescriptor != NULL )
 801075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075c:	2b00      	cmp	r3, #0
 801075e:	d004      	beq.n	801076a <prvNetworkInterfaceInput+0xe2>
                {
                    pxDMARxDescriptor->Buffer1Addr = ( uint32_t ) pxNewDescriptor->pucEthernetBuffer;
 8010760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010762:	699b      	ldr	r3, [r3, #24]
 8010764:	461a      	mov	r2, r3
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	609a      	str	r2, [r3, #8]
                }
            }
        #endif /* ipconfigZERO_COPY_RX_DRIVER */

        /* Set Buffer1 size and Second Address Chained bit */
        pxDMARxDescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8010770:	605a      	str	r2, [r3, #4]
        pxDMARxDescriptor->Status = ETH_DMARXDESC_OWN;
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010778:	601a      	str	r2, [r3, #0]
 801077a:	f3bf 8f4f 	dsb	sy
        /* Ensure completion of memory access */
        __DSB();

        /* When Rx Buffer unavailable flag is set clear it and resume
         * reception. */
        if( ( xETH.Instance->DMASR & ETH_DMASR_RBUS ) != 0 )
 801077e:	4b18      	ldr	r3, [pc, #96]	; (80107e0 <prvNetworkInterfaceInput+0x158>)
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	f241 0314 	movw	r3, #4116	; 0x1014
 8010786:	4413      	add	r3, r2
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00d      	beq.n	80107ae <prvNetworkInterfaceInput+0x126>
        {
            /* Clear RBUS ETHERNET DMA flag. */
            xETH.Instance->DMASR = ETH_DMASR_RBUS;
 8010792:	4b13      	ldr	r3, [pc, #76]	; (80107e0 <prvNetworkInterfaceInput+0x158>)
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	f241 0314 	movw	r3, #4116	; 0x1014
 801079a:	4413      	add	r3, r2
 801079c:	2280      	movs	r2, #128	; 0x80
 801079e:	601a      	str	r2, [r3, #0]

            /* Resume DMA reception. */
            xETH.Instance->DMARPDR = 0;
 80107a0:	4b0f      	ldr	r3, [pc, #60]	; (80107e0 <prvNetworkInterfaceInput+0x158>)
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	f241 0308 	movw	r3, #4104	; 0x1008
 80107a8:	4413      	add	r3, r2
 80107aa:	2200      	movs	r2, #0
 80107ac:	601a      	str	r2, [r3, #0]
        }

        pxDMARxDescriptor = xETH.RxDesc;
 80107ae:	4b0c      	ldr	r3, [pc, #48]	; (80107e0 <prvNetworkInterfaceInput+0x158>)
 80107b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107b2:	617b      	str	r3, [r7, #20]
    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f6bf af76 	bge.w	80106aa <prvNetworkInterfaceInput+0x22>
    }

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        {
            if( pxFirstDescriptor != NULL )
 80107be:	6a3b      	ldr	r3, [r7, #32]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d002      	beq.n	80107ca <prvNetworkInterfaceInput+0x142>
            {
                prvPassEthMessages( pxFirstDescriptor );
 80107c4:	6a38      	ldr	r0, [r7, #32]
 80107c6:	f7ff ff39 	bl	801063c <prvPassEthMessages>
            }
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */

    return( xReceivedLength > 0 );
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	bfcc      	ite	gt
 80107d0:	2301      	movgt	r3, #1
 80107d2:	2300      	movle	r3, #0
 80107d4:	b2db      	uxtb	r3, r3
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3728      	adds	r7, #40	; 0x28
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	2000bd5c 	.word	0x2000bd5c
 80107e4:	08015100 	.word	0x08015100

080107e8 <xSTM32_PhyRead>:


BaseType_t xSTM32_PhyRead( BaseType_t xAddress,
                           BaseType_t xRegister,
                           uint32_t * pulValue )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b086      	sub	sp, #24
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 80107f4:	4b10      	ldr	r3, [pc, #64]	; (8010838 <xSTM32_PhyRead+0x50>)
 80107f6:	8a1b      	ldrh	r3, [r3, #16]
 80107f8:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	4b0e      	ldr	r3, [pc, #56]	; (8010838 <xSTM32_PhyRead+0x50>)
 8010800:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_ReadPHYRegister( &xETH, ( uint16_t ) xRegister, pulValue );
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	b29b      	uxth	r3, r3
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	4619      	mov	r1, r3
 801080a:	480b      	ldr	r0, [pc, #44]	; (8010838 <xSTM32_PhyRead+0x50>)
 801080c:	f7f3 f952 	bl	8003ab4 <HAL_ETH_ReadPHYRegister>
 8010810:	4603      	mov	r3, r0
 8010812:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 8010814:	4a08      	ldr	r2, [pc, #32]	; (8010838 <xSTM32_PhyRead+0x50>)
 8010816:	8a7b      	ldrh	r3, [r7, #18]
 8010818:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 801081a:	7c7b      	ldrb	r3, [r7, #17]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d102      	bne.n	8010826 <xSTM32_PhyRead+0x3e>
    {
        xResult = 0;
 8010820:	2300      	movs	r3, #0
 8010822:	617b      	str	r3, [r7, #20]
 8010824:	e002      	b.n	801082c <xSTM32_PhyRead+0x44>
    }
    else
    {
        xResult = -1;
 8010826:	f04f 33ff 	mov.w	r3, #4294967295
 801082a:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 801082c:	697b      	ldr	r3, [r7, #20]
}
 801082e:	4618      	mov	r0, r3
 8010830:	3718      	adds	r7, #24
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	2000bd5c 	.word	0x2000bd5c

0801083c <xSTM32_PhyWrite>:
/*-----------------------------------------------------------*/

BaseType_t xSTM32_PhyWrite( BaseType_t xAddress,
                            BaseType_t xRegister,
                            uint32_t ulValue )
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b086      	sub	sp, #24
 8010840:	af00      	add	r7, sp, #0
 8010842:	60f8      	str	r0, [r7, #12]
 8010844:	60b9      	str	r1, [r7, #8]
 8010846:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 8010848:	4b10      	ldr	r3, [pc, #64]	; (801088c <xSTM32_PhyWrite+0x50>)
 801084a:	8a1b      	ldrh	r3, [r3, #16]
 801084c:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	b29a      	uxth	r2, r3
 8010852:	4b0e      	ldr	r3, [pc, #56]	; (801088c <xSTM32_PhyWrite+0x50>)
 8010854:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_WritePHYRegister( &xETH, ( uint16_t ) xRegister, ulValue );
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	b29b      	uxth	r3, r3
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	4619      	mov	r1, r3
 801085e:	480b      	ldr	r0, [pc, #44]	; (801088c <xSTM32_PhyWrite+0x50>)
 8010860:	f7f3 f998 	bl	8003b94 <HAL_ETH_WritePHYRegister>
 8010864:	4603      	mov	r3, r0
 8010866:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 8010868:	4a08      	ldr	r2, [pc, #32]	; (801088c <xSTM32_PhyWrite+0x50>)
 801086a:	8a7b      	ldrh	r3, [r7, #18]
 801086c:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 801086e:	7c7b      	ldrb	r3, [r7, #17]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d102      	bne.n	801087a <xSTM32_PhyWrite+0x3e>
    {
        xResult = 0;
 8010874:	2300      	movs	r3, #0
 8010876:	617b      	str	r3, [r7, #20]
 8010878:	e002      	b.n	8010880 <xSTM32_PhyWrite+0x44>
    }
    else
    {
        xResult = -1;
 801087a:	f04f 33ff 	mov.w	r3, #4294967295
 801087e:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8010880:	697b      	ldr	r3, [r7, #20]
}
 8010882:	4618      	mov	r0, r3
 8010884:	3718      	adds	r7, #24
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	2000bd5c 	.word	0x2000bd5c

08010890 <vMACBProbePhy>:
/*-----------------------------------------------------------*/

void vMACBProbePhy( void )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	af00      	add	r7, sp, #0
    vPhyInitialise( &xPhyObject, xSTM32_PhyRead, xSTM32_PhyWrite );
 8010894:	4a06      	ldr	r2, [pc, #24]	; (80108b0 <vMACBProbePhy+0x20>)
 8010896:	4907      	ldr	r1, [pc, #28]	; (80108b4 <vMACBProbePhy+0x24>)
 8010898:	4807      	ldr	r0, [pc, #28]	; (80108b8 <vMACBProbePhy+0x28>)
 801089a:	f000 f947 	bl	8010b2c <vPhyInitialise>
    xPhyDiscover( &xPhyObject );
 801089e:	4806      	ldr	r0, [pc, #24]	; (80108b8 <vMACBProbePhy+0x28>)
 80108a0:	f000 f95a 	bl	8010b58 <xPhyDiscover>
    xPhyConfigure( &xPhyObject, &xPHYProperties );
 80108a4:	4905      	ldr	r1, [pc, #20]	; (80108bc <vMACBProbePhy+0x2c>)
 80108a6:	4804      	ldr	r0, [pc, #16]	; (80108b8 <vMACBProbePhy+0x28>)
 80108a8:	f000 fa52 	bl	8010d50 <xPhyConfigure>
}
 80108ac:	bf00      	nop
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	0801083d 	.word	0x0801083d
 80108b4:	080107e9 	.word	0x080107e9
 80108b8:	2000bd1c 	.word	0x2000bd1c
 80108bc:	08015450 	.word	0x08015450

080108c0 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 80108c8:	4b37      	ldr	r3, [pc, #220]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 80108ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	4619      	mov	r1, r3
 80108d0:	4836      	ldr	r0, [pc, #216]	; (80109ac <prvEthernetUpdateConfig+0xec>)
 80108d2:	f7f0 f83b 	bl	800094c <vLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d103      	bne.n	80108e4 <prvEthernetUpdateConfig+0x24>
 80108dc:	4b32      	ldr	r3, [pc, #200]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 80108de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d059      	beq.n	8010998 <prvEthernetUpdateConfig+0xd8>
    {
        /* Restart the auto-negotiation. */
        if( xETH.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE )
 80108e4:	4b32      	ldr	r3, [pc, #200]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d024      	beq.n	8010936 <prvEthernetUpdateConfig+0x76>
        {
            xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 80108ec:	4b2e      	ldr	r3, [pc, #184]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 80108ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108f0:	2201      	movs	r2, #1
 80108f2:	fa02 f303 	lsl.w	r3, r2, r3
 80108f6:	3b01      	subs	r3, #1
 80108f8:	4619      	mov	r1, r3
 80108fa:	482b      	ldr	r0, [pc, #172]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 80108fc:	f000 fb6e 	bl	8010fdc <xPhyStartAutoNegotiation>

            /* Configure the MAC with the Duplex Mode fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8010900:	4b29      	ldr	r3, [pc, #164]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 8010902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010906:	2b02      	cmp	r3, #2
 8010908:	d104      	bne.n	8010914 <prvEthernetUpdateConfig+0x54>
            {
                xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801090a:	4b29      	ldr	r3, [pc, #164]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 801090c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010910:	60da      	str	r2, [r3, #12]
 8010912:	e002      	b.n	801091a <prvEthernetUpdateConfig+0x5a>
            }
            else
            {
                xETH.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8010914:	4b26      	ldr	r3, [pc, #152]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 8010916:	2200      	movs	r2, #0
 8010918:	60da      	str	r2, [r3, #12]
            }

            /* Configure the MAC with the speed fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 801091a:	4b23      	ldr	r3, [pc, #140]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 801091c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010920:	2b01      	cmp	r3, #1
 8010922:	d103      	bne.n	801092c <prvEthernetUpdateConfig+0x6c>
            {
                xETH.Init.Speed = ETH_SPEED_10M;
 8010924:	4b22      	ldr	r3, [pc, #136]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 8010926:	2200      	movs	r2, #0
 8010928:	609a      	str	r2, [r3, #8]
 801092a:	e02d      	b.n	8010988 <prvEthernetUpdateConfig+0xc8>
            }
            else
            {
                xETH.Init.Speed = ETH_SPEED_100M;
 801092c:	4b20      	ldr	r3, [pc, #128]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 801092e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010932:	609a      	str	r2, [r3, #8]
 8010934:	e028      	b.n	8010988 <prvEthernetUpdateConfig+0xc8>
        {
            /* Check parameters */
            assert_param( IS_ETH_SPEED( xETH.Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( xETH.Init.DuplexMode ) );

            if( xETH.Init.DuplexMode == ETH_MODE_FULLDUPLEX )
 8010936:	4b1e      	ldr	r3, [pc, #120]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801093e:	d104      	bne.n	801094a <prvEthernetUpdateConfig+0x8a>
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_HALF;
 8010940:	4b19      	ldr	r3, [pc, #100]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 8010942:	2201      	movs	r2, #1
 8010944:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8010948:	e003      	b.n	8010952 <prvEthernetUpdateConfig+0x92>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_FULL;
 801094a:	4b17      	ldr	r3, [pc, #92]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 801094c:	2202      	movs	r2, #2
 801094e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            }

            if( xETH.Init.Speed == ETH_SPEED_10M )
 8010952:	4b17      	ldr	r3, [pc, #92]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 8010954:	689b      	ldr	r3, [r3, #8]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d104      	bne.n	8010964 <prvEthernetUpdateConfig+0xa4>
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_10;
 801095a:	4b13      	ldr	r3, [pc, #76]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 801095c:	2201      	movs	r2, #1
 801095e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8010962:	e003      	b.n	801096c <prvEthernetUpdateConfig+0xac>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_100;
 8010964:	4b10      	ldr	r3, [pc, #64]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 8010966:	2202      	movs	r2, #2
 8010968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }

            xPhyObject.xPhyPreferences.ucMDI_X = PHY_MDIX_AUTO;
 801096c:	4b0e      	ldr	r3, [pc, #56]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 801096e:	2203      	movs	r2, #3
 8010970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            /* Use predefined (fixed) configuration. */
            xPhyFixedValue( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 8010974:	4b0c      	ldr	r3, [pc, #48]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 8010976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010978:	2201      	movs	r2, #1
 801097a:	fa02 f303 	lsl.w	r3, r2, r3
 801097e:	3b01      	subs	r3, #1
 8010980:	4619      	mov	r1, r3
 8010982:	4809      	ldr	r0, [pc, #36]	; (80109a8 <prvEthernetUpdateConfig+0xe8>)
 8010984:	f000 faea 	bl	8010f5c <xPhyFixedValue>
        }

        /* ETHERNET MAC Re-Configuration */
        HAL_ETH_ConfigMAC( &xETH, ( ETH_MACInitTypeDef * ) NULL );
 8010988:	2100      	movs	r1, #0
 801098a:	4809      	ldr	r0, [pc, #36]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 801098c:	f7f3 fa44 	bl	8003e18 <HAL_ETH_ConfigMAC>

        /* Restart MAC interface */
        HAL_ETH_Start( &xETH );
 8010990:	4807      	ldr	r0, [pc, #28]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 8010992:	f7f3 f96f 	bl	8003c74 <HAL_ETH_Start>
 8010996:	e002      	b.n	801099e <prvEthernetUpdateConfig+0xde>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop( &xETH );
 8010998:	4805      	ldr	r0, [pc, #20]	; (80109b0 <prvEthernetUpdateConfig+0xf0>)
 801099a:	f7f3 f99a 	bl	8003cd2 <HAL_ETH_Stop>
    }
}
 801099e:	bf00      	nop
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	2000bd1c 	.word	0x2000bd1c
 80109ac:	08015168 	.word	0x08015168
 80109b0:	2000bd5c 	.word	0x2000bd5c

080109b4 <prvEMACHandlerTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b086      	sub	sp, #24
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
    UBaseType_t uxLastMinBufferCount = 0;
 80109bc:	2300      	movs	r3, #0
 80109be:	617b      	str	r3, [r7, #20]
    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        UBaseType_t uxLastMinQueueSpace = 0;
    #endif
    UBaseType_t uxCurrentCount;
    BaseType_t xResult;
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
 80109c0:	2364      	movs	r3, #100	; 0x64
 80109c2:	60fb      	str	r3, [r7, #12]
    /* Remove compiler warnings about unused parameters. */
    ( void ) pvParameters;

    for( ; ; )
    {
        xResult = 0;
 80109c4:	2300      	movs	r3, #0
 80109c6:	613b      	str	r3, [r7, #16]
        uxCurrentCount = uxGetMinimumFreeNetworkBuffers();
 80109c8:	f000 fe86 	bl	80116d8 <uxGetMinimumFreeNetworkBuffers>
 80109cc:	60b8      	str	r0, [r7, #8]

        if( uxLastMinBufferCount != uxCurrentCount )
 80109ce:	697a      	ldr	r2, [r7, #20]
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d009      	beq.n	80109ea <prvEMACHandlerTask+0x36>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentCount;
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	617b      	str	r3, [r7, #20]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 80109da:	f000 fe71 	bl	80116c0 <uxGetNumberOfFreeNetworkBuffers>
 80109de:	4603      	mov	r3, r0
 80109e0:	68ba      	ldr	r2, [r7, #8]
 80109e2:	4619      	mov	r1, r3
 80109e4:	482c      	ldr	r0, [pc, #176]	; (8010a98 <prvEMACHandlerTask+0xe4>)
 80109e6:	f7ef ffb1 	bl	800094c <vLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(), uxCurrentCount ) );
        }

        if( xTXDescriptorSemaphore != NULL )
 80109ea:	4b2c      	ldr	r3, [pc, #176]	; (8010a9c <prvEMACHandlerTask+0xe8>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d013      	beq.n	8010a1a <prvEMACHandlerTask+0x66>
        {
            static UBaseType_t uxLowestSemCount = ( UBaseType_t ) ETH_TXBUFNB - 1;

            uxCurrentCount = uxSemaphoreGetCount( xTXDescriptorSemaphore );
 80109f2:	4b2a      	ldr	r3, [pc, #168]	; (8010a9c <prvEMACHandlerTask+0xe8>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7f4 fc60 	bl	80052bc <uxQueueMessagesWaiting>
 80109fc:	60b8      	str	r0, [r7, #8]

            if( uxLowestSemCount > uxCurrentCount )
 80109fe:	4b28      	ldr	r3, [pc, #160]	; (8010aa0 <prvEMACHandlerTask+0xec>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	68ba      	ldr	r2, [r7, #8]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d208      	bcs.n	8010a1a <prvEMACHandlerTask+0x66>
            {
                uxLowestSemCount = uxCurrentCount;
 8010a08:	4a25      	ldr	r2, [pc, #148]	; (8010aa0 <prvEMACHandlerTask+0xec>)
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "TX DMA buffers: lowest %lu\n", uxLowestSemCount ) );
 8010a0e:	4b24      	ldr	r3, [pc, #144]	; (8010aa0 <prvEMACHandlerTask+0xec>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	4619      	mov	r1, r3
 8010a14:	4823      	ldr	r0, [pc, #140]	; (8010aa4 <prvEMACHandlerTask+0xf0>)
 8010a16:	f7ef ff99 	bl	800094c <vLoggingPrintf>
                    FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
                }
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
 8010a1a:	4b23      	ldr	r3, [pc, #140]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f003 0307 	and.w	r3, r3, #7
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d104      	bne.n	8010a30 <prvEMACHandlerTask+0x7c>
        {
            /* No events to process now, wait for the next. */
            ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8010a26:	68fa      	ldr	r2, [r7, #12]
 8010a28:	2100      	movs	r1, #0
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	f7f5 fe7e 	bl	800672c <ulTaskGenericNotifyTake>
        }

        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
 8010a30:	4b1d      	ldr	r3, [pc, #116]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f003 0301 	and.w	r3, r3, #1
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d008      	beq.n	8010a4e <prvEMACHandlerTask+0x9a>
        {
            ulISREvents &= ~EMAC_IF_RX_EVENT;
 8010a3c:	4b1a      	ldr	r3, [pc, #104]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f023 0301 	bic.w	r3, r3, #1
 8010a44:	4a18      	ldr	r2, [pc, #96]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a46:	6013      	str	r3, [r2, #0]

            xResult = prvNetworkInterfaceInput();
 8010a48:	f7ff fe1e 	bl	8010688 <prvNetworkInterfaceInput>
 8010a4c:	6138      	str	r0, [r7, #16]
        }

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0 )
 8010a4e:	4b16      	ldr	r3, [pc, #88]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f003 0302 	and.w	r3, r3, #2
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d007      	beq.n	8010a6a <prvEMACHandlerTask+0xb6>
        {
            /* Code to release TX buffers if zero-copy is used. */
            ulISREvents &= ~EMAC_IF_TX_EVENT;
 8010a5a:	4b13      	ldr	r3, [pc, #76]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f023 0302 	bic.w	r3, r3, #2
 8010a62:	4a11      	ldr	r2, [pc, #68]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a64:	6013      	str	r3, [r2, #0]
            /* Check if DMA packets have been delivered. */
            vClearTXBuffers();
 8010a66:	f7ff fb77 	bl	8010158 <vClearTXBuffers>
        }

        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0 )
 8010a6a:	4b0f      	ldr	r3, [pc, #60]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f003 0304 	and.w	r3, r3, #4
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d005      	beq.n	8010a82 <prvEMACHandlerTask+0xce>
        {
            /* Future extension: logging about errors that occurred. */
            ulISREvents &= ~EMAC_IF_ERR_EVENT;
 8010a76:	4b0c      	ldr	r3, [pc, #48]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f023 0304 	bic.w	r3, r3, #4
 8010a7e:	4a0a      	ldr	r2, [pc, #40]	; (8010aa8 <prvEMACHandlerTask+0xf4>)
 8010a80:	6013      	str	r3, [r2, #0]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != 0 )
 8010a82:	6939      	ldr	r1, [r7, #16]
 8010a84:	4809      	ldr	r0, [pc, #36]	; (8010aac <prvEMACHandlerTask+0xf8>)
 8010a86:	f000 fc35 	bl	80112f4 <xPhyCheckLinkStatus>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d099      	beq.n	80109c4 <prvEMACHandlerTask+0x10>
        {
            /* Something has changed to a Link Status, need re-check. */
            prvEthernetUpdateConfig( pdFALSE );
 8010a90:	2000      	movs	r0, #0
 8010a92:	f7ff ff15 	bl	80108c0 <prvEthernetUpdateConfig>
        xResult = 0;
 8010a96:	e795      	b.n	80109c4 <prvEMACHandlerTask+0x10>
 8010a98:	0801519c 	.word	0x0801519c
 8010a9c:	2000bda4 	.word	0x2000bda4
 8010aa0:	20000030 	.word	0x20000030
 8010aa4:	080151c0 	.word	0x080151c0
 8010aa8:	2000bd18 	.word	0x2000bd18
 8010aac:	2000bd1c 	.word	0x2000bd1c

08010ab0 <ETH_IRQHandler>:
    }
}
/*-----------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &xETH );
 8010ab4:	4802      	ldr	r0, [pc, #8]	; (8010ac0 <ETH_IRQHandler+0x10>)
 8010ab6:	f7f2 ffc1 	bl	8003a3c <HAL_ETH_IRQHandler>
}
 8010aba:	bf00      	nop
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	2000bd5c 	.word	0x2000bd5c

08010ac4 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	4a08      	ldr	r2, [pc, #32]	; (8010af0 <xHas_1F_PHYSPCS+0x2c>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d002      	beq.n	8010ada <xHas_1F_PHYSPCS+0x16>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	60fb      	str	r3, [r7, #12]
            break;
 8010ad8:	e002      	b.n	8010ae0 <xHas_1F_PHYSPCS+0x1c>

        case PHY_ID_DP83848I:
            xResult = pdFALSE;
 8010ada:	2300      	movs	r3, #0
 8010adc:	60fb      	str	r3, [r7, #12]
            break;
 8010ade:	bf00      	nop
    }

    return xResult;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3714      	adds	r7, #20
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr
 8010aee:	bf00      	nop
 8010af0:	20005c90 	.word	0x20005c90

08010af4 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	4a09      	ldr	r2, [pc, #36]	; (8010b24 <xHas_19_PHYCR+0x30>)
 8010b00:	4293      	cmp	r3, r2
 8010b02:	d002      	beq.n	8010b0a <xHas_19_PHYCR+0x16>
 8010b04:	4a08      	ldr	r2, [pc, #32]	; (8010b28 <xHas_19_PHYCR+0x34>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d102      	bne.n	8010b10 <xHas_19_PHYCR+0x1c>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
            xResult = pdTRUE;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	60fb      	str	r3, [r7, #12]
            break;
 8010b0e:	e002      	b.n	8010b16 <xHas_19_PHYCR+0x22>

        default:
            /* Most PHY's do not have a 19_PHYCR */
            xResult = pdFALSE;
 8010b10:	2300      	movs	r3, #0
 8010b12:	60fb      	str	r3, [r7, #12]
            break;
 8010b14:	bf00      	nop
    }

    return xResult;
 8010b16:	68fb      	ldr	r3, [r7, #12]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3714      	adds	r7, #20
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr
 8010b24:	0007c130 	.word	0x0007c130
 8010b28:	20005c90 	.word	0x20005c90

08010b2c <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8010b38:	2240      	movs	r2, #64	; 0x40
 8010b3a:	2100      	movs	r1, #0
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f000 fe34 	bl	80117aa <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	605a      	str	r2, [r3, #4]
}
 8010b4e:	bf00      	nop
 8010b50:	3710      	adds	r7, #16
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
	...

08010b58 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b086      	sub	sp, #24
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	629a      	str	r2, [r3, #40]	; 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8010b66:	2300      	movs	r3, #0
 8010b68:	617b      	str	r3, [r7, #20]
 8010b6a:	e038      	b.n	8010bde <xPhyDiscover+0x86>
    {
        uint32_t ulLowerID;

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f107 020c 	add.w	r2, r7, #12
 8010b74:	2103      	movs	r1, #3
 8010b76:	6978      	ldr	r0, [r7, #20]
 8010b78:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d029      	beq.n	8010bd8 <xPhyDiscover+0x80>
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d026      	beq.n	8010bd8 <xPhyDiscover+0x80>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f107 0208 	add.w	r2, r7, #8
 8010b92:	2102      	movs	r1, #2
 8010b94:	6978      	ldr	r0, [r7, #20]
 8010b96:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	041a      	lsls	r2, r3, #16
 8010b9c:	68f9      	ldr	r1, [r7, #12]
 8010b9e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8010ba2:	400b      	ands	r3, r1
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bac:	697a      	ldr	r2, [r7, #20]
 8010bae:	b2d1      	uxtb	r1, r2
 8010bb0:	687a      	ldr	r2, [r7, #4]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	460a      	mov	r2, r1
 8010bb6:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	3202      	adds	r2, #2
 8010bc0:	6939      	ldr	r1, [r7, #16]
 8010bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bca:	1c5a      	adds	r2, r3, #1
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	629a      	str	r2, [r3, #40]	; 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bd4:	2b04      	cmp	r3, #4
 8010bd6:	d005      	beq.n	8010be4 <xPhyDiscover+0x8c>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	3301      	adds	r3, #1
 8010bdc:	617b      	str	r3, [r7, #20]
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	2b1f      	cmp	r3, #31
 8010be2:	ddc3      	ble.n	8010b6c <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	dd05      	ble.n	8010bf8 <xPhyDiscover+0xa0>
    {
        FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	4804      	ldr	r0, [pc, #16]	; (8010c04 <xPhyDiscover+0xac>)
 8010bf4:	f7ef feaa 	bl	800094c <vLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3718      	adds	r7, #24
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	080151dc 	.word	0x080151dc

08010c08 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b08c      	sub	sp, #48	; 0x30
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0UL;
 8010c12:	2300      	movs	r3, #0
 8010c14:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010c16:	2300      	movs	r3, #0
 8010c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c1a:	e017      	b.n	8010c4c <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c20:	4413      	add	r3, r2
 8010c22:	3318      	adds	r3, #24
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f107 0218 	add.w	r2, r7, #24
 8010c30:	2100      	movs	r1, #0
 8010c32:	69f8      	ldr	r0, [r7, #28]
 8010c34:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	69ba      	ldr	r2, [r7, #24]
 8010c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010c40:	2100      	movs	r1, #0
 8010c42:	69f8      	ldr	r0, [r7, #28]
 8010c44:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c48:	3301      	adds	r3, #1
 8010c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c52:	429a      	cmp	r2, r3
 8010c54:	dbe2      	blt.n	8010c1c <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8010c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010c5a:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8010c5c:	f107 030c 	add.w	r3, r7, #12
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7f5 fa49 	bl	80060f8 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010c66:	2300      	movs	r3, #0
 8010c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c6a:	e01f      	b.n	8010cac <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c70:	4413      	add	r3, r2
 8010c72:	3318      	adds	r3, #24
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	f107 0218 	add.w	r2, r7, #24
 8010c80:	2100      	movs	r1, #0
 8010c82:	6a38      	ldr	r0, [r7, #32]
 8010c84:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d10a      	bne.n	8010ca6 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8010c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c92:	482d      	ldr	r0, [pc, #180]	; (8010d48 <xPhyReset+0x140>)
 8010c94:	f7ef fe5a 	bl	800094c <vLoggingPrintf>
                ulDoneMask |= ( 1UL << xPhyIndex );
 8010c98:	2201      	movs	r2, #1
 8010c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8010ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ca2:	4313      	orrs	r3, r2
 8010ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca8:	3301      	adds	r3, #1
 8010caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	dbda      	blt.n	8010c6c <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8010cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d013      	beq.n	8010ce6 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8010cbe:	f107 0214 	add.w	r2, r7, #20
 8010cc2:	f107 030c 	add.w	r3, r7, #12
 8010cc6:	4611      	mov	r1, r2
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7f5 fa4d 	bl	8006168 <xTaskCheckForTimeOut>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d004      	beq.n	8010cde <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 8010cd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cd6:	481d      	ldr	r0, [pc, #116]	; (8010d4c <xPhyReset+0x144>)
 8010cd8:	f7ef fe38 	bl	800094c <vLoggingPrintf>
            break;
 8010cdc:	e004      	b.n	8010ce8 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8010cde:	2032      	movs	r0, #50	; 0x32
 8010ce0:	f7f4 fe8c 	bl	80059fc <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010ce4:	e7bf      	b.n	8010c66 <xPhyReset+0x5e>
            break;
 8010ce6:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010ce8:	2300      	movs	r3, #0
 8010cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cec:	e01f      	b.n	8010d2e <xPhyReset+0x126>
    {
        if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 8010cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8010cf6:	f003 0301 	and.w	r3, r3, #1
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d114      	bne.n	8010d28 <xPhyReset+0x120>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d02:	4413      	add	r3, r2
 8010d04:	3318      	adds	r3, #24
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	627b      	str	r3, [r7, #36]	; 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f107 0218 	add.w	r2, r7, #24
 8010d12:	2100      	movs	r1, #0
 8010d14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d16:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	69ba      	ldr	r2, [r7, #24]
 8010d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010d22:	2100      	movs	r1, #0
 8010d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d26:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d34:	429a      	cmp	r2, r3
 8010d36:	dbda      	blt.n	8010cee <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8010d38:	2032      	movs	r0, #50	; 0x32
 8010d3a:	f7f4 fe5f 	bl	80059fc <vTaskDelay>

    return ulDoneMask;
 8010d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3730      	adds	r7, #48	; 0x30
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	080151e8 	.word	0x080151e8
 8010d4c:	0801520c 	.word	0x0801520c

08010d50 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b088      	sub	sp, #32
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	dc05      	bgt.n	8010d6e <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8010d62:	487c      	ldr	r0, [pc, #496]	; (8010f54 <xPhyConfigure+0x204>)
 8010d64:	f7ef fdf2 	bl	800094c <vLoggingPrintf>
        return -1;
 8010d68:	f04f 33ff 	mov.w	r3, #4294967295
 8010d6c:	e0ed      	b.n	8010f4a <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	2b03      	cmp	r3, #3
 8010d74:	d107      	bne.n	8010d86 <xPhyConfigure+0x36>
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	789b      	ldrb	r3, [r3, #2]
 8010d7a:	2b03      	cmp	r3, #3
 8010d7c:	d103      	bne.n	8010d86 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8010d7e:	f240 13e1 	movw	r3, #481	; 0x1e1
 8010d82:	61fb      	str	r3, [r7, #28]
 8010d84:	e044      	b.n	8010e10 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8010d86:	2301      	movs	r3, #1
 8010d88:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	2b03      	cmp	r3, #3
 8010d90:	d10d      	bne.n	8010dae <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	789b      	ldrb	r3, [r3, #2]
 8010d96:	2b02      	cmp	r3, #2
 8010d98:	d104      	bne.n	8010da4 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8010da0:	61fb      	str	r3, [r7, #28]
 8010da2:	e035      	b.n	8010e10 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8010daa:	61fb      	str	r3, [r7, #28]
 8010dac:	e030      	b.n	8010e10 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	789b      	ldrb	r3, [r3, #2]
 8010db2:	2b03      	cmp	r3, #3
 8010db4:	d10d      	bne.n	8010dd2 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d104      	bne.n	8010dc8 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010dc4:	61fb      	str	r3, [r7, #28]
 8010dc6:	e023      	b.n	8010e10 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8010dc8:	69fb      	ldr	r3, [r7, #28]
 8010dca:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8010dce:	61fb      	str	r3, [r7, #28]
 8010dd0:	e01e      	b.n	8010e10 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	2b02      	cmp	r3, #2
 8010dd8:	d10d      	bne.n	8010df6 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	789b      	ldrb	r3, [r3, #2]
 8010dde:	2b02      	cmp	r3, #2
 8010de0:	d104      	bne.n	8010dec <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8010de2:	69fb      	ldr	r3, [r7, #28]
 8010de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010de8:	61fb      	str	r3, [r7, #28]
 8010dea:	e011      	b.n	8010e10 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010df2:	61fb      	str	r3, [r7, #28]
 8010df4:	e00c      	b.n	8010e10 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	789b      	ldrb	r3, [r3, #2]
 8010dfa:	2b02      	cmp	r3, #2
 8010dfc:	d104      	bne.n	8010e08 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e04:	61fb      	str	r3, [r7, #28]
 8010e06:	e003      	b.n	8010e10 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	f043 0320 	orr.w	r3, r3, #32
 8010e0e:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e14:	2201      	movs	r2, #1
 8010e16:	fa02 f303 	lsl.w	r3, r2, r3
 8010e1a:	3b01      	subs	r3, #1
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f7ff fef2 	bl	8010c08 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010e24:	2300      	movs	r3, #0
 8010e26:	61bb      	str	r3, [r7, #24]
 8010e28:	e080      	b.n	8010f2c <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	4413      	add	r3, r2
 8010e30:	3318      	adds	r3, #24
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	69ba      	ldr	r2, [r7, #24]
 8010e3a:	3202      	adds	r2, #2
 8010e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e40:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	69fa      	ldr	r2, [r7, #28]
 8010e48:	2104      	movs	r1, #4
 8010e4a:	6978      	ldr	r0, [r7, #20]
 8010e4c:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f107 020c 	add.w	r2, r7, #12
 8010e56:	2100      	movs	r1, #0
 8010e58:	6978      	ldr	r0, [r7, #20]
 8010e5a:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 8010e62:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010e6a:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	2b02      	cmp	r3, #2
 8010e72:	d003      	beq.n	8010e7c <xPhyConfigure+0x12c>
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	2b03      	cmp	r3, #3
 8010e7a:	d104      	bne.n	8010e86 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010e82:	60fb      	str	r3, [r7, #12]
 8010e84:	e007      	b.n	8010e96 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d103      	bne.n	8010e96 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010e94:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	789b      	ldrb	r3, [r3, #2]
 8010e9a:	2b02      	cmp	r3, #2
 8010e9c:	d003      	beq.n	8010ea6 <xPhyConfigure+0x156>
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	789b      	ldrb	r3, [r3, #2]
 8010ea2:	2b03      	cmp	r3, #3
 8010ea4:	d104      	bne.n	8010eb0 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010eac:	60fb      	str	r3, [r7, #12]
 8010eae:	e007      	b.n	8010ec0 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	789b      	ldrb	r3, [r3, #2]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d103      	bne.n	8010ec0 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ebe:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8010ec0:	6938      	ldr	r0, [r7, #16]
 8010ec2:	f7ff fe17 	bl	8010af4 <xHas_19_PHYCR>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d026      	beq.n	8010f1a <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f107 0208 	add.w	r2, r7, #8
 8010ed4:	2119      	movs	r1, #25
 8010ed6:	6978      	ldr	r0, [r7, #20]
 8010ed8:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8010ee0:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	785b      	ldrb	r3, [r3, #1]
 8010ee6:	2b03      	cmp	r3, #3
 8010ee8:	d104      	bne.n	8010ef4 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ef0:	60bb      	str	r3, [r7, #8]
 8010ef2:	e00c      	b.n	8010f0e <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	785b      	ldrb	r3, [r3, #1]
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d104      	bne.n	8010f06 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f02:	60bb      	str	r3, [r7, #8]
 8010f04:	e003      	b.n	8010f0e <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f0c:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	68ba      	ldr	r2, [r7, #8]
 8010f14:	2119      	movs	r1, #25
 8010f16:	6978      	ldr	r0, [r7, #20]
 8010f18:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	69f9      	ldr	r1, [r7, #28]
 8010f20:	480d      	ldr	r0, [pc, #52]	; (8010f58 <xPhyConfigure+0x208>)
 8010f22:	f7ef fd13 	bl	800094c <vLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	61bb      	str	r3, [r7, #24]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f30:	69ba      	ldr	r2, [r7, #24]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	f6ff af79 	blt.w	8010e2a <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	62da      	str	r2, [r3, #44]	; 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	69fa      	ldr	r2, [r7, #28]
 8010f46:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8010f48:	2300      	movs	r3, #0
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3720      	adds	r7, #32
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	08015244 	.word	0x08015244
 8010f58:	08015268 	.word	0x08015268

08010f5c <xPhyFixedValue>:
 * The caller has set the values in 'xPhyPreferences' (ucDuplex and ucSpeed).
 * The PHY register phyREG_00_BMCR will be set for every connected PHY that matches
 * with ulPhyMask. */
BaseType_t xPhyFixedValue( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b086      	sub	sp, #24
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
    BaseType_t xPhyIndex;
    uint32_t ulValue, ulBitMask = ( uint32_t ) 1U;
 8010f66:	2301      	movs	r3, #1
 8010f68:	60fb      	str	r3, [r7, #12]

    ulValue = ( uint32_t ) 0U;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	613b      	str	r3, [r7, #16]

    if( pxPhyObject->xPhyPreferences.ucDuplex == PHY_DUPLEX_FULL )
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010f74:	2b02      	cmp	r3, #2
 8010f76:	d103      	bne.n	8010f80 <xPhyFixedValue+0x24>
    {
        ulValue |= phyBMCR_FULL_DUPLEX;
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f7e:	613b      	str	r3, [r7, #16]
    }

    if( pxPhyObject->xPhyPreferences.ucSpeed == PHY_SPEED_100 )
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010f86:	2b02      	cmp	r3, #2
 8010f88:	d103      	bne.n	8010f92 <xPhyFixedValue+0x36>
    {
        ulValue |= phyBMCR_SPEED_100;
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010f90:	613b      	str	r3, [r7, #16]
    }

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8010f92:	2300      	movs	r3, #0
 8010f94:	617b      	str	r3, [r7, #20]
 8010f96:	e016      	b.n	8010fc6 <xPhyFixedValue+0x6a>
    {
        if( ( ulPhyMask & ulBitMask ) != 0lu )
 8010f98:	683a      	ldr	r2, [r7, #0]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	4013      	ands	r3, r2
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d00b      	beq.n	8010fba <xPhyFixedValue+0x5e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	4413      	add	r3, r2
 8010fa8:	3318      	adds	r3, #24
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	60bb      	str	r3, [r7, #8]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulValue );
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	693a      	ldr	r2, [r7, #16]
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	68b8      	ldr	r0, [r7, #8]
 8010fb8:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	617b      	str	r3, [r7, #20]
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	005b      	lsls	r3, r3, #1
 8010fc4:	60fb      	str	r3, [r7, #12]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	dbe3      	blt.n	8010f98 <xPhyFixedValue+0x3c>
        }
    }

    return 0;
 8010fd0:	2300      	movs	r3, #0
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3718      	adds	r7, #24
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
	...

08010fdc <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b092      	sub	sp, #72	; 0x48
 8010fe0:	af02      	add	r7, sp, #8
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulPHYLinkStatus, ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d101      	bne.n	8010ff0 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8010fec:	2300      	movs	r3, #0
 8010fee:	e170      	b.n	80112d2 <xPhyStartAutoNegotiation+0x2f6>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ff4:	e020      	b.n	8011038 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8010ff6:	683a      	ldr	r2, [r7, #0]
 8010ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8010ffe:	f003 0301 	and.w	r3, r3, #1
 8011002:	2b00      	cmp	r3, #0
 8011004:	d015      	beq.n	8011032 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011006:	687a      	ldr	r2, [r7, #4]
 8011008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801100a:	4413      	add	r3, r2
 801100c:	3318      	adds	r3, #24
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	623b      	str	r3, [r7, #32]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801101a:	2104      	movs	r1, #4
 801101c:	6a38      	ldr	r0, [r7, #32]
 801101e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801102c:	2100      	movs	r1, #0
 801102e:	6a38      	ldr	r0, [r7, #32]
 8011030:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8011032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011034:	3301      	adds	r3, #1
 8011036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801103c:	461a      	mov	r2, r3
 801103e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011040:	4293      	cmp	r3, r2
 8011042:	d3d8      	bcc.n	8010ff6 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8011044:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011048:	61bb      	str	r3, [r7, #24]
    vTaskSetTimeOutState( &xTimer );
 801104a:	f107 0310 	add.w	r3, r7, #16
 801104e:	4618      	mov	r0, r3
 8011050:	f7f5 f852 	bl	80060f8 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8011054:	2300      	movs	r3, #0
 8011056:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8011058:	2301      	movs	r3, #1
 801105a:	637b      	str	r3, [r7, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801105c:	2300      	movs	r3, #0
 801105e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011060:	e025      	b.n	80110ae <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8011062:	683a      	ldr	r2, [r7, #0]
 8011064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011066:	4013      	ands	r3, r2
 8011068:	2b00      	cmp	r3, #0
 801106a:	d01a      	beq.n	80110a2 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 801106c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011070:	4013      	ands	r3, r2
 8011072:	2b00      	cmp	r3, #0
 8011074:	d115      	bne.n	80110a2 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011076:	687a      	ldr	r2, [r7, #4]
 8011078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801107a:	4413      	add	r3, r2
 801107c:	3318      	adds	r3, #24
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	627b      	str	r3, [r7, #36]	; 0x24

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f107 021c 	add.w	r2, r7, #28
 801108a:	2101      	movs	r1, #1
 801108c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801108e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	f003 0320 	and.w	r3, r3, #32
 8011096:	2b00      	cmp	r3, #0
 8011098:	d003      	beq.n	80110a2 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 801109a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801109e:	4313      	orrs	r3, r2
 80110a0:	63bb      	str	r3, [r7, #56]	; 0x38
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80110a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110a4:	3301      	adds	r3, #1
 80110a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110aa:	005b      	lsls	r3, r3, #1
 80110ac:	637b      	str	r3, [r7, #52]	; 0x34
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110b2:	461a      	mov	r2, r3
 80110b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d3d3      	bcc.n	8011062 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 80110ba:	683a      	ldr	r2, [r7, #0]
 80110bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110be:	429a      	cmp	r2, r3
 80110c0:	d013      	beq.n	80110ea <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80110c2:	f107 0218 	add.w	r2, r7, #24
 80110c6:	f107 0310 	add.w	r3, r7, #16
 80110ca:	4611      	mov	r1, r2
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7f5 f84b 	bl	8006168 <xTaskCheckForTimeOut>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d004      	beq.n	80110e2 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 80110d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80110da:	4880      	ldr	r0, [pc, #512]	; (80112dc <xPhyStartAutoNegotiation+0x300>)
 80110dc:	f7ef fc36 	bl	800094c <vLoggingPrintf>
            break;
 80110e0:	e004      	b.n	80110ec <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80110e2:	2032      	movs	r0, #50	; 0x32
 80110e4:	f7f4 fc8a 	bl	80059fc <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 80110e8:	e7b6      	b.n	8011058 <xPhyStartAutoNegotiation+0x7c>
            break;
 80110ea:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 80110ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f000 80ee 	beq.w	80112d0 <xPhyStartAutoNegotiation+0x2f4>
    {
        ulBitMask = ( uint32_t ) 1U;
 80110f4:	2301      	movs	r3, #1
 80110f6:	637b      	str	r3, [r7, #52]	; 0x34
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80110fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fe:	43db      	mvns	r3, r3
 8011100:	401a      	ands	r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	635a      	str	r2, [r3, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011106:	2300      	movs	r3, #0
 8011108:	63fb      	str	r3, [r7, #60]	; 0x3c
 801110a:	e0da      	b.n	80112c2 <xPhyStartAutoNegotiation+0x2e6>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011110:	4413      	add	r3, r2
 8011112:	3318      	adds	r3, #24
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801111c:	3202      	adds	r2, #2
 801111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011122:	62bb      	str	r3, [r7, #40]	; 0x28

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8011124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011128:	4013      	ands	r3, r2
 801112a:	2b00      	cmp	r3, #0
 801112c:	f000 80c2 	beq.w	80112b4 <xPhyStartAutoNegotiation+0x2d8>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	687a      	ldr	r2, [r7, #4]
 8011136:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011138:	2100      	movs	r1, #0
 801113a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801113c:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	f107 021c 	add.w	r2, r7, #28
 8011146:	2101      	movs	r1, #1
 8011148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801114a:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	f003 0304 	and.w	r3, r3, #4
 8011152:	2b00      	cmp	r3, #0
 8011154:	d00a      	beq.n	801116c <xPhyStartAutoNegotiation+0x190>
            {
                ulPHYLinkStatus |= phyBMSR_LINK_STATUS;
 8011156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011158:	f043 0304 	orr.w	r3, r3, #4
 801115c:	633b      	str	r3, [r7, #48]	; 0x30
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011164:	431a      	orrs	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	635a      	str	r2, [r3, #52]	; 0x34
 801116a:	e003      	b.n	8011174 <xPhyStartAutoNegotiation+0x198>
            }
            else
            {
                ulPHYLinkStatus &= ~( phyBMSR_LINK_STATUS );
 801116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801116e:	f023 0304 	bic.w	r3, r3, #4
 8011172:	633b      	str	r3, [r7, #48]	; 0x30
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8011174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011176:	4a5a      	ldr	r2, [pc, #360]	; (80112e0 <xPhyStartAutoNegotiation+0x304>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d13a      	bne.n	80111f2 <xPhyStartAutoNegotiation+0x216>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	f107 020c 	add.w	r2, r7, #12
 8011184:	211e      	movs	r1, #30
 8011186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011188:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f003 0307 	and.w	r3, r3, #7
 8011190:	3b01      	subs	r3, #1
 8011192:	2b05      	cmp	r3, #5
 8011194:	d813      	bhi.n	80111be <xPhyStartAutoNegotiation+0x1e2>
 8011196:	a201      	add	r2, pc, #4	; (adr r2, 801119c <xPhyStartAutoNegotiation+0x1c0>)
 8011198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801119c:	080111b5 	.word	0x080111b5
 80111a0:	080111bf 	.word	0x080111bf
 80111a4:	080111bf 	.word	0x080111bf
 80111a8:	080111bf 	.word	0x080111bf
 80111ac:	080111b5 	.word	0x080111b5
 80111b0:	080111bf 	.word	0x080111bf
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80111b4:	69fb      	ldr	r3, [r7, #28]
 80111b6:	f043 0302 	orr.w	r3, r3, #2
 80111ba:	61fb      	str	r3, [r7, #28]
                        break;
 80111bc:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f003 0307 	and.w	r3, r3, #7
 80111c4:	3b01      	subs	r3, #1
 80111c6:	2b05      	cmp	r3, #5
 80111c8:	d83c      	bhi.n	8011244 <xPhyStartAutoNegotiation+0x268>
 80111ca:	a201      	add	r2, pc, #4	; (adr r2, 80111d0 <xPhyStartAutoNegotiation+0x1f4>)
 80111cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111d0:	08011245 	.word	0x08011245
 80111d4:	08011245 	.word	0x08011245
 80111d8:	08011245 	.word	0x08011245
 80111dc:	08011245 	.word	0x08011245
 80111e0:	080111e9 	.word	0x080111e9
 80111e4:	080111e9 	.word	0x080111e9
                    case 0x05:
                    case 0x06:
/*	[101] = 10BASE-T full-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        /* Full duplex. */
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	f043 0304 	orr.w	r3, r3, #4
 80111ee:	61fb      	str	r3, [r7, #28]
                        break;
 80111f0:	e028      	b.n	8011244 <xPhyStartAutoNegotiation+0x268>
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 80111f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111f4:	f7ff fc66 	bl	8010ac4 <xHas_1F_PHYSPCS>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d01b      	beq.n	8011236 <xPhyStartAutoNegotiation+0x25a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f107 0208 	add.w	r2, r7, #8
 8011206:	211f      	movs	r1, #31
 8011208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801120a:	4798      	blx	r3
                ulRegValue = 0;
 801120c:	2300      	movs	r3, #0
 801120e:	61fb      	str	r3, [r7, #28]

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	f003 0310 	and.w	r3, r3, #16
 8011216:	2b00      	cmp	r3, #0
 8011218:	d003      	beq.n	8011222 <xPhyStartAutoNegotiation+0x246>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 801121a:	69fb      	ldr	r3, [r7, #28]
 801121c:	f043 0304 	orr.w	r3, r3, #4
 8011220:	61fb      	str	r3, [r7, #28]
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	f003 030c 	and.w	r3, r3, #12
 8011228:	2b04      	cmp	r3, #4
 801122a:	d10b      	bne.n	8011244 <xPhyStartAutoNegotiation+0x268>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	f043 0302 	orr.w	r3, r3, #2
 8011232:	61fb      	str	r3, [r7, #28]
 8011234:	e006      	b.n	8011244 <xPhyStartAutoNegotiation+0x268>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f107 021c 	add.w	r2, r7, #28
 801123e:	2110      	movs	r1, #16
 8011240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011242:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8011244:	69f9      	ldr	r1, [r7, #28]
 8011246:	69fb      	ldr	r3, [r7, #28]
 8011248:	f003 0304 	and.w	r3, r3, #4
 801124c:	2b00      	cmp	r3, #0
 801124e:	d001      	beq.n	8011254 <xPhyStartAutoNegotiation+0x278>
 8011250:	4a24      	ldr	r2, [pc, #144]	; (80112e4 <xPhyStartAutoNegotiation+0x308>)
 8011252:	e000      	b.n	8011256 <xPhyStartAutoNegotiation+0x27a>
 8011254:	4a24      	ldr	r2, [pc, #144]	; (80112e8 <xPhyStartAutoNegotiation+0x30c>)
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	f003 0302 	and.w	r3, r3, #2
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <xPhyStartAutoNegotiation+0x288>
 8011260:	200a      	movs	r0, #10
 8011262:	e000      	b.n	8011266 <xPhyStartAutoNegotiation+0x28a>
 8011264:	2064      	movs	r0, #100	; 0x64
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	f043 0304 	orr.w	r3, r3, #4
 801126c:	633b      	str	r3, [r7, #48]	; 0x30
 801126e:	4b1f      	ldr	r3, [pc, #124]	; (80112ec <xPhyStartAutoNegotiation+0x310>)
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	4603      	mov	r3, r0
 8011274:	481e      	ldr	r0, [pc, #120]	; (80112f0 <xPhyStartAutoNegotiation+0x314>)
 8011276:	f7ef fb69 	bl	800094c <vLoggingPrintf>
                               ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( ulPHYLinkStatus |= phyBMSR_LINK_STATUS ) != 0 ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 801127a:	69fb      	ldr	r3, [r7, #28]
 801127c:	f003 0304 	and.w	r3, r3, #4
 8011280:	2b00      	cmp	r3, #0
 8011282:	d004      	beq.n	801128e <xPhyStartAutoNegotiation+0x2b2>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2202      	movs	r2, #2
 8011288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801128c:	e003      	b.n	8011296 <xPhyStartAutoNegotiation+0x2ba>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2201      	movs	r2, #1
 8011292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8011296:	69fb      	ldr	r3, [r7, #28]
 8011298:	f003 0302 	and.w	r3, r3, #2
 801129c:	2b00      	cmp	r3, #0
 801129e:	d004      	beq.n	80112aa <xPhyStartAutoNegotiation+0x2ce>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2201      	movs	r2, #1
 80112a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80112a8:	e005      	b.n	80112b6 <xPhyStartAutoNegotiation+0x2da>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2202      	movs	r2, #2
 80112ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80112b2:	e000      	b.n	80112b6 <xPhyStartAutoNegotiation+0x2da>
                continue;
 80112b4:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80112b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112b8:	3301      	adds	r3, #1
 80112ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112be:	005b      	lsls	r3, r3, #1
 80112c0:	637b      	str	r3, [r7, #52]	; 0x34
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c6:	461a      	mov	r2, r3
 80112c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ca:	4293      	cmp	r3, r2
 80112cc:	f4ff af1e 	bcc.w	801110c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 80112d0:	2300      	movs	r3, #0
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3740      	adds	r7, #64	; 0x40
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	08015290 	.word	0x08015290
 80112e0:	00221560 	.word	0x00221560
 80112e4:	080152d4 	.word	0x080152d4
 80112e8:	080152dc 	.word	0x080152dc
 80112ec:	080152e4 	.word	0x080152e4
 80112f0:	080152ec 	.word	0x080152ec

080112f4 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b088      	sub	sp, #32
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 80112fe:	2301      	movs	r3, #1
 8011300:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8011302:	2300      	movs	r3, #0
 8011304:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	dd2b      	ble.n	8011364 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	331c      	adds	r3, #28
 8011310:	4618      	mov	r0, r3
 8011312:	f7f4 fef1 	bl	80060f8 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f643 2298 	movw	r2, #15000	; 0x3a98
 801131c:	625a      	str	r2, [r3, #36]	; 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801131e:	2300      	movs	r3, #0
 8011320:	61bb      	str	r3, [r7, #24]
 8011322:	e019      	b.n	8011358 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011328:	69fb      	ldr	r3, [r7, #28]
 801132a:	4013      	ands	r3, r2
 801132c:	2b00      	cmp	r3, #0
 801132e:	d10d      	bne.n	801134c <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	431a      	orrs	r2, r3
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	635a      	str	r2, [r3, #52]	; 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011340:	4619      	mov	r1, r3
 8011342:	4842      	ldr	r0, [pc, #264]	; (801144c <xPhyCheckLinkStatus+0x158>)
 8011344:	f7ef fb02 	bl	800094c <vLoggingPrintf>
                xNeedCheck = pdTRUE;
 8011348:	2301      	movs	r3, #1
 801134a:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	3301      	adds	r3, #1
 8011350:	61bb      	str	r3, [r7, #24]
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	005b      	lsls	r3, r3, #1
 8011356:	61fb      	str	r3, [r7, #28]
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801135c:	69ba      	ldr	r2, [r7, #24]
 801135e:	429a      	cmp	r2, r3
 8011360:	dbe0      	blt.n	8011324 <xPhyCheckLinkStatus+0x30>
 8011362:	e06e      	b.n	8011442 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f103 021c 	add.w	r2, r3, #28
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	3324      	adds	r3, #36	; 0x24
 801136e:	4619      	mov	r1, r3
 8011370:	4610      	mov	r0, r2
 8011372:	f7f4 fef9 	bl	8006168 <xTaskCheckForTimeOut>
 8011376:	4603      	mov	r3, r0
 8011378:	2b00      	cmp	r3, #0
 801137a:	d062      	beq.n	8011442 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801137c:	2300      	movs	r3, #0
 801137e:	61bb      	str	r3, [r7, #24]
 8011380:	e045      	b.n	801140e <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	69bb      	ldr	r3, [r7, #24]
 8011386:	4413      	add	r3, r2
 8011388:	3318      	adds	r3, #24
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	f107 020c 	add.w	r2, r7, #12
 8011396:	2101      	movs	r1, #1
 8011398:	6938      	ldr	r0, [r7, #16]
 801139a:	4798      	blx	r3
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d12f      	bne.n	8011402 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113a6:	69fb      	ldr	r3, [r7, #28]
 80113a8:	4013      	ands	r3, r2
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	bf14      	ite	ne
 80113ae:	2301      	movne	r3, #1
 80113b0:	2300      	moveq	r3, #0
 80113b2:	b2da      	uxtb	r2, r3
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	f003 0304 	and.w	r3, r3, #4
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	bf14      	ite	ne
 80113be:	2301      	movne	r3, #1
 80113c0:	2300      	moveq	r3, #0
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	4053      	eors	r3, r2
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d01a      	beq.n	8011402 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	f003 0304 	and.w	r3, r3, #4
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d006      	beq.n	80113e4 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113da:	69fb      	ldr	r3, [r7, #28]
 80113dc:	431a      	orrs	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	635a      	str	r2, [r3, #52]	; 0x34
 80113e2:	e006      	b.n	80113f2 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	43db      	mvns	r3, r3
 80113ec:	401a      	ands	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	635a      	str	r2, [r3, #52]	; 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113f6:	4619      	mov	r1, r3
 80113f8:	4814      	ldr	r0, [pc, #80]	; (801144c <xPhyCheckLinkStatus+0x158>)
 80113fa:	f7ef faa7 	bl	800094c <vLoggingPrintf>
                    xNeedCheck = pdTRUE;
 80113fe:	2301      	movs	r3, #1
 8011400:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	3301      	adds	r3, #1
 8011406:	61bb      	str	r3, [r7, #24]
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	005b      	lsls	r3, r3, #1
 801140c:	61fb      	str	r3, [r7, #28]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011412:	69ba      	ldr	r2, [r7, #24]
 8011414:	429a      	cmp	r2, r3
 8011416:	dbb4      	blt.n	8011382 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	331c      	adds	r3, #28
 801141c:	4618      	mov	r0, r3
 801141e:	f7f4 fe6b 	bl	80060f8 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011426:	69fb      	ldr	r3, [r7, #28]
 8011428:	085b      	lsrs	r3, r3, #1
 801142a:	4013      	ands	r3, r2
 801142c:	2b00      	cmp	r3, #0
 801142e:	d004      	beq.n	801143a <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f643 2298 	movw	r2, #15000	; 0x3a98
 8011436:	625a      	str	r2, [r3, #36]	; 0x24
 8011438:	e003      	b.n	8011442 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011440:	625a      	str	r2, [r3, #36]	; 0x24
        }
    }

    return xNeedCheck;
 8011442:	697b      	ldr	r3, [r7, #20]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3720      	adds	r7, #32
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	08015320 	.word	0x08015320

08011450 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 8011456:	4b34      	ldr	r3, [pc, #208]	; (8011528 <xNetworkBuffersInitialise+0xd8>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d156      	bne.n	801150c <xNetworkBuffersInitialise+0xbc>
    {
        xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 801145e:	213c      	movs	r1, #60	; 0x3c
 8011460:	203c      	movs	r0, #60	; 0x3c
 8011462:	f7f3 fb8b 	bl	8004b7c <xQueueCreateCountingSemaphore>
 8011466:	4602      	mov	r2, r0
 8011468:	4b2f      	ldr	r3, [pc, #188]	; (8011528 <xNetworkBuffersInitialise+0xd8>)
 801146a:	601a      	str	r2, [r3, #0]
        configASSERT( xNetworkBufferSemaphore != NULL );
 801146c:	4b2e      	ldr	r3, [pc, #184]	; (8011528 <xNetworkBuffersInitialise+0xd8>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d103      	bne.n	801147c <xNetworkBuffersInitialise+0x2c>
 8011474:	492d      	ldr	r1, [pc, #180]	; (801152c <xNetworkBuffersInitialise+0xdc>)
 8011476:	206a      	movs	r0, #106	; 0x6a
 8011478:	f7ef fb9e 	bl	8000bb8 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 801147c:	4b2a      	ldr	r3, [pc, #168]	; (8011528 <xNetworkBuffersInitialise+0xd8>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d043      	beq.n	801150c <xNetworkBuffersInitialise+0xbc>
        {
            #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 8011484:	4b28      	ldr	r3, [pc, #160]	; (8011528 <xNetworkBuffersInitialise+0xd8>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	4929      	ldr	r1, [pc, #164]	; (8011530 <xNetworkBuffersInitialise+0xe0>)
 801148a:	4618      	mov	r0, r3
 801148c:	f7f4 f880 	bl	8005590 <vQueueAddToRegistry>
                    vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
                    vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
                }
            #endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

            vListInitialise( &xFreeBuffersList );
 8011490:	4828      	ldr	r0, [pc, #160]	; (8011534 <xNetworkBuffersInitialise+0xe4>)
 8011492:	f7f3 f9ef 	bl	8004874 <vListInitialise>

            /* Initialise all the network buffers.  No storage is allocated to
             * the buffers yet. */
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8011496:	2300      	movs	r3, #0
 8011498:	603b      	str	r3, [r7, #0]
 801149a:	e031      	b.n	8011500 <xNetworkBuffersInitialise+0xb0>
            {
                /* Initialise and set the owner of the buffer list items. */
                xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 801149c:	4926      	ldr	r1, [pc, #152]	; (8011538 <xNetworkBuffersInitialise+0xe8>)
 801149e:	683a      	ldr	r2, [r7, #0]
 80114a0:	4613      	mov	r3, r2
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	4413      	add	r3, r2
 80114a6:	00db      	lsls	r3, r3, #3
 80114a8:	440b      	add	r3, r1
 80114aa:	3318      	adds	r3, #24
 80114ac:	2200      	movs	r2, #0
 80114ae:	601a      	str	r2, [r3, #0]
                vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80114b0:	683a      	ldr	r2, [r7, #0]
 80114b2:	4613      	mov	r3, r2
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	4413      	add	r3, r2
 80114b8:	00db      	lsls	r3, r3, #3
 80114ba:	4a1f      	ldr	r2, [pc, #124]	; (8011538 <xNetworkBuffersInitialise+0xe8>)
 80114bc:	4413      	add	r3, r2
 80114be:	4618      	mov	r0, r3
 80114c0:	f7f3 f9f8 	bl	80048b4 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	4613      	mov	r3, r2
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	4413      	add	r3, r2
 80114cc:	00db      	lsls	r3, r3, #3
 80114ce:	4a1a      	ldr	r2, [pc, #104]	; (8011538 <xNetworkBuffersInitialise+0xe8>)
 80114d0:	1899      	adds	r1, r3, r2
 80114d2:	4819      	ldr	r0, [pc, #100]	; (8011538 <xNetworkBuffersInitialise+0xe8>)
 80114d4:	683a      	ldr	r2, [r7, #0]
 80114d6:	4613      	mov	r3, r2
 80114d8:	009b      	lsls	r3, r3, #2
 80114da:	4413      	add	r3, r2
 80114dc:	00db      	lsls	r3, r3, #3
 80114de:	4403      	add	r3, r0
 80114e0:	330c      	adds	r3, #12
 80114e2:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80114e4:	683a      	ldr	r2, [r7, #0]
 80114e6:	4613      	mov	r3, r2
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	4413      	add	r3, r2
 80114ec:	00db      	lsls	r3, r3, #3
 80114ee:	4a12      	ldr	r2, [pc, #72]	; (8011538 <xNetworkBuffersInitialise+0xe8>)
 80114f0:	4413      	add	r3, r2
 80114f2:	4619      	mov	r1, r3
 80114f4:	480f      	ldr	r0, [pc, #60]	; (8011534 <xNetworkBuffersInitialise+0xe4>)
 80114f6:	f7f3 fa0e 	bl	8004916 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	3301      	adds	r3, #1
 80114fe:	603b      	str	r3, [r7, #0]
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	2b3b      	cmp	r3, #59	; 0x3b
 8011504:	d9ca      	bls.n	801149c <xNetworkBuffersInitialise+0x4c>
            }

            uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8011506:	4b0d      	ldr	r3, [pc, #52]	; (801153c <xNetworkBuffersInitialise+0xec>)
 8011508:	223c      	movs	r2, #60	; 0x3c
 801150a:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 801150c:	4b06      	ldr	r3, [pc, #24]	; (8011528 <xNetworkBuffersInitialise+0xd8>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d102      	bne.n	801151a <xNetworkBuffersInitialise+0xca>
    {
        xReturn = pdFAIL;
 8011514:	2300      	movs	r3, #0
 8011516:	607b      	str	r3, [r7, #4]
 8011518:	e001      	b.n	801151e <xNetworkBuffersInitialise+0xce>
    }
    else
    {
        xReturn = pdPASS;
 801151a:	2301      	movs	r3, #1
 801151c:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 801151e:	687b      	ldr	r3, [r7, #4]
}
 8011520:	4618      	mov	r0, r3
 8011522:	3708      	adds	r7, #8
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}
 8011528:	2000c728 	.word	0x2000c728
 801152c:	08015348 	.word	0x08015348
 8011530:	08015398 	.word	0x08015398
 8011534:	2000bdb0 	.word	0x2000bdb0
 8011538:	2000bdc8 	.word	0x2000bdc8
 801153c:	2000bdc4 	.word	0x2000bdc4

08011540 <vReleaseNetworkBuffer>:
    return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t * pucEthernetBuffer )
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
    /* There is space before the Ethernet buffer in which a pointer to the
     * network buffer that references this Ethernet buffer is stored.  Remove the
     * space before freeing the buffer. */
    if( pucEthernetBuffer != NULL )
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d005      	beq.n	801155a <vReleaseNetworkBuffer+0x1a>
    {
        pucEthernetBuffer -= ipBUFFER_PADDING;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	3b0a      	subs	r3, #10
 8011552:	607b      	str	r3, [r7, #4]
        vPortFree( ( void * ) pucEthernetBuffer );
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f7f5 fe19 	bl	800718c <vPortFree>
    }
}
 801155a:	bf00      	nop
 801155c:	3708      	adds	r7, #8
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
	...

08011564 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 801156e:	2300      	movs	r3, #0
 8011570:	60fb      	str	r3, [r7, #12]
    size_t uxCount;

    if( xNetworkBufferSemaphore != NULL )
 8011572:	4b35      	ldr	r3, [pc, #212]	; (8011648 <pxGetNetworkBufferWithDescriptor+0xe4>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d061      	beq.n	801163e <pxGetNetworkBufferWithDescriptor+0xda>
    {
        if( ( xRequestedSizeBytes != 0U ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d004      	beq.n	801158a <pxGetNetworkBufferWithDescriptor+0x26>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2b45      	cmp	r3, #69	; 0x45
 8011584:	d801      	bhi.n	801158a <pxGetNetworkBufferWithDescriptor+0x26>
        {
            /* ARP packets can replace application packets, so the storage must be
             * at least large enough to hold an ARP. */
            xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 8011586:	2346      	movs	r3, #70	; 0x46
 8011588:	607b      	str	r3, [r7, #4]
        }

        /* Add 2 bytes to xRequestedSizeBytes and round up xRequestedSizeBytes
         * to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
        xRequestedSizeBytes += 2U;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	3302      	adds	r3, #2
 801158e:	607b      	str	r3, [r7, #4]

        if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1U ) ) != 0U )
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f003 0303 	and.w	r3, r3, #3
 8011596:	2b00      	cmp	r3, #0
 8011598:	d004      	beq.n	80115a4 <pxGetNetworkBufferWithDescriptor+0x40>
        {
            xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1U ) ) + 1U;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f043 0303 	orr.w	r3, r3, #3
 80115a0:	3301      	adds	r3, #1
 80115a2:	607b      	str	r3, [r7, #4]
        }

        /* If there is a semaphore available, there is a network buffer available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 80115a4:	4b28      	ldr	r3, [pc, #160]	; (8011648 <pxGetNetworkBufferWithDescriptor+0xe4>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	6839      	ldr	r1, [r7, #0]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7f3 fd90 	bl	80050d0 <xQueueSemaphoreTake>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b01      	cmp	r3, #1
 80115b4:	d143      	bne.n	801163e <pxGetNetworkBufferWithDescriptor+0xda>
        {
            /* Protect the structure as it is accessed from tasks and interrupts. */
            taskENTER_CRITICAL();
 80115b6:	f7f6 f807 	bl	80075c8 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 80115ba:	4b24      	ldr	r3, [pc, #144]	; (801164c <pxGetNetworkBufferWithDescriptor+0xe8>)
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	60fb      	str	r3, [r7, #12]
                ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7f3 f9df 	bl	8004988 <uxListRemove>
            }
            taskEXIT_CRITICAL();
 80115ca:	f7f6 f829 	bl	8007620 <vPortExitCritical>

            /* Reading UBaseType_t, no critical section needed. */
            uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80115ce:	4b1f      	ldr	r3, [pc, #124]	; (801164c <pxGetNetworkBufferWithDescriptor+0xe8>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	60bb      	str	r3, [r7, #8]

            if( uxMinimumFreeNetworkBuffers > uxCount )
 80115d4:	4b1e      	ldr	r3, [pc, #120]	; (8011650 <pxGetNetworkBufferWithDescriptor+0xec>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	68ba      	ldr	r2, [r7, #8]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d202      	bcs.n	80115e4 <pxGetNetworkBufferWithDescriptor+0x80>
            {
                uxMinimumFreeNetworkBuffers = uxCount;
 80115de:	4a1c      	ldr	r2, [pc, #112]	; (8011650 <pxGetNetworkBufferWithDescriptor+0xec>)
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	6013      	str	r3, [r2, #0]
            }

            /* Allocate storage of exactly the requested size to the buffer. */
            configASSERT( pxReturn->pucEthernetBuffer == NULL );
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	699b      	ldr	r3, [r3, #24]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d003      	beq.n	80115f4 <pxGetNetworkBufferWithDescriptor+0x90>
 80115ec:	4919      	ldr	r1, [pc, #100]	; (8011654 <pxGetNetworkBufferWithDescriptor+0xf0>)
 80115ee:	20fe      	movs	r0, #254	; 0xfe
 80115f0:	f7ef fae2 	bl	8000bb8 <vAssertCalled>

            if( xRequestedSizeBytes > 0U )
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d021      	beq.n	801163e <pxGetNetworkBufferWithDescriptor+0xda>
            {
                /* Extra space is obtained so a pointer to the network buffer can
                 * be stored at the beginning of the buffer. */
                pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	330a      	adds	r3, #10
 80115fe:	4618      	mov	r0, r3
 8011600:	f7f5 fd0a 	bl	8007018 <pvPortMalloc>
 8011604:	4602      	mov	r2, r0
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	619a      	str	r2, [r3, #24]

                if( pxReturn->pucEthernetBuffer == NULL )
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	699b      	ldr	r3, [r3, #24]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d105      	bne.n	801161e <pxGetNetworkBufferWithDescriptor+0xba>
                {
                    /* The attempt to allocate storage for the buffer payload failed,
                     * so the network buffer structure cannot be used and must be
                     * released. */
                    vReleaseNetworkBufferAndDescriptor( pxReturn );
 8011612:	68f8      	ldr	r0, [r7, #12]
 8011614:	f000 f820 	bl	8011658 <vReleaseNetworkBufferAndDescriptor>
                    pxReturn = NULL;
 8011618:	2300      	movs	r3, #0
 801161a:	60fb      	str	r3, [r7, #12]
 801161c:	e00f      	b.n	801163e <pxGetNetworkBufferWithDescriptor+0xda>
                {
                    /* Store a pointer to the network buffer structure in the
                     * buffer storage area, then move the buffer pointer on past the
                     * stored pointer so the pointer value is not overwritten by the
                     * application when the buffer is used. */
                    *( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	699b      	ldr	r3, [r3, #24]
 8011622:	68fa      	ldr	r2, [r7, #12]
 8011624:	601a      	str	r2, [r3, #0]
                    pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	699b      	ldr	r3, [r3, #24]
 801162a:	f103 020a 	add.w	r2, r3, #10
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	619a      	str	r2, [r3, #24]

                    /* Store the actual size of the allocated buffer, which may be
                     * greater than the original requested size. */
                    pxReturn->xDataLength = xRequestedSizeBytes;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	61da      	str	r2, [r3, #28]

                    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                        {
                            /* make sure the buffer is not linked */
                            pxReturn->pxNextBuffer = NULL;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2200      	movs	r2, #0
 801163c:	625a      	str	r2, [r3, #36]	; 0x24
    {
        /* No action. */
        iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
    }

    return pxReturn;
 801163e:	68fb      	ldr	r3, [r7, #12]
}
 8011640:	4618      	mov	r0, r3
 8011642:	3710      	adds	r7, #16
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	2000c728 	.word	0x2000c728
 801164c:	2000bdb0 	.word	0x2000bdb0
 8011650:	2000bdc4 	.word	0x2000bdc4
 8011654:	08015348 	.word	0x08015348

08011658 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
    /* Ensure the buffer is returned to the list of free buffers before the
    * counting semaphore is 'given' to say a buffer is available.  Release the
    * storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
    * IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
    * MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
    vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	699b      	ldr	r3, [r3, #24]
 8011664:	4618      	mov	r0, r3
 8011666:	f7ff ff6b 	bl	8011540 <vReleaseNetworkBuffer>
    pxNetworkBuffer->pucEthernetBuffer = NULL;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	619a      	str	r2, [r3, #24]

    taskENTER_CRITICAL();
 8011670:	f7f5 ffaa 	bl	80075c8 <vPortEnterCritical>
    {
        xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	4a0f      	ldr	r2, [pc, #60]	; (80116b8 <vReleaseNetworkBufferAndDescriptor+0x60>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d101      	bne.n	8011682 <vReleaseNetworkBufferAndDescriptor+0x2a>
 801167e:	2301      	movs	r3, #1
 8011680:	e000      	b.n	8011684 <vReleaseNetworkBufferAndDescriptor+0x2c>
 8011682:	2300      	movs	r3, #0
 8011684:	60fb      	str	r3, [r7, #12]

        if( xListItemAlreadyInFreeList == pdFALSE )
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d104      	bne.n	8011696 <vReleaseNetworkBufferAndDescriptor+0x3e>
        {
            vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	4619      	mov	r1, r3
 8011690:	4809      	ldr	r0, [pc, #36]	; (80116b8 <vReleaseNetworkBufferAndDescriptor+0x60>)
 8011692:	f7f3 f91c 	bl	80048ce <vListInsertEnd>
        }
    }
    taskEXIT_CRITICAL();
 8011696:	f7f5 ffc3 	bl	8007620 <vPortExitCritical>

    /*
     * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
     * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
     */
    if( xListItemAlreadyInFreeList == pdFALSE )
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d106      	bne.n	80116ae <vReleaseNetworkBufferAndDescriptor+0x56>
    {
        if( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 80116a0:	4b06      	ldr	r3, [pc, #24]	; (80116bc <vReleaseNetworkBufferAndDescriptor+0x64>)
 80116a2:	6818      	ldr	r0, [r3, #0]
 80116a4:	2300      	movs	r3, #0
 80116a6:	2200      	movs	r2, #0
 80116a8:	2100      	movs	r1, #0
 80116aa:	f7f3 fa91 	bl	8004bd0 <xQueueGenericSend>
    else
    {
        /* No action. */
        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 80116ae:	bf00      	nop
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	2000bdb0 	.word	0x2000bdb0
 80116bc:	2000c728 	.word	0x2000c728

080116c0 <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 80116c0:	b480      	push	{r7}
 80116c2:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80116c4:	4b03      	ldr	r3, [pc, #12]	; (80116d4 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 80116c6:	681b      	ldr	r3, [r3, #0]
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop
 80116d4:	2000bdb0 	.word	0x2000bdb0

080116d8 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 80116d8:	b480      	push	{r7}
 80116da:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 80116dc:	4b03      	ldr	r3, [pc, #12]	; (80116ec <uxGetMinimumFreeNetworkBuffers+0x14>)
 80116de:	681b      	ldr	r3, [r3, #0]
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	2000bdc4 	.word	0x2000bdc4

080116f0 <__errno>:
 80116f0:	4b01      	ldr	r3, [pc, #4]	; (80116f8 <__errno+0x8>)
 80116f2:	6818      	ldr	r0, [r3, #0]
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop
 80116f8:	20000034 	.word	0x20000034

080116fc <__libc_init_array>:
 80116fc:	b570      	push	{r4, r5, r6, lr}
 80116fe:	4e0d      	ldr	r6, [pc, #52]	; (8011734 <__libc_init_array+0x38>)
 8011700:	4c0d      	ldr	r4, [pc, #52]	; (8011738 <__libc_init_array+0x3c>)
 8011702:	1ba4      	subs	r4, r4, r6
 8011704:	10a4      	asrs	r4, r4, #2
 8011706:	2500      	movs	r5, #0
 8011708:	42a5      	cmp	r5, r4
 801170a:	d109      	bne.n	8011720 <__libc_init_array+0x24>
 801170c:	4e0b      	ldr	r6, [pc, #44]	; (801173c <__libc_init_array+0x40>)
 801170e:	4c0c      	ldr	r4, [pc, #48]	; (8011740 <__libc_init_array+0x44>)
 8011710:	f002 f894 	bl	801383c <_init>
 8011714:	1ba4      	subs	r4, r4, r6
 8011716:	10a4      	asrs	r4, r4, #2
 8011718:	2500      	movs	r5, #0
 801171a:	42a5      	cmp	r5, r4
 801171c:	d105      	bne.n	801172a <__libc_init_array+0x2e>
 801171e:	bd70      	pop	{r4, r5, r6, pc}
 8011720:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011724:	4798      	blx	r3
 8011726:	3501      	adds	r5, #1
 8011728:	e7ee      	b.n	8011708 <__libc_init_array+0xc>
 801172a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801172e:	4798      	blx	r3
 8011730:	3501      	adds	r5, #1
 8011732:	e7f2      	b.n	801171a <__libc_init_array+0x1e>
 8011734:	08015720 	.word	0x08015720
 8011738:	08015720 	.word	0x08015720
 801173c:	08015720 	.word	0x08015720
 8011740:	08015724 	.word	0x08015724

08011744 <memcmp>:
 8011744:	b530      	push	{r4, r5, lr}
 8011746:	2400      	movs	r4, #0
 8011748:	42a2      	cmp	r2, r4
 801174a:	d101      	bne.n	8011750 <memcmp+0xc>
 801174c:	2000      	movs	r0, #0
 801174e:	e007      	b.n	8011760 <memcmp+0x1c>
 8011750:	5d03      	ldrb	r3, [r0, r4]
 8011752:	3401      	adds	r4, #1
 8011754:	190d      	adds	r5, r1, r4
 8011756:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801175a:	42ab      	cmp	r3, r5
 801175c:	d0f4      	beq.n	8011748 <memcmp+0x4>
 801175e:	1b58      	subs	r0, r3, r5
 8011760:	bd30      	pop	{r4, r5, pc}

08011762 <memcpy>:
 8011762:	b510      	push	{r4, lr}
 8011764:	1e43      	subs	r3, r0, #1
 8011766:	440a      	add	r2, r1
 8011768:	4291      	cmp	r1, r2
 801176a:	d100      	bne.n	801176e <memcpy+0xc>
 801176c:	bd10      	pop	{r4, pc}
 801176e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011776:	e7f7      	b.n	8011768 <memcpy+0x6>

08011778 <memmove>:
 8011778:	4288      	cmp	r0, r1
 801177a:	b510      	push	{r4, lr}
 801177c:	eb01 0302 	add.w	r3, r1, r2
 8011780:	d807      	bhi.n	8011792 <memmove+0x1a>
 8011782:	1e42      	subs	r2, r0, #1
 8011784:	4299      	cmp	r1, r3
 8011786:	d00a      	beq.n	801179e <memmove+0x26>
 8011788:	f811 4b01 	ldrb.w	r4, [r1], #1
 801178c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011790:	e7f8      	b.n	8011784 <memmove+0xc>
 8011792:	4283      	cmp	r3, r0
 8011794:	d9f5      	bls.n	8011782 <memmove+0xa>
 8011796:	1881      	adds	r1, r0, r2
 8011798:	1ad2      	subs	r2, r2, r3
 801179a:	42d3      	cmn	r3, r2
 801179c:	d100      	bne.n	80117a0 <memmove+0x28>
 801179e:	bd10      	pop	{r4, pc}
 80117a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80117a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80117a8:	e7f7      	b.n	801179a <memmove+0x22>

080117aa <memset>:
 80117aa:	4402      	add	r2, r0
 80117ac:	4603      	mov	r3, r0
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d100      	bne.n	80117b4 <memset+0xa>
 80117b2:	4770      	bx	lr
 80117b4:	f803 1b01 	strb.w	r1, [r3], #1
 80117b8:	e7f9      	b.n	80117ae <memset+0x4>
	...

080117bc <_malloc_r>:
 80117bc:	b570      	push	{r4, r5, r6, lr}
 80117be:	1ccd      	adds	r5, r1, #3
 80117c0:	f025 0503 	bic.w	r5, r5, #3
 80117c4:	3508      	adds	r5, #8
 80117c6:	2d0c      	cmp	r5, #12
 80117c8:	bf38      	it	cc
 80117ca:	250c      	movcc	r5, #12
 80117cc:	2d00      	cmp	r5, #0
 80117ce:	4606      	mov	r6, r0
 80117d0:	db01      	blt.n	80117d6 <_malloc_r+0x1a>
 80117d2:	42a9      	cmp	r1, r5
 80117d4:	d903      	bls.n	80117de <_malloc_r+0x22>
 80117d6:	230c      	movs	r3, #12
 80117d8:	6033      	str	r3, [r6, #0]
 80117da:	2000      	movs	r0, #0
 80117dc:	bd70      	pop	{r4, r5, r6, pc}
 80117de:	f001 fb65 	bl	8012eac <__malloc_lock>
 80117e2:	4a21      	ldr	r2, [pc, #132]	; (8011868 <_malloc_r+0xac>)
 80117e4:	6814      	ldr	r4, [r2, #0]
 80117e6:	4621      	mov	r1, r4
 80117e8:	b991      	cbnz	r1, 8011810 <_malloc_r+0x54>
 80117ea:	4c20      	ldr	r4, [pc, #128]	; (801186c <_malloc_r+0xb0>)
 80117ec:	6823      	ldr	r3, [r4, #0]
 80117ee:	b91b      	cbnz	r3, 80117f8 <_malloc_r+0x3c>
 80117f0:	4630      	mov	r0, r6
 80117f2:	f000 fce3 	bl	80121bc <_sbrk_r>
 80117f6:	6020      	str	r0, [r4, #0]
 80117f8:	4629      	mov	r1, r5
 80117fa:	4630      	mov	r0, r6
 80117fc:	f000 fcde 	bl	80121bc <_sbrk_r>
 8011800:	1c43      	adds	r3, r0, #1
 8011802:	d124      	bne.n	801184e <_malloc_r+0x92>
 8011804:	230c      	movs	r3, #12
 8011806:	6033      	str	r3, [r6, #0]
 8011808:	4630      	mov	r0, r6
 801180a:	f001 fb50 	bl	8012eae <__malloc_unlock>
 801180e:	e7e4      	b.n	80117da <_malloc_r+0x1e>
 8011810:	680b      	ldr	r3, [r1, #0]
 8011812:	1b5b      	subs	r3, r3, r5
 8011814:	d418      	bmi.n	8011848 <_malloc_r+0x8c>
 8011816:	2b0b      	cmp	r3, #11
 8011818:	d90f      	bls.n	801183a <_malloc_r+0x7e>
 801181a:	600b      	str	r3, [r1, #0]
 801181c:	50cd      	str	r5, [r1, r3]
 801181e:	18cc      	adds	r4, r1, r3
 8011820:	4630      	mov	r0, r6
 8011822:	f001 fb44 	bl	8012eae <__malloc_unlock>
 8011826:	f104 000b 	add.w	r0, r4, #11
 801182a:	1d23      	adds	r3, r4, #4
 801182c:	f020 0007 	bic.w	r0, r0, #7
 8011830:	1ac3      	subs	r3, r0, r3
 8011832:	d0d3      	beq.n	80117dc <_malloc_r+0x20>
 8011834:	425a      	negs	r2, r3
 8011836:	50e2      	str	r2, [r4, r3]
 8011838:	e7d0      	b.n	80117dc <_malloc_r+0x20>
 801183a:	428c      	cmp	r4, r1
 801183c:	684b      	ldr	r3, [r1, #4]
 801183e:	bf16      	itet	ne
 8011840:	6063      	strne	r3, [r4, #4]
 8011842:	6013      	streq	r3, [r2, #0]
 8011844:	460c      	movne	r4, r1
 8011846:	e7eb      	b.n	8011820 <_malloc_r+0x64>
 8011848:	460c      	mov	r4, r1
 801184a:	6849      	ldr	r1, [r1, #4]
 801184c:	e7cc      	b.n	80117e8 <_malloc_r+0x2c>
 801184e:	1cc4      	adds	r4, r0, #3
 8011850:	f024 0403 	bic.w	r4, r4, #3
 8011854:	42a0      	cmp	r0, r4
 8011856:	d005      	beq.n	8011864 <_malloc_r+0xa8>
 8011858:	1a21      	subs	r1, r4, r0
 801185a:	4630      	mov	r0, r6
 801185c:	f000 fcae 	bl	80121bc <_sbrk_r>
 8011860:	3001      	adds	r0, #1
 8011862:	d0cf      	beq.n	8011804 <_malloc_r+0x48>
 8011864:	6025      	str	r5, [r4, #0]
 8011866:	e7db      	b.n	8011820 <_malloc_r+0x64>
 8011868:	2000c72c 	.word	0x2000c72c
 801186c:	2000c730 	.word	0x2000c730

08011870 <__cvt>:
 8011870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011872:	ed2d 8b02 	vpush	{d8}
 8011876:	eeb0 8b40 	vmov.f64	d8, d0
 801187a:	b085      	sub	sp, #20
 801187c:	4617      	mov	r7, r2
 801187e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011880:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011882:	ee18 2a90 	vmov	r2, s17
 8011886:	f025 0520 	bic.w	r5, r5, #32
 801188a:	2a00      	cmp	r2, #0
 801188c:	bfb6      	itet	lt
 801188e:	222d      	movlt	r2, #45	; 0x2d
 8011890:	2200      	movge	r2, #0
 8011892:	eeb1 8b40 	vneglt.f64	d8, d0
 8011896:	2d46      	cmp	r5, #70	; 0x46
 8011898:	460c      	mov	r4, r1
 801189a:	701a      	strb	r2, [r3, #0]
 801189c:	d004      	beq.n	80118a8 <__cvt+0x38>
 801189e:	2d45      	cmp	r5, #69	; 0x45
 80118a0:	d100      	bne.n	80118a4 <__cvt+0x34>
 80118a2:	3401      	adds	r4, #1
 80118a4:	2102      	movs	r1, #2
 80118a6:	e000      	b.n	80118aa <__cvt+0x3a>
 80118a8:	2103      	movs	r1, #3
 80118aa:	ab03      	add	r3, sp, #12
 80118ac:	9301      	str	r3, [sp, #4]
 80118ae:	ab02      	add	r3, sp, #8
 80118b0:	9300      	str	r3, [sp, #0]
 80118b2:	4622      	mov	r2, r4
 80118b4:	4633      	mov	r3, r6
 80118b6:	eeb0 0b48 	vmov.f64	d0, d8
 80118ba:	f000 fd75 	bl	80123a8 <_dtoa_r>
 80118be:	2d47      	cmp	r5, #71	; 0x47
 80118c0:	d101      	bne.n	80118c6 <__cvt+0x56>
 80118c2:	07fb      	lsls	r3, r7, #31
 80118c4:	d51e      	bpl.n	8011904 <__cvt+0x94>
 80118c6:	2d46      	cmp	r5, #70	; 0x46
 80118c8:	eb00 0304 	add.w	r3, r0, r4
 80118cc:	d10c      	bne.n	80118e8 <__cvt+0x78>
 80118ce:	7802      	ldrb	r2, [r0, #0]
 80118d0:	2a30      	cmp	r2, #48	; 0x30
 80118d2:	d107      	bne.n	80118e4 <__cvt+0x74>
 80118d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80118d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118dc:	bf1c      	itt	ne
 80118de:	f1c4 0401 	rsbne	r4, r4, #1
 80118e2:	6034      	strne	r4, [r6, #0]
 80118e4:	6832      	ldr	r2, [r6, #0]
 80118e6:	4413      	add	r3, r2
 80118e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80118ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f0:	d007      	beq.n	8011902 <__cvt+0x92>
 80118f2:	2130      	movs	r1, #48	; 0x30
 80118f4:	9a03      	ldr	r2, [sp, #12]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d204      	bcs.n	8011904 <__cvt+0x94>
 80118fa:	1c54      	adds	r4, r2, #1
 80118fc:	9403      	str	r4, [sp, #12]
 80118fe:	7011      	strb	r1, [r2, #0]
 8011900:	e7f8      	b.n	80118f4 <__cvt+0x84>
 8011902:	9303      	str	r3, [sp, #12]
 8011904:	9b03      	ldr	r3, [sp, #12]
 8011906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011908:	1a1b      	subs	r3, r3, r0
 801190a:	6013      	str	r3, [r2, #0]
 801190c:	b005      	add	sp, #20
 801190e:	ecbd 8b02 	vpop	{d8}
 8011912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011914 <__exponent>:
 8011914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011916:	2900      	cmp	r1, #0
 8011918:	4604      	mov	r4, r0
 801191a:	bfba      	itte	lt
 801191c:	4249      	neglt	r1, r1
 801191e:	232d      	movlt	r3, #45	; 0x2d
 8011920:	232b      	movge	r3, #43	; 0x2b
 8011922:	2909      	cmp	r1, #9
 8011924:	f804 2b02 	strb.w	r2, [r4], #2
 8011928:	7043      	strb	r3, [r0, #1]
 801192a:	dd20      	ble.n	801196e <__exponent+0x5a>
 801192c:	f10d 0307 	add.w	r3, sp, #7
 8011930:	461f      	mov	r7, r3
 8011932:	260a      	movs	r6, #10
 8011934:	fb91 f5f6 	sdiv	r5, r1, r6
 8011938:	fb06 1115 	mls	r1, r6, r5, r1
 801193c:	3130      	adds	r1, #48	; 0x30
 801193e:	2d09      	cmp	r5, #9
 8011940:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011944:	f103 32ff 	add.w	r2, r3, #4294967295
 8011948:	4629      	mov	r1, r5
 801194a:	dc09      	bgt.n	8011960 <__exponent+0x4c>
 801194c:	3130      	adds	r1, #48	; 0x30
 801194e:	3b02      	subs	r3, #2
 8011950:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011954:	42bb      	cmp	r3, r7
 8011956:	4622      	mov	r2, r4
 8011958:	d304      	bcc.n	8011964 <__exponent+0x50>
 801195a:	1a10      	subs	r0, r2, r0
 801195c:	b003      	add	sp, #12
 801195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011960:	4613      	mov	r3, r2
 8011962:	e7e7      	b.n	8011934 <__exponent+0x20>
 8011964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011968:	f804 2b01 	strb.w	r2, [r4], #1
 801196c:	e7f2      	b.n	8011954 <__exponent+0x40>
 801196e:	2330      	movs	r3, #48	; 0x30
 8011970:	4419      	add	r1, r3
 8011972:	7083      	strb	r3, [r0, #2]
 8011974:	1d02      	adds	r2, r0, #4
 8011976:	70c1      	strb	r1, [r0, #3]
 8011978:	e7ef      	b.n	801195a <__exponent+0x46>
 801197a:	0000      	movs	r0, r0
 801197c:	0000      	movs	r0, r0
	...

08011980 <_printf_float>:
 8011980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011984:	b08d      	sub	sp, #52	; 0x34
 8011986:	460c      	mov	r4, r1
 8011988:	4616      	mov	r6, r2
 801198a:	461f      	mov	r7, r3
 801198c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011990:	4605      	mov	r5, r0
 8011992:	f001 fa63 	bl	8012e5c <_localeconv_r>
 8011996:	f8d0 b000 	ldr.w	fp, [r0]
 801199a:	4658      	mov	r0, fp
 801199c:	f7ee fc5a 	bl	8000254 <strlen>
 80119a0:	2300      	movs	r3, #0
 80119a2:	930a      	str	r3, [sp, #40]	; 0x28
 80119a4:	f8d8 3000 	ldr.w	r3, [r8]
 80119a8:	9005      	str	r0, [sp, #20]
 80119aa:	3307      	adds	r3, #7
 80119ac:	f023 0307 	bic.w	r3, r3, #7
 80119b0:	f103 0108 	add.w	r1, r3, #8
 80119b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80119b8:	6822      	ldr	r2, [r4, #0]
 80119ba:	f8c8 1000 	str.w	r1, [r8]
 80119be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80119c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80119c6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8011c50 <_printf_float+0x2d0>
 80119ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80119ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80119d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80119d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119da:	dd24      	ble.n	8011a26 <_printf_float+0xa6>
 80119dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80119e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e4:	d502      	bpl.n	80119ec <_printf_float+0x6c>
 80119e6:	232d      	movs	r3, #45	; 0x2d
 80119e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119ec:	499a      	ldr	r1, [pc, #616]	; (8011c58 <_printf_float+0x2d8>)
 80119ee:	4b9b      	ldr	r3, [pc, #620]	; (8011c5c <_printf_float+0x2dc>)
 80119f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80119f4:	bf8c      	ite	hi
 80119f6:	4688      	movhi	r8, r1
 80119f8:	4698      	movls	r8, r3
 80119fa:	f022 0204 	bic.w	r2, r2, #4
 80119fe:	2303      	movs	r3, #3
 8011a00:	6123      	str	r3, [r4, #16]
 8011a02:	6022      	str	r2, [r4, #0]
 8011a04:	f04f 0a00 	mov.w	sl, #0
 8011a08:	9700      	str	r7, [sp, #0]
 8011a0a:	4633      	mov	r3, r6
 8011a0c:	aa0b      	add	r2, sp, #44	; 0x2c
 8011a0e:	4621      	mov	r1, r4
 8011a10:	4628      	mov	r0, r5
 8011a12:	f000 f9e1 	bl	8011dd8 <_printf_common>
 8011a16:	3001      	adds	r0, #1
 8011a18:	f040 8089 	bne.w	8011b2e <_printf_float+0x1ae>
 8011a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a20:	b00d      	add	sp, #52	; 0x34
 8011a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a26:	eeb4 0b40 	vcmp.f64	d0, d0
 8011a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a2e:	d702      	bvc.n	8011a36 <_printf_float+0xb6>
 8011a30:	498b      	ldr	r1, [pc, #556]	; (8011c60 <_printf_float+0x2e0>)
 8011a32:	4b8c      	ldr	r3, [pc, #560]	; (8011c64 <_printf_float+0x2e4>)
 8011a34:	e7dc      	b.n	80119f0 <_printf_float+0x70>
 8011a36:	6861      	ldr	r1, [r4, #4]
 8011a38:	1c4b      	adds	r3, r1, #1
 8011a3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011a3e:	ab0a      	add	r3, sp, #40	; 0x28
 8011a40:	a809      	add	r0, sp, #36	; 0x24
 8011a42:	d13b      	bne.n	8011abc <_printf_float+0x13c>
 8011a44:	2106      	movs	r1, #6
 8011a46:	6061      	str	r1, [r4, #4]
 8011a48:	f04f 0c00 	mov.w	ip, #0
 8011a4c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8011a50:	e9cd 0900 	strd	r0, r9, [sp]
 8011a54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a58:	6022      	str	r2, [r4, #0]
 8011a5a:	6861      	ldr	r1, [r4, #4]
 8011a5c:	4628      	mov	r0, r5
 8011a5e:	f7ff ff07 	bl	8011870 <__cvt>
 8011a62:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8011a66:	2b47      	cmp	r3, #71	; 0x47
 8011a68:	4680      	mov	r8, r0
 8011a6a:	d109      	bne.n	8011a80 <_printf_float+0x100>
 8011a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a6e:	1cd8      	adds	r0, r3, #3
 8011a70:	db02      	blt.n	8011a78 <_printf_float+0xf8>
 8011a72:	6862      	ldr	r2, [r4, #4]
 8011a74:	4293      	cmp	r3, r2
 8011a76:	dd47      	ble.n	8011b08 <_printf_float+0x188>
 8011a78:	f1a9 0902 	sub.w	r9, r9, #2
 8011a7c:	fa5f f989 	uxtb.w	r9, r9
 8011a80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a86:	d824      	bhi.n	8011ad2 <_printf_float+0x152>
 8011a88:	3901      	subs	r1, #1
 8011a8a:	464a      	mov	r2, r9
 8011a8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011a90:	9109      	str	r1, [sp, #36]	; 0x24
 8011a92:	f7ff ff3f 	bl	8011914 <__exponent>
 8011a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a98:	1813      	adds	r3, r2, r0
 8011a9a:	2a01      	cmp	r2, #1
 8011a9c:	4682      	mov	sl, r0
 8011a9e:	6123      	str	r3, [r4, #16]
 8011aa0:	dc02      	bgt.n	8011aa8 <_printf_float+0x128>
 8011aa2:	6822      	ldr	r2, [r4, #0]
 8011aa4:	07d1      	lsls	r1, r2, #31
 8011aa6:	d501      	bpl.n	8011aac <_printf_float+0x12c>
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	6123      	str	r3, [r4, #16]
 8011aac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d0a9      	beq.n	8011a08 <_printf_float+0x88>
 8011ab4:	232d      	movs	r3, #45	; 0x2d
 8011ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011aba:	e7a5      	b.n	8011a08 <_printf_float+0x88>
 8011abc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8011ac0:	f000 8178 	beq.w	8011db4 <_printf_float+0x434>
 8011ac4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011ac8:	d1be      	bne.n	8011a48 <_printf_float+0xc8>
 8011aca:	2900      	cmp	r1, #0
 8011acc:	d1bc      	bne.n	8011a48 <_printf_float+0xc8>
 8011ace:	2101      	movs	r1, #1
 8011ad0:	e7b9      	b.n	8011a46 <_printf_float+0xc6>
 8011ad2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011ad6:	d119      	bne.n	8011b0c <_printf_float+0x18c>
 8011ad8:	2900      	cmp	r1, #0
 8011ada:	6863      	ldr	r3, [r4, #4]
 8011adc:	dd0c      	ble.n	8011af8 <_printf_float+0x178>
 8011ade:	6121      	str	r1, [r4, #16]
 8011ae0:	b913      	cbnz	r3, 8011ae8 <_printf_float+0x168>
 8011ae2:	6822      	ldr	r2, [r4, #0]
 8011ae4:	07d2      	lsls	r2, r2, #31
 8011ae6:	d502      	bpl.n	8011aee <_printf_float+0x16e>
 8011ae8:	3301      	adds	r3, #1
 8011aea:	440b      	add	r3, r1
 8011aec:	6123      	str	r3, [r4, #16]
 8011aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011af0:	65a3      	str	r3, [r4, #88]	; 0x58
 8011af2:	f04f 0a00 	mov.w	sl, #0
 8011af6:	e7d9      	b.n	8011aac <_printf_float+0x12c>
 8011af8:	b913      	cbnz	r3, 8011b00 <_printf_float+0x180>
 8011afa:	6822      	ldr	r2, [r4, #0]
 8011afc:	07d0      	lsls	r0, r2, #31
 8011afe:	d501      	bpl.n	8011b04 <_printf_float+0x184>
 8011b00:	3302      	adds	r3, #2
 8011b02:	e7f3      	b.n	8011aec <_printf_float+0x16c>
 8011b04:	2301      	movs	r3, #1
 8011b06:	e7f1      	b.n	8011aec <_printf_float+0x16c>
 8011b08:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011b0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011b10:	4293      	cmp	r3, r2
 8011b12:	db05      	blt.n	8011b20 <_printf_float+0x1a0>
 8011b14:	6822      	ldr	r2, [r4, #0]
 8011b16:	6123      	str	r3, [r4, #16]
 8011b18:	07d1      	lsls	r1, r2, #31
 8011b1a:	d5e8      	bpl.n	8011aee <_printf_float+0x16e>
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	e7e5      	b.n	8011aec <_printf_float+0x16c>
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	bfd4      	ite	le
 8011b24:	f1c3 0302 	rsble	r3, r3, #2
 8011b28:	2301      	movgt	r3, #1
 8011b2a:	4413      	add	r3, r2
 8011b2c:	e7de      	b.n	8011aec <_printf_float+0x16c>
 8011b2e:	6823      	ldr	r3, [r4, #0]
 8011b30:	055a      	lsls	r2, r3, #21
 8011b32:	d407      	bmi.n	8011b44 <_printf_float+0x1c4>
 8011b34:	6923      	ldr	r3, [r4, #16]
 8011b36:	4642      	mov	r2, r8
 8011b38:	4631      	mov	r1, r6
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	47b8      	blx	r7
 8011b3e:	3001      	adds	r0, #1
 8011b40:	d12a      	bne.n	8011b98 <_printf_float+0x218>
 8011b42:	e76b      	b.n	8011a1c <_printf_float+0x9c>
 8011b44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011b48:	f240 80de 	bls.w	8011d08 <_printf_float+0x388>
 8011b4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011b50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b58:	d133      	bne.n	8011bc2 <_printf_float+0x242>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	4a42      	ldr	r2, [pc, #264]	; (8011c68 <_printf_float+0x2e8>)
 8011b5e:	4631      	mov	r1, r6
 8011b60:	4628      	mov	r0, r5
 8011b62:	47b8      	blx	r7
 8011b64:	3001      	adds	r0, #1
 8011b66:	f43f af59 	beq.w	8011a1c <_printf_float+0x9c>
 8011b6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	db02      	blt.n	8011b78 <_printf_float+0x1f8>
 8011b72:	6823      	ldr	r3, [r4, #0]
 8011b74:	07d8      	lsls	r0, r3, #31
 8011b76:	d50f      	bpl.n	8011b98 <_printf_float+0x218>
 8011b78:	9b05      	ldr	r3, [sp, #20]
 8011b7a:	465a      	mov	r2, fp
 8011b7c:	4631      	mov	r1, r6
 8011b7e:	4628      	mov	r0, r5
 8011b80:	47b8      	blx	r7
 8011b82:	3001      	adds	r0, #1
 8011b84:	f43f af4a 	beq.w	8011a1c <_printf_float+0x9c>
 8011b88:	f04f 0800 	mov.w	r8, #0
 8011b8c:	f104 091a 	add.w	r9, r4, #26
 8011b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b92:	3b01      	subs	r3, #1
 8011b94:	4543      	cmp	r3, r8
 8011b96:	dc09      	bgt.n	8011bac <_printf_float+0x22c>
 8011b98:	6823      	ldr	r3, [r4, #0]
 8011b9a:	079b      	lsls	r3, r3, #30
 8011b9c:	f100 8105 	bmi.w	8011daa <_printf_float+0x42a>
 8011ba0:	68e0      	ldr	r0, [r4, #12]
 8011ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ba4:	4298      	cmp	r0, r3
 8011ba6:	bfb8      	it	lt
 8011ba8:	4618      	movlt	r0, r3
 8011baa:	e739      	b.n	8011a20 <_printf_float+0xa0>
 8011bac:	2301      	movs	r3, #1
 8011bae:	464a      	mov	r2, r9
 8011bb0:	4631      	mov	r1, r6
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	47b8      	blx	r7
 8011bb6:	3001      	adds	r0, #1
 8011bb8:	f43f af30 	beq.w	8011a1c <_printf_float+0x9c>
 8011bbc:	f108 0801 	add.w	r8, r8, #1
 8011bc0:	e7e6      	b.n	8011b90 <_printf_float+0x210>
 8011bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	dc2b      	bgt.n	8011c20 <_printf_float+0x2a0>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	4a27      	ldr	r2, [pc, #156]	; (8011c68 <_printf_float+0x2e8>)
 8011bcc:	4631      	mov	r1, r6
 8011bce:	4628      	mov	r0, r5
 8011bd0:	47b8      	blx	r7
 8011bd2:	3001      	adds	r0, #1
 8011bd4:	f43f af22 	beq.w	8011a1c <_printf_float+0x9c>
 8011bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bda:	b923      	cbnz	r3, 8011be6 <_printf_float+0x266>
 8011bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bde:	b913      	cbnz	r3, 8011be6 <_printf_float+0x266>
 8011be0:	6823      	ldr	r3, [r4, #0]
 8011be2:	07d9      	lsls	r1, r3, #31
 8011be4:	d5d8      	bpl.n	8011b98 <_printf_float+0x218>
 8011be6:	9b05      	ldr	r3, [sp, #20]
 8011be8:	465a      	mov	r2, fp
 8011bea:	4631      	mov	r1, r6
 8011bec:	4628      	mov	r0, r5
 8011bee:	47b8      	blx	r7
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	f43f af13 	beq.w	8011a1c <_printf_float+0x9c>
 8011bf6:	f04f 0900 	mov.w	r9, #0
 8011bfa:	f104 0a1a 	add.w	sl, r4, #26
 8011bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c00:	425b      	negs	r3, r3
 8011c02:	454b      	cmp	r3, r9
 8011c04:	dc01      	bgt.n	8011c0a <_printf_float+0x28a>
 8011c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c08:	e795      	b.n	8011b36 <_printf_float+0x1b6>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	4652      	mov	r2, sl
 8011c0e:	4631      	mov	r1, r6
 8011c10:	4628      	mov	r0, r5
 8011c12:	47b8      	blx	r7
 8011c14:	3001      	adds	r0, #1
 8011c16:	f43f af01 	beq.w	8011a1c <_printf_float+0x9c>
 8011c1a:	f109 0901 	add.w	r9, r9, #1
 8011c1e:	e7ee      	b.n	8011bfe <_printf_float+0x27e>
 8011c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c24:	429a      	cmp	r2, r3
 8011c26:	bfa8      	it	ge
 8011c28:	461a      	movge	r2, r3
 8011c2a:	2a00      	cmp	r2, #0
 8011c2c:	4691      	mov	r9, r2
 8011c2e:	dd07      	ble.n	8011c40 <_printf_float+0x2c0>
 8011c30:	4613      	mov	r3, r2
 8011c32:	4631      	mov	r1, r6
 8011c34:	4642      	mov	r2, r8
 8011c36:	4628      	mov	r0, r5
 8011c38:	47b8      	blx	r7
 8011c3a:	3001      	adds	r0, #1
 8011c3c:	f43f aeee 	beq.w	8011a1c <_printf_float+0x9c>
 8011c40:	f104 031a 	add.w	r3, r4, #26
 8011c44:	f04f 0a00 	mov.w	sl, #0
 8011c48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c4c:	9307      	str	r3, [sp, #28]
 8011c4e:	e017      	b.n	8011c80 <_printf_float+0x300>
 8011c50:	ffffffff 	.word	0xffffffff
 8011c54:	7fefffff 	.word	0x7fefffff
 8011c58:	080154bc 	.word	0x080154bc
 8011c5c:	080154b8 	.word	0x080154b8
 8011c60:	080154c4 	.word	0x080154c4
 8011c64:	080154c0 	.word	0x080154c0
 8011c68:	080154c8 	.word	0x080154c8
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	9a07      	ldr	r2, [sp, #28]
 8011c70:	4631      	mov	r1, r6
 8011c72:	4628      	mov	r0, r5
 8011c74:	47b8      	blx	r7
 8011c76:	3001      	adds	r0, #1
 8011c78:	f43f aed0 	beq.w	8011a1c <_printf_float+0x9c>
 8011c7c:	f10a 0a01 	add.w	sl, sl, #1
 8011c80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c82:	9306      	str	r3, [sp, #24]
 8011c84:	eba3 0309 	sub.w	r3, r3, r9
 8011c88:	4553      	cmp	r3, sl
 8011c8a:	dcef      	bgt.n	8011c6c <_printf_float+0x2ec>
 8011c8c:	9b06      	ldr	r3, [sp, #24]
 8011c8e:	4498      	add	r8, r3
 8011c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c94:	429a      	cmp	r2, r3
 8011c96:	db15      	blt.n	8011cc4 <_printf_float+0x344>
 8011c98:	6823      	ldr	r3, [r4, #0]
 8011c9a:	07da      	lsls	r2, r3, #31
 8011c9c:	d412      	bmi.n	8011cc4 <_printf_float+0x344>
 8011c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ca0:	9a06      	ldr	r2, [sp, #24]
 8011ca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ca4:	1a9a      	subs	r2, r3, r2
 8011ca6:	eba3 0a01 	sub.w	sl, r3, r1
 8011caa:	4592      	cmp	sl, r2
 8011cac:	bfa8      	it	ge
 8011cae:	4692      	movge	sl, r2
 8011cb0:	f1ba 0f00 	cmp.w	sl, #0
 8011cb4:	dc0e      	bgt.n	8011cd4 <_printf_float+0x354>
 8011cb6:	f04f 0800 	mov.w	r8, #0
 8011cba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011cbe:	f104 091a 	add.w	r9, r4, #26
 8011cc2:	e019      	b.n	8011cf8 <_printf_float+0x378>
 8011cc4:	9b05      	ldr	r3, [sp, #20]
 8011cc6:	465a      	mov	r2, fp
 8011cc8:	4631      	mov	r1, r6
 8011cca:	4628      	mov	r0, r5
 8011ccc:	47b8      	blx	r7
 8011cce:	3001      	adds	r0, #1
 8011cd0:	d1e5      	bne.n	8011c9e <_printf_float+0x31e>
 8011cd2:	e6a3      	b.n	8011a1c <_printf_float+0x9c>
 8011cd4:	4653      	mov	r3, sl
 8011cd6:	4642      	mov	r2, r8
 8011cd8:	4631      	mov	r1, r6
 8011cda:	4628      	mov	r0, r5
 8011cdc:	47b8      	blx	r7
 8011cde:	3001      	adds	r0, #1
 8011ce0:	d1e9      	bne.n	8011cb6 <_printf_float+0x336>
 8011ce2:	e69b      	b.n	8011a1c <_printf_float+0x9c>
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	464a      	mov	r2, r9
 8011ce8:	4631      	mov	r1, r6
 8011cea:	4628      	mov	r0, r5
 8011cec:	47b8      	blx	r7
 8011cee:	3001      	adds	r0, #1
 8011cf0:	f43f ae94 	beq.w	8011a1c <_printf_float+0x9c>
 8011cf4:	f108 0801 	add.w	r8, r8, #1
 8011cf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011cfc:	1a9b      	subs	r3, r3, r2
 8011cfe:	eba3 030a 	sub.w	r3, r3, sl
 8011d02:	4543      	cmp	r3, r8
 8011d04:	dcee      	bgt.n	8011ce4 <_printf_float+0x364>
 8011d06:	e747      	b.n	8011b98 <_printf_float+0x218>
 8011d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d0a:	2a01      	cmp	r2, #1
 8011d0c:	dc01      	bgt.n	8011d12 <_printf_float+0x392>
 8011d0e:	07db      	lsls	r3, r3, #31
 8011d10:	d539      	bpl.n	8011d86 <_printf_float+0x406>
 8011d12:	2301      	movs	r3, #1
 8011d14:	4642      	mov	r2, r8
 8011d16:	4631      	mov	r1, r6
 8011d18:	4628      	mov	r0, r5
 8011d1a:	47b8      	blx	r7
 8011d1c:	3001      	adds	r0, #1
 8011d1e:	f43f ae7d 	beq.w	8011a1c <_printf_float+0x9c>
 8011d22:	9b05      	ldr	r3, [sp, #20]
 8011d24:	465a      	mov	r2, fp
 8011d26:	4631      	mov	r1, r6
 8011d28:	4628      	mov	r0, r5
 8011d2a:	47b8      	blx	r7
 8011d2c:	3001      	adds	r0, #1
 8011d2e:	f108 0801 	add.w	r8, r8, #1
 8011d32:	f43f ae73 	beq.w	8011a1c <_printf_float+0x9c>
 8011d36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d44:	f103 33ff 	add.w	r3, r3, #4294967295
 8011d48:	d018      	beq.n	8011d7c <_printf_float+0x3fc>
 8011d4a:	4642      	mov	r2, r8
 8011d4c:	4631      	mov	r1, r6
 8011d4e:	4628      	mov	r0, r5
 8011d50:	47b8      	blx	r7
 8011d52:	3001      	adds	r0, #1
 8011d54:	d10e      	bne.n	8011d74 <_printf_float+0x3f4>
 8011d56:	e661      	b.n	8011a1c <_printf_float+0x9c>
 8011d58:	2301      	movs	r3, #1
 8011d5a:	464a      	mov	r2, r9
 8011d5c:	4631      	mov	r1, r6
 8011d5e:	4628      	mov	r0, r5
 8011d60:	47b8      	blx	r7
 8011d62:	3001      	adds	r0, #1
 8011d64:	f43f ae5a 	beq.w	8011a1c <_printf_float+0x9c>
 8011d68:	f108 0801 	add.w	r8, r8, #1
 8011d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d6e:	3b01      	subs	r3, #1
 8011d70:	4543      	cmp	r3, r8
 8011d72:	dcf1      	bgt.n	8011d58 <_printf_float+0x3d8>
 8011d74:	4653      	mov	r3, sl
 8011d76:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d7a:	e6dd      	b.n	8011b38 <_printf_float+0x1b8>
 8011d7c:	f04f 0800 	mov.w	r8, #0
 8011d80:	f104 091a 	add.w	r9, r4, #26
 8011d84:	e7f2      	b.n	8011d6c <_printf_float+0x3ec>
 8011d86:	2301      	movs	r3, #1
 8011d88:	e7df      	b.n	8011d4a <_printf_float+0x3ca>
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	464a      	mov	r2, r9
 8011d8e:	4631      	mov	r1, r6
 8011d90:	4628      	mov	r0, r5
 8011d92:	47b8      	blx	r7
 8011d94:	3001      	adds	r0, #1
 8011d96:	f43f ae41 	beq.w	8011a1c <_printf_float+0x9c>
 8011d9a:	f108 0801 	add.w	r8, r8, #1
 8011d9e:	68e3      	ldr	r3, [r4, #12]
 8011da0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011da2:	1a9b      	subs	r3, r3, r2
 8011da4:	4543      	cmp	r3, r8
 8011da6:	dcf0      	bgt.n	8011d8a <_printf_float+0x40a>
 8011da8:	e6fa      	b.n	8011ba0 <_printf_float+0x220>
 8011daa:	f04f 0800 	mov.w	r8, #0
 8011dae:	f104 0919 	add.w	r9, r4, #25
 8011db2:	e7f4      	b.n	8011d9e <_printf_float+0x41e>
 8011db4:	2900      	cmp	r1, #0
 8011db6:	f43f ae8a 	beq.w	8011ace <_printf_float+0x14e>
 8011dba:	f04f 0c00 	mov.w	ip, #0
 8011dbe:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8011dc2:	e9cd 0900 	strd	r0, r9, [sp]
 8011dc6:	6022      	str	r2, [r4, #0]
 8011dc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011dcc:	4628      	mov	r0, r5
 8011dce:	f7ff fd4f 	bl	8011870 <__cvt>
 8011dd2:	4680      	mov	r8, r0
 8011dd4:	e64a      	b.n	8011a6c <_printf_float+0xec>
 8011dd6:	bf00      	nop

08011dd8 <_printf_common>:
 8011dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ddc:	4691      	mov	r9, r2
 8011dde:	461f      	mov	r7, r3
 8011de0:	688a      	ldr	r2, [r1, #8]
 8011de2:	690b      	ldr	r3, [r1, #16]
 8011de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011de8:	4293      	cmp	r3, r2
 8011dea:	bfb8      	it	lt
 8011dec:	4613      	movlt	r3, r2
 8011dee:	f8c9 3000 	str.w	r3, [r9]
 8011df2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011df6:	4606      	mov	r6, r0
 8011df8:	460c      	mov	r4, r1
 8011dfa:	b112      	cbz	r2, 8011e02 <_printf_common+0x2a>
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	f8c9 3000 	str.w	r3, [r9]
 8011e02:	6823      	ldr	r3, [r4, #0]
 8011e04:	0699      	lsls	r1, r3, #26
 8011e06:	bf42      	ittt	mi
 8011e08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011e0c:	3302      	addmi	r3, #2
 8011e0e:	f8c9 3000 	strmi.w	r3, [r9]
 8011e12:	6825      	ldr	r5, [r4, #0]
 8011e14:	f015 0506 	ands.w	r5, r5, #6
 8011e18:	d107      	bne.n	8011e2a <_printf_common+0x52>
 8011e1a:	f104 0a19 	add.w	sl, r4, #25
 8011e1e:	68e3      	ldr	r3, [r4, #12]
 8011e20:	f8d9 2000 	ldr.w	r2, [r9]
 8011e24:	1a9b      	subs	r3, r3, r2
 8011e26:	42ab      	cmp	r3, r5
 8011e28:	dc28      	bgt.n	8011e7c <_printf_common+0xa4>
 8011e2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011e2e:	6822      	ldr	r2, [r4, #0]
 8011e30:	3300      	adds	r3, #0
 8011e32:	bf18      	it	ne
 8011e34:	2301      	movne	r3, #1
 8011e36:	0692      	lsls	r2, r2, #26
 8011e38:	d42d      	bmi.n	8011e96 <_printf_common+0xbe>
 8011e3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e3e:	4639      	mov	r1, r7
 8011e40:	4630      	mov	r0, r6
 8011e42:	47c0      	blx	r8
 8011e44:	3001      	adds	r0, #1
 8011e46:	d020      	beq.n	8011e8a <_printf_common+0xb2>
 8011e48:	6823      	ldr	r3, [r4, #0]
 8011e4a:	68e5      	ldr	r5, [r4, #12]
 8011e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8011e50:	f003 0306 	and.w	r3, r3, #6
 8011e54:	2b04      	cmp	r3, #4
 8011e56:	bf08      	it	eq
 8011e58:	1aad      	subeq	r5, r5, r2
 8011e5a:	68a3      	ldr	r3, [r4, #8]
 8011e5c:	6922      	ldr	r2, [r4, #16]
 8011e5e:	bf0c      	ite	eq
 8011e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e64:	2500      	movne	r5, #0
 8011e66:	4293      	cmp	r3, r2
 8011e68:	bfc4      	itt	gt
 8011e6a:	1a9b      	subgt	r3, r3, r2
 8011e6c:	18ed      	addgt	r5, r5, r3
 8011e6e:	f04f 0900 	mov.w	r9, #0
 8011e72:	341a      	adds	r4, #26
 8011e74:	454d      	cmp	r5, r9
 8011e76:	d11a      	bne.n	8011eae <_printf_common+0xd6>
 8011e78:	2000      	movs	r0, #0
 8011e7a:	e008      	b.n	8011e8e <_printf_common+0xb6>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	4652      	mov	r2, sl
 8011e80:	4639      	mov	r1, r7
 8011e82:	4630      	mov	r0, r6
 8011e84:	47c0      	blx	r8
 8011e86:	3001      	adds	r0, #1
 8011e88:	d103      	bne.n	8011e92 <_printf_common+0xba>
 8011e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e92:	3501      	adds	r5, #1
 8011e94:	e7c3      	b.n	8011e1e <_printf_common+0x46>
 8011e96:	18e1      	adds	r1, r4, r3
 8011e98:	1c5a      	adds	r2, r3, #1
 8011e9a:	2030      	movs	r0, #48	; 0x30
 8011e9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ea0:	4422      	add	r2, r4
 8011ea2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011ea6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011eaa:	3302      	adds	r3, #2
 8011eac:	e7c5      	b.n	8011e3a <_printf_common+0x62>
 8011eae:	2301      	movs	r3, #1
 8011eb0:	4622      	mov	r2, r4
 8011eb2:	4639      	mov	r1, r7
 8011eb4:	4630      	mov	r0, r6
 8011eb6:	47c0      	blx	r8
 8011eb8:	3001      	adds	r0, #1
 8011eba:	d0e6      	beq.n	8011e8a <_printf_common+0xb2>
 8011ebc:	f109 0901 	add.w	r9, r9, #1
 8011ec0:	e7d8      	b.n	8011e74 <_printf_common+0x9c>
	...

08011ec4 <_printf_i>:
 8011ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ec8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011ecc:	460c      	mov	r4, r1
 8011ece:	7e09      	ldrb	r1, [r1, #24]
 8011ed0:	b085      	sub	sp, #20
 8011ed2:	296e      	cmp	r1, #110	; 0x6e
 8011ed4:	4617      	mov	r7, r2
 8011ed6:	4606      	mov	r6, r0
 8011ed8:	4698      	mov	r8, r3
 8011eda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011edc:	f000 80b3 	beq.w	8012046 <_printf_i+0x182>
 8011ee0:	d822      	bhi.n	8011f28 <_printf_i+0x64>
 8011ee2:	2963      	cmp	r1, #99	; 0x63
 8011ee4:	d036      	beq.n	8011f54 <_printf_i+0x90>
 8011ee6:	d80a      	bhi.n	8011efe <_printf_i+0x3a>
 8011ee8:	2900      	cmp	r1, #0
 8011eea:	f000 80b9 	beq.w	8012060 <_printf_i+0x19c>
 8011eee:	2958      	cmp	r1, #88	; 0x58
 8011ef0:	f000 8083 	beq.w	8011ffa <_printf_i+0x136>
 8011ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ef8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011efc:	e032      	b.n	8011f64 <_printf_i+0xa0>
 8011efe:	2964      	cmp	r1, #100	; 0x64
 8011f00:	d001      	beq.n	8011f06 <_printf_i+0x42>
 8011f02:	2969      	cmp	r1, #105	; 0x69
 8011f04:	d1f6      	bne.n	8011ef4 <_printf_i+0x30>
 8011f06:	6820      	ldr	r0, [r4, #0]
 8011f08:	6813      	ldr	r3, [r2, #0]
 8011f0a:	0605      	lsls	r5, r0, #24
 8011f0c:	f103 0104 	add.w	r1, r3, #4
 8011f10:	d52a      	bpl.n	8011f68 <_printf_i+0xa4>
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	6011      	str	r1, [r2, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	da03      	bge.n	8011f22 <_printf_i+0x5e>
 8011f1a:	222d      	movs	r2, #45	; 0x2d
 8011f1c:	425b      	negs	r3, r3
 8011f1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011f22:	486f      	ldr	r0, [pc, #444]	; (80120e0 <_printf_i+0x21c>)
 8011f24:	220a      	movs	r2, #10
 8011f26:	e039      	b.n	8011f9c <_printf_i+0xd8>
 8011f28:	2973      	cmp	r1, #115	; 0x73
 8011f2a:	f000 809d 	beq.w	8012068 <_printf_i+0x1a4>
 8011f2e:	d808      	bhi.n	8011f42 <_printf_i+0x7e>
 8011f30:	296f      	cmp	r1, #111	; 0x6f
 8011f32:	d020      	beq.n	8011f76 <_printf_i+0xb2>
 8011f34:	2970      	cmp	r1, #112	; 0x70
 8011f36:	d1dd      	bne.n	8011ef4 <_printf_i+0x30>
 8011f38:	6823      	ldr	r3, [r4, #0]
 8011f3a:	f043 0320 	orr.w	r3, r3, #32
 8011f3e:	6023      	str	r3, [r4, #0]
 8011f40:	e003      	b.n	8011f4a <_printf_i+0x86>
 8011f42:	2975      	cmp	r1, #117	; 0x75
 8011f44:	d017      	beq.n	8011f76 <_printf_i+0xb2>
 8011f46:	2978      	cmp	r1, #120	; 0x78
 8011f48:	d1d4      	bne.n	8011ef4 <_printf_i+0x30>
 8011f4a:	2378      	movs	r3, #120	; 0x78
 8011f4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011f50:	4864      	ldr	r0, [pc, #400]	; (80120e4 <_printf_i+0x220>)
 8011f52:	e055      	b.n	8012000 <_printf_i+0x13c>
 8011f54:	6813      	ldr	r3, [r2, #0]
 8011f56:	1d19      	adds	r1, r3, #4
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	6011      	str	r1, [r2, #0]
 8011f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f64:	2301      	movs	r3, #1
 8011f66:	e08c      	b.n	8012082 <_printf_i+0x1be>
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	6011      	str	r1, [r2, #0]
 8011f6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011f70:	bf18      	it	ne
 8011f72:	b21b      	sxthne	r3, r3
 8011f74:	e7cf      	b.n	8011f16 <_printf_i+0x52>
 8011f76:	6813      	ldr	r3, [r2, #0]
 8011f78:	6825      	ldr	r5, [r4, #0]
 8011f7a:	1d18      	adds	r0, r3, #4
 8011f7c:	6010      	str	r0, [r2, #0]
 8011f7e:	0628      	lsls	r0, r5, #24
 8011f80:	d501      	bpl.n	8011f86 <_printf_i+0xc2>
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	e002      	b.n	8011f8c <_printf_i+0xc8>
 8011f86:	0668      	lsls	r0, r5, #25
 8011f88:	d5fb      	bpl.n	8011f82 <_printf_i+0xbe>
 8011f8a:	881b      	ldrh	r3, [r3, #0]
 8011f8c:	4854      	ldr	r0, [pc, #336]	; (80120e0 <_printf_i+0x21c>)
 8011f8e:	296f      	cmp	r1, #111	; 0x6f
 8011f90:	bf14      	ite	ne
 8011f92:	220a      	movne	r2, #10
 8011f94:	2208      	moveq	r2, #8
 8011f96:	2100      	movs	r1, #0
 8011f98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f9c:	6865      	ldr	r5, [r4, #4]
 8011f9e:	60a5      	str	r5, [r4, #8]
 8011fa0:	2d00      	cmp	r5, #0
 8011fa2:	f2c0 8095 	blt.w	80120d0 <_printf_i+0x20c>
 8011fa6:	6821      	ldr	r1, [r4, #0]
 8011fa8:	f021 0104 	bic.w	r1, r1, #4
 8011fac:	6021      	str	r1, [r4, #0]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d13d      	bne.n	801202e <_printf_i+0x16a>
 8011fb2:	2d00      	cmp	r5, #0
 8011fb4:	f040 808e 	bne.w	80120d4 <_printf_i+0x210>
 8011fb8:	4665      	mov	r5, ip
 8011fba:	2a08      	cmp	r2, #8
 8011fbc:	d10b      	bne.n	8011fd6 <_printf_i+0x112>
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	07db      	lsls	r3, r3, #31
 8011fc2:	d508      	bpl.n	8011fd6 <_printf_i+0x112>
 8011fc4:	6923      	ldr	r3, [r4, #16]
 8011fc6:	6862      	ldr	r2, [r4, #4]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	bfde      	ittt	le
 8011fcc:	2330      	movle	r3, #48	; 0x30
 8011fce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011fd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011fd6:	ebac 0305 	sub.w	r3, ip, r5
 8011fda:	6123      	str	r3, [r4, #16]
 8011fdc:	f8cd 8000 	str.w	r8, [sp]
 8011fe0:	463b      	mov	r3, r7
 8011fe2:	aa03      	add	r2, sp, #12
 8011fe4:	4621      	mov	r1, r4
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	f7ff fef6 	bl	8011dd8 <_printf_common>
 8011fec:	3001      	adds	r0, #1
 8011fee:	d14d      	bne.n	801208c <_printf_i+0x1c8>
 8011ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff4:	b005      	add	sp, #20
 8011ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ffa:	4839      	ldr	r0, [pc, #228]	; (80120e0 <_printf_i+0x21c>)
 8011ffc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012000:	6813      	ldr	r3, [r2, #0]
 8012002:	6821      	ldr	r1, [r4, #0]
 8012004:	1d1d      	adds	r5, r3, #4
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	6015      	str	r5, [r2, #0]
 801200a:	060a      	lsls	r2, r1, #24
 801200c:	d50b      	bpl.n	8012026 <_printf_i+0x162>
 801200e:	07ca      	lsls	r2, r1, #31
 8012010:	bf44      	itt	mi
 8012012:	f041 0120 	orrmi.w	r1, r1, #32
 8012016:	6021      	strmi	r1, [r4, #0]
 8012018:	b91b      	cbnz	r3, 8012022 <_printf_i+0x15e>
 801201a:	6822      	ldr	r2, [r4, #0]
 801201c:	f022 0220 	bic.w	r2, r2, #32
 8012020:	6022      	str	r2, [r4, #0]
 8012022:	2210      	movs	r2, #16
 8012024:	e7b7      	b.n	8011f96 <_printf_i+0xd2>
 8012026:	064d      	lsls	r5, r1, #25
 8012028:	bf48      	it	mi
 801202a:	b29b      	uxthmi	r3, r3
 801202c:	e7ef      	b.n	801200e <_printf_i+0x14a>
 801202e:	4665      	mov	r5, ip
 8012030:	fbb3 f1f2 	udiv	r1, r3, r2
 8012034:	fb02 3311 	mls	r3, r2, r1, r3
 8012038:	5cc3      	ldrb	r3, [r0, r3]
 801203a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801203e:	460b      	mov	r3, r1
 8012040:	2900      	cmp	r1, #0
 8012042:	d1f5      	bne.n	8012030 <_printf_i+0x16c>
 8012044:	e7b9      	b.n	8011fba <_printf_i+0xf6>
 8012046:	6813      	ldr	r3, [r2, #0]
 8012048:	6825      	ldr	r5, [r4, #0]
 801204a:	6961      	ldr	r1, [r4, #20]
 801204c:	1d18      	adds	r0, r3, #4
 801204e:	6010      	str	r0, [r2, #0]
 8012050:	0628      	lsls	r0, r5, #24
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	d501      	bpl.n	801205a <_printf_i+0x196>
 8012056:	6019      	str	r1, [r3, #0]
 8012058:	e002      	b.n	8012060 <_printf_i+0x19c>
 801205a:	066a      	lsls	r2, r5, #25
 801205c:	d5fb      	bpl.n	8012056 <_printf_i+0x192>
 801205e:	8019      	strh	r1, [r3, #0]
 8012060:	2300      	movs	r3, #0
 8012062:	6123      	str	r3, [r4, #16]
 8012064:	4665      	mov	r5, ip
 8012066:	e7b9      	b.n	8011fdc <_printf_i+0x118>
 8012068:	6813      	ldr	r3, [r2, #0]
 801206a:	1d19      	adds	r1, r3, #4
 801206c:	6011      	str	r1, [r2, #0]
 801206e:	681d      	ldr	r5, [r3, #0]
 8012070:	6862      	ldr	r2, [r4, #4]
 8012072:	2100      	movs	r1, #0
 8012074:	4628      	mov	r0, r5
 8012076:	f7ee f8fb 	bl	8000270 <memchr>
 801207a:	b108      	cbz	r0, 8012080 <_printf_i+0x1bc>
 801207c:	1b40      	subs	r0, r0, r5
 801207e:	6060      	str	r0, [r4, #4]
 8012080:	6863      	ldr	r3, [r4, #4]
 8012082:	6123      	str	r3, [r4, #16]
 8012084:	2300      	movs	r3, #0
 8012086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801208a:	e7a7      	b.n	8011fdc <_printf_i+0x118>
 801208c:	6923      	ldr	r3, [r4, #16]
 801208e:	462a      	mov	r2, r5
 8012090:	4639      	mov	r1, r7
 8012092:	4630      	mov	r0, r6
 8012094:	47c0      	blx	r8
 8012096:	3001      	adds	r0, #1
 8012098:	d0aa      	beq.n	8011ff0 <_printf_i+0x12c>
 801209a:	6823      	ldr	r3, [r4, #0]
 801209c:	079b      	lsls	r3, r3, #30
 801209e:	d413      	bmi.n	80120c8 <_printf_i+0x204>
 80120a0:	68e0      	ldr	r0, [r4, #12]
 80120a2:	9b03      	ldr	r3, [sp, #12]
 80120a4:	4298      	cmp	r0, r3
 80120a6:	bfb8      	it	lt
 80120a8:	4618      	movlt	r0, r3
 80120aa:	e7a3      	b.n	8011ff4 <_printf_i+0x130>
 80120ac:	2301      	movs	r3, #1
 80120ae:	464a      	mov	r2, r9
 80120b0:	4639      	mov	r1, r7
 80120b2:	4630      	mov	r0, r6
 80120b4:	47c0      	blx	r8
 80120b6:	3001      	adds	r0, #1
 80120b8:	d09a      	beq.n	8011ff0 <_printf_i+0x12c>
 80120ba:	3501      	adds	r5, #1
 80120bc:	68e3      	ldr	r3, [r4, #12]
 80120be:	9a03      	ldr	r2, [sp, #12]
 80120c0:	1a9b      	subs	r3, r3, r2
 80120c2:	42ab      	cmp	r3, r5
 80120c4:	dcf2      	bgt.n	80120ac <_printf_i+0x1e8>
 80120c6:	e7eb      	b.n	80120a0 <_printf_i+0x1dc>
 80120c8:	2500      	movs	r5, #0
 80120ca:	f104 0919 	add.w	r9, r4, #25
 80120ce:	e7f5      	b.n	80120bc <_printf_i+0x1f8>
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d1ac      	bne.n	801202e <_printf_i+0x16a>
 80120d4:	7803      	ldrb	r3, [r0, #0]
 80120d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80120da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120de:	e76c      	b.n	8011fba <_printf_i+0xf6>
 80120e0:	080154ca 	.word	0x080154ca
 80120e4:	080154db 	.word	0x080154db

080120e8 <cleanup_glue>:
 80120e8:	b538      	push	{r3, r4, r5, lr}
 80120ea:	460c      	mov	r4, r1
 80120ec:	6809      	ldr	r1, [r1, #0]
 80120ee:	4605      	mov	r5, r0
 80120f0:	b109      	cbz	r1, 80120f6 <cleanup_glue+0xe>
 80120f2:	f7ff fff9 	bl	80120e8 <cleanup_glue>
 80120f6:	4621      	mov	r1, r4
 80120f8:	4628      	mov	r0, r5
 80120fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120fe:	f001 b9c1 	b.w	8013484 <_free_r>
	...

08012104 <_reclaim_reent>:
 8012104:	4b2c      	ldr	r3, [pc, #176]	; (80121b8 <_reclaim_reent+0xb4>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	4283      	cmp	r3, r0
 801210a:	b570      	push	{r4, r5, r6, lr}
 801210c:	4604      	mov	r4, r0
 801210e:	d051      	beq.n	80121b4 <_reclaim_reent+0xb0>
 8012110:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012112:	b143      	cbz	r3, 8012126 <_reclaim_reent+0x22>
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d14a      	bne.n	80121b0 <_reclaim_reent+0xac>
 801211a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801211c:	6819      	ldr	r1, [r3, #0]
 801211e:	b111      	cbz	r1, 8012126 <_reclaim_reent+0x22>
 8012120:	4620      	mov	r0, r4
 8012122:	f001 f9af 	bl	8013484 <_free_r>
 8012126:	6961      	ldr	r1, [r4, #20]
 8012128:	b111      	cbz	r1, 8012130 <_reclaim_reent+0x2c>
 801212a:	4620      	mov	r0, r4
 801212c:	f001 f9aa 	bl	8013484 <_free_r>
 8012130:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012132:	b111      	cbz	r1, 801213a <_reclaim_reent+0x36>
 8012134:	4620      	mov	r0, r4
 8012136:	f001 f9a5 	bl	8013484 <_free_r>
 801213a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801213c:	b111      	cbz	r1, 8012144 <_reclaim_reent+0x40>
 801213e:	4620      	mov	r0, r4
 8012140:	f001 f9a0 	bl	8013484 <_free_r>
 8012144:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012146:	b111      	cbz	r1, 801214e <_reclaim_reent+0x4a>
 8012148:	4620      	mov	r0, r4
 801214a:	f001 f99b 	bl	8013484 <_free_r>
 801214e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012150:	b111      	cbz	r1, 8012158 <_reclaim_reent+0x54>
 8012152:	4620      	mov	r0, r4
 8012154:	f001 f996 	bl	8013484 <_free_r>
 8012158:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801215a:	b111      	cbz	r1, 8012162 <_reclaim_reent+0x5e>
 801215c:	4620      	mov	r0, r4
 801215e:	f001 f991 	bl	8013484 <_free_r>
 8012162:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012164:	b111      	cbz	r1, 801216c <_reclaim_reent+0x68>
 8012166:	4620      	mov	r0, r4
 8012168:	f001 f98c 	bl	8013484 <_free_r>
 801216c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801216e:	b111      	cbz	r1, 8012176 <_reclaim_reent+0x72>
 8012170:	4620      	mov	r0, r4
 8012172:	f001 f987 	bl	8013484 <_free_r>
 8012176:	69a3      	ldr	r3, [r4, #24]
 8012178:	b1e3      	cbz	r3, 80121b4 <_reclaim_reent+0xb0>
 801217a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801217c:	4620      	mov	r0, r4
 801217e:	4798      	blx	r3
 8012180:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012182:	b1b9      	cbz	r1, 80121b4 <_reclaim_reent+0xb0>
 8012184:	4620      	mov	r0, r4
 8012186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801218a:	f7ff bfad 	b.w	80120e8 <cleanup_glue>
 801218e:	5949      	ldr	r1, [r1, r5]
 8012190:	b941      	cbnz	r1, 80121a4 <_reclaim_reent+0xa0>
 8012192:	3504      	adds	r5, #4
 8012194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012196:	2d80      	cmp	r5, #128	; 0x80
 8012198:	68d9      	ldr	r1, [r3, #12]
 801219a:	d1f8      	bne.n	801218e <_reclaim_reent+0x8a>
 801219c:	4620      	mov	r0, r4
 801219e:	f001 f971 	bl	8013484 <_free_r>
 80121a2:	e7ba      	b.n	801211a <_reclaim_reent+0x16>
 80121a4:	680e      	ldr	r6, [r1, #0]
 80121a6:	4620      	mov	r0, r4
 80121a8:	f001 f96c 	bl	8013484 <_free_r>
 80121ac:	4631      	mov	r1, r6
 80121ae:	e7ef      	b.n	8012190 <_reclaim_reent+0x8c>
 80121b0:	2500      	movs	r5, #0
 80121b2:	e7ef      	b.n	8012194 <_reclaim_reent+0x90>
 80121b4:	bd70      	pop	{r4, r5, r6, pc}
 80121b6:	bf00      	nop
 80121b8:	20000034 	.word	0x20000034

080121bc <_sbrk_r>:
 80121bc:	b538      	push	{r3, r4, r5, lr}
 80121be:	4c06      	ldr	r4, [pc, #24]	; (80121d8 <_sbrk_r+0x1c>)
 80121c0:	2300      	movs	r3, #0
 80121c2:	4605      	mov	r5, r0
 80121c4:	4608      	mov	r0, r1
 80121c6:	6023      	str	r3, [r4, #0]
 80121c8:	f7ee feb6 	bl	8000f38 <_sbrk>
 80121cc:	1c43      	adds	r3, r0, #1
 80121ce:	d102      	bne.n	80121d6 <_sbrk_r+0x1a>
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	b103      	cbz	r3, 80121d6 <_sbrk_r+0x1a>
 80121d4:	602b      	str	r3, [r5, #0]
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	2000c980 	.word	0x2000c980

080121dc <sniprintf>:
 80121dc:	b40c      	push	{r2, r3}
 80121de:	b530      	push	{r4, r5, lr}
 80121e0:	4b17      	ldr	r3, [pc, #92]	; (8012240 <sniprintf+0x64>)
 80121e2:	1e0c      	subs	r4, r1, #0
 80121e4:	b09d      	sub	sp, #116	; 0x74
 80121e6:	681d      	ldr	r5, [r3, #0]
 80121e8:	da08      	bge.n	80121fc <sniprintf+0x20>
 80121ea:	238b      	movs	r3, #139	; 0x8b
 80121ec:	602b      	str	r3, [r5, #0]
 80121ee:	f04f 30ff 	mov.w	r0, #4294967295
 80121f2:	b01d      	add	sp, #116	; 0x74
 80121f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121f8:	b002      	add	sp, #8
 80121fa:	4770      	bx	lr
 80121fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012200:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012204:	bf14      	ite	ne
 8012206:	f104 33ff 	addne.w	r3, r4, #4294967295
 801220a:	4623      	moveq	r3, r4
 801220c:	9304      	str	r3, [sp, #16]
 801220e:	9307      	str	r3, [sp, #28]
 8012210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012214:	9002      	str	r0, [sp, #8]
 8012216:	9006      	str	r0, [sp, #24]
 8012218:	f8ad 3016 	strh.w	r3, [sp, #22]
 801221c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801221e:	ab21      	add	r3, sp, #132	; 0x84
 8012220:	a902      	add	r1, sp, #8
 8012222:	4628      	mov	r0, r5
 8012224:	9301      	str	r3, [sp, #4]
 8012226:	f001 f9d5 	bl	80135d4 <_svfiprintf_r>
 801222a:	1c43      	adds	r3, r0, #1
 801222c:	bfbc      	itt	lt
 801222e:	238b      	movlt	r3, #139	; 0x8b
 8012230:	602b      	strlt	r3, [r5, #0]
 8012232:	2c00      	cmp	r4, #0
 8012234:	d0dd      	beq.n	80121f2 <sniprintf+0x16>
 8012236:	9b02      	ldr	r3, [sp, #8]
 8012238:	2200      	movs	r2, #0
 801223a:	701a      	strb	r2, [r3, #0]
 801223c:	e7d9      	b.n	80121f2 <sniprintf+0x16>
 801223e:	bf00      	nop
 8012240:	20000034 	.word	0x20000034

08012244 <strcasecmp>:
 8012244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012246:	4606      	mov	r6, r0
 8012248:	460f      	mov	r7, r1
 801224a:	f816 4b01 	ldrb.w	r4, [r6], #1
 801224e:	f000 fdf7 	bl	8012e40 <__locale_ctype_ptr>
 8012252:	4420      	add	r0, r4
 8012254:	f817 5b01 	ldrb.w	r5, [r7], #1
 8012258:	7843      	ldrb	r3, [r0, #1]
 801225a:	f003 0303 	and.w	r3, r3, #3
 801225e:	2b01      	cmp	r3, #1
 8012260:	bf08      	it	eq
 8012262:	3420      	addeq	r4, #32
 8012264:	f000 fdec 	bl	8012e40 <__locale_ctype_ptr>
 8012268:	4428      	add	r0, r5
 801226a:	7842      	ldrb	r2, [r0, #1]
 801226c:	f002 0203 	and.w	r2, r2, #3
 8012270:	2a01      	cmp	r2, #1
 8012272:	bf08      	it	eq
 8012274:	3520      	addeq	r5, #32
 8012276:	1b60      	subs	r0, r4, r5
 8012278:	d101      	bne.n	801227e <strcasecmp+0x3a>
 801227a:	2d00      	cmp	r5, #0
 801227c:	d1e5      	bne.n	801224a <strcasecmp+0x6>
 801227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012280 <strcpy>:
 8012280:	4603      	mov	r3, r0
 8012282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012286:	f803 2b01 	strb.w	r2, [r3], #1
 801228a:	2a00      	cmp	r2, #0
 801228c:	d1f9      	bne.n	8012282 <strcpy+0x2>
 801228e:	4770      	bx	lr

08012290 <quorem>:
 8012290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012294:	6903      	ldr	r3, [r0, #16]
 8012296:	690c      	ldr	r4, [r1, #16]
 8012298:	42a3      	cmp	r3, r4
 801229a:	4680      	mov	r8, r0
 801229c:	f2c0 8082 	blt.w	80123a4 <quorem+0x114>
 80122a0:	3c01      	subs	r4, #1
 80122a2:	f101 0714 	add.w	r7, r1, #20
 80122a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80122aa:	f100 0614 	add.w	r6, r0, #20
 80122ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80122b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80122b6:	eb06 030c 	add.w	r3, r6, ip
 80122ba:	3501      	adds	r5, #1
 80122bc:	eb07 090c 	add.w	r9, r7, ip
 80122c0:	9301      	str	r3, [sp, #4]
 80122c2:	fbb0 f5f5 	udiv	r5, r0, r5
 80122c6:	b395      	cbz	r5, 801232e <quorem+0x9e>
 80122c8:	f04f 0a00 	mov.w	sl, #0
 80122cc:	4638      	mov	r0, r7
 80122ce:	46b6      	mov	lr, r6
 80122d0:	46d3      	mov	fp, sl
 80122d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80122d6:	b293      	uxth	r3, r2
 80122d8:	fb05 a303 	mla	r3, r5, r3, sl
 80122dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	ebab 0303 	sub.w	r3, fp, r3
 80122e6:	0c12      	lsrs	r2, r2, #16
 80122e8:	f8de b000 	ldr.w	fp, [lr]
 80122ec:	fb05 a202 	mla	r2, r5, r2, sl
 80122f0:	fa13 f38b 	uxtah	r3, r3, fp
 80122f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80122f8:	fa1f fb82 	uxth.w	fp, r2
 80122fc:	f8de 2000 	ldr.w	r2, [lr]
 8012300:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012308:	b29b      	uxth	r3, r3
 801230a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801230e:	4581      	cmp	r9, r0
 8012310:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012314:	f84e 3b04 	str.w	r3, [lr], #4
 8012318:	d2db      	bcs.n	80122d2 <quorem+0x42>
 801231a:	f856 300c 	ldr.w	r3, [r6, ip]
 801231e:	b933      	cbnz	r3, 801232e <quorem+0x9e>
 8012320:	9b01      	ldr	r3, [sp, #4]
 8012322:	3b04      	subs	r3, #4
 8012324:	429e      	cmp	r6, r3
 8012326:	461a      	mov	r2, r3
 8012328:	d330      	bcc.n	801238c <quorem+0xfc>
 801232a:	f8c8 4010 	str.w	r4, [r8, #16]
 801232e:	4640      	mov	r0, r8
 8012330:	f000 ffd4 	bl	80132dc <__mcmp>
 8012334:	2800      	cmp	r0, #0
 8012336:	db25      	blt.n	8012384 <quorem+0xf4>
 8012338:	3501      	adds	r5, #1
 801233a:	4630      	mov	r0, r6
 801233c:	f04f 0c00 	mov.w	ip, #0
 8012340:	f857 2b04 	ldr.w	r2, [r7], #4
 8012344:	f8d0 e000 	ldr.w	lr, [r0]
 8012348:	b293      	uxth	r3, r2
 801234a:	ebac 0303 	sub.w	r3, ip, r3
 801234e:	0c12      	lsrs	r2, r2, #16
 8012350:	fa13 f38e 	uxtah	r3, r3, lr
 8012354:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801235c:	b29b      	uxth	r3, r3
 801235e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012362:	45b9      	cmp	r9, r7
 8012364:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012368:	f840 3b04 	str.w	r3, [r0], #4
 801236c:	d2e8      	bcs.n	8012340 <quorem+0xb0>
 801236e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012372:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012376:	b92a      	cbnz	r2, 8012384 <quorem+0xf4>
 8012378:	3b04      	subs	r3, #4
 801237a:	429e      	cmp	r6, r3
 801237c:	461a      	mov	r2, r3
 801237e:	d30b      	bcc.n	8012398 <quorem+0x108>
 8012380:	f8c8 4010 	str.w	r4, [r8, #16]
 8012384:	4628      	mov	r0, r5
 8012386:	b003      	add	sp, #12
 8012388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238c:	6812      	ldr	r2, [r2, #0]
 801238e:	3b04      	subs	r3, #4
 8012390:	2a00      	cmp	r2, #0
 8012392:	d1ca      	bne.n	801232a <quorem+0x9a>
 8012394:	3c01      	subs	r4, #1
 8012396:	e7c5      	b.n	8012324 <quorem+0x94>
 8012398:	6812      	ldr	r2, [r2, #0]
 801239a:	3b04      	subs	r3, #4
 801239c:	2a00      	cmp	r2, #0
 801239e:	d1ef      	bne.n	8012380 <quorem+0xf0>
 80123a0:	3c01      	subs	r4, #1
 80123a2:	e7ea      	b.n	801237a <quorem+0xea>
 80123a4:	2000      	movs	r0, #0
 80123a6:	e7ee      	b.n	8012386 <quorem+0xf6>

080123a8 <_dtoa_r>:
 80123a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ac:	ec57 6b10 	vmov	r6, r7, d0
 80123b0:	b095      	sub	sp, #84	; 0x54
 80123b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80123b4:	9108      	str	r1, [sp, #32]
 80123b6:	4604      	mov	r4, r0
 80123b8:	920a      	str	r2, [sp, #40]	; 0x28
 80123ba:	9311      	str	r3, [sp, #68]	; 0x44
 80123bc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80123c0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80123c4:	b93d      	cbnz	r5, 80123d6 <_dtoa_r+0x2e>
 80123c6:	2010      	movs	r0, #16
 80123c8:	f000 fd56 	bl	8012e78 <malloc>
 80123cc:	6260      	str	r0, [r4, #36]	; 0x24
 80123ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80123d2:	6005      	str	r5, [r0, #0]
 80123d4:	60c5      	str	r5, [r0, #12]
 80123d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123d8:	6819      	ldr	r1, [r3, #0]
 80123da:	b151      	cbz	r1, 80123f2 <_dtoa_r+0x4a>
 80123dc:	685a      	ldr	r2, [r3, #4]
 80123de:	604a      	str	r2, [r1, #4]
 80123e0:	2301      	movs	r3, #1
 80123e2:	4093      	lsls	r3, r2
 80123e4:	608b      	str	r3, [r1, #8]
 80123e6:	4620      	mov	r0, r4
 80123e8:	f000 fd96 	bl	8012f18 <_Bfree>
 80123ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123ee:	2200      	movs	r2, #0
 80123f0:	601a      	str	r2, [r3, #0]
 80123f2:	1e3b      	subs	r3, r7, #0
 80123f4:	bfb9      	ittee	lt
 80123f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80123fa:	9303      	strlt	r3, [sp, #12]
 80123fc:	2300      	movge	r3, #0
 80123fe:	f8c8 3000 	strge.w	r3, [r8]
 8012402:	9d03      	ldr	r5, [sp, #12]
 8012404:	4bac      	ldr	r3, [pc, #688]	; (80126b8 <_dtoa_r+0x310>)
 8012406:	bfbc      	itt	lt
 8012408:	2201      	movlt	r2, #1
 801240a:	f8c8 2000 	strlt.w	r2, [r8]
 801240e:	43ab      	bics	r3, r5
 8012410:	d11b      	bne.n	801244a <_dtoa_r+0xa2>
 8012412:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012414:	f242 730f 	movw	r3, #9999	; 0x270f
 8012418:	6013      	str	r3, [r2, #0]
 801241a:	9b02      	ldr	r3, [sp, #8]
 801241c:	b923      	cbnz	r3, 8012428 <_dtoa_r+0x80>
 801241e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012422:	2d00      	cmp	r5, #0
 8012424:	f000 84dd 	beq.w	8012de2 <_dtoa_r+0xa3a>
 8012428:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801242a:	b953      	cbnz	r3, 8012442 <_dtoa_r+0x9a>
 801242c:	4ba3      	ldr	r3, [pc, #652]	; (80126bc <_dtoa_r+0x314>)
 801242e:	e020      	b.n	8012472 <_dtoa_r+0xca>
 8012430:	4ba3      	ldr	r3, [pc, #652]	; (80126c0 <_dtoa_r+0x318>)
 8012432:	9304      	str	r3, [sp, #16]
 8012434:	3308      	adds	r3, #8
 8012436:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012438:	6013      	str	r3, [r2, #0]
 801243a:	9804      	ldr	r0, [sp, #16]
 801243c:	b015      	add	sp, #84	; 0x54
 801243e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012442:	4b9e      	ldr	r3, [pc, #632]	; (80126bc <_dtoa_r+0x314>)
 8012444:	9304      	str	r3, [sp, #16]
 8012446:	3303      	adds	r3, #3
 8012448:	e7f5      	b.n	8012436 <_dtoa_r+0x8e>
 801244a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801244e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012456:	ed8d 7b04 	vstr	d7, [sp, #16]
 801245a:	d10c      	bne.n	8012476 <_dtoa_r+0xce>
 801245c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801245e:	2301      	movs	r3, #1
 8012460:	6013      	str	r3, [r2, #0]
 8012462:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012464:	2b00      	cmp	r3, #0
 8012466:	f000 84b9 	beq.w	8012ddc <_dtoa_r+0xa34>
 801246a:	4b96      	ldr	r3, [pc, #600]	; (80126c4 <_dtoa_r+0x31c>)
 801246c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801246e:	6013      	str	r3, [r2, #0]
 8012470:	3b01      	subs	r3, #1
 8012472:	9304      	str	r3, [sp, #16]
 8012474:	e7e1      	b.n	801243a <_dtoa_r+0x92>
 8012476:	a913      	add	r1, sp, #76	; 0x4c
 8012478:	aa12      	add	r2, sp, #72	; 0x48
 801247a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801247e:	4620      	mov	r0, r4
 8012480:	f000 ffa3 	bl	80133ca <__d2b>
 8012484:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8012488:	9001      	str	r0, [sp, #4]
 801248a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801248c:	2e00      	cmp	r6, #0
 801248e:	d046      	beq.n	801251e <_dtoa_r+0x176>
 8012490:	9805      	ldr	r0, [sp, #20]
 8012492:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801249a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801249e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80124a2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80124a6:	2700      	movs	r7, #0
 80124a8:	ee07 aa90 	vmov	s15, sl
 80124ac:	ec43 2b16 	vmov	d6, r2, r3
 80124b0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80124b4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80126a0 <_dtoa_r+0x2f8>
 80124b8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80124bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80124c0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80126a8 <_dtoa_r+0x300>
 80124c4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80124c8:	eeb0 7b46 	vmov.f64	d7, d6
 80124cc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80126b0 <_dtoa_r+0x308>
 80124d0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80124d4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80124d8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80124dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e0:	ee16 ba90 	vmov	fp, s13
 80124e4:	d508      	bpl.n	80124f8 <_dtoa_r+0x150>
 80124e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80124ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80124ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f2:	bf18      	it	ne
 80124f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80124f8:	f1bb 0f16 	cmp.w	fp, #22
 80124fc:	d834      	bhi.n	8012568 <_dtoa_r+0x1c0>
 80124fe:	4b72      	ldr	r3, [pc, #456]	; (80126c8 <_dtoa_r+0x320>)
 8012500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012504:	ed93 7b00 	vldr	d7, [r3]
 8012508:	ed9d 6b02 	vldr	d6, [sp, #8]
 801250c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012514:	dd01      	ble.n	801251a <_dtoa_r+0x172>
 8012516:	f10b 3bff 	add.w	fp, fp, #4294967295
 801251a:	2300      	movs	r3, #0
 801251c:	e025      	b.n	801256a <_dtoa_r+0x1c2>
 801251e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012520:	eb01 0a03 	add.w	sl, r1, r3
 8012524:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8012528:	2b20      	cmp	r3, #32
 801252a:	dd17      	ble.n	801255c <_dtoa_r+0x1b4>
 801252c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012530:	9a02      	ldr	r2, [sp, #8]
 8012532:	409d      	lsls	r5, r3
 8012534:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8012538:	fa22 f303 	lsr.w	r3, r2, r3
 801253c:	432b      	orrs	r3, r5
 801253e:	ee07 3a90 	vmov	s15, r3
 8012542:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012546:	f10a 3aff 	add.w	sl, sl, #4294967295
 801254a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801254e:	9805      	ldr	r0, [sp, #20]
 8012550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012554:	2701      	movs	r7, #1
 8012556:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801255a:	e7a5      	b.n	80124a8 <_dtoa_r+0x100>
 801255c:	9a02      	ldr	r2, [sp, #8]
 801255e:	f1c3 0320 	rsb	r3, r3, #32
 8012562:	fa02 f303 	lsl.w	r3, r2, r3
 8012566:	e7ea      	b.n	801253e <_dtoa_r+0x196>
 8012568:	2301      	movs	r3, #1
 801256a:	eba1 0a0a 	sub.w	sl, r1, sl
 801256e:	9310      	str	r3, [sp, #64]	; 0x40
 8012570:	f1ba 0301 	subs.w	r3, sl, #1
 8012574:	9307      	str	r3, [sp, #28]
 8012576:	bf43      	ittte	mi
 8012578:	2300      	movmi	r3, #0
 801257a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801257e:	9307      	strmi	r3, [sp, #28]
 8012580:	f04f 0a00 	movpl.w	sl, #0
 8012584:	f1bb 0f00 	cmp.w	fp, #0
 8012588:	db19      	blt.n	80125be <_dtoa_r+0x216>
 801258a:	9b07      	ldr	r3, [sp, #28]
 801258c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012590:	445b      	add	r3, fp
 8012592:	9307      	str	r3, [sp, #28]
 8012594:	f04f 0800 	mov.w	r8, #0
 8012598:	9b08      	ldr	r3, [sp, #32]
 801259a:	2b09      	cmp	r3, #9
 801259c:	d866      	bhi.n	801266c <_dtoa_r+0x2c4>
 801259e:	2b05      	cmp	r3, #5
 80125a0:	bfc4      	itt	gt
 80125a2:	3b04      	subgt	r3, #4
 80125a4:	9308      	strgt	r3, [sp, #32]
 80125a6:	9b08      	ldr	r3, [sp, #32]
 80125a8:	f1a3 0302 	sub.w	r3, r3, #2
 80125ac:	bfcc      	ite	gt
 80125ae:	2500      	movgt	r5, #0
 80125b0:	2501      	movle	r5, #1
 80125b2:	2b03      	cmp	r3, #3
 80125b4:	d866      	bhi.n	8012684 <_dtoa_r+0x2dc>
 80125b6:	e8df f003 	tbb	[pc, r3]
 80125ba:	5755      	.short	0x5755
 80125bc:	4909      	.short	0x4909
 80125be:	2300      	movs	r3, #0
 80125c0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80125c4:	f1cb 0800 	rsb	r8, fp, #0
 80125c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80125ca:	e7e5      	b.n	8012598 <_dtoa_r+0x1f0>
 80125cc:	2301      	movs	r3, #1
 80125ce:	9309      	str	r3, [sp, #36]	; 0x24
 80125d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	dd59      	ble.n	801268a <_dtoa_r+0x2e2>
 80125d6:	9306      	str	r3, [sp, #24]
 80125d8:	4699      	mov	r9, r3
 80125da:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80125dc:	2200      	movs	r2, #0
 80125de:	6072      	str	r2, [r6, #4]
 80125e0:	2204      	movs	r2, #4
 80125e2:	f102 0014 	add.w	r0, r2, #20
 80125e6:	4298      	cmp	r0, r3
 80125e8:	6871      	ldr	r1, [r6, #4]
 80125ea:	d953      	bls.n	8012694 <_dtoa_r+0x2ec>
 80125ec:	4620      	mov	r0, r4
 80125ee:	f000 fc5f 	bl	8012eb0 <_Balloc>
 80125f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125f4:	6030      	str	r0, [r6, #0]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	9304      	str	r3, [sp, #16]
 80125fa:	f1b9 0f0e 	cmp.w	r9, #14
 80125fe:	f200 80c2 	bhi.w	8012786 <_dtoa_r+0x3de>
 8012602:	2d00      	cmp	r5, #0
 8012604:	f000 80bf 	beq.w	8012786 <_dtoa_r+0x3de>
 8012608:	ed9d 7b02 	vldr	d7, [sp, #8]
 801260c:	f1bb 0f00 	cmp.w	fp, #0
 8012610:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012614:	f340 80e6 	ble.w	80127e4 <_dtoa_r+0x43c>
 8012618:	4a2b      	ldr	r2, [pc, #172]	; (80126c8 <_dtoa_r+0x320>)
 801261a:	f00b 030f 	and.w	r3, fp, #15
 801261e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012622:	ed93 7b00 	vldr	d7, [r3]
 8012626:	ea4f 132b 	mov.w	r3, fp, asr #4
 801262a:	06da      	lsls	r2, r3, #27
 801262c:	f140 80d8 	bpl.w	80127e0 <_dtoa_r+0x438>
 8012630:	4a26      	ldr	r2, [pc, #152]	; (80126cc <_dtoa_r+0x324>)
 8012632:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8012636:	ed92 6b08 	vldr	d6, [r2, #32]
 801263a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801263e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012642:	f003 030f 	and.w	r3, r3, #15
 8012646:	2203      	movs	r2, #3
 8012648:	4920      	ldr	r1, [pc, #128]	; (80126cc <_dtoa_r+0x324>)
 801264a:	e04a      	b.n	80126e2 <_dtoa_r+0x33a>
 801264c:	2301      	movs	r3, #1
 801264e:	9309      	str	r3, [sp, #36]	; 0x24
 8012650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012652:	445b      	add	r3, fp
 8012654:	f103 0901 	add.w	r9, r3, #1
 8012658:	9306      	str	r3, [sp, #24]
 801265a:	464b      	mov	r3, r9
 801265c:	2b01      	cmp	r3, #1
 801265e:	bfb8      	it	lt
 8012660:	2301      	movlt	r3, #1
 8012662:	e7ba      	b.n	80125da <_dtoa_r+0x232>
 8012664:	2300      	movs	r3, #0
 8012666:	e7b2      	b.n	80125ce <_dtoa_r+0x226>
 8012668:	2300      	movs	r3, #0
 801266a:	e7f0      	b.n	801264e <_dtoa_r+0x2a6>
 801266c:	2501      	movs	r5, #1
 801266e:	2300      	movs	r3, #0
 8012670:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8012674:	f04f 33ff 	mov.w	r3, #4294967295
 8012678:	9306      	str	r3, [sp, #24]
 801267a:	4699      	mov	r9, r3
 801267c:	2200      	movs	r2, #0
 801267e:	2312      	movs	r3, #18
 8012680:	920a      	str	r2, [sp, #40]	; 0x28
 8012682:	e7aa      	b.n	80125da <_dtoa_r+0x232>
 8012684:	2301      	movs	r3, #1
 8012686:	9309      	str	r3, [sp, #36]	; 0x24
 8012688:	e7f4      	b.n	8012674 <_dtoa_r+0x2cc>
 801268a:	2301      	movs	r3, #1
 801268c:	9306      	str	r3, [sp, #24]
 801268e:	4699      	mov	r9, r3
 8012690:	461a      	mov	r2, r3
 8012692:	e7f5      	b.n	8012680 <_dtoa_r+0x2d8>
 8012694:	3101      	adds	r1, #1
 8012696:	6071      	str	r1, [r6, #4]
 8012698:	0052      	lsls	r2, r2, #1
 801269a:	e7a2      	b.n	80125e2 <_dtoa_r+0x23a>
 801269c:	f3af 8000 	nop.w
 80126a0:	636f4361 	.word	0x636f4361
 80126a4:	3fd287a7 	.word	0x3fd287a7
 80126a8:	8b60c8b3 	.word	0x8b60c8b3
 80126ac:	3fc68a28 	.word	0x3fc68a28
 80126b0:	509f79fb 	.word	0x509f79fb
 80126b4:	3fd34413 	.word	0x3fd34413
 80126b8:	7ff00000 	.word	0x7ff00000
 80126bc:	080154f5 	.word	0x080154f5
 80126c0:	080154ec 	.word	0x080154ec
 80126c4:	080154c9 	.word	0x080154c9
 80126c8:	08015530 	.word	0x08015530
 80126cc:	08015508 	.word	0x08015508
 80126d0:	07de      	lsls	r6, r3, #31
 80126d2:	d504      	bpl.n	80126de <_dtoa_r+0x336>
 80126d4:	ed91 6b00 	vldr	d6, [r1]
 80126d8:	3201      	adds	r2, #1
 80126da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80126de:	105b      	asrs	r3, r3, #1
 80126e0:	3108      	adds	r1, #8
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d1f4      	bne.n	80126d0 <_dtoa_r+0x328>
 80126e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80126ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80126ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80126f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	f000 80a7 	beq.w	8012848 <_dtoa_r+0x4a0>
 80126fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80126fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012702:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801270a:	f140 809d 	bpl.w	8012848 <_dtoa_r+0x4a0>
 801270e:	f1b9 0f00 	cmp.w	r9, #0
 8012712:	f000 8099 	beq.w	8012848 <_dtoa_r+0x4a0>
 8012716:	9b06      	ldr	r3, [sp, #24]
 8012718:	2b00      	cmp	r3, #0
 801271a:	dd30      	ble.n	801277e <_dtoa_r+0x3d6>
 801271c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012720:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012724:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012728:	9d06      	ldr	r5, [sp, #24]
 801272a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801272e:	3201      	adds	r2, #1
 8012730:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012734:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012738:	ee07 2a90 	vmov	s15, r2
 801273c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012740:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012744:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012748:	9a03      	ldr	r2, [sp, #12]
 801274a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801274e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8012752:	2d00      	cmp	r5, #0
 8012754:	d17b      	bne.n	801284e <_dtoa_r+0x4a6>
 8012756:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801275a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801275e:	ec41 0b17 	vmov	d7, r0, r1
 8012762:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801276a:	f300 8253 	bgt.w	8012c14 <_dtoa_r+0x86c>
 801276e:	eeb1 7b47 	vneg.f64	d7, d7
 8012772:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277a:	f100 8249 	bmi.w	8012c10 <_dtoa_r+0x868>
 801277e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012782:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012786:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012788:	2b00      	cmp	r3, #0
 801278a:	f2c0 8119 	blt.w	80129c0 <_dtoa_r+0x618>
 801278e:	f1bb 0f0e 	cmp.w	fp, #14
 8012792:	f300 8115 	bgt.w	80129c0 <_dtoa_r+0x618>
 8012796:	4bc3      	ldr	r3, [pc, #780]	; (8012aa4 <_dtoa_r+0x6fc>)
 8012798:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801279c:	ed93 6b00 	vldr	d6, [r3]
 80127a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f280 80ba 	bge.w	801291c <_dtoa_r+0x574>
 80127a8:	f1b9 0f00 	cmp.w	r9, #0
 80127ac:	f300 80b6 	bgt.w	801291c <_dtoa_r+0x574>
 80127b0:	f040 822d 	bne.w	8012c0e <_dtoa_r+0x866>
 80127b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80127b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80127bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80127c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127c8:	464d      	mov	r5, r9
 80127ca:	464f      	mov	r7, r9
 80127cc:	f280 8204 	bge.w	8012bd8 <_dtoa_r+0x830>
 80127d0:	9b04      	ldr	r3, [sp, #16]
 80127d2:	9a04      	ldr	r2, [sp, #16]
 80127d4:	1c5e      	adds	r6, r3, #1
 80127d6:	2331      	movs	r3, #49	; 0x31
 80127d8:	7013      	strb	r3, [r2, #0]
 80127da:	f10b 0b01 	add.w	fp, fp, #1
 80127de:	e1ff      	b.n	8012be0 <_dtoa_r+0x838>
 80127e0:	2202      	movs	r2, #2
 80127e2:	e731      	b.n	8012648 <_dtoa_r+0x2a0>
 80127e4:	d02e      	beq.n	8012844 <_dtoa_r+0x49c>
 80127e6:	f1cb 0300 	rsb	r3, fp, #0
 80127ea:	4aae      	ldr	r2, [pc, #696]	; (8012aa4 <_dtoa_r+0x6fc>)
 80127ec:	f003 010f 	and.w	r1, r3, #15
 80127f0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80127f4:	ed92 7b00 	vldr	d7, [r2]
 80127f8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80127fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012800:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012804:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012808:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801280c:	49a6      	ldr	r1, [pc, #664]	; (8012aa8 <_dtoa_r+0x700>)
 801280e:	111b      	asrs	r3, r3, #4
 8012810:	2000      	movs	r0, #0
 8012812:	2202      	movs	r2, #2
 8012814:	b93b      	cbnz	r3, 8012826 <_dtoa_r+0x47e>
 8012816:	2800      	cmp	r0, #0
 8012818:	f43f af6b 	beq.w	80126f2 <_dtoa_r+0x34a>
 801281c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012824:	e765      	b.n	80126f2 <_dtoa_r+0x34a>
 8012826:	07dd      	lsls	r5, r3, #31
 8012828:	d509      	bpl.n	801283e <_dtoa_r+0x496>
 801282a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801282e:	ed91 7b00 	vldr	d7, [r1]
 8012832:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012836:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801283a:	3201      	adds	r2, #1
 801283c:	2001      	movs	r0, #1
 801283e:	105b      	asrs	r3, r3, #1
 8012840:	3108      	adds	r1, #8
 8012842:	e7e7      	b.n	8012814 <_dtoa_r+0x46c>
 8012844:	2202      	movs	r2, #2
 8012846:	e754      	b.n	80126f2 <_dtoa_r+0x34a>
 8012848:	465b      	mov	r3, fp
 801284a:	464d      	mov	r5, r9
 801284c:	e770      	b.n	8012730 <_dtoa_r+0x388>
 801284e:	4a95      	ldr	r2, [pc, #596]	; (8012aa4 <_dtoa_r+0x6fc>)
 8012850:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8012854:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801285a:	ec41 0b17 	vmov	d7, r0, r1
 801285e:	b35a      	cbz	r2, 80128b8 <_dtoa_r+0x510>
 8012860:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012864:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012868:	9e04      	ldr	r6, [sp, #16]
 801286a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801286e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012872:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012876:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801287a:	ee14 2a90 	vmov	r2, s9
 801287e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012882:	3230      	adds	r2, #48	; 0x30
 8012884:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012888:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801288c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012890:	f806 2b01 	strb.w	r2, [r6], #1
 8012894:	d43b      	bmi.n	801290e <_dtoa_r+0x566>
 8012896:	ee32 5b46 	vsub.f64	d5, d2, d6
 801289a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801289e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a2:	d472      	bmi.n	801298a <_dtoa_r+0x5e2>
 80128a4:	9a04      	ldr	r2, [sp, #16]
 80128a6:	1ab2      	subs	r2, r6, r2
 80128a8:	4295      	cmp	r5, r2
 80128aa:	f77f af68 	ble.w	801277e <_dtoa_r+0x3d6>
 80128ae:	ee27 7b03 	vmul.f64	d7, d7, d3
 80128b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80128b6:	e7de      	b.n	8012876 <_dtoa_r+0x4ce>
 80128b8:	9a04      	ldr	r2, [sp, #16]
 80128ba:	ee24 7b07 	vmul.f64	d7, d4, d7
 80128be:	1956      	adds	r6, r2, r5
 80128c0:	4611      	mov	r1, r2
 80128c2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80128c6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80128ca:	ee14 2a90 	vmov	r2, s9
 80128ce:	3230      	adds	r2, #48	; 0x30
 80128d0:	f801 2b01 	strb.w	r2, [r1], #1
 80128d4:	42b1      	cmp	r1, r6
 80128d6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80128da:	ee36 6b45 	vsub.f64	d6, d6, d5
 80128de:	d11a      	bne.n	8012916 <_dtoa_r+0x56e>
 80128e0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80128e4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80128e8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80128ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f0:	dc4b      	bgt.n	801298a <_dtoa_r+0x5e2>
 80128f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80128f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fe:	f57f af3e 	bpl.w	801277e <_dtoa_r+0x3d6>
 8012902:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012906:	2a30      	cmp	r2, #48	; 0x30
 8012908:	f106 31ff 	add.w	r1, r6, #4294967295
 801290c:	d001      	beq.n	8012912 <_dtoa_r+0x56a>
 801290e:	469b      	mov	fp, r3
 8012910:	e02a      	b.n	8012968 <_dtoa_r+0x5c0>
 8012912:	460e      	mov	r6, r1
 8012914:	e7f5      	b.n	8012902 <_dtoa_r+0x55a>
 8012916:	ee26 6b03 	vmul.f64	d6, d6, d3
 801291a:	e7d4      	b.n	80128c6 <_dtoa_r+0x51e>
 801291c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012920:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012924:	9e04      	ldr	r6, [sp, #16]
 8012926:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801292a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801292e:	ee15 3a10 	vmov	r3, s10
 8012932:	3330      	adds	r3, #48	; 0x30
 8012934:	f806 3b01 	strb.w	r3, [r6], #1
 8012938:	9b04      	ldr	r3, [sp, #16]
 801293a:	1af3      	subs	r3, r6, r3
 801293c:	4599      	cmp	r9, r3
 801293e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012942:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012946:	d133      	bne.n	80129b0 <_dtoa_r+0x608>
 8012948:	ee37 7b07 	vadd.f64	d7, d7, d7
 801294c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012954:	dc18      	bgt.n	8012988 <_dtoa_r+0x5e0>
 8012956:	eeb4 7b46 	vcmp.f64	d7, d6
 801295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295e:	d103      	bne.n	8012968 <_dtoa_r+0x5c0>
 8012960:	ee15 3a10 	vmov	r3, s10
 8012964:	07db      	lsls	r3, r3, #31
 8012966:	d40f      	bmi.n	8012988 <_dtoa_r+0x5e0>
 8012968:	9901      	ldr	r1, [sp, #4]
 801296a:	4620      	mov	r0, r4
 801296c:	f000 fad4 	bl	8012f18 <_Bfree>
 8012970:	2300      	movs	r3, #0
 8012972:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012974:	7033      	strb	r3, [r6, #0]
 8012976:	f10b 0301 	add.w	r3, fp, #1
 801297a:	6013      	str	r3, [r2, #0]
 801297c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801297e:	2b00      	cmp	r3, #0
 8012980:	f43f ad5b 	beq.w	801243a <_dtoa_r+0x92>
 8012984:	601e      	str	r6, [r3, #0]
 8012986:	e558      	b.n	801243a <_dtoa_r+0x92>
 8012988:	465b      	mov	r3, fp
 801298a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801298e:	2939      	cmp	r1, #57	; 0x39
 8012990:	f106 32ff 	add.w	r2, r6, #4294967295
 8012994:	d106      	bne.n	80129a4 <_dtoa_r+0x5fc>
 8012996:	9904      	ldr	r1, [sp, #16]
 8012998:	4291      	cmp	r1, r2
 801299a:	d107      	bne.n	80129ac <_dtoa_r+0x604>
 801299c:	2230      	movs	r2, #48	; 0x30
 801299e:	700a      	strb	r2, [r1, #0]
 80129a0:	3301      	adds	r3, #1
 80129a2:	460a      	mov	r2, r1
 80129a4:	7811      	ldrb	r1, [r2, #0]
 80129a6:	3101      	adds	r1, #1
 80129a8:	7011      	strb	r1, [r2, #0]
 80129aa:	e7b0      	b.n	801290e <_dtoa_r+0x566>
 80129ac:	4616      	mov	r6, r2
 80129ae:	e7ec      	b.n	801298a <_dtoa_r+0x5e2>
 80129b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80129b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80129b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129bc:	d1b3      	bne.n	8012926 <_dtoa_r+0x57e>
 80129be:	e7d3      	b.n	8012968 <_dtoa_r+0x5c0>
 80129c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129c2:	2a00      	cmp	r2, #0
 80129c4:	f000 808d 	beq.w	8012ae2 <_dtoa_r+0x73a>
 80129c8:	9a08      	ldr	r2, [sp, #32]
 80129ca:	2a01      	cmp	r2, #1
 80129cc:	dc72      	bgt.n	8012ab4 <_dtoa_r+0x70c>
 80129ce:	2f00      	cmp	r7, #0
 80129d0:	d06c      	beq.n	8012aac <_dtoa_r+0x704>
 80129d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80129d6:	4645      	mov	r5, r8
 80129d8:	4656      	mov	r6, sl
 80129da:	9a07      	ldr	r2, [sp, #28]
 80129dc:	2101      	movs	r1, #1
 80129de:	441a      	add	r2, r3
 80129e0:	4620      	mov	r0, r4
 80129e2:	449a      	add	sl, r3
 80129e4:	9207      	str	r2, [sp, #28]
 80129e6:	f000 fb37 	bl	8013058 <__i2b>
 80129ea:	4607      	mov	r7, r0
 80129ec:	2e00      	cmp	r6, #0
 80129ee:	dd0b      	ble.n	8012a08 <_dtoa_r+0x660>
 80129f0:	9b07      	ldr	r3, [sp, #28]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	dd08      	ble.n	8012a08 <_dtoa_r+0x660>
 80129f6:	42b3      	cmp	r3, r6
 80129f8:	9a07      	ldr	r2, [sp, #28]
 80129fa:	bfa8      	it	ge
 80129fc:	4633      	movge	r3, r6
 80129fe:	ebaa 0a03 	sub.w	sl, sl, r3
 8012a02:	1af6      	subs	r6, r6, r3
 8012a04:	1ad3      	subs	r3, r2, r3
 8012a06:	9307      	str	r3, [sp, #28]
 8012a08:	f1b8 0f00 	cmp.w	r8, #0
 8012a0c:	d01d      	beq.n	8012a4a <_dtoa_r+0x6a2>
 8012a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d06a      	beq.n	8012aea <_dtoa_r+0x742>
 8012a14:	b18d      	cbz	r5, 8012a3a <_dtoa_r+0x692>
 8012a16:	4639      	mov	r1, r7
 8012a18:	462a      	mov	r2, r5
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f000 fbbc 	bl	8013198 <__pow5mult>
 8012a20:	9a01      	ldr	r2, [sp, #4]
 8012a22:	4601      	mov	r1, r0
 8012a24:	4607      	mov	r7, r0
 8012a26:	4620      	mov	r0, r4
 8012a28:	f000 fb1f 	bl	801306a <__multiply>
 8012a2c:	9901      	ldr	r1, [sp, #4]
 8012a2e:	900c      	str	r0, [sp, #48]	; 0x30
 8012a30:	4620      	mov	r0, r4
 8012a32:	f000 fa71 	bl	8012f18 <_Bfree>
 8012a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a38:	9301      	str	r3, [sp, #4]
 8012a3a:	ebb8 0205 	subs.w	r2, r8, r5
 8012a3e:	d004      	beq.n	8012a4a <_dtoa_r+0x6a2>
 8012a40:	9901      	ldr	r1, [sp, #4]
 8012a42:	4620      	mov	r0, r4
 8012a44:	f000 fba8 	bl	8013198 <__pow5mult>
 8012a48:	9001      	str	r0, [sp, #4]
 8012a4a:	2101      	movs	r1, #1
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	f000 fb03 	bl	8013058 <__i2b>
 8012a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a54:	4605      	mov	r5, r0
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f000 81ca 	beq.w	8012df0 <_dtoa_r+0xa48>
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	4601      	mov	r1, r0
 8012a60:	4620      	mov	r0, r4
 8012a62:	f000 fb99 	bl	8013198 <__pow5mult>
 8012a66:	9b08      	ldr	r3, [sp, #32]
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	4605      	mov	r5, r0
 8012a6c:	dc44      	bgt.n	8012af8 <_dtoa_r+0x750>
 8012a6e:	9b02      	ldr	r3, [sp, #8]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d13c      	bne.n	8012aee <_dtoa_r+0x746>
 8012a74:	9b03      	ldr	r3, [sp, #12]
 8012a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d137      	bne.n	8012aee <_dtoa_r+0x746>
 8012a7e:	9b03      	ldr	r3, [sp, #12]
 8012a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a84:	0d1b      	lsrs	r3, r3, #20
 8012a86:	051b      	lsls	r3, r3, #20
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d033      	beq.n	8012af4 <_dtoa_r+0x74c>
 8012a8c:	9b07      	ldr	r3, [sp, #28]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	f10a 0a01 	add.w	sl, sl, #1
 8012a94:	9307      	str	r3, [sp, #28]
 8012a96:	f04f 0801 	mov.w	r8, #1
 8012a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a9c:	bb73      	cbnz	r3, 8012afc <_dtoa_r+0x754>
 8012a9e:	2001      	movs	r0, #1
 8012aa0:	e034      	b.n	8012b0c <_dtoa_r+0x764>
 8012aa2:	bf00      	nop
 8012aa4:	08015530 	.word	0x08015530
 8012aa8:	08015508 	.word	0x08015508
 8012aac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012ab2:	e790      	b.n	80129d6 <_dtoa_r+0x62e>
 8012ab4:	f109 35ff 	add.w	r5, r9, #4294967295
 8012ab8:	45a8      	cmp	r8, r5
 8012aba:	bfbf      	itttt	lt
 8012abc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8012abe:	eba5 0808 	sublt.w	r8, r5, r8
 8012ac2:	4443      	addlt	r3, r8
 8012ac4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8012ac6:	bfb6      	itet	lt
 8012ac8:	46a8      	movlt	r8, r5
 8012aca:	eba8 0505 	subge.w	r5, r8, r5
 8012ace:	2500      	movlt	r5, #0
 8012ad0:	f1b9 0f00 	cmp.w	r9, #0
 8012ad4:	bfb9      	ittee	lt
 8012ad6:	ebaa 0609 	sublt.w	r6, sl, r9
 8012ada:	2300      	movlt	r3, #0
 8012adc:	4656      	movge	r6, sl
 8012ade:	464b      	movge	r3, r9
 8012ae0:	e77b      	b.n	80129da <_dtoa_r+0x632>
 8012ae2:	4645      	mov	r5, r8
 8012ae4:	4656      	mov	r6, sl
 8012ae6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012ae8:	e780      	b.n	80129ec <_dtoa_r+0x644>
 8012aea:	4642      	mov	r2, r8
 8012aec:	e7a8      	b.n	8012a40 <_dtoa_r+0x698>
 8012aee:	f04f 0800 	mov.w	r8, #0
 8012af2:	e7d2      	b.n	8012a9a <_dtoa_r+0x6f2>
 8012af4:	4698      	mov	r8, r3
 8012af6:	e7d0      	b.n	8012a9a <_dtoa_r+0x6f2>
 8012af8:	f04f 0800 	mov.w	r8, #0
 8012afc:	692b      	ldr	r3, [r5, #16]
 8012afe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012b02:	6918      	ldr	r0, [r3, #16]
 8012b04:	f000 fa5a 	bl	8012fbc <__hi0bits>
 8012b08:	f1c0 0020 	rsb	r0, r0, #32
 8012b0c:	9b07      	ldr	r3, [sp, #28]
 8012b0e:	4418      	add	r0, r3
 8012b10:	f010 001f 	ands.w	r0, r0, #31
 8012b14:	d047      	beq.n	8012ba6 <_dtoa_r+0x7fe>
 8012b16:	f1c0 0320 	rsb	r3, r0, #32
 8012b1a:	2b04      	cmp	r3, #4
 8012b1c:	dd3b      	ble.n	8012b96 <_dtoa_r+0x7ee>
 8012b1e:	9b07      	ldr	r3, [sp, #28]
 8012b20:	f1c0 001c 	rsb	r0, r0, #28
 8012b24:	4482      	add	sl, r0
 8012b26:	4406      	add	r6, r0
 8012b28:	4403      	add	r3, r0
 8012b2a:	9307      	str	r3, [sp, #28]
 8012b2c:	f1ba 0f00 	cmp.w	sl, #0
 8012b30:	dd05      	ble.n	8012b3e <_dtoa_r+0x796>
 8012b32:	4652      	mov	r2, sl
 8012b34:	9901      	ldr	r1, [sp, #4]
 8012b36:	4620      	mov	r0, r4
 8012b38:	f000 fb7c 	bl	8013234 <__lshift>
 8012b3c:	9001      	str	r0, [sp, #4]
 8012b3e:	9b07      	ldr	r3, [sp, #28]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	dd05      	ble.n	8012b50 <_dtoa_r+0x7a8>
 8012b44:	4629      	mov	r1, r5
 8012b46:	461a      	mov	r2, r3
 8012b48:	4620      	mov	r0, r4
 8012b4a:	f000 fb73 	bl	8013234 <__lshift>
 8012b4e:	4605      	mov	r5, r0
 8012b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b52:	b353      	cbz	r3, 8012baa <_dtoa_r+0x802>
 8012b54:	4629      	mov	r1, r5
 8012b56:	9801      	ldr	r0, [sp, #4]
 8012b58:	f000 fbc0 	bl	80132dc <__mcmp>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	da24      	bge.n	8012baa <_dtoa_r+0x802>
 8012b60:	2300      	movs	r3, #0
 8012b62:	220a      	movs	r2, #10
 8012b64:	9901      	ldr	r1, [sp, #4]
 8012b66:	4620      	mov	r0, r4
 8012b68:	f000 f9ed 	bl	8012f46 <__multadd>
 8012b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b6e:	9001      	str	r0, [sp, #4]
 8012b70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	f000 8142 	beq.w	8012dfe <_dtoa_r+0xa56>
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	4639      	mov	r1, r7
 8012b7e:	220a      	movs	r2, #10
 8012b80:	4620      	mov	r0, r4
 8012b82:	f000 f9e0 	bl	8012f46 <__multadd>
 8012b86:	9b06      	ldr	r3, [sp, #24]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	4607      	mov	r7, r0
 8012b8c:	dc4b      	bgt.n	8012c26 <_dtoa_r+0x87e>
 8012b8e:	9b08      	ldr	r3, [sp, #32]
 8012b90:	2b02      	cmp	r3, #2
 8012b92:	dd48      	ble.n	8012c26 <_dtoa_r+0x87e>
 8012b94:	e011      	b.n	8012bba <_dtoa_r+0x812>
 8012b96:	d0c9      	beq.n	8012b2c <_dtoa_r+0x784>
 8012b98:	9a07      	ldr	r2, [sp, #28]
 8012b9a:	331c      	adds	r3, #28
 8012b9c:	441a      	add	r2, r3
 8012b9e:	449a      	add	sl, r3
 8012ba0:	441e      	add	r6, r3
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	e7c1      	b.n	8012b2a <_dtoa_r+0x782>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	e7f6      	b.n	8012b98 <_dtoa_r+0x7f0>
 8012baa:	f1b9 0f00 	cmp.w	r9, #0
 8012bae:	dc34      	bgt.n	8012c1a <_dtoa_r+0x872>
 8012bb0:	9b08      	ldr	r3, [sp, #32]
 8012bb2:	2b02      	cmp	r3, #2
 8012bb4:	dd31      	ble.n	8012c1a <_dtoa_r+0x872>
 8012bb6:	f8cd 9018 	str.w	r9, [sp, #24]
 8012bba:	9b06      	ldr	r3, [sp, #24]
 8012bbc:	b963      	cbnz	r3, 8012bd8 <_dtoa_r+0x830>
 8012bbe:	4629      	mov	r1, r5
 8012bc0:	2205      	movs	r2, #5
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f000 f9bf 	bl	8012f46 <__multadd>
 8012bc8:	4601      	mov	r1, r0
 8012bca:	4605      	mov	r5, r0
 8012bcc:	9801      	ldr	r0, [sp, #4]
 8012bce:	f000 fb85 	bl	80132dc <__mcmp>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	f73f adfc 	bgt.w	80127d0 <_dtoa_r+0x428>
 8012bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bda:	9e04      	ldr	r6, [sp, #16]
 8012bdc:	ea6f 0b03 	mvn.w	fp, r3
 8012be0:	f04f 0900 	mov.w	r9, #0
 8012be4:	4629      	mov	r1, r5
 8012be6:	4620      	mov	r0, r4
 8012be8:	f000 f996 	bl	8012f18 <_Bfree>
 8012bec:	2f00      	cmp	r7, #0
 8012bee:	f43f aebb 	beq.w	8012968 <_dtoa_r+0x5c0>
 8012bf2:	f1b9 0f00 	cmp.w	r9, #0
 8012bf6:	d005      	beq.n	8012c04 <_dtoa_r+0x85c>
 8012bf8:	45b9      	cmp	r9, r7
 8012bfa:	d003      	beq.n	8012c04 <_dtoa_r+0x85c>
 8012bfc:	4649      	mov	r1, r9
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f000 f98a 	bl	8012f18 <_Bfree>
 8012c04:	4639      	mov	r1, r7
 8012c06:	4620      	mov	r0, r4
 8012c08:	f000 f986 	bl	8012f18 <_Bfree>
 8012c0c:	e6ac      	b.n	8012968 <_dtoa_r+0x5c0>
 8012c0e:	2500      	movs	r5, #0
 8012c10:	462f      	mov	r7, r5
 8012c12:	e7e1      	b.n	8012bd8 <_dtoa_r+0x830>
 8012c14:	469b      	mov	fp, r3
 8012c16:	462f      	mov	r7, r5
 8012c18:	e5da      	b.n	80127d0 <_dtoa_r+0x428>
 8012c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c1c:	f8cd 9018 	str.w	r9, [sp, #24]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	f000 80f3 	beq.w	8012e0c <_dtoa_r+0xa64>
 8012c26:	2e00      	cmp	r6, #0
 8012c28:	dd05      	ble.n	8012c36 <_dtoa_r+0x88e>
 8012c2a:	4639      	mov	r1, r7
 8012c2c:	4632      	mov	r2, r6
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f000 fb00 	bl	8013234 <__lshift>
 8012c34:	4607      	mov	r7, r0
 8012c36:	f1b8 0f00 	cmp.w	r8, #0
 8012c3a:	d04c      	beq.n	8012cd6 <_dtoa_r+0x92e>
 8012c3c:	6879      	ldr	r1, [r7, #4]
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f000 f936 	bl	8012eb0 <_Balloc>
 8012c44:	693a      	ldr	r2, [r7, #16]
 8012c46:	3202      	adds	r2, #2
 8012c48:	4606      	mov	r6, r0
 8012c4a:	0092      	lsls	r2, r2, #2
 8012c4c:	f107 010c 	add.w	r1, r7, #12
 8012c50:	300c      	adds	r0, #12
 8012c52:	f7fe fd86 	bl	8011762 <memcpy>
 8012c56:	2201      	movs	r2, #1
 8012c58:	4631      	mov	r1, r6
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f000 faea 	bl	8013234 <__lshift>
 8012c60:	9b02      	ldr	r3, [sp, #8]
 8012c62:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012c66:	f003 0301 	and.w	r3, r3, #1
 8012c6a:	46b9      	mov	r9, r7
 8012c6c:	9307      	str	r3, [sp, #28]
 8012c6e:	4607      	mov	r7, r0
 8012c70:	4629      	mov	r1, r5
 8012c72:	9801      	ldr	r0, [sp, #4]
 8012c74:	f7ff fb0c 	bl	8012290 <quorem>
 8012c78:	4649      	mov	r1, r9
 8012c7a:	4606      	mov	r6, r0
 8012c7c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012c80:	9801      	ldr	r0, [sp, #4]
 8012c82:	f000 fb2b 	bl	80132dc <__mcmp>
 8012c86:	463a      	mov	r2, r7
 8012c88:	9002      	str	r0, [sp, #8]
 8012c8a:	4629      	mov	r1, r5
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	f000 fb3f 	bl	8013310 <__mdiff>
 8012c92:	68c3      	ldr	r3, [r0, #12]
 8012c94:	4602      	mov	r2, r0
 8012c96:	bb03      	cbnz	r3, 8012cda <_dtoa_r+0x932>
 8012c98:	4601      	mov	r1, r0
 8012c9a:	9009      	str	r0, [sp, #36]	; 0x24
 8012c9c:	9801      	ldr	r0, [sp, #4]
 8012c9e:	f000 fb1d 	bl	80132dc <__mcmp>
 8012ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	4611      	mov	r1, r2
 8012ca8:	4620      	mov	r0, r4
 8012caa:	9309      	str	r3, [sp, #36]	; 0x24
 8012cac:	f000 f934 	bl	8012f18 <_Bfree>
 8012cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cb2:	b9a3      	cbnz	r3, 8012cde <_dtoa_r+0x936>
 8012cb4:	9a08      	ldr	r2, [sp, #32]
 8012cb6:	b992      	cbnz	r2, 8012cde <_dtoa_r+0x936>
 8012cb8:	9a07      	ldr	r2, [sp, #28]
 8012cba:	b982      	cbnz	r2, 8012cde <_dtoa_r+0x936>
 8012cbc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012cc0:	d029      	beq.n	8012d16 <_dtoa_r+0x96e>
 8012cc2:	9b02      	ldr	r3, [sp, #8]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	dd01      	ble.n	8012ccc <_dtoa_r+0x924>
 8012cc8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8012ccc:	f10a 0601 	add.w	r6, sl, #1
 8012cd0:	f88a 8000 	strb.w	r8, [sl]
 8012cd4:	e786      	b.n	8012be4 <_dtoa_r+0x83c>
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	e7c2      	b.n	8012c60 <_dtoa_r+0x8b8>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	e7e3      	b.n	8012ca6 <_dtoa_r+0x8fe>
 8012cde:	9a02      	ldr	r2, [sp, #8]
 8012ce0:	2a00      	cmp	r2, #0
 8012ce2:	db04      	blt.n	8012cee <_dtoa_r+0x946>
 8012ce4:	d124      	bne.n	8012d30 <_dtoa_r+0x988>
 8012ce6:	9a08      	ldr	r2, [sp, #32]
 8012ce8:	bb12      	cbnz	r2, 8012d30 <_dtoa_r+0x988>
 8012cea:	9a07      	ldr	r2, [sp, #28]
 8012cec:	bb02      	cbnz	r2, 8012d30 <_dtoa_r+0x988>
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	ddec      	ble.n	8012ccc <_dtoa_r+0x924>
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	9901      	ldr	r1, [sp, #4]
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	f000 fa9c 	bl	8013234 <__lshift>
 8012cfc:	4629      	mov	r1, r5
 8012cfe:	9001      	str	r0, [sp, #4]
 8012d00:	f000 faec 	bl	80132dc <__mcmp>
 8012d04:	2800      	cmp	r0, #0
 8012d06:	dc03      	bgt.n	8012d10 <_dtoa_r+0x968>
 8012d08:	d1e0      	bne.n	8012ccc <_dtoa_r+0x924>
 8012d0a:	f018 0f01 	tst.w	r8, #1
 8012d0e:	d0dd      	beq.n	8012ccc <_dtoa_r+0x924>
 8012d10:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012d14:	d1d8      	bne.n	8012cc8 <_dtoa_r+0x920>
 8012d16:	2339      	movs	r3, #57	; 0x39
 8012d18:	f10a 0601 	add.w	r6, sl, #1
 8012d1c:	f88a 3000 	strb.w	r3, [sl]
 8012d20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012d24:	2b39      	cmp	r3, #57	; 0x39
 8012d26:	f106 32ff 	add.w	r2, r6, #4294967295
 8012d2a:	d04c      	beq.n	8012dc6 <_dtoa_r+0xa1e>
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	e051      	b.n	8012dd4 <_dtoa_r+0xa2c>
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	f10a 0601 	add.w	r6, sl, #1
 8012d36:	dd05      	ble.n	8012d44 <_dtoa_r+0x99c>
 8012d38:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012d3c:	d0eb      	beq.n	8012d16 <_dtoa_r+0x96e>
 8012d3e:	f108 0801 	add.w	r8, r8, #1
 8012d42:	e7c5      	b.n	8012cd0 <_dtoa_r+0x928>
 8012d44:	9b04      	ldr	r3, [sp, #16]
 8012d46:	9a06      	ldr	r2, [sp, #24]
 8012d48:	f806 8c01 	strb.w	r8, [r6, #-1]
 8012d4c:	1af3      	subs	r3, r6, r3
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d021      	beq.n	8012d96 <_dtoa_r+0x9ee>
 8012d52:	2300      	movs	r3, #0
 8012d54:	220a      	movs	r2, #10
 8012d56:	9901      	ldr	r1, [sp, #4]
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f000 f8f4 	bl	8012f46 <__multadd>
 8012d5e:	45b9      	cmp	r9, r7
 8012d60:	9001      	str	r0, [sp, #4]
 8012d62:	f04f 0300 	mov.w	r3, #0
 8012d66:	f04f 020a 	mov.w	r2, #10
 8012d6a:	4649      	mov	r1, r9
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	d105      	bne.n	8012d7c <_dtoa_r+0x9d4>
 8012d70:	f000 f8e9 	bl	8012f46 <__multadd>
 8012d74:	4681      	mov	r9, r0
 8012d76:	4607      	mov	r7, r0
 8012d78:	46b2      	mov	sl, r6
 8012d7a:	e779      	b.n	8012c70 <_dtoa_r+0x8c8>
 8012d7c:	f000 f8e3 	bl	8012f46 <__multadd>
 8012d80:	4639      	mov	r1, r7
 8012d82:	4681      	mov	r9, r0
 8012d84:	2300      	movs	r3, #0
 8012d86:	220a      	movs	r2, #10
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f000 f8dc 	bl	8012f46 <__multadd>
 8012d8e:	4607      	mov	r7, r0
 8012d90:	e7f2      	b.n	8012d78 <_dtoa_r+0x9d0>
 8012d92:	f04f 0900 	mov.w	r9, #0
 8012d96:	2201      	movs	r2, #1
 8012d98:	9901      	ldr	r1, [sp, #4]
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f000 fa4a 	bl	8013234 <__lshift>
 8012da0:	4629      	mov	r1, r5
 8012da2:	9001      	str	r0, [sp, #4]
 8012da4:	f000 fa9a 	bl	80132dc <__mcmp>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	dcb9      	bgt.n	8012d20 <_dtoa_r+0x978>
 8012dac:	d102      	bne.n	8012db4 <_dtoa_r+0xa0c>
 8012dae:	f018 0f01 	tst.w	r8, #1
 8012db2:	d1b5      	bne.n	8012d20 <_dtoa_r+0x978>
 8012db4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012db8:	2b30      	cmp	r3, #48	; 0x30
 8012dba:	f106 32ff 	add.w	r2, r6, #4294967295
 8012dbe:	f47f af11 	bne.w	8012be4 <_dtoa_r+0x83c>
 8012dc2:	4616      	mov	r6, r2
 8012dc4:	e7f6      	b.n	8012db4 <_dtoa_r+0xa0c>
 8012dc6:	9b04      	ldr	r3, [sp, #16]
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d105      	bne.n	8012dd8 <_dtoa_r+0xa30>
 8012dcc:	9a04      	ldr	r2, [sp, #16]
 8012dce:	f10b 0b01 	add.w	fp, fp, #1
 8012dd2:	2331      	movs	r3, #49	; 0x31
 8012dd4:	7013      	strb	r3, [r2, #0]
 8012dd6:	e705      	b.n	8012be4 <_dtoa_r+0x83c>
 8012dd8:	4616      	mov	r6, r2
 8012dda:	e7a1      	b.n	8012d20 <_dtoa_r+0x978>
 8012ddc:	4b16      	ldr	r3, [pc, #88]	; (8012e38 <_dtoa_r+0xa90>)
 8012dde:	f7ff bb48 	b.w	8012472 <_dtoa_r+0xca>
 8012de2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	f47f ab23 	bne.w	8012430 <_dtoa_r+0x88>
 8012dea:	4b14      	ldr	r3, [pc, #80]	; (8012e3c <_dtoa_r+0xa94>)
 8012dec:	f7ff bb41 	b.w	8012472 <_dtoa_r+0xca>
 8012df0:	9b08      	ldr	r3, [sp, #32]
 8012df2:	2b01      	cmp	r3, #1
 8012df4:	f77f ae3b 	ble.w	8012a6e <_dtoa_r+0x6c6>
 8012df8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012dfc:	e64f      	b.n	8012a9e <_dtoa_r+0x6f6>
 8012dfe:	9b06      	ldr	r3, [sp, #24]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	dc03      	bgt.n	8012e0c <_dtoa_r+0xa64>
 8012e04:	9b08      	ldr	r3, [sp, #32]
 8012e06:	2b02      	cmp	r3, #2
 8012e08:	f73f aed7 	bgt.w	8012bba <_dtoa_r+0x812>
 8012e0c:	9e04      	ldr	r6, [sp, #16]
 8012e0e:	9801      	ldr	r0, [sp, #4]
 8012e10:	4629      	mov	r1, r5
 8012e12:	f7ff fa3d 	bl	8012290 <quorem>
 8012e16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012e1a:	f806 8b01 	strb.w	r8, [r6], #1
 8012e1e:	9b04      	ldr	r3, [sp, #16]
 8012e20:	9a06      	ldr	r2, [sp, #24]
 8012e22:	1af3      	subs	r3, r6, r3
 8012e24:	429a      	cmp	r2, r3
 8012e26:	ddb4      	ble.n	8012d92 <_dtoa_r+0x9ea>
 8012e28:	2300      	movs	r3, #0
 8012e2a:	220a      	movs	r2, #10
 8012e2c:	9901      	ldr	r1, [sp, #4]
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f000 f889 	bl	8012f46 <__multadd>
 8012e34:	9001      	str	r0, [sp, #4]
 8012e36:	e7ea      	b.n	8012e0e <_dtoa_r+0xa66>
 8012e38:	080154c8 	.word	0x080154c8
 8012e3c:	080154ec 	.word	0x080154ec

08012e40 <__locale_ctype_ptr>:
 8012e40:	4b04      	ldr	r3, [pc, #16]	; (8012e54 <__locale_ctype_ptr+0x14>)
 8012e42:	4a05      	ldr	r2, [pc, #20]	; (8012e58 <__locale_ctype_ptr+0x18>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	6a1b      	ldr	r3, [r3, #32]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	bf08      	it	eq
 8012e4c:	4613      	moveq	r3, r2
 8012e4e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012e52:	4770      	bx	lr
 8012e54:	20000034 	.word	0x20000034
 8012e58:	20000098 	.word	0x20000098

08012e5c <_localeconv_r>:
 8012e5c:	4b04      	ldr	r3, [pc, #16]	; (8012e70 <_localeconv_r+0x14>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	6a18      	ldr	r0, [r3, #32]
 8012e62:	4b04      	ldr	r3, [pc, #16]	; (8012e74 <_localeconv_r+0x18>)
 8012e64:	2800      	cmp	r0, #0
 8012e66:	bf08      	it	eq
 8012e68:	4618      	moveq	r0, r3
 8012e6a:	30f0      	adds	r0, #240	; 0xf0
 8012e6c:	4770      	bx	lr
 8012e6e:	bf00      	nop
 8012e70:	20000034 	.word	0x20000034
 8012e74:	20000098 	.word	0x20000098

08012e78 <malloc>:
 8012e78:	4b02      	ldr	r3, [pc, #8]	; (8012e84 <malloc+0xc>)
 8012e7a:	4601      	mov	r1, r0
 8012e7c:	6818      	ldr	r0, [r3, #0]
 8012e7e:	f7fe bc9d 	b.w	80117bc <_malloc_r>
 8012e82:	bf00      	nop
 8012e84:	20000034 	.word	0x20000034

08012e88 <__ascii_mbtowc>:
 8012e88:	b082      	sub	sp, #8
 8012e8a:	b901      	cbnz	r1, 8012e8e <__ascii_mbtowc+0x6>
 8012e8c:	a901      	add	r1, sp, #4
 8012e8e:	b142      	cbz	r2, 8012ea2 <__ascii_mbtowc+0x1a>
 8012e90:	b14b      	cbz	r3, 8012ea6 <__ascii_mbtowc+0x1e>
 8012e92:	7813      	ldrb	r3, [r2, #0]
 8012e94:	600b      	str	r3, [r1, #0]
 8012e96:	7812      	ldrb	r2, [r2, #0]
 8012e98:	1c10      	adds	r0, r2, #0
 8012e9a:	bf18      	it	ne
 8012e9c:	2001      	movne	r0, #1
 8012e9e:	b002      	add	sp, #8
 8012ea0:	4770      	bx	lr
 8012ea2:	4610      	mov	r0, r2
 8012ea4:	e7fb      	b.n	8012e9e <__ascii_mbtowc+0x16>
 8012ea6:	f06f 0001 	mvn.w	r0, #1
 8012eaa:	e7f8      	b.n	8012e9e <__ascii_mbtowc+0x16>

08012eac <__malloc_lock>:
 8012eac:	4770      	bx	lr

08012eae <__malloc_unlock>:
 8012eae:	4770      	bx	lr

08012eb0 <_Balloc>:
 8012eb0:	b570      	push	{r4, r5, r6, lr}
 8012eb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012eb4:	4604      	mov	r4, r0
 8012eb6:	460e      	mov	r6, r1
 8012eb8:	b93d      	cbnz	r5, 8012eca <_Balloc+0x1a>
 8012eba:	2010      	movs	r0, #16
 8012ebc:	f7ff ffdc 	bl	8012e78 <malloc>
 8012ec0:	6260      	str	r0, [r4, #36]	; 0x24
 8012ec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012ec6:	6005      	str	r5, [r0, #0]
 8012ec8:	60c5      	str	r5, [r0, #12]
 8012eca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012ecc:	68eb      	ldr	r3, [r5, #12]
 8012ece:	b183      	cbz	r3, 8012ef2 <_Balloc+0x42>
 8012ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ed2:	68db      	ldr	r3, [r3, #12]
 8012ed4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012ed8:	b9b8      	cbnz	r0, 8012f0a <_Balloc+0x5a>
 8012eda:	2101      	movs	r1, #1
 8012edc:	fa01 f506 	lsl.w	r5, r1, r6
 8012ee0:	1d6a      	adds	r2, r5, #5
 8012ee2:	0092      	lsls	r2, r2, #2
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	f000 fabf 	bl	8013468 <_calloc_r>
 8012eea:	b160      	cbz	r0, 8012f06 <_Balloc+0x56>
 8012eec:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012ef0:	e00e      	b.n	8012f10 <_Balloc+0x60>
 8012ef2:	2221      	movs	r2, #33	; 0x21
 8012ef4:	2104      	movs	r1, #4
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	f000 fab6 	bl	8013468 <_calloc_r>
 8012efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012efe:	60e8      	str	r0, [r5, #12]
 8012f00:	68db      	ldr	r3, [r3, #12]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d1e4      	bne.n	8012ed0 <_Balloc+0x20>
 8012f06:	2000      	movs	r0, #0
 8012f08:	bd70      	pop	{r4, r5, r6, pc}
 8012f0a:	6802      	ldr	r2, [r0, #0]
 8012f0c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012f10:	2300      	movs	r3, #0
 8012f12:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012f16:	e7f7      	b.n	8012f08 <_Balloc+0x58>

08012f18 <_Bfree>:
 8012f18:	b570      	push	{r4, r5, r6, lr}
 8012f1a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012f1c:	4606      	mov	r6, r0
 8012f1e:	460d      	mov	r5, r1
 8012f20:	b93c      	cbnz	r4, 8012f32 <_Bfree+0x1a>
 8012f22:	2010      	movs	r0, #16
 8012f24:	f7ff ffa8 	bl	8012e78 <malloc>
 8012f28:	6270      	str	r0, [r6, #36]	; 0x24
 8012f2a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012f2e:	6004      	str	r4, [r0, #0]
 8012f30:	60c4      	str	r4, [r0, #12]
 8012f32:	b13d      	cbz	r5, 8012f44 <_Bfree+0x2c>
 8012f34:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012f36:	686a      	ldr	r2, [r5, #4]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f3e:	6029      	str	r1, [r5, #0]
 8012f40:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012f44:	bd70      	pop	{r4, r5, r6, pc}

08012f46 <__multadd>:
 8012f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f4a:	690d      	ldr	r5, [r1, #16]
 8012f4c:	461f      	mov	r7, r3
 8012f4e:	4606      	mov	r6, r0
 8012f50:	460c      	mov	r4, r1
 8012f52:	f101 0c14 	add.w	ip, r1, #20
 8012f56:	2300      	movs	r3, #0
 8012f58:	f8dc 0000 	ldr.w	r0, [ip]
 8012f5c:	b281      	uxth	r1, r0
 8012f5e:	fb02 7101 	mla	r1, r2, r1, r7
 8012f62:	0c0f      	lsrs	r7, r1, #16
 8012f64:	0c00      	lsrs	r0, r0, #16
 8012f66:	fb02 7000 	mla	r0, r2, r0, r7
 8012f6a:	b289      	uxth	r1, r1
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012f72:	429d      	cmp	r5, r3
 8012f74:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012f78:	f84c 1b04 	str.w	r1, [ip], #4
 8012f7c:	dcec      	bgt.n	8012f58 <__multadd+0x12>
 8012f7e:	b1d7      	cbz	r7, 8012fb6 <__multadd+0x70>
 8012f80:	68a3      	ldr	r3, [r4, #8]
 8012f82:	42ab      	cmp	r3, r5
 8012f84:	dc12      	bgt.n	8012fac <__multadd+0x66>
 8012f86:	6861      	ldr	r1, [r4, #4]
 8012f88:	4630      	mov	r0, r6
 8012f8a:	3101      	adds	r1, #1
 8012f8c:	f7ff ff90 	bl	8012eb0 <_Balloc>
 8012f90:	6922      	ldr	r2, [r4, #16]
 8012f92:	3202      	adds	r2, #2
 8012f94:	f104 010c 	add.w	r1, r4, #12
 8012f98:	4680      	mov	r8, r0
 8012f9a:	0092      	lsls	r2, r2, #2
 8012f9c:	300c      	adds	r0, #12
 8012f9e:	f7fe fbe0 	bl	8011762 <memcpy>
 8012fa2:	4621      	mov	r1, r4
 8012fa4:	4630      	mov	r0, r6
 8012fa6:	f7ff ffb7 	bl	8012f18 <_Bfree>
 8012faa:	4644      	mov	r4, r8
 8012fac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012fb0:	3501      	adds	r5, #1
 8012fb2:	615f      	str	r7, [r3, #20]
 8012fb4:	6125      	str	r5, [r4, #16]
 8012fb6:	4620      	mov	r0, r4
 8012fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012fbc <__hi0bits>:
 8012fbc:	0c02      	lsrs	r2, r0, #16
 8012fbe:	0412      	lsls	r2, r2, #16
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	b9b2      	cbnz	r2, 8012ff2 <__hi0bits+0x36>
 8012fc4:	0403      	lsls	r3, r0, #16
 8012fc6:	2010      	movs	r0, #16
 8012fc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012fcc:	bf04      	itt	eq
 8012fce:	021b      	lsleq	r3, r3, #8
 8012fd0:	3008      	addeq	r0, #8
 8012fd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012fd6:	bf04      	itt	eq
 8012fd8:	011b      	lsleq	r3, r3, #4
 8012fda:	3004      	addeq	r0, #4
 8012fdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012fe0:	bf04      	itt	eq
 8012fe2:	009b      	lsleq	r3, r3, #2
 8012fe4:	3002      	addeq	r0, #2
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	db06      	blt.n	8012ff8 <__hi0bits+0x3c>
 8012fea:	005b      	lsls	r3, r3, #1
 8012fec:	d503      	bpl.n	8012ff6 <__hi0bits+0x3a>
 8012fee:	3001      	adds	r0, #1
 8012ff0:	4770      	bx	lr
 8012ff2:	2000      	movs	r0, #0
 8012ff4:	e7e8      	b.n	8012fc8 <__hi0bits+0xc>
 8012ff6:	2020      	movs	r0, #32
 8012ff8:	4770      	bx	lr

08012ffa <__lo0bits>:
 8012ffa:	6803      	ldr	r3, [r0, #0]
 8012ffc:	f013 0207 	ands.w	r2, r3, #7
 8013000:	4601      	mov	r1, r0
 8013002:	d00b      	beq.n	801301c <__lo0bits+0x22>
 8013004:	07da      	lsls	r2, r3, #31
 8013006:	d423      	bmi.n	8013050 <__lo0bits+0x56>
 8013008:	0798      	lsls	r0, r3, #30
 801300a:	bf49      	itett	mi
 801300c:	085b      	lsrmi	r3, r3, #1
 801300e:	089b      	lsrpl	r3, r3, #2
 8013010:	2001      	movmi	r0, #1
 8013012:	600b      	strmi	r3, [r1, #0]
 8013014:	bf5c      	itt	pl
 8013016:	600b      	strpl	r3, [r1, #0]
 8013018:	2002      	movpl	r0, #2
 801301a:	4770      	bx	lr
 801301c:	b298      	uxth	r0, r3
 801301e:	b9a8      	cbnz	r0, 801304c <__lo0bits+0x52>
 8013020:	0c1b      	lsrs	r3, r3, #16
 8013022:	2010      	movs	r0, #16
 8013024:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013028:	bf04      	itt	eq
 801302a:	0a1b      	lsreq	r3, r3, #8
 801302c:	3008      	addeq	r0, #8
 801302e:	071a      	lsls	r2, r3, #28
 8013030:	bf04      	itt	eq
 8013032:	091b      	lsreq	r3, r3, #4
 8013034:	3004      	addeq	r0, #4
 8013036:	079a      	lsls	r2, r3, #30
 8013038:	bf04      	itt	eq
 801303a:	089b      	lsreq	r3, r3, #2
 801303c:	3002      	addeq	r0, #2
 801303e:	07da      	lsls	r2, r3, #31
 8013040:	d402      	bmi.n	8013048 <__lo0bits+0x4e>
 8013042:	085b      	lsrs	r3, r3, #1
 8013044:	d006      	beq.n	8013054 <__lo0bits+0x5a>
 8013046:	3001      	adds	r0, #1
 8013048:	600b      	str	r3, [r1, #0]
 801304a:	4770      	bx	lr
 801304c:	4610      	mov	r0, r2
 801304e:	e7e9      	b.n	8013024 <__lo0bits+0x2a>
 8013050:	2000      	movs	r0, #0
 8013052:	4770      	bx	lr
 8013054:	2020      	movs	r0, #32
 8013056:	4770      	bx	lr

08013058 <__i2b>:
 8013058:	b510      	push	{r4, lr}
 801305a:	460c      	mov	r4, r1
 801305c:	2101      	movs	r1, #1
 801305e:	f7ff ff27 	bl	8012eb0 <_Balloc>
 8013062:	2201      	movs	r2, #1
 8013064:	6144      	str	r4, [r0, #20]
 8013066:	6102      	str	r2, [r0, #16]
 8013068:	bd10      	pop	{r4, pc}

0801306a <__multiply>:
 801306a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801306e:	4614      	mov	r4, r2
 8013070:	690a      	ldr	r2, [r1, #16]
 8013072:	6923      	ldr	r3, [r4, #16]
 8013074:	429a      	cmp	r2, r3
 8013076:	bfb8      	it	lt
 8013078:	460b      	movlt	r3, r1
 801307a:	4688      	mov	r8, r1
 801307c:	bfbc      	itt	lt
 801307e:	46a0      	movlt	r8, r4
 8013080:	461c      	movlt	r4, r3
 8013082:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013086:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801308a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801308e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013092:	eb07 0609 	add.w	r6, r7, r9
 8013096:	42b3      	cmp	r3, r6
 8013098:	bfb8      	it	lt
 801309a:	3101      	addlt	r1, #1
 801309c:	f7ff ff08 	bl	8012eb0 <_Balloc>
 80130a0:	f100 0514 	add.w	r5, r0, #20
 80130a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80130a8:	462b      	mov	r3, r5
 80130aa:	2200      	movs	r2, #0
 80130ac:	4573      	cmp	r3, lr
 80130ae:	d316      	bcc.n	80130de <__multiply+0x74>
 80130b0:	f104 0214 	add.w	r2, r4, #20
 80130b4:	f108 0114 	add.w	r1, r8, #20
 80130b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80130bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80130c0:	9300      	str	r3, [sp, #0]
 80130c2:	9b00      	ldr	r3, [sp, #0]
 80130c4:	9201      	str	r2, [sp, #4]
 80130c6:	4293      	cmp	r3, r2
 80130c8:	d80c      	bhi.n	80130e4 <__multiply+0x7a>
 80130ca:	2e00      	cmp	r6, #0
 80130cc:	dd03      	ble.n	80130d6 <__multiply+0x6c>
 80130ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d05d      	beq.n	8013192 <__multiply+0x128>
 80130d6:	6106      	str	r6, [r0, #16]
 80130d8:	b003      	add	sp, #12
 80130da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130de:	f843 2b04 	str.w	r2, [r3], #4
 80130e2:	e7e3      	b.n	80130ac <__multiply+0x42>
 80130e4:	f8b2 b000 	ldrh.w	fp, [r2]
 80130e8:	f1bb 0f00 	cmp.w	fp, #0
 80130ec:	d023      	beq.n	8013136 <__multiply+0xcc>
 80130ee:	4689      	mov	r9, r1
 80130f0:	46ac      	mov	ip, r5
 80130f2:	f04f 0800 	mov.w	r8, #0
 80130f6:	f859 4b04 	ldr.w	r4, [r9], #4
 80130fa:	f8dc a000 	ldr.w	sl, [ip]
 80130fe:	b2a3      	uxth	r3, r4
 8013100:	fa1f fa8a 	uxth.w	sl, sl
 8013104:	fb0b a303 	mla	r3, fp, r3, sl
 8013108:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801310c:	f8dc 4000 	ldr.w	r4, [ip]
 8013110:	4443      	add	r3, r8
 8013112:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013116:	fb0b 840a 	mla	r4, fp, sl, r8
 801311a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801311e:	46e2      	mov	sl, ip
 8013120:	b29b      	uxth	r3, r3
 8013122:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013126:	454f      	cmp	r7, r9
 8013128:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801312c:	f84a 3b04 	str.w	r3, [sl], #4
 8013130:	d82b      	bhi.n	801318a <__multiply+0x120>
 8013132:	f8cc 8004 	str.w	r8, [ip, #4]
 8013136:	9b01      	ldr	r3, [sp, #4]
 8013138:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801313c:	3204      	adds	r2, #4
 801313e:	f1ba 0f00 	cmp.w	sl, #0
 8013142:	d020      	beq.n	8013186 <__multiply+0x11c>
 8013144:	682b      	ldr	r3, [r5, #0]
 8013146:	4689      	mov	r9, r1
 8013148:	46a8      	mov	r8, r5
 801314a:	f04f 0b00 	mov.w	fp, #0
 801314e:	f8b9 c000 	ldrh.w	ip, [r9]
 8013152:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013156:	fb0a 440c 	mla	r4, sl, ip, r4
 801315a:	445c      	add	r4, fp
 801315c:	46c4      	mov	ip, r8
 801315e:	b29b      	uxth	r3, r3
 8013160:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013164:	f84c 3b04 	str.w	r3, [ip], #4
 8013168:	f859 3b04 	ldr.w	r3, [r9], #4
 801316c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013170:	0c1b      	lsrs	r3, r3, #16
 8013172:	fb0a b303 	mla	r3, sl, r3, fp
 8013176:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801317a:	454f      	cmp	r7, r9
 801317c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013180:	d805      	bhi.n	801318e <__multiply+0x124>
 8013182:	f8c8 3004 	str.w	r3, [r8, #4]
 8013186:	3504      	adds	r5, #4
 8013188:	e79b      	b.n	80130c2 <__multiply+0x58>
 801318a:	46d4      	mov	ip, sl
 801318c:	e7b3      	b.n	80130f6 <__multiply+0x8c>
 801318e:	46e0      	mov	r8, ip
 8013190:	e7dd      	b.n	801314e <__multiply+0xe4>
 8013192:	3e01      	subs	r6, #1
 8013194:	e799      	b.n	80130ca <__multiply+0x60>
	...

08013198 <__pow5mult>:
 8013198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801319c:	4615      	mov	r5, r2
 801319e:	f012 0203 	ands.w	r2, r2, #3
 80131a2:	4606      	mov	r6, r0
 80131a4:	460f      	mov	r7, r1
 80131a6:	d007      	beq.n	80131b8 <__pow5mult+0x20>
 80131a8:	3a01      	subs	r2, #1
 80131aa:	4c21      	ldr	r4, [pc, #132]	; (8013230 <__pow5mult+0x98>)
 80131ac:	2300      	movs	r3, #0
 80131ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80131b2:	f7ff fec8 	bl	8012f46 <__multadd>
 80131b6:	4607      	mov	r7, r0
 80131b8:	10ad      	asrs	r5, r5, #2
 80131ba:	d035      	beq.n	8013228 <__pow5mult+0x90>
 80131bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80131be:	b93c      	cbnz	r4, 80131d0 <__pow5mult+0x38>
 80131c0:	2010      	movs	r0, #16
 80131c2:	f7ff fe59 	bl	8012e78 <malloc>
 80131c6:	6270      	str	r0, [r6, #36]	; 0x24
 80131c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131cc:	6004      	str	r4, [r0, #0]
 80131ce:	60c4      	str	r4, [r0, #12]
 80131d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80131d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80131d8:	b94c      	cbnz	r4, 80131ee <__pow5mult+0x56>
 80131da:	f240 2171 	movw	r1, #625	; 0x271
 80131de:	4630      	mov	r0, r6
 80131e0:	f7ff ff3a 	bl	8013058 <__i2b>
 80131e4:	2300      	movs	r3, #0
 80131e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80131ea:	4604      	mov	r4, r0
 80131ec:	6003      	str	r3, [r0, #0]
 80131ee:	f04f 0800 	mov.w	r8, #0
 80131f2:	07eb      	lsls	r3, r5, #31
 80131f4:	d50a      	bpl.n	801320c <__pow5mult+0x74>
 80131f6:	4639      	mov	r1, r7
 80131f8:	4622      	mov	r2, r4
 80131fa:	4630      	mov	r0, r6
 80131fc:	f7ff ff35 	bl	801306a <__multiply>
 8013200:	4639      	mov	r1, r7
 8013202:	4681      	mov	r9, r0
 8013204:	4630      	mov	r0, r6
 8013206:	f7ff fe87 	bl	8012f18 <_Bfree>
 801320a:	464f      	mov	r7, r9
 801320c:	106d      	asrs	r5, r5, #1
 801320e:	d00b      	beq.n	8013228 <__pow5mult+0x90>
 8013210:	6820      	ldr	r0, [r4, #0]
 8013212:	b938      	cbnz	r0, 8013224 <__pow5mult+0x8c>
 8013214:	4622      	mov	r2, r4
 8013216:	4621      	mov	r1, r4
 8013218:	4630      	mov	r0, r6
 801321a:	f7ff ff26 	bl	801306a <__multiply>
 801321e:	6020      	str	r0, [r4, #0]
 8013220:	f8c0 8000 	str.w	r8, [r0]
 8013224:	4604      	mov	r4, r0
 8013226:	e7e4      	b.n	80131f2 <__pow5mult+0x5a>
 8013228:	4638      	mov	r0, r7
 801322a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801322e:	bf00      	nop
 8013230:	080155f8 	.word	0x080155f8

08013234 <__lshift>:
 8013234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013238:	460c      	mov	r4, r1
 801323a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801323e:	6923      	ldr	r3, [r4, #16]
 8013240:	6849      	ldr	r1, [r1, #4]
 8013242:	eb0a 0903 	add.w	r9, sl, r3
 8013246:	68a3      	ldr	r3, [r4, #8]
 8013248:	4607      	mov	r7, r0
 801324a:	4616      	mov	r6, r2
 801324c:	f109 0501 	add.w	r5, r9, #1
 8013250:	42ab      	cmp	r3, r5
 8013252:	db32      	blt.n	80132ba <__lshift+0x86>
 8013254:	4638      	mov	r0, r7
 8013256:	f7ff fe2b 	bl	8012eb0 <_Balloc>
 801325a:	2300      	movs	r3, #0
 801325c:	4680      	mov	r8, r0
 801325e:	f100 0114 	add.w	r1, r0, #20
 8013262:	461a      	mov	r2, r3
 8013264:	4553      	cmp	r3, sl
 8013266:	db2b      	blt.n	80132c0 <__lshift+0x8c>
 8013268:	6920      	ldr	r0, [r4, #16]
 801326a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801326e:	f104 0314 	add.w	r3, r4, #20
 8013272:	f016 021f 	ands.w	r2, r6, #31
 8013276:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801327a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801327e:	d025      	beq.n	80132cc <__lshift+0x98>
 8013280:	f1c2 0e20 	rsb	lr, r2, #32
 8013284:	2000      	movs	r0, #0
 8013286:	681e      	ldr	r6, [r3, #0]
 8013288:	468a      	mov	sl, r1
 801328a:	4096      	lsls	r6, r2
 801328c:	4330      	orrs	r0, r6
 801328e:	f84a 0b04 	str.w	r0, [sl], #4
 8013292:	f853 0b04 	ldr.w	r0, [r3], #4
 8013296:	459c      	cmp	ip, r3
 8013298:	fa20 f00e 	lsr.w	r0, r0, lr
 801329c:	d814      	bhi.n	80132c8 <__lshift+0x94>
 801329e:	6048      	str	r0, [r1, #4]
 80132a0:	b108      	cbz	r0, 80132a6 <__lshift+0x72>
 80132a2:	f109 0502 	add.w	r5, r9, #2
 80132a6:	3d01      	subs	r5, #1
 80132a8:	4638      	mov	r0, r7
 80132aa:	f8c8 5010 	str.w	r5, [r8, #16]
 80132ae:	4621      	mov	r1, r4
 80132b0:	f7ff fe32 	bl	8012f18 <_Bfree>
 80132b4:	4640      	mov	r0, r8
 80132b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132ba:	3101      	adds	r1, #1
 80132bc:	005b      	lsls	r3, r3, #1
 80132be:	e7c7      	b.n	8013250 <__lshift+0x1c>
 80132c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80132c4:	3301      	adds	r3, #1
 80132c6:	e7cd      	b.n	8013264 <__lshift+0x30>
 80132c8:	4651      	mov	r1, sl
 80132ca:	e7dc      	b.n	8013286 <__lshift+0x52>
 80132cc:	3904      	subs	r1, #4
 80132ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80132d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80132d6:	459c      	cmp	ip, r3
 80132d8:	d8f9      	bhi.n	80132ce <__lshift+0x9a>
 80132da:	e7e4      	b.n	80132a6 <__lshift+0x72>

080132dc <__mcmp>:
 80132dc:	6903      	ldr	r3, [r0, #16]
 80132de:	690a      	ldr	r2, [r1, #16]
 80132e0:	1a9b      	subs	r3, r3, r2
 80132e2:	b530      	push	{r4, r5, lr}
 80132e4:	d10c      	bne.n	8013300 <__mcmp+0x24>
 80132e6:	0092      	lsls	r2, r2, #2
 80132e8:	3014      	adds	r0, #20
 80132ea:	3114      	adds	r1, #20
 80132ec:	1884      	adds	r4, r0, r2
 80132ee:	4411      	add	r1, r2
 80132f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80132f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80132f8:	4295      	cmp	r5, r2
 80132fa:	d003      	beq.n	8013304 <__mcmp+0x28>
 80132fc:	d305      	bcc.n	801330a <__mcmp+0x2e>
 80132fe:	2301      	movs	r3, #1
 8013300:	4618      	mov	r0, r3
 8013302:	bd30      	pop	{r4, r5, pc}
 8013304:	42a0      	cmp	r0, r4
 8013306:	d3f3      	bcc.n	80132f0 <__mcmp+0x14>
 8013308:	e7fa      	b.n	8013300 <__mcmp+0x24>
 801330a:	f04f 33ff 	mov.w	r3, #4294967295
 801330e:	e7f7      	b.n	8013300 <__mcmp+0x24>

08013310 <__mdiff>:
 8013310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013314:	460d      	mov	r5, r1
 8013316:	4607      	mov	r7, r0
 8013318:	4611      	mov	r1, r2
 801331a:	4628      	mov	r0, r5
 801331c:	4614      	mov	r4, r2
 801331e:	f7ff ffdd 	bl	80132dc <__mcmp>
 8013322:	1e06      	subs	r6, r0, #0
 8013324:	d108      	bne.n	8013338 <__mdiff+0x28>
 8013326:	4631      	mov	r1, r6
 8013328:	4638      	mov	r0, r7
 801332a:	f7ff fdc1 	bl	8012eb0 <_Balloc>
 801332e:	2301      	movs	r3, #1
 8013330:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013338:	bfa4      	itt	ge
 801333a:	4623      	movge	r3, r4
 801333c:	462c      	movge	r4, r5
 801333e:	4638      	mov	r0, r7
 8013340:	6861      	ldr	r1, [r4, #4]
 8013342:	bfa6      	itte	ge
 8013344:	461d      	movge	r5, r3
 8013346:	2600      	movge	r6, #0
 8013348:	2601      	movlt	r6, #1
 801334a:	f7ff fdb1 	bl	8012eb0 <_Balloc>
 801334e:	692b      	ldr	r3, [r5, #16]
 8013350:	60c6      	str	r6, [r0, #12]
 8013352:	6926      	ldr	r6, [r4, #16]
 8013354:	f105 0914 	add.w	r9, r5, #20
 8013358:	f104 0214 	add.w	r2, r4, #20
 801335c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013360:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013364:	f100 0514 	add.w	r5, r0, #20
 8013368:	f04f 0e00 	mov.w	lr, #0
 801336c:	f852 ab04 	ldr.w	sl, [r2], #4
 8013370:	f859 4b04 	ldr.w	r4, [r9], #4
 8013374:	fa1e f18a 	uxtah	r1, lr, sl
 8013378:	b2a3      	uxth	r3, r4
 801337a:	1ac9      	subs	r1, r1, r3
 801337c:	0c23      	lsrs	r3, r4, #16
 801337e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013382:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013386:	b289      	uxth	r1, r1
 8013388:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801338c:	45c8      	cmp	r8, r9
 801338e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013392:	4694      	mov	ip, r2
 8013394:	f845 3b04 	str.w	r3, [r5], #4
 8013398:	d8e8      	bhi.n	801336c <__mdiff+0x5c>
 801339a:	45bc      	cmp	ip, r7
 801339c:	d304      	bcc.n	80133a8 <__mdiff+0x98>
 801339e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80133a2:	b183      	cbz	r3, 80133c6 <__mdiff+0xb6>
 80133a4:	6106      	str	r6, [r0, #16]
 80133a6:	e7c5      	b.n	8013334 <__mdiff+0x24>
 80133a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80133ac:	fa1e f381 	uxtah	r3, lr, r1
 80133b0:	141a      	asrs	r2, r3, #16
 80133b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80133c0:	f845 3b04 	str.w	r3, [r5], #4
 80133c4:	e7e9      	b.n	801339a <__mdiff+0x8a>
 80133c6:	3e01      	subs	r6, #1
 80133c8:	e7e9      	b.n	801339e <__mdiff+0x8e>

080133ca <__d2b>:
 80133ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133ce:	460e      	mov	r6, r1
 80133d0:	2101      	movs	r1, #1
 80133d2:	ec59 8b10 	vmov	r8, r9, d0
 80133d6:	4615      	mov	r5, r2
 80133d8:	f7ff fd6a 	bl	8012eb0 <_Balloc>
 80133dc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80133e0:	4607      	mov	r7, r0
 80133e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80133e6:	bb34      	cbnz	r4, 8013436 <__d2b+0x6c>
 80133e8:	9301      	str	r3, [sp, #4]
 80133ea:	f1b8 0300 	subs.w	r3, r8, #0
 80133ee:	d027      	beq.n	8013440 <__d2b+0x76>
 80133f0:	a802      	add	r0, sp, #8
 80133f2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80133f6:	f7ff fe00 	bl	8012ffa <__lo0bits>
 80133fa:	9900      	ldr	r1, [sp, #0]
 80133fc:	b1f0      	cbz	r0, 801343c <__d2b+0x72>
 80133fe:	9a01      	ldr	r2, [sp, #4]
 8013400:	f1c0 0320 	rsb	r3, r0, #32
 8013404:	fa02 f303 	lsl.w	r3, r2, r3
 8013408:	430b      	orrs	r3, r1
 801340a:	40c2      	lsrs	r2, r0
 801340c:	617b      	str	r3, [r7, #20]
 801340e:	9201      	str	r2, [sp, #4]
 8013410:	9b01      	ldr	r3, [sp, #4]
 8013412:	61bb      	str	r3, [r7, #24]
 8013414:	2b00      	cmp	r3, #0
 8013416:	bf14      	ite	ne
 8013418:	2102      	movne	r1, #2
 801341a:	2101      	moveq	r1, #1
 801341c:	6139      	str	r1, [r7, #16]
 801341e:	b1c4      	cbz	r4, 8013452 <__d2b+0x88>
 8013420:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013424:	4404      	add	r4, r0
 8013426:	6034      	str	r4, [r6, #0]
 8013428:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801342c:	6028      	str	r0, [r5, #0]
 801342e:	4638      	mov	r0, r7
 8013430:	b003      	add	sp, #12
 8013432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801343a:	e7d5      	b.n	80133e8 <__d2b+0x1e>
 801343c:	6179      	str	r1, [r7, #20]
 801343e:	e7e7      	b.n	8013410 <__d2b+0x46>
 8013440:	a801      	add	r0, sp, #4
 8013442:	f7ff fdda 	bl	8012ffa <__lo0bits>
 8013446:	9b01      	ldr	r3, [sp, #4]
 8013448:	617b      	str	r3, [r7, #20]
 801344a:	2101      	movs	r1, #1
 801344c:	6139      	str	r1, [r7, #16]
 801344e:	3020      	adds	r0, #32
 8013450:	e7e5      	b.n	801341e <__d2b+0x54>
 8013452:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013456:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801345a:	6030      	str	r0, [r6, #0]
 801345c:	6918      	ldr	r0, [r3, #16]
 801345e:	f7ff fdad 	bl	8012fbc <__hi0bits>
 8013462:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013466:	e7e1      	b.n	801342c <__d2b+0x62>

08013468 <_calloc_r>:
 8013468:	b538      	push	{r3, r4, r5, lr}
 801346a:	fb02 f401 	mul.w	r4, r2, r1
 801346e:	4621      	mov	r1, r4
 8013470:	f7fe f9a4 	bl	80117bc <_malloc_r>
 8013474:	4605      	mov	r5, r0
 8013476:	b118      	cbz	r0, 8013480 <_calloc_r+0x18>
 8013478:	4622      	mov	r2, r4
 801347a:	2100      	movs	r1, #0
 801347c:	f7fe f995 	bl	80117aa <memset>
 8013480:	4628      	mov	r0, r5
 8013482:	bd38      	pop	{r3, r4, r5, pc}

08013484 <_free_r>:
 8013484:	b538      	push	{r3, r4, r5, lr}
 8013486:	4605      	mov	r5, r0
 8013488:	2900      	cmp	r1, #0
 801348a:	d045      	beq.n	8013518 <_free_r+0x94>
 801348c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013490:	1f0c      	subs	r4, r1, #4
 8013492:	2b00      	cmp	r3, #0
 8013494:	bfb8      	it	lt
 8013496:	18e4      	addlt	r4, r4, r3
 8013498:	f7ff fd08 	bl	8012eac <__malloc_lock>
 801349c:	4a1f      	ldr	r2, [pc, #124]	; (801351c <_free_r+0x98>)
 801349e:	6813      	ldr	r3, [r2, #0]
 80134a0:	4610      	mov	r0, r2
 80134a2:	b933      	cbnz	r3, 80134b2 <_free_r+0x2e>
 80134a4:	6063      	str	r3, [r4, #4]
 80134a6:	6014      	str	r4, [r2, #0]
 80134a8:	4628      	mov	r0, r5
 80134aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134ae:	f7ff bcfe 	b.w	8012eae <__malloc_unlock>
 80134b2:	42a3      	cmp	r3, r4
 80134b4:	d90c      	bls.n	80134d0 <_free_r+0x4c>
 80134b6:	6821      	ldr	r1, [r4, #0]
 80134b8:	1862      	adds	r2, r4, r1
 80134ba:	4293      	cmp	r3, r2
 80134bc:	bf04      	itt	eq
 80134be:	681a      	ldreq	r2, [r3, #0]
 80134c0:	685b      	ldreq	r3, [r3, #4]
 80134c2:	6063      	str	r3, [r4, #4]
 80134c4:	bf04      	itt	eq
 80134c6:	1852      	addeq	r2, r2, r1
 80134c8:	6022      	streq	r2, [r4, #0]
 80134ca:	6004      	str	r4, [r0, #0]
 80134cc:	e7ec      	b.n	80134a8 <_free_r+0x24>
 80134ce:	4613      	mov	r3, r2
 80134d0:	685a      	ldr	r2, [r3, #4]
 80134d2:	b10a      	cbz	r2, 80134d8 <_free_r+0x54>
 80134d4:	42a2      	cmp	r2, r4
 80134d6:	d9fa      	bls.n	80134ce <_free_r+0x4a>
 80134d8:	6819      	ldr	r1, [r3, #0]
 80134da:	1858      	adds	r0, r3, r1
 80134dc:	42a0      	cmp	r0, r4
 80134de:	d10b      	bne.n	80134f8 <_free_r+0x74>
 80134e0:	6820      	ldr	r0, [r4, #0]
 80134e2:	4401      	add	r1, r0
 80134e4:	1858      	adds	r0, r3, r1
 80134e6:	4282      	cmp	r2, r0
 80134e8:	6019      	str	r1, [r3, #0]
 80134ea:	d1dd      	bne.n	80134a8 <_free_r+0x24>
 80134ec:	6810      	ldr	r0, [r2, #0]
 80134ee:	6852      	ldr	r2, [r2, #4]
 80134f0:	605a      	str	r2, [r3, #4]
 80134f2:	4401      	add	r1, r0
 80134f4:	6019      	str	r1, [r3, #0]
 80134f6:	e7d7      	b.n	80134a8 <_free_r+0x24>
 80134f8:	d902      	bls.n	8013500 <_free_r+0x7c>
 80134fa:	230c      	movs	r3, #12
 80134fc:	602b      	str	r3, [r5, #0]
 80134fe:	e7d3      	b.n	80134a8 <_free_r+0x24>
 8013500:	6820      	ldr	r0, [r4, #0]
 8013502:	1821      	adds	r1, r4, r0
 8013504:	428a      	cmp	r2, r1
 8013506:	bf04      	itt	eq
 8013508:	6811      	ldreq	r1, [r2, #0]
 801350a:	6852      	ldreq	r2, [r2, #4]
 801350c:	6062      	str	r2, [r4, #4]
 801350e:	bf04      	itt	eq
 8013510:	1809      	addeq	r1, r1, r0
 8013512:	6021      	streq	r1, [r4, #0]
 8013514:	605c      	str	r4, [r3, #4]
 8013516:	e7c7      	b.n	80134a8 <_free_r+0x24>
 8013518:	bd38      	pop	{r3, r4, r5, pc}
 801351a:	bf00      	nop
 801351c:	2000c72c 	.word	0x2000c72c

08013520 <__ssputs_r>:
 8013520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013524:	688e      	ldr	r6, [r1, #8]
 8013526:	429e      	cmp	r6, r3
 8013528:	4682      	mov	sl, r0
 801352a:	460c      	mov	r4, r1
 801352c:	4690      	mov	r8, r2
 801352e:	4699      	mov	r9, r3
 8013530:	d837      	bhi.n	80135a2 <__ssputs_r+0x82>
 8013532:	898a      	ldrh	r2, [r1, #12]
 8013534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013538:	d031      	beq.n	801359e <__ssputs_r+0x7e>
 801353a:	6825      	ldr	r5, [r4, #0]
 801353c:	6909      	ldr	r1, [r1, #16]
 801353e:	1a6f      	subs	r7, r5, r1
 8013540:	6965      	ldr	r5, [r4, #20]
 8013542:	2302      	movs	r3, #2
 8013544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013548:	fb95 f5f3 	sdiv	r5, r5, r3
 801354c:	f109 0301 	add.w	r3, r9, #1
 8013550:	443b      	add	r3, r7
 8013552:	429d      	cmp	r5, r3
 8013554:	bf38      	it	cc
 8013556:	461d      	movcc	r5, r3
 8013558:	0553      	lsls	r3, r2, #21
 801355a:	d530      	bpl.n	80135be <__ssputs_r+0x9e>
 801355c:	4629      	mov	r1, r5
 801355e:	f7fe f92d 	bl	80117bc <_malloc_r>
 8013562:	4606      	mov	r6, r0
 8013564:	b950      	cbnz	r0, 801357c <__ssputs_r+0x5c>
 8013566:	230c      	movs	r3, #12
 8013568:	f8ca 3000 	str.w	r3, [sl]
 801356c:	89a3      	ldrh	r3, [r4, #12]
 801356e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013572:	81a3      	strh	r3, [r4, #12]
 8013574:	f04f 30ff 	mov.w	r0, #4294967295
 8013578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801357c:	463a      	mov	r2, r7
 801357e:	6921      	ldr	r1, [r4, #16]
 8013580:	f7fe f8ef 	bl	8011762 <memcpy>
 8013584:	89a3      	ldrh	r3, [r4, #12]
 8013586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801358e:	81a3      	strh	r3, [r4, #12]
 8013590:	6126      	str	r6, [r4, #16]
 8013592:	6165      	str	r5, [r4, #20]
 8013594:	443e      	add	r6, r7
 8013596:	1bed      	subs	r5, r5, r7
 8013598:	6026      	str	r6, [r4, #0]
 801359a:	60a5      	str	r5, [r4, #8]
 801359c:	464e      	mov	r6, r9
 801359e:	454e      	cmp	r6, r9
 80135a0:	d900      	bls.n	80135a4 <__ssputs_r+0x84>
 80135a2:	464e      	mov	r6, r9
 80135a4:	4632      	mov	r2, r6
 80135a6:	4641      	mov	r1, r8
 80135a8:	6820      	ldr	r0, [r4, #0]
 80135aa:	f7fe f8e5 	bl	8011778 <memmove>
 80135ae:	68a3      	ldr	r3, [r4, #8]
 80135b0:	1b9b      	subs	r3, r3, r6
 80135b2:	60a3      	str	r3, [r4, #8]
 80135b4:	6823      	ldr	r3, [r4, #0]
 80135b6:	441e      	add	r6, r3
 80135b8:	6026      	str	r6, [r4, #0]
 80135ba:	2000      	movs	r0, #0
 80135bc:	e7dc      	b.n	8013578 <__ssputs_r+0x58>
 80135be:	462a      	mov	r2, r5
 80135c0:	f000 f90d 	bl	80137de <_realloc_r>
 80135c4:	4606      	mov	r6, r0
 80135c6:	2800      	cmp	r0, #0
 80135c8:	d1e2      	bne.n	8013590 <__ssputs_r+0x70>
 80135ca:	6921      	ldr	r1, [r4, #16]
 80135cc:	4650      	mov	r0, sl
 80135ce:	f7ff ff59 	bl	8013484 <_free_r>
 80135d2:	e7c8      	b.n	8013566 <__ssputs_r+0x46>

080135d4 <_svfiprintf_r>:
 80135d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d8:	461d      	mov	r5, r3
 80135da:	898b      	ldrh	r3, [r1, #12]
 80135dc:	061f      	lsls	r7, r3, #24
 80135de:	b09d      	sub	sp, #116	; 0x74
 80135e0:	4680      	mov	r8, r0
 80135e2:	460c      	mov	r4, r1
 80135e4:	4616      	mov	r6, r2
 80135e6:	d50f      	bpl.n	8013608 <_svfiprintf_r+0x34>
 80135e8:	690b      	ldr	r3, [r1, #16]
 80135ea:	b96b      	cbnz	r3, 8013608 <_svfiprintf_r+0x34>
 80135ec:	2140      	movs	r1, #64	; 0x40
 80135ee:	f7fe f8e5 	bl	80117bc <_malloc_r>
 80135f2:	6020      	str	r0, [r4, #0]
 80135f4:	6120      	str	r0, [r4, #16]
 80135f6:	b928      	cbnz	r0, 8013604 <_svfiprintf_r+0x30>
 80135f8:	230c      	movs	r3, #12
 80135fa:	f8c8 3000 	str.w	r3, [r8]
 80135fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013602:	e0c8      	b.n	8013796 <_svfiprintf_r+0x1c2>
 8013604:	2340      	movs	r3, #64	; 0x40
 8013606:	6163      	str	r3, [r4, #20]
 8013608:	2300      	movs	r3, #0
 801360a:	9309      	str	r3, [sp, #36]	; 0x24
 801360c:	2320      	movs	r3, #32
 801360e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013612:	2330      	movs	r3, #48	; 0x30
 8013614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013618:	9503      	str	r5, [sp, #12]
 801361a:	f04f 0b01 	mov.w	fp, #1
 801361e:	4637      	mov	r7, r6
 8013620:	463d      	mov	r5, r7
 8013622:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013626:	b10b      	cbz	r3, 801362c <_svfiprintf_r+0x58>
 8013628:	2b25      	cmp	r3, #37	; 0x25
 801362a:	d13e      	bne.n	80136aa <_svfiprintf_r+0xd6>
 801362c:	ebb7 0a06 	subs.w	sl, r7, r6
 8013630:	d00b      	beq.n	801364a <_svfiprintf_r+0x76>
 8013632:	4653      	mov	r3, sl
 8013634:	4632      	mov	r2, r6
 8013636:	4621      	mov	r1, r4
 8013638:	4640      	mov	r0, r8
 801363a:	f7ff ff71 	bl	8013520 <__ssputs_r>
 801363e:	3001      	adds	r0, #1
 8013640:	f000 80a4 	beq.w	801378c <_svfiprintf_r+0x1b8>
 8013644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013646:	4453      	add	r3, sl
 8013648:	9309      	str	r3, [sp, #36]	; 0x24
 801364a:	783b      	ldrb	r3, [r7, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	f000 809d 	beq.w	801378c <_svfiprintf_r+0x1b8>
 8013652:	2300      	movs	r3, #0
 8013654:	f04f 32ff 	mov.w	r2, #4294967295
 8013658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801365c:	9304      	str	r3, [sp, #16]
 801365e:	9307      	str	r3, [sp, #28]
 8013660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013664:	931a      	str	r3, [sp, #104]	; 0x68
 8013666:	462f      	mov	r7, r5
 8013668:	2205      	movs	r2, #5
 801366a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801366e:	4850      	ldr	r0, [pc, #320]	; (80137b0 <_svfiprintf_r+0x1dc>)
 8013670:	f7ec fdfe 	bl	8000270 <memchr>
 8013674:	9b04      	ldr	r3, [sp, #16]
 8013676:	b9d0      	cbnz	r0, 80136ae <_svfiprintf_r+0xda>
 8013678:	06d9      	lsls	r1, r3, #27
 801367a:	bf44      	itt	mi
 801367c:	2220      	movmi	r2, #32
 801367e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013682:	071a      	lsls	r2, r3, #28
 8013684:	bf44      	itt	mi
 8013686:	222b      	movmi	r2, #43	; 0x2b
 8013688:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801368c:	782a      	ldrb	r2, [r5, #0]
 801368e:	2a2a      	cmp	r2, #42	; 0x2a
 8013690:	d015      	beq.n	80136be <_svfiprintf_r+0xea>
 8013692:	9a07      	ldr	r2, [sp, #28]
 8013694:	462f      	mov	r7, r5
 8013696:	2000      	movs	r0, #0
 8013698:	250a      	movs	r5, #10
 801369a:	4639      	mov	r1, r7
 801369c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136a0:	3b30      	subs	r3, #48	; 0x30
 80136a2:	2b09      	cmp	r3, #9
 80136a4:	d94d      	bls.n	8013742 <_svfiprintf_r+0x16e>
 80136a6:	b1b8      	cbz	r0, 80136d8 <_svfiprintf_r+0x104>
 80136a8:	e00f      	b.n	80136ca <_svfiprintf_r+0xf6>
 80136aa:	462f      	mov	r7, r5
 80136ac:	e7b8      	b.n	8013620 <_svfiprintf_r+0x4c>
 80136ae:	4a40      	ldr	r2, [pc, #256]	; (80137b0 <_svfiprintf_r+0x1dc>)
 80136b0:	1a80      	subs	r0, r0, r2
 80136b2:	fa0b f000 	lsl.w	r0, fp, r0
 80136b6:	4318      	orrs	r0, r3
 80136b8:	9004      	str	r0, [sp, #16]
 80136ba:	463d      	mov	r5, r7
 80136bc:	e7d3      	b.n	8013666 <_svfiprintf_r+0x92>
 80136be:	9a03      	ldr	r2, [sp, #12]
 80136c0:	1d11      	adds	r1, r2, #4
 80136c2:	6812      	ldr	r2, [r2, #0]
 80136c4:	9103      	str	r1, [sp, #12]
 80136c6:	2a00      	cmp	r2, #0
 80136c8:	db01      	blt.n	80136ce <_svfiprintf_r+0xfa>
 80136ca:	9207      	str	r2, [sp, #28]
 80136cc:	e004      	b.n	80136d8 <_svfiprintf_r+0x104>
 80136ce:	4252      	negs	r2, r2
 80136d0:	f043 0302 	orr.w	r3, r3, #2
 80136d4:	9207      	str	r2, [sp, #28]
 80136d6:	9304      	str	r3, [sp, #16]
 80136d8:	783b      	ldrb	r3, [r7, #0]
 80136da:	2b2e      	cmp	r3, #46	; 0x2e
 80136dc:	d10c      	bne.n	80136f8 <_svfiprintf_r+0x124>
 80136de:	787b      	ldrb	r3, [r7, #1]
 80136e0:	2b2a      	cmp	r3, #42	; 0x2a
 80136e2:	d133      	bne.n	801374c <_svfiprintf_r+0x178>
 80136e4:	9b03      	ldr	r3, [sp, #12]
 80136e6:	1d1a      	adds	r2, r3, #4
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	9203      	str	r2, [sp, #12]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	bfb8      	it	lt
 80136f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80136f4:	3702      	adds	r7, #2
 80136f6:	9305      	str	r3, [sp, #20]
 80136f8:	4d2e      	ldr	r5, [pc, #184]	; (80137b4 <_svfiprintf_r+0x1e0>)
 80136fa:	7839      	ldrb	r1, [r7, #0]
 80136fc:	2203      	movs	r2, #3
 80136fe:	4628      	mov	r0, r5
 8013700:	f7ec fdb6 	bl	8000270 <memchr>
 8013704:	b138      	cbz	r0, 8013716 <_svfiprintf_r+0x142>
 8013706:	2340      	movs	r3, #64	; 0x40
 8013708:	1b40      	subs	r0, r0, r5
 801370a:	fa03 f000 	lsl.w	r0, r3, r0
 801370e:	9b04      	ldr	r3, [sp, #16]
 8013710:	4303      	orrs	r3, r0
 8013712:	3701      	adds	r7, #1
 8013714:	9304      	str	r3, [sp, #16]
 8013716:	7839      	ldrb	r1, [r7, #0]
 8013718:	4827      	ldr	r0, [pc, #156]	; (80137b8 <_svfiprintf_r+0x1e4>)
 801371a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801371e:	2206      	movs	r2, #6
 8013720:	1c7e      	adds	r6, r7, #1
 8013722:	f7ec fda5 	bl	8000270 <memchr>
 8013726:	2800      	cmp	r0, #0
 8013728:	d038      	beq.n	801379c <_svfiprintf_r+0x1c8>
 801372a:	4b24      	ldr	r3, [pc, #144]	; (80137bc <_svfiprintf_r+0x1e8>)
 801372c:	bb13      	cbnz	r3, 8013774 <_svfiprintf_r+0x1a0>
 801372e:	9b03      	ldr	r3, [sp, #12]
 8013730:	3307      	adds	r3, #7
 8013732:	f023 0307 	bic.w	r3, r3, #7
 8013736:	3308      	adds	r3, #8
 8013738:	9303      	str	r3, [sp, #12]
 801373a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801373c:	444b      	add	r3, r9
 801373e:	9309      	str	r3, [sp, #36]	; 0x24
 8013740:	e76d      	b.n	801361e <_svfiprintf_r+0x4a>
 8013742:	fb05 3202 	mla	r2, r5, r2, r3
 8013746:	2001      	movs	r0, #1
 8013748:	460f      	mov	r7, r1
 801374a:	e7a6      	b.n	801369a <_svfiprintf_r+0xc6>
 801374c:	2300      	movs	r3, #0
 801374e:	3701      	adds	r7, #1
 8013750:	9305      	str	r3, [sp, #20]
 8013752:	4619      	mov	r1, r3
 8013754:	250a      	movs	r5, #10
 8013756:	4638      	mov	r0, r7
 8013758:	f810 2b01 	ldrb.w	r2, [r0], #1
 801375c:	3a30      	subs	r2, #48	; 0x30
 801375e:	2a09      	cmp	r2, #9
 8013760:	d903      	bls.n	801376a <_svfiprintf_r+0x196>
 8013762:	2b00      	cmp	r3, #0
 8013764:	d0c8      	beq.n	80136f8 <_svfiprintf_r+0x124>
 8013766:	9105      	str	r1, [sp, #20]
 8013768:	e7c6      	b.n	80136f8 <_svfiprintf_r+0x124>
 801376a:	fb05 2101 	mla	r1, r5, r1, r2
 801376e:	2301      	movs	r3, #1
 8013770:	4607      	mov	r7, r0
 8013772:	e7f0      	b.n	8013756 <_svfiprintf_r+0x182>
 8013774:	ab03      	add	r3, sp, #12
 8013776:	9300      	str	r3, [sp, #0]
 8013778:	4622      	mov	r2, r4
 801377a:	4b11      	ldr	r3, [pc, #68]	; (80137c0 <_svfiprintf_r+0x1ec>)
 801377c:	a904      	add	r1, sp, #16
 801377e:	4640      	mov	r0, r8
 8013780:	f7fe f8fe 	bl	8011980 <_printf_float>
 8013784:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013788:	4681      	mov	r9, r0
 801378a:	d1d6      	bne.n	801373a <_svfiprintf_r+0x166>
 801378c:	89a3      	ldrh	r3, [r4, #12]
 801378e:	065b      	lsls	r3, r3, #25
 8013790:	f53f af35 	bmi.w	80135fe <_svfiprintf_r+0x2a>
 8013794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013796:	b01d      	add	sp, #116	; 0x74
 8013798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801379c:	ab03      	add	r3, sp, #12
 801379e:	9300      	str	r3, [sp, #0]
 80137a0:	4622      	mov	r2, r4
 80137a2:	4b07      	ldr	r3, [pc, #28]	; (80137c0 <_svfiprintf_r+0x1ec>)
 80137a4:	a904      	add	r1, sp, #16
 80137a6:	4640      	mov	r0, r8
 80137a8:	f7fe fb8c 	bl	8011ec4 <_printf_i>
 80137ac:	e7ea      	b.n	8013784 <_svfiprintf_r+0x1b0>
 80137ae:	bf00      	nop
 80137b0:	08015604 	.word	0x08015604
 80137b4:	0801560a 	.word	0x0801560a
 80137b8:	0801560e 	.word	0x0801560e
 80137bc:	08011981 	.word	0x08011981
 80137c0:	08013521 	.word	0x08013521

080137c4 <__ascii_wctomb>:
 80137c4:	b149      	cbz	r1, 80137da <__ascii_wctomb+0x16>
 80137c6:	2aff      	cmp	r2, #255	; 0xff
 80137c8:	bf85      	ittet	hi
 80137ca:	238a      	movhi	r3, #138	; 0x8a
 80137cc:	6003      	strhi	r3, [r0, #0]
 80137ce:	700a      	strbls	r2, [r1, #0]
 80137d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80137d4:	bf98      	it	ls
 80137d6:	2001      	movls	r0, #1
 80137d8:	4770      	bx	lr
 80137da:	4608      	mov	r0, r1
 80137dc:	4770      	bx	lr

080137de <_realloc_r>:
 80137de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137e0:	4607      	mov	r7, r0
 80137e2:	4614      	mov	r4, r2
 80137e4:	460e      	mov	r6, r1
 80137e6:	b921      	cbnz	r1, 80137f2 <_realloc_r+0x14>
 80137e8:	4611      	mov	r1, r2
 80137ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80137ee:	f7fd bfe5 	b.w	80117bc <_malloc_r>
 80137f2:	b922      	cbnz	r2, 80137fe <_realloc_r+0x20>
 80137f4:	f7ff fe46 	bl	8013484 <_free_r>
 80137f8:	4625      	mov	r5, r4
 80137fa:	4628      	mov	r0, r5
 80137fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137fe:	f000 f814 	bl	801382a <_malloc_usable_size_r>
 8013802:	42a0      	cmp	r0, r4
 8013804:	d20f      	bcs.n	8013826 <_realloc_r+0x48>
 8013806:	4621      	mov	r1, r4
 8013808:	4638      	mov	r0, r7
 801380a:	f7fd ffd7 	bl	80117bc <_malloc_r>
 801380e:	4605      	mov	r5, r0
 8013810:	2800      	cmp	r0, #0
 8013812:	d0f2      	beq.n	80137fa <_realloc_r+0x1c>
 8013814:	4631      	mov	r1, r6
 8013816:	4622      	mov	r2, r4
 8013818:	f7fd ffa3 	bl	8011762 <memcpy>
 801381c:	4631      	mov	r1, r6
 801381e:	4638      	mov	r0, r7
 8013820:	f7ff fe30 	bl	8013484 <_free_r>
 8013824:	e7e9      	b.n	80137fa <_realloc_r+0x1c>
 8013826:	4635      	mov	r5, r6
 8013828:	e7e7      	b.n	80137fa <_realloc_r+0x1c>

0801382a <_malloc_usable_size_r>:
 801382a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801382e:	1f18      	subs	r0, r3, #4
 8013830:	2b00      	cmp	r3, #0
 8013832:	bfbc      	itt	lt
 8013834:	580b      	ldrlt	r3, [r1, r0]
 8013836:	18c0      	addlt	r0, r0, r3
 8013838:	4770      	bx	lr
	...

0801383c <_init>:
 801383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801383e:	bf00      	nop
 8013840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013842:	bc08      	pop	{r3}
 8013844:	469e      	mov	lr, r3
 8013846:	4770      	bx	lr

08013848 <_fini>:
 8013848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801384a:	bf00      	nop
 801384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801384e:	bc08      	pop	{r3}
 8013850:	469e      	mov	lr, r3
 8013852:	4770      	bx	lr
