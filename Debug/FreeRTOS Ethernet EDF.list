
FreeRTOS Ethernet EDF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec8  080138e8  080138e8  000238e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157b0  080157b0  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  080157b0  080157b0  000257b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157b8  080157b8  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080157b8  080157b8  000257b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157bc  080157bc  000257bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080157c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025b64  20000220  080159c4  00030220  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  20025d84  080159c4  00035d84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032051  00000000  00000000  00030232  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000063ba  00000000  00000000  00062283  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fe8  00000000  00000000  00068640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dc0  00000000  00000000  0006a628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000375c2  00000000  00000000  0006c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021425  00000000  00000000  000a39aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001337f2  00000000  00000000  000c4dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f85c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cf4  00000000  00000000  001f863c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000220 	.word	0x20000220
 800021c:	00000000 	.word	0x00000000
 8000220:	080138cc 	.word	0x080138cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000224 	.word	0x20000224
 800023c:	080138cc 	.word	0x080138cc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HAL_ETH_MspInit>:
  }

}

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08e      	sub	sp, #56	; 0x38
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a52      	ldr	r2, [pc, #328]	; (8000778 <HAL_ETH_MspInit+0x168>)
 800062e:	4293      	cmp	r3, r2
 8000630:	f040 809d 	bne.w	800076e <HAL_ETH_MspInit+0x15e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000634:	4b51      	ldr	r3, [pc, #324]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a50      	ldr	r2, [pc, #320]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
 8000640:	4b4e      	ldr	r3, [pc, #312]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000648:	623b      	str	r3, [r7, #32]
 800064a:	6a3b      	ldr	r3, [r7, #32]
 800064c:	4b4b      	ldr	r3, [pc, #300]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a4a      	ldr	r2, [pc, #296]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
 8000658:	4b48      	ldr	r3, [pc, #288]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	4b45      	ldr	r3, [pc, #276]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a44      	ldr	r2, [pc, #272]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800066a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800066e:	6313      	str	r3, [r2, #48]	; 0x30
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000678:	61bb      	str	r3, [r7, #24]
 800067a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800067c:	4b3f      	ldr	r3, [pc, #252]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a3e      	ldr	r2, [pc, #248]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
 8000688:	4b3c      	ldr	r3, [pc, #240]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4a38      	ldr	r2, [pc, #224]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
 80006a0:	4b36      	ldr	r3, [pc, #216]	; (800077c <HAL_ETH_MspInit+0x16c>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b33      	ldr	r3, [pc, #204]	; (800077c <HAL_ETH_MspInit+0x16c>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <HAL_ETH_MspInit+0x16c>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6313      	str	r3, [r2, #48]	; 0x30
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <HAL_ETH_MspInit+0x16c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 80006c4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d6:	230b      	movs	r3, #11
 80006d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	4619      	mov	r1, r3
 80006e0:	4827      	ldr	r0, [pc, #156]	; (8000780 <HAL_ETH_MspInit+0x170>)
 80006e2:	f000 fe89 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80006e6:	2332      	movs	r3, #50	; 0x32
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f6:	230b      	movs	r3, #11
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	4820      	ldr	r0, [pc, #128]	; (8000784 <HAL_ETH_MspInit+0x174>)
 8000702:	f000 fe79 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000706:	2386      	movs	r3, #134	; 0x86
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000716:	230b      	movs	r3, #11
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071e:	4619      	mov	r1, r3
 8000720:	4819      	ldr	r0, [pc, #100]	; (8000788 <HAL_ETH_MspInit+0x178>)
 8000722:	f000 fe69 	bl	80013f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */
    /* PD5 as PXER */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a14      	ldr	r2, [pc, #80]	; (800077c <HAL_ETH_MspInit+0x16c>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_ETH_MspInit+0x16c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800073e:	2320      	movs	r3, #32
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074e:	230b      	movs	r3, #11
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <HAL_ETH_MspInit+0x17c>)
 800075a:	f000 fe4d 	bl	80013f8 <HAL_GPIO_Init>


  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2107      	movs	r1, #7
 8000762:	203d      	movs	r0, #61	; 0x3d
 8000764:	f000 fe1e 	bl	80013a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000768:	203d      	movs	r0, #61	; 0x3d
 800076a:	f000 fe37 	bl	80013dc <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3738      	adds	r7, #56	; 0x38
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40028000 	.word	0x40028000
 800077c:	40023800 	.word	0x40023800
 8000780:	40021800 	.word	0x40021800
 8000784:	40020800 	.word	0x40020800
 8000788:	40020000 	.word	0x40020000
 800078c:	40020c00 	.word	0x40020c00

08000790 <calculateFFT>:
/* define globals */
#define EPOCHES 100
static samples_struct samples_array[EPOCHES];

void calculateFFT( void *pvParameters )
{
 8000790:	b580      	push	{r7, lr}
 8000792:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000796:	af00      	add	r7, sp, #0
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	6018      	str	r0, [r3, #0]
//	unsigned int epoches = 100;
	uint32_t messageCounter = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	const TickType_t x1000ms = 1000UL / portTICK_PERIOD_MS;
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
//	arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
//	status = (testIndex != refIndex) ? ARM_MATH_TEST_FAILURE : ARM_MATH_SUCCESS;

    for( ;; )
    {
    	UBaseType_t waitingMessages = uxQueueMessagesWaiting(receivedQueue);
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <calculateFFT+0x94>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fdce 	bl	8005350 <uxQueueMessagesWaiting>
 80007b4:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
    	if (waitingMessages > 0)
 80007b8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0f4      	beq.n	80007aa <calculateFFT+0x1a>
    	{
    		for (int i = 0; i < waitingMessages; i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80007c6:	e01f      	b.n	8000808 <calculateFFT+0x78>
    		{
        		xQueueReceive( receivedQueue, &receivedStruct, ( TickType_t ) 0);
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <calculateFFT+0x94>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f107 0108 	add.w	r1, r7, #8
 80007d0:	2200      	movs	r2, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fbf6 	bl	8004fc4 <xQueueReceive>
        		samples_array[messageCounter] = receivedStruct;
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <calculateFFT+0x98>)
 80007da:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80007de:	029b      	lsls	r3, r3, #10
 80007e0:	441a      	add	r2, r3
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4610      	mov	r0, r2
 80007e8:	4619      	mov	r1, r3
 80007ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ee:	461a      	mov	r2, r3
 80007f0:	f010 ffff 	bl	80117f2 <memcpy>
        		messageCounter++;
 80007f4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80007f8:	3301      	adds	r3, #1
 80007fa:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    		for (int i = 0; i < waitingMessages; i++)
 80007fe:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000802:	3301      	adds	r3, #1
 8000804:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8000808:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800080c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000810:	429a      	cmp	r2, r3
 8000812:	d8d9      	bhi.n	80007c8 <calculateFFT+0x38>
    		}
        	if (messageCounter == EPOCHES -1)
 8000814:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000818:	2b63      	cmp	r3, #99	; 0x63
 800081a:	d1c6      	bne.n	80007aa <calculateFFT+0x1a>
        	{
        		// TODO: Implement FFT here
        		messageCounter = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    {
 8000822:	e7c2      	b.n	80007aa <calculateFFT+0x1a>
 8000824:	2001924c 	.word	0x2001924c
 8000828:	20000240 	.word	0x20000240

0800082c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000842:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <MX_GPIO_Init+0x104>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a3a      	ldr	r2, [pc, #232]	; (8000930 <MX_GPIO_Init+0x104>)
 8000848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <MX_GPIO_Init+0x104>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <MX_GPIO_Init+0x104>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a34      	ldr	r2, [pc, #208]	; (8000930 <MX_GPIO_Init+0x104>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <MX_GPIO_Init+0x104>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_GPIO_Init+0x104>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a2e      	ldr	r2, [pc, #184]	; (8000930 <MX_GPIO_Init+0x104>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_GPIO_Init+0x104>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_GPIO_Init+0x104>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a28      	ldr	r2, [pc, #160]	; (8000930 <MX_GPIO_Init+0x104>)
 8000890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_GPIO_Init+0x104>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_GPIO_Init+0x104>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a22      	ldr	r2, [pc, #136]	; (8000930 <MX_GPIO_Init+0x104>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_GPIO_Init+0x104>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_GPIO_Init+0x104>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_GPIO_Init+0x104>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_GPIO_Init+0x104>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f242 0120 	movw	r1, #8224	; 0x2020
 80008d8:	4816      	ldr	r0, [pc, #88]	; (8000934 <MX_GPIO_Init+0x108>)
 80008da:	f000 ff4f 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_USER3_GPIO_Port, LD_USER3_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e4:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_GPIO_Init+0x10c>)
 80008e6:	f000 ff49 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|LD_USER2_Pin;
 80008ea:	f242 0320 	movw	r3, #8224	; 0x2020
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_GPIO_Init+0x108>)
 8000904:	f000 fd78 	bl	80013f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_USER3_Pin;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_USER3_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_GPIO_Init+0x10c>)
 8000922:	f000 fd69 	bl	80013f8 <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40022400 	.word	0x40022400
 8000938:	40020000 	.word	0x40020000

0800093c <prvSRand>:
#include "helper_functions.h"
#include "task.h"


void prvSRand( UBaseType_t ulSeed )
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	/* Utility function to seed the pseudo random number generator. */
	ulNextRand = ulSeed;
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <prvSRand+0x1c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20025b38 	.word	0x20025b38

0800095c <uxRand>:

UBaseType_t uxRand( void )
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
const uint32_t ulMultiplier = 0x015a4e35UL, ulIncrement = 1UL;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <uxRand+0x6c>)
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
static BaseType_t xInitialised = pdFALSE;

	/* Don't initialise until the scheduler is running, as the timeout in the
	random number generator uses the tick count. */
	if( xInitialised == pdFALSE )
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <uxRand+0x70>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d117      	bne.n	80009a2 <uxRand+0x46>
	{
		if( xTaskGetSchedulerState() !=  taskSCHEDULER_NOT_STARTED )
 8000972:	f005 fd71 	bl	8006458 <xTaskGetSchedulerState>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d012      	beq.n	80009a2 <uxRand+0x46>
		RNG_HandleTypeDef xRND;
		uint32_t ulSeed;

			/* Generate a random number with which to seed the local pseudo random
			number generating function. */
			HAL_RNG_Init( &xRND );
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	4618      	mov	r0, r3
 8000982:	f002 f857 	bl	8002a34 <HAL_RNG_Init>
			HAL_RNG_GenerateRandomNumber( &xRND, &ulSeed );
 8000986:	1d3a      	adds	r2, r7, #4
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f002 f87a 	bl	8002a88 <HAL_RNG_GenerateRandomNumber>
			prvSRand( ulSeed );
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ffd0 	bl	800093c <prvSRand>
			xInitialised = pdTRUE;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <uxRand+0x70>)
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
		}
	}

	/* Utility function to generate a pseudo random number. */

	ulNextRand = ( ulMultiplier * ulNextRand ) + ulIncrement;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <uxRand+0x74>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	fb02 f203 	mul.w	r2, r2, r3
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <uxRand+0x74>)
 80009b2:	6013      	str	r3, [r2, #0]
	return( ( int ) ( ulNextRand >> 16UL ) & 0x7fffUL );
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <uxRand+0x74>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	0c1b      	lsrs	r3, r3, #16
 80009ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	015a4e35 	.word	0x015a4e35
 80009cc:	20019240 	.word	0x20019240
 80009d0:	20025b38 	.word	0x20025b38

080009d4 <vLoggingPrintf>:

void vLoggingPrintf( const char *pcFormatString, ... )
{
 80009d4:	b40f      	push	{r0, r1, r2, r3}
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
	return;
 80009da:	bf00      	nop
}
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	b004      	add	sp, #16
 80009e4:	4770      	bx	lr

080009e6 <ulApplicationGetNextSequenceNumber>:

uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
													uint16_t usSourcePort,
													uint32_t ulDestinationAddress,
													uint16_t usDestinationPort ){
 80009e6:	b480      	push	{r7}
 80009e8:	b085      	sub	sp, #20
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	607a      	str	r2, [r7, #4]
 80009f0:	461a      	mov	r2, r3
 80009f2:	460b      	mov	r3, r1
 80009f4:	817b      	strh	r3, [r7, #10]
 80009f6:	4613      	mov	r3, r2
 80009f8:	813b      	strh	r3, [r7, #8]
	return 306;
 80009fa:	f44f 7399 	mov.w	r3, #306	; 0x132
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <xApplicationGetRandomNumber>:
 * Supply a random number to FreeRTOS+TCP stack.
 * THIS IS ONLY A DUMMY IMPLEMENTATION THAT RETURNS A PSEUDO RANDOM NUMBER
 * SO IS NOT INTENDED FOR USE IN PRODUCTION SYSTEMS.
 */
BaseType_t xApplicationGetRandomNumber(uint32_t* pulNumber)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	*(pulNumber) = uxRand();
 8000a12:	f7ff ffa3 	bl	800095c <uxRand>
 8000a16:	4602      	mov	r2, r0
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <vAssertCalled>:

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8000a34:	f006 fe10 	bl	8007658 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 8000a38:	e000      	b.n	8000a3c <vAssertCalled+0x16>
		{
			__NOP();
 8000a3a:	bf00      	nop
		while( ul == 0 )
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0fb      	beq.n	8000a3a <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8000a42:	f006 fe35 	bl	80076b0 <vPortExitCritical>
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <pcApplicationHostnameHook>:
#include "udp_communication.h"
#include "main.h"
#include "fft.h"

const char *pcApplicationHostnameHook( void )
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <pcApplicationHostnameHook+0x10>)
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	080138e8 	.word	0x080138e8

08000a64 <xApplicationDNSQueryHook>:


BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8000a6c:	f7ff fff0 	bl	8000a50 <pcApplicationHostnameHook>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4619      	mov	r1, r3
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f011 fc2d 	bl	80122d4 <strcasecmp>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 8000a80:	2301      	movs	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e00b      	b.n	8000a9e <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <xApplicationDNSQueryHook+0x44>)
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f011 fc23 	bl	80122d4 <strcasecmp>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 8000a94:	2301      	movs	r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	e001      	b.n	8000a9e <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	080138f4 	.word	0x080138f4

08000aac <vApplicationIPNetworkEventHook>:


void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
static BaseType_t xTasksAlreadyCreated = pdFALSE;
    /* Both eNetworkUp and eNetworkDown events can be processed here. */
    if( eNetworkEvent == eNetworkUp )
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d125      	bne.n	8000b08 <vApplicationIPNetworkEventHook+0x5c>
    {
    	xTaskCreate( udpSendingTask, "UDPSend", configMINIMAL_STACK_SIZE, NULL, standardTASK_PRIORITY, NULL );
 8000abc:	2300      	movs	r3, #0
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2282      	movs	r2, #130	; 0x82
 8000ac8:	4918      	ldr	r1, [pc, #96]	; (8000b2c <vApplicationIPNetworkEventHook+0x80>)
 8000aca:	4819      	ldr	r0, [pc, #100]	; (8000b30 <vApplicationIPNetworkEventHook+0x84>)
 8000acc:	f004 fe88 	bl	80057e0 <xTaskCreate>
    	xTaskCreate( udpReceivingTask, "UDPReceive", configMINIMAL_STACK_SIZE, NULL, standardTASK_PRIORITY, NULL );
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2282      	movs	r2, #130	; 0x82
 8000adc:	4915      	ldr	r1, [pc, #84]	; (8000b34 <vApplicationIPNetworkEventHook+0x88>)
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <vApplicationIPNetworkEventHook+0x8c>)
 8000ae0:	f004 fe7e 	bl	80057e0 <xTaskCreate>
    	xTaskCreate( calculateFFT, "UDPReceive", configMINIMAL_STACK_SIZE, NULL, standardTASK_PRIORITY, NULL );
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2300      	movs	r3, #0
 8000aee:	2282      	movs	r2, #130	; 0x82
 8000af0:	4910      	ldr	r1, [pc, #64]	; (8000b34 <vApplicationIPNetworkEventHook+0x88>)
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <vApplicationIPNetworkEventHook+0x90>)
 8000af4:	f004 fe74 	bl	80057e0 <xTaskCreate>
        /* Create the tasks that use the TCP/IP stack if they have not already
        been created. */
        if( xTasksAlreadyCreated == pdFALSE )
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <vApplicationIPNetworkEventHook+0x94>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d111      	bne.n	8000b24 <vApplicationIPNetworkEventHook+0x78>
            /*
             * For convenience, tasks that use FreeRTOS+TCP can be created here
             * to ensure they are not created before the network is usable.
             */

            xTasksAlreadyCreated = pdTRUE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <vApplicationIPNetworkEventHook+0x94>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
    	if (HAL_GPIO_ReadPin(LD_USER1_GPIO_Port, LD_USER1_Pin) != 1)
    	{
    		HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
    	}
    }
}
 8000b06:	e00d      	b.n	8000b24 <vApplicationIPNetworkEventHook+0x78>
    	if (HAL_GPIO_ReadPin(LD_USER1_GPIO_Port, LD_USER1_Pin) != 1)
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <vApplicationIPNetworkEventHook+0x98>)
 8000b0e:	f000 fe1d 	bl	800174c <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d005      	beq.n	8000b24 <vApplicationIPNetworkEventHook+0x78>
    		HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	4809      	ldr	r0, [pc, #36]	; (8000b44 <vApplicationIPNetworkEventHook+0x98>)
 8000b20:	f000 fe2c 	bl	800177c <HAL_GPIO_WritePin>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	080138fc 	.word	0x080138fc
 8000b30:	08000fd1 	.word	0x08000fd1
 8000b34:	08013904 	.word	0x08013904
 8000b38:	08000f39 	.word	0x08000f39
 8000b3c:	08000791 	.word	0x08000791
 8000b40:	20019244 	.word	0x20019244
 8000b44:	40022400 	.word	0x40022400

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f000 fb44 	bl	80011da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f81b 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f7ff fe69 	bl	800082c <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_RNG_Init();
 8000b5a:	f000 f8c1 	bl	8000ce0 <MX_RNG_Init>
  MX_USART1_UART_Init();
 8000b5e:	f000 fa81 	bl	8001064 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  FreeRTOS_IPInit( ucIPAddress,
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <main+0x30>)
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <main+0x34>)
 8000b68:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <main+0x38>)
 8000b6a:	4906      	ldr	r1, [pc, #24]	; (8000b84 <main+0x3c>)
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <main+0x40>)
 8000b6e:	f008 fcad 	bl	80094cc <FreeRTOS_IPInit>
                   ucNetMask,
                   ucGatewayAddress,
                   ucDNSServerAddress,
                   ucMACAddress );
  vTaskStartScheduler();
 8000b72:	f004 ffbd 	bl	8005af0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <main+0x2e>
 8000b78:	08015440 	.word	0x08015440
 8000b7c:	08015454 	.word	0x08015454
 8000b80:	08015450 	.word	0x08015450
 8000b84:	0801544c 	.word	0x0801544c
 8000b88:	08015448 	.word	0x08015448

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0b8      	sub	sp, #224	; 0xe0
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b96:	2234      	movs	r2, #52	; 0x34
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f010 fe4d 	bl	801183a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2290      	movs	r2, #144	; 0x90
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f010 fe3e 	bl	801183a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <SystemClock_Config+0x11c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a39      	ldr	r2, [pc, #228]	; (8000ca8 <SystemClock_Config+0x11c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <SystemClock_Config+0x11c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <SystemClock_Config+0x120>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a34      	ldr	r2, [pc, #208]	; (8000cac <SystemClock_Config+0x120>)
 8000bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <SystemClock_Config+0x120>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c0a:	2319      	movs	r3, #25
 8000c0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000c10:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c1e:	2309      	movs	r3, #9
 8000c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 fe2b 	bl	8001884 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c34:	f000 f850 	bl	8000cd8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c38:	f000 fdd4 	bl	80017e4 <HAL_PWREx_EnableOverDrive>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c42:	f000 f849 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c6c:	2107      	movs	r1, #7
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f8b6 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000c7a:	f000 f82d 	bl	8000cd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <SystemClock_Config+0x124>)
 8000c80:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c82:	2300      	movs	r3, #0
 8000c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 faa9 	bl	80021e8 <HAL_RCCEx_PeriphCLKConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000c9c:	f000 f81c 	bl	8000cd8 <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	37e0      	adds	r7, #224	; 0xe0
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40007000 	.word	0x40007000
 8000cb0:	00200040 	.word	0x00200040

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cc6:	f000 fa95 	bl	80011f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40001000 	.word	0x40001000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cde:	e7fe      	b.n	8000cde <Error_Handler+0x6>

08000ce0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_RNG_Init+0x20>)
 8000ce6:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <MX_RNG_Init+0x24>)
 8000ce8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_RNG_Init+0x20>)
 8000cec:	f001 fea2 	bl	8002a34 <HAL_RNG_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000cf6:	f7ff ffef 	bl	8000cd8 <Error_Handler>
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20025b3c 	.word	0x20025b3c
 8000d04:	50060800 	.word	0x50060800

08000d08 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_RNG_MspInit+0x44>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d113      	bne.n	8000d42 <HAL_RNG_MspInit+0x3a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_RNG_MspInit+0x48>)
 8000d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_RNG_MspInit+0x48>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d24:	6353      	str	r3, [r2, #52]	; 0x34
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_RNG_MspInit+0x48>)
 8000d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2050      	movs	r0, #80	; 0x50
 8000d38:	f000 fb34 	bl	80013a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000d3c:	2050      	movs	r0, #80	; 0x50
 8000d3e:	f000 fb4d 	bl	80013dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	50060800 	.word	0x50060800
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x44>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_MspInit+0x44>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x44>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x44>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x44>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x44>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	2036      	movs	r0, #54	; 0x36
 8000db2:	f000 faf7 	bl	80013a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000db6:	2036      	movs	r0, #54	; 0x36
 8000db8:	f000 fb10 	bl	80013dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <HAL_InitTick+0xa0>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a1e      	ldr	r2, [pc, #120]	; (8000e3c <HAL_InitTick+0xa0>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_InitTick+0xa0>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd4:	f107 0210 	add.w	r2, r7, #16
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 f9d0 	bl	8002184 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000de4:	f001 f9a6 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8000de8:	4603      	mov	r3, r0
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <HAL_InitTick+0xa4>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	0c9b      	lsrs	r3, r3, #18
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_InitTick+0xa8>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <HAL_InitTick+0xac>)
 8000e00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_InitTick+0xa8>)
 8000e04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <HAL_InitTick+0xa8>)
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_InitTick+0xa8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_InitTick+0xa8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <HAL_InitTick+0xa8>)
 8000e1e:	f001 feed 	bl	8002bfc <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d104      	bne.n	8000e32 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <HAL_InitTick+0xa8>)
 8000e2a:	f001 ff1d 	bl	8002c68 <HAL_TIM_Base_Start_IT>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3730      	adds	r7, #48	; 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	431bde83 	.word	0x431bde83
 8000e44:	20025b4c 	.word	0x20025b4c
 8000e48:	40001000 	.word	0x40001000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <TIM6_DAC_IRQHandler+0x10>)
 8000e7e:	f001 ff1d 	bl	8002cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20025b4c 	.word	0x20025b4c

08000e8c <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <RNG_IRQHandler+0x10>)
 8000e92:	f001 fe48 	bl	8002b26 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20025b3c 	.word	0x20025b3c

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f010 fc56 	bl	8011780 <__errno>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20080000 	.word	0x20080000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20019248 	.word	0x20019248
 8000f08:	20025d88 	.word	0x20025d88

08000f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <SystemInit+0x28>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <SystemInit+0x28>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SystemInit+0x28>)
 8000f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f26:	609a      	str	r2, [r3, #8]
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <udpReceivingTask>:

QueueHandle_t receivedQueue = NULL;
static samples_struct receivedStruct;

void udpReceivingTask( void *pvParameters )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]
	int32_t lBytes;
	struct freertos_sockaddr xClient, xBindAddress;
	uint32_t xClientLength = sizeof( xClient );
 8000f40:	2308      	movs	r3, #8
 8000f42:	60fb      	str	r3, [r7, #12]
	Socket_t xListeningSocket;

	receivedQueue = xQueueCreate( 20, sizeof(samples_struct * ));
 8000f44:	2200      	movs	r2, #0
 8000f46:	2104      	movs	r1, #4
 8000f48:	2014      	movs	r0, #20
 8000f4a:	f003 fdf5 	bl	8004b38 <xQueueGenericCreate>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <udpReceivingTask+0x88>)
 8000f52:	601a      	str	r2, [r3, #0]

   /* Attempt to open the socket. */
   xListeningSocket = FreeRTOS_socket( FREERTOS_AF_INET,
 8000f54:	2211      	movs	r2, #17
 8000f56:	2102      	movs	r1, #2
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f009 f9a7 	bl	800a2ac <FreeRTOS_socket>
 8000f5e:	6278      	str	r0, [r7, #36]	; 0x24
									   FREERTOS_SOCK_DGRAM, /*FREERTOS_SOCK_DGRAM for UDP.*/
									   FREERTOS_IPPROTO_UDP );

   /* Check the socket was created. */
   configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f66:	d103      	bne.n	8000f70 <udpReceivingTask+0x38>
 8000f68:	4916      	ldr	r1, [pc, #88]	; (8000fc4 <udpReceivingTask+0x8c>)
 8000f6a:	201e      	movs	r0, #30
 8000f6c:	f7ff fd5b 	bl	8000a26 <vAssertCalled>

   /* Bind to port 55556. */
   xBindAddress.sin_port = FreeRTOS_htons( 55556 );
 8000f70:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8000f74:	827b      	strh	r3, [r7, #18]
   FreeRTOS_bind( xListeningSocket, &xBindAddress, sizeof( xBindAddress ) );
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f80:	f009 fb86 	bl	800a690 <FreeRTOS_bind>

   for( ;; )
   {
	   // Receive UDP Packet
	   lBytes = FreeRTOS_recvfrom( xListeningSocket,
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f96:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <udpReceivingTask+0x90>)
 8000f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f9a:	f009 fa25 	bl	800a3e8 <FreeRTOS_recvfrom>
 8000f9e:	6238      	str	r0, [r7, #32]
								   sizeof( receivedStruct ),
								   0,
								   &xClient,
								   &xClientLength );

	   if( lBytes > 0 )
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	ddee      	ble.n	8000f84 <udpReceivingTask+0x4c>
	   {
		   /* Data was received and can be processed here. */
		   /* Toggle LED for visual signaling */
		   HAL_GPIO_TogglePin(LD_USER1_GPIO_Port, LD_USER1_Pin);
 8000fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <udpReceivingTask+0x94>)
 8000fac:	f000 fbff 	bl	80017ae <HAL_GPIO_TogglePin>
		   /* Put Received Data into the input_samples Queue */
		   xQueueSend( receivedQueue, &receivedStruct, ( TickType_t ) 0);
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <udpReceivingTask+0x88>)
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4903      	ldr	r1, [pc, #12]	; (8000fc8 <udpReceivingTask+0x90>)
 8000fba:	f003 fe53 	bl	8004c64 <xQueueGenericSend>
	   lBytes = FreeRTOS_recvfrom( xListeningSocket,
 8000fbe:	e7e1      	b.n	8000f84 <udpReceivingTask+0x4c>
 8000fc0:	2001924c 	.word	0x2001924c
 8000fc4:	08013910 	.word	0x08013910
 8000fc8:	20019250 	.word	0x20019250
 8000fcc:	40022400 	.word	0x40022400

08000fd0 <udpSendingTask>:
	   }
   }
}

void udpSendingTask( void *pvParameters )
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b08d      	sub	sp, #52	; 0x34
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	6078      	str	r0, [r7, #4]
	Socket_t xSocket;
	struct freertos_sockaddr xDestinationAddress;

	const TickType_t x1000ms = 1000UL / portTICK_PERIOD_MS;
 8000fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24

   /* Send strings to port 55555 on IP address 192.168.1.1. */
   xDestinationAddress.sin_addr = FreeRTOS_inet_addr( "192.168.1.1" );
 8000fde:	481e      	ldr	r0, [pc, #120]	; (8001058 <udpSendingTask+0x88>)
 8000fe0:	f009 ff61 	bl	800aea6 <FreeRTOS_inet_addr>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	61fb      	str	r3, [r7, #28]
   xDestinationAddress.sin_port = FreeRTOS_htons( 55555 );
 8000fe8:	f240 33d9 	movw	r3, #985	; 0x3d9
 8000fec:	837b      	strh	r3, [r7, #26]
   single_sample_struct sendStruct;
   sendStruct.x = 1.1;
 8000fee:	a416      	add	r4, pc, #88	; (adr r4, 8001048 <udpSendingTask+0x78>)
 8000ff0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ff4:	e9c7 3402 	strd	r3, r4, [r7, #8]
   sendStruct.y = 2.12345;
 8000ff8:	a415      	add	r4, pc, #84	; (adr r4, 8001050 <udpSendingTask+0x80>)
 8000ffa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ffe:	e9c7 3404 	strd	r3, r4, [r7, #16]


   /* Create the socket. */
   xSocket = FreeRTOS_socket( FREERTOS_AF_INET,
 8001002:	2211      	movs	r2, #17
 8001004:	2102      	movs	r1, #2
 8001006:	2002      	movs	r0, #2
 8001008:	f009 f950 	bl	800a2ac <FreeRTOS_socket>
 800100c:	6238      	str	r0, [r7, #32]
                              FREERTOS_SOCK_DGRAM,/*FREERTOS_SOCK_DGRAM for UDP.*/
                              FREERTOS_IPPROTO_UDP );

   /* Check the socket was created. */
   configASSERT( xSocket != FREERTOS_INVALID_SOCKET );
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d103      	bne.n	800101e <udpSendingTask+0x4e>
 8001016:	4911      	ldr	r1, [pc, #68]	; (800105c <udpSendingTask+0x8c>)
 8001018:	204e      	movs	r0, #78	; 0x4e
 800101a:	f7ff fd04 	bl	8000a26 <vAssertCalled>

   /* NOTE: FreeRTOS_bind() is not called.  This will only work if
   ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is set to 1 in FreeRTOSIPConfig.h. */
   for( ;; )
   {
	   HAL_GPIO_TogglePin(LD_USER2_GPIO_Port, LD_USER2_Pin);
 800101e:	2120      	movs	r1, #32
 8001020:	480f      	ldr	r0, [pc, #60]	; (8001060 <udpSendingTask+0x90>)
 8001022:	f000 fbc4 	bl	80017ae <HAL_GPIO_TogglePin>
       FreeRTOS_sendto( xSocket,
 8001026:	f107 0108 	add.w	r1, r7, #8
 800102a:	2308      	movs	r3, #8
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2300      	movs	r3, #0
 8001036:	2210      	movs	r2, #16
 8001038:	6a38      	ldr	r0, [r7, #32]
 800103a:	f009 fa85 	bl	800a548 <FreeRTOS_sendto>
                        sizeof( sendStruct ),
                        0,
                        &xDestinationAddress,
                        sizeof( xDestinationAddress ) );
       /* Wait until it is time to send again. */
       vTaskDelay( x1000ms );
 800103e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001040:	f004 fd26 	bl	8005a90 <vTaskDelay>
	   HAL_GPIO_TogglePin(LD_USER2_GPIO_Port, LD_USER2_Pin);
 8001044:	e7eb      	b.n	800101e <udpSendingTask+0x4e>
 8001046:	bf00      	nop
 8001048:	9999999a 	.word	0x9999999a
 800104c:	3ff19999 	.word	0x3ff19999
 8001050:	5a858794 	.word	0x5a858794
 8001054:	4000fcd3 	.word	0x4000fcd3
 8001058:	08013930 	.word	0x08013930
 800105c:	08013910 	.word	0x08013910
 8001060:	40022400 	.word	0x40022400

08001064 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_USART1_UART_Init+0x58>)
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <MX_USART1_UART_Init+0x5c>)
 800106c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_USART1_UART_Init+0x58>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_USART1_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_USART1_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_USART1_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_USART1_UART_Init+0x58>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_USART1_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_USART1_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_USART1_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_USART1_UART_Init+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_USART1_UART_Init+0x58>)
 80010a8:	f002 f80e 	bl	80030c8 <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010b2:	f7ff fe11 	bl	8000cd8 <Error_Handler>
  }

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20025b8c 	.word	0x20025b8c
 80010c0:	40011000 	.word	0x40011000

080010c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a25      	ldr	r2, [pc, #148]	; (8001178 <HAL_UART_MspInit+0xb4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d144      	bne.n	8001170 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_UART_MspInit+0xb8>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <HAL_UART_MspInit+0xb8>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_UART_MspInit+0xb8>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_UART_MspInit+0xb8>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_UART_MspInit+0xb8>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_UART_MspInit+0xb8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_UART_MspInit+0xb8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_UART_MspInit+0xb8>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_UART_MspInit+0xb8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <HAL_UART_MspInit+0xbc>)
 800114a:	f000 f955 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800114e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001160:	2307      	movs	r3, #7
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <HAL_UART_MspInit+0xc0>)
 800116c:	f000 f944 	bl	80013f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40011000 	.word	0x40011000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400
 8001184:	40020000 	.word	0x40020000

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800118c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800118e:	e003      	b.n	8001198 <LoopCopyDataInit>

08001190 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001192:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001194:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001196:	3104      	adds	r1, #4

08001198 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800119c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800119e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011a0:	d3f6      	bcc.n	8001190 <CopyDataInit>
  ldr  r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011a4:	e002      	b.n	80011ac <LoopFillZerobss>

080011a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011a8:	f842 3b04 	str.w	r3, [r2], #4

080011ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011b0:	d3f9      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011b2:	f7ff feab 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f010 fae9 	bl	801178c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fcc5 	bl	8000b48 <main>
  bx  lr    
 80011be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80011c4:	080157c0 	.word	0x080157c0
  ldr  r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011cc:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 80011d0:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 80011d4:	20025d84 	.word	0x20025d84

080011d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>

080011da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011de:	2003      	movs	r0, #3
 80011e0:	f000 f8d5 	bl	800138e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fdd9 	bl	8000d9c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011ea:	f7ff fdb3 	bl	8000d54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	20025c0c 	.word	0x20025c0c

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20025c0c 	.word	0x20025c0c

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <__NVIC_SetPriorityGrouping+0x40>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	4313      	orrs	r3, r2
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x40>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00
 8001278:	05fa0000 	.word	0x05fa0000

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff4c 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b6:	f7ff ff61 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	6978      	ldr	r0, [r7, #20]
 80013c2:	f7ff ffb1 	bl	8001328 <NVIC_EncodePriority>
 80013c6:	4602      	mov	r2, r0
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff80 	bl	80012d4 <__NVIC_SetPriority>
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff54 	bl	8001298 <__NVIC_EnableIRQ>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	e175      	b.n	8001704 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 8164 	bne.w	80016fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d00b      	beq.n	8001456 <HAL_GPIO_Init+0x5e>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800144a:	2b11      	cmp	r3, #17
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b12      	cmp	r3, #18
 8001454:	d130      	bne.n	80014b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 0201 	and.w	r2, r3, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x100>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b12      	cmp	r3, #18
 80014f6:	d123      	bne.n	8001540 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	08da      	lsrs	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3208      	adds	r2, #8
 800153a:	69b9      	ldr	r1, [r7, #24]
 800153c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80be 	beq.w	80016fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a64      	ldr	r2, [pc, #400]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b62      	ldr	r3, [pc, #392]	; (8001718 <HAL_GPIO_Init+0x320>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800159a:	4a60      	ldr	r2, [pc, #384]	; (800171c <HAL_GPIO_Init+0x324>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a57      	ldr	r2, [pc, #348]	; (8001720 <HAL_GPIO_Init+0x328>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d037      	beq.n	8001636 <HAL_GPIO_Init+0x23e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a56      	ldr	r2, [pc, #344]	; (8001724 <HAL_GPIO_Init+0x32c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d031      	beq.n	8001632 <HAL_GPIO_Init+0x23a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a55      	ldr	r2, [pc, #340]	; (8001728 <HAL_GPIO_Init+0x330>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d02b      	beq.n	800162e <HAL_GPIO_Init+0x236>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a54      	ldr	r2, [pc, #336]	; (800172c <HAL_GPIO_Init+0x334>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d025      	beq.n	800162a <HAL_GPIO_Init+0x232>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a53      	ldr	r2, [pc, #332]	; (8001730 <HAL_GPIO_Init+0x338>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01f      	beq.n	8001626 <HAL_GPIO_Init+0x22e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a52      	ldr	r2, [pc, #328]	; (8001734 <HAL_GPIO_Init+0x33c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x22a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a51      	ldr	r2, [pc, #324]	; (8001738 <HAL_GPIO_Init+0x340>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x226>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a50      	ldr	r2, [pc, #320]	; (800173c <HAL_GPIO_Init+0x344>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x222>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4f      	ldr	r2, [pc, #316]	; (8001740 <HAL_GPIO_Init+0x348>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x21e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4e      	ldr	r2, [pc, #312]	; (8001744 <HAL_GPIO_Init+0x34c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x21a>
 800160e:	2309      	movs	r3, #9
 8001610:	e012      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001612:	230a      	movs	r3, #10
 8001614:	e010      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001616:	2308      	movs	r3, #8
 8001618:	e00e      	b.n	8001638 <HAL_GPIO_Init+0x240>
 800161a:	2307      	movs	r3, #7
 800161c:	e00c      	b.n	8001638 <HAL_GPIO_Init+0x240>
 800161e:	2306      	movs	r3, #6
 8001620:	e00a      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001622:	2305      	movs	r3, #5
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001626:	2304      	movs	r3, #4
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x240>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x240>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x240>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001648:	4934      	ldr	r1, [pc, #208]	; (800171c <HAL_GPIO_Init+0x324>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001656:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <HAL_GPIO_Init+0x350>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167a:	4a33      	ldr	r2, [pc, #204]	; (8001748 <HAL_GPIO_Init+0x350>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001680:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_GPIO_Init+0x350>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a4:	4a28      	ldr	r2, [pc, #160]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ce:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <HAL_GPIO_Init+0x350>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f ae86 	bls.w	8001418 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	3724      	adds	r7, #36	; 0x24
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40023800 	.word	0x40023800
 800171c:	40013800 	.word	0x40013800
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	40020800 	.word	0x40020800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40021000 	.word	0x40021000
 8001734:	40021400 	.word	0x40021400
 8001738:	40021800 	.word	0x40021800
 800173c:	40021c00 	.word	0x40021c00
 8001740:	40022000 	.word	0x40022000
 8001744:	40022400 	.word	0x40022400
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e001      	b.n	800176e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d004      	beq.n	80017d0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	041a      	lsls	r2, r3, #16
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017d0:	887a      	ldrh	r2, [r7, #2]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	619a      	str	r2, [r3, #24]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_PWREx_EnableOverDrive+0x98>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_PWREx_EnableOverDrive+0x98>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_PWREx_EnableOverDrive+0x98>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_PWREx_EnableOverDrive+0x9c>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001812:	f7ff fd03 	bl	800121c <HAL_GetTick>
 8001816:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001818:	e009      	b.n	800182e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800181a:	f7ff fcff 	bl	800121c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001828:	d901      	bls.n	800182e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e022      	b.n	8001874 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183a:	d1ee      	bne.n	800181a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_PWREx_EnableOverDrive+0x9c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001846:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001848:	f7ff fce8 	bl	800121c <HAL_GetTick>
 800184c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800184e:	e009      	b.n	8001864 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001850:	f7ff fce4 	bl	800121c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800185e:	d901      	bls.n	8001864 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e007      	b.n	8001874 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001870:	d1ee      	bne.n	8001850 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e29b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8087 	beq.w	80019b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a8:	4b96      	ldr	r3, [pc, #600]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d00c      	beq.n	80018ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b4:	4b93      	ldr	r3, [pc, #588]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d112      	bne.n	80018e6 <HAL_RCC_OscConfig+0x62>
 80018c0:	4b90      	ldr	r3, [pc, #576]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018cc:	d10b      	bne.n	80018e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ce:	4b8d      	ldr	r3, [pc, #564]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d06c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x130>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d168      	bne.n	80019b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e275      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x7a>
 80018f0:	4b84      	ldr	r3, [pc, #528]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a83      	ldr	r2, [pc, #524]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e02e      	b.n	800195c <HAL_RCC_OscConfig+0xd8>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x9c>
 8001906:	4b7f      	ldr	r3, [pc, #508]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7e      	ldr	r2, [pc, #504]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 800190c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7b      	ldr	r2, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0xd8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0xc0>
 800192a:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a75      	ldr	r2, [pc, #468]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0xd8>
 8001944:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6e      	ldr	r2, [pc, #440]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a6b      	ldr	r2, [pc, #428]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fc5a 	bl	800121c <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fc56 	bl	800121c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e229      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0xe8>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fc46 	bl	800121c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fc42 	bl	800121c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e215      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x110>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d069      	beq.n	8001a96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c2:	4b50      	ldr	r3, [pc, #320]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00b      	beq.n	80019e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d11c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x190>
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d116      	bne.n	8001a14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_RCC_OscConfig+0x17a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e1e9      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	493d      	ldr	r1, [pc, #244]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	e040      	b.n	8001a96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d023      	beq.n	8001a64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a38      	ldr	r2, [pc, #224]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fbf8 	bl	800121c <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff fbf4 	bl	800121c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e1c7      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	4b30      	ldr	r3, [pc, #192]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4929      	ldr	r1, [pc, #164]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
 8001a62:	e018      	b.n	8001a96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fbd4 	bl	800121c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a78:	f7ff fbd0 	bl	800121c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1a3      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d038      	beq.n	8001b14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d019      	beq.n	8001ade <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aae:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fbb1 	bl	800121c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abe:	f7ff fbad 	bl	800121c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e180      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x23a>
 8001adc:	e01a      	b.n	8001b14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb97 	bl	800121c <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af2:	f7ff fb93 	bl	800121c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d903      	bls.n	8001b08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e166      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
 8001b04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ee      	bne.n	8001af2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a4 	beq.w	8001c6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b8c      	ldr	r3, [pc, #560]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10d      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b89      	ldr	r3, [pc, #548]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a88      	ldr	r2, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4a:	4b83      	ldr	r3, [pc, #524]	; (8001d58 <HAL_RCC_OscConfig+0x4d4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b56:	4b80      	ldr	r3, [pc, #512]	; (8001d58 <HAL_RCC_OscConfig+0x4d4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7f      	ldr	r2, [pc, #508]	; (8001d58 <HAL_RCC_OscConfig+0x4d4>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb5b 	bl	800121c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff fb57 	bl	800121c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e12a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7c:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <HAL_RCC_OscConfig+0x4d4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x31a>
 8001b90:	4b70      	ldr	r3, [pc, #448]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a6f      	ldr	r2, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9c:	e02d      	b.n	8001bfa <HAL_RCC_OscConfig+0x376>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x33c>
 8001ba6:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a6a      	ldr	r2, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb2:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a67      	ldr	r2, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	e01c      	b.n	8001bfa <HAL_RCC_OscConfig+0x376>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x35e>
 8001bc8:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a61      	ldr	r2, [pc, #388]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a5e      	ldr	r2, [pc, #376]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x376>
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a5b      	ldr	r2, [pc, #364]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d015      	beq.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb0b 	bl	800121c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff fb07 	bl	800121c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0d8      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ee      	beq.n	8001c0a <HAL_RCC_OscConfig+0x386>
 8001c2c:	e014      	b.n	8001c58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff faf5 	bl	800121c <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff faf1 	bl	800121c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0c2      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ee      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a3c      	ldr	r2, [pc, #240]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80ae 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c74:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d06d      	beq.n	8001d5c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d14b      	bne.n	8001d20 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff fac2 	bl	800121c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff fabe 	bl	800121c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e091      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	019b      	lsls	r3, r3, #6
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	071b      	lsls	r3, r3, #28
 8001ce6:	491b      	ldr	r1, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fa90 	bl	800121c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff fa8c 	bl	800121c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e05f      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x47c>
 8001d1e:	e057      	b.n	8001dd0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fa76 	bl	800121c <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff fa72 	bl	800121c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e045      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_RCC_OscConfig+0x4d0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4b0>
 8001d52:	e03d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x54c>
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <HAL_RCC_OscConfig+0x558>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d030      	beq.n	8001dcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d129      	bne.n	8001dcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d122      	bne.n	8001dcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d119      	bne.n	8001dcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	085b      	lsrs	r3, r3, #1
 8001da4:	3b01      	subs	r3, #1
 8001da6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d10f      	bne.n	8001dcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d0      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 020f 	bic.w	r2, r3, #15
 8001e0e:	4965      	ldr	r1, [pc, #404]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0b8      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	494d      	ldr	r1, [pc, #308]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d040      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e07f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e073      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e06b      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4936      	ldr	r1, [pc, #216]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed4:	f7ff f9a2 	bl	800121c <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7ff f99e 	bl	800121c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e053      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 020c 	and.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1eb      	bne.n	8001edc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d210      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 020f 	bic.w	r2, r3, #15
 8001f1a:	4922      	ldr	r1, [pc, #136]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e032      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f72:	f000 f821 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f76:	4601      	mov	r1, r0
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x1cc>)
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	fa21 f303 	lsr.w	r3, r1, r3
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x1d4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe ff02 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023c00 	.word	0x40023c00
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	08015458 	.word	0x08015458
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fce:	4b50      	ldr	r3, [pc, #320]	; (8002110 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d007      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x32>
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x38>
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 808d 	bne.w	80020fe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe4:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001fe6:	60bb      	str	r3, [r7, #8]
      break;
 8001fe8:	e08c      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fea:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fec:	60bb      	str	r3, [r7, #8]
      break;
 8001fee:	e089      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff0:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ffa:	4b45      	ldr	r3, [pc, #276]	; (8002110 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d023      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002006:	4b42      	ldr	r3, [pc, #264]	; (8002110 <HAL_RCC_GetSysClockFreq+0x158>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	099b      	lsrs	r3, r3, #6
 800200c:	f04f 0400 	mov.w	r4, #0
 8002010:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	ea03 0501 	and.w	r5, r3, r1
 800201c:	ea04 0602 	and.w	r6, r4, r2
 8002020:	4a3d      	ldr	r2, [pc, #244]	; (8002118 <HAL_RCC_GetSysClockFreq+0x160>)
 8002022:	fb02 f106 	mul.w	r1, r2, r6
 8002026:	2200      	movs	r2, #0
 8002028:	fb02 f205 	mul.w	r2, r2, r5
 800202c:	440a      	add	r2, r1
 800202e:	493a      	ldr	r1, [pc, #232]	; (8002118 <HAL_RCC_GetSysClockFreq+0x160>)
 8002030:	fba5 0101 	umull	r0, r1, r5, r1
 8002034:	1853      	adds	r3, r2, r1
 8002036:	4619      	mov	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f04f 0400 	mov.w	r4, #0
 800203e:	461a      	mov	r2, r3
 8002040:	4623      	mov	r3, r4
 8002042:	f7fe f965 	bl	8000310 <__aeabi_uldivmod>
 8002046:	4603      	mov	r3, r0
 8002048:	460c      	mov	r4, r1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e049      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_RCC_GetSysClockFreq+0x158>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	099b      	lsrs	r3, r3, #6
 8002054:	f04f 0400 	mov.w	r4, #0
 8002058:	f240 11ff 	movw	r1, #511	; 0x1ff
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	ea03 0501 	and.w	r5, r3, r1
 8002064:	ea04 0602 	and.w	r6, r4, r2
 8002068:	4629      	mov	r1, r5
 800206a:	4632      	mov	r2, r6
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	f04f 0400 	mov.w	r4, #0
 8002074:	0154      	lsls	r4, r2, #5
 8002076:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800207a:	014b      	lsls	r3, r1, #5
 800207c:	4619      	mov	r1, r3
 800207e:	4622      	mov	r2, r4
 8002080:	1b49      	subs	r1, r1, r5
 8002082:	eb62 0206 	sbc.w	r2, r2, r6
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	0194      	lsls	r4, r2, #6
 8002090:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002094:	018b      	lsls	r3, r1, #6
 8002096:	1a5b      	subs	r3, r3, r1
 8002098:	eb64 0402 	sbc.w	r4, r4, r2
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	00e2      	lsls	r2, r4, #3
 80020a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020aa:	00d9      	lsls	r1, r3, #3
 80020ac:	460b      	mov	r3, r1
 80020ae:	4614      	mov	r4, r2
 80020b0:	195b      	adds	r3, r3, r5
 80020b2:	eb44 0406 	adc.w	r4, r4, r6
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	02a2      	lsls	r2, r4, #10
 80020c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020c4:	0299      	lsls	r1, r3, #10
 80020c6:	460b      	mov	r3, r1
 80020c8:	4614      	mov	r4, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	4621      	mov	r1, r4
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f04f 0400 	mov.w	r4, #0
 80020d4:	461a      	mov	r2, r3
 80020d6:	4623      	mov	r3, r4
 80020d8:	f7fe f91a 	bl	8000310 <__aeabi_uldivmod>
 80020dc:	4603      	mov	r3, r0
 80020de:	460c      	mov	r4, r1
 80020e0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_GetSysClockFreq+0x158>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	3301      	adds	r3, #1
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	60bb      	str	r3, [r7, #8]
      break;
 80020fc:	e002      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002100:	60bb      	str	r3, [r7, #8]
      break;
 8002102:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002104:	68bb      	ldr	r3, [r7, #8]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	00f42400 	.word	0x00f42400
 8002118:	017d7840 	.word	0x017d7840

0800211c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_RCC_GetHCLKFreq+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002138:	f7ff fff0 	bl	800211c <HAL_RCC_GetHCLKFreq>
 800213c:	4601      	mov	r1, r0
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	0a9b      	lsrs	r3, r3, #10
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4a03      	ldr	r2, [pc, #12]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40023800 	.word	0x40023800
 8002158:	08015468 	.word	0x08015468

0800215c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002160:	f7ff ffdc 	bl	800211c <HAL_RCC_GetHCLKFreq>
 8002164:	4601      	mov	r1, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	0b5b      	lsrs	r3, r3, #13
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	08015468 	.word	0x08015468

08002184 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	220f      	movs	r2, #15
 8002192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_RCC_GetClockConfig+0x5c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_GetClockConfig+0x5c>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_RCC_GetClockConfig+0x5c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_RCC_GetClockConfig+0x60>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	601a      	str	r2, [r3, #0]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d012      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002210:	4b69      	ldr	r3, [pc, #420]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a68      	ldr	r2, [pc, #416]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002216:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800221a:	6093      	str	r3, [r2, #8]
 800221c:	4b66      	ldr	r3, [pc, #408]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002224:	4964      	ldr	r1, [pc, #400]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d017      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002242:	4b5d      	ldr	r3, [pc, #372]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	4959      	ldr	r1, [pc, #356]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002260:	d101      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d017      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800227e:	4b4e      	ldr	r3, [pc, #312]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002284:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	494a      	ldr	r1, [pc, #296]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800229c:	d101      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800229e:	2301      	movs	r3, #1
 80022a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 808b 	beq.w	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d6:	6413      	str	r3, [r2, #64]	; 0x40
 80022d8:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a34      	ldr	r2, [pc, #208]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f0:	f7fe ff94 	bl	800121c <HAL_GetTick>
 80022f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f8:	f7fe ff90 	bl	800121c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e38d      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800230a:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d035      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	429a      	cmp	r2, r3
 8002332:	d02e      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002354:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002356:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d114      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe ff58 	bl	800121c <HAL_GetTick>
 800236c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe ff54 	bl	800121c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e34f      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0ee      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800239e:	d111      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023ae:	400b      	ands	r3, r1
 80023b0:	4901      	ldr	r1, [pc, #4]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
 80023b6:	e00b      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000
 80023c0:	0ffffcff 	.word	0x0ffffcff
 80023c4:	4bb3      	ldr	r3, [pc, #716]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4ab2      	ldr	r2, [pc, #712]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023ce:	6093      	str	r3, [r2, #8]
 80023d0:	4bb0      	ldr	r3, [pc, #704]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023dc:	49ad      	ldr	r1, [pc, #692]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023ee:	4ba9      	ldr	r3, [pc, #676]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f4:	4aa7      	ldr	r2, [pc, #668]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023fe:	4ba5      	ldr	r3, [pc, #660]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002400:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	49a2      	ldr	r1, [pc, #648]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800241c:	4b9d      	ldr	r3, [pc, #628]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800242a:	499a      	ldr	r1, [pc, #616]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800243e:	4b95      	ldr	r3, [pc, #596]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800244c:	4991      	ldr	r1, [pc, #580]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002460:	4b8c      	ldr	r3, [pc, #560]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800246e:	4989      	ldr	r1, [pc, #548]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002482:	4b84      	ldr	r3, [pc, #528]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4980      	ldr	r1, [pc, #512]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024a4:	4b7b      	ldr	r3, [pc, #492]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4978      	ldr	r1, [pc, #480]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024c6:	4b73      	ldr	r3, [pc, #460]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f023 020c 	bic.w	r2, r3, #12
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d4:	496f      	ldr	r1, [pc, #444]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	4967      	ldr	r1, [pc, #412]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800250a:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002510:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002518:	495e      	ldr	r1, [pc, #376]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	4956      	ldr	r1, [pc, #344]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	494d      	ldr	r1, [pc, #308]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002570:	4b48      	ldr	r3, [pc, #288]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	4945      	ldr	r1, [pc, #276]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002592:	4b40      	ldr	r3, [pc, #256]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a0:	493c      	ldr	r1, [pc, #240]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025b4:	4b37      	ldr	r3, [pc, #220]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025c2:	4934      	ldr	r1, [pc, #208]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d011      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025d6:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025e4:	492b      	ldr	r1, [pc, #172]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f4:	d101      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002624:	491b      	ldr	r1, [pc, #108]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002648:	4912      	ldr	r1, [pc, #72]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00b      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800266c:	4909      	ldr	r1, [pc, #36]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00f      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002686:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	e002      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	4985      	ldr	r1, [pc, #532]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80026ac:	4b80      	ldr	r3, [pc, #512]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026bc:	497c      	ldr	r1, [pc, #496]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d005      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026d2:	f040 80d6 	bne.w	8002882 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e2:	f7fe fd9b 	bl	800121c <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026ea:	f7fe fd97 	bl	800121c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	; 0x64
 80026f6:	d901      	bls.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e194      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026fc:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d021      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	2b00      	cmp	r3, #0
 800271a:	d11d      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800271c:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800271e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002722:	0c1b      	lsrs	r3, r3, #16
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800272a:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800272c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002730:	0e1b      	lsrs	r3, r3, #24
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	019a      	lsls	r2, r3, #6
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	061b      	lsls	r3, r3, #24
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	071b      	lsls	r3, r3, #28
 8002750:	4957      	ldr	r1, [pc, #348]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002776:	2b00      	cmp	r3, #0
 8002778:	d02e      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002782:	d129      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002784:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002792:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002798:	0f1b      	lsrs	r3, r3, #28
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	019a      	lsls	r2, r3, #6
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	071b      	lsls	r3, r3, #28
 80027b8:	493d      	ldr	r1, [pc, #244]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c6:	f023 021f 	bic.w	r2, r3, #31
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	3b01      	subs	r3, #1
 80027d0:	4937      	ldr	r1, [pc, #220]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01d      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027e4:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ea:	0e1b      	lsrs	r3, r3, #24
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027f2:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f8:	0f1b      	lsrs	r3, r3, #28
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	019a      	lsls	r2, r3, #6
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	431a      	orrs	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	071b      	lsls	r3, r3, #28
 8002818:	4925      	ldr	r1, [pc, #148]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d011      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	019a      	lsls	r2, r3, #6
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	061b      	lsls	r3, r3, #24
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	071b      	lsls	r3, r3, #28
 8002848:	4919      	ldr	r1, [pc, #100]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002850:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002856:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800285a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285c:	f7fe fcde 	bl	800121c <HAL_GetTick>
 8002860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002864:	f7fe fcda 	bl	800121c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0d7      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b01      	cmp	r3, #1
 8002886:	f040 80cd 	bne.w	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002896:	f7fe fcc1 	bl	800121c <HAL_GetTick>
 800289a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800289c:	e00a      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800289e:	f7fe fcbd 	bl	800121c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d903      	bls.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0ba      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80028b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028b4:	4b5e      	ldr	r3, [pc, #376]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c0:	d0ed      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d02e      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d12a      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028ea:	4b51      	ldr	r3, [pc, #324]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028f8:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	0f1b      	lsrs	r3, r3, #28
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	019a      	lsls	r2, r3, #6
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	431a      	orrs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	071b      	lsls	r3, r3, #28
 800291e:	4944      	ldr	r1, [pc, #272]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002926:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800292c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	3b01      	subs	r3, #1
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	493d      	ldr	r1, [pc, #244]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d022      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002954:	d11d      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002956:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	0e1b      	lsrs	r3, r3, #24
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	0f1b      	lsrs	r3, r3, #28
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	019a      	lsls	r2, r3, #6
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	061b      	lsls	r3, r3, #24
 8002984:	431a      	orrs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	071b      	lsls	r3, r3, #28
 800298a:	4929      	ldr	r1, [pc, #164]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d028      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	0e1b      	lsrs	r3, r3, #24
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	019a      	lsls	r2, r3, #6
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	061b      	lsls	r3, r3, #24
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	071b      	lsls	r3, r3, #28
 80029d2:	4917      	ldr	r1, [pc, #92]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	4911      	ldr	r1, [pc, #68]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7fe fc0e 	bl	800121c <HAL_GetTick>
 8002a00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a04:	f7fe fc0a 	bl	800121c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e007      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a22:	d1ef      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e01c      	b.n	8002a80 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	795b      	ldrb	r3, [r3, #5]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe f956 	bl	8000d08 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0204 	orr.w	r2, r2, #4
 8002a70:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	791b      	ldrb	r3, [r3, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e03d      	b.n	8002b1e <HAL_RNG_GenerateRandomNumber+0x96>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	795b      	ldrb	r3, [r3, #5]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d12c      	bne.n	8002b0c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fbb0 	bl	800121c <HAL_GetTick>
 8002abc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002abe:	e011      	b.n	8002ae4 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002ac0:	f7fe fbac 	bl	800121c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d90a      	bls.n	8002ae4 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e01c      	b.n	8002b1e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d1e6      	bne.n	8002ac0 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	715a      	strb	r2, [r3, #5]
 8002b0a:	e004      	b.n	8002b16 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	711a      	strb	r2, [r3, #4]

  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d105      	bne.n	8002b4c <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2210      	movs	r2, #16
 8002b44:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002b46:	2301      	movs	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e00b      	b.n	8002b64 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b40      	cmp	r3, #64	; 0x40
 8002b58:	d104      	bne.n	8002b64 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002b60:	2301      	movs	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10a      	bne.n	8002b80 <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f839 	bl	8002be8 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d11d      	bne.n	8002bca <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0208 	bic.w	r2, r2, #8
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	795b      	ldrb	r3, [r3, #5]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d00b      	beq.n	8002bca <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f804 	bl	8002bd2 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e01d      	b.n	8002c4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f815 	bl	8002c52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f000 f986 	bl	8002f4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_TIM_Base_Start_IT+0x50>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d00b      	beq.n	8002caa <HAL_TIM_Base_Start_IT+0x42>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d007      	beq.n	8002caa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	00010007 	.word	0x00010007

08002cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0202 	mvn.w	r2, #2
 8002ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f905 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8f7 	bl	8002efa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f908 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0204 	mvn.w	r2, #4
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8db 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8cd 	bl	8002efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8de 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d122      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d11b      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0208 	mvn.w	r2, #8
 8002d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2204      	movs	r2, #4
 8002d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f8b1 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f8a3 	bl	8002efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f8b4 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d122      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d11b      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0210 	mvn.w	r2, #16
 8002de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2208      	movs	r2, #8
 8002dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f887 	bl	8002f0e <HAL_TIM_IC_CaptureCallback>
 8002e00:	e005      	b.n	8002e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f879 	bl	8002efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f88a 	bl	8002f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10e      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d107      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0201 	mvn.w	r2, #1
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fd ff3a 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	2b80      	cmp	r3, #128	; 0x80
 8002e4c:	d10e      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d107      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f91a 	bl	80030a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7a:	d10e      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b80      	cmp	r3, #128	; 0x80
 8002e88:	d107      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f90d 	bl	80030b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb2:	2b40      	cmp	r3, #64	; 0x40
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f838 	bl	8002f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d107      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f06f 0220 	mvn.w	r2, #32
 8002eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f8cd 	bl	800308c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a40      	ldr	r2, [pc, #256]	; (8003060 <TIM_Base_SetConfig+0x114>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6a:	d00f      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a3d      	ldr	r2, [pc, #244]	; (8003064 <TIM_Base_SetConfig+0x118>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00b      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <TIM_Base_SetConfig+0x11c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d007      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3b      	ldr	r2, [pc, #236]	; (800306c <TIM_Base_SetConfig+0x120>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <TIM_Base_SetConfig+0x124>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d108      	bne.n	8002f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <TIM_Base_SetConfig+0x114>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d02b      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d027      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <TIM_Base_SetConfig+0x118>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d023      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2b      	ldr	r2, [pc, #172]	; (8003068 <TIM_Base_SetConfig+0x11c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01f      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	; (800306c <TIM_Base_SetConfig+0x120>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01b      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a29      	ldr	r2, [pc, #164]	; (8003070 <TIM_Base_SetConfig+0x124>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d017      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <TIM_Base_SetConfig+0x128>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <TIM_Base_SetConfig+0x12c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00f      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	; (800307c <TIM_Base_SetConfig+0x130>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00b      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a25      	ldr	r2, [pc, #148]	; (8003080 <TIM_Base_SetConfig+0x134>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d007      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a24      	ldr	r2, [pc, #144]	; (8003084 <TIM_Base_SetConfig+0x138>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d003      	beq.n	8002ffe <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a23      	ldr	r2, [pc, #140]	; (8003088 <TIM_Base_SetConfig+0x13c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d108      	bne.n	8003010 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <TIM_Base_SetConfig+0x114>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d003      	beq.n	8003044 <TIM_Base_SetConfig+0xf8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <TIM_Base_SetConfig+0x124>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d103      	bne.n	800304c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	615a      	str	r2, [r3, #20]
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40010000 	.word	0x40010000
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40000c00 	.word	0x40000c00
 8003070:	40010400 	.word	0x40010400
 8003074:	40014000 	.word	0x40014000
 8003078:	40014400 	.word	0x40014400
 800307c:	40014800 	.word	0x40014800
 8003080:	40001800 	.word	0x40001800
 8003084:	40001c00 	.word	0x40001c00
 8003088:	40002000 	.word	0x40002000

0800308c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e040      	b.n	800315c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd ffea 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f82c 	bl	8003164 <UART_SetConfig>
 800310c:	4603      	mov	r3, r0
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e022      	b.n	800315c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 faca 	bl	80036b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb51 	bl	80037fc <UART_CheckIdleState>
 800315a:	4603      	mov	r3, r0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4bb1      	ldr	r3, [pc, #708]	; (8003458 <UART_SetConfig+0x2f4>)
 8003194:	4013      	ands	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	6939      	ldr	r1, [r7, #16]
 800319c:	430b      	orrs	r3, r1
 800319e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a9f      	ldr	r2, [pc, #636]	; (800345c <UART_SetConfig+0x2f8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d121      	bne.n	8003228 <UART_SetConfig+0xc4>
 80031e4:	4b9e      	ldr	r3, [pc, #632]	; (8003460 <UART_SetConfig+0x2fc>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d816      	bhi.n	8003220 <UART_SetConfig+0xbc>
 80031f2:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <UART_SetConfig+0x94>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	08003209 	.word	0x08003209
 80031fc:	08003215 	.word	0x08003215
 8003200:	0800320f 	.word	0x0800320f
 8003204:	0800321b 	.word	0x0800321b
 8003208:	2301      	movs	r3, #1
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e151      	b.n	80034b2 <UART_SetConfig+0x34e>
 800320e:	2302      	movs	r3, #2
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e14e      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003214:	2304      	movs	r3, #4
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e14b      	b.n	80034b2 <UART_SetConfig+0x34e>
 800321a:	2308      	movs	r3, #8
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e148      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003220:	2310      	movs	r3, #16
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	bf00      	nop
 8003226:	e144      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a8d      	ldr	r2, [pc, #564]	; (8003464 <UART_SetConfig+0x300>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d134      	bne.n	800329c <UART_SetConfig+0x138>
 8003232:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <UART_SetConfig+0x2fc>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d829      	bhi.n	8003294 <UART_SetConfig+0x130>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0xe4>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	0800327d 	.word	0x0800327d
 800324c:	08003295 	.word	0x08003295
 8003250:	08003295 	.word	0x08003295
 8003254:	08003295 	.word	0x08003295
 8003258:	08003289 	.word	0x08003289
 800325c:	08003295 	.word	0x08003295
 8003260:	08003295 	.word	0x08003295
 8003264:	08003295 	.word	0x08003295
 8003268:	08003283 	.word	0x08003283
 800326c:	08003295 	.word	0x08003295
 8003270:	08003295 	.word	0x08003295
 8003274:	08003295 	.word	0x08003295
 8003278:	0800328f 	.word	0x0800328f
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e117      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e114      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e111      	b.n	80034b2 <UART_SetConfig+0x34e>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e10e      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	bf00      	nop
 800329a:	e10a      	b.n	80034b2 <UART_SetConfig+0x34e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a71      	ldr	r2, [pc, #452]	; (8003468 <UART_SetConfig+0x304>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d120      	bne.n	80032e8 <UART_SetConfig+0x184>
 80032a6:	4b6e      	ldr	r3, [pc, #440]	; (8003460 <UART_SetConfig+0x2fc>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d00f      	beq.n	80032d4 <UART_SetConfig+0x170>
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d802      	bhi.n	80032be <UART_SetConfig+0x15a>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <UART_SetConfig+0x164>
 80032bc:	e010      	b.n	80032e0 <UART_SetConfig+0x17c>
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d005      	beq.n	80032ce <UART_SetConfig+0x16a>
 80032c2:	2b30      	cmp	r3, #48	; 0x30
 80032c4:	d009      	beq.n	80032da <UART_SetConfig+0x176>
 80032c6:	e00b      	b.n	80032e0 <UART_SetConfig+0x17c>
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e0f1      	b.n	80034b2 <UART_SetConfig+0x34e>
 80032ce:	2302      	movs	r3, #2
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e0ee      	b.n	80034b2 <UART_SetConfig+0x34e>
 80032d4:	2304      	movs	r3, #4
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e0eb      	b.n	80034b2 <UART_SetConfig+0x34e>
 80032da:	2308      	movs	r3, #8
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e0e8      	b.n	80034b2 <UART_SetConfig+0x34e>
 80032e0:	2310      	movs	r3, #16
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	bf00      	nop
 80032e6:	e0e4      	b.n	80034b2 <UART_SetConfig+0x34e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a5f      	ldr	r2, [pc, #380]	; (800346c <UART_SetConfig+0x308>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d120      	bne.n	8003334 <UART_SetConfig+0x1d0>
 80032f2:	4b5b      	ldr	r3, [pc, #364]	; (8003460 <UART_SetConfig+0x2fc>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d00f      	beq.n	8003320 <UART_SetConfig+0x1bc>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d802      	bhi.n	800330a <UART_SetConfig+0x1a6>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <UART_SetConfig+0x1b0>
 8003308:	e010      	b.n	800332c <UART_SetConfig+0x1c8>
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d005      	beq.n	800331a <UART_SetConfig+0x1b6>
 800330e:	2bc0      	cmp	r3, #192	; 0xc0
 8003310:	d009      	beq.n	8003326 <UART_SetConfig+0x1c2>
 8003312:	e00b      	b.n	800332c <UART_SetConfig+0x1c8>
 8003314:	2300      	movs	r3, #0
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e0cb      	b.n	80034b2 <UART_SetConfig+0x34e>
 800331a:	2302      	movs	r3, #2
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e0c8      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003320:	2304      	movs	r3, #4
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e0c5      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003326:	2308      	movs	r3, #8
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e0c2      	b.n	80034b2 <UART_SetConfig+0x34e>
 800332c:	2310      	movs	r3, #16
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	bf00      	nop
 8003332:	e0be      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a4d      	ldr	r2, [pc, #308]	; (8003470 <UART_SetConfig+0x30c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d124      	bne.n	8003388 <UART_SetConfig+0x224>
 800333e:	4b48      	ldr	r3, [pc, #288]	; (8003460 <UART_SetConfig+0x2fc>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334c:	d012      	beq.n	8003374 <UART_SetConfig+0x210>
 800334e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003352:	d802      	bhi.n	800335a <UART_SetConfig+0x1f6>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <UART_SetConfig+0x204>
 8003358:	e012      	b.n	8003380 <UART_SetConfig+0x21c>
 800335a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335e:	d006      	beq.n	800336e <UART_SetConfig+0x20a>
 8003360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003364:	d009      	beq.n	800337a <UART_SetConfig+0x216>
 8003366:	e00b      	b.n	8003380 <UART_SetConfig+0x21c>
 8003368:	2300      	movs	r3, #0
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e0a1      	b.n	80034b2 <UART_SetConfig+0x34e>
 800336e:	2302      	movs	r3, #2
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e09e      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003374:	2304      	movs	r3, #4
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e09b      	b.n	80034b2 <UART_SetConfig+0x34e>
 800337a:	2308      	movs	r3, #8
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e098      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003380:	2310      	movs	r3, #16
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	bf00      	nop
 8003386:	e094      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a39      	ldr	r2, [pc, #228]	; (8003474 <UART_SetConfig+0x310>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d124      	bne.n	80033dc <UART_SetConfig+0x278>
 8003392:	4b33      	ldr	r3, [pc, #204]	; (8003460 <UART_SetConfig+0x2fc>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d012      	beq.n	80033c8 <UART_SetConfig+0x264>
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a6:	d802      	bhi.n	80033ae <UART_SetConfig+0x24a>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <UART_SetConfig+0x258>
 80033ac:	e012      	b.n	80033d4 <UART_SetConfig+0x270>
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b2:	d006      	beq.n	80033c2 <UART_SetConfig+0x25e>
 80033b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033b8:	d009      	beq.n	80033ce <UART_SetConfig+0x26a>
 80033ba:	e00b      	b.n	80033d4 <UART_SetConfig+0x270>
 80033bc:	2301      	movs	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e077      	b.n	80034b2 <UART_SetConfig+0x34e>
 80033c2:	2302      	movs	r3, #2
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e074      	b.n	80034b2 <UART_SetConfig+0x34e>
 80033c8:	2304      	movs	r3, #4
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e071      	b.n	80034b2 <UART_SetConfig+0x34e>
 80033ce:	2308      	movs	r3, #8
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e06e      	b.n	80034b2 <UART_SetConfig+0x34e>
 80033d4:	2310      	movs	r3, #16
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	bf00      	nop
 80033da:	e06a      	b.n	80034b2 <UART_SetConfig+0x34e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a25      	ldr	r2, [pc, #148]	; (8003478 <UART_SetConfig+0x314>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d124      	bne.n	8003430 <UART_SetConfig+0x2cc>
 80033e6:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <UART_SetConfig+0x2fc>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	d012      	beq.n	800341c <UART_SetConfig+0x2b8>
 80033f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fa:	d802      	bhi.n	8003402 <UART_SetConfig+0x29e>
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <UART_SetConfig+0x2ac>
 8003400:	e012      	b.n	8003428 <UART_SetConfig+0x2c4>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	d006      	beq.n	8003416 <UART_SetConfig+0x2b2>
 8003408:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800340c:	d009      	beq.n	8003422 <UART_SetConfig+0x2be>
 800340e:	e00b      	b.n	8003428 <UART_SetConfig+0x2c4>
 8003410:	2300      	movs	r3, #0
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e04d      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003416:	2302      	movs	r3, #2
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e04a      	b.n	80034b2 <UART_SetConfig+0x34e>
 800341c:	2304      	movs	r3, #4
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e047      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003422:	2308      	movs	r3, #8
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e044      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003428:	2310      	movs	r3, #16
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	bf00      	nop
 800342e:	e040      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a11      	ldr	r2, [pc, #68]	; (800347c <UART_SetConfig+0x318>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d139      	bne.n	80034ae <UART_SetConfig+0x34a>
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <UART_SetConfig+0x2fc>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003448:	d027      	beq.n	800349a <UART_SetConfig+0x336>
 800344a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344e:	d817      	bhi.n	8003480 <UART_SetConfig+0x31c>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01c      	beq.n	800348e <UART_SetConfig+0x32a>
 8003454:	e027      	b.n	80034a6 <UART_SetConfig+0x342>
 8003456:	bf00      	nop
 8003458:	efff69f3 	.word	0xefff69f3
 800345c:	40011000 	.word	0x40011000
 8003460:	40023800 	.word	0x40023800
 8003464:	40004400 	.word	0x40004400
 8003468:	40004800 	.word	0x40004800
 800346c:	40004c00 	.word	0x40004c00
 8003470:	40005000 	.word	0x40005000
 8003474:	40011400 	.word	0x40011400
 8003478:	40007800 	.word	0x40007800
 800347c:	40007c00 	.word	0x40007c00
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	d006      	beq.n	8003494 <UART_SetConfig+0x330>
 8003486:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800348a:	d009      	beq.n	80034a0 <UART_SetConfig+0x33c>
 800348c:	e00b      	b.n	80034a6 <UART_SetConfig+0x342>
 800348e:	2300      	movs	r3, #0
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e00e      	b.n	80034b2 <UART_SetConfig+0x34e>
 8003494:	2302      	movs	r3, #2
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e00b      	b.n	80034b2 <UART_SetConfig+0x34e>
 800349a:	2304      	movs	r3, #4
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e008      	b.n	80034b2 <UART_SetConfig+0x34e>
 80034a0:	2308      	movs	r3, #8
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e005      	b.n	80034b2 <UART_SetConfig+0x34e>
 80034a6:	2310      	movs	r3, #16
 80034a8:	77fb      	strb	r3, [r7, #31]
 80034aa:	bf00      	nop
 80034ac:	e001      	b.n	80034b2 <UART_SetConfig+0x34e>
 80034ae:	2310      	movs	r3, #16
 80034b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ba:	d17f      	bne.n	80035bc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80034bc:	7ffb      	ldrb	r3, [r7, #31]
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d85c      	bhi.n	800357c <UART_SetConfig+0x418>
 80034c2:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <UART_SetConfig+0x364>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	0800350d 	.word	0x0800350d
 80034d0:	0800352d 	.word	0x0800352d
 80034d4:	0800357d 	.word	0x0800357d
 80034d8:	08003545 	.word	0x08003545
 80034dc:	0800357d 	.word	0x0800357d
 80034e0:	0800357d 	.word	0x0800357d
 80034e4:	0800357d 	.word	0x0800357d
 80034e8:	08003565 	.word	0x08003565
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ec:	f7fe fe22 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 80034f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	005a      	lsls	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	441a      	add	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	61bb      	str	r3, [r7, #24]
        break;
 800350a:	e03a      	b.n	8003582 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800350c:	f7fe fe26 	bl	800215c <HAL_RCC_GetPCLK2Freq>
 8003510:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	005a      	lsls	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	61bb      	str	r3, [r7, #24]
        break;
 800352a:	e02a      	b.n	8003582 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	085a      	lsrs	r2, r3, #1
 8003532:	4b5f      	ldr	r3, [pc, #380]	; (80036b0 <UART_SetConfig+0x54c>)
 8003534:	4413      	add	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6852      	ldr	r2, [r2, #4]
 800353a:	fbb3 f3f2 	udiv	r3, r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	61bb      	str	r3, [r7, #24]
        break;
 8003542:	e01e      	b.n	8003582 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003544:	f7fe fd38 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8003548:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	005a      	lsls	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	441a      	add	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	61bb      	str	r3, [r7, #24]
        break;
 8003562:	e00e      	b.n	8003582 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	61bb      	str	r3, [r7, #24]
        break;
 800357a:	e002      	b.n	8003582 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]
        break;
 8003580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b0f      	cmp	r3, #15
 8003586:	d916      	bls.n	80035b6 <UART_SetConfig+0x452>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358e:	d212      	bcs.n	80035b6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f023 030f 	bic.w	r3, r3, #15
 8003598:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	897a      	ldrh	r2, [r7, #10]
 80035b2:	60da      	str	r2, [r3, #12]
 80035b4:	e070      	b.n	8003698 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
 80035ba:	e06d      	b.n	8003698 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80035bc:	7ffb      	ldrb	r3, [r7, #31]
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d859      	bhi.n	8003676 <UART_SetConfig+0x512>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x464>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	0800360b 	.word	0x0800360b
 80035d0:	08003629 	.word	0x08003629
 80035d4:	08003677 	.word	0x08003677
 80035d8:	08003641 	.word	0x08003641
 80035dc:	08003677 	.word	0x08003677
 80035e0:	08003677 	.word	0x08003677
 80035e4:	08003677 	.word	0x08003677
 80035e8:	0800365f 	.word	0x0800365f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7fe fda2 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 80035f0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	085a      	lsrs	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	441a      	add	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	b29b      	uxth	r3, r3
 8003606:	61bb      	str	r3, [r7, #24]
        break;
 8003608:	e038      	b.n	800367c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800360a:	f7fe fda7 	bl	800215c <HAL_RCC_GetPCLK2Freq>
 800360e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	085a      	lsrs	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	b29b      	uxth	r3, r3
 8003624:	61bb      	str	r3, [r7, #24]
        break;
 8003626:	e029      	b.n	800367c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	085a      	lsrs	r2, r3, #1
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <UART_SetConfig+0x550>)
 8003630:	4413      	add	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6852      	ldr	r2, [r2, #4]
 8003636:	fbb3 f3f2 	udiv	r3, r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	61bb      	str	r3, [r7, #24]
        break;
 800363e:	e01d      	b.n	800367c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003640:	f7fe fcba 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8003644:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	085a      	lsrs	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	441a      	add	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	b29b      	uxth	r3, r3
 800365a:	61bb      	str	r3, [r7, #24]
        break;
 800365c:	e00e      	b.n	800367c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	b29b      	uxth	r3, r3
 8003672:	61bb      	str	r3, [r7, #24]
        break;
 8003674:	e002      	b.n	800367c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
        break;
 800367a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b0f      	cmp	r3, #15
 8003680:	d908      	bls.n	8003694 <UART_SetConfig+0x530>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d204      	bcs.n	8003694 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	e001      	b.n	8003698 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	01e84800 	.word	0x01e84800
 80036b4:	00f42400 	.word	0x00f42400

080036b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01a      	beq.n	80037ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b6:	d10a      	bne.n	80037ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]
  }
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af02      	add	r7, sp, #8
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800380a:	f7fd fd07 	bl	800121c <HAL_GetTick>
 800380e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b08      	cmp	r3, #8
 800381c:	d10e      	bne.n	800383c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800381e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f82a 	bl	8003886 <UART_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e020      	b.n	800387e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d10e      	bne.n	8003868 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800384a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f814 	bl	8003886 <UART_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e00a      	b.n	800387e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4613      	mov	r3, r2
 8003894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003896:	e05d      	b.n	8003954 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d059      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a0:	f7fd fcbc 	bl	800121c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11b      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e042      	b.n	8003974 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02b      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800390a:	d123      	bne.n	8003954 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003914:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003924:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e00f      	b.n	8003974 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69da      	ldr	r2, [r3, #28]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	429a      	cmp	r2, r3
 8003970:	d092      	beq.n	8003898 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = 0uL;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
            uint32_t hclk = 60000000uL;
 8003988:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <HAL_ETH_Init+0x134>)
 800398a:	613b      	str	r3, [r7, #16]
            uint32_t err = ETH_SUCCESS;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

            /* Check the ETH peripheral state */
            if( heth == NULL )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_ETH_Init+0x1e>
            {
                return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e086      	b.n	8003aa8 <HAL_ETH_Init+0x12c>
            assert_param( IS_ETH_AUTONEGOTIATION( heth->Init.AutoNegotiation ) );
            assert_param( IS_ETH_RX_MODE( heth->Init.RxMode ) );
            assert_param( IS_ETH_CHECKSUM_MODE( heth->Init.ChecksumMode ) );
            assert_param( IS_ETH_MEDIA_INTERFACE( heth->Init.MediaInterface ) );

            if( heth->State == HAL_ETH_STATE_RESET )
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <HAL_ETH_Init+0x30>
            {
                /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                HAL_ETH_MspInit( heth );
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fc fe32 	bl	8000610 <HAL_ETH_MspInit>
            }

            /* Enable SYSCFG Clock */
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ac:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <HAL_ETH_Init+0x138>)
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	4a40      	ldr	r2, [pc, #256]	; (8003ab4 <HAL_ETH_Init+0x138>)
 80039b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b6:	6453      	str	r3, [r2, #68]	; 0x44
 80039b8:	4b3e      	ldr	r3, [pc, #248]	; (8003ab4 <HAL_ETH_Init+0x138>)
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]

            /* Select MII or RMII Mode*/
            SYSCFG->PMC &= ~( SYSCFG_PMC_MII_RMII_SEL );
 80039c4:	4b3c      	ldr	r3, [pc, #240]	; (8003ab8 <HAL_ETH_Init+0x13c>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <HAL_ETH_Init+0x13c>)
 80039ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039ce:	6053      	str	r3, [r2, #4]
            SYSCFG->PMC |= ( uint32_t ) heth->Init.MediaInterface;
 80039d0:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <HAL_ETH_Init+0x13c>)
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4937      	ldr	r1, [pc, #220]	; (8003ab8 <HAL_ETH_Init+0x13c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            /* Also enable EDFE: Enhanced descriptor format enable. */
            heth->Instance->DMABMR |= ETH_DMABMR_SR | ETH_DMABMR_EDE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 80039f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f4:	601a      	str	r2, [r3, #0]

            /* Wait for software reset */
            while( ( heth->Instance->DMABMR & ETH_DMABMR_SR ) != ( uint32_t ) RESET )
 80039f6:	bf00      	nop
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f6      	bne.n	80039f8 <HAL_ETH_Init+0x7c>
                /* If your program hangs here, please check the value of 'ipconfigUSE_RMII'. */
            }

            /*-------------------------------- MAC Initialization ----------------------*/
            /* Get the ETHERNET MACMIIAR value */
            tmpreg = heth->Instance->MACMIIAR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	617b      	str	r3, [r7, #20]
            /* Clear CSR Clock Range CR[2:0] bits */
            tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f023 031c 	bic.w	r3, r3, #28
 8003a18:	617b      	str	r3, [r7, #20]

            /* Get hclk frequency value (e.g. 168,000,000) */
            hclk = HAL_RCC_GetHCLKFreq();
 8003a1a:	f7fe fb7f 	bl	800211c <HAL_RCC_GetHCLKFreq>
 8003a1e:	6138      	str	r0, [r7, #16]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000uL ) && ( hclk < 35000000uL ) )
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <HAL_ETH_Init+0x140>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d908      	bls.n	8003a3a <HAL_ETH_Init+0xbe>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <HAL_ETH_Init+0x144>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d804      	bhi.n	8003a3a <HAL_ETH_Init+0xbe>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div16;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f043 0308 	orr.w	r3, r3, #8
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e027      	b.n	8003a8a <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 35000000uL ) && ( hclk < 60000000uL ) )
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4a20      	ldr	r2, [pc, #128]	; (8003ac0 <HAL_ETH_Init+0x144>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d908      	bls.n	8003a54 <HAL_ETH_Init+0xd8>
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <HAL_ETH_Init+0x148>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d804      	bhi.n	8003a54 <HAL_ETH_Init+0xd8>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div26;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f043 030c 	orr.w	r3, r3, #12
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e01a      	b.n	8003a8a <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 60000000uL ) && ( hclk < 100000000uL ) )
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_ETH_Init+0x148>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d903      	bls.n	8003a64 <HAL_ETH_Init+0xe8>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ac8 <HAL_ETH_Init+0x14c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d911      	bls.n	8003a88 <HAL_ETH_Init+0x10c>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
            }
            else if( ( hclk >= 100000000uL ) && ( hclk < 150000000uL ) )
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <HAL_ETH_Init+0x14c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d908      	bls.n	8003a7e <HAL_ETH_Init+0x102>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4a17      	ldr	r2, [pc, #92]	; (8003acc <HAL_ETH_Init+0x150>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d804      	bhi.n	8003a7e <HAL_ETH_Init+0x102>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div62;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e005      	b.n	8003a8a <HAL_ETH_Init+0x10e>
            }
            else /* ( ( hclk >= 150000000uL ) && ( hclk <= 183000000uL ) ) */
            {
                /* CSR Clock Range between 150-183 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div102;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f043 0310 	orr.w	r3, r3, #16
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e000      	b.n	8003a8a <HAL_ETH_Init+0x10e>
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
 8003a88:	bf00      	nop
            }

            /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
            heth->Instance->MACMIIAR = ( uint32_t ) tmpreg;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	611a      	str	r2, [r3, #16]

            /* Initialise the MACB and set all PHY properties */
            vMACBProbePhy();
 8003a92:	f00c ff45 	bl	8010920 <vMACBProbePhy>

            /* Config MAC and DMA */
            ETH_MACDMAConfig( heth, err );
 8003a96:	68f9      	ldr	r1, [r7, #12]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fadd 	bl	8004058 <ETH_MACDMAConfig>

            /* Set ETH HAL State to Ready */
            heth->State = HAL_ETH_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Return function status */
            return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
        }
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	03938700 	.word	0x03938700
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	01312cff 	.word	0x01312cff
 8003ac0:	02160ebf 	.word	0x02160ebf
 8003ac4:	039386ff 	.word	0x039386ff
 8003ac8:	05f5e0ff 	.word	0x05f5e0ff
 8003acc:	08f0d17f 	.word	0x08f0d17f

08003ad0 <HAL_ETH_IRQHandler>:

/*#define ETH_DMA_ALL_INTS		ETH_DMA_IT_RBU | ETH_DMA_FLAG_T | ETH_DMA_FLAG_AIS */

        #define INT_MASK    ( ( uint32_t ) ~( ETH_DMA_IT_TBU ) )
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
            uint32_t dmasr;

            dmasr = heth->Instance->DMASR & ETH_DMA_ALL_INTS;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	f241 0314 	movw	r3, #4116	; 0x1014
 8003ae0:	4413      	add	r3, r2
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_ETH_IRQHandler+0x60>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
            heth->Instance->DMASR = dmasr;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	f241 0314 	movw	r3, #4116	; 0x1014
 8003af2:	4413      	add	r3, r2
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

            /* Frame received */
            if( ( dmasr & ( ETH_DMA_FLAG_R | ETH_DMA_IT_RBU ) ) != 0 )
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_ETH_IRQHandler+0x38>
            {
                /* Receive complete callback */
                HAL_ETH_RxCpltCallback( heth );
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f00c fb14 	bl	8010130 <HAL_ETH_RxCpltCallback>
            }

            /* Frame transmitted */
            if( ( dmasr & ( ETH_DMA_FLAG_T ) ) != 0 )
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_ETH_IRQHandler+0x48>
            {
                /* Transfer complete callback */
                HAL_ETH_TxCpltCallback( heth );
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f00c fb3a 	bl	801018c <HAL_ETH_TxCpltCallback>
            }

            /* ETH DMA Error */
            if( ( dmasr & ( ETH_DMA_FLAG_AIS ) ) != 0 )
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_ETH_IRQHandler+0x58>
            {
                /* Ethernet Error callback */
                HAL_ETH_ErrorCallback( heth );
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f806 	bl	8003b34 <HAL_ETH_ErrorCallback>
            }
        }
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	3801e7fb 	.word	0x3801e7fb

08003b34 <HAL_ETH_ErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * heth )
        {
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_TxCpltCallback could be implemented in the user file
             */
            ( void ) heth;
        }
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_ETH_ReadPHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint16_t PHYReg,
                                                   uint32_t * RegValue )
        {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	460b      	mov	r3, r1
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0uL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0uL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_RD )
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b82      	cmp	r3, #130	; 0x82
 8003b68:	d102      	bne.n	8003b70 <HAL_ETH_ReadPHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e056      	b.n	8003c1e <HAL_ETH_ReadPHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_ETH_ReadPHYRegister+0x36>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e050      	b.n	8003c20 <HAL_ETH_ReadPHYRegister+0xd8>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

                /* Set ETH HAL State to BUSY_RD */
                heth->State = HAL_ETH_STATE_BUSY_RD;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2282      	movs	r2, #130	; 0x82
 8003b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f003 031c 	and.w	r3, r3, #28
 8003b9c:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII address register value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address   */
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8a1b      	ldrh	r3, [r3, #16]
 8003ba2:	02db      	lsls	r3, r3, #11
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 8003bac:	897b      	ldrh	r3, [r7, #10]
 8003bae:	019b      	lsls	r3, r3, #6
 8003bb0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
                tmpreg &= ~ETH_MACMIIAR_MW;                                                   /* Set the read mode            */
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f023 0302 	bic.w	r3, r3, #2
 8003bc0:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit         */
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	61bb      	str	r3, [r7, #24]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 8003bd2:	f7fd fb23 	bl	800121c <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0uL )
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <HAL_ETH_ReadPHYRegister+0xb2>
                    {
                        /* Get MACMIIDR value */
                        *RegValue = ( uint32_t ) heth->Instance->MACMIIDR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	601a      	str	r2, [r3, #0]
                        xResult = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	77fb      	strb	r3, [r7, #31]
                        break;
 8003bf8:	e009      	b.n	8003c0e <HAL_ETH_ReadPHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_READ_TO )
 8003bfa:	f7fd fb0f 	bl	800121c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c08:	d3e6      	bcc.n	8003bd8 <HAL_ETH_ReadPHYRegister+0x90>
                    {
                        xResult = HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            /* Return function status */
            return xResult;
 8003c1e:	7ffb      	ldrb	r3, [r7, #31]
        }
 8003c20:	4618      	mov	r0, r3
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_ETH_WritePHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint16_t PHYReg,
                                                    uint32_t RegValue )
        {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	460b      	mov	r3, r1
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_WR )
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b42      	cmp	r3, #66	; 0x42
 8003c48:	d102      	bne.n	8003c50 <HAL_ETH_WritePHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e056      	b.n	8003cfe <HAL_ETH_WritePHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_ETH_WritePHYRegister+0x36>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e050      	b.n	8003d00 <HAL_ETH_WritePHYRegister+0xd8>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

                /* Set ETH HAL State to BUSY_WR */
                heth->State = HAL_ETH_STATE_BUSY_WR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2242      	movs	r2, #66	; 0x42
 8003c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f003 031c 	and.w	r3, r3, #28
 8003c7c:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII register address value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address */
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8a1b      	ldrh	r3, [r3, #16]
 8003c82:	02db      	lsls	r3, r3, #11
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	019b      	lsls	r3, r3, #6
 8003c90:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MW;                                                    /* Set the write mode */
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit */
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]

                /* Give the value to the MII data register */
                heth->Instance->MACMIIDR = ( uint16_t ) RegValue;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	615a      	str	r2, [r3, #20]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 8003cbc:	f7fd faae 	bl	800121c <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0ul )
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <HAL_ETH_WritePHYRegister+0xb2>
                    {
                        xResult = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	77fb      	strb	r3, [r7, #31]
                        break;
 8003cd8:	e009      	b.n	8003cee <HAL_ETH_WritePHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_WRITE_TO )
 8003cda:	f7fd fa9f 	bl	800121c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d3eb      	bcc.n	8003cc2 <HAL_ETH_WritePHYRegister+0x9a>
                    {
                        xResult = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            /* Return function status */
            return xResult;
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
        }
 8003d00:	4618      	mov	r0, r3
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start( ETH_HandleTypeDef * heth )
        {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_ETH_Start+0x16>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e01f      	b.n	8003d5e <HAL_ETH_Start+0x56>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Enable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionEnable( heth );
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fb62 	bl	80043f8 <ETH_MACTransmissionEnable>

            /* Enable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionEnable( heth );
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fb83 	bl	8004440 <ETH_MACReceptionEnable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fbfe 	bl	800453c <ETH_FlushTransmitFIFO>

            /* Start DMA transmission */
            ETH_DMATransmissionEnable( heth );
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fba3 	bl	800448c <ETH_DMATransmissionEnable>

            /* Start DMA reception */
            ETH_DMAReceptionEnable( heth );
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fbcc 	bl	80044e4 <ETH_DMAReceptionEnable>

            /* Set the ETH state to READY*/
            heth->State = HAL_ETH_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
        }
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_ETH_Stop>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop( ETH_HandleTypeDef * heth )
        {
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_ETH_Stop+0x16>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e01f      	b.n	8003dbc <HAL_ETH_Stop+0x56>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Stop DMA transmission */
            ETH_DMATransmissionDisable( heth );
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fb93 	bl	80044b8 <ETH_DMATransmissionDisable>

            /* Stop DMA reception */
            ETH_DMAReceptionDisable( heth );
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fbbc 	bl	8004510 <ETH_DMAReceptionDisable>

            /* Disable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionDisable( heth );
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fb64 	bl	8004466 <ETH_MACReceptionDisable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fbcc 	bl	800453c <ETH_FlushTransmitFIFO>

            /* Disable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionDisable( heth );
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fb39 	bl	800441c <ETH_MACTransmissionDisable>

            /* Set the ETH state*/
            heth->State = HAL_ETH_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 8003dba:	2300      	movs	r3, #0
        }
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <vRegisterDelay>:

        static void vRegisterDelay()
        {
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
             * 100 Mhz = 160 loops
             *  84 Mhz = 134 loops
             */
        #define WAIT_TIME_NS    1600uL          /* 1.6 microseconds */
        #define CPU_MAX_FREQ    SystemCoreClock /* 84, 100, 168 or 180 MHz */
            uint32_t NOP_COUNT = ( WAIT_TIME_NS * ( CPU_MAX_FREQ / 1000uL ) ) / 1000000uL;
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <vRegisterDelay+0x44>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a0f      	ldr	r2, [pc, #60]	; (8003e0c <vRegisterDelay+0x48>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <vRegisterDelay+0x4c>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	0c9b      	lsrs	r3, r3, #18
 8003de6:	603b      	str	r3, [r7, #0]

            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	e003      	b.n	8003df6 <vRegisterDelay+0x32>
            {
                __NOP();
 8003dee:	bf00      	nop
            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f8      	bne.n	8003dee <vRegisterDelay+0x2a>
            }
        }
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	10624dd3 	.word	0x10624dd3
 8003e10:	431bde83 	.word	0x431bde83

08003e14 <prvWriteMACFCR>:

        static void prvWriteMACFCR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACFCR = ulValue;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	619a      	str	r2, [r3, #24]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACFCR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]

            vRegisterDelay();
 8003e2c:	f7ff ffca 	bl	8003dc4 <vRegisterDelay>

            heth->Instance->MACFCR = ulValue;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	619a      	str	r2, [r3, #24]
        }
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <prvWriteDMAOMR>:

        static void prvWriteDMAOMR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->DMAOMR = ulValue;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e52:	4413      	add	r3, r2
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	601a      	str	r2, [r3, #0]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->DMAOMR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e60:	4413      	add	r3, r2
 8003e62:	681b      	ldr	r3, [r3, #0]

            vRegisterDelay();
 8003e64:	f7ff ffae 	bl	8003dc4 <vRegisterDelay>

            heth->Instance->DMAOMR = ulValue;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e70:	4413      	add	r3, r2
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	601a      	str	r2, [r3, #0]
        }
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <prvWriteMACCR>:

        static void prvWriteMACCR( ETH_HandleTypeDef * heth,
                                   uint32_t ulValue )
        {
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACCR = ulValue;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	601a      	str	r2, [r3, #0]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]

            vRegisterDelay();
 8003e96:	f7ff ff95 	bl	8003dc4 <vRegisterDelay>

            heth->Instance->MACCR = ulValue;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
        }
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_ETH_ConfigMAC>:
 * @param  macconf: MAC Configuration structure
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ConfigMAC( ETH_HandleTypeDef * heth,
                                             ETH_MACInitTypeDef * macconf )
        {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
            uint32_t tmpreg = 0uL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]

            /* Process Locked */
            __HAL_LOCK( heth );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ETH_ConfigMAC+0x1c>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0c1      	b.n	800404c <HAL_ETH_ConfigMAC+0x1a0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            assert_param( IS_ETH_SPEED( heth->Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( heth->Init.DuplexMode ) );

            if( macconf != NULL )
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8099 	beq.w	8004012 <HAL_ETH_ConfigMAC+0x166>
                assert_param( IS_ETH_VLAN_TAG_COMPARISON( macconf->VLANTagComparison ) );
                assert_param( IS_ETH_VLAN_TAG_IDENTIFIER( macconf->VLANTagIdentifier ) );

                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]
                /* Clear WD, PCE, PS, TE and RE bits */
                tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4b5a      	ldr	r3, [pc, #360]	; (8004054 <HAL_ETH_ConfigMAC+0x1a8>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) (
                    macconf->Watchdog |
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
                    macconf->Jabber |
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
                    macconf->Watchdog |
 8003ef8:	431a      	orrs	r2, r3
                    macconf->InterFrameGap |
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
                    macconf->Jabber |
 8003efe:	431a      	orrs	r2, r3
                    macconf->CarrierSense |
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
                    macconf->InterFrameGap |
 8003f04:	431a      	orrs	r2, r3
                    heth->Init.Speed |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
                    macconf->CarrierSense |
 8003f0a:	431a      	orrs	r2, r3
                    macconf->ReceiveOwn |
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
                    heth->Init.Speed |
 8003f10:	431a      	orrs	r2, r3
                    macconf->LoopbackMode |
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
                    macconf->ReceiveOwn |
 8003f16:	431a      	orrs	r2, r3
                    heth->Init.DuplexMode |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
                    macconf->LoopbackMode |
 8003f1c:	431a      	orrs	r2, r3
                    macconf->ChecksumOffload |
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
                    heth->Init.DuplexMode |
 8003f22:	431a      	orrs	r2, r3
                    macconf->RetryTransmission |
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	69db      	ldr	r3, [r3, #28]
                    macconf->ChecksumOffload |
 8003f28:	431a      	orrs	r2, r3
                    macconf->AutomaticPadCRCStrip |
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
                    macconf->RetryTransmission |
 8003f2e:	431a      	orrs	r2, r3
                    macconf->BackOffLimit |
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    macconf->AutomaticPadCRCStrip |
 8003f34:	431a      	orrs	r2, r3
                    macconf->DeferralCheck );
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    macconf->BackOffLimit |
 8003f3a:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) (
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ff9a 	bl	8003e7e <prvWriteMACCR>

                /*----------------------- ETHERNET MACFFR Configuration --------------------*/
                /* Write to ETHERNET MACFFR */
                heth->Instance->MACFFR = ( uint32_t ) (
                    macconf->ReceiveAll |
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                    macconf->SourceAddrFilter |
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    macconf->ReceiveAll |
 8003f52:	431a      	orrs	r2, r3
                    macconf->PassControlFrames |
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    macconf->SourceAddrFilter |
 8003f58:	431a      	orrs	r2, r3
                    macconf->BroadcastFramesReception |
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    macconf->PassControlFrames |
 8003f5e:	431a      	orrs	r2, r3
                    macconf->DestinationAddrFilter |
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    macconf->BroadcastFramesReception |
 8003f64:	431a      	orrs	r2, r3
                    macconf->PromiscuousMode |
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                    macconf->DestinationAddrFilter |
 8003f6a:	431a      	orrs	r2, r3
                    macconf->MulticastFramesFilter |
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    macconf->PromiscuousMode |
 8003f70:	ea42 0103 	orr.w	r1, r2, r3
                    macconf->UnicastFramesFilter );
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                heth->Instance->MACFFR = ( uint32_t ) (
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
                    macconf->MulticastFramesFilter |
 8003f7c:	430a      	orrs	r2, r1
                heth->Instance->MACFFR = ( uint32_t ) (
 8003f7e:	605a      	str	r2, [r3, #4]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACFFR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 8003f88:	f7ff ff1c 	bl	8003dc4 <vRegisterDelay>
                heth->Instance->MACFFR = tmpreg;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]

                /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
                /* Write to ETHERNET MACHTHR */
                heth->Instance->MACHTHR = ( uint32_t ) macconf->HashTableHigh;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f9c:	609a      	str	r2, [r3, #8]

                /* Write to ETHERNET MACHTLR */
                heth->Instance->MACHTLR = ( uint32_t ) macconf->HashTableLow;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fa6:	60da      	str	r2, [r3, #12]
                /*----------------------- ETHERNET MACFCR Configuration --------------------*/

                /* Get the ETHERNET MACFCR value */
                tmpreg = heth->Instance->MACFCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	60fb      	str	r3, [r7, #12]
                /* Clear xx bits */
                tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( (
                                             macconf->PauseTime << 16 ) |
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	041a      	lsls	r2, r3, #16
                                         macconf->ZeroQuantaPause |
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                                             macconf->PauseTime << 16 ) |
 8003fc4:	431a      	orrs	r2, r3
                                         macconf->PauseLowThreshold |
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                                         macconf->ZeroQuantaPause |
 8003fca:	431a      	orrs	r2, r3
                                         macconf->UnicastPauseFrameDetect |
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                                         macconf->PauseLowThreshold |
 8003fd0:	431a      	orrs	r2, r3
                                         macconf->ReceiveFlowControl |
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                                         macconf->UnicastPauseFrameDetect |
 8003fd6:	431a      	orrs	r2, r3
                                         macconf->TransmitFlowControl );
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                         macconf->ReceiveFlowControl |
 8003fdc:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) ( (
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACFCR */
                prvWriteMACFCR( heth, tmpreg );
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ff14 	bl	8003e14 <prvWriteMACFCR>

                /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                                           macconf->VLANTagIdentifier );
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	61da      	str	r2, [r3, #28]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACVLANTR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 8004004:	f7ff fede 	bl	8003dc4 <vRegisterDelay>
                heth->Instance->MACVLANTR = tmpreg;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	61da      	str	r2, [r3, #28]
 8004010:	e013      	b.n	800403a <HAL_ETH_ConfigMAC+0x18e>
            }
            else /* macconf == NULL : here we just configure Speed and Duplex mode */
            {
                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]

                /* Clear FES and DM bits */
                tmpreg &= ~( ( uint32_t ) 0x00004800uL );
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004020:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( heth->Init.Speed | heth->Init.DuplexMode );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff22 	bl	8003e7e <prvWriteMACCR>
            }

            /* Set the ETH state to Ready */
            heth->State = HAL_ETH_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 800404a:	2300      	movs	r3, #0
        }
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	ff20810f 	.word	0xff20810f

08004058 <ETH_MACDMAConfig>:
 * @param  err: Ethernet Init error
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth,
                                      uint32_t err )
        {
 8004058:	b580      	push	{r7, lr}
 800405a:	b0b0      	sub	sp, #192	; 0xc0
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
            ETH_MACInitTypeDef macinit;
            ETH_DMAInitTypeDef dmainit;
            uint32_t tmpreg = 0uL;
 8004062:	2300      	movs	r3, #0
 8004064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            if( err != ETH_SUCCESS ) /* Auto-negotiation failed */
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <ETH_MACDMAConfig+0x26>
            {
                /* Set Ethernet duplex mode to Full-duplex */
                heth->Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004074:	60da      	str	r2, [r3, #12]

                /* Set Ethernet speed to 100M */
                heth->Init.Speed = ETH_SPEED_100M;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800407c:	609a      	str	r2, [r3, #8]
            }

            /* Ethernet MAC default initialization **************************************/
            macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800407e:	2300      	movs	r3, #0
 8004080:	64bb      	str	r3, [r7, #72]	; 0x48
            macinit.Jabber = ETH_JABBER_ENABLE;
 8004082:	2300      	movs	r3, #0
 8004084:	64fb      	str	r3, [r7, #76]	; 0x4c
            macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004086:	2300      	movs	r3, #0
 8004088:	653b      	str	r3, [r7, #80]	; 0x50
            macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800408a:	2300      	movs	r3, #0
 800408c:	657b      	str	r3, [r7, #84]	; 0x54
            macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	65bb      	str	r3, [r7, #88]	; 0x58
            macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004092:	2300      	movs	r3, #0
 8004094:	65fb      	str	r3, [r7, #92]	; 0x5c

            if( heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <ETH_MACDMAConfig+0x4e>
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800409e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040a2:	663b      	str	r3, [r7, #96]	; 0x60
 80040a4:	e001      	b.n	80040aa <ETH_MACDMAConfig+0x52>
            }
            else
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	663b      	str	r3, [r7, #96]	; 0x60
            }

            macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80040aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ae:	667b      	str	r3, [r7, #100]	; 0x64
            macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	66bb      	str	r3, [r7, #104]	; 0x68
            macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040b4:	2300      	movs	r3, #0
 80040b6:	66fb      	str	r3, [r7, #108]	; 0x6c
            macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	673b      	str	r3, [r7, #112]	; 0x70
            macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80040bc:	2300      	movs	r3, #0
 80040be:	677b      	str	r3, [r7, #116]	; 0x74
            macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	67bb      	str	r3, [r7, #120]	; 0x78
            macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80040c4:	2340      	movs	r3, #64	; 0x40
 80040c6:	67fb      	str	r3, [r7, #124]	; 0x7c
            macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            macinit.HashTableHigh = 0x0uL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            macinit.HashTableLow = 0x0uL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            macinit.PauseTime = 0x0uL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800410a:	2300      	movs	r3, #0
 800410c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            macinit.VLANTagIdentifier = 0x0uL;
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

            /*------------------------ ETHERNET MACCR Configuration --------------------*/
            /* Get the ETHERNET MACCR value */
            tmpreg = heth->Instance->MACCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear WD, PCE, PS, TE and RE bits */
            tmpreg &= ETH_MACCR_CLEAR_MASK;
 800412c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004130:	4b91      	ldr	r3, [pc, #580]	; (8004378 <ETH_MACDMAConfig+0x320>)
 8004132:	4013      	ands	r3, r2
 8004134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the IPCO bit according to ETH ChecksumOffload value */
            /* Set the DR bit according to ETH RetryTransmission value */
            /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
            /* Set the BL bit according to ETH BackOffLimit value */
            /* Set the DC bit according to ETH DeferralCheck value */
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 8004138:	6cba      	ldr	r2, [r7, #72]	; 0x48
                                     macinit.Jabber |
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 800413c:	431a      	orrs	r2, r3
                                     macinit.InterFrameGap |
 800413e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                                     macinit.Jabber |
 8004140:	431a      	orrs	r2, r3
                                     macinit.CarrierSense |
 8004142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                                     macinit.InterFrameGap |
 8004144:	431a      	orrs	r2, r3
                                     heth->Init.Speed |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
                                     macinit.CarrierSense |
 800414a:	431a      	orrs	r2, r3
                                     macinit.ReceiveOwn |
 800414c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                                     heth->Init.Speed |
 800414e:	431a      	orrs	r2, r3
                                     macinit.LoopbackMode |
 8004150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                                     macinit.ReceiveOwn |
 8004152:	431a      	orrs	r2, r3
                                     heth->Init.DuplexMode |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
                                     macinit.LoopbackMode |
 8004158:	431a      	orrs	r2, r3
                                     macinit.ChecksumOffload |
 800415a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                                     heth->Init.DuplexMode |
 800415c:	431a      	orrs	r2, r3
                                     macinit.RetryTransmission |
 800415e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                                     macinit.ChecksumOffload |
 8004160:	431a      	orrs	r2, r3
                                     macinit.AutomaticPadCRCStrip |
 8004162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                                     macinit.RetryTransmission |
 8004164:	431a      	orrs	r2, r3
                                     macinit.BackOffLimit |
 8004166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                                     macinit.AutomaticPadCRCStrip |
 8004168:	431a      	orrs	r2, r3
                                     macinit.DeferralCheck );
 800416a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                                     macinit.BackOffLimit |
 800416c:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 800416e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET MACCR */
            prvWriteMACCR( heth, tmpreg );
 8004178:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fe7e 	bl	8003e7e <prvWriteMACCR>
            /* Set the DAIF bit according to ETH DestinationAddrFilter value */
            /* Set the PR bit according to ETH PromiscuousMode value */
            /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
            /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
            /* Write to ETHERNET MACFFR */
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 8004182:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                                    macinit.SourceAddrFilter |
 8004184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 8004186:	431a      	orrs	r2, r3
                                                    macinit.PassControlFrames |
 8004188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                                    macinit.SourceAddrFilter |
 800418a:	431a      	orrs	r2, r3
                                                    macinit.BroadcastFramesReception |
 800418c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                                    macinit.PassControlFrames |
 8004190:	431a      	orrs	r2, r3
                                                    macinit.DestinationAddrFilter |
 8004192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                                    macinit.BroadcastFramesReception |
 8004196:	431a      	orrs	r2, r3
                                                    macinit.PromiscuousMode |
 8004198:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                                    macinit.DestinationAddrFilter |
 800419c:	431a      	orrs	r2, r3
                                                    macinit.MulticastFramesFilter |
 800419e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                                    macinit.PromiscuousMode |
 80041a2:	ea42 0103 	orr.w	r1, r2, r3
                                                    macinit.UnicastFramesFilter );
 80041a6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
                                                    macinit.MulticastFramesFilter |
 80041ae:	430a      	orrs	r2, r1
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 80041b0:	605a      	str	r2, [r3, #4]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACFFR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 80041bc:	f7ff fe02 	bl	8003dc4 <vRegisterDelay>
            heth->Instance->MACFFR = tmpreg;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041c8:	605a      	str	r2, [r3, #4]

            /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
            /* Write to ETHERNET MACHTHR */
            heth->Instance->MACHTHR = ( uint32_t ) macinit.HashTableHigh;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041d2:	609a      	str	r2, [r3, #8]

            /* Write to ETHERNET MACHTLR */
            heth->Instance->MACHTLR = ( uint32_t ) macinit.HashTableLow;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80041dc:	60da      	str	r2, [r3, #12]
            /*----------------------- ETHERNET MACFCR Configuration -------------------*/

            /* Get the ETHERNET MACFCR value */
            tmpreg = heth->Instance->MACFCR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80041e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041ec:	f64f 7341 	movw	r3, #65345	; 0xff41
 80041f0:	4013      	ands	r3, r2
 80041f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
            /* Set the PLT bit according to ETH PauseLowThreshold value */
            /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
            /* Set the RFE bit according to ETH ReceiveFlowControl value */
            /* Set the TFE bit according to ETH TransmitFlowControl value */
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 80041f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041fa:	041a      	lsls	r2, r3, #16
                                     macinit.ZeroQuantaPause |
 80041fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 8004200:	431a      	orrs	r2, r3
                                     macinit.PauseLowThreshold |
 8004202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                                     macinit.ZeroQuantaPause |
 8004206:	431a      	orrs	r2, r3
                                     macinit.UnicastPauseFrameDetect |
 8004208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                                     macinit.PauseLowThreshold |
 800420c:	431a      	orrs	r2, r3
                                     macinit.ReceiveFlowControl |
 800420e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                                     macinit.UnicastPauseFrameDetect |
 8004212:	431a      	orrs	r2, r3
                                     macinit.TransmitFlowControl );
 8004214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                                     macinit.ReceiveFlowControl |
 8004218:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 800421a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET MACFCR */
            prvWriteMACFCR( heth, tmpreg );
 8004224:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff fdf3 	bl	8003e14 <prvWriteMACFCR>

            /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
            /* Set the ETV bit according to ETH VLANTagComparison value */
            /* Set the VL bit according to ETH VLANTagIdentifier value */
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 800422e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                                       macinit.VLANTagIdentifier );
 8004232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	61da      	str	r2, [r3, #28]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACVLANTR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 8004248:	f7ff fdbc 	bl	8003dc4 <vRegisterDelay>
            heth->Instance->MACVLANTR = tmpreg;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004254:	61da      	str	r2, [r3, #28]

            /* Ethernet DMA default initialization ************************************/
            dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
            dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800425a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425e:	60fb      	str	r3, [r7, #12]
            dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
            dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8004264:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004268:	617b      	str	r3, [r7, #20]
            dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
            dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
            dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004272:	2300      	movs	r3, #0
 8004274:	623b      	str	r3, [r7, #32]
            dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
            dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800427a:	2304      	movs	r3, #4
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
            dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800427e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
            dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
            dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800428a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
            dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004294:	63bb      	str	r3, [r7, #56]	; 0x38
            dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
            dmainit.DescriptorSkipLength = 0x0uL;
 800429a:	2300      	movs	r3, #0
 800429c:	643b      	str	r3, [r7, #64]	; 0x40
            dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800429e:	2300      	movs	r3, #0
 80042a0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Get the ETHERNET DMAOMR value */
            tmpreg = heth->Instance->DMAOMR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80042aa:	4413      	add	r3, r2
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80042b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <ETH_MACDMAConfig+0x324>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the TTC bit according to ETH TransmitThresholdControl value */
            /* Set the FEF bit according to ETH ForwardErrorFrames value */
            /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
            /* Set the RTC bit according to ETH ReceiveThresholdControl value */
            /* Set the OSF bit according to ETH SecondFrameOperate value */
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80042be:	68ba      	ldr	r2, [r7, #8]
                                     dmainit.ReceiveStoreForward |
 80042c0:	68fb      	ldr	r3, [r7, #12]
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80042c2:	431a      	orrs	r2, r3
                                     dmainit.FlushReceivedFrame |
 80042c4:	693b      	ldr	r3, [r7, #16]
                                     dmainit.ReceiveStoreForward |
 80042c6:	431a      	orrs	r2, r3
                                     dmainit.TransmitStoreForward |
 80042c8:	697b      	ldr	r3, [r7, #20]
                                     dmainit.FlushReceivedFrame |
 80042ca:	431a      	orrs	r2, r3
                                     dmainit.TransmitThresholdControl |
 80042cc:	69bb      	ldr	r3, [r7, #24]
                                     dmainit.TransmitStoreForward |
 80042ce:	431a      	orrs	r2, r3
                                     dmainit.ForwardErrorFrames |
 80042d0:	69fb      	ldr	r3, [r7, #28]
                                     dmainit.TransmitThresholdControl |
 80042d2:	431a      	orrs	r2, r3
                                     dmainit.ForwardUndersizedGoodFrames |
 80042d4:	6a3b      	ldr	r3, [r7, #32]
                                     dmainit.ForwardErrorFrames |
 80042d6:	431a      	orrs	r2, r3
                                     dmainit.ReceiveThresholdControl |
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                                     dmainit.ForwardUndersizedGoodFrames |
 80042da:	431a      	orrs	r2, r3
                                     dmainit.SecondFrameOperate );
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                     dmainit.ReceiveThresholdControl |
 80042de:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80042e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET DMAOMR */
            prvWriteDMAOMR( heth, tmpreg );
 80042ea:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fda6 	bl	8003e40 <prvWriteDMAOMR>
            /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
            /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
            /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
            /* Set the DSL bit according to ETH DesciptorSkipLength value */
            /* Set the PR and DA bits according to ETH DMAArbitration value */
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 80042f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                                    dmainit.FixedBurst |
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 80042f8:	431a      	orrs	r2, r3
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80042fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                    dmainit.FixedBurst |
 80042fc:	431a      	orrs	r2, r3
                                                    dmainit.TxDMABurstLength |
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004300:	431a      	orrs	r2, r3
                                                    dmainit.EnhancedDescriptorFormat |
 8004302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                                    dmainit.TxDMABurstLength |
 8004304:	431a      	orrs	r2, r3
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 8004306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004308:	009b      	lsls	r3, r3, #2
                                                    dmainit.EnhancedDescriptorFormat |
 800430a:	431a      	orrs	r2, r3
                                                    dmainit.DMAArbitration |
 800430c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 800430e:	431a      	orrs	r2, r3
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431c:	601a      	str	r2, [r3, #0]
                                                    ETH_DMABMR_USP ); /* Enable use of separate PBL for Rx and Tx */

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->DMABMR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 800432c:	f7ff fd4a 	bl	8003dc4 <vRegisterDelay>
            heth->Instance->DMABMR = tmpreg;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004338:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800433c:	601a      	str	r2, [r3, #0]

            if( heth->Init.RxMode == ETH_RXINTERRUPT_MODE )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10d      	bne.n	8004362 <ETH_MACDMAConfig+0x30a>
            {
                /* Enable the Ethernet Rx Interrupt */
                __HAL_ETH_DMA_ENABLE_IT( ( heth ), ETH_DMA_IT_NIS | ETH_DMA_IT_R );
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	f241 031c 	movw	r3, #4124	; 0x101c
 800434e:	4413      	add	r3, r2
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6811      	ldr	r1, [r2, #0]
 8004356:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <ETH_MACDMAConfig+0x328>)
 8004358:	431a      	orrs	r2, r3
 800435a:	f241 031c 	movw	r3, #4124	; 0x101c
 800435e:	440b      	add	r3, r1
 8004360:	601a      	str	r2, [r3, #0]
            }

            /* Initialize MAC address in ethernet MAC */
            ETH_MACAddressConfig( heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr );
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	461a      	mov	r2, r3
 8004368:	2100      	movs	r1, #0
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f80a 	bl	8004384 <ETH_MACAddressConfig>
        }
 8004370:	bf00      	nop
 8004372:	37c0      	adds	r7, #192	; 0xc0
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	ff20810f 	.word	0xff20810f
 800437c:	f8de3f23 	.word	0xf8de3f23
 8004380:	00010040 	.word	0x00010040

08004384 <ETH_MACAddressConfig>:
 * @retval HAL status
 */
        static void ETH_MACAddressConfig( ETH_HandleTypeDef * heth,
                                          uint32_t MacAddr,
                                          uint8_t * Addr )
        {
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
            /* Check the parameters */
            assert_param( IS_ETH_MAC_ADDRESS0123( MacAddr ) );

            /* Calculate the selected MAC address high register */
            /* Register ETH_MACA0HR: Bit 31 MO: Always 1. */
            tmpreg = 0x80000000uL | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3305      	adds	r3, #5
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	3204      	adds	r2, #4
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043a4:	617b      	str	r3, [r7, #20]
            /* Load the selected MAC address high register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + MacAddr ) ) ) = tmpreg;
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <ETH_MACAddressConfig+0x6c>)
 80043aa:	4413      	add	r3, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	6013      	str	r3, [r2, #0]
            /* Calculate the selected MAC address low register */
            tmpreg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) Addr[ 1 ] << 8 ) | Addr[ 0 ];
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3303      	adds	r3, #3
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	061a      	lsls	r2, r3, #24
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3302      	adds	r3, #2
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3301      	adds	r3, #1
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	4313      	orrs	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

            /* Load the selected MAC address low register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + MacAddr ) ) ) = tmpreg;
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <ETH_MACAddressConfig+0x70>)
 80043da:	4413      	add	r3, r2
 80043dc:	461a      	mov	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	6013      	str	r3, [r2, #0]
        }
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40028040 	.word	0x40028040
 80043f4:	40028044 	.word	0x40028044

080043f8 <ETH_MACTransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionEnable( ETH_HandleTypeDef * heth )
        {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_TE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f043 0308 	orr.w	r3, r3, #8
 800440a:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fd35 	bl	8003e7e <prvWriteMACCR>
        }
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <ETH_MACTransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionDisable( ETH_HandleTypeDef * heth )
        {
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_TE );
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 0308 	bic.w	r3, r3, #8
 800442e:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff fd23 	bl	8003e7e <prvWriteMACCR>
        }
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <ETH_MACReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionEnable( ETH_HandleTypeDef * heth )
        {
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_RE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fd10 	bl	8003e7e <prvWriteMACCR>
        }
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <ETH_MACReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionDisable( ETH_HandleTypeDef * heth )
        {
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_RE );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff fcfd 	bl	8003e7e <prvWriteMACCR>
        }
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <ETH_DMATransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionEnable( ETH_HandleTypeDef * heth )
        {
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
            /* Enable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_ST;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	f241 0318 	movw	r3, #4120	; 0x1018
 800449c:	4413      	add	r3, r2
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044a4:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fcc8 	bl	8003e40 <prvWriteDMAOMR>
        }
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <ETH_DMATransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionDisable( ETH_HandleTypeDef * heth )
        {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
            /* Disable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_ST );
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80044c8:	4413      	add	r3, r2
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044d0:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fcb2 	bl	8003e40 <prvWriteDMAOMR>
        }
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <ETH_DMAReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionEnable( ETH_HandleTypeDef * heth )
        {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
            /* Enable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_SR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80044f4:	4413      	add	r3, r2
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f043 0302 	orr.w	r3, r3, #2
 80044fc:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fc9c 	bl	8003e40 <prvWriteDMAOMR>
        }
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <ETH_DMAReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionDisable( ETH_HandleTypeDef * heth )
        {
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
            /* Disable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_SR );
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004520:	4413      	add	r3, r2
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 0302 	bic.w	r3, r3, #2
 8004528:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fc86 	bl	8003e40 <prvWriteDMAOMR>
        }
 8004534:	bf00      	nop
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <ETH_FlushTransmitFIFO>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_FlushTransmitFIFO( ETH_HandleTypeDef * heth )
        {
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
            /* Set the Flush Transmit FIFO bit */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_FTF;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	f241 0318 	movw	r3, #4120	; 0x1018
 800454c:	4413      	add	r3, r2
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004554:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4619      	mov	r1, r3
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff fc70 	bl	8003e40 <prvWriteDMAOMR>
        }
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800456e:	201c      	movs	r0, #28
 8004570:	f002 fd9c 	bl	80070ac <pvPortMalloc>
 8004574:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f9be 	bl	8004908 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 800458c:	687b      	ldr	r3, [r7, #4]
    }
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
    EventBits_t uxReturn, uxControlBits = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	623b      	str	r3, [r7, #32]

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <xEventGroupWaitBits+0x2a>
 80045b8:	4951      	ldr	r1, [pc, #324]	; (8004700 <xEventGroupWaitBits+0x168>)
 80045ba:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80045be:	f7fc fa32 	bl	8000a26 <vAssertCalled>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d004      	beq.n	80045d6 <xEventGroupWaitBits+0x3e>
 80045cc:	494c      	ldr	r1, [pc, #304]	; (8004700 <xEventGroupWaitBits+0x168>)
 80045ce:	f240 1049 	movw	r0, #329	; 0x149
 80045d2:	f7fc fa28 	bl	8000a26 <vAssertCalled>
    configASSERT( uxBitsToWaitFor != 0 );
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <xEventGroupWaitBits+0x4e>
 80045dc:	4948      	ldr	r1, [pc, #288]	; (8004700 <xEventGroupWaitBits+0x168>)
 80045de:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80045e2:	f7fc fa20 	bl	8000a26 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045e6:	f001 ff37 	bl	8006458 <xTaskGetSchedulerState>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <xEventGroupWaitBits+0x5e>
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <xEventGroupWaitBits+0x62>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <xEventGroupWaitBits+0x64>
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <xEventGroupWaitBits+0x72>
 8004600:	493f      	ldr	r1, [pc, #252]	; (8004700 <xEventGroupWaitBits+0x168>)
 8004602:	f240 104d 	movw	r0, #333	; 0x14d
 8004606:	f7fc fa0e 	bl	8000a26 <vAssertCalled>
        }
    #endif

    vTaskSuspendAll();
 800460a:	f001 fac9 	bl	8005ba0 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	61fb      	str	r3, [r7, #28]

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	69f8      	ldr	r0, [r7, #28]
 800461a:	f000 f953 	bl	80048c4 <prvTestWaitCondition>
 800461e:	61b8      	str	r0, [r7, #24]

        if( xWaitConditionMet != pdFALSE )
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00e      	beq.n	8004644 <xEventGroupWaitBits+0xac>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTicksToWait = ( TickType_t ) 0;
 800462a:	2300      	movs	r3, #0
 800462c:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d028      	beq.n	8004686 <xEventGroupWaitBits+0xee>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	43db      	mvns	r3, r3
 800463c:	401a      	ands	r2, r3
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e020      	b.n	8004686 <xEventGroupWaitBits+0xee>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <xEventGroupWaitBits+0xbc>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTimeoutOccurred = pdTRUE;
 800464e:	2301      	movs	r3, #1
 8004650:	623b      	str	r3, [r7, #32]
 8004652:	e018      	b.n	8004686 <xEventGroupWaitBits+0xee>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <xEventGroupWaitBits+0xca>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <xEventGroupWaitBits+0xd8>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	1d18      	adds	r0, r3, #4
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	4313      	orrs	r3, r2
 800467a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800467c:	4619      	mov	r1, r3
 800467e:	f001 fc75 	bl	8005f6c <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8004686:	f001 fa99 	bl	8005bbc <xTaskResumeAll>
 800468a:	6178      	str	r0, [r7, #20]

    if( xTicksToWait != ( TickType_t ) 0 )
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	2b00      	cmp	r3, #0
 8004690:	d031      	beq.n	80046f6 <xEventGroupWaitBits+0x15e>
    {
        if( xAlreadyYielded == pdFALSE )
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d107      	bne.n	80046a8 <xEventGroupWaitBits+0x110>
        {
            portYIELD_WITHIN_API();
 8004698:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <xEventGroupWaitBits+0x16c>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 80046a8:	f002 f85e 	bl	8006768 <uxTaskResetEventItemValue>
 80046ac:	62f8      	str	r0, [r7, #44]	; 0x2c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d11a      	bne.n	80046ee <xEventGroupWaitBits+0x156>
        {
            taskENTER_CRITICAL();
 80046b8:	f002 ffce 	bl	8007658 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046c8:	f000 f8fc 	bl	80048c4 <prvTestWaitCondition>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <xEventGroupWaitBits+0x14e>
                {
                    if( xClearOnExit != pdFALSE )
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d006      	beq.n	80046e6 <xEventGroupWaitBits+0x14e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	43db      	mvns	r3, r3
 80046e0:	401a      	ands	r2, r3
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 80046e6:	2301      	movs	r3, #1
 80046e8:	623b      	str	r3, [r7, #32]
            }
            taskEXIT_CRITICAL();
 80046ea:	f002 ffe1 	bl	80076b0 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3730      	adds	r7, #48	; 0x30
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	0801393c 	.word	0x0801393c
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <xEventGroupClearBits+0x1e>
 800471c:	4910      	ldr	r1, [pc, #64]	; (8004760 <xEventGroupClearBits+0x58>)
 800471e:	f240 10df 	movw	r0, #479	; 0x1df
 8004722:	f7fc f980 	bl	8000a26 <vAssertCalled>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <xEventGroupClearBits+0x32>
 8004730:	490b      	ldr	r1, [pc, #44]	; (8004760 <xEventGroupClearBits+0x58>)
 8004732:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004736:	f7fc f976 	bl	8000a26 <vAssertCalled>

    taskENTER_CRITICAL();
 800473a:	f002 ff8d 	bl	8007658 <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60bb      	str	r3, [r7, #8]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	43db      	mvns	r3, r3
 800474c:	401a      	ands	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 8004752:	f002 ffad 	bl	80076b0 <vPortExitCritical>

    return uxReturn;
 8004756:	68bb      	ldr	r3, [r7, #8]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	0801393c 	.word	0x0801393c

08004764 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08c      	sub	sp, #48	; 0x30
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800476e:	2300      	movs	r3, #0
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <xEventGroupSetBits+0x26>
 8004780:	4938      	ldr	r1, [pc, #224]	; (8004864 <xEventGroupSetBits+0x100>)
 8004782:	f240 201f 	movw	r0, #543	; 0x21f
 8004786:	f7fc f94e 	bl	8000a26 <vAssertCalled>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <xEventGroupSetBits+0x3a>
 8004794:	4933      	ldr	r1, [pc, #204]	; (8004864 <xEventGroupSetBits+0x100>)
 8004796:	f44f 7008 	mov.w	r0, #544	; 0x220
 800479a:	f7fc f944 	bl	8000a26 <vAssertCalled>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	3304      	adds	r3, #4
 80047a2:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	3308      	adds	r3, #8
 80047a8:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 80047aa:	f001 f9f9 	bl	8005ba0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 80047c0:	e03c      	b.n	800483c <xEventGroupSetBits+0xd8>
        {
            pxNext = listGET_NEXT( pxListItem );
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80047d8:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047e0:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d108      	bne.n	80047fe <xEventGroupSetBits+0x9a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <xEventGroupSetBits+0xac>
                {
                    xMatchFound = pdTRUE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	e008      	b.n	8004810 <xEventGroupSetBits+0xac>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4013      	ands	r3, r2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	429a      	cmp	r2, r3
 800480a:	d101      	bne.n	8004810 <xEventGroupSetBits+0xac>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d010      	beq.n	8004838 <xEventGroupSetBits+0xd4>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <xEventGroupSetBits+0xc4>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8004820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004830:	4619      	mov	r1, r3
 8004832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004834:	f001 fc52 	bl	80060dc <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while( pxListItem != pxListEnd )
 800483c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	429a      	cmp	r2, r3
 8004842:	d1be      	bne.n	80047c2 <xEventGroupSetBits+0x5e>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	43db      	mvns	r3, r3
 800484c:	401a      	ands	r2, r3
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8004852:	f001 f9b3 	bl	8005bbc <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	681b      	ldr	r3, [r3, #0]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3730      	adds	r7, #48	; 0x30
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	0801393c 	.word	0x0801393c

08004868 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]
    const List_t * pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3304      	adds	r3, #4
 8004878:	60bb      	str	r3, [r7, #8]

    vTaskSuspendAll();
 800487a:	f001 f991 	bl	8005ba0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800487e:	e011      	b.n	80048a4 <vEventGroupDelete+0x3c>
        {
            /* Unblock the task, returning 0 as the event list is being deleted
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	3308      	adds	r3, #8
 8004888:	429a      	cmp	r2, r3
 800488a:	d104      	bne.n	8004896 <vEventGroupDelete+0x2e>
 800488c:	490c      	ldr	r1, [pc, #48]	; (80048c0 <vEventGroupDelete+0x58>)
 800488e:	f240 207f 	movw	r0, #639	; 0x27f
 8004892:	f7fc f8c8 	bl	8000a26 <vAssertCalled>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 fc1c 	bl	80060dc <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e9      	bne.n	8004880 <vEventGroupDelete+0x18>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
            {
                /* The event group can only have been allocated dynamically - free
                 * it again. */
                vPortFree( pxEventBits );
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f002 fcb7 	bl	8007220 <vPortFree>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
    ( void ) xTaskResumeAll();
 80048b2:	f001 f983 	bl	8005bbc <xTaskResumeAll>
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	0801393c 	.word	0x0801393c

080048c4 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e007      	b.n	80048fa <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d101      	bne.n	80048fa <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 80048f6:	2301      	movs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 80048fa:	697b      	ldr	r3, [r7, #20]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f103 0208 	add.w	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f103 0208 	add.w	r2, r3, #8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f103 0208 	add.w	r2, r3, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	601a      	str	r2, [r3, #0]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d103      	bne.n	80049ca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e00c      	b.n	80049e4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3308      	adds	r3, #8
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e002      	b.n	80049d8 <vListInsert+0x2e>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d2f6      	bcs.n	80049d2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6892      	ldr	r2, [r2, #8]
 8004a32:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6852      	ldr	r2, [r2, #4]
 8004a3c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d103      	bne.n	8004a50 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	1e5a      	subs	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d104      	bne.n	8004a8e <xQueueGenericReset+0x1e>
 8004a84:	492a      	ldr	r1, [pc, #168]	; (8004b30 <xQueueGenericReset+0xc0>)
 8004a86:	f240 100d 	movw	r0, #269	; 0x10d
 8004a8a:	f7fb ffcc 	bl	8000a26 <vAssertCalled>

    taskENTER_CRITICAL();
 8004a8e:	f002 fde3 	bl	8007658 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	68f9      	ldr	r1, [r7, #12]
 8004a9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	441a      	add	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	441a      	add	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	22ff      	movs	r2, #255	; 0xff
 8004ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	22ff      	movs	r2, #255	; 0xff
 8004ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d114      	bne.n	8004b0e <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3310      	adds	r3, #16
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fa95 	bl	8006020 <xTaskRemoveFromEventList>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d012      	beq.n	8004b22 <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <xQueueGenericReset+0xc4>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	e009      	b.n	8004b22 <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3310      	adds	r3, #16
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fef8 	bl	8004908 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3324      	adds	r3, #36	; 0x24
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fef3 	bl	8004908 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004b22:	f002 fdc5 	bl	80076b0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004b26:	2301      	movs	r3, #1
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	08013968 	.word	0x08013968
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <xQueueGenericCreate+0x1e>
 8004b4c:	491c      	ldr	r1, [pc, #112]	; (8004bc0 <xQueueGenericCreate+0x88>)
 8004b4e:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8004b52:	f7fb ff68 	bl	8000a26 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <xQueueGenericCreate+0x3c>
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d101      	bne.n	8004b78 <xQueueGenericCreate+0x40>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <xQueueGenericCreate+0x42>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <xQueueGenericCreate+0x50>
 8004b7e:	4910      	ldr	r1, [pc, #64]	; (8004bc0 <xQueueGenericCreate+0x88>)
 8004b80:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8004b84:	f7fb ff4f 	bl	8000a26 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	3354      	adds	r3, #84	; 0x54
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f002 fa8d 	bl	80070ac <pvPortMalloc>
 8004b92:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <xQueueGenericCreate+0x7e>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	3354      	adds	r3, #84	; 0x54
 8004ba2:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ba4:	79fa      	ldrb	r2, [r7, #7]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f807 	bl	8004bc4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
    }
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	08013968 	.word	0x08013968

08004bc4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e002      	b.n	8004be6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	69b8      	ldr	r0, [r7, #24]
 8004bf6:	f7ff ff3b 	bl	8004a70 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2200      	movs	r2, #0
 8004c06:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <xQueueCreateCountingSemaphore+0x1a>
 8004c20:	490f      	ldr	r1, [pc, #60]	; (8004c60 <xQueueCreateCountingSemaphore+0x50>)
 8004c22:	f240 20ea 	movw	r0, #746	; 0x2ea
 8004c26:	f7fb fefe 	bl	8000a26 <vAssertCalled>
        configASSERT( uxInitialCount <= uxMaxCount );
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d904      	bls.n	8004c3c <xQueueCreateCountingSemaphore+0x2c>
 8004c32:	490b      	ldr	r1, [pc, #44]	; (8004c60 <xQueueCreateCountingSemaphore+0x50>)
 8004c34:	f240 20eb 	movw	r0, #747	; 0x2eb
 8004c38:	f7fb fef5 	bl	8000a26 <vAssertCalled>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	2100      	movs	r1, #0
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff79 	bl	8004b38 <xQueueGenericCreate>
 8004c46:	60f8      	str	r0, [r7, #12]

        if( xHandle != NULL )
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <xQueueCreateCountingSemaphore+0x44>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8004c54:	68fb      	ldr	r3, [r7, #12]
    }
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	08013968 	.word	0x08013968

08004c64 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d104      	bne.n	8004c8a <xQueueGenericSend+0x26>
 8004c80:	4978      	ldr	r1, [pc, #480]	; (8004e64 <xQueueGenericSend+0x200>)
 8004c82:	f240 3009 	movw	r0, #777	; 0x309
 8004c86:	f7fb fece 	bl	8000a26 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <xQueueGenericSend+0x34>
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <xQueueGenericSend+0x38>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <xQueueGenericSend+0x3a>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <xQueueGenericSend+0x48>
 8004ca2:	4970      	ldr	r1, [pc, #448]	; (8004e64 <xQueueGenericSend+0x200>)
 8004ca4:	f240 300a 	movw	r0, #778	; 0x30a
 8004ca8:	f7fb febd 	bl	8000a26 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d103      	bne.n	8004cba <xQueueGenericSend+0x56>
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <xQueueGenericSend+0x5a>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <xQueueGenericSend+0x5c>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <xQueueGenericSend+0x6a>
 8004cc4:	4967      	ldr	r1, [pc, #412]	; (8004e64 <xQueueGenericSend+0x200>)
 8004cc6:	f240 300b 	movw	r0, #779	; 0x30b
 8004cca:	f7fb feac 	bl	8000a26 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cce:	f001 fbc3 	bl	8006458 <xTaskGetSchedulerState>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <xQueueGenericSend+0x7a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <xQueueGenericSend+0x7e>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <xQueueGenericSend+0x80>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <xQueueGenericSend+0x8e>
 8004ce8:	495e      	ldr	r1, [pc, #376]	; (8004e64 <xQueueGenericSend+0x200>)
 8004cea:	f240 300e 	movw	r0, #782	; 0x30e
 8004cee:	f7fb fe9a 	bl	8000a26 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004cf2:	f002 fcb1 	bl	8007658 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d302      	bcc.n	8004d08 <xQueueGenericSend+0xa4>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d145      	bne.n	8004d94 <xQueueGenericSend+0x130>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	61fb      	str	r3, [r7, #28]

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	6a38      	ldr	r0, [r7, #32]
 8004d14:	f000 fb68 	bl	80053e8 <prvCopyDataToQueue>
 8004d18:	61b8      	str	r0, [r7, #24]

                        if( pxQueue->pxQueueSetContainer != NULL )
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d014      	beq.n	8004d4c <xQueueGenericSend+0xe8>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d102      	bne.n	8004d2e <xQueueGenericSend+0xca>
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d12e      	bne.n	8004d8c <xQueueGenericSend+0x128>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004d2e:	6a38      	ldr	r0, [r7, #32]
 8004d30:	f000 fcfe 	bl	8005730 <prvNotifyQueueSetContainer>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d028      	beq.n	8004d8c <xQueueGenericSend+0x128>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004d3a:	4b4b      	ldr	r3, [pc, #300]	; (8004e68 <xQueueGenericSend+0x204>)
 8004d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	e01f      	b.n	8004d8c <xQueueGenericSend+0x128>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d010      	beq.n	8004d76 <xQueueGenericSend+0x112>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	3324      	adds	r3, #36	; 0x24
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f001 f961 	bl	8006020 <xTaskRemoveFromEventList>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d013      	beq.n	8004d8c <xQueueGenericSend+0x128>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8004d64:	4b40      	ldr	r3, [pc, #256]	; (8004e68 <xQueueGenericSend+0x204>)
 8004d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	e00a      	b.n	8004d8c <xQueueGenericSend+0x128>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <xQueueGenericSend+0x128>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004d7c:	4b3a      	ldr	r3, [pc, #232]	; (8004e68 <xQueueGenericSend+0x204>)
 8004d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004d8c:	f002 fc90 	bl	80076b0 <vPortExitCritical>
                return pdPASS;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e063      	b.n	8004e5c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d9a:	f002 fc89 	bl	80076b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e05c      	b.n	8004e5c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004da8:	f107 0310 	add.w	r3, r7, #16
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 fa0f 	bl	80061d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004db2:	2301      	movs	r3, #1
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004db6:	f002 fc7b 	bl	80076b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004dba:	f000 fef1 	bl	8005ba0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004dbe:	f002 fc4b 	bl	8007658 <vPortEnterCritical>
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dc8:	b25b      	sxtb	r3, r3
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d103      	bne.n	8004dd8 <xQueueGenericSend+0x174>
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dde:	b25b      	sxtb	r3, r3
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d103      	bne.n	8004dee <xQueueGenericSend+0x18a>
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dee:	f002 fc5f 	bl	80076b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004df2:	1d3a      	adds	r2, r7, #4
 8004df4:	f107 0310 	add.w	r3, r7, #16
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 f9fe 	bl	80061fc <xTaskCheckForTimeOut>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d124      	bne.n	8004e50 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e06:	6a38      	ldr	r0, [r7, #32]
 8004e08:	f000 fbf3 	bl	80055f2 <prvIsQueueFull>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d018      	beq.n	8004e44 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	3310      	adds	r3, #16
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 f886 	bl	8005f2c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004e20:	6a38      	ldr	r0, [r7, #32]
 8004e22:	f000 fb71 	bl	8005508 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004e26:	f000 fec9 	bl	8005bbc <xTaskResumeAll>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f47f af60 	bne.w	8004cf2 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <xQueueGenericSend+0x204>)
 8004e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	e756      	b.n	8004cf2 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004e44:	6a38      	ldr	r0, [r7, #32]
 8004e46:	f000 fb5f 	bl	8005508 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004e4a:	f000 feb7 	bl	8005bbc <xTaskResumeAll>
 8004e4e:	e750      	b.n	8004cf2 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004e50:	6a38      	ldr	r0, [r7, #32]
 8004e52:	f000 fb59 	bl	8005508 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004e56:	f000 feb1 	bl	8005bbc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004e5a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3728      	adds	r7, #40	; 0x28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	08013968 	.word	0x08013968
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	; 0x30
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d104      	bne.n	8004e8e <xQueueGenericSendFromISR+0x22>
 8004e84:	494e      	ldr	r1, [pc, #312]	; (8004fc0 <xQueueGenericSendFromISR+0x154>)
 8004e86:	f240 30dd 	movw	r0, #989	; 0x3dd
 8004e8a:	f7fb fdcc 	bl	8000a26 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <xQueueGenericSendFromISR+0x30>
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <xQueueGenericSendFromISR+0x34>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <xQueueGenericSendFromISR+0x36>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d104      	bne.n	8004eb0 <xQueueGenericSendFromISR+0x44>
 8004ea6:	4946      	ldr	r1, [pc, #280]	; (8004fc0 <xQueueGenericSendFromISR+0x154>)
 8004ea8:	f240 30de 	movw	r0, #990	; 0x3de
 8004eac:	f7fb fdbb 	bl	8000a26 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d103      	bne.n	8004ebe <xQueueGenericSendFromISR+0x52>
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <xQueueGenericSendFromISR+0x56>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <xQueueGenericSendFromISR+0x58>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <xQueueGenericSendFromISR+0x66>
 8004ec8:	493d      	ldr	r1, [pc, #244]	; (8004fc0 <xQueueGenericSendFromISR+0x154>)
 8004eca:	f240 30df 	movw	r0, #991	; 0x3df
 8004ece:	f7fb fdaa 	bl	8000a26 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ed2:	f002 fc9b 	bl	800780c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8004eda:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004ede:	b672      	cpsid	i
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	b662      	cpsie	i
 8004eee:	61ba      	str	r2, [r7, #24]
 8004ef0:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d302      	bcc.n	8004f08 <xQueueGenericSendFromISR+0x9c>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d14f      	bne.n	8004fa8 <xQueueGenericSendFromISR+0x13c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f1e:	f000 fa63 	bl	80053e8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004f22:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d129      	bne.n	8004f80 <xQueueGenericSendFromISR+0x114>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <xQueueGenericSendFromISR+0xee>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d102      	bne.n	8004f40 <xQueueGenericSendFromISR+0xd4>
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d130      	bne.n	8004fa2 <xQueueGenericSendFromISR+0x136>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8004f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f42:	f000 fbf5 	bl	8005730 <prvNotifyQueueSetContainer>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02a      	beq.n	8004fa2 <xQueueGenericSendFromISR+0x136>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d027      	beq.n	8004fa2 <xQueueGenericSendFromISR+0x136>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e023      	b.n	8004fa2 <xQueueGenericSendFromISR+0x136>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01f      	beq.n	8004fa2 <xQueueGenericSendFromISR+0x136>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	3324      	adds	r3, #36	; 0x24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 f85a 	bl	8006020 <xTaskRemoveFromEventList>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d017      	beq.n	8004fa2 <xQueueGenericSendFromISR+0x136>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d014      	beq.n	8004fa2 <xQueueGenericSendFromISR+0x136>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e010      	b.n	8004fa2 <xQueueGenericSendFromISR+0x136>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004f80:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004f84:	2b7f      	cmp	r3, #127	; 0x7f
 8004f86:	d104      	bne.n	8004f92 <xQueueGenericSendFromISR+0x126>
 8004f88:	490d      	ldr	r1, [pc, #52]	; (8004fc0 <xQueueGenericSendFromISR+0x154>)
 8004f8a:	f44f 608d 	mov.w	r0, #1128	; 0x468
 8004f8e:	f7fb fd4a 	bl	8000a26 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f96:	3301      	adds	r3, #1
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	b25a      	sxtb	r2, r3
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 8004fa6:	e001      	b.n	8004fac <xQueueGenericSendFromISR+0x140>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3730      	adds	r7, #48	; 0x30
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	08013968 	.word	0x08013968

08004fc4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d104      	bne.n	8004fe8 <xQueueReceive+0x24>
 8004fde:	495f      	ldr	r1, [pc, #380]	; (800515c <xQueueReceive+0x198>)
 8004fe0:	f240 502c 	movw	r0, #1324	; 0x52c
 8004fe4:	f7fb fd1f 	bl	8000a26 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <xQueueReceive+0x32>
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <xQueueReceive+0x36>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <xQueueReceive+0x38>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <xQueueReceive+0x46>
 8005000:	4956      	ldr	r1, [pc, #344]	; (800515c <xQueueReceive+0x198>)
 8005002:	f44f 60a6 	mov.w	r0, #1328	; 0x530
 8005006:	f7fb fd0e 	bl	8000a26 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800500a:	f001 fa25 	bl	8006458 <xTaskGetSchedulerState>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <xQueueReceive+0x56>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <xQueueReceive+0x5a>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <xQueueReceive+0x5c>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d104      	bne.n	800502e <xQueueReceive+0x6a>
 8005024:	494d      	ldr	r1, [pc, #308]	; (800515c <xQueueReceive+0x198>)
 8005026:	f240 5035 	movw	r0, #1333	; 0x535
 800502a:	f7fb fcfc 	bl	8000a26 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800502e:	f002 fb13 	bl	8007658 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01f      	beq.n	800507e <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	6a38      	ldr	r0, [r7, #32]
 8005042:	f000 fa3b 	bl	80054bc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00f      	beq.n	8005076 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	3310      	adds	r3, #16
 800505a:	4618      	mov	r0, r3
 800505c:	f000 ffe0 	bl	8006020 <xTaskRemoveFromEventList>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005066:	4b3e      	ldr	r3, [pc, #248]	; (8005160 <xQueueReceive+0x19c>)
 8005068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005076:	f002 fb1b 	bl	80076b0 <vPortExitCritical>
                return pdPASS;
 800507a:	2301      	movs	r3, #1
 800507c:	e069      	b.n	8005152 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d103      	bne.n	800508c <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005084:	f002 fb14 	bl	80076b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005088:	2300      	movs	r3, #0
 800508a:	e062      	b.n	8005152 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005092:	f107 0314 	add.w	r3, r7, #20
 8005096:	4618      	mov	r0, r3
 8005098:	f001 f89a 	bl	80061d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800509c:	2301      	movs	r3, #1
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80050a0:	f002 fb06 	bl	80076b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80050a4:	f000 fd7c 	bl	8005ba0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80050a8:	f002 fad6 	bl	8007658 <vPortEnterCritical>
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b2:	b25b      	sxtb	r3, r3
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d103      	bne.n	80050c2 <xQueueReceive+0xfe>
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c8:	b25b      	sxtb	r3, r3
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d103      	bne.n	80050d8 <xQueueReceive+0x114>
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d8:	f002 faea 	bl	80076b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050dc:	1d3a      	adds	r2, r7, #4
 80050de:	f107 0314 	add.w	r3, r7, #20
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 f889 	bl	80061fc <xTaskCheckForTimeOut>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d123      	bne.n	8005138 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050f0:	6a38      	ldr	r0, [r7, #32]
 80050f2:	f000 fa68 	bl	80055c6 <prvIsQueueEmpty>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d017      	beq.n	800512c <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	3324      	adds	r3, #36	; 0x24
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f000 ff11 	bl	8005f2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800510a:	6a38      	ldr	r0, [r7, #32]
 800510c:	f000 f9fc 	bl	8005508 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005110:	f000 fd54 	bl	8005bbc <xTaskResumeAll>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d189      	bne.n	800502e <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 800511a:	4b11      	ldr	r3, [pc, #68]	; (8005160 <xQueueReceive+0x19c>)
 800511c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	e780      	b.n	800502e <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800512c:	6a38      	ldr	r0, [r7, #32]
 800512e:	f000 f9eb 	bl	8005508 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005132:	f000 fd43 	bl	8005bbc <xTaskResumeAll>
 8005136:	e77a      	b.n	800502e <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005138:	6a38      	ldr	r0, [r7, #32]
 800513a:	f000 f9e5 	bl	8005508 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800513e:	f000 fd3d 	bl	8005bbc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005142:	6a38      	ldr	r0, [r7, #32]
 8005144:	f000 fa3f 	bl	80055c6 <prvIsQueueEmpty>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	f43f af6f 	beq.w	800502e <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005150:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005152:	4618      	mov	r0, r3
 8005154:	3728      	adds	r7, #40	; 0x28
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	08013968 	.word	0x08013968
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <xQueueSemaphoreTake+0x26>
 8005180:	4971      	ldr	r1, [pc, #452]	; (8005348 <xQueueSemaphoreTake+0x1e4>)
 8005182:	f240 50be 	movw	r0, #1470	; 0x5be
 8005186:	f7fb fc4e 	bl	8000a26 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <xQueueSemaphoreTake+0x38>
 8005192:	496d      	ldr	r1, [pc, #436]	; (8005348 <xQueueSemaphoreTake+0x1e4>)
 8005194:	f240 50c2 	movw	r0, #1474	; 0x5c2
 8005198:	f7fb fc45 	bl	8000a26 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800519c:	f001 f95c 	bl	8006458 <xTaskGetSchedulerState>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <xQueueSemaphoreTake+0x48>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <xQueueSemaphoreTake+0x4c>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <xQueueSemaphoreTake+0x4e>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <xQueueSemaphoreTake+0x5c>
 80051b6:	4964      	ldr	r1, [pc, #400]	; (8005348 <xQueueSemaphoreTake+0x1e4>)
 80051b8:	f240 50c7 	movw	r0, #1479	; 0x5c7
 80051bc:	f7fb fc33 	bl	8000a26 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80051c0:	f002 fa4a 	bl	8007658 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d024      	beq.n	800521a <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	1e5a      	subs	r2, r3, #1
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <xQueueSemaphoreTake+0x86>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80051e0:	f001 fada 	bl	8006798 <pvTaskIncrementMutexHeldCount>
 80051e4:	4602      	mov	r2, r0
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00f      	beq.n	8005212 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3310      	adds	r3, #16
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 ff12 	bl	8006020 <xTaskRemoveFromEventList>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005202:	4b52      	ldr	r3, [pc, #328]	; (800534c <xQueueSemaphoreTake+0x1e8>)
 8005204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005212:	f002 fa4d 	bl	80076b0 <vPortExitCritical>
                return pdPASS;
 8005216:	2301      	movs	r3, #1
 8005218:	e091      	b.n	800533e <xQueueSemaphoreTake+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueSemaphoreTake+0xd4>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <xQueueSemaphoreTake+0xcc>
 8005226:	4948      	ldr	r1, [pc, #288]	; (8005348 <xQueueSemaphoreTake+0x1e4>)
 8005228:	f240 600d 	movw	r0, #1549	; 0x60d
 800522c:	f7fb fbfb 	bl	8000a26 <vAssertCalled>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8005230:	f002 fa3e 	bl	80076b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005234:	2300      	movs	r3, #0
 8005236:	e082      	b.n	800533e <xQueueSemaphoreTake+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800523e:	f107 030c 	add.w	r3, r7, #12
 8005242:	4618      	mov	r0, r3
 8005244:	f000 ffc4 	bl	80061d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800524c:	f002 fa30 	bl	80076b0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005250:	f000 fca6 	bl	8005ba0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005254:	f002 fa00 	bl	8007658 <vPortEnterCritical>
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800525e:	b25b      	sxtb	r3, r3
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d103      	bne.n	800526e <xQueueSemaphoreTake+0x10a>
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005274:	b25b      	sxtb	r3, r3
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d103      	bne.n	8005284 <xQueueSemaphoreTake+0x120>
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005284:	f002 fa14 	bl	80076b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005288:	463a      	mov	r2, r7
 800528a:	f107 030c 	add.w	r3, r7, #12
 800528e:	4611      	mov	r1, r2
 8005290:	4618      	mov	r0, r3
 8005292:	f000 ffb3 	bl	80061fc <xTaskCheckForTimeOut>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d132      	bne.n	8005302 <xQueueSemaphoreTake+0x19e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800529c:	69f8      	ldr	r0, [r7, #28]
 800529e:	f000 f992 	bl	80055c6 <prvIsQueueEmpty>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d026      	beq.n	80052f6 <xQueueSemaphoreTake+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <xQueueSemaphoreTake+0x160>
                        {
                            taskENTER_CRITICAL();
 80052b0:	f002 f9d2 	bl	8007658 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 f8eb 	bl	8006494 <xTaskPriorityInherit>
 80052be:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 80052c0:	f002 f9f6 	bl	80076b0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	3324      	adds	r3, #36	; 0x24
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	4611      	mov	r1, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fe2d 	bl	8005f2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80052d2:	69f8      	ldr	r0, [r7, #28]
 80052d4:	f000 f918 	bl	8005508 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80052d8:	f000 fc70 	bl	8005bbc <xTaskResumeAll>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f47f af6e 	bne.w	80051c0 <xQueueSemaphoreTake+0x5c>
                {
                    portYIELD_WITHIN_API();
 80052e4:	4b19      	ldr	r3, [pc, #100]	; (800534c <xQueueSemaphoreTake+0x1e8>)
 80052e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	e764      	b.n	80051c0 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80052f6:	69f8      	ldr	r0, [r7, #28]
 80052f8:	f000 f906 	bl	8005508 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80052fc:	f000 fc5e 	bl	8005bbc <xTaskResumeAll>
 8005300:	e75e      	b.n	80051c0 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8005302:	69f8      	ldr	r0, [r7, #28]
 8005304:	f000 f900 	bl	8005508 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005308:	f000 fc58 	bl	8005bbc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800530c:	69f8      	ldr	r0, [r7, #28]
 800530e:	f000 f95a 	bl	80055c6 <prvIsQueueEmpty>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	f43f af53 	beq.w	80051c0 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00d      	beq.n	800533c <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 8005320:	f002 f99a 	bl	8007658 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005324:	69f8      	ldr	r0, [r7, #28]
 8005326:	f000 f847 	bl	80053b8 <prvGetDisinheritPriorityAfterTimeout>
 800532a:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	6979      	ldr	r1, [r7, #20]
 8005332:	4618      	mov	r0, r3
 8005334:	f001 f994 	bl	8006660 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8005338:	f002 f9ba 	bl	80076b0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800533c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800533e:	4618      	mov	r0, r3
 8005340:	3728      	adds	r7, #40	; 0x28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	08013968 	.word	0x08013968
 800534c:	e000ed04 	.word	0xe000ed04

08005350 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d104      	bne.n	8005368 <uxQueueMessagesWaiting+0x18>
 800535e:	4908      	ldr	r1, [pc, #32]	; (8005380 <uxQueueMessagesWaiting+0x30>)
 8005360:	f240 70be 	movw	r0, #1982	; 0x7be
 8005364:	f7fb fb5f 	bl	8000a26 <vAssertCalled>

    taskENTER_CRITICAL();
 8005368:	f002 f976 	bl	8007658 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005372:	f002 f99d 	bl	80076b0 <vPortExitCritical>

    return uxReturn;
 8005376:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	08013968 	.word	0x08013968

08005384 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <vQueueDelete+0x1c>
 8005396:	4907      	ldr	r1, [pc, #28]	; (80053b4 <vQueueDelete+0x30>)
 8005398:	f240 70eb 	movw	r0, #2027	; 0x7eb
 800539c:	f7fb fb43 	bl	8000a26 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f967 	bl	8005674 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The queue can only have been allocated dynamically - free it
             * again. */
            vPortFree( pxQueue );
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f001 ff3a 	bl	8007220 <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	08013968 	.word	0x08013968

080053b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d006      	beq.n	80053d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f1c3 0305 	rsb	r3, r3, #5
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e001      	b.n	80053da <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80053da:	68fb      	ldr	r3, [r7, #12]
    }
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d14d      	bne.n	80054aa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	4618      	mov	r0, r3
 8005414:	f001 f8b4 	bl	8006580 <xTaskPriorityDisinherit>
 8005418:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	e043      	b.n	80054aa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d119      	bne.n	800545c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6858      	ldr	r0, [r3, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	461a      	mov	r2, r3
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	f00c f9dd 	bl	80117f2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	441a      	add	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d32b      	bcc.n	80054aa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	e026      	b.n	80054aa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68d8      	ldr	r0, [r3, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	461a      	mov	r2, r3
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	f00c f9c3 	bl	80117f2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	425b      	negs	r3, r3
 8005476:	441a      	add	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d207      	bcs.n	8005498 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	425b      	negs	r3, r3
 8005492:	441a      	add	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d105      	bne.n	80054aa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80054b2:	697b      	ldr	r3, [r7, #20]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d018      	beq.n	8005500 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	441a      	add	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d303      	bcc.n	80054f0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68d9      	ldr	r1, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	461a      	mov	r2, r3
 80054fa:	6838      	ldr	r0, [r7, #0]
 80054fc:	f00c f979 	bl	80117f2 <memcpy>
    }
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005510:	f002 f8a2 	bl	8007658 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800551a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800551c:	e01e      	b.n	800555c <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f902 	bl	8005730 <prvNotifyQueueSetContainer>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d010      	beq.n	8005554 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 8005532:	f000 febf 	bl	80062b4 <vTaskMissedYield>
 8005536:	e00d      	b.n	8005554 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d012      	beq.n	8005566 <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3324      	adds	r3, #36	; 0x24
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fd6b 	bl	8006020 <xTaskRemoveFromEventList>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 8005550:	f000 feb0 	bl	80062b4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	3b01      	subs	r3, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800555c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005560:	2b00      	cmp	r3, #0
 8005562:	dcdc      	bgt.n	800551e <prvUnlockQueue+0x16>
 8005564:	e000      	b.n	8005568 <prvUnlockQueue+0x60>
                            break;
 8005566:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	22ff      	movs	r2, #255	; 0xff
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005570:	f002 f89e 	bl	80076b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005574:	f002 f870 	bl	8007658 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800557e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005580:	e011      	b.n	80055a6 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d012      	beq.n	80055b0 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3310      	adds	r3, #16
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fd46 	bl	8006020 <xTaskRemoveFromEventList>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 800559a:	f000 fe8b 	bl	80062b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800559e:	7bbb      	ldrb	r3, [r7, #14]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80055a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dce9      	bgt.n	8005582 <prvUnlockQueue+0x7a>
 80055ae:	e000      	b.n	80055b2 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 80055b0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	22ff      	movs	r2, #255	; 0xff
 80055b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80055ba:	f002 f879 	bl	80076b0 <vPortExitCritical>
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80055ce:	f002 f843 	bl	8007658 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d102      	bne.n	80055e0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	e001      	b.n	80055e4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80055e4:	f002 f864 	bl	80076b0 <vPortExitCritical>

    return xReturn;
 80055e8:	68fb      	ldr	r3, [r7, #12]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80055fa:	f002 f82d 	bl	8007658 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	429a      	cmp	r2, r3
 8005608:	d102      	bne.n	8005610 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800560a:	2301      	movs	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e001      	b.n	8005614 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005614:	f002 f84c 	bl	80076b0 <vPortExitCritical>

    return xReturn;
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e014      	b.n	800565e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005634:	4a0e      	ldr	r2, [pc, #56]	; (8005670 <vQueueAddToRegistry+0x4c>)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005640:	490b      	ldr	r1, [pc, #44]	; (8005670 <vQueueAddToRegistry+0x4c>)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800564a:	4a09      	ldr	r2, [pc, #36]	; (8005670 <vQueueAddToRegistry+0x4c>)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005656:	e005      	b.n	8005664 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b07      	cmp	r3, #7
 8005662:	d9e7      	bls.n	8005634 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	20025c10 	.word	0x20025c10

08005674 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e016      	b.n	80056b0 <vQueueUnregisterQueue+0x3c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005682:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <vQueueUnregisterQueue+0x50>)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4413      	add	r3, r2
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d10b      	bne.n	80056aa <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8005692:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <vQueueUnregisterQueue+0x50>)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2100      	movs	r1, #0
 8005698:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800569c:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <vQueueUnregisterQueue+0x50>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	2200      	movs	r2, #0
 80056a6:	605a      	str	r2, [r3, #4]
                break;
 80056a8:	e005      	b.n	80056b6 <vQueueUnregisterQueue+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b07      	cmp	r3, #7
 80056b4:	d9e5      	bls.n	8005682 <vQueueUnregisterQueue+0xe>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20025c10 	.word	0x20025c10

080056c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80056d8:	f001 ffbe 	bl	8007658 <vPortEnterCritical>
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056e2:	b25b      	sxtb	r3, r3
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d103      	bne.n	80056f2 <vQueueWaitForMessageRestricted+0x2a>
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f8:	b25b      	sxtb	r3, r3
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d103      	bne.n	8005708 <vQueueWaitForMessageRestricted+0x40>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005708:	f001 ffd2 	bl	80076b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	3324      	adds	r3, #36	; 0x24
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fc57 	bl	8005fd0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005722:	6978      	ldr	r0, [r7, #20]
 8005724:	f7ff fef0 	bl	8005508 <prvUnlockQueue>
    }
 8005728:	bf00      	nop
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573c:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <prvNotifyQueueSetContainer+0x22>
 8005748:	4924      	ldr	r1, [pc, #144]	; (80057dc <prvNotifyQueueSetContainer+0xac>)
 800574a:	f640 3097 	movw	r0, #2967	; 0xb97
 800574e:	f7fb f96a 	bl	8000a26 <vAssertCalled>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575a:	429a      	cmp	r2, r3
 800575c:	d304      	bcc.n	8005768 <prvNotifyQueueSetContainer+0x38>
 800575e:	491f      	ldr	r1, [pc, #124]	; (80057dc <prvNotifyQueueSetContainer+0xac>)
 8005760:	f640 3098 	movw	r0, #2968	; 0xb98
 8005764:	f7fb f95f 	bl	8000a26 <vAssertCalled>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	429a      	cmp	r2, r3
 8005772:	d22e      	bcs.n	80057d2 <prvNotifyQueueSetContainer+0xa2>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800577a:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	2200      	movs	r2, #0
 8005780:	4619      	mov	r1, r3
 8005782:	6938      	ldr	r0, [r7, #16]
 8005784:	f7ff fe30 	bl	80053e8 <prvCopyDataToQueue>
 8005788:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 800578a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d10e      	bne.n	80057b2 <prvNotifyQueueSetContainer+0x82>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01a      	beq.n	80057d2 <prvNotifyQueueSetContainer+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	3324      	adds	r3, #36	; 0x24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fc3d 	bl	8006020 <xTaskRemoveFromEventList>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d012      	beq.n	80057d2 <prvNotifyQueueSetContainer+0xa2>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 80057ac:	2301      	movs	r3, #1
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e00f      	b.n	80057d2 <prvNotifyQueueSetContainer+0xa2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 80057b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b6:	2b7f      	cmp	r3, #127	; 0x7f
 80057b8:	d104      	bne.n	80057c4 <prvNotifyQueueSetContainer+0x94>
 80057ba:	4908      	ldr	r1, [pc, #32]	; (80057dc <prvNotifyQueueSetContainer+0xac>)
 80057bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80057c0:	f7fb f931 	bl	8000a26 <vAssertCalled>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	3301      	adds	r3, #1
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	b25a      	sxtb	r2, r3
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80057d2:	697b      	ldr	r3, [r7, #20]
    }
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	08013968 	.word	0x08013968

080057e0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08c      	sub	sp, #48	; 0x30
 80057e4:	af04      	add	r7, sp, #16
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 fc59 	bl	80070ac <pvPortMalloc>
 80057fa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00e      	beq.n	8005820 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005802:	20b8      	movs	r0, #184	; 0xb8
 8005804:	f001 fc52 	bl	80070ac <pvPortMalloc>
 8005808:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
 8005816:	e005      	b.n	8005824 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005818:	6978      	ldr	r0, [r7, #20]
 800581a:	f001 fd01 	bl	8007220 <vPortFree>
 800581e:	e001      	b.n	8005824 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005820:	2300      	movs	r3, #0
 8005822:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d013      	beq.n	8005852 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800582a:	88fa      	ldrh	r2, [r7, #6]
 800582c:	2300      	movs	r3, #0
 800582e:	9303      	str	r3, [sp, #12]
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	9302      	str	r3, [sp, #8]
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f80f 	bl	8005864 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005846:	69f8      	ldr	r0, [r7, #28]
 8005848:	f000 f8b4 	bl	80059b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800584c:	2301      	movs	r3, #1
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e002      	b.n	8005858 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005858:	69bb      	ldr	r3, [r7, #24]
    }
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	461a      	mov	r2, r3
 800587c:	21a5      	movs	r1, #165	; 0xa5
 800587e:	f00b ffdc 	bl	801183a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800588c:	440b      	add	r3, r1
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f023 0307 	bic.w	r3, r3, #7
 800589a:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <prvInitialiseNewTask+0x4c>
 80058a6:	493f      	ldr	r1, [pc, #252]	; (80059a4 <prvInitialiseNewTask+0x140>)
 80058a8:	f240 305e 	movw	r0, #862	; 0x35e
 80058ac:	f7fb f8bb 	bl	8000a26 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d01f      	beq.n	80058f6 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b6:	2300      	movs	r3, #0
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e012      	b.n	80058e2 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	4413      	add	r3, r2
 80058c2:	7819      	ldrb	r1, [r3, #0]
 80058c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	4413      	add	r3, r2
 80058ca:	3334      	adds	r3, #52	; 0x34
 80058cc:	460a      	mov	r2, r1
 80058ce:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4413      	add	r3, r2
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d006      	beq.n	80058ea <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3301      	adds	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b09      	cmp	r3, #9
 80058e6:	d9e9      	bls.n	80058bc <prvInitialiseNewTask+0x58>
 80058e8:	e000      	b.n	80058ec <prvInitialiseNewTask+0x88>
            {
                break;
 80058ea:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058f4:	e003      	b.n	80058fe <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	2b04      	cmp	r3, #4
 8005902:	d901      	bls.n	8005908 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005904:	2304      	movs	r3, #4
 8005906:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	6a3a      	ldr	r2, [r7, #32]
 800590c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	6a3a      	ldr	r2, [r7, #32]
 8005912:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	2200      	movs	r2, #0
 8005918:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	3304      	adds	r3, #4
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff f812 	bl	8004948 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	3318      	adds	r3, #24
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff f80d 	bl	8004948 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005932:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	f1c3 0205 	rsb	r2, r3, #5
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005942:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	33b0      	adds	r3, #176	; 0xb0
 8005948:	2204      	movs	r2, #4
 800594a:	2100      	movs	r1, #0
 800594c:	4618      	mov	r0, r3
 800594e:	f00b ff74 	bl	801183a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	33b4      	adds	r3, #180	; 0xb4
 8005956:	2201      	movs	r2, #1
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f00b ff6d 	bl	801183a <memset>
    #if ( configUSE_NEWLIB_REENTRANT == 1 )
        {
            /* Initialise this task's Newlib reent structure.
             * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
             * for additional information. */
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	3350      	adds	r3, #80	; 0x50
 8005964:	2260      	movs	r2, #96	; 0x60
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f00b ff66 	bl	801183a <memset>
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	4a0d      	ldr	r2, [pc, #52]	; (80059a8 <prvInitialiseNewTask+0x144>)
 8005972:	655a      	str	r2, [r3, #84]	; 0x54
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	4a0d      	ldr	r2, [pc, #52]	; (80059ac <prvInitialiseNewTask+0x148>)
 8005978:	659a      	str	r2, [r3, #88]	; 0x58
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	4a0c      	ldr	r2, [pc, #48]	; (80059b0 <prvInitialiseNewTask+0x14c>)
 800597e:	65da      	str	r2, [r3, #92]	; 0x5c
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	6938      	ldr	r0, [r7, #16]
 8005986:	f001 fd5f 	bl	8007448 <pxPortInitialiseStack>
 800598a:	4602      	mov	r2, r0
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800599a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800599c:	bf00      	nop
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	0801398c 	.word	0x0801398c
 80059a8:	08015514 	.word	0x08015514
 80059ac:	08015534 	.word	0x08015534
 80059b0:	080154f4 	.word	0x080154f4

080059b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80059bc:	f001 fe4c 	bl	8007658 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80059c0:	4b2c      	ldr	r3, [pc, #176]	; (8005a74 <prvAddNewTaskToReadyList+0xc0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	4a2b      	ldr	r2, [pc, #172]	; (8005a74 <prvAddNewTaskToReadyList+0xc0>)
 80059c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80059ca:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80059d2:	4a29      	ldr	r2, [pc, #164]	; (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059d8:	4b26      	ldr	r3, [pc, #152]	; (8005a74 <prvAddNewTaskToReadyList+0xc0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d110      	bne.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80059e0:	f000 fc8c 	bl	80062fc <prvInitialiseTaskLists>
 80059e4:	e00d      	b.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80059e6:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <prvAddNewTaskToReadyList+0xc8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059ee:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d802      	bhi.n	8005a02 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80059fc:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005a02:	4b1f      	ldr	r3, [pc, #124]	; (8005a80 <prvAddNewTaskToReadyList+0xcc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <prvAddNewTaskToReadyList+0xcc>)
 8005a0a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a0c:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <prvAddNewTaskToReadyList+0xcc>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	2201      	movs	r2, #1
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	4b19      	ldr	r3, [pc, #100]	; (8005a84 <prvAddNewTaskToReadyList+0xd0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	4a18      	ldr	r2, [pc, #96]	; (8005a84 <prvAddNewTaskToReadyList+0xd0>)
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <prvAddNewTaskToReadyList+0xd4>)
 8005a34:	441a      	add	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7fe ff90 	bl	8004962 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005a42:	f001 fe35 	bl	80076b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005a46:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <prvAddNewTaskToReadyList+0xc8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00e      	beq.n	8005a6c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <prvAddNewTaskToReadyList+0xc4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d207      	bcs.n	8005a6c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <prvAddNewTaskToReadyList+0xd8>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20019728 	.word	0x20019728
 8005a78:	20019650 	.word	0x20019650
 8005a7c:	20019734 	.word	0x20019734
 8005a80:	20019744 	.word	0x20019744
 8005a84:	20019730 	.word	0x20019730
 8005a88:	20019654 	.word	0x20019654
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d011      	beq.n	8005ac6 <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8005aa2:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <vTaskDelay+0x54>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <vTaskDelay+0x24>
 8005aaa:	490f      	ldr	r1, [pc, #60]	; (8005ae8 <vTaskDelay+0x58>)
 8005aac:	f240 503f 	movw	r0, #1343	; 0x53f
 8005ab0:	f7fa ffb9 	bl	8000a26 <vAssertCalled>
            vTaskSuspendAll();
 8005ab4:	f000 f874 	bl	8005ba0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ab8:	2100      	movs	r1, #0
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 ff80 	bl	80069c0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005ac0:	f000 f87c 	bl	8005bbc <xTaskResumeAll>
 8005ac4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d107      	bne.n	8005adc <vTaskDelay+0x4c>
        {
            portYIELD_WITHIN_API();
 8005acc:	4b07      	ldr	r3, [pc, #28]	; (8005aec <vTaskDelay+0x5c>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20019750 	.word	0x20019750
 8005ae8:	0801398c 	.word	0x0801398c
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005af6:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <vTaskStartScheduler+0x88>)
 8005af8:	9301      	str	r3, [sp, #4]
 8005afa:	2300      	movs	r3, #0
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	2300      	movs	r3, #0
 8005b00:	2282      	movs	r2, #130	; 0x82
 8005b02:	491e      	ldr	r1, [pc, #120]	; (8005b7c <vTaskStartScheduler+0x8c>)
 8005b04:	481e      	ldr	r0, [pc, #120]	; (8005b80 <vTaskStartScheduler+0x90>)
 8005b06:	f7ff fe6b 	bl	80057e0 <xTaskCreate>
 8005b0a:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d102      	bne.n	8005b18 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005b12:	f000 ffbb 	bl	8006a8c <xTimerCreateTimerTask>
 8005b16:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d11c      	bne.n	8005b58 <vTaskStartScheduler+0x68>
        __asm volatile
 8005b1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005b22:	b672      	cpsid	i
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	b662      	cpsie	i
 8005b32:	603b      	str	r3, [r7, #0]
            {
                /* Switch Newlib's _impure_ptr variable to point to the _reent
                 * structure specific to the task that will run first.
                 * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b34:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <vTaskStartScheduler+0x94>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3350      	adds	r3, #80	; 0x50
 8005b3a:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <vTaskStartScheduler+0x98>)
 8005b3c:	6013      	str	r3, [r2, #0]
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005b3e:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <vTaskStartScheduler+0x9c>)
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <vTaskStartScheduler+0xa0>)
 8005b48:	2201      	movs	r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b4c:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <vTaskStartScheduler+0xa4>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005b52:	f001 fcff 	bl	8007554 <xPortStartScheduler>
 8005b56:	e008      	b.n	8005b6a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d104      	bne.n	8005b6a <vTaskStartScheduler+0x7a>
 8005b60:	490d      	ldr	r1, [pc, #52]	; (8005b98 <vTaskStartScheduler+0xa8>)
 8005b62:	f640 0036 	movw	r0, #2102	; 0x836
 8005b66:	f7fa ff5e 	bl	8000a26 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <vTaskStartScheduler+0xac>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	2001974c 	.word	0x2001974c
 8005b7c:	080139b0 	.word	0x080139b0
 8005b80:	080062cd 	.word	0x080062cd
 8005b84:	20019650 	.word	0x20019650
 8005b88:	20000034 	.word	0x20000034
 8005b8c:	20019748 	.word	0x20019748
 8005b90:	20019734 	.word	0x20019734
 8005b94:	2001972c 	.word	0x2001972c
 8005b98:	0801398c 	.word	0x0801398c
 8005b9c:	2000000c 	.word	0x2000000c

08005ba0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005ba4:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <vTaskSuspendAll+0x18>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	4a03      	ldr	r2, [pc, #12]	; (8005bb8 <vTaskSuspendAll+0x18>)
 8005bac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	20019750 	.word	0x20019750

08005bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005bca:	4b3e      	ldr	r3, [pc, #248]	; (8005cc4 <xTaskResumeAll+0x108>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d104      	bne.n	8005bdc <xTaskResumeAll+0x20>
 8005bd2:	493d      	ldr	r1, [pc, #244]	; (8005cc8 <xTaskResumeAll+0x10c>)
 8005bd4:	f640 00a9 	movw	r0, #2217	; 0x8a9
 8005bd8:	f7fa ff25 	bl	8000a26 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005bdc:	f001 fd3c 	bl	8007658 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005be0:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <xTaskResumeAll+0x108>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	4a37      	ldr	r2, [pc, #220]	; (8005cc4 <xTaskResumeAll+0x108>)
 8005be8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bea:	4b36      	ldr	r3, [pc, #216]	; (8005cc4 <xTaskResumeAll+0x108>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d161      	bne.n	8005cb6 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bf2:	4b36      	ldr	r3, [pc, #216]	; (8005ccc <xTaskResumeAll+0x110>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d05d      	beq.n	8005cb6 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bfa:	e02e      	b.n	8005c5a <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfc:	4b34      	ldr	r3, [pc, #208]	; (8005cd0 <xTaskResumeAll+0x114>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3318      	adds	r3, #24
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe ff07 	bl	8004a1c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe ff02 	bl	8004a1c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	4b2c      	ldr	r3, [pc, #176]	; (8005cd4 <xTaskResumeAll+0x118>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <xTaskResumeAll+0x118>)
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <xTaskResumeAll+0x11c>)
 8005c38:	441a      	add	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f7fe fe8e 	bl	8004962 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <xTaskResumeAll+0x120>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d302      	bcc.n	8005c5a <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 8005c54:	4b22      	ldr	r3, [pc, #136]	; (8005ce0 <xTaskResumeAll+0x124>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <xTaskResumeAll+0x114>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1cc      	bne.n	8005bfc <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005c68:	f000 fbca 	bl	8006400 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <xTaskResumeAll+0x128>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d010      	beq.n	8005c9a <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005c78:	f000 f848 	bl	8005d0c <xTaskIncrementTick>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 8005c82:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <xTaskResumeAll+0x124>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f1      	bne.n	8005c78 <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 8005c94:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <xTaskResumeAll+0x128>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005c9a:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <xTaskResumeAll+0x124>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005ca6:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <xTaskResumeAll+0x12c>)
 8005ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005cb6:	f001 fcfb 	bl	80076b0 <vPortExitCritical>

    return xAlreadyYielded;
 8005cba:	68bb      	ldr	r3, [r7, #8]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20019750 	.word	0x20019750
 8005cc8:	0801398c 	.word	0x0801398c
 8005ccc:	20019728 	.word	0x20019728
 8005cd0:	200196e8 	.word	0x200196e8
 8005cd4:	20019730 	.word	0x20019730
 8005cd8:	20019654 	.word	0x20019654
 8005cdc:	20019650 	.word	0x20019650
 8005ce0:	2001973c 	.word	0x2001973c
 8005ce4:	20019738 	.word	0x20019738
 8005ce8:	e000ed04 	.word	0xe000ed04

08005cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005cf2:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <xTaskGetTickCount+0x1c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005cf8:	687b      	ldr	r3, [r7, #4]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	2001972c 	.word	0x2001972c

08005d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d16:	4b4b      	ldr	r3, [pc, #300]	; (8005e44 <xTaskIncrementTick+0x138>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 8088 	bne.w	8005e30 <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d20:	4b49      	ldr	r3, [pc, #292]	; (8005e48 <xTaskIncrementTick+0x13c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005d28:	4a47      	ldr	r2, [pc, #284]	; (8005e48 <xTaskIncrementTick+0x13c>)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d11a      	bne.n	8005d6a <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8005d34:	4b45      	ldr	r3, [pc, #276]	; (8005e4c <xTaskIncrementTick+0x140>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <xTaskIncrementTick+0x3c>
 8005d3e:	4944      	ldr	r1, [pc, #272]	; (8005e50 <xTaskIncrementTick+0x144>)
 8005d40:	f640 20bc 	movw	r0, #2748	; 0xabc
 8005d44:	f7fa fe6f 	bl	8000a26 <vAssertCalled>
 8005d48:	4b40      	ldr	r3, [pc, #256]	; (8005e4c <xTaskIncrementTick+0x140>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	4b41      	ldr	r3, [pc, #260]	; (8005e54 <xTaskIncrementTick+0x148>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3e      	ldr	r2, [pc, #248]	; (8005e4c <xTaskIncrementTick+0x140>)
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4a3f      	ldr	r2, [pc, #252]	; (8005e54 <xTaskIncrementTick+0x148>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <xTaskIncrementTick+0x14c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	4a3d      	ldr	r2, [pc, #244]	; (8005e58 <xTaskIncrementTick+0x14c>)
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	f000 fb4b 	bl	8006400 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005d6a:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <xTaskIncrementTick+0x150>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d348      	bcc.n	8005e06 <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d74:	4b35      	ldr	r3, [pc, #212]	; (8005e4c <xTaskIncrementTick+0x140>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d7e:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <xTaskIncrementTick+0x150>)
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295
 8005d84:	601a      	str	r2, [r3, #0]
                    break;
 8005d86:	e03e      	b.n	8005e06 <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d88:	4b30      	ldr	r3, [pc, #192]	; (8005e4c <xTaskIncrementTick+0x140>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d203      	bcs.n	8005da8 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005da0:	4a2e      	ldr	r2, [pc, #184]	; (8005e5c <xTaskIncrementTick+0x150>)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005da6:	e02e      	b.n	8005e06 <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe fe35 	bl	8004a1c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	3318      	adds	r3, #24
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fe2c 	bl	8004a1c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	2201      	movs	r2, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	4b24      	ldr	r3, [pc, #144]	; (8005e60 <xTaskIncrementTick+0x154>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	4a23      	ldr	r2, [pc, #140]	; (8005e60 <xTaskIncrementTick+0x154>)
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4a20      	ldr	r2, [pc, #128]	; (8005e64 <xTaskIncrementTick+0x158>)
 8005de4:	441a      	add	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7fe fdb8 	bl	8004962 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df6:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <xTaskIncrementTick+0x15c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d3b9      	bcc.n	8005d74 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8005e00:	2301      	movs	r3, #1
 8005e02:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e04:	e7b6      	b.n	8005d74 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e06:	4b18      	ldr	r3, [pc, #96]	; (8005e68 <xTaskIncrementTick+0x15c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0c:	4915      	ldr	r1, [pc, #84]	; (8005e64 <xTaskIncrementTick+0x158>)
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d901      	bls.n	8005e22 <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <xTaskIncrementTick+0x160>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d007      	beq.n	8005e3a <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	e004      	b.n	8005e3a <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <xTaskIncrementTick+0x164>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	4a0e      	ldr	r2, [pc, #56]	; (8005e70 <xTaskIncrementTick+0x164>)
 8005e38:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005e3a:	697b      	ldr	r3, [r7, #20]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20019750 	.word	0x20019750
 8005e48:	2001972c 	.word	0x2001972c
 8005e4c:	200196e0 	.word	0x200196e0
 8005e50:	0801398c 	.word	0x0801398c
 8005e54:	200196e4 	.word	0x200196e4
 8005e58:	20019740 	.word	0x20019740
 8005e5c:	20019748 	.word	0x20019748
 8005e60:	20019730 	.word	0x20019730
 8005e64:	20019654 	.word	0x20019654
 8005e68:	20019650 	.word	0x20019650
 8005e6c:	2001973c 	.word	0x2001973c
 8005e70:	20019738 	.word	0x20019738

08005e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e7a:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <vTaskSwitchContext+0x9c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <vTaskSwitchContext+0xa0>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005e88:	e03e      	b.n	8005f08 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8005e8a:	4b22      	ldr	r3, [pc, #136]	; (8005f14 <vTaskSwitchContext+0xa0>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e90:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <vTaskSwitchContext+0xa4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	fab3 f383 	clz	r3, r3
 8005e9c:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	f1c3 031f 	rsb	r3, r3, #31
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	491d      	ldr	r1, [pc, #116]	; (8005f1c <vTaskSwitchContext+0xa8>)
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d104      	bne.n	8005ec4 <vTaskSwitchContext+0x50>
 8005eba:	4919      	ldr	r1, [pc, #100]	; (8005f20 <vTaskSwitchContext+0xac>)
 8005ebc:	f640 30f7 	movw	r0, #3063	; 0xbf7
 8005ec0:	f7fa fdb1 	bl	8000a26 <vAssertCalled>
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <vTaskSwitchContext+0xa8>)
 8005ed0:	4413      	add	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d104      	bne.n	8005ef4 <vTaskSwitchContext+0x80>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <vTaskSwitchContext+0xb0>)
 8005efc:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <vTaskSwitchContext+0xb0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3350      	adds	r3, #80	; 0x50
 8005f04:	4a08      	ldr	r2, [pc, #32]	; (8005f28 <vTaskSwitchContext+0xb4>)
 8005f06:	6013      	str	r3, [r2, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20019750 	.word	0x20019750
 8005f14:	2001973c 	.word	0x2001973c
 8005f18:	20019730 	.word	0x20019730
 8005f1c:	20019654 	.word	0x20019654
 8005f20:	0801398c 	.word	0x0801398c
 8005f24:	20019650 	.word	0x20019650
 8005f28:	20000034 	.word	0x20000034

08005f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <vTaskPlaceOnEventList+0x1a>
 8005f3c:	4909      	ldr	r1, [pc, #36]	; (8005f64 <vTaskPlaceOnEventList+0x38>)
 8005f3e:	f640 4011 	movw	r0, #3089	; 0xc11
 8005f42:	f7fa fd70 	bl	8000a26 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <vTaskPlaceOnEventList+0x3c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3318      	adds	r3, #24
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fe fd2b 	bl	80049aa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f54:	2101      	movs	r1, #1
 8005f56:	6838      	ldr	r0, [r7, #0]
 8005f58:	f000 fd32 	bl	80069c0 <prvAddCurrentTaskToDelayedList>
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	0801398c 	.word	0x0801398c
 8005f68:	20019650 	.word	0x20019650

08005f6c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d104      	bne.n	8005f88 <vTaskPlaceOnUnorderedEventList+0x1c>
 8005f7e:	4911      	ldr	r1, [pc, #68]	; (8005fc4 <vTaskPlaceOnUnorderedEventList+0x58>)
 8005f80:	f640 4024 	movw	r0, #3108	; 0xc24
 8005f84:	f7fa fd4f 	bl	8000a26 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 8005f88:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <vTaskPlaceOnUnorderedEventList+0x5c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <vTaskPlaceOnUnorderedEventList+0x2e>
 8005f90:	490c      	ldr	r1, [pc, #48]	; (8005fc4 <vTaskPlaceOnUnorderedEventList+0x58>)
 8005f92:	f640 4028 	movw	r0, #3112	; 0xc28
 8005f96:	f7fa fd46 	bl	8000a26 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <vTaskPlaceOnUnorderedEventList+0x60>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005fa4:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <vTaskPlaceOnUnorderedEventList+0x60>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3318      	adds	r3, #24
 8005fac:	4619      	mov	r1, r3
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7fe fcd7 	bl	8004962 <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fd02 	bl	80069c0 <prvAddCurrentTaskToDelayedList>
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	0801398c 	.word	0x0801398c
 8005fc8:	20019750 	.word	0x20019750
 8005fcc:	20019650 	.word	0x20019650

08005fd0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <vTaskPlaceOnEventListRestricted+0x1c>
 8005fe2:	490d      	ldr	r1, [pc, #52]	; (8006018 <vTaskPlaceOnEventListRestricted+0x48>)
 8005fe4:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 8005fe8:	f7fa fd1d 	bl	8000a26 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fec:	4b0b      	ldr	r3, [pc, #44]	; (800601c <vTaskPlaceOnEventListRestricted+0x4c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3318      	adds	r3, #24
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7fe fcb4 	bl	8004962 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295
 8006004:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	68b8      	ldr	r0, [r7, #8]
 800600a:	f000 fcd9 	bl	80069c0 <prvAddCurrentTaskToDelayedList>
    }
 800600e:	bf00      	nop
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	0801398c 	.word	0x0801398c
 800601c:	20019650 	.word	0x20019650

08006020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <xTaskRemoveFromEventList+0x20>
 8006036:	4922      	ldr	r1, [pc, #136]	; (80060c0 <xTaskRemoveFromEventList+0xa0>)
 8006038:	f44f 6047 	mov.w	r0, #3184	; 0xc70
 800603c:	f7fa fcf3 	bl	8000a26 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	3318      	adds	r3, #24
 8006044:	4618      	mov	r0, r3
 8006046:	f7fe fce9 	bl	8004a1c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800604a:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <xTaskRemoveFromEventList+0xa4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d11c      	bne.n	800608c <xTaskRemoveFromEventList+0x6c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	3304      	adds	r3, #4
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fce0 	bl	8004a1c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	2201      	movs	r2, #1
 8006062:	409a      	lsls	r2, r3
 8006064:	4b18      	ldr	r3, [pc, #96]	; (80060c8 <xTaskRemoveFromEventList+0xa8>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4313      	orrs	r3, r2
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <xTaskRemoveFromEventList+0xa8>)
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4a14      	ldr	r2, [pc, #80]	; (80060cc <xTaskRemoveFromEventList+0xac>)
 800607c:	441a      	add	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f7fe fc6c 	bl	8004962 <vListInsertEnd>
 800608a:	e005      	b.n	8006098 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	3318      	adds	r3, #24
 8006090:	4619      	mov	r1, r3
 8006092:	480f      	ldr	r0, [pc, #60]	; (80060d0 <xTaskRemoveFromEventList+0xb0>)
 8006094:	f7fe fc65 	bl	8004962 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <xTaskRemoveFromEventList+0xb4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d905      	bls.n	80060b2 <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80060aa:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <xTaskRemoveFromEventList+0xb8>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e001      	b.n	80060b6 <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80060b6:	68fb      	ldr	r3, [r7, #12]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	0801398c 	.word	0x0801398c
 80060c4:	20019750 	.word	0x20019750
 80060c8:	20019730 	.word	0x20019730
 80060cc:	20019654 	.word	0x20019654
 80060d0:	200196e8 	.word	0x200196e8
 80060d4:	20019650 	.word	0x20019650
 80060d8:	2001973c 	.word	0x2001973c

080060dc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 80060e6:	4b23      	ldr	r3, [pc, #140]	; (8006174 <vTaskRemoveFromUnorderedEventList+0x98>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <vTaskRemoveFromUnorderedEventList+0x1c>
 80060ee:	4922      	ldr	r1, [pc, #136]	; (8006178 <vTaskRemoveFromUnorderedEventList+0x9c>)
 80060f0:	f640 40a8 	movw	r0, #3240	; 0xca8
 80060f4:	f7fa fc97 	bl	8000a26 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	60fb      	str	r3, [r7, #12]
    configASSERT( pxUnblockedTCB );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d104      	bne.n	8006118 <vTaskRemoveFromUnorderedEventList+0x3c>
 800610e:	491a      	ldr	r1, [pc, #104]	; (8006178 <vTaskRemoveFromUnorderedEventList+0x9c>)
 8006110:	f44f 604b 	mov.w	r0, #3248	; 0xcb0
 8006114:	f7fa fc87 	bl	8000a26 <vAssertCalled>
    ( void ) uxListRemove( pxEventListItem );
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fe fc7f 	bl	8004a1c <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3304      	adds	r3, #4
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe fc7a 	bl	8004a1c <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	2201      	movs	r2, #1
 800612e:	409a      	lsls	r2, r3
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <vTaskRemoveFromUnorderedEventList+0xa0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4313      	orrs	r3, r2
 8006136:	4a11      	ldr	r2, [pc, #68]	; (800617c <vTaskRemoveFromUnorderedEventList+0xa0>)
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4a0e      	ldr	r2, [pc, #56]	; (8006180 <vTaskRemoveFromUnorderedEventList+0xa4>)
 8006148:	441a      	add	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3304      	adds	r3, #4
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f7fe fc06 	bl	8004962 <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <vTaskRemoveFromUnorderedEventList+0xa8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	429a      	cmp	r2, r3
 8006162:	d902      	bls.n	800616a <vTaskRemoveFromUnorderedEventList+0x8e>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8006164:	4b08      	ldr	r3, [pc, #32]	; (8006188 <vTaskRemoveFromUnorderedEventList+0xac>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]
    }
}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20019750 	.word	0x20019750
 8006178:	0801398c 	.word	0x0801398c
 800617c:	20019730 	.word	0x20019730
 8006180:	20019654 	.word	0x20019654
 8006184:	20019650 	.word	0x20019650
 8006188:	2001973c 	.word	0x2001973c

0800618c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d104      	bne.n	80061a4 <vTaskSetTimeOutState+0x18>
 800619a:	490a      	ldr	r1, [pc, #40]	; (80061c4 <vTaskSetTimeOutState+0x38>)
 800619c:	f640 40d4 	movw	r0, #3284	; 0xcd4
 80061a0:	f7fa fc41 	bl	8000a26 <vAssertCalled>
    taskENTER_CRITICAL();
 80061a4:	f001 fa58 	bl	8007658 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061a8:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <vTaskSetTimeOutState+0x3c>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 80061b0:	4b06      	ldr	r3, [pc, #24]	; (80061cc <vTaskSetTimeOutState+0x40>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 80061b8:	f001 fa7a 	bl	80076b0 <vPortExitCritical>
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	0801398c 	.word	0x0801398c
 80061c8:	20019740 	.word	0x20019740
 80061cc:	2001972c 	.word	0x2001972c

080061d0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <vTaskInternalSetTimeOutState+0x24>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <vTaskInternalSetTimeOutState+0x28>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	605a      	str	r2, [r3, #4]
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	20019740 	.word	0x20019740
 80061f8:	2001972c 	.word	0x2001972c

080061fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <xTaskCheckForTimeOut+0x1a>
 800620c:	4926      	ldr	r1, [pc, #152]	; (80062a8 <xTaskCheckForTimeOut+0xac>)
 800620e:	f640 40eb 	movw	r0, #3307	; 0xceb
 8006212:	f7fa fc08 	bl	8000a26 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <xTaskCheckForTimeOut+0x2a>
 800621c:	4922      	ldr	r1, [pc, #136]	; (80062a8 <xTaskCheckForTimeOut+0xac>)
 800621e:	f640 40ec 	movw	r0, #3308	; 0xcec
 8006222:	f7fa fc00 	bl	8000a26 <vAssertCalled>

    taskENTER_CRITICAL();
 8006226:	f001 fa17 	bl	8007658 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <xTaskCheckForTimeOut+0xb0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d102      	bne.n	800624a <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e026      	b.n	8006298 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b18      	ldr	r3, [pc, #96]	; (80062b0 <xTaskCheckForTimeOut+0xb4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d00a      	beq.n	800626c <xTaskCheckForTimeOut+0x70>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	429a      	cmp	r2, r3
 800625e:	d305      	bcc.n	800626c <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	e015      	b.n	8006298 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	429a      	cmp	r2, r3
 8006274:	d20b      	bcs.n	800628e <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1ad2      	subs	r2, r2, r3
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff ffa4 	bl	80061d0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e004      	b.n	8006298 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006294:	2301      	movs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8006298:	f001 fa0a 	bl	80076b0 <vPortExitCritical>

    return xReturn;
 800629c:	697b      	ldr	r3, [r7, #20]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	0801398c 	.word	0x0801398c
 80062ac:	2001972c 	.word	0x2001972c
 80062b0:	20019740 	.word	0x20019740

080062b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <vTaskMissedYield+0x14>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	2001973c 	.word	0x2001973c

080062cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80062d4:	f000 f852 	bl	800637c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062d8:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <prvIdleTask+0x28>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d9f9      	bls.n	80062d4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <prvIdleTask+0x2c>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80062f0:	e7f0      	b.n	80062d4 <prvIdleTask+0x8>
 80062f2:	bf00      	nop
 80062f4:	20019654 	.word	0x20019654
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006302:	2300      	movs	r3, #0
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	e00c      	b.n	8006322 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4a12      	ldr	r2, [pc, #72]	; (800635c <prvInitialiseTaskLists+0x60>)
 8006314:	4413      	add	r3, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe faf6 	bl	8004908 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3301      	adds	r3, #1
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d9ef      	bls.n	8006308 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006328:	480d      	ldr	r0, [pc, #52]	; (8006360 <prvInitialiseTaskLists+0x64>)
 800632a:	f7fe faed 	bl	8004908 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800632e:	480d      	ldr	r0, [pc, #52]	; (8006364 <prvInitialiseTaskLists+0x68>)
 8006330:	f7fe faea 	bl	8004908 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006334:	480c      	ldr	r0, [pc, #48]	; (8006368 <prvInitialiseTaskLists+0x6c>)
 8006336:	f7fe fae7 	bl	8004908 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800633a:	480c      	ldr	r0, [pc, #48]	; (800636c <prvInitialiseTaskLists+0x70>)
 800633c:	f7fe fae4 	bl	8004908 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006340:	480b      	ldr	r0, [pc, #44]	; (8006370 <prvInitialiseTaskLists+0x74>)
 8006342:	f7fe fae1 	bl	8004908 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006346:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <prvInitialiseTaskLists+0x78>)
 8006348:	4a05      	ldr	r2, [pc, #20]	; (8006360 <prvInitialiseTaskLists+0x64>)
 800634a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <prvInitialiseTaskLists+0x7c>)
 800634e:	4a05      	ldr	r2, [pc, #20]	; (8006364 <prvInitialiseTaskLists+0x68>)
 8006350:	601a      	str	r2, [r3, #0]
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20019654 	.word	0x20019654
 8006360:	200196b8 	.word	0x200196b8
 8006364:	200196cc 	.word	0x200196cc
 8006368:	200196e8 	.word	0x200196e8
 800636c:	200196fc 	.word	0x200196fc
 8006370:	20019714 	.word	0x20019714
 8006374:	200196e0 	.word	0x200196e0
 8006378:	200196e4 	.word	0x200196e4

0800637c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006382:	e019      	b.n	80063b8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006384:	f001 f968 	bl	8007658 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <prvCheckTasksWaitingTermination+0x4c>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	4618      	mov	r0, r3
 8006396:	f7fe fb41 	bl	8004a1c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <prvCheckTasksWaitingTermination+0x50>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3b01      	subs	r3, #1
 80063a0:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <prvCheckTasksWaitingTermination+0x50>)
 80063a2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <prvCheckTasksWaitingTermination+0x54>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <prvCheckTasksWaitingTermination+0x54>)
 80063ac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80063ae:	f001 f97f 	bl	80076b0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f80e 	bl	80063d4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <prvCheckTasksWaitingTermination+0x54>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e1      	bne.n	8006384 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80063c0:	bf00      	nop
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	200196fc 	.word	0x200196fc
 80063cc:	20019728 	.word	0x20019728
 80063d0:	20019710 	.word	0x20019710

080063d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
         * to the task to free any memory allocated at the application level.
         * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
         * for additional information. */
        #if ( configUSE_NEWLIB_REENTRANT == 1 )
            {
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3350      	adds	r3, #80	; 0x50
 80063e0:	4618      	mov	r0, r3
 80063e2:	f00b fed7 	bl	8012194 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 ff18 	bl	8007220 <vPortFree>
                vPortFree( pxTCB );
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 ff15 	bl	8007220 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <prvResetNextTaskUnblockTime+0x30>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d104      	bne.n	8006418 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <prvResetNextTaskUnblockTime+0x34>)
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006416:	e005      	b.n	8006424 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006418:	4b05      	ldr	r3, [pc, #20]	; (8006430 <prvResetNextTaskUnblockTime+0x30>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a04      	ldr	r2, [pc, #16]	; (8006434 <prvResetNextTaskUnblockTime+0x34>)
 8006422:	6013      	str	r3, [r2, #0]
}
 8006424:	bf00      	nop
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	200196e0 	.word	0x200196e0
 8006434:	20019748 	.word	0x20019748

08006438 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800643e:	4b05      	ldr	r3, [pc, #20]	; (8006454 <xTaskGetCurrentTaskHandle+0x1c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	607b      	str	r3, [r7, #4]

        return xReturn;
 8006444:	687b      	ldr	r3, [r7, #4]
    }
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20019650 	.word	0x20019650

08006458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800645e:	4b0b      	ldr	r3, [pc, #44]	; (800648c <xTaskGetSchedulerState+0x34>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d102      	bne.n	800646c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006466:	2301      	movs	r3, #1
 8006468:	607b      	str	r3, [r7, #4]
 800646a:	e008      	b.n	800647e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646c:	4b08      	ldr	r3, [pc, #32]	; (8006490 <xTaskGetSchedulerState+0x38>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006474:	2302      	movs	r3, #2
 8006476:	607b      	str	r3, [r7, #4]
 8006478:	e001      	b.n	800647e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800647e:	687b      	ldr	r3, [r7, #4]
    }
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	20019734 	.word	0x20019734
 8006490:	20019750 	.word	0x20019750

08006494 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d05e      	beq.n	8006568 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4b31      	ldr	r3, [pc, #196]	; (8006574 <xTaskPriorityInherit+0xe0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d24e      	bcs.n	8006556 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	db06      	blt.n	80064ce <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064c0:	4b2c      	ldr	r3, [pc, #176]	; (8006574 <xTaskPriorityInherit+0xe0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	f1c3 0205 	rsb	r2, r3, #5
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6959      	ldr	r1, [r3, #20]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4a26      	ldr	r2, [pc, #152]	; (8006578 <xTaskPriorityInherit+0xe4>)
 80064e0:	4413      	add	r3, r2
 80064e2:	4299      	cmp	r1, r3
 80064e4:	d12f      	bne.n	8006546 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fa96 	bl	8004a1c <uxListRemove>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	2201      	movs	r2, #1
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	43da      	mvns	r2, r3
 8006502:	4b1e      	ldr	r3, [pc, #120]	; (800657c <xTaskPriorityInherit+0xe8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4013      	ands	r3, r2
 8006508:	4a1c      	ldr	r2, [pc, #112]	; (800657c <xTaskPriorityInherit+0xe8>)
 800650a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800650c:	4b19      	ldr	r3, [pc, #100]	; (8006574 <xTaskPriorityInherit+0xe0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	2201      	movs	r2, #1
 800651c:	409a      	lsls	r2, r3
 800651e:	4b17      	ldr	r3, [pc, #92]	; (800657c <xTaskPriorityInherit+0xe8>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4313      	orrs	r3, r2
 8006524:	4a15      	ldr	r2, [pc, #84]	; (800657c <xTaskPriorityInherit+0xe8>)
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4a10      	ldr	r2, [pc, #64]	; (8006578 <xTaskPriorityInherit+0xe4>)
 8006536:	441a      	add	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	3304      	adds	r3, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fe fa0f 	bl	8004962 <vListInsertEnd>
 8006544:	e004      	b.n	8006550 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <xTaskPriorityInherit+0xe0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	e008      	b.n	8006568 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <xTaskPriorityInherit+0xe0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	429a      	cmp	r2, r3
 8006562:	d201      	bcs.n	8006568 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006568:	68fb      	ldr	r3, [r7, #12]
    }
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20019650 	.word	0x20019650
 8006578:	20019654 	.word	0x20019654
 800657c:	20019730 	.word	0x20019730

08006580 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d057      	beq.n	8006646 <xTaskPriorityDisinherit+0xc6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006596:	4b2e      	ldr	r3, [pc, #184]	; (8006650 <xTaskPriorityDisinherit+0xd0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	429a      	cmp	r2, r3
 800659e:	d004      	beq.n	80065aa <xTaskPriorityDisinherit+0x2a>
 80065a0:	492c      	ldr	r1, [pc, #176]	; (8006654 <xTaskPriorityDisinherit+0xd4>)
 80065a2:	f241 003d 	movw	r0, #4157	; 0x103d
 80065a6:	f7fa fa3e 	bl	8000a26 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <xTaskPriorityDisinherit+0x3c>
 80065b2:	4928      	ldr	r1, [pc, #160]	; (8006654 <xTaskPriorityDisinherit+0xd4>)
 80065b4:	f241 003e 	movw	r0, #4158	; 0x103e
 80065b8:	f7fa fa35 	bl	8000a26 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c0:	1e5a      	subs	r2, r3, #1
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d039      	beq.n	8006646 <xTaskPriorityDisinherit+0xc6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d135      	bne.n	8006646 <xTaskPriorityDisinherit+0xc6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	3304      	adds	r3, #4
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe fa1c 	bl	8004a1c <uxListRemove>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	2201      	movs	r2, #1
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	43da      	mvns	r2, r3
 80065f6:	4b18      	ldr	r3, [pc, #96]	; (8006658 <xTaskPriorityDisinherit+0xd8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4013      	ands	r3, r2
 80065fc:	4a16      	ldr	r2, [pc, #88]	; (8006658 <xTaskPriorityDisinherit+0xd8>)
 80065fe:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	f1c3 0205 	rsb	r2, r3, #5
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	2201      	movs	r2, #1
 800661a:	409a      	lsls	r2, r3
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <xTaskPriorityDisinherit+0xd8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	4a0d      	ldr	r2, [pc, #52]	; (8006658 <xTaskPriorityDisinherit+0xd8>)
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4a0a      	ldr	r2, [pc, #40]	; (800665c <xTaskPriorityDisinherit+0xdc>)
 8006634:	441a      	add	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f7fe f990 	bl	8004962 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006642:	2301      	movs	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006646:	68fb      	ldr	r3, [r7, #12]
    }
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20019650 	.word	0x20019650
 8006654:	0801398c 	.word	0x0801398c
 8006658:	20019730 	.word	0x20019730
 800665c:	20019654 	.word	0x20019654

08006660 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800666e:	2301      	movs	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d06b      	beq.n	8006750 <vTaskPriorityDisinheritAfterTimeout+0xf0>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <vTaskPriorityDisinheritAfterTimeout+0x2a>
 8006680:	4935      	ldr	r1, [pc, #212]	; (8006758 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006682:	f241 008d 	movw	r0, #4237	; 0x108d
 8006686:	f7fa f9ce 	bl	8000a26 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d902      	bls.n	800669a <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	e002      	b.n	80066a0 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d052      	beq.n	8006750 <vTaskPriorityDisinheritAfterTimeout+0xf0>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d14d      	bne.n	8006750 <vTaskPriorityDisinheritAfterTimeout+0xf0>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80066b4:	4b29      	ldr	r3, [pc, #164]	; (800675c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d104      	bne.n	80066c8 <vTaskPriorityDisinheritAfterTimeout+0x68>
 80066be:	4926      	ldr	r1, [pc, #152]	; (8006758 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80066c0:	f241 00a8 	movw	r0, #4264	; 0x10a8
 80066c4:	f7fa f9af 	bl	8000a26 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	db04      	blt.n	80066e6 <vTaskPriorityDisinheritAfterTimeout+0x86>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f1c3 0205 	rsb	r2, r3, #5
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6959      	ldr	r1, [r3, #20]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4a1a      	ldr	r2, [pc, #104]	; (8006760 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066f6:	4413      	add	r3, r2
 80066f8:	4299      	cmp	r1, r3
 80066fa:	d129      	bne.n	8006750 <vTaskPriorityDisinheritAfterTimeout+0xf0>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe f98b 	bl	8004a1c <uxListRemove>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <vTaskPriorityDisinheritAfterTimeout+0xc2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	2201      	movs	r2, #1
 8006712:	fa02 f303 	lsl.w	r3, r2, r3
 8006716:	43da      	mvns	r2, r3
 8006718:	4b12      	ldr	r3, [pc, #72]	; (8006764 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4013      	ands	r3, r2
 800671e:	4a11      	ldr	r2, [pc, #68]	; (8006764 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006720:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	2201      	movs	r2, #1
 8006728:	409a      	lsls	r2, r3
 800672a:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4313      	orrs	r3, r2
 8006730:	4a0c      	ldr	r2, [pc, #48]	; (8006764 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4a07      	ldr	r2, [pc, #28]	; (8006760 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006742:	441a      	add	r2, r3
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3304      	adds	r3, #4
 8006748:	4619      	mov	r1, r3
 800674a:	4610      	mov	r0, r2
 800674c:	f7fe f909 	bl	8004962 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006750:	bf00      	nop
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	0801398c 	.word	0x0801398c
 800675c:	20019650 	.word	0x20019650
 8006760:	20019654 	.word	0x20019654
 8006764:	20019730 	.word	0x20019730

08006768 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800676e:	4b09      	ldr	r3, [pc, #36]	; (8006794 <uxTaskResetEventItemValue+0x2c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <uxTaskResetEventItemValue+0x2c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677c:	4b05      	ldr	r3, [pc, #20]	; (8006794 <uxTaskResetEventItemValue+0x2c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f1c2 0205 	rsb	r2, r2, #5
 8006784:	619a      	str	r2, [r3, #24]

    return uxReturn;
 8006786:	687b      	ldr	r3, [r7, #4]
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	20019650 	.word	0x20019650

08006798 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <pvTaskIncrementMutexHeldCount+0x24>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d004      	beq.n	80067ae <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <pvTaskIncrementMutexHeldCount+0x24>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067aa:	3201      	adds	r2, #1
 80067ac:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80067ae:	4b03      	ldr	r3, [pc, #12]	; (80067bc <pvTaskIncrementMutexHeldCount+0x24>)
 80067b0:	681b      	ldr	r3, [r3, #0]
    }
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	20019650 	.word	0x20019650

080067c0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <ulTaskGenericNotifyTake+0x1c>
 80067d2:	492a      	ldr	r1, [pc, #168]	; (800687c <ulTaskGenericNotifyTake+0xbc>)
 80067d4:	f241 2052 	movw	r0, #4690	; 0x1252
 80067d8:	f7fa f925 	bl	8000a26 <vAssertCalled>

        taskENTER_CRITICAL();
 80067dc:	f000 ff3c 	bl	8007658 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80067e0:	4b27      	ldr	r3, [pc, #156]	; (8006880 <ulTaskGenericNotifyTake+0xc0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	322c      	adds	r2, #44	; 0x2c
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d115      	bne.n	800681c <ulTaskGenericNotifyTake+0x5c>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80067f0:	4b23      	ldr	r3, [pc, #140]	; (8006880 <ulTaskGenericNotifyTake+0xc0>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	33b4      	adds	r3, #180	; 0xb4
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <ulTaskGenericNotifyTake+0x5c>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006804:	2101      	movs	r1, #1
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f8da 	bl	80069c0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800680c:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <ulTaskGenericNotifyTake+0xc4>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800681c:	f000 ff48 	bl	80076b0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006820:	f000 ff1a 	bl	8007658 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006824:	4b16      	ldr	r3, [pc, #88]	; (8006880 <ulTaskGenericNotifyTake+0xc0>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	322c      	adds	r2, #44	; 0x2c
 800682c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006830:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d012      	beq.n	800685e <ulTaskGenericNotifyTake+0x9e>
            {
                if( xClearCountOnExit != pdFALSE )
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <ulTaskGenericNotifyTake+0x8e>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800683e:	4b10      	ldr	r3, [pc, #64]	; (8006880 <ulTaskGenericNotifyTake+0xc0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	322c      	adds	r2, #44	; 0x2c
 8006846:	2100      	movs	r1, #0
 8006848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800684c:	e007      	b.n	800685e <ulTaskGenericNotifyTake+0x9e>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <ulTaskGenericNotifyTake+0xc0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	1e51      	subs	r1, r2, #1
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	322c      	adds	r2, #44	; 0x2c
 800685a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800685e:	4b08      	ldr	r3, [pc, #32]	; (8006880 <ulTaskGenericNotifyTake+0xc0>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	33b4      	adds	r3, #180	; 0xb4
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800686c:	f000 ff20 	bl	80076b0 <vPortExitCritical>

        return ulReturn;
 8006870:	697b      	ldr	r3, [r7, #20]
    }
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	0801398c 	.word	0x0801398c
 8006880:	20019650 	.word	0x20019650
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <vTaskGenericNotifyGiveFromISR+0x1c>
 800689a:	4942      	ldr	r1, [pc, #264]	; (80069a4 <vTaskGenericNotifyGiveFromISR+0x11c>)
 800689c:	f241 30f8 	movw	r0, #5112	; 0x13f8
 80068a0:	f7fa f8c1 	bl	8000a26 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d004      	beq.n	80068b4 <vTaskGenericNotifyGiveFromISR+0x2c>
 80068aa:	493e      	ldr	r1, [pc, #248]	; (80069a4 <vTaskGenericNotifyGiveFromISR+0x11c>)
 80068ac:	f241 30f9 	movw	r0, #5113	; 0x13f9
 80068b0:	f7fa f8b9 	bl	8000a26 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068b4:	f000 ffaa 	bl	800780c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 80068bc:	f3ef 8211 	mrs	r2, BASEPRI
 80068c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80068c4:	b672      	cpsid	i
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	b662      	cpsie	i
 80068d4:	61ba      	str	r2, [r7, #24]
 80068d6:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 80068d8:	69bb      	ldr	r3, [r7, #24]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068da:	623b      	str	r3, [r7, #32]
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80068dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	33b4      	adds	r3, #180	; 0xb4
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	77fb      	strb	r3, [r7, #31]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80068e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4413      	add	r3, r2
 80068ee:	33b4      	adds	r3, #180	; 0xb4
 80068f0:	2202      	movs	r2, #2
 80068f2:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	322c      	adds	r2, #44	; 0x2c
 80068fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fe:	1c59      	adds	r1, r3, #1
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	322c      	adds	r2, #44	; 0x2c
 8006906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800690a:	7ffb      	ldrb	r3, [r7, #31]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d13f      	bne.n	8006990 <vTaskGenericNotifyGiveFromISR+0x108>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <vTaskGenericNotifyGiveFromISR+0x9a>
 8006918:	4922      	ldr	r1, [pc, #136]	; (80069a4 <vTaskGenericNotifyGiveFromISR+0x11c>)
 800691a:	f241 401f 	movw	r0, #5151	; 0x141f
 800691e:	f7fa f882 	bl	8000a26 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006922:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <vTaskGenericNotifyGiveFromISR+0x120>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11c      	bne.n	8006964 <vTaskGenericNotifyGiveFromISR+0xdc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	3304      	adds	r3, #4
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe f874 	bl	8004a1c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	2201      	movs	r2, #1
 800693a:	409a      	lsls	r2, r3
 800693c:	4b1b      	ldr	r3, [pc, #108]	; (80069ac <vTaskGenericNotifyGiveFromISR+0x124>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4313      	orrs	r3, r2
 8006942:	4a1a      	ldr	r2, [pc, #104]	; (80069ac <vTaskGenericNotifyGiveFromISR+0x124>)
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4a17      	ldr	r2, [pc, #92]	; (80069b0 <vTaskGenericNotifyGiveFromISR+0x128>)
 8006954:	441a      	add	r2, r3
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	3304      	adds	r3, #4
 800695a:	4619      	mov	r1, r3
 800695c:	4610      	mov	r0, r2
 800695e:	f7fe f800 	bl	8004962 <vListInsertEnd>
 8006962:	e005      	b.n	8006970 <vTaskGenericNotifyGiveFromISR+0xe8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	3318      	adds	r3, #24
 8006968:	4619      	mov	r1, r3
 800696a:	4812      	ldr	r0, [pc, #72]	; (80069b4 <vTaskGenericNotifyGiveFromISR+0x12c>)
 800696c:	f7fd fff9 	bl	8004962 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006974:	4b10      	ldr	r3, [pc, #64]	; (80069b8 <vTaskGenericNotifyGiveFromISR+0x130>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	429a      	cmp	r2, r3
 800697c:	d908      	bls.n	8006990 <vTaskGenericNotifyGiveFromISR+0x108>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <vTaskGenericNotifyGiveFromISR+0x102>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800698a:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <vTaskGenericNotifyGiveFromISR+0x134>)
 800698c:	2201      	movs	r2, #1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f383 8811 	msr	BASEPRI, r3
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 800699a:	bf00      	nop
 800699c:	3728      	adds	r7, #40	; 0x28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	0801398c 	.word	0x0801398c
 80069a8:	20019750 	.word	0x20019750
 80069ac:	20019730 	.word	0x20019730
 80069b0:	20019654 	.word	0x20019654
 80069b4:	200196e8 	.word	0x200196e8
 80069b8:	20019650 	.word	0x20019650
 80069bc:	2001973c 	.word	0x2001973c

080069c0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80069ca:	4b29      	ldr	r3, [pc, #164]	; (8006a70 <prvAddCurrentTaskToDelayedList+0xb0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d0:	4b28      	ldr	r3, [pc, #160]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3304      	adds	r3, #4
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe f820 	bl	8004a1c <uxListRemove>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80069e2:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	2201      	movs	r2, #1
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	43da      	mvns	r2, r3
 80069f0:	4b21      	ldr	r3, [pc, #132]	; (8006a78 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4013      	ands	r3, r2
 80069f6:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069f8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a00:	d10a      	bne.n	8006a18 <prvAddCurrentTaskToDelayedList+0x58>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4619      	mov	r1, r3
 8006a10:	481a      	ldr	r0, [pc, #104]	; (8006a7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a12:	f7fd ffa6 	bl	8004962 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006a16:	e026      	b.n	8006a66 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a20:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d209      	bcs.n	8006a44 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a30:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f7fd ffb4 	bl	80049aa <vListInsert>
}
 8006a42:	e010      	b.n	8006a66 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7fd ffaa 	bl	80049aa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006a56:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d202      	bcs.n	8006a66 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006a60:	4a09      	ldr	r2, [pc, #36]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6013      	str	r3, [r2, #0]
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	2001972c 	.word	0x2001972c
 8006a74:	20019650 	.word	0x20019650
 8006a78:	20019730 	.word	0x20019730
 8006a7c:	20019714 	.word	0x20019714
 8006a80:	200196e4 	.word	0x200196e4
 8006a84:	200196e0 	.word	0x200196e0
 8006a88:	20019748 	.word	0x20019748

08006a8c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006a96:	f000 fad3 	bl	8007040 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006a9a:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <xTimerCreateTimerTask+0x48>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <xTimerCreateTimerTask+0x4c>)
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006ab0:	490a      	ldr	r1, [pc, #40]	; (8006adc <xTimerCreateTimerTask+0x50>)
 8006ab2:	480b      	ldr	r0, [pc, #44]	; (8006ae0 <xTimerCreateTimerTask+0x54>)
 8006ab4:	f7fe fe94 	bl	80057e0 <xTaskCreate>
 8006ab8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <xTimerCreateTimerTask+0x3e>
 8006ac0:	4908      	ldr	r1, [pc, #32]	; (8006ae4 <xTimerCreateTimerTask+0x58>)
 8006ac2:	f240 100d 	movw	r0, #269	; 0x10d
 8006ac6:	f7f9 ffae 	bl	8000a26 <vAssertCalled>
        return xReturn;
 8006aca:	687b      	ldr	r3, [r7, #4]
    }
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20019784 	.word	0x20019784
 8006ad8:	20019788 	.word	0x20019788
 8006adc:	080139c8 	.word	0x080139c8
 8006ae0:	08006c11 	.word	0x08006c11
 8006ae4:	080139d0 	.word	0x080139d0

08006ae8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <xTimerGenericCommand+0x22>
 8006b00:	491c      	ldr	r1, [pc, #112]	; (8006b74 <xTimerGenericCommand+0x8c>)
 8006b02:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8006b06:	f7f9 ff8e 	bl	8000a26 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <xTimerGenericCommand+0x90>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d02a      	beq.n	8006b68 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b05      	cmp	r3, #5
 8006b22:	dc18      	bgt.n	8006b56 <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b24:	f7ff fc98 	bl	8006458 <xTaskGetSchedulerState>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d109      	bne.n	8006b42 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b2e:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <xTimerGenericCommand+0x90>)
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	f107 0114 	add.w	r1, r7, #20
 8006b36:	2300      	movs	r3, #0
 8006b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3a:	f7fe f893 	bl	8004c64 <xQueueGenericSend>
 8006b3e:	6278      	str	r0, [r7, #36]	; 0x24
 8006b40:	e012      	b.n	8006b68 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <xTimerGenericCommand+0x90>)
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	f107 0114 	add.w	r1, r7, #20
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f7fe f889 	bl	8004c64 <xQueueGenericSend>
 8006b52:	6278      	str	r0, [r7, #36]	; 0x24
 8006b54:	e008      	b.n	8006b68 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <xTimerGenericCommand+0x90>)
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	f107 0114 	add.w	r1, r7, #20
 8006b5e:	2300      	movs	r3, #0
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	f7fe f983 	bl	8004e6c <xQueueGenericSendFromISR>
 8006b66:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3728      	adds	r7, #40	; 0x28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	080139d0 	.word	0x080139d0
 8006b78:	20019784 	.word	0x20019784

08006b7c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b86:	4b20      	ldr	r3, [pc, #128]	; (8006c08 <prvProcessExpiredTimer+0x8c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fd ff41 	bl	8004a1c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01d      	beq.n	8006be4 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	18d1      	adds	r1, r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f8cf 	bl	8006d58 <prvInsertTimerInActiveList>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01a      	beq.n	8006bf6 <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	2100      	movs	r1, #0
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f7ff ff8c 	bl	8006ae8 <xTimerGenericCommand>
 8006bd0:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10e      	bne.n	8006bf6 <prvProcessExpiredTimer+0x7a>
 8006bd8:	490c      	ldr	r1, [pc, #48]	; (8006c0c <prvProcessExpiredTimer+0x90>)
 8006bda:	f44f 7005 	mov.w	r0, #532	; 0x214
 8006bde:	f7f9 ff22 	bl	8000a26 <vAssertCalled>
 8006be2:	e008      	b.n	8006bf6 <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	4798      	blx	r3
    }
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	2001977c 	.word	0x2001977c
 8006c0c:	080139d0 	.word	0x080139d0

08006c10 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c18:	f107 0308 	add.w	r3, r7, #8
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 f857 	bl	8006cd0 <prvGetNextExpireTime>
 8006c22:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4619      	mov	r1, r3
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f803 	bl	8006c34 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006c2e:	f000 f8d5 	bl	8006ddc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c32:	e7f1      	b.n	8006c18 <prvTimerTask+0x8>

08006c34 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006c3e:	f7fe ffaf 	bl	8005ba0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c42:	f107 0308 	add.w	r3, r7, #8
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f866 	bl	8006d18 <prvSampleTimeNow>
 8006c4c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d130      	bne.n	8006cb6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <prvProcessTimerOrBlockTask+0x3c>
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d806      	bhi.n	8006c70 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006c62:	f7fe ffab 	bl	8005bbc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff ff87 	bl	8006b7c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006c6e:	e024      	b.n	8006cba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c76:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <prvProcessTimerOrBlockTask+0x90>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <prvProcessTimerOrBlockTask+0x50>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <prvProcessTimerOrBlockTask+0x52>
 8006c84:	2300      	movs	r3, #0
 8006c86:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c88:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <prvProcessTimerOrBlockTask+0x94>)
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	f7fe fd17 	bl	80056c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006c9a:	f7fe ff8f 	bl	8005bbc <xTaskResumeAll>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006ca4:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <prvProcessTimerOrBlockTask+0x98>)
 8006ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	f3bf 8f6f 	isb	sy
    }
 8006cb4:	e001      	b.n	8006cba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006cb6:	f7fe ff81 	bl	8005bbc <xTaskResumeAll>
    }
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20019780 	.word	0x20019780
 8006cc8:	20019784 	.word	0x20019784
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <prvGetNextExpireTime+0x44>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <prvGetNextExpireTime+0x16>
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	e000      	b.n	8006ce8 <prvGetNextExpireTime+0x18>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d105      	bne.n	8006d00 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <prvGetNextExpireTime+0x44>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e001      	b.n	8006d04 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006d04:	68fb      	ldr	r3, [r7, #12]
    }
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	2001977c 	.word	0x2001977c

08006d18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006d20:	f7fe ffe4 	bl	8005cec <xTaskGetTickCount>
 8006d24:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006d26:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <prvSampleTimeNow+0x3c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d205      	bcs.n	8006d3c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006d30:	f000 f926 	bl	8006f80 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e002      	b.n	8006d42 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006d42:	4a04      	ldr	r2, [pc, #16]	; (8006d54 <prvSampleTimeNow+0x3c>)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006d48:	68fb      	ldr	r3, [r7, #12]
    }
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	2001978c 	.word	0x2001978c

08006d58 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d812      	bhi.n	8006da4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	1ad2      	subs	r2, r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d302      	bcc.n	8006d92 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
 8006d90:	e01b      	b.n	8006dca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d92:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <prvInsertTimerInActiveList+0x7c>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f7fd fe04 	bl	80049aa <vListInsert>
 8006da2:	e012      	b.n	8006dca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d206      	bcs.n	8006dba <prvInsertTimerInActiveList+0x62>
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d302      	bcc.n	8006dba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006db4:	2301      	movs	r3, #1
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e007      	b.n	8006dca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dba:	4b07      	ldr	r3, [pc, #28]	; (8006dd8 <prvInsertTimerInActiveList+0x80>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f7fd fdf0 	bl	80049aa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006dca:	697b      	ldr	r3, [r7, #20]
    }
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20019780 	.word	0x20019780
 8006dd8:	2001977c 	.word	0x2001977c

08006ddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08c      	sub	sp, #48	; 0x30
 8006de0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006de2:	e0b9      	b.n	8006f58 <prvProcessReceivedCommands+0x17c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da13      	bge.n	8006e12 <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006dea:	f107 0308 	add.w	r3, r7, #8
 8006dee:	3304      	adds	r3, #4
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <prvProcessReceivedCommands+0x26>
 8006df8:	495f      	ldr	r1, [pc, #380]	; (8006f78 <prvProcessReceivedCommands+0x19c>)
 8006dfa:	f240 20fa 	movw	r0, #762	; 0x2fa
 8006dfe:	f7f9 fe12 	bl	8000a26 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e08:	6850      	ldr	r0, [r2, #4]
 8006e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0c:	6892      	ldr	r2, [r2, #8]
 8006e0e:	4611      	mov	r1, r2
 8006e10:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f2c0 809e 	blt.w	8006f56 <prvProcessReceivedCommands+0x17a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d004      	beq.n	8006e30 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fd fdf6 	bl	8004a1c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e30:	1d3b      	adds	r3, r7, #4
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff ff70 	bl	8006d18 <prvSampleTimeNow>
 8006e38:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b09      	cmp	r3, #9
 8006e3e:	f200 808b 	bhi.w	8006f58 <prvProcessReceivedCommands+0x17c>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <prvProcessReceivedCommands+0x6c>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e71 	.word	0x08006e71
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e71 	.word	0x08006e71
 8006e54:	08006edb 	.word	0x08006edb
 8006e58:	08006eef 	.word	0x08006eef
 8006e5c:	08006f2d 	.word	0x08006f2d
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e71 	.word	0x08006e71
 8006e68:	08006edb 	.word	0x08006edb
 8006e6c:	08006eef 	.word	0x08006eef
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	18d1      	adds	r1, r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	6a38      	ldr	r0, [r7, #32]
 8006e90:	f7ff ff62 	bl	8006d58 <prvInsertTimerInActiveList>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d05e      	beq.n	8006f58 <prvProcessReceivedCommands+0x17c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	6a38      	ldr	r0, [r7, #32]
 8006ea0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d053      	beq.n	8006f58 <prvProcessReceivedCommands+0x17c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	441a      	add	r2, r3
 8006eb8:	2300      	movs	r3, #0
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6a38      	ldr	r0, [r7, #32]
 8006ec2:	f7ff fe11 	bl	8006ae8 <xTimerGenericCommand>
 8006ec6:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d144      	bne.n	8006f58 <prvProcessReceivedCommands+0x17c>
 8006ece:	492a      	ldr	r1, [pc, #168]	; (8006f78 <prvProcessReceivedCommands+0x19c>)
 8006ed0:	f240 3036 	movw	r0, #822	; 0x336
 8006ed4:	f7f9 fda7 	bl	8000a26 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006ed8:	e03e      	b.n	8006f58 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006eec:	e034      	b.n	8006f58 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ef4:	f043 0301 	orr.w	r3, r3, #1
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <prvProcessReceivedCommands+0x13c>
 8006f0e:	491a      	ldr	r1, [pc, #104]	; (8006f78 <prvProcessReceivedCommands+0x19c>)
 8006f10:	f240 304f 	movw	r0, #847	; 0x34f
 8006f14:	f7f9 fd87 	bl	8000a26 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	18d1      	adds	r1, r2, r3
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	6a38      	ldr	r0, [r7, #32]
 8006f26:	f7ff ff17 	bl	8006d58 <prvInsertTimerInActiveList>
                        break;
 8006f2a:	e015      	b.n	8006f58 <prvProcessReceivedCommands+0x17c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d103      	bne.n	8006f42 <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 8006f3a:	6a38      	ldr	r0, [r7, #32]
 8006f3c:	f000 f970 	bl	8007220 <vPortFree>
 8006f40:	e00a      	b.n	8006f58 <prvProcessReceivedCommands+0x17c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f48:	f023 0301 	bic.w	r3, r3, #1
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006f54:	e000      	b.n	8006f58 <prvProcessReceivedCommands+0x17c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006f56:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f58:	4b08      	ldr	r3, [pc, #32]	; (8006f7c <prvProcessReceivedCommands+0x1a0>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f107 0108 	add.w	r1, r7, #8
 8006f60:	2200      	movs	r2, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe f82e 	bl	8004fc4 <xQueueReceive>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f47f af3a 	bne.w	8006de4 <prvProcessReceivedCommands+0x8>
        }
    }
 8006f70:	bf00      	nop
 8006f72:	3728      	adds	r7, #40	; 0x28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	080139d0 	.word	0x080139d0
 8006f7c:	20019784 	.word	0x20019784

08006f80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f86:	e042      	b.n	800700e <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f88:	4b2a      	ldr	r3, [pc, #168]	; (8007034 <prvSwitchTimerLists+0xb4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f92:	4b28      	ldr	r3, [pc, #160]	; (8007034 <prvSwitchTimerLists+0xb4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fd fd3b 	bl	8004a1c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d028      	beq.n	800700e <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d90e      	bls.n	8006fec <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fda:	4b16      	ldr	r3, [pc, #88]	; (8007034 <prvSwitchTimerLists+0xb4>)
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	f7fd fce0 	bl	80049aa <vListInsert>
 8006fea:	e010      	b.n	800700e <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fec:	2300      	movs	r3, #0
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff fd76 	bl	8006ae8 <xTimerGenericCommand>
 8006ffc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <prvSwitchTimerLists+0x8e>
 8007004:	490c      	ldr	r1, [pc, #48]	; (8007038 <prvSwitchTimerLists+0xb8>)
 8007006:	f240 30a9 	movw	r0, #937	; 0x3a9
 800700a:	f7f9 fd0c 	bl	8000a26 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800700e:	4b09      	ldr	r3, [pc, #36]	; (8007034 <prvSwitchTimerLists+0xb4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1b7      	bne.n	8006f88 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <prvSwitchTimerLists+0xb4>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800701e:	4b07      	ldr	r3, [pc, #28]	; (800703c <prvSwitchTimerLists+0xbc>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a04      	ldr	r2, [pc, #16]	; (8007034 <prvSwitchTimerLists+0xb4>)
 8007024:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007026:	4a05      	ldr	r2, [pc, #20]	; (800703c <prvSwitchTimerLists+0xbc>)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	6013      	str	r3, [r2, #0]
    }
 800702c:	bf00      	nop
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2001977c 	.word	0x2001977c
 8007038:	080139d0 	.word	0x080139d0
 800703c:	20019780 	.word	0x20019780

08007040 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007044:	f000 fb08 	bl	8007658 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007048:	4b12      	ldr	r3, [pc, #72]	; (8007094 <prvCheckForValidListAndQueue+0x54>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d11d      	bne.n	800708c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007050:	4811      	ldr	r0, [pc, #68]	; (8007098 <prvCheckForValidListAndQueue+0x58>)
 8007052:	f7fd fc59 	bl	8004908 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007056:	4811      	ldr	r0, [pc, #68]	; (800709c <prvCheckForValidListAndQueue+0x5c>)
 8007058:	f7fd fc56 	bl	8004908 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800705c:	4b10      	ldr	r3, [pc, #64]	; (80070a0 <prvCheckForValidListAndQueue+0x60>)
 800705e:	4a0e      	ldr	r2, [pc, #56]	; (8007098 <prvCheckForValidListAndQueue+0x58>)
 8007060:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007062:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <prvCheckForValidListAndQueue+0x64>)
 8007064:	4a0d      	ldr	r2, [pc, #52]	; (800709c <prvCheckForValidListAndQueue+0x5c>)
 8007066:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007068:	2200      	movs	r2, #0
 800706a:	2110      	movs	r1, #16
 800706c:	2005      	movs	r0, #5
 800706e:	f7fd fd63 	bl	8004b38 <xQueueGenericCreate>
 8007072:	4602      	mov	r2, r0
 8007074:	4b07      	ldr	r3, [pc, #28]	; (8007094 <prvCheckForValidListAndQueue+0x54>)
 8007076:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007078:	4b06      	ldr	r3, [pc, #24]	; (8007094 <prvCheckForValidListAndQueue+0x54>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007080:	4b04      	ldr	r3, [pc, #16]	; (8007094 <prvCheckForValidListAndQueue+0x54>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4908      	ldr	r1, [pc, #32]	; (80070a8 <prvCheckForValidListAndQueue+0x68>)
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe facc 	bl	8005624 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800708c:	f000 fb10 	bl	80076b0 <vPortExitCritical>
    }
 8007090:	bf00      	nop
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20019784 	.word	0x20019784
 8007098:	20019754 	.word	0x20019754
 800709c:	20019768 	.word	0x20019768
 80070a0:	2001977c 	.word	0x2001977c
 80070a4:	20019780 	.word	0x20019780
 80070a8:	080139f8 	.word	0x080139f8

080070ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80070b8:	f7fe fd72 	bl	8005ba0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80070bc:	4b51      	ldr	r3, [pc, #324]	; (8007204 <pvPortMalloc+0x158>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80070c4:	f000 f904 	bl	80072d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070c8:	4b4f      	ldr	r3, [pc, #316]	; (8007208 <pvPortMalloc+0x15c>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f040 8085 	bne.w	80071e0 <pvPortMalloc+0x134>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d016      	beq.n	800710a <pvPortMalloc+0x5e>
            {
                xWantedSize += xHeapStructSize;
 80070dc:	2208      	movs	r2, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00d      	beq.n	800710a <pvPortMalloc+0x5e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f023 0307 	bic.w	r3, r3, #7
 80070f4:	3308      	adds	r3, #8
 80070f6:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <pvPortMalloc+0x5e>
 8007102:	4942      	ldr	r1, [pc, #264]	; (800720c <pvPortMalloc+0x160>)
 8007104:	2097      	movs	r0, #151	; 0x97
 8007106:	f7f9 fc8e 	bl	8000a26 <vAssertCalled>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d067      	beq.n	80071e0 <pvPortMalloc+0x134>
 8007110:	4b3f      	ldr	r3, [pc, #252]	; (8007210 <pvPortMalloc+0x164>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d862      	bhi.n	80071e0 <pvPortMalloc+0x134>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 800711a:	4b3e      	ldr	r3, [pc, #248]	; (8007214 <pvPortMalloc+0x168>)
 800711c:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 800711e:	4b3d      	ldr	r3, [pc, #244]	; (8007214 <pvPortMalloc+0x168>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007124:	e004      	b.n	8007130 <pvPortMalloc+0x84>
                {
                    pxPreviousBlock = pxBlock;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d903      	bls.n	8007142 <pvPortMalloc+0x96>
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f1      	bne.n	8007126 <pvPortMalloc+0x7a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8007142:	4b30      	ldr	r3, [pc, #192]	; (8007204 <pvPortMalloc+0x158>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	429a      	cmp	r2, r3
 800714a:	d049      	beq.n	80071e0 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2208      	movs	r2, #8
 8007152:	4413      	add	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	1ad2      	subs	r2, r2, r3
 8007166:	2308      	movs	r3, #8
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	429a      	cmp	r2, r3
 800716c:	d918      	bls.n	80071a0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4413      	add	r3, r2
 8007174:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <pvPortMalloc+0xdc>
 8007180:	4922      	ldr	r1, [pc, #136]	; (800720c <pvPortMalloc+0x160>)
 8007182:	20c5      	movs	r0, #197	; 0xc5
 8007184:	f7f9 fc4f 	bl	8000a26 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800719a:	68b8      	ldr	r0, [r7, #8]
 800719c:	f000 f8fa 	bl	8007394 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071a0:	4b1b      	ldr	r3, [pc, #108]	; (8007210 <pvPortMalloc+0x164>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	4a19      	ldr	r2, [pc, #100]	; (8007210 <pvPortMalloc+0x164>)
 80071ac:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071ae:	4b18      	ldr	r3, [pc, #96]	; (8007210 <pvPortMalloc+0x164>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b19      	ldr	r3, [pc, #100]	; (8007218 <pvPortMalloc+0x16c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d203      	bcs.n	80071c2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071ba:	4b15      	ldr	r3, [pc, #84]	; (8007210 <pvPortMalloc+0x164>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a16      	ldr	r2, [pc, #88]	; (8007218 <pvPortMalloc+0x16c>)
 80071c0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <pvPortMalloc+0x15c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80071d6:	4b11      	ldr	r3, [pc, #68]	; (800721c <pvPortMalloc+0x170>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	4a0f      	ldr	r2, [pc, #60]	; (800721c <pvPortMalloc+0x170>)
 80071de:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80071e0:	f7fe fcec 	bl	8005bbc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <pvPortMalloc+0x14c>
 80071ee:	4907      	ldr	r1, [pc, #28]	; (800720c <pvPortMalloc+0x160>)
 80071f0:	f44f 7083 	mov.w	r0, #262	; 0x106
 80071f4:	f7f9 fc17 	bl	8000a26 <vAssertCalled>
    return pvReturn;
 80071f8:	68fb      	ldr	r3, [r7, #12]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20024f98 	.word	0x20024f98
 8007208:	20024fac 	.word	0x20024fac
 800720c:	08013a00 	.word	0x08013a00
 8007210:	20024f9c 	.word	0x20024f9c
 8007214:	20024f90 	.word	0x20024f90
 8007218:	20024fa0 	.word	0x20024fa0
 800721c:	20024fa4 	.word	0x20024fa4

08007220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d041      	beq.n	80072b6 <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007232:	2308      	movs	r3, #8
 8007234:	425b      	negs	r3, r3
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4413      	add	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	4b1e      	ldr	r3, [pc, #120]	; (80072c0 <vPortFree+0xa0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4013      	ands	r3, r2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <vPortFree+0x38>
 800724e:	491d      	ldr	r1, [pc, #116]	; (80072c4 <vPortFree+0xa4>)
 8007250:	f44f 708d 	mov.w	r0, #282	; 0x11a
 8007254:	f7f9 fbe7 	bl	8000a26 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <vPortFree+0x4a>
 8007260:	4918      	ldr	r1, [pc, #96]	; (80072c4 <vPortFree+0xa4>)
 8007262:	f240 101b 	movw	r0, #283	; 0x11b
 8007266:	f7f9 fbde 	bl	8000a26 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <vPortFree+0xa0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4013      	ands	r3, r2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01e      	beq.n	80072b6 <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11a      	bne.n	80072b6 <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <vPortFree+0xa0>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	43db      	mvns	r3, r3
 800728a:	401a      	ands	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007290:	f7fe fc86 	bl	8005ba0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <vPortFree+0xa8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4413      	add	r3, r2
 800729e:	4a0a      	ldr	r2, [pc, #40]	; (80072c8 <vPortFree+0xa8>)
 80072a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072a2:	68b8      	ldr	r0, [r7, #8]
 80072a4:	f000 f876 	bl	8007394 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80072a8:	4b08      	ldr	r3, [pc, #32]	; (80072cc <vPortFree+0xac>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	4a07      	ldr	r2, [pc, #28]	; (80072cc <vPortFree+0xac>)
 80072b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80072b2:	f7fe fc83 	bl	8005bbc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80072b6:	bf00      	nop
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20024fac 	.word	0x20024fac
 80072c4:	08013a00 	.word	0x08013a00
 80072c8:	20024f9c 	.word	0x20024f9c
 80072cc:	20024fa8 	.word	0x20024fa8

080072d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072d6:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 80072da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80072dc:	4b27      	ldr	r3, [pc, #156]	; (800737c <prvHeapInit+0xac>)
 80072de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00c      	beq.n	8007304 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3307      	adds	r3, #7
 80072ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0307 	bic.w	r3, r3, #7
 80072f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	4a1f      	ldr	r2, [pc, #124]	; (800737c <prvHeapInit+0xac>)
 8007300:	4413      	add	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007308:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <prvHeapInit+0xb0>)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800730e:	4b1c      	ldr	r3, [pc, #112]	; (8007380 <prvHeapInit+0xb0>)
 8007310:	2200      	movs	r2, #0
 8007312:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	4413      	add	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800731c:	2208      	movs	r2, #8
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0307 	bic.w	r3, r3, #7
 800732a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4a15      	ldr	r2, [pc, #84]	; (8007384 <prvHeapInit+0xb4>)
 8007330:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007332:	4b14      	ldr	r3, [pc, #80]	; (8007384 <prvHeapInit+0xb4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800733a:	4b12      	ldr	r3, [pc, #72]	; (8007384 <prvHeapInit+0xb4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007350:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <prvHeapInit+0xb4>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	4a0a      	ldr	r2, [pc, #40]	; (8007388 <prvHeapInit+0xb8>)
 800735e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	4a09      	ldr	r2, [pc, #36]	; (800738c <prvHeapInit+0xbc>)
 8007366:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <prvHeapInit+0xc0>)
 800736a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800736e:	601a      	str	r2, [r3, #0]
}
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	20019790 	.word	0x20019790
 8007380:	20024f90 	.word	0x20024f90
 8007384:	20024f98 	.word	0x20024f98
 8007388:	20024fa0 	.word	0x20024fa0
 800738c:	20024f9c 	.word	0x20024f9c
 8007390:	20024fac 	.word	0x20024fac

08007394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800739c:	4b28      	ldr	r3, [pc, #160]	; (8007440 <prvInsertBlockIntoFreeList+0xac>)
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	e002      	b.n	80073a8 <prvInsertBlockIntoFreeList+0x14>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d8f7      	bhi.n	80073a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	4413      	add	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d108      	bne.n	80073d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	441a      	add	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	441a      	add	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d118      	bne.n	800741c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4b15      	ldr	r3, [pc, #84]	; (8007444 <prvInsertBlockIntoFreeList+0xb0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d00d      	beq.n	8007412 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	441a      	add	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e008      	b.n	8007424 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007412:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <prvInsertBlockIntoFreeList+0xb0>)
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e003      	b.n	8007424 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d002      	beq.n	8007432 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007432:	bf00      	nop
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20024f90 	.word	0x20024f90
 8007444:	20024f98 	.word	0x20024f98

08007448 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3b04      	subs	r3, #4
 8007458:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007460:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3b04      	subs	r3, #4
 8007466:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f023 0201 	bic.w	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3b04      	subs	r3, #4
 8007476:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007478:	4a0c      	ldr	r2, [pc, #48]	; (80074ac <pxPortInitialiseStack+0x64>)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3b14      	subs	r3, #20
 8007482:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3b04      	subs	r3, #4
 800748e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f06f 0202 	mvn.w	r2, #2
 8007496:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3b20      	subs	r3, #32
 800749c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800749e:	68fb      	ldr	r3, [r7, #12]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	080074b1 	.word	0x080074b1

080074b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80074ba:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <prvTaskExitError+0x44>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c2:	d003      	beq.n	80074cc <prvTaskExitError+0x1c>
 80074c4:	490c      	ldr	r1, [pc, #48]	; (80074f8 <prvTaskExitError+0x48>)
 80074c6:	20df      	movs	r0, #223	; 0xdf
 80074c8:	f7f9 faad 	bl	8000a26 <vAssertCalled>
        __asm volatile
 80074cc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80074d0:	b672      	cpsid	i
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	b662      	cpsie	i
 80074e0:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80074e2:	bf00      	nop
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0fc      	beq.n	80074e4 <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000010 	.word	0x20000010
 80074f8:	08013a38 	.word	0x08013a38
 80074fc:	00000000 	.word	0x00000000

08007500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <pxCurrentTCBConst2>)
 8007502:	6819      	ldr	r1, [r3, #0]
 8007504:	6808      	ldr	r0, [r1, #0]
 8007506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	f380 8809 	msr	PSP, r0
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f380 8811 	msr	BASEPRI, r0
 800751a:	4770      	bx	lr
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst2>:
 8007520:	20019650 	.word	0x20019650
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007528:	4808      	ldr	r0, [pc, #32]	; (800754c <prvPortStartFirstTask+0x24>)
 800752a:	6800      	ldr	r0, [r0, #0]
 800752c:	6800      	ldr	r0, [r0, #0]
 800752e:	f380 8808 	msr	MSP, r0
 8007532:	f04f 0000 	mov.w	r0, #0
 8007536:	f380 8814 	msr	CONTROL, r0
 800753a:	b662      	cpsie	i
 800753c:	b661      	cpsie	f
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	df00      	svc	0
 8007548:	bf00      	nop
 800754a:	0000      	.short	0x0000
 800754c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop

08007554 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800755a:	4b38      	ldr	r3, [pc, #224]	; (800763c <xPortStartScheduler+0xe8>)
 800755c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	22ff      	movs	r2, #255	; 0xff
 800756a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4b30      	ldr	r3, [pc, #192]	; (8007640 <xPortStartScheduler+0xec>)
 8007580:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007582:	4b30      	ldr	r3, [pc, #192]	; (8007644 <xPortStartScheduler+0xf0>)
 8007584:	2207      	movs	r2, #7
 8007586:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007588:	e009      	b.n	800759e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800758a:	4b2e      	ldr	r3, [pc, #184]	; (8007644 <xPortStartScheduler+0xf0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3b01      	subs	r3, #1
 8007590:	4a2c      	ldr	r2, [pc, #176]	; (8007644 <xPortStartScheduler+0xf0>)
 8007592:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	b2db      	uxtb	r3, r3
 800759c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b80      	cmp	r3, #128	; 0x80
 80075a8:	d0ef      	beq.n	800758a <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80075aa:	4b26      	ldr	r3, [pc, #152]	; (8007644 <xPortStartScheduler+0xf0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1c3 0307 	rsb	r3, r3, #7
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d004      	beq.n	80075c0 <xPortStartScheduler+0x6c>
 80075b6:	4924      	ldr	r1, [pc, #144]	; (8007648 <xPortStartScheduler+0xf4>)
 80075b8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80075bc:	f7f9 fa33 	bl	8000a26 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075c0:	4b20      	ldr	r3, [pc, #128]	; (8007644 <xPortStartScheduler+0xf0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f1c3 0307 	rsb	r3, r3, #7
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d004      	beq.n	80075d6 <xPortStartScheduler+0x82>
 80075cc:	491e      	ldr	r1, [pc, #120]	; (8007648 <xPortStartScheduler+0xf4>)
 80075ce:	f240 1053 	movw	r0, #339	; 0x153
 80075d2:	f7f9 fa28 	bl	8000a26 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075d6:	4b1b      	ldr	r3, [pc, #108]	; (8007644 <xPortStartScheduler+0xf0>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	4a19      	ldr	r2, [pc, #100]	; (8007644 <xPortStartScheduler+0xf0>)
 80075de:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075e0:	4b18      	ldr	r3, [pc, #96]	; (8007644 <xPortStartScheduler+0xf0>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075e8:	4a16      	ldr	r2, [pc, #88]	; (8007644 <xPortStartScheduler+0xf0>)
 80075ea:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80075f4:	4b15      	ldr	r3, [pc, #84]	; (800764c <xPortStartScheduler+0xf8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a14      	ldr	r2, [pc, #80]	; (800764c <xPortStartScheduler+0xf8>)
 80075fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075fe:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007600:	4b12      	ldr	r3, [pc, #72]	; (800764c <xPortStartScheduler+0xf8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a11      	ldr	r2, [pc, #68]	; (800764c <xPortStartScheduler+0xf8>)
 8007606:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800760a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800760c:	f000 f8ce 	bl	80077ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007610:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <xPortStartScheduler+0xfc>)
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007616:	f000 f8ed 	bl	80077f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800761a:	4b0e      	ldr	r3, [pc, #56]	; (8007654 <xPortStartScheduler+0x100>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a0d      	ldr	r2, [pc, #52]	; (8007654 <xPortStartScheduler+0x100>)
 8007620:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007624:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007626:	f7ff ff7f 	bl	8007528 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800762a:	f7fe fc23 	bl	8005e74 <vTaskSwitchContext>
    prvTaskExitError();
 800762e:	f7ff ff3f 	bl	80074b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	e000e400 	.word	0xe000e400
 8007640:	20024fb0 	.word	0x20024fb0
 8007644:	20024fb4 	.word	0x20024fb4
 8007648:	08013a38 	.word	0x08013a38
 800764c:	e000ed20 	.word	0xe000ed20
 8007650:	20000010 	.word	0x20000010
 8007654:	e000ef34 	.word	0xe000ef34

08007658 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007662:	b672      	cpsid	i
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	b662      	cpsie	i
 8007672:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007674:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <vPortEnterCritical+0x4c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a0a      	ldr	r2, [pc, #40]	; (80076a4 <vPortEnterCritical+0x4c>)
 800767c:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800767e:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <vPortEnterCritical+0x4c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d109      	bne.n	800769a <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007686:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <vPortEnterCritical+0x50>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d004      	beq.n	800769a <vPortEnterCritical+0x42>
 8007690:	4906      	ldr	r1, [pc, #24]	; (80076ac <vPortEnterCritical+0x54>)
 8007692:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8007696:	f7f9 f9c6 	bl	8000a26 <vAssertCalled>
    }
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20000010 	.word	0x20000010
 80076a8:	e000ed04 	.word	0xe000ed04
 80076ac:	08013a38 	.word	0x08013a38

080076b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80076b6:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <vPortExitCritical+0x3c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d104      	bne.n	80076c8 <vPortExitCritical+0x18>
 80076be:	490c      	ldr	r1, [pc, #48]	; (80076f0 <vPortExitCritical+0x40>)
 80076c0:	f240 109f 	movw	r0, #415	; 0x19f
 80076c4:	f7f9 f9af 	bl	8000a26 <vAssertCalled>
    uxCriticalNesting--;
 80076c8:	4b08      	ldr	r3, [pc, #32]	; (80076ec <vPortExitCritical+0x3c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	4a07      	ldr	r2, [pc, #28]	; (80076ec <vPortExitCritical+0x3c>)
 80076d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <vPortExitCritical+0x3c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <vPortExitCritical+0x34>
 80076da:	2300      	movs	r3, #0
 80076dc:	607b      	str	r3, [r7, #4]
        __asm volatile
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000010 	.word	0x20000010
 80076f0:	08013a38 	.word	0x08013a38
	...

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007724:	b672      	cpsid	i
 8007726:	f380 8811 	msr	BASEPRI, r0
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	b662      	cpsie	i
 8007734:	f7fe fb9e 	bl	8005e74 <vTaskSwitchContext>
 8007738:	f04f 0000 	mov.w	r0, #0
 800773c:	f380 8811 	msr	BASEPRI, r0
 8007740:	bc09      	pop	{r0, r3}
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	6808      	ldr	r0, [r1, #0]
 8007746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774a:	f01e 0f10 	tst.w	lr, #16
 800774e:	bf08      	it	eq
 8007750:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007754:	f380 8809 	msr	PSP, r0
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop

08007760 <pxCurrentTCBConst>:
 8007760:	20019650 	.word	0x20019650
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
        __asm volatile
 800776e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007772:	b672      	cpsid	i
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	b662      	cpsie	i
 8007782:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007784:	f7fe fac2 	bl	8005d0c <xTaskIncrementTick>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <SysTick_Handler+0x2e>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778e:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <SysTick_Handler+0x40>)
 8007790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	603b      	str	r3, [r7, #0]
        __asm volatile
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	20000000 	.word	0x20000000
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
 8007802:	0000      	.short	0x0000
 8007804:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop

0800780c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007812:	f3ef 8305 	mrs	r3, IPSR
 8007816:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b0f      	cmp	r3, #15
 800781c:	d90e      	bls.n	800783c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800781e:	4a10      	ldr	r2, [pc, #64]	; (8007860 <vPortValidateInterruptPriority+0x54>)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007828:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <vPortValidateInterruptPriority+0x58>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	429a      	cmp	r2, r3
 8007830:	d204      	bcs.n	800783c <vPortValidateInterruptPriority+0x30>
 8007832:	490d      	ldr	r1, [pc, #52]	; (8007868 <vPortValidateInterruptPriority+0x5c>)
 8007834:	f240 20f2 	movw	r0, #754	; 0x2f2
 8007838:	f7f9 f8f5 	bl	8000a26 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800783c:	4b0b      	ldr	r3, [pc, #44]	; (800786c <vPortValidateInterruptPriority+0x60>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007844:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <vPortValidateInterruptPriority+0x64>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	429a      	cmp	r2, r3
 800784a:	d904      	bls.n	8007856 <vPortValidateInterruptPriority+0x4a>
 800784c:	4906      	ldr	r1, [pc, #24]	; (8007868 <vPortValidateInterruptPriority+0x5c>)
 800784e:	f240 3002 	movw	r0, #770	; 0x302
 8007852:	f7f9 f8e8 	bl	8000a26 <vAssertCalled>
    }
 8007856:	bf00      	nop
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	e000e3f0 	.word	0xe000e3f0
 8007864:	20024fb0 	.word	0x20024fb0
 8007868:	08013a38 	.word	0x08013a38
 800786c:	e000ed0c 	.word	0xe000ed0c
 8007870:	20024fb4 	.word	0x20024fb4

08007874 <vCastPointerTo_ARPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xARP_PACKET ARPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ARPPacket_t )
    {
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 800787c:	687b      	ldr	r3, [r7, #4]
    }
 800787e:	4618      	mov	r0, r3
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
	...

0800788c <eARPProcessPacket>:
 * @param[in] pxARPFrame: The ARP Frame (the ARP packet).
 *
 * @return An enum which says whether to return the frame or to release it.
 */
eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8007894:	2300      	movs	r3, #0
 8007896:	77fb      	strb	r3, [r7, #31]
    uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;
/* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    pxARPHeader = &( pxARPFrame->xARPHeader );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	330e      	adds	r3, #14
 800789c:	61bb      	str	r3, [r7, #24]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	330e      	adds	r3, #14
 80078a2:	617b      	str	r3, [r7, #20]
    pvCopyDest = &ulSenderProtocolAddress;
 80078a4:	f107 0308 	add.w	r3, r7, #8
 80078a8:	613b      	str	r3, [r7, #16]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	601a      	str	r2, [r3, #0]
    /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
    ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	60fb      	str	r3, [r7, #12]

    traceARP_PACKET_RECEIVED();

    /* Don't do anything if the local IP address is zero because
     * that means a DHCP request has not completed. */
    if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 80078ba:	4b3a      	ldr	r3, [pc, #232]	; (80079a4 <eARPProcessPacket+0x118>)
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d068      	beq.n	8007994 <eARPProcessPacket+0x108>
    {
        switch( pxARPHeader->usOperation )
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	88db      	ldrh	r3, [r3, #6]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078cc:	d003      	beq.n	80078d6 <eARPProcessPacket+0x4a>
 80078ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d2:	d057      	beq.n	8007984 <eARPProcessPacket+0xf8>
                #endif /* ipconfigARP_USE_CLASH_DETECTION */
                break;

            default:
                /* Invalid. */
                break;
 80078d4:	e061      	b.n	800799a <eARPProcessPacket+0x10e>
                if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 80078d6:	4b33      	ldr	r3, [pc, #204]	; (80079a4 <eARPProcessPacket+0x118>)
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d15b      	bne.n	8007998 <eARPProcessPacket+0x10c>
                    vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	3308      	adds	r3, #8
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 f861 	bl	80079b0 <vARPRefreshCacheEntry>
                    pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2200      	movs	r2, #0
 80078f2:	719a      	strb	r2, [r3, #6]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f042 0202 	orr.w	r2, r2, #2
 80078fa:	71da      	strb	r2, [r3, #7]
                    if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	429a      	cmp	r2, r3
 8007902:	d11a      	bne.n	800793a <eARPProcessPacket+0xae>
                        pvCopySource = xBroadcastMACAddress.ucBytes;
 8007904:	4b28      	ldr	r3, [pc, #160]	; (80079a8 <eARPProcessPacket+0x11c>)
 8007906:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3306      	adds	r3, #6
 800790c:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 800790e:	2206      	movs	r2, #6
 8007910:	6979      	ldr	r1, [r7, #20]
 8007912:	6938      	ldr	r0, [r7, #16]
 8007914:	f009 ff6d 	bl	80117f2 <memcpy>
                        ( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	3312      	adds	r3, #18
 800791c:	2206      	movs	r2, #6
 800791e:	2100      	movs	r1, #0
 8007920:	4618      	mov	r0, r3
 8007922:	f009 ff8a 	bl	801183a <memset>
                        pxARPHeader->ulTargetProtocolAddress = 0UL;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2200      	movs	r2, #0
 800792a:	761a      	strb	r2, [r3, #24]
 800792c:	2200      	movs	r2, #0
 800792e:	765a      	strb	r2, [r3, #25]
 8007930:	2200      	movs	r2, #0
 8007932:	769a      	strb	r2, [r3, #26]
 8007934:	2200      	movs	r2, #0
 8007936:	76da      	strb	r2, [r3, #27]
 8007938:	e00d      	b.n	8007956 <eARPProcessPacket+0xca>
                        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	3308      	adds	r3, #8
 800793e:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	3312      	adds	r3, #18
 8007944:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8007946:	2206      	movs	r2, #6
 8007948:	6979      	ldr	r1, [r7, #20]
 800794a:	6938      	ldr	r0, [r7, #16]
 800794c:	f009 ff51 	bl	80117f2 <memcpy>
                        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	619a      	str	r2, [r3, #24]
                    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8007956:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <eARPProcessPacket+0x118>)
 8007958:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	3308      	adds	r3, #8
 800795e:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8007960:	2206      	movs	r2, #6
 8007962:	6979      	ldr	r1, [r7, #20]
 8007964:	6938      	ldr	r0, [r7, #16]
 8007966:	f009 ff44 	bl	80117f2 <memcpy>
                    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 800796a:	4b10      	ldr	r3, [pc, #64]	; (80079ac <eARPProcessPacket+0x120>)
 800796c:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	330e      	adds	r3, #14
 8007972:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	601a      	str	r2, [r3, #0]
                    eReturn = eReturnEthernetFrame;
 800797e:	2302      	movs	r3, #2
 8007980:	77fb      	strb	r3, [r7, #31]
                break;
 8007982:	e009      	b.n	8007998 <eARPProcessPacket+0x10c>
                vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	3308      	adds	r3, #8
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	4611      	mov	r1, r2
 800798c:	4618      	mov	r0, r3
 800798e:	f000 f80f 	bl	80079b0 <vARPRefreshCacheEntry>
                break;
 8007992:	e002      	b.n	800799a <eARPProcessPacket+0x10e>
        }
    }
 8007994:	bf00      	nop
 8007996:	e000      	b.n	800799a <eARPProcessPacket+0x10e>
                break;
 8007998:	bf00      	nop

    return eReturn;
 800799a:	7ffb      	ldrb	r3, [r7, #31]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3720      	adds	r7, #32
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000018 	.word	0x20000018
 80079a8:	080154a0 	.word	0x080154a0
 80079ac:	2000002c 	.word	0x2000002c

080079b0 <vARPRefreshCacheEntry>:
 * @param[in] ulIPAddress: 32-bit representation of the IP-address whose mapping
 *                         is being updated.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
    BaseType_t x = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	61fb      	str	r3, [r7, #28]
    BaseType_t xIpEntry = -1;
 80079be:	f04f 33ff 	mov.w	r3, #4294967295
 80079c2:	61bb      	str	r3, [r7, #24]
    BaseType_t xMacEntry = -1;
 80079c4:	f04f 33ff 	mov.w	r3, #4294967295
 80079c8:	617b      	str	r3, [r7, #20]
    BaseType_t xUseEntry = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	613b      	str	r3, [r7, #16]
    uint8_t ucMinAgeFound = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]
    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )

        /* Only process the IP address if it is on the local network.
         * Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
         * and netmask are still unknown. */
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 80079d2:	4b70      	ldr	r3, [pc, #448]	; (8007b94 <vARPRefreshCacheEntry+0x1e4>)
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	405a      	eors	r2, r3
 80079da:	4b6f      	ldr	r3, [pc, #444]	; (8007b98 <vARPRefreshCacheEntry+0x1e8>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	4013      	ands	r3, r2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d004      	beq.n	80079ee <vARPRefreshCacheEntry+0x3e>
            ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 80079e4:	4b6b      	ldr	r3, [pc, #428]	; (8007b94 <vARPRefreshCacheEntry+0x1e4>)
 80079e6:	695b      	ldr	r3, [r3, #20]
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f040 80d0 	bne.w	8007b8e <vARPRefreshCacheEntry+0x1de>

        if( pdTRUE )
    #endif
    {
        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	e067      	b.n	8007aca <vARPRefreshCacheEntry+0x11a>
        {
            BaseType_t xMatchingMAC;

            if( pxMACAddress != NULL )
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d015      	beq.n	8007a2c <vARPRefreshCacheEntry+0x7c>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007a00:	69fa      	ldr	r2, [r7, #28]
 8007a02:	4613      	mov	r3, r2
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4a64      	ldr	r2, [pc, #400]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	2206      	movs	r2, #6
 8007a14:	4618      	mov	r0, r3
 8007a16:	f009 fedd 	bl	80117d4 <memcmp>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <vARPRefreshCacheEntry+0x76>
                {
                    xMatchingMAC = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	60bb      	str	r3, [r7, #8]
 8007a24:	e004      	b.n	8007a30 <vARPRefreshCacheEntry+0x80>
                }
                else
                {
                    xMatchingMAC = pdFALSE;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60bb      	str	r3, [r7, #8]
 8007a2a:	e001      	b.n	8007a30 <vARPRefreshCacheEntry+0x80>
                }
            }
            else
            {
                xMatchingMAC = pdFALSE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60bb      	str	r3, [r7, #8]
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007a30:	495a      	ldr	r1, [pc, #360]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	4613      	mov	r3, r2
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d120      	bne.n	8007a88 <vARPRefreshCacheEntry+0xd8>
            {
                if( pxMACAddress == NULL )
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <vARPRefreshCacheEntry+0xa2>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    xIpEntry = x;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	61bb      	str	r3, [r7, #24]
                    break;
 8007a50:	e03e      	b.n	8007ad0 <vARPRefreshCacheEntry+0x120>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d014      	beq.n	8007a82 <vARPRefreshCacheEntry+0xd2>
                {
                    /* This function will be called for each received packet
                     * As this is by far the most common path the coding standard
                     * is relaxed in this case and a return is permitted as an
                     * optimisation. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007a58:	4950      	ldr	r1, [pc, #320]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	330a      	adds	r3, #10
 8007a68:	2296      	movs	r2, #150	; 0x96
 8007a6a:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8007a6c:	494b      	ldr	r1, [pc, #300]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	4613      	mov	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	330b      	adds	r3, #11
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	701a      	strb	r2, [r3, #0]
                    return;
 8007a80:	e085      	b.n	8007b8e <vARPRefreshCacheEntry+0x1de>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                xIpEntry = x;
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	61bb      	str	r3, [r7, #24]
 8007a86:	e01d      	b.n	8007ac4 <vARPRefreshCacheEntry+0x114>
            }
            else if( xMatchingMAC != pdFALSE )
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <vARPRefreshCacheEntry+0xe4>
                    if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
                    {
                        xMacEntry = x;
                    }
                #else /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
                    xMacEntry = x;
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	e017      	b.n	8007ac4 <vARPRefreshCacheEntry+0x114>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8007a94:	4941      	ldr	r1, [pc, #260]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	330a      	adds	r3, #10
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	7bfa      	ldrb	r2, [r7, #15]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d90b      	bls.n	8007ac4 <vARPRefreshCacheEntry+0x114>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 8007aac:	493b      	ldr	r1, [pc, #236]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	330a      	adds	r3, #10
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	73fb      	strb	r3, [r7, #15]
                xUseEntry = x;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	613b      	str	r3, [r7, #16]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	61fb      	str	r3, [r7, #28]
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	2b05      	cmp	r3, #5
 8007ace:	dd94      	ble.n	80079fa <vARPRefreshCacheEntry+0x4a>
            {
                /* Nothing happens to this cache entry for now. */
            }
        }

        if( xMacEntry >= 0 )
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	db11      	blt.n	8007afa <vARPRefreshCacheEntry+0x14a>
        {
            xUseEntry = xMacEntry;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	613b      	str	r3, [r7, #16]

            if( xIpEntry >= 0 )
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	db11      	blt.n	8007b04 <vARPRefreshCacheEntry+0x154>
            {
                /* Both the MAC address as well as the IP address were found in
                 * different locations: clear the entry which matches the
                 * IP-address */
                ( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4a2c      	ldr	r2, [pc, #176]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007aec:	4413      	add	r3, r2
 8007aee:	220c      	movs	r2, #12
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f009 fea1 	bl	801183a <memset>
 8007af8:	e004      	b.n	8007b04 <vARPRefreshCacheEntry+0x154>
            }
        }
        else if( xIpEntry >= 0 )
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	db01      	blt.n	8007b04 <vARPRefreshCacheEntry+0x154>
        {
            /* An entry containing the IP-address was found, but it had a different MAC address */
            xUseEntry = xIpEntry;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	613b      	str	r3, [r7, #16]
        {
            /* No matching entry found. */
        }

        /* If the entry was not found, we use the oldest entry and set the IPaddress */
        xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8007b04:	4925      	ldr	r1, [pc, #148]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	601a      	str	r2, [r3, #0]

        if( pxMACAddress != NULL )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d021      	beq.n	8007b60 <vARPRefreshCacheEntry+0x1b0>
        {
            ( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007b28:	4413      	add	r3, r2
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	2206      	movs	r2, #6
 8007b30:	4618      	mov	r0, r3
 8007b32:	f009 fe5e 	bl	80117f2 <memcpy>

            iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
            /* And this entry does not need immediate attention */
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007b36:	4919      	ldr	r1, [pc, #100]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	330a      	adds	r3, #10
 8007b46:	2296      	movs	r2, #150	; 0x96
 8007b48:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007b4a:	4914      	ldr	r1, [pc, #80]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	330b      	adds	r3, #11
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e016      	b.n	8007b8e <vARPRefreshCacheEntry+0x1de>
        }
        else if( xIpEntry < 0 )
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	da13      	bge.n	8007b8e <vARPRefreshCacheEntry+0x1de>
        {
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007b66:	490d      	ldr	r1, [pc, #52]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	440b      	add	r3, r1
 8007b74:	330a      	adds	r3, #10
 8007b76:	2205      	movs	r2, #5
 8007b78:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007b7a:	4908      	ldr	r1, [pc, #32]	; (8007b9c <vARPRefreshCacheEntry+0x1ec>)
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	440b      	add	r3, r1
 8007b88:	330b      	adds	r3, #11
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
        else
        {
            /* Nothing will be stored. */
        }
    }
}
 8007b8e:	3720      	adds	r7, #32
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000018 	.word	0x20000018
 8007b98:	20025080 	.word	0x20025080
 8007b9c:	20024fb8 	.word	0x20024fb8

08007ba0 <eARPGetCacheEntry>:
 *         addressing needs a gateway but there isn't a gateway defined) then return
 *         eCantSendPacket.
 */
eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                      MACAddress_t * const pxMACAddress )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturn;
    uint32_t ulAddressToLookup;

    ulAddressToLookup = *pulIPAddress;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60bb      	str	r3, [r7, #8]

    #if ( ipconfigUSE_LLMNR == 1 )
        if( ulAddressToLookup == ipLLMNR_IP_ADDR ) /* Is in network byte order. */
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4a33      	ldr	r2, [pc, #204]	; (8007c80 <eARPGetCacheEntry+0xe0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d108      	bne.n	8007bca <eARPGetCacheEntry+0x2a>
        {
            /* The LLMNR IP-address has a fixed virtual MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	4a32      	ldr	r2, [pc, #200]	; (8007c84 <eARPGetCacheEntry+0xe4>)
 8007bbc:	6811      	ldr	r1, [r2, #0]
 8007bbe:	6019      	str	r1, [r3, #0]
 8007bc0:	8892      	ldrh	r2, [r2, #4]
 8007bc2:	809a      	strh	r2, [r3, #4]
            eReturn = eARPCacheHit;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	73fb      	strb	r3, [r7, #15]
 8007bc8:	e054      	b.n	8007c74 <eARPGetCacheEntry+0xd4>
        }
        else
    #endif

    if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8007bca:	68b8      	ldr	r0, [r7, #8]
 8007bcc:	f001 fe84 	bl	80098d8 <xIsIPv4Multicast>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d006      	beq.n	8007be4 <eARPGetCacheEntry+0x44>
    {
        /* Get the lowest 23 bits of the IP-address. */
        vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	68b8      	ldr	r0, [r7, #8]
 8007bda:	f001 fea5 	bl	8009928 <vSetMultiCastIPv4MacAddress>

        eReturn = eARPCacheHit;
 8007bde:	2301      	movs	r3, #1
 8007be0:	73fb      	strb	r3, [r7, #15]
 8007be2:	e047      	b.n	8007c74 <eARPGetCacheEntry+0xd4>
    }
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d005      	beq.n	8007bfa <eARPGetCacheEntry+0x5a>
             ( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) ) /* Or a local broadcast address, eg 192.168.1.255? */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4b25      	ldr	r3, [pc, #148]	; (8007c88 <eARPGetCacheEntry+0xe8>)
 8007bf4:	691b      	ldr	r3, [r3, #16]
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d108      	bne.n	8007c0c <eARPGetCacheEntry+0x6c>
    {
        /* This is a broadcast so it uses the broadcast MAC address. */
        ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	4a23      	ldr	r2, [pc, #140]	; (8007c8c <eARPGetCacheEntry+0xec>)
 8007bfe:	6811      	ldr	r1, [r2, #0]
 8007c00:	6019      	str	r1, [r3, #0]
 8007c02:	8892      	ldrh	r2, [r2, #4]
 8007c04:	809a      	strh	r2, [r3, #4]
        eReturn = eARPCacheHit;
 8007c06:	2301      	movs	r3, #1
 8007c08:	73fb      	strb	r3, [r7, #15]
 8007c0a:	e033      	b.n	8007c74 <eARPGetCacheEntry+0xd4>
    }
    else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 8007c0c:	4b20      	ldr	r3, [pc, #128]	; (8007c90 <eARPGetCacheEntry+0xf0>)
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <eARPGetCacheEntry+0x7a>
    {
        /* The IP address has not yet been assigned, so there is nothing that
         * can be done. */
        eReturn = eCantSendPacket;
 8007c14:	2302      	movs	r3, #2
 8007c16:	73fb      	strb	r3, [r7, #15]
 8007c18:	e02c      	b.n	8007c74 <eARPGetCacheEntry+0xd4>
    }
    else
    {
        eReturn = eARPCacheMiss;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]

        if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <eARPGetCacheEntry+0xf0>)
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	405a      	eors	r2, r3
 8007c28:	4b17      	ldr	r3, [pc, #92]	; (8007c88 <eARPGetCacheEntry+0xe8>)
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00b      	beq.n	8007c4a <eARPGetCacheEntry+0xaa>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <eARPGetCacheEntry+0xe8>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <eARPGetCacheEntry+0xa2>
                {
                    ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 8007c3a:	4b13      	ldr	r3, [pc, #76]	; (8007c88 <eARPGetCacheEntry+0xe8>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	60bb      	str	r3, [r7, #8]
 8007c40:	e006      	b.n	8007c50 <eARPGetCacheEntry+0xb0>
                }
                else
                {
                    ulAddressToLookup = *pulIPAddress;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	60bb      	str	r3, [r7, #8]
 8007c48:	e002      	b.n	8007c50 <eARPGetCacheEntry+0xb0>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60bb      	str	r3, [r7, #8]
            if( eReturn == eARPCacheMiss ) /*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */
        #else
            /* No cache look-up was done, so the result is still 'eARPCacheMiss'. */
        #endif
        {
            if( ulAddressToLookup == 0UL )
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d102      	bne.n	8007c5c <eARPGetCacheEntry+0xbc>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8007c56:	2302      	movs	r3, #2
 8007c58:	73fb      	strb	r3, [r7, #15]
 8007c5a:	e00b      	b.n	8007c74 <eARPGetCacheEntry+0xd4>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	68b8      	ldr	r0, [r7, #8]
 8007c60:	f000 f818 	bl	8007c94 <prvCacheLookup>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]

                if( eReturn == eARPCacheMiss )
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <eARPGetCacheEntry+0xd4>
                {
                    /* It might be that the ARP has to go to the gateway. */
                    *pulIPAddress = ulAddressToLookup;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }

    return eReturn;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	fc0000e0 	.word	0xfc0000e0
 8007c84:	08015498 	.word	0x08015498
 8007c88:	20025080 	.word	0x20025080
 8007c8c:	080154a0 	.word	0x080154a0
 8007c90:	20000018 	.word	0x20000018

08007c94 <prvCacheLookup>:
 * @return When the IP-address is found: eARPCacheHit, when not found: eARPCacheMiss,
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                          MACAddress_t * const pxMACAddress )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
    BaseType_t x;
    eARPLookupResult_t eReturn = eARPCacheMiss;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	72fb      	strb	r3, [r7, #11]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	e02b      	b.n	8007d00 <prvCacheLookup+0x6c>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007ca8:	4919      	ldr	r1, [pc, #100]	; (8007d10 <prvCacheLookup+0x7c>)
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4613      	mov	r3, r2
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	4413      	add	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d11d      	bne.n	8007cfa <prvCacheLookup+0x66>
        {
            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007cbe:	4914      	ldr	r1, [pc, #80]	; (8007d10 <prvCacheLookup+0x7c>)
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	440b      	add	r3, r1
 8007ccc:	330b      	adds	r3, #11
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d102      	bne.n	8007cda <prvCacheLookup+0x46>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                eReturn = eCantSendPacket;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	72fb      	strb	r3, [r7, #11]
                /* A valid entry was found. */
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
                eReturn = eARPCacheHit;
            }

            break;
 8007cd8:	e015      	b.n	8007d06 <prvCacheLookup+0x72>
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007cda:	6838      	ldr	r0, [r7, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a0a      	ldr	r2, [pc, #40]	; (8007d10 <prvCacheLookup+0x7c>)
 8007ce8:	4413      	add	r3, r2
 8007cea:	3304      	adds	r3, #4
 8007cec:	2206      	movs	r2, #6
 8007cee:	4619      	mov	r1, r3
 8007cf0:	f009 fd7f 	bl	80117f2 <memcpy>
                eReturn = eARPCacheHit;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	72fb      	strb	r3, [r7, #11]
            break;
 8007cf8:	e005      	b.n	8007d06 <prvCacheLookup+0x72>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b05      	cmp	r3, #5
 8007d04:	ddd0      	ble.n	8007ca8 <prvCacheLookup+0x14>
        }
    }

    return eReturn;
 8007d06:	7afb      	ldrb	r3, [r7, #11]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20024fb8 	.word	0x20024fb8

08007d14 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
void vARPAgeCache( void )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
    BaseType_t x;
    TickType_t xTimeNow;

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	e063      	b.n	8007de8 <vARPAgeCache+0xd4>
    {
        /* If the entry is valid (its age is greater than zero). */
        if( xARPCache[ x ].ucAge > 0U )
 8007d20:	4940      	ldr	r1, [pc, #256]	; (8007e24 <vARPAgeCache+0x110>)
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	4613      	mov	r3, r2
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	330a      	adds	r3, #10
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d055      	beq.n	8007de2 <vARPAgeCache+0xce>
        {
            /* Decrement the age value of the entry in this ARP cache table row.
             * When the age reaches zero it is no longer considered valid. */
            ( xARPCache[ x ].ucAge )--;
 8007d36:	493b      	ldr	r1, [pc, #236]	; (8007e24 <vARPAgeCache+0x110>)
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4413      	add	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	440b      	add	r3, r1
 8007d44:	330a      	adds	r3, #10
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b2d8      	uxtb	r0, r3
 8007d4c:	4935      	ldr	r1, [pc, #212]	; (8007e24 <vARPAgeCache+0x110>)
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	4613      	mov	r3, r2
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	330a      	adds	r3, #10
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	701a      	strb	r2, [r3, #0]

            /* If the entry is not yet valid, then it is waiting an ARP
             * reply, and the ARP request should be retransmitted. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007d60:	4930      	ldr	r1, [pc, #192]	; (8007e24 <vARPAgeCache+0x110>)
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	330b      	adds	r3, #11
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10b      	bne.n	8007d8e <vARPAgeCache+0x7a>
            {
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007d76:	492b      	ldr	r1, [pc, #172]	; (8007e24 <vARPAgeCache+0x110>)
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	440b      	add	r3, r1
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f852 	bl	8007e30 <FreeRTOS_OutputARPRequest>
 8007d8c:	e015      	b.n	8007dba <vARPAgeCache+0xa6>
            }
            else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007d8e:	4925      	ldr	r1, [pc, #148]	; (8007e24 <vARPAgeCache+0x110>)
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	330a      	adds	r3, #10
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d80a      	bhi.n	8007dba <vARPAgeCache+0xa6>
            {
                /* This entry will get removed soon.  See if the MAC address is
                 * still valid to prevent this happening. */
                iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007da4:	491f      	ldr	r1, [pc, #124]	; (8007e24 <vARPAgeCache+0x110>)
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	4613      	mov	r3, r2
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 f83b 	bl	8007e30 <FreeRTOS_OutputARPRequest>
            else
            {
                /* The age has just ticked down, with nothing to do. */
            }

            if( xARPCache[ x ].ucAge == 0U )
 8007dba:	491a      	ldr	r1, [pc, #104]	; (8007e24 <vARPAgeCache+0x110>)
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	440b      	add	r3, r1
 8007dc8:	330a      	adds	r3, #10
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d108      	bne.n	8007de2 <vARPAgeCache+0xce>
            {
                /* The entry is no longer valid.  Wipe it out. */
                iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                xARPCache[ x ].ulIPAddress = 0UL;
 8007dd0:	4914      	ldr	r1, [pc, #80]	; (8007e24 <vARPAgeCache+0x110>)
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3301      	adds	r3, #1
 8007de6:	607b      	str	r3, [r7, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b05      	cmp	r3, #5
 8007dec:	dd98      	ble.n	8007d20 <vARPAgeCache+0xc>
            }
        }
    }

    xTimeNow = xTaskGetTickCount();
 8007dee:	f7fd ff7d 	bl	8005cec <xTaskGetTickCount>
 8007df2:	6038      	str	r0, [r7, #0]

    if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <vARPAgeCache+0x114>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <vARPAgeCache+0xf8>
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <vARPAgeCache+0x114>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d907      	bls.n	8007e1c <vARPAgeCache+0x108>
    {
        FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 8007e0c:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <vARPAgeCache+0x118>)
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 f80d 	bl	8007e30 <FreeRTOS_OutputARPRequest>
        xLastGratuitousARPTime = xTimeNow;
 8007e16:	4a04      	ldr	r2, [pc, #16]	; (8007e28 <vARPAgeCache+0x114>)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	6013      	str	r3, [r2, #0]
    }
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20024fb8 	.word	0x20024fb8
 8007e28:	20025000 	.word	0x20025000
 8007e2c:	20000018 	.word	0x20000018

08007e30 <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress: A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    /* This is called from the context of the IP event task, so a block time
     * must not be used. */
    pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8007e38:	2100      	movs	r1, #0
 8007e3a:	202a      	movs	r0, #42	; 0x2a
 8007e3c:	f009 fbda 	bl	80115f4 <pxGetNetworkBufferWithDescriptor>
 8007e40:	6138      	str	r0, [r7, #16]

    if( pxNetworkBuffer != NULL )
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d037      	beq.n	8007eb8 <FreeRTOS_OutputARPRequest+0x88>
    {
        pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	615a      	str	r2, [r3, #20]
        vARPGenerateRequestPacket( pxNetworkBuffer );
 8007e4e:	6938      	ldr	r0, [r7, #16]
 8007e50:	f000 f836 	bl	8007ec0 <vARPGenerateRequestPacket>

        #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	2b3b      	cmp	r3, #59	; 0x3b
 8007e5a:	d812      	bhi.n	8007e82 <FreeRTOS_OutputARPRequest+0x52>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	e008      	b.n	8007e76 <FreeRTOS_OutputARPRequest+0x46>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	699a      	ldr	r2, [r3, #24]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	3301      	adds	r3, #1
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b3b      	cmp	r3, #59	; 0x3b
 8007e7a:	ddf3      	ble.n	8007e64 <FreeRTOS_OutputARPRequest+0x34>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	223c      	movs	r2, #60	; 0x3c
 8007e80:	61da      	str	r2, [r3, #28]
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

        if( xIsCallingFromIPTask() != 0 )
 8007e82:	f001 f99b 	bl	80091bc <xIsCallingFromIPTask>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d004      	beq.n	8007e96 <FreeRTOS_OutputARPRequest+0x66>
        {
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            /* Only the IP-task is allowed to call this function directly. */
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	6938      	ldr	r0, [r7, #16]
 8007e90:	f008 fb78 	bl	8010584 <xNetworkInterfaceOutput>
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
            }
        }
    }
}
 8007e94:	e010      	b.n	8007eb8 <FreeRTOS_OutputARPRequest+0x88>
            xSendEvent.eEventType = eNetworkTxEvent;
 8007e96:	2302      	movs	r3, #2
 8007e98:	723b      	strb	r3, [r7, #8]
            xSendEvent.pvData = pxNetworkBuffer;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	60fb      	str	r3, [r7, #12]
            if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 fc1e 	bl	80096e8 <xSendEventStructToIPTask>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <FreeRTOS_OutputARPRequest+0x88>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007eb2:	6938      	ldr	r0, [r7, #16]
 8007eb4:	f009 fc18 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
}
 8007eb8:	bf00      	nop
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer: Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
    void * pvCopyDest;

    /* Buffer allocation ensures that buffers always have space
     * for an ARP packet. See buffer allocation implementations 1
     * and 2 under portable/BufferManagement. */
    configASSERT( pxNetworkBuffer != NULL );
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <vARPGenerateRequestPacket+0x18>
 8007ece:	4923      	ldr	r1, [pc, #140]	; (8007f5c <vARPGenerateRequestPacket+0x9c>)
 8007ed0:	f240 302a 	movw	r0, #810	; 0x32a
 8007ed4:	f7f8 fda7 	bl	8000a26 <vAssertCalled>
    configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	2b29      	cmp	r3, #41	; 0x29
 8007ede:	d804      	bhi.n	8007eea <vARPGenerateRequestPacket+0x2a>
 8007ee0:	491e      	ldr	r1, [pc, #120]	; (8007f5c <vARPGenerateRequestPacket+0x9c>)
 8007ee2:	f240 302b 	movw	r0, #811	; 0x32b
 8007ee6:	f7f8 fd9e 	bl	8000a26 <vAssertCalled>

    pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7ff fcc0 	bl	8007874 <vCastPointerTo_ARPPacket_t>
 8007ef4:	6178      	str	r0, [r7, #20]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = xDefaultPartARPPacketHeader;
 8007ef6:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <vARPGenerateRequestPacket+0xa0>)
 8007ef8:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8007efe:	2226      	movs	r2, #38	; 0x26
 8007f00:	6939      	ldr	r1, [r7, #16]
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f009 fc75 	bl	80117f2 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8007f08:	4b16      	ldr	r3, [pc, #88]	; (8007f64 <vARPGenerateRequestPacket+0xa4>)
 8007f0a:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	3306      	adds	r3, #6
 8007f10:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007f12:	2206      	movs	r2, #6
 8007f14:	6939      	ldr	r1, [r7, #16]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f009 fc6b 	bl	80117f2 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8007f1c:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <vARPGenerateRequestPacket+0xa4>)
 8007f1e:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	3316      	adds	r3, #22
 8007f24:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007f26:	2206      	movs	r2, #6
 8007f28:	6939      	ldr	r1, [r7, #16]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f009 fc61 	bl	80117f2 <memcpy>

    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 8007f30:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <vARPGenerateRequestPacket+0xa8>)
 8007f32:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	331c      	adds	r3, #28
 8007f38:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	601a      	str	r2, [r3, #0]
    pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	695a      	ldr	r2, [r3, #20]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

    pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	222a      	movs	r2, #42	; 0x2a
 8007f52:	61da      	str	r2, [r3, #28]

    iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8007f54:	bf00      	nop
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	08013a6c 	.word	0x08013a6c
 8007f60:	08015470 	.word	0x08015470
 8007f64:	20000018 	.word	0x20000018
 8007f68:	2000002c 	.word	0x2000002c

08007f6c <FreeRTOS_ClearARP>:

/**
 * @brief A call to this function will clear the ARP cache.
 */
void FreeRTOS_ClearARP( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
    ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007f70:	2248      	movs	r2, #72	; 0x48
 8007f72:	2100      	movs	r1, #0
 8007f74:	4802      	ldr	r0, [pc, #8]	; (8007f80 <FreeRTOS_ClearARP+0x14>)
 8007f76:	f009 fc60 	bl	801183a <memset>
}
 8007f7a:	bf00      	nop
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20024fb8 	.word	0x20024fb8

08007f84 <vCastPointerTo_UDPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xUDP_PACKET UDPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
    {
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 8007f8c:	687b      	ldr	r3, [r7, #4]
    }
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <usChar2u16>:
               ( ( ( uint32_t ) apChr[ 3 ] ) );
    }

    static portINLINE uint16_t usChar2u16( const uint8_t * apChr );
    static portINLINE uint16_t usChar2u16( const uint8_t * apChr )
    {
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
        return ( uint16_t )
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	b29a      	uxth	r2, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
        return ( uint16_t )
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	b29b      	uxth	r3, r3
    }
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <vCastPointerTo_DNSMessage_t>:
 * @brief Utility function to cast pointer of a type to pointer of type DNSMessage_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DNSMessage_t )
    {
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
        return ( DNSMessage_t * ) pvArgument;
 8007fcc:	687b      	ldr	r3, [r7, #4]
    }
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <vCastPointerTo_DNSAnswerRecord_t>:
 * @brief Utility function to cast pointer of a type to pointer of type DNSAnswerRecord_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DNSAnswerRecord_t )
    {
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
        return ( DNSAnswerRecord_t * ) pvArgument;
 8007fe2:	687b      	ldr	r3, [r7, #4]
    }
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <vCastPointerTo_LLMNRAnswer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type LLMNRAnswer_t.
 *
 * @return The casted pointer.
 */
        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( LLMNRAnswer_t )
        {
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
            return ( LLMNRAnswer_t * ) pvArgument;
 8007ff8:	687b      	ldr	r3, [r7, #4]
        }
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <vCastPointerTo_NBNSAnswer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NBNSAnswer_t.
 *
 * @return The casted pointer.
 */
        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NBNSAnswer_t )
        {
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
            return ( NBNSAnswer_t * ) pvArgument;
 800800e:	687b      	ldr	r3, [r7, #4]
        }
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <prvReadNameField>:
 */
        _static size_t prvReadNameField( const uint8_t * pucByte,
                                         size_t uxRemainingBytes,
                                         char * pcName,
                                         size_t uxDestLen )
        {
 800801c:	b480      	push	{r7}
 800801e:	b089      	sub	sp, #36	; 0x24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
            size_t uxNameLen = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	61fb      	str	r3, [r7, #28]
            size_t uxIndex = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	61bb      	str	r3, [r7, #24]
            size_t uxSourceLen = uxRemainingBytes;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	613b      	str	r3, [r7, #16]

            /* uxCount gets the values from pucByte and counts down to 0.
             * No need to have a different type than that of pucByte */
            size_t uxCount;

            if( uxSourceLen == ( size_t ) 0U )
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d102      	bne.n	8008042 <prvReadNameField+0x26>
            {
                /* Return 0 value in case of error. */
                uxIndex = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	61bb      	str	r3, [r7, #24]
 8008040:	e078      	b.n	8008134 <prvReadNameField+0x118>
            }

            /* Determine if the name is the fully coded name, or an offset to the name
             * elsewhere in the message. */
            else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	4413      	add	r3, r2
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800804e:	2bc0      	cmp	r3, #192	; 0xc0
 8008050:	d14a      	bne.n	80080e8 <prvReadNameField+0xcc>
            {
                /* Jump over the two byte offset. */
                if( uxSourceLen > sizeof( uint16_t ) )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d903      	bls.n	8008060 <prvReadNameField+0x44>
                {
                    uxIndex += sizeof( uint16_t );
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	3302      	adds	r3, #2
 800805c:	61bb      	str	r3, [r7, #24]
 800805e:	e069      	b.n	8008134 <prvReadNameField+0x118>
                }
                else
                {
                    uxIndex = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	e066      	b.n	8008134 <prvReadNameField+0x118>
                /* 'uxIndex' points to the full name. Walk over the string. */
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
                {
                    /* If this is not the first time through the loop, then add a
                     * separator in the output. */
                    if( ( uxNameLen > 0U ) )
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00e      	beq.n	800808a <prvReadNameField+0x6e>
                    {
                        if( uxNameLen >= uxDestLen )
 800806c:	69fa      	ldr	r2, [r7, #28]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d302      	bcc.n	800807a <prvReadNameField+0x5e>
                        {
                            uxIndex = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	61bb      	str	r3, [r7, #24]
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
 8008078:	e040      	b.n	80080fc <prvReadNameField+0xe0>
                        }

                        pcName[ uxNameLen ] = '.';
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	222e      	movs	r2, #46	; 0x2e
 8008082:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	3301      	adds	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
                    }

                    /* Process the first/next sub-string. */
                    uxCount = ( size_t ) pucByte[ uxIndex ];
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	4413      	add	r3, r2
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	617b      	str	r3, [r7, #20]
                    uxIndex++;
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	3301      	adds	r3, #1
 8008098:	61bb      	str	r3, [r7, #24]

                    if( ( uxIndex + uxCount ) > uxSourceLen )
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4413      	add	r3, r2
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d217      	bcs.n	80080d6 <prvReadNameField+0xba>
                    {
                        uxIndex = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	61bb      	str	r3, [r7, #24]
                        break;
 80080aa:	e027      	b.n	80080fc <prvReadNameField+0xe0>
                    }

                    while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
                    {
                        if( uxNameLen >= uxDestLen )
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d302      	bcc.n	80080ba <prvReadNameField+0x9e>
                        {
                            uxIndex = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	61bb      	str	r3, [r7, #24]
                            break;
 80080b8:	e016      	b.n	80080e8 <prvReadNameField+0xcc>

                            /* break out of inner loop here
                             * break out of outer loop at the test uxNameLen >= uxDestLen. */
                        }

                        pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	441a      	add	r2, r3
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	440b      	add	r3, r1
 80080c6:	7812      	ldrb	r2, [r2, #0]
 80080c8:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	3301      	adds	r3, #1
 80080ce:	61fb      	str	r3, [r7, #28]
                        uxIndex++;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	3301      	adds	r3, #1
 80080d4:	61bb      	str	r3, [r7, #24]
                    while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	1e5a      	subs	r2, r3, #1
 80080da:	617a      	str	r2, [r7, #20]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <prvReadNameField+0xcc>
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d3e1      	bcc.n	80080ac <prvReadNameField+0x90>
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d205      	bcs.n	80080fc <prvReadNameField+0xe0>
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	4413      	add	r3, r2
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1b4      	bne.n	8008066 <prvReadNameField+0x4a>
                    }
                }

                /* Confirm that a fully formed name was found. */
                if( uxIndex > 0U )
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d018      	beq.n	8008134 <prvReadNameField+0x118>
                {
                    if( ( uxNameLen < uxDestLen ) && ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] == 0U ) )
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d212      	bcs.n	8008130 <prvReadNameField+0x114>
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	429a      	cmp	r2, r3
 8008110:	d20e      	bcs.n	8008130 <prvReadNameField+0x114>
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	4413      	add	r3, r2
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d108      	bne.n	8008130 <prvReadNameField+0x114>
                    {
                        pcName[ uxNameLen ] = '\0';
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]
                        uxIndex++;
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	3301      	adds	r3, #1
 800812c:	61bb      	str	r3, [r7, #24]
 800812e:	e001      	b.n	8008134 <prvReadNameField+0x118>
                    }
                    else
                    {
                        uxIndex = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	61bb      	str	r3, [r7, #24]
                    }
                }
            }

            return uxIndex;
 8008134:	69bb      	ldr	r3, [r7, #24]
        }
 8008136:	4618      	mov	r0, r3
 8008138:	3724      	adds	r7, #36	; 0x24
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <prvSkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    _static size_t prvSkipNameField( const uint8_t * pucByte,
                                     size_t uxLength )
    {
 8008142:	b480      	push	{r7}
 8008144:	b087      	sub	sp, #28
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <prvSkipNameField+0x1e>
        {
            uxIndex = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	e03f      	b.n	80081e0 <prvSkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	4413      	add	r3, r2
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800816c:	2bc0      	cmp	r3, #192	; 0xc0
 800816e:	d11f      	bne.n	80081b0 <prvSkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d903      	bls.n	800817e <prvSkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	3302      	adds	r3, #2
 800817a:	613b      	str	r3, [r7, #16]
 800817c:	e030      	b.n	80081e0 <prvSkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	613b      	str	r3, [r7, #16]
 8008182:	e02d      	b.n	80081e0 <prvSkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	4413      	add	r3, r2
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	429a      	cmp	r2, r3
 8008196:	d908      	bls.n	80081aa <prvSkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	e002      	b.n	80081b0 <prvSkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	613b      	str	r3, [r7, #16]
                    break;
 80081ae:	e008      	b.n	80081c2 <prvSkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	4413      	add	r3, r2
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <prvSkipNameField+0x80>
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d8e0      	bhi.n	8008184 <prvSkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <prvSkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4413      	add	r3, r2
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d103      	bne.n	80081dc <prvSkipNameField+0x9a>
                {
                    uxIndex++;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	3301      	adds	r3, #1
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	e001      	b.n	80081e0 <prvSkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 80081e0:	693b      	ldr	r3, [r7, #16]
    }
 80081e2:	4618      	mov	r0, r3
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <ulDNSHandlePacket>:
 *
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	2b29      	cmp	r3, #41	; 0x29
 80081fc:	d90f      	bls.n	800821e <ulDNSHandlePacket+0x30>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	3b2a      	subs	r3, #42	; 0x2a
 8008204:	60fb      	str	r3, [r7, #12]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b0b      	cmp	r3, #11
 800820a:	d908      	bls.n	800821e <ulDNSHandlePacket+0x30>
            {
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	332a      	adds	r3, #42	; 0x2a
 8008212:	60bb      	str	r3, [r7, #8]

                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) prvParseDNSReply( pucPayLoadBuffer,
 8008214:	2200      	movs	r2, #0
 8008216:	68f9      	ldr	r1, [r7, #12]
 8008218:	68b8      	ldr	r0, [r7, #8]
 800821a:	f000 f821 	bl	8008260 <prvParseDNSReply>
                                           pdFALSE );
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 800821e:	2300      	movs	r3, #0
    }
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <ulNBNSHandlePacket>:
 * @param[in] pxNetworkBuffer: The network buffer holding the NBNS packet.
 *
 * @return pdFAIL to show that the packet was not consumed.
 */
        uint32_t ulNBNSHandlePacket( NetworkBufferDescriptor_t * pxNetworkBuffer )
        {
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
            UDPPacket_t * pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff fea5 	bl	8007f84 <vCastPointerTo_UDPPacket_t>
 800823a:	60f8      	str	r0, [r7, #12]
            uint8_t * pucUDPPayloadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( *pxUDPPacket ) ] );
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	332a      	adds	r3, #42	; 0x2a
 8008242:	60bb      	str	r3, [r7, #8]

            prvTreatNBNS( pucUDPPayloadBuffer,
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69d9      	ldr	r1, [r3, #28]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800824e:	461a      	mov	r2, r3
 8008250:	68b8      	ldr	r0, [r7, #8]
 8008252:	f000 fb3d 	bl	80088d0 <prvTreatNBNS>
                          pxNetworkBuffer->xDataLength,
                          pxUDPPacket->xIPHeader.ulSourceIPAddress );

            /* The packet was not consumed. */
            return pdFAIL;
 8008256:	2300      	movs	r3, #0
        }
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <prvParseDNSReply>:
 *         0 if xExpected set to pdFALSE.
 */
    _static uint32_t prvParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                       size_t uxBufferLength,
                                       BaseType_t xExpected )
    {
 8008260:	b580      	push	{r7, lr}
 8008262:	b0aa      	sub	sp, #168	; 0xa8
 8008264:	af02      	add	r7, sp, #8
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
        DNSMessage_t * pxDNSMessageHeader;
        /* This pointer is not used to modify anything */
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        uint32_t ulIPAddress = 0UL;
 800826c:	2300      	movs	r3, #0
 800826e:	637b      	str	r3, [r7, #52]	; 0x34

        #if ( ipconfigUSE_LLMNR == 1 )
            char * pcRequestedName = NULL;
 8008270:	2300      	movs	r3, #0
 8008272:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        #endif
        uint8_t * pucByte;
        size_t uxSourceBytesRemaining;
        uint16_t x, usDataLength, usQuestions;
        uint16_t usType = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        BaseType_t xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_LLMNR == 1 )
            uint16_t usClass = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        #endif
        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            BaseType_t xDoStore = xExpected;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	66bb      	str	r3, [r7, #104]	; 0x68
            char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = "";
 800828c:	2300      	movs	r3, #0
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
 8008290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	605a      	str	r2, [r3, #4]
 800829a:	609a      	str	r2, [r3, #8]
        #endif
        const size_t uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 800829c:	2304      	movs	r3, #4
 800829e:	667b      	str	r3, [r7, #100]	; 0x64

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b0b      	cmp	r3, #11
 80082a4:	d803      	bhi.n	80082ae <prvParseDNSReply+0x4e>
        {
            xReturn = pdFALSE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082ac:	e2fd      	b.n	80088aa <prvParseDNSReply+0x64a>
        }
        else
        {
            uxSourceBytesRemaining = uxBufferLength;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

            /* Parse the DNS message header. Map the byte stream onto a structure
             * for easier access. */
            pxDNSMessageHeader = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucUDPPayloadBuffer );
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff fe85 	bl	8007fc4 <vCastPointerTo_DNSMessage_t>
 80082ba:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                size_t uxResult;

                /* Start at the first byte after the header. */
                pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	330c      	adds	r3, #12
 80082c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 80082cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082d0:	3b0c      	subs	r3, #12
 80082d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Skip any question records. */
                usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 80082d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082da:	889b      	ldrh	r3, [r3, #4]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	021b      	lsls	r3, r3, #8
 80082e0:	b21a      	sxth	r2, r3
 80082e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082e6:	889b      	ldrh	r3, [r3, #4]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	0a1b      	lsrs	r3, r3, #8
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	b21b      	sxth	r3, r3
 80082f0:	4313      	orrs	r3, r2
 80082f2:	b21b      	sxth	r3, r3
 80082f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

                for( x = 0U; x < usQuestions; x++ )
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80082fe:	e077      	b.n	80083f0 <prvParseDNSReply+0x190>
                {
                    #if ( ipconfigUSE_LLMNR == 1 )
                        {
                            if( x == 0U )
 8008300:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008304:	2b00      	cmp	r3, #0
 8008306:	d103      	bne.n	8008310 <prvParseDNSReply+0xb0>
                            {
                                pcRequestedName = ( char * ) pucByte;
 8008308:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800830c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                            }
                        }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8008310:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008314:	2b00      	cmp	r3, #0
 8008316:	d123      	bne.n	8008360 <prvParseDNSReply+0x100>
                        {
                            uxResult = prvReadNameField( pucByte,
 8008318:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800831c:	2310      	movs	r3, #16
 800831e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008322:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008326:	f7ff fe79 	bl	800801c <prvReadNameField>
 800832a:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                         uxSourceBytesRemaining,
                                                         pcName,
                                                         sizeof( pcName ) );

                            /* Check for a malformed response. */
                            if( uxResult == 0U )
 800832c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <prvParseDNSReply+0xda>
                            {
                                xReturn = pdFALSE;
 8008332:	2300      	movs	r3, #0
 8008334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                break;
 8008338:	e060      	b.n	80083fc <prvParseDNSReply+0x19c>
                            }

                            uxBytesRead += uxResult;
 800833a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800833e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008340:	4413      	add	r3, r2
 8008342:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            pucByte = &( pucByte[ uxResult ] );
 8008346:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800834a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800834c:	4413      	add	r3, r2
 800834e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= uxResult;
 8008352:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800835e:	e01f      	b.n	80083a0 <prvParseDNSReply+0x140>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = prvSkipNameField( pucByte,
 8008360:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008364:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008368:	f7ff feeb 	bl	8008142 <prvSkipNameField>
 800836c:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                     uxSourceBytesRemaining );

                        /* Check for a malformed response. */
                        if( uxResult == 0U )
 800836e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <prvParseDNSReply+0x11c>
                        {
                            xReturn = pdFALSE;
 8008374:	2300      	movs	r3, #0
 8008376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800837a:	e03f      	b.n	80083fc <prvParseDNSReply+0x19c>
                        }

                        uxBytesRead += uxResult;
 800837c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008382:	4413      	add	r3, r2
 8008384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        pucByte = &( pucByte[ uxResult ] );
 8008388:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800838c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800838e:	4413      	add	r3, r2
 8008390:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= uxResult;
 8008394:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    }

                    /* Check the remaining buffer size. */
                    if( uxSourceBytesRemaining >= sizeof( uint32_t ) )
 80083a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d91a      	bls.n	80083de <prvParseDNSReply+0x17e>
                    {
                        #if ( ipconfigUSE_LLMNR == 1 )
                            {
                                /* usChar2u16 returns value in host endianness. */
                                usType = usChar2u16( pucByte );
 80083a8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80083ac:	f7ff fdf5 	bl	8007f9a <usChar2u16>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                                usClass = usChar2u16( &( pucByte[ 2 ] ) );
 80083b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083ba:	3302      	adds	r3, #2
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff fdec 	bl	8007f9a <usChar2u16>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                            }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        pucByte = &( pucByte[ sizeof( uint32_t ) ] );
 80083c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083cc:	3304      	adds	r3, #4
 80083ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= sizeof( uint32_t );
 80083d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083d6:	3b04      	subs	r3, #4
 80083d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083dc:	e003      	b.n	80083e6 <prvParseDNSReply+0x186>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 80083de:	2300      	movs	r3, #0
 80083e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        break;
 80083e4:	e00a      	b.n	80083fc <prvParseDNSReply+0x19c>
                for( x = 0U; x < usQuestions; x++ )
 80083e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80083ea:	3301      	adds	r3, #1
 80083ec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80083f0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80083f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d381      	bcc.n	8008300 <prvParseDNSReply+0xa0>
                    }
                }

                if( xReturn == pdFALSE )
 80083fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 824f 	beq.w	80088a4 <prvParseDNSReply+0x644>
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                /* Search through the answer records. */
                pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8008406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800840a:	88db      	ldrh	r3, [r3, #6]
 800840c:	b29b      	uxth	r3, r3
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	b21a      	sxth	r2, r3
 8008412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008416:	88db      	ldrh	r3, [r3, #6]
 8008418:	b29b      	uxth	r3, r3
 800841a:	0a1b      	lsrs	r3, r3, #8
 800841c:	b29b      	uxth	r3, r3
 800841e:	b21b      	sxth	r3, r3
 8008420:	4313      	orrs	r3, r2
 8008422:	b21b      	sxth	r3, r3
 8008424:	b29a      	uxth	r2, r3
 8008426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800842a:	80da      	strh	r2, [r3, #6]

                if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 800842c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008430:	885b      	ldrh	r3, [r3, #2]
 8008432:	b29b      	uxth	r3, r3
 8008434:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 8008438:	2b80      	cmp	r3, #128	; 0x80
 800843a:	f040 80ff 	bne.w	800863c <prvParseDNSReply+0x3dc>
                {
                    const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 800843e:	2301      	movs	r3, #1
 8008440:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                    uint16_t usNumARecordsStored = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 800844a:	2300      	movs	r3, #0
 800844c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008450:	e0ea      	b.n	8008628 <prvParseDNSReply+0x3c8>
                    {
                        BaseType_t xDoAccept;

                        if( usNumARecordsStored >= usCount )
 8008452:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008456:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800845a:	429a      	cmp	r2, r3
 800845c:	f080 8224 	bcs.w	80088a8 <prvParseDNSReply+0x648>
                        {
                            /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                            break;
                        }

                        uxResult = prvSkipNameField( pucByte,
 8008460:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008464:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008468:	f7ff fe6b 	bl	8008142 <prvSkipNameField>
 800846c:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                     uxSourceBytesRemaining );

                        /* Check for a malformed response. */
                        if( uxResult == 0U )
 800846e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <prvParseDNSReply+0x21c>
                        {
                            xReturn = pdFALSE;
 8008474:	2300      	movs	r3, #0
 8008476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800847a:	e216      	b.n	80088aa <prvParseDNSReply+0x64a>
                        }

                        uxBytesRead += uxResult;
 800847c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008482:	4413      	add	r3, r2
 8008484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        pucByte = &( pucByte[ uxResult ] );
 8008488:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800848c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848e:	4413      	add	r3, r2
 8008490:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= uxResult;
 8008494:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Is there enough data for an IPv4 A record answer and, if so,
                         * is this an A record? */
                        if( uxSourceBytesRemaining < sizeof( uint16_t ) )
 80084a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d803      	bhi.n	80084b0 <prvParseDNSReply+0x250>
                        {
                            xReturn = pdFALSE;
 80084a8:	2300      	movs	r3, #0
 80084aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 80084ae:	e1fc      	b.n	80088aa <prvParseDNSReply+0x64a>
                        }

                        usType = usChar2u16( pucByte );
 80084b0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80084b4:	f7ff fd71 	bl	8007f9a <usChar2u16>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

                        if( usType == ( uint16_t ) dnsTYPE_A_HOST )
 80084be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d10b      	bne.n	80084de <prvParseDNSReply+0x27e>
                        {
                            if( uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength ) )
 80084c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084c8:	330a      	adds	r3, #10
 80084ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d302      	bcc.n	80084d8 <prvParseDNSReply+0x278>
                            {
                                xDoAccept = pdTRUE;
 80084d2:	2301      	movs	r3, #1
 80084d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80084d6:	e004      	b.n	80084e2 <prvParseDNSReply+0x282>
                            }
                            else
                            {
                                xDoAccept = pdFALSE;
 80084d8:	2300      	movs	r3, #0
 80084da:	67bb      	str	r3, [r7, #120]	; 0x78
 80084dc:	e001      	b.n	80084e2 <prvParseDNSReply+0x282>
                            }
                        }
                        else
                        {
                            /* Unknown host type. */
                            xDoAccept = pdFALSE;
 80084de:	2300      	movs	r3, #0
 80084e0:	67bb      	str	r3, [r7, #120]	; 0x78
                        }

                        if( xDoAccept != pdFALSE )
 80084e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d05f      	beq.n	80085a8 <prvParseDNSReply+0x348>
                        {
                            /* This is the required record type and is of sufficient size. */

                            /* Mapping pucByte to a DNSAnswerRecord allows easy access of the
                             * fields of the structure. */
                            pxDNSAnswerRecord = ipCAST_PTR_TO_TYPE_PTR( DNSAnswerRecord_t, pucByte );
 80084e8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80084ec:	f7ff fd75 	bl	8007fda <vCastPointerTo_DNSAnswerRecord_t>
 80084f0:	6478      	str	r0, [r7, #68]	; 0x44

                            /* Sanity check the data length of an IPv4 answer. */
                            if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == ( uint16_t ) uxAddressLength )
 80084f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f4:	891b      	ldrh	r3, [r3, #8]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	021b      	lsls	r3, r3, #8
 80084fa:	b21a      	sxth	r2, r3
 80084fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084fe:	891b      	ldrh	r3, [r3, #8]
 8008500:	b29b      	uxth	r3, r3
 8008502:	0a1b      	lsrs	r3, r3, #8
 8008504:	b29b      	uxth	r3, r3
 8008506:	b21b      	sxth	r3, r3
 8008508:	4313      	orrs	r3, r2
 800850a:	b21b      	sxth	r3, r3
 800850c:	b29a      	uxth	r2, r3
 800850e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008510:	b29b      	uxth	r3, r3
 8008512:	429a      	cmp	r2, r3
 8008514:	d139      	bne.n	800858a <prvParseDNSReply+0x32a>
                                /*
                                 * Use helper variables for memcpy() to remain
                                 * compliant with MISRA Rule 21.15.  These should be
                                 * optimized away.
                                 */
                                pvCopySource = &pucByte[ sizeof( DNSAnswerRecord_t ) ];
 8008516:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800851a:	330a      	adds	r3, #10
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                pvCopyDest = &ulIPAddress;
 800851e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008522:	63bb      	str	r3, [r7, #56]	; 0x38
                                ( void ) memcpy( pvCopyDest, pvCopySource, uxAddressLength );
 8008524:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800852a:	f009 f962 	bl	80117f2 <memcpy>
                                    {
                                        char cBuffer[ 16 ];

                                        /* The reply will only be stored in the DNS cache when the
                                         * request was issued by this device. */
                                        if( xDoStore != pdFALSE )
 800852e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00d      	beq.n	8008550 <prvParseDNSReply+0x2f0>
                                        {
                                            ( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 8008534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800853c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008540:	2300      	movs	r3, #0
 8008542:	f000 fba1 	bl	8008c88 <prvProcessDNSCache>
                                            usNumARecordsStored++; /* Track # of A records stored */
 8008546:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800854a:	3301      	adds	r3, #1
 800854c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                                        }

                                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 8008550:	f107 0214 	add.w	r2, r7, #20
 8008554:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008558:	2310      	movs	r3, #16
 800855a:	2002      	movs	r0, #2
 800855c:	f002 fbe6 	bl	800ad2c <FreeRTOS_inet_ntop>
                                        /* Show what has happened. */
                                        FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 8008560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	4618      	mov	r0, r3
 800856a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <prvParseDNSReply+0x314>
 8008570:	4b61      	ldr	r3, [pc, #388]	; (80086f8 <prvParseDNSReply+0x498>)
 8008572:	e000      	b.n	8008576 <prvParseDNSReply+0x316>
 8008574:	4b61      	ldr	r3, [pc, #388]	; (80086fc <prvParseDNSReply+0x49c>)
 8008576:	f107 0114 	add.w	r1, r7, #20
 800857a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	460b      	mov	r3, r1
 8008582:	4601      	mov	r1, r0
 8008584:	485e      	ldr	r0, [pc, #376]	; (8008700 <prvParseDNSReply+0x4a0>)
 8008586:	f7f8 fa25 	bl	80009d4 <vLoggingPrintf>
                                                           ( xDoStore != 0 ) ? "" : " NOT" ) );
                                    }
                                #endif /* ipconfigUSE_DNS_CACHE */
                            }

                            pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) + uxAddressLength ] );
 800858a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800858c:	330a      	adds	r3, #10
 800858e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008592:	4413      	add	r3, r2
 8008594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength );
 8008598:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800859c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	3b0a      	subs	r3, #10
 80085a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085a6:	e03a      	b.n	800861e <prvParseDNSReply+0x3be>
                        }
                        else if( uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 80085a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085ac:	2b09      	cmp	r3, #9
 80085ae:	d936      	bls.n	800861e <prvParseDNSReply+0x3be>
                        {
                            /* It's not an A record, so skip it. Get the header location
                             * and then jump over the header. */
                            /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */
                            pxDNSAnswerRecord = ipCAST_PTR_TO_TYPE_PTR( DNSAnswerRecord_t, pucByte );
 80085b0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80085b4:	f7ff fd11 	bl	8007fda <vCastPointerTo_DNSAnswerRecord_t>
 80085b8:	6478      	str	r0, [r7, #68]	; 0x44

                            pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80085ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085be:	330a      	adds	r3, #10
 80085c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 80085c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085c8:	3b0a      	subs	r3, #10
 80085ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                            /* Determine the length of the answer data from the header. */
                            usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 80085ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d0:	891b      	ldrh	r3, [r3, #8]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	021b      	lsls	r3, r3, #8
 80085d6:	b21a      	sxth	r2, r3
 80085d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085da:	891b      	ldrh	r3, [r3, #8]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	0a1b      	lsrs	r3, r3, #8
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	b21b      	sxth	r3, r3
 80085e4:	4313      	orrs	r3, r2
 80085e6:	b21b      	sxth	r3, r3
 80085e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                            /* Jump over the answer. */
                            if( uxSourceBytesRemaining >= usDataLength )
 80085ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80085f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d30e      	bcc.n	8008616 <prvParseDNSReply+0x3b6>
                            {
                                pucByte = &( pucByte[ usDataLength ] );
 80085f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80085fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008600:	4413      	add	r3, r2
 8008602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                                uxSourceBytesRemaining -= usDataLength;
 8008606:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800860a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008614:	e003      	b.n	800861e <prvParseDNSReply+0x3be>
                            }
                            else
                            {
                                /* Malformed response. */
                                xReturn = pdFALSE;
 8008616:	2300      	movs	r3, #0
 8008618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                break;
 800861c:	e145      	b.n	80088aa <prvParseDNSReply+0x64a>
                    for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 800861e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008622:	3301      	adds	r3, #1
 8008624:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800862c:	88db      	ldrh	r3, [r3, #6]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008634:	429a      	cmp	r2, r3
 8008636:	f4ff af0c 	bcc.w	8008452 <prvParseDNSReply+0x1f2>
 800863a:	e136      	b.n	80088aa <prvParseDNSReply+0x64a>
                        }
                    }
                }

                #if ( ipconfigUSE_LLMNR == 1 )
                    else if( ( usQuestions != ( uint16_t ) 0U ) && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) && ( pcRequestedName != NULL ) )
 800863c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8132 	beq.w	80088aa <prvParseDNSReply+0x64a>
 8008646:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800864a:	2b01      	cmp	r3, #1
 800864c:	f040 812d 	bne.w	80088aa <prvParseDNSReply+0x64a>
 8008650:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008654:	2b01      	cmp	r3, #1
 8008656:	f040 8128 	bne.w	80088aa <prvParseDNSReply+0x64a>
 800865a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 8123 	beq.w	80088aa <prvParseDNSReply+0x64a>
                    {
                        /* If this is not a reply to our DNS request, it might an LLMNR
                         * request. */
                        if( xApplicationDNSQueryHook( &( pcRequestedName[ 1 ] ) ) != pdFALSE )
 8008664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008668:	3301      	adds	r3, #1
 800866a:	4618      	mov	r0, r3
 800866c:	f7f8 f9fa 	bl	8000a64 <xApplicationDNSQueryHook>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 8119 	beq.w	80088aa <prvParseDNSReply+0x64a>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	677b      	str	r3, [r7, #116]	; 0x74
                            NetworkBufferDescriptor_t * pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 ff18 	bl	80094b2 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008682:	6738      	str	r0, [r7, #112]	; 0x70
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008684:	2300      	movs	r3, #0
 8008686:	66fb      	str	r3, [r7, #108]	; 0x6c

                            if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8008688:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <prvParseDNSReply+0x4a4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d13d      	bne.n	800870c <prvParseDNSReply+0x4ac>
 8008690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008692:	2b00      	cmp	r3, #0
 8008694:	d03a      	beq.n	800870c <prvParseDNSReply+0x4ac>
                            {
                                size_t uxDataLength = uxBufferLength + sizeof( UDPHeader_t ) + sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	332a      	adds	r3, #42	; 0x2a
 800869a:	65bb      	str	r3, [r7, #88]	; 0x58

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 800869c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800869e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086a0:	61da      	str	r2, [r3, #28]
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, uxDataLength + sizeof( LLMNRAnswer_t ) );
 80086a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086a4:	3310      	adds	r3, #16
 80086a6:	4619      	mov	r1, r3
 80086a8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80086aa:	f000 fea7 	bl	80093fc <pxDuplicateNetworkBufferWithDescriptor>
 80086ae:	6778      	str	r0, [r7, #116]	; 0x74

                                if( pxNewBuffer != NULL )
 80086b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d028      	beq.n	8008708 <prvParseDNSReply+0x4a8>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 80086b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	657b      	str	r3, [r7, #84]	; 0x54
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 80086c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	653b      	str	r3, [r7, #80]	; 0x50

                                    pxNetworkBuffer = pxNewBuffer;
 80086ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086cc:	673b      	str	r3, [r7, #112]	; 0x70
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 80086ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	332a      	adds	r3, #42	; 0x2a
 80086d4:	66fb      	str	r3, [r7, #108]	; 0x6c

                                    pucByte = &( pucNewBuffer[ xOffset1 ] );
 80086d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086da:	4413      	add	r3, r2
 80086dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                                    pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 80086e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086e4:	4413      	add	r3, r2
 80086e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                                    pxDNSMessageHeader = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucNewBuffer );
 80086ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086ec:	f7ff fc6a 	bl	8007fc4 <vCastPointerTo_DNSMessage_t>
 80086f0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80086f4:	e00a      	b.n	800870c <prvParseDNSReply+0x4ac>
 80086f6:	bf00      	nop
 80086f8:	08013b88 	.word	0x08013b88
 80086fc:	08013b8c 	.word	0x08013b8c
 8008700:	08013b94 	.word	0x08013b94
 8008704:	080154f0 	.word	0x080154f0
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008708:	2300      	movs	r3, #0
 800870a:	673b      	str	r3, [r7, #112]	; 0x70
                                }
                            }

                            /* The test on 'pucNewBuffer' is only to satisfy lint. */
                            if( ( pxNetworkBuffer != NULL ) && ( pucNewBuffer != NULL ) )
 800870c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80cb 	beq.w	80088aa <prvParseDNSReply+0x64a>
 8008714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80c7 	beq.w	80088aa <prvParseDNSReply+0x64a>
                            {
                                pxAnswer = ipCAST_PTR_TO_TYPE_PTR( LLMNRAnswer_t, pucByte );
 800871c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008720:	f7ff fc66 	bl	8007ff0 <vCastPointerTo_LLMNRAnswer_t>
 8008724:	64f8      	str	r0, [r7, #76]	; 0x4c

                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                #ifndef _lint
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
 8008726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800872a:	3302      	adds	r3, #2
 800872c:	2280      	movs	r2, #128	; 0x80
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008734:	3303      	adds	r3, #3
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                       /* Provide a single answer */
 800873a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800873e:	3306      	adds	r3, #6
 8008740:	2200      	movs	r2, #0
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008748:	3307      	adds	r3, #7
 800874a:	2201      	movs	r2, #1
 800874c:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                  /* No authority */
 800874e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008752:	3308      	adds	r3, #8
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
 8008758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800875c:	3309      	adds	r3, #9
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                 /* No additional info */
 8008762:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008766:	330a      	adds	r3, #10
 8008768:	2200      	movs	r2, #0
 800876a:	701a      	strb	r2, [r3, #0]
 800876c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008770:	330b      	adds	r3, #11
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
                                #endif /* lint */

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8008776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008778:	22c0      	movs	r2, #192	; 0xc0
 800877a:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( pcRequestedName - ( char * ) pucNewBuffer );
 800877c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	b2da      	uxtb	r2, r3
 8008786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008788:	705a      	strb	r2, [r3, #1]

                                #ifndef _lint
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 800878a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878c:	3302      	adds	r3, #2
 800878e:	2200      	movs	r2, #0
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008794:	3303      	adds	r3, #3
 8008796:	2201      	movs	r2, #1
 8008798:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );   /* 1: Class IN */
 800879a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879c:	3304      	adds	r3, #4
 800879e:	2200      	movs	r2, #0
 80087a0:	701a      	strb	r2, [r3, #0]
 80087a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a4:	3305      	adds	r3, #5
 80087a6:	2201      	movs	r2, #1
 80087a8:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 80087aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ac:	3306      	adds	r3, #6
 80087ae:	2200      	movs	r2, #0
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b4:	3307      	adds	r3, #7
 80087b6:	2204      	movs	r2, #4
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087bc:	3308      	adds	r3, #8
 80087be:	2293      	movs	r2, #147	; 0x93
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c4:	3309      	adds	r3, #9
 80087c6:	22e0      	movs	r2, #224	; 0xe0
 80087c8:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 80087ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087cc:	330a      	adds	r3, #10
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d4:	330b      	adds	r3, #11
 80087d6:	2204      	movs	r2, #4
 80087d8:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 80087da:	4b3c      	ldr	r3, [pc, #240]	; (80088cc <prvParseDNSReply+0x66c>)
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	061a      	lsls	r2, r3, #24
 80087e0:	4b3a      	ldr	r3, [pc, #232]	; (80088cc <prvParseDNSReply+0x66c>)
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087ea:	431a      	orrs	r2, r3
 80087ec:	4b37      	ldr	r3, [pc, #220]	; (80088cc <prvParseDNSReply+0x66c>)
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	0a1b      	lsrs	r3, r3, #8
 80087f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087f6:	431a      	orrs	r2, r3
 80087f8:	4b34      	ldr	r3, [pc, #208]	; (80088cc <prvParseDNSReply+0x66c>)
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	0e1b      	lsrs	r3, r3, #24
 80087fe:	4313      	orrs	r3, r2
 8008800:	0e1a      	lsrs	r2, r3, #24
 8008802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008804:	330c      	adds	r3, #12
 8008806:	b2d2      	uxtb	r2, r2
 8008808:	701a      	strb	r2, [r3, #0]
 800880a:	4b30      	ldr	r3, [pc, #192]	; (80088cc <prvParseDNSReply+0x66c>)
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	061a      	lsls	r2, r3, #24
 8008810:	4b2e      	ldr	r3, [pc, #184]	; (80088cc <prvParseDNSReply+0x66c>)
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	021b      	lsls	r3, r3, #8
 8008816:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800881a:	431a      	orrs	r2, r3
 800881c:	4b2b      	ldr	r3, [pc, #172]	; (80088cc <prvParseDNSReply+0x66c>)
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	0a1b      	lsrs	r3, r3, #8
 8008822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008826:	431a      	orrs	r2, r3
 8008828:	4b28      	ldr	r3, [pc, #160]	; (80088cc <prvParseDNSReply+0x66c>)
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	4313      	orrs	r3, r2
 8008830:	0c1a      	lsrs	r2, r3, #16
 8008832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008834:	330d      	adds	r3, #13
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]
 800883a:	4b24      	ldr	r3, [pc, #144]	; (80088cc <prvParseDNSReply+0x66c>)
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	061a      	lsls	r2, r3, #24
 8008840:	4b22      	ldr	r3, [pc, #136]	; (80088cc <prvParseDNSReply+0x66c>)
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	021b      	lsls	r3, r3, #8
 8008846:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800884a:	431a      	orrs	r2, r3
 800884c:	4b1f      	ldr	r3, [pc, #124]	; (80088cc <prvParseDNSReply+0x66c>)
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	0a1b      	lsrs	r3, r3, #8
 8008852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008856:	431a      	orrs	r2, r3
 8008858:	4b1c      	ldr	r3, [pc, #112]	; (80088cc <prvParseDNSReply+0x66c>)
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	0e1b      	lsrs	r3, r3, #24
 800885e:	4313      	orrs	r3, r2
 8008860:	0a1a      	lsrs	r2, r3, #8
 8008862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008864:	330e      	adds	r3, #14
 8008866:	b2d2      	uxtb	r2, r2
 8008868:	701a      	strb	r2, [r3, #0]
 800886a:	4b18      	ldr	r3, [pc, #96]	; (80088cc <prvParseDNSReply+0x66c>)
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	0e1a      	lsrs	r2, r3, #24
 8008870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008872:	330f      	adds	r3, #15
 8008874:	b2d2      	uxtb	r2, r2
 8008876:	701a      	strb	r2, [r3, #0]
                                #endif /* lint */
                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 8008878:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800887c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	b29b      	uxth	r3, r3
 8008882:	3310      	adds	r3, #16
 8008884:	b29b      	uxth	r3, r3
 8008886:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

                                prvReplyDNSMessage( pxNetworkBuffer, usLength );
 800888a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800888e:	4619      	mov	r1, r3
 8008890:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008892:	f000 f98b 	bl	8008bac <prvReplyDNSMessage>

                                if( pxNewBuffer != NULL )
 8008896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008898:	2b00      	cmp	r3, #0
 800889a:	d006      	beq.n	80088aa <prvParseDNSReply+0x64a>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 800889c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800889e:	f008 ff23 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
 80088a2:	e002      	b.n	80088aa <prvParseDNSReply+0x64a>
                    break;
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <prvParseDNSReply+0x64a>
                            break;
 80088a8:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 80088aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <prvParseDNSReply+0x658>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = dnsPARSE_ERROR;
 80088b2:	2300      	movs	r3, #0
 80088b4:	637b      	str	r3, [r7, #52]	; 0x34
 80088b6:	e004      	b.n	80088c2 <prvParseDNSReply+0x662>
        }
        else if( xExpected == pdFALSE )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <prvParseDNSReply+0x662>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0UL;
 80088be:	2300      	movs	r3, #0
 80088c0:	637b      	str	r3, [r7, #52]	; 0x34

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            ( void ) xDoStore;
        #endif

        return ulIPAddress;
 80088c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80088c4:	4618      	mov	r0, r3
 80088c6:	37a0      	adds	r7, #160	; 0xa0
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	20000018 	.word	0x20000018

080088d0 <prvTreatNBNS>:
 * @param[in] ulIPAddress: IP address of the sender.
 */
        static void prvTreatNBNS( uint8_t * pucPayload,
                                  size_t uxBufferLength,
                                  uint32_t ulIPAddress )
        {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b094      	sub	sp, #80	; 0x50
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
            uint16_t usFlags, usType, usClass;
            uint8_t * pucSource, * pucTarget;
            uint8_t ucByte;
            uint8_t ucNBNSName[ 17 ];
            uint8_t * pucUDPPayloadBuffer = pucPayload;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	643b      	str	r3, [r7, #64]	; 0x40
            NetworkBufferDescriptor_t * pxNetworkBuffer;
            size_t uxBytesNeeded = sizeof( UDPPacket_t ) + sizeof( NBNSRequest_t );
 80088e0:	235c      	movs	r3, #92	; 0x5c
 80088e2:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Check for minimum buffer size. */
            if( uxBufferLength < uxBytesNeeded )
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	429a      	cmp	r2, r3
 80088ea:	f0c0 8157 	bcc.w	8008b9c <prvTreatNBNS+0x2cc>
            {
                return;
            }

            /* Read the request flags in host endianness. */
            usFlags = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usFlags ) ] ) );
 80088ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f0:	3302      	adds	r3, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fb51 	bl	8007f9a <usChar2u16>
 80088f8:	4603      	mov	r3, r0
 80088fa:	86fb      	strh	r3, [r7, #54]	; 0x36

            if( ( usFlags & dnsNBNS_FLAGS_OPCODE_MASK ) == dnsNBNS_FLAGS_OPCODE_QUERY )
 80088fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088fe:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8008902:	2b00      	cmp	r3, #0
 8008904:	f040 814b 	bne.w	8008b9e <prvTreatNBNS+0x2ce>
            {
                usType = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usType ) ] ) );
 8008908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800890a:	332e      	adds	r3, #46	; 0x2e
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff fb44 	bl	8007f9a <usChar2u16>
 8008912:	4603      	mov	r3, r0
 8008914:	86bb      	strh	r3, [r7, #52]	; 0x34
                usClass = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usClass ) ] ) );
 8008916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008918:	3330      	adds	r3, #48	; 0x30
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fb3d 	bl	8007f9a <usChar2u16>
 8008920:	4603      	mov	r3, r0
 8008922:	867b      	strh	r3, [r7, #50]	; 0x32
                /* Not used for now */
                ( void ) usClass;

                /* For NBNS a name is 16 bytes long, written with capitals only.
                 * Make sure that the copy is terminated with a zero. */
                pucTarget = &( ucNBNSName[ sizeof( ucNBNSName ) - 2U ] );
 8008924:	f107 0310 	add.w	r3, r7, #16
 8008928:	330f      	adds	r3, #15
 800892a:	64bb      	str	r3, [r7, #72]	; 0x48
                pucTarget[ 1 ] = ( uint8_t ) 0U;
 800892c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800892e:	3301      	adds	r3, #1
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]

                /* Start with decoding the last 2 bytes. */
                pucSource = &( pucUDPPayloadBuffer[ ( dnsNBNS_ENCODED_NAME_LENGTH - 2 ) + offsetof( NBNSRequest_t, ucName ) ] );
 8008934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008936:	332b      	adds	r3, #43	; 0x2b
 8008938:	64fb      	str	r3, [r7, #76]	; 0x4c

                for( ; ; )
                {
                    const uint8_t ucCharA = ( uint8_t ) 0x41U;
 800893a:	2341      	movs	r3, #65	; 0x41
 800893c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                    ucByte = ( ( uint8_t ) ( ( pucSource[ 0 ] - ucCharA ) << 4 ) ) | ( pucSource[ 1 ] - ucCharA );
 8008940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008942:	781a      	ldrb	r2, [r3, #0]
 8008944:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	b2db      	uxtb	r3, r3
 800894c:	011b      	lsls	r3, r3, #4
 800894e:	b2db      	uxtb	r3, r3
 8008950:	b25a      	sxtb	r2, r3
 8008952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008954:	3301      	adds	r3, #1
 8008956:	7819      	ldrb	r1, [r3, #0]
 8008958:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800895c:	1acb      	subs	r3, r1, r3
 800895e:	b2db      	uxtb	r3, r3
 8008960:	b25b      	sxtb	r3, r3
 8008962:	4313      	orrs	r3, r2
 8008964:	b25b      	sxtb	r3, r3
 8008966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

                    /* Make sure there are no trailing spaces in the name. */
                    if( ( ucByte == ( uint8_t ) ' ' ) && ( pucTarget[ 1 ] == 0U ) )
 800896a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800896e:	2b20      	cmp	r3, #32
 8008970:	d107      	bne.n	8008982 <prvTreatNBNS+0xb2>
 8008972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008974:	3301      	adds	r3, #1
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <prvTreatNBNS+0xb2>
                    {
                        ucByte = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    }

                    *pucTarget = ucByte;
 8008982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008984:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008988:	701a      	strb	r2, [r3, #0]

                    if( pucTarget == ucNBNSName )
 800898a:	f107 0310 	add.w	r3, r7, #16
 800898e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008990:	429a      	cmp	r2, r3
 8008992:	d006      	beq.n	80089a2 <prvTreatNBNS+0xd2>
                    {
                        break;
                    }

                    pucTarget -= 1;
 8008994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008996:	3b01      	subs	r3, #1
 8008998:	64bb      	str	r3, [r7, #72]	; 0x48
                    pucSource -= 2;
 800899a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800899c:	3b02      	subs	r3, #2
 800899e:	64fb      	str	r3, [r7, #76]	; 0x4c
                {
 80089a0:	e7cb      	b.n	800893a <prvTreatNBNS+0x6a>
                        break;
 80089a2:	bf00      	nop
                }

                #if ( ipconfigUSE_DNS_CACHE == 1 )
                    {
                        if( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) != 0U )
 80089a4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	da06      	bge.n	80089ba <prvTreatNBNS+0xea>
                        {
                            /* If this is a response from another device,
                             * add the name to the DNS cache */
                            ( void ) prvProcessDNSCache( ( char * ) ucNBNSName, &( ulIPAddress ), 0, pdFALSE );
 80089ac:	1d39      	adds	r1, r7, #4
 80089ae:	f107 0010 	add.w	r0, r7, #16
 80089b2:	2300      	movs	r3, #0
 80089b4:	2200      	movs	r2, #0
 80089b6:	f000 f967 	bl	8008c88 <prvProcessDNSCache>
                        /* Avoid compiler warnings. */
                        ( void ) ulIPAddress;
                    }
                #endif /* ipconfigUSE_DNS_CACHE */

                if( ( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) == 0U ) &&
 80089ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f2c0 80ed 	blt.w	8008b9e <prvTreatNBNS+0x2ce>
 80089c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	f040 80e9 	bne.w	8008b9e <prvTreatNBNS+0x2ce>
                    ( usType == dnsNBNS_TYPE_NET_BIOS ) &&
                    ( xApplicationDNSQueryHook( ( const char * ) ucNBNSName ) != pdFALSE ) )
 80089cc:	f107 0310 	add.w	r3, r7, #16
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7f8 f847 	bl	8000a64 <xApplicationDNSQueryHook>
 80089d6:	4603      	mov	r3, r0
                    ( usType == dnsNBNS_TYPE_NET_BIOS ) &&
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 80e0 	beq.w	8008b9e <prvTreatNBNS+0x2ce>
                    DNSMessage_t * pxMessage;
                    NBNSAnswer_t * pxAnswer;

                    /* Someone is looking for a device with ucNBNSName,
                     * prepare a positive reply. */
                    pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 80089de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80089e0:	f000 fd67 	bl	80094b2 <pxUDPPayloadBuffer_to_NetworkBuffer>
 80089e4:	63f8      	str	r0, [r7, #60]	; 0x3c

                    if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 80089e6:	4b6f      	ldr	r3, [pc, #444]	; (8008ba4 <prvTreatNBNS+0x2d4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d116      	bne.n	8008a1c <prvTreatNBNS+0x14c>
 80089ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d013      	beq.n	8008a1c <prvTreatNBNS+0x14c>
                    {
                        NetworkBufferDescriptor_t * pxNewBuffer;

                        /* The field xDataLength was set to the total length of the UDP packet,
                         * i.e. the payload size plus sizeof( UDPPacket_t ). */
                        pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength + sizeof( NBNSAnswer_t ) );
 80089f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	3310      	adds	r3, #16
 80089fa:	4619      	mov	r1, r3
 80089fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80089fe:	f000 fcfd 	bl	80093fc <pxDuplicateNetworkBufferWithDescriptor>
 8008a02:	62f8      	str	r0, [r7, #44]	; 0x2c

                        if( pxNewBuffer != NULL )
 8008a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d006      	beq.n	8008a18 <prvTreatNBNS+0x148>
                        {
                            pucUDPPayloadBuffer = &( pxNewBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	332a      	adds	r3, #42	; 0x2a
 8008a10:	643b      	str	r3, [r7, #64]	; 0x40
                            pxNetworkBuffer = pxNewBuffer;
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a16:	e001      	b.n	8008a1c <prvTreatNBNS+0x14c>
                        }
                        else
                        {
                            /* Just prevent that a reply will be sent */
                            pxNetworkBuffer = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Should not occur: pucUDPPayloadBuffer is part of a xNetworkBufferDescriptor */
                    if( pxNetworkBuffer != NULL )
 8008a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 80bd 	beq.w	8008b9e <prvTreatNBNS+0x2ce>
                    {
                        pxMessage = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucUDPPayloadBuffer );
 8008a24:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008a26:	f7ff facd 	bl	8007fc4 <vCastPointerTo_DNSMessage_t>
 8008a2a:	62b8      	str	r0, [r7, #40]	; 0x28

                        /* As the fields in the structures are not word-aligned, we have to
                         * copy the values byte-by-byte using macro's vSetField16() and vSetField32() */
                        #ifndef _lint
                            vSetField16( pxMessage, DNSMessage_t, usFlags, dnsNBNS_QUERY_RESPONSE_FLAGS ); /* 0x8500 */
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	3302      	adds	r3, #2
 8008a30:	2285      	movs	r2, #133	; 0x85
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	3303      	adds	r3, #3
 8008a38:	2200      	movs	r2, #0
 8008a3a:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usQuestions, 0 );
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	3304      	adds	r3, #4
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
 8008a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a46:	3305      	adds	r3, #5
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAnswers, 1 );
 8008a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4e:	3306      	adds	r3, #6
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	3307      	adds	r3, #7
 8008a58:	2201      	movs	r2, #1
 8008a5a:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAuthorityRRs, 0 );
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	3308      	adds	r3, #8
 8008a60:	2200      	movs	r2, #0
 8008a62:	701a      	strb	r2, [r3, #0]
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	3309      	adds	r3, #9
 8008a68:	2200      	movs	r2, #0
 8008a6a:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAdditionalRRs, 0 );
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	330a      	adds	r3, #10
 8008a70:	2200      	movs	r2, #0
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	330b      	adds	r3, #11
 8008a78:	2200      	movs	r2, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
                        #else
                            ( void ) pxMessage;
                        #endif

                        pxAnswer = ipCAST_PTR_TO_TYPE_PTR( NBNSAnswer_t, &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usType ) ] ) );
 8008a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a7e:	332e      	adds	r3, #46	; 0x2e
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff fac0 	bl	8008006 <vCastPointerTo_NBNSAnswer_t>
 8008a86:	6278      	str	r0, [r7, #36]	; 0x24

                        #ifndef _lint
                            vSetField16( pxAnswer, NBNSAnswer_t, usType, usType );            /* Type */
 8008a88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a8a:	0a1b      	lsrs	r3, r3, #8
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	3301      	adds	r3, #1
 8008a98:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usClass, dnsNBNS_CLASS_IN ); /* Class */
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	3302      	adds	r3, #2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	701a      	strb	r2, [r3, #0]
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	3303      	adds	r3, #3
 8008aaa:	2201      	movs	r2, #1
 8008aac:	701a      	strb	r2, [r3, #0]
                            vSetField32( pxAnswer, NBNSAnswer_t, ulTTL, dnsNBNS_TTL_VALUE );
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	3305      	adds	r3, #5
 8008aba:	2200      	movs	r2, #0
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	3306      	adds	r3, #6
 8008ac2:	220e      	movs	r2, #14
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	3307      	adds	r3, #7
 8008aca:	2210      	movs	r2, #16
 8008acc:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usDataLength, 6 );           /* 6 bytes including the length field */
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	3309      	adds	r3, #9
 8008ada:	2206      	movs	r2, #6
 8008adc:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usNbFlags, dnsNBNS_NAME_FLAGS );
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	330a      	adds	r3, #10
 8008ae2:	2260      	movs	r2, #96	; 0x60
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	330b      	adds	r3, #11
 8008aea:	2200      	movs	r2, #0
 8008aec:	701a      	strb	r2, [r3, #0]
                            vSetField32( pxAnswer, NBNSAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8008aee:	4b2e      	ldr	r3, [pc, #184]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	061a      	lsls	r2, r3, #24
 8008af4:	4b2c      	ldr	r3, [pc, #176]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008afe:	431a      	orrs	r2, r3
 8008b00:	4b29      	ldr	r3, [pc, #164]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	0a1b      	lsrs	r3, r3, #8
 8008b06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	4b26      	ldr	r3, [pc, #152]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	0e1b      	lsrs	r3, r3, #24
 8008b12:	4313      	orrs	r3, r2
 8008b14:	0e1a      	lsrs	r2, r3, #24
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	330c      	adds	r3, #12
 8008b1a:	b2d2      	uxtb	r2, r2
 8008b1c:	701a      	strb	r2, [r3, #0]
 8008b1e:	4b22      	ldr	r3, [pc, #136]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	061a      	lsls	r2, r3, #24
 8008b24:	4b20      	ldr	r3, [pc, #128]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	4b1d      	ldr	r3, [pc, #116]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	0a1b      	lsrs	r3, r3, #8
 8008b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	0e1b      	lsrs	r3, r3, #24
 8008b42:	4313      	orrs	r3, r2
 8008b44:	0c1a      	lsrs	r2, r3, #16
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	330d      	adds	r3, #13
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	4b16      	ldr	r3, [pc, #88]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	061a      	lsls	r2, r3, #24
 8008b54:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	4b11      	ldr	r3, [pc, #68]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	0a1b      	lsrs	r3, r3, #8
 8008b66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	0e1b      	lsrs	r3, r3, #24
 8008b72:	4313      	orrs	r3, r2
 8008b74:	0a1a      	lsrs	r2, r3, #8
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	330e      	adds	r3, #14
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <prvTreatNBNS+0x2d8>)
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	0e1a      	lsrs	r2, r3, #24
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	330f      	adds	r3, #15
 8008b88:	b2d2      	uxtb	r2, r2
 8008b8a:	701a      	strb	r2, [r3, #0]
                        #else
                            ( void ) pxAnswer;
                        #endif

                        usLength = ( uint16_t ) ( sizeof( NBNSAnswer_t ) + ( size_t ) offsetof( NBNSRequest_t, usType ) );
 8008b8c:	233e      	movs	r3, #62	; 0x3e
 8008b8e:	847b      	strh	r3, [r7, #34]	; 0x22

                        prvReplyDNSMessage( pxNetworkBuffer, ( BaseType_t ) usLength );
 8008b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b92:	4619      	mov	r1, r3
 8008b94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008b96:	f000 f809 	bl	8008bac <prvReplyDNSMessage>
 8008b9a:	e000      	b.n	8008b9e <prvTreatNBNS+0x2ce>
                return;
 8008b9c:	bf00      	nop
                    }
                }
            }
        }
 8008b9e:	3750      	adds	r7, #80	; 0x50
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	080154f0 	.word	0x080154f0
 8008ba8:	20000018 	.word	0x20000018

08008bac <prvReplyDNSMessage>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the DNS message.
 * @param[in] lNetLength: The length of the DNS message.
 */
        static void prvReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                        BaseType_t lNetLength )
        {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;

            pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff f9e2 	bl	8007f84 <vCastPointerTo_UDPPacket_t>
 8008bc0:	61f8      	str	r0, [r7, #28]
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	330e      	adds	r3, #14
 8008bc6:	61bb      	str	r3, [r7, #24]
            pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	3322      	adds	r3, #34	; 0x22
 8008bcc:	617b      	str	r3, [r7, #20]
            /* HT: started using defines like 'ipSIZE_OF_xxx' */
            pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	331c      	adds	r3, #28
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	021b      	lsls	r3, r3, #8
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	331c      	adds	r3, #28
 8008be0:	0a1b      	lsrs	r3, r3, #8
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	805a      	strh	r2, [r3, #2]
            /* HT:endian: should not be translated, copying from packet to packet */
            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8008bf4:	4b22      	ldr	r3, [pc, #136]	; (8008c80 <prvReplyDNSMessage+0xd4>)
 8008bf6:	695a      	ldr	r2, [r3, #20]
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	60da      	str	r2, [r3, #12]
            pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	2280      	movs	r2, #128	; 0x80
 8008c00:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8008c02:	4b20      	ldr	r3, [pc, #128]	; (8008c84 <prvReplyDNSMessage+0xd8>)
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	021b      	lsls	r3, r3, #8
 8008c08:	b21a      	sxth	r2, r3
 8008c0a:	4b1e      	ldr	r3, [pc, #120]	; (8008c84 <prvReplyDNSMessage+0xd8>)
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	0a1b      	lsrs	r3, r3, #8
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	b21b      	sxth	r3, r3
 8008c14:	4313      	orrs	r3, r2
 8008c16:	b21b      	sxth	r3, r3
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8008c1e:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <prvReplyDNSMessage+0xd8>)
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	3301      	adds	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	4b17      	ldr	r3, [pc, #92]	; (8008c84 <prvReplyDNSMessage+0xd8>)
 8008c28:	801a      	strh	r2, [r3, #0]
            pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3308      	adds	r3, #8
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	021b      	lsls	r3, r3, #8
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	809a      	strh	r2, [r3, #4]
            vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	021b      	lsls	r3, r3, #8
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	827b      	strh	r3, [r7, #18]
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	885b      	ldrh	r3, [r3, #2]
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	801a      	strh	r2, [r3, #0]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	8a7a      	ldrh	r2, [r7, #18]
 8008c60:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent */
            uxDataLength = ( ( size_t ) lNetLength ) + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	332a      	adds	r3, #42	; 0x2a
 8008c66:	60fb      	str	r3, [r7, #12]
                    ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
                }
            #endif

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	61da      	str	r2, [r3, #28]

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008c6e:	2100      	movs	r1, #0
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 f931 	bl	8009ed8 <vReturnEthernetFrame>
        }
 8008c76:	bf00      	nop
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000018 	.word	0x20000018
 8008c84:	2002507c 	.word	0x2002507c

08008c88 <prvProcessDNSCache>:
 */
        static BaseType_t prvProcessDNSCache( const char * pcName,
                                              uint32_t * pulIP,
                                              uint32_t ulTTL,
                                              BaseType_t xLookUp )
        {
 8008c88:	b590      	push	{r4, r7, lr}
 8008c8a:	b089      	sub	sp, #36	; 0x24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	603b      	str	r3, [r7, #0]
            BaseType_t x;
            BaseType_t xFound = pdFALSE;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61bb      	str	r3, [r7, #24]
            uint32_t ulCurrentTimeSeconds = ( xTaskGetTickCount() / portTICK_PERIOD_MS ) / 1000UL;
 8008c9a:	f7fd f827 	bl	8005cec <xTaskGetTickCount>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4b8f      	ldr	r3, [pc, #572]	; (8008ee0 <prvProcessDNSCache+0x258>)
 8008ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ca6:	099b      	lsrs	r3, r3, #6
 8008ca8:	617b      	str	r3, [r7, #20]
            uint32_t ulIPAddressIndex = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	613b      	str	r3, [r7, #16]
            static BaseType_t xFreeEntry = 0;

            configASSERT( ( pcName != NULL ) );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d104      	bne.n	8008cbe <prvProcessDNSCache+0x36>
 8008cb4:	498b      	ldr	r1, [pc, #556]	; (8008ee4 <prvProcessDNSCache+0x25c>)
 8008cb6:	f240 70d5 	movw	r0, #2005	; 0x7d5
 8008cba:	f7f7 feb4 	bl	8000a26 <vAssertCalled>

            /* For each entry in the DNS cache table. */
            for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]
 8008cc2:	e096      	b.n	8008df2 <prvProcessDNSCache+0x16a>
            {
                if( xDNSCache[ x ].pcName[ 0 ] == ( char ) 0 )
 8008cc4:	4988      	ldr	r1, [pc, #544]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 8087 	beq.w	8008dea <prvProcessDNSCache+0x162>
                {
                    continue;
                }

                if( strcmp( xDNSCache[ x ].pcName, pcName ) == 0 )
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4a80      	ldr	r2, [pc, #512]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008ce8:	4413      	add	r3, r2
 8008cea:	3304      	adds	r3, #4
 8008cec:	68f9      	ldr	r1, [r7, #12]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7f7 faa6 	bl	8000240 <strcmp>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d178      	bne.n	8008dec <prvProcessDNSCache+0x164>
                {
                    /* Is this function called for a lookup or to add/update an IP address? */
                    if( xLookUp != pdFALSE )
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d052      	beq.n	8008da6 <prvProcessDNSCache+0x11e>
                    {
                        /* Confirm that the record is still fresh. */
                        if( ulCurrentTimeSeconds < ( xDNSCache[ x ].ulTimeWhenAddedInSeconds + FreeRTOS_ntohl( xDNSCache[ x ].ulTTL ) ) )
 8008d00:	4979      	ldr	r1, [pc, #484]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	4613      	mov	r3, r2
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	1a9b      	subs	r3, r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	3318      	adds	r3, #24
 8008d10:	6819      	ldr	r1, [r3, #0]
 8008d12:	4875      	ldr	r0, [pc, #468]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008d14:	69fa      	ldr	r2, [r7, #28]
 8008d16:	4613      	mov	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	1a9b      	subs	r3, r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4403      	add	r3, r0
 8008d20:	3314      	adds	r3, #20
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	0618      	lsls	r0, r3, #24
 8008d26:	4c70      	ldr	r4, [pc, #448]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4423      	add	r3, r4
 8008d34:	3314      	adds	r3, #20
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	021b      	lsls	r3, r3, #8
 8008d3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d3e:	4318      	orrs	r0, r3
 8008d40:	4c69      	ldr	r4, [pc, #420]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	4613      	mov	r3, r2
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4423      	add	r3, r4
 8008d4e:	3314      	adds	r3, #20
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	0a1b      	lsrs	r3, r3, #8
 8008d54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d58:	4318      	orrs	r0, r3
 8008d5a:	4c63      	ldr	r4, [pc, #396]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4423      	add	r3, r4
 8008d68:	3314      	adds	r3, #20
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	0e1b      	lsrs	r3, r3, #24
 8008d6e:	4303      	orrs	r3, r0
 8008d70:	440b      	add	r3, r1
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d20b      	bcs.n	8008d90 <prvProcessDNSCache+0x108>
                                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
                                ulIPAddressIndex = ucIndex;

                                xDNSCache[ x ].ucCurrentIPAddress++;
                            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */
                            *pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 8008d78:	495b      	ldr	r1, [pc, #364]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	1a9b      	subs	r3, r3, r2
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4413      	add	r3, r2
 8008d86:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	e029      	b.n	8008de4 <prvProcessDNSCache+0x15c>
                        }
                        else
                        {
                            /* Age out the old cached record. */
                            xDNSCache[ x ].pcName[ 0 ] = ( char ) 0;
 8008d90:	4955      	ldr	r1, [pc, #340]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008d92:	69fa      	ldr	r2, [r7, #28]
 8008d94:	4613      	mov	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	1a9b      	subs	r3, r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3304      	adds	r3, #4
 8008da0:	2200      	movs	r2, #0
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	e01e      	b.n	8008de4 <prvProcessDNSCache+0x15c>

                                ulIPAddressIndex = xDNSCache[ x ].ucNumIPAddresses;
                                xDNSCache[ x ].ucNumIPAddresses++;
                            }
                        #endif
                        xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	6819      	ldr	r1, [r3, #0]
 8008daa:	484f      	ldr	r0, [pc, #316]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	4613      	mov	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	4413      	add	r3, r2
 8008db8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                        xDNSCache[ x ].ulTTL = ulTTL;
 8008dbc:	494a      	ldr	r1, [pc, #296]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	1a9b      	subs	r3, r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	440b      	add	r3, r1
 8008dca:	3314      	adds	r3, #20
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	601a      	str	r2, [r3, #0]
                        xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008dd0:	4945      	ldr	r1, [pc, #276]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	1a9b      	subs	r3, r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	440b      	add	r3, r1
 8008dde:	3318      	adds	r3, #24
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	601a      	str	r2, [r3, #0]
                    }

                    xFound = pdTRUE;
 8008de4:	2301      	movs	r3, #1
 8008de6:	61bb      	str	r3, [r7, #24]
                    break;
 8008de8:	e007      	b.n	8008dfa <prvProcessDNSCache+0x172>
                    continue;
 8008dea:	bf00      	nop
            for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	3301      	adds	r3, #1
 8008df0:	61fb      	str	r3, [r7, #28]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	f77f af65 	ble.w	8008cc4 <prvProcessDNSCache+0x3c>
                }
            }

            if( xFound == pdFALSE )
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d146      	bne.n	8008e8e <prvProcessDNSCache+0x206>
            {
                if( xLookUp != pdFALSE )
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <prvProcessDNSCache+0x186>
                {
                    *pulIP = 0UL;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	e03f      	b.n	8008e8e <prvProcessDNSCache+0x206>
                }
                else
                {
                    /* Add or update the item. */
                    if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7f7 fa20 	bl	8000254 <strlen>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b0f      	cmp	r3, #15
 8008e18:	d839      	bhi.n	8008e8e <prvProcessDNSCache+0x206>
                    {
                        ( void ) strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
 8008e1a:	4b34      	ldr	r3, [pc, #208]	; (8008eec <prvProcessDNSCache+0x264>)
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4a30      	ldr	r2, [pc, #192]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008e28:	4413      	add	r3, r2
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	68f9      	ldr	r1, [r7, #12]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f009 fa6e 	bl	8012310 <strcpy>

                        xDNSCache[ xFreeEntry ].ulIPAddresses[ 0 ] = *pulIP;
 8008e34:	4b2d      	ldr	r3, [pc, #180]	; (8008eec <prvProcessDNSCache+0x264>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	6819      	ldr	r1, [r3, #0]
 8008e3c:	482a      	ldr	r0, [pc, #168]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008e3e:	4613      	mov	r3, r2
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	1a9b      	subs	r3, r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4403      	add	r3, r0
 8008e48:	6019      	str	r1, [r3, #0]
                        xDNSCache[ xFreeEntry ].ulTTL = ulTTL;
 8008e4a:	4b28      	ldr	r3, [pc, #160]	; (8008eec <prvProcessDNSCache+0x264>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	4926      	ldr	r1, [pc, #152]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008e50:	4613      	mov	r3, r2
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	440b      	add	r3, r1
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	601a      	str	r2, [r3, #0]
                        xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008e60:	4b22      	ldr	r3, [pc, #136]	; (8008eec <prvProcessDNSCache+0x264>)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	4920      	ldr	r1, [pc, #128]	; (8008ee8 <prvProcessDNSCache+0x260>)
 8008e66:	4613      	mov	r3, r2
 8008e68:	00db      	lsls	r3, r3, #3
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	440b      	add	r3, r1
 8008e70:	3318      	adds	r3, #24
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	601a      	str	r2, [r3, #0]
                                             0,
                                             sizeof( xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ] ) *
                                             ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
                        #endif

                        xFreeEntry++;
 8008e76:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <prvProcessDNSCache+0x264>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	4a1b      	ldr	r2, [pc, #108]	; (8008eec <prvProcessDNSCache+0x264>)
 8008e7e:	6013      	str	r3, [r2, #0]

                        if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8008e80:	4b1a      	ldr	r3, [pc, #104]	; (8008eec <prvProcessDNSCache+0x264>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d102      	bne.n	8008e8e <prvProcessDNSCache+0x206>
                        {
                            xFreeEntry = 0;
 8008e88:	4b18      	ldr	r3, [pc, #96]	; (8008eec <prvProcessDNSCache+0x264>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
                        }
                    }
                }
            }

            if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d003      	beq.n	8008e9c <prvProcessDNSCache+0x214>
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01c      	beq.n	8008ed6 <prvProcessDNSCache+0x24e>
            {
                FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <prvProcessDNSCache+0x21e>
 8008ea2:	4913      	ldr	r1, [pc, #76]	; (8008ef0 <prvProcessDNSCache+0x268>)
 8008ea4:	e000      	b.n	8008ea8 <prvProcessDNSCache+0x220>
 8008ea6:	4913      	ldr	r1, [pc, #76]	; (8008ef4 <prvProcessDNSCache+0x26c>)
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	061a      	lsls	r2, r3, #24
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	021b      	lsls	r3, r3, #8
 8008eb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	0a1b      	lsrs	r3, r3, #8
 8008ec0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	0e1b      	lsrs	r3, r3, #24
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4809      	ldr	r0, [pc, #36]	; (8008ef8 <prvProcessDNSCache+0x270>)
 8008ed2:	f7f7 fd7f 	bl	80009d4 <vLoggingPrintf>
            }

            return xFound;
 8008ed6:	69bb      	ldr	r3, [r7, #24]
        }
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3724      	adds	r7, #36	; 0x24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd90      	pop	{r4, r7, pc}
 8008ee0:	10624dd3 	.word	0x10624dd3
 8008ee4:	08013bcc 	.word	0x08013bcc
 8008ee8:	20025004 	.word	0x20025004
 8008eec:	20025074 	.word	0x20025074
 8008ef0:	08013bfc 	.word	0x08013bfc
 8008ef4:	08013c04 	.word	0x08013c04
 8008ef8:	08013c08 	.word	0x08013c08

08008efc <vCastPointerTo_EthernetHeader_t>:
    {
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
        return ( EthernetHeader_t * ) pvArgument;
 8008f04:	687b      	ldr	r3, [r7, #4]
    }
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <vCastConstPointerTo_EthernetHeader_t>:
    {
 8008f12:	b480      	push	{r7}
 8008f14:	b083      	sub	sp, #12
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
        return ( const EthernetHeader_t * ) pvArgument;
 8008f1a:	687b      	ldr	r3, [r7, #4]
    }
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <vCastPointerTo_ARPPacket_t>:
    {
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 8008f30:	687b      	ldr	r3, [r7, #4]
    }
 8008f32:	4618      	mov	r0, r3
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <vCastPointerTo_IPPacket_t>:
    {
 8008f3e:	b480      	push	{r7}
 8008f40:	b083      	sub	sp, #12
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
        return ( IPPacket_t * ) pvArgument;
 8008f46:	687b      	ldr	r3, [r7, #4]
    }
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <vCastConstPointerTo_IPPacket_t>:
    {
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
        return ( const IPPacket_t * ) pvArgument;
 8008f5c:	687b      	ldr	r3, [r7, #4]
    }
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <vCastPointerTo_ICMPPacket_t>:
    {
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
        return ( ICMPPacket_t * ) pvArgument;
 8008f72:	687b      	ldr	r3, [r7, #4]
    }
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <vCastConstPointerTo_UDPPacket_t>:
    {
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 8008f88:	687b      	ldr	r3, [r7, #4]
    }
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <vCastPointerTo_ProtocolPacket_t>:
    {
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
        return ( ProtocolPacket_t * ) pvArgument;
 8008f9e:	687b      	ldr	r3, [r7, #4]
    }
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <vCastConstPointerTo_ProtocolPacket_t>:
    {
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
        return ( const ProtocolPacket_t * ) pvArgument;
 8008fb4:	687b      	ldr	r3, [r7, #4]
    }
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 8008fc2:	b480      	push	{r7}
 8008fc4:	b083      	sub	sp, #12
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 8008fca:	687b      	ldr	r3, [r7, #4]
    }
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <vCastPointerTo_SocketSelect_t>:
             */
            EventGroupHandle_t xSelectGroup;
        } SocketSelect_t;

        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( SocketSelect_t )
        {
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
            return ( SocketSelect_t * ) pvArgument;
 8008fe0:	687b      	ldr	r3, [r7, #4]
        }
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 8008ff6:	687b      	ldr	r3, [r7, #4]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <prvIPTask>:
 *        the data of the IP-stack, and so it has no need of using mutexes.
 *
 * @param[in] pvParameters: Not used.
 */
static void prvIPTask( void * pvParameters )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	; 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]

    /* Generate a dummy message to say that the network connection has gone
     *  down.  This will cause this task to initialise the network interface.  After
     *  this it is the responsibility of the network interface hardware driver to
     *  send this message if a previously connected network is disconnected. */
    FreeRTOS_NetworkDown();
 800900c:	f000 f9da 	bl	80093c4 <FreeRTOS_NetworkDown>

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* Initialise the TCP timer. */
            prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009010:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009014:	4863      	ldr	r0, [pc, #396]	; (80091a4 <prvIPTask+0x1a0>)
 8009016:	f000 f989 	bl	800932c <prvIPTimerReload>
        }
    #endif

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800901a:	4b63      	ldr	r3, [pc, #396]	; (80091a8 <prvIPTask+0x1a4>)
 800901c:	2201      	movs	r2, #1
 800901e:	601a      	str	r2, [r3, #0]

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8009020:	4862      	ldr	r0, [pc, #392]	; (80091ac <prvIPTask+0x1a8>)
 8009022:	f7f7 fcd7 	bl	80009d4 <vLoggingPrintf>
    {
        ipconfigWATCHDOG_TIMER();

        /* Check the ARP, DHCP and TCP timers to see if there is any periodic
         * or timeout processing to perform. */
        prvCheckNetworkTimers();
 8009026:	f000 f91d 	bl	8009264 <prvCheckNetworkTimers>

        /* Calculate the acceptable maximum sleep time. */
        xNextIPSleep = prvCalculateSleepTime();
 800902a:	f000 f8f3 	bl	8009214 <prvCalculateSleepTime>
 800902e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait until there is something to do. If the following call exits
         * due to a time out rather than a message being received, set a
         * 'NoEvent' value. */
        if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8009030:	4b5f      	ldr	r3, [pc, #380]	; (80091b0 <prvIPTask+0x1ac>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f107 0114 	add.w	r1, r7, #20
 8009038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903a:	4618      	mov	r0, r3
 800903c:	f7fb ffc2 	bl	8004fc4 <xQueueReceive>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <prvIPTask+0x46>
        {
            xReceivedEvent.eEventType = eNoEvent;
 8009046:	23ff      	movs	r3, #255	; 0xff
 8009048:	753b      	strb	r3, [r7, #20]
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

        switch( xReceivedEvent.eEventType )
 800904a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800904e:	3301      	adds	r3, #1
 8009050:	2b0d      	cmp	r3, #13
 8009052:	f200 809c 	bhi.w	800918e <prvIPTask+0x18a>
 8009056:	a201      	add	r2, pc, #4	; (adr r2, 800905c <prvIPTask+0x58>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	0800918f 	.word	0x0800918f
 8009060:	08009095 	.word	0x08009095
 8009064:	080090a1 	.word	0x080090a1
 8009068:	080090b3 	.word	0x080090b3
 800906c:	080090c7 	.word	0x080090c7
 8009070:	0800912f 	.word	0x0800912f
 8009074:	0800918f 	.word	0x0800918f
 8009078:	08009153 	.word	0x08009153
 800907c:	0800915f 	.word	0x0800915f
 8009080:	08009189 	.word	0x08009189
 8009084:	080090cd 	.word	0x080090cd
 8009088:	0800911d 	.word	0x0800911d
 800908c:	08009141 	.word	0x08009141
 8009090:	0800918f 	.word	0x0800918f
        {
            case eNetworkDownEvent:
                /* Attempt to establish a connection. */
                xNetworkUp = pdFALSE;
 8009094:	4b47      	ldr	r3, [pc, #284]	; (80091b4 <prvIPTask+0x1b0>)
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
                prvProcessNetworkDownEvent();
 800909a:	f000 fb7d 	bl	8009798 <prvProcessNetworkDownEvent>
                break;
 800909e:	e079      	b.n	8009194 <prvIPTask+0x190>
            case eNetworkRxEvent:

                /* The network hardware driver has received a new packet.  A
                 * pointer to the received buffer is located in the pvData member
                 * of the received event structure. */
                prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff ffa3 	bl	8008fee <vCastPointerTo_NetworkBufferDescriptor_t>
 80090a8:	4603      	mov	r3, r0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 f89c 	bl	80091e8 <prvHandleEthernetPacket>
                break;
 80090b0:	e070      	b.n	8009194 <prvIPTask+0x190>

            case eNetworkTxEvent:

               {
                   NetworkBufferDescriptor_t * pxDescriptor = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData );
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff ff9a 	bl	8008fee <vCastPointerTo_NetworkBufferDescriptor_t>
 80090ba:	61f8      	str	r0, [r7, #28]

                   /* Send a network packet. The ownership will  be transferred to
                    * the driver, which will release it after delivery. */
                   iptraceNETWORK_INTERFACE_OUTPUT( pxDescriptor->xDataLength, pxDescriptor->pucEthernetBuffer );
                   ( void ) xNetworkInterfaceOutput( pxDescriptor, pdTRUE );
 80090bc:	2101      	movs	r1, #1
 80090be:	69f8      	ldr	r0, [r7, #28]
 80090c0:	f007 fa60 	bl	8010584 <xNetworkInterfaceOutput>
               }

               break;
 80090c4:	e066      	b.n	8009194 <prvIPTask+0x190>

            case eARPTimerEvent:
                /* The ARP timer has expired, process the ARP cache. */
                vARPAgeCache();
 80090c6:	f7fe fe25 	bl	8007d14 <vARPAgeCache>
                break;
 80090ca:	e063      	b.n	8009194 <prvIPTask+0x190>
                /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
                 * to a port. The port number is communicated in the socket field
                 * usLocalPort. vSocketBind() will actually bind the socket and the
                 * API will unblock as soon as the eSOCKET_BOUND event is
                 * triggered. */
                pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff ff77 	bl	8008fc2 <vCastPointerTo_FreeRTOS_Socket_t>
 80090d4:	6238      	str	r0, [r7, #32]
                xAddress.sin_addr = 0U; /* For the moment. */
 80090d6:	2300      	movs	r3, #0
 80090d8:	613b      	str	r3, [r7, #16]
                xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090de:	021b      	lsls	r3, r3, #8
 80090e0:	b21a      	sxth	r2, r3
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090e6:	0a1b      	lsrs	r3, r3, #8
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	b21b      	sxth	r3, r3
 80090ec:	4313      	orrs	r3, r2
 80090ee:	b21b      	sxth	r3, r3
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	81fb      	strh	r3, [r7, #14]
                pxSocket->usLocalPort = 0U;
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	2200      	movs	r2, #0
 80090f8:	849a      	strh	r2, [r3, #36]	; 0x24
                ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 80090fa:	f107 010c 	add.w	r1, r7, #12
 80090fe:	2300      	movs	r3, #0
 8009100:	2208      	movs	r2, #8
 8009102:	6a38      	ldr	r0, [r7, #32]
 8009104:	f001 fb38 	bl	800a778 <vSocketBind>

                /* Before 'eSocketBindEvent' was sent it was tested that
                 * ( xEventGroup != NULL ) so it can be used now to wake up the
                 * user. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f043 0210 	orr.w	r2, r3, #16
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	601a      	str	r2, [r3, #0]
                vSocketWakeUpUser( pxSocket );
 8009114:	6a38      	ldr	r0, [r7, #32]
 8009116:	f001 fed7 	bl	800aec8 <vSocketWakeUpUser>
                break;
 800911a:	e03b      	b.n	8009194 <prvIPTask+0x190>

                /* The user API FreeRTOS_closesocket() has sent a message to the
                 * IP-task to actually close a socket. This is handled in
                 * vSocketClose().  As the socket gets closed, there is no way to
                 * report back to the API, so the API won't wait for the result */
                ( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff ff4f 	bl	8008fc2 <vCastPointerTo_FreeRTOS_Socket_t>
 8009124:	4603      	mov	r3, r0
 8009126:	4618      	mov	r0, r3
 8009128:	f001 fbf6 	bl	800a918 <vSocketClose>
                break;
 800912c:	e032      	b.n	8009194 <prvIPTask+0x190>
            case eStackTxEvent:

                /* The network stack has generated a packet to send.  A
                 * pointer to the generated buffer is located in the pvData
                 * member of the received event structure. */
                vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff ff5c 	bl	8008fee <vCastPointerTo_NetworkBufferDescriptor_t>
 8009136:	4603      	mov	r3, r0
 8009138:	4618      	mov	r0, r3
 800913a:	f006 fea9 	bl	800fe90 <vProcessGeneratedUDPPacket>
                break;
 800913e:	e029      	b.n	8009194 <prvIPTask+0x190>
                            vSocketSelect( pxMessage->pxSocketSet );
                            ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                        }
                    #else
                        {
                            vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	4618      	mov	r0, r3
 8009144:	f7ff ff48 	bl	8008fd8 <vCastPointerTo_SocketSelect_t>
 8009148:	4603      	mov	r3, r0
 800914a:	4618      	mov	r0, r3
 800914c:	f002 f9da 	bl	800b504 <vSocketSelect>
                        }
                    #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
                #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
                break;
 8009150:	e020      	b.n	8009194 <prvIPTask+0x190>
            case eTCPTimerEvent:
                #if ( ipconfigUSE_TCP == 1 )

                    /* Simply mark the TCP timer as expired so it gets processed
                     * the next time prvCheckNetworkTimers() is called. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009152:	4a14      	ldr	r2, [pc, #80]	; (80091a4 <prvIPTask+0x1a0>)
 8009154:	7813      	ldrb	r3, [r2, #0]
 8009156:	f043 0302 	orr.w	r3, r3, #2
 800915a:	7013      	strb	r3, [r2, #0]
                #endif /* ipconfigUSE_TCP */
                break;
 800915c:	e01a      	b.n	8009194 <prvIPTask+0x190>

                /* The API FreeRTOS_accept() was called, the IP-task will now
                 * check if the listening socket (communicated in pvData) actually
                 * received a new connection. */
                #if ( ipconfigUSE_TCP == 1 )
                    pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff ff2e 	bl	8008fc2 <vCastPointerTo_FreeRTOS_Socket_t>
 8009166:	6238      	str	r0, [r7, #32]

                    if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009168:	6a38      	ldr	r0, [r7, #32]
 800916a:	f005 fc3d 	bl	800e9e8 <xTCPCheckNewClient>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00e      	beq.n	8009192 <prvIPTask+0x18e>
                    {
                        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f043 0204 	orr.w	r2, r3, #4
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	601a      	str	r2, [r3, #0]
                        vSocketWakeUpUser( pxSocket );
 8009180:	6a38      	ldr	r0, [r7, #32]
 8009182:	f001 fea1 	bl	800aec8 <vSocketWakeUpUser>
                    }
                #endif /* ipconfigUSE_TCP */
                break;
 8009186:	e004      	b.n	8009192 <prvIPTask+0x18e>
            case eTCPNetStat:

                /* FreeRTOS_netstat() was called to have the IP-task print an
                 * overview of all sockets and their connections */
                #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                    vTCPNetStat();
 8009188:	f002 f8e2 	bl	800b350 <vTCPNetStat>
                #endif /* ipconfigUSE_TCP */
                break;
 800918c:	e002      	b.n	8009194 <prvIPTask+0x190>
                /* xQueueReceive() returned because of a normal time-out. */
                break;

            default:
                /* Should not get here. */
                break;
 800918e:	bf00      	nop
 8009190:	e000      	b.n	8009194 <prvIPTask+0x190>
                break;
 8009192:	bf00      	nop
        }

        if( xNetworkDownEventPending != pdFALSE )
 8009194:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <prvIPTask+0x1b4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	f43f af44 	beq.w	8009026 <prvIPTask+0x22>
        {
            /* A network down event could not be posted to the network event
             * queue because the queue was full.
             * As this code runs in the IP-task, it can be done directly by
             * calling prvProcessNetworkDownEvent(). */
            prvProcessNetworkDownEvent();
 800919e:	f000 fafb 	bl	8009798 <prvProcessNetworkDownEvent>
        prvCheckNetworkTimers();
 80091a2:	e740      	b.n	8009026 <prvIPTask+0x22>
 80091a4:	200250cc 	.word	0x200250cc
 80091a8:	200250e0 	.word	0x200250e0
 80091ac:	08013c30 	.word	0x08013c30
 80091b0:	20025078 	.word	0x20025078
 80091b4:	200250b4 	.word	0x200250b4
 80091b8:	200250a8 	.word	0x200250a8

080091bc <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 80091c2:	f7fd f939 	bl	8006438 <xTaskGetCurrentTaskHandle>
 80091c6:	4602      	mov	r2, r0
 80091c8:	4b06      	ldr	r3, [pc, #24]	; (80091e4 <xIsCallingFromIPTask+0x28>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d102      	bne.n	80091d6 <xIsCallingFromIPTask+0x1a>
    {
        xReturn = pdTRUE;
 80091d0:	2301      	movs	r3, #1
 80091d2:	607b      	str	r3, [r7, #4]
 80091d4:	e001      	b.n	80091da <xIsCallingFromIPTask+0x1e>
    }
    else
    {
        xReturn = pdFALSE;
 80091d6:	2300      	movs	r3, #0
 80091d8:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 80091da:	687b      	ldr	r3, [r7, #4]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	200250ac 	.word	0x200250ac

080091e8 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer: Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
             * member.  The loop below walks through the chain processing each packet
             * in the chain in turn. */
            do
            {
                /* Store a pointer to the buffer after pxBuffer for use later on. */
                pxNextBuffer = pxBuffer->pxNextBuffer;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	60fb      	str	r3, [r7, #12]

                /* Make it NULL to avoid using it later on. */
                pxBuffer->pxNextBuffer = NULL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	625a      	str	r2, [r3, #36]	; 0x24

                prvProcessEthernetPacket( pxBuffer );
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fb07 	bl	8009810 <prvProcessEthernetPacket>
                pxBuffer = pxNextBuffer;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	607b      	str	r3, [r7, #4]

                /* While there is another packet in the chain. */
            } while( pxBuffer != NULL );
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f1      	bne.n	80091f0 <prvHandleEthernetPacket+0x8>
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <prvCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
static TickType_t prvCalculateSleepTime( void )
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
    TickType_t xMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800921a:	f242 7310 	movw	r3, #10000	; 0x2710
 800921e:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009220:	4b0e      	ldr	r3, [pc, #56]	; (800925c <prvCalculateSleepTime+0x48>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d007      	beq.n	800923e <prvCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 800922e:	4b0b      	ldr	r3, [pc, #44]	; (800925c <prvCalculateSleepTime+0x48>)
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	429a      	cmp	r2, r3
 8009236:	d902      	bls.n	800923e <prvCalculateSleepTime+0x2a>
        {
            xMaximumSleepTime = xARPTimer.ulReloadTime;
 8009238:	4b08      	ldr	r3, [pc, #32]	; (800925c <prvCalculateSleepTime+0x48>)
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	607b      	str	r3, [r7, #4]
        }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
        {
            if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 800923e:	4b08      	ldr	r3, [pc, #32]	; (8009260 <prvCalculateSleepTime+0x4c>)
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	d902      	bls.n	800924e <prvCalculateSleepTime+0x3a>
            {
                xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8009248:	4b05      	ldr	r3, [pc, #20]	; (8009260 <prvCalculateSleepTime+0x4c>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    return xMaximumSleepTime;
 800924e:	687b      	ldr	r3, [r7, #4]
}
 8009250:	4618      	mov	r0, r3
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	200250b8 	.word	0x200250b8
 8009260:	200250cc 	.word	0x200250cc

08009264 <prvCheckNetworkTimers>:
/**
 * @brief Check the network timers (ARP/DHCP/DNS/TCP) and if they are
 *        expired, send an event to the IP-Task.
 */
static void prvCheckNetworkTimers( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800926a:	481a      	ldr	r0, [pc, #104]	; (80092d4 <prvCheckNetworkTimers+0x70>)
 800926c:	f000 f86e 	bl	800934c <prvIPTimerCheck>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <prvCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 8009276:	2003      	movs	r0, #3
 8009278:	f000 fa20 	bl	80096bc <xSendEventToIPTask>
            TickType_t xNextTime;
            BaseType_t xCheckTCPSockets;

            /* If the IP task has messages waiting to be processed then
             * it will not sleep in any case. */
            if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800927c:	4b16      	ldr	r3, [pc, #88]	; (80092d8 <prvCheckNetworkTimers+0x74>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4618      	mov	r0, r3
 8009282:	f7fc f865 	bl	8005350 <uxQueueMessagesWaiting>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d102      	bne.n	8009292 <prvCheckNetworkTimers+0x2e>
            {
                xWillSleep = pdTRUE;
 800928c:	2301      	movs	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	e001      	b.n	8009296 <prvCheckNetworkTimers+0x32>
            }
            else
            {
                xWillSleep = pdFALSE;
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
            }

            /* Sockets need to be checked if the TCP timer has expired. */
            xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8009296:	4811      	ldr	r0, [pc, #68]	; (80092dc <prvCheckNetworkTimers+0x78>)
 8009298:	f000 f858 	bl	800934c <prvIPTimerCheck>
 800929c:	60b8      	str	r0, [r7, #8]

            /* Sockets will also be checked if there are TCP messages but the
            * message queue is empty (indicated by xWillSleep being true). */
            if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800929e:	4b10      	ldr	r3, [pc, #64]	; (80092e0 <prvCheckNetworkTimers+0x7c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d004      	beq.n	80092b0 <prvCheckNetworkTimers+0x4c>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <prvCheckNetworkTimers+0x4c>
            {
                xCheckTCPSockets = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	60bb      	str	r3, [r7, #8]
            }

            if( xCheckTCPSockets != pdFALSE )
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <prvCheckNetworkTimers+0x68>
            {
                /* Attend to the sockets, returning the period after which the
                 * check must be repeated. */
                xNextTime = xTCPTimerCheck( xWillSleep );
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f001 fe42 	bl	800af40 <xTCPTimerCheck>
 80092bc:	6078      	str	r0, [r7, #4]
                prvIPTimerStart( &xTCPTimer, xNextTime );
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	4806      	ldr	r0, [pc, #24]	; (80092dc <prvCheckNetworkTimers+0x78>)
 80092c2:	f000 f80f 	bl	80092e4 <prvIPTimerStart>
                xProcessedTCPMessage = 0;
 80092c6:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <prvCheckNetworkTimers+0x7c>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]
            }
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 80092cc:	bf00      	nop
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	200250b8 	.word	0x200250b8
 80092d8:	20025078 	.word	0x20025078
 80092dc:	200250cc 	.word	0x200250cc
 80092e0:	200250b0 	.word	0x200250b0

080092e4 <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime: Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3304      	adds	r3, #4
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fc ff4a 	bl	800618c <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d105      	bne.n	8009310 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7813      	ldrb	r3, [r2, #0]
 8009308:	f043 0302 	orr.w	r3, r3, #2
 800930c:	7013      	strb	r3, [r2, #0]
 800930e:	e004      	b.n	800931a <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	7813      	ldrb	r3, [r2, #0]
 8009314:	f36f 0341 	bfc	r3, #1, #1
 8009318:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	7813      	ldrb	r3, [r2, #0]
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	7013      	strb	r3, [r2, #0]
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <prvIPTimerReload>:
 * @param[in] pxTimer: Pointer to the IP timer.
 * @param[in] xTime: Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff ffd0 	bl	80092e4 <prvIPTimerStart>
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <prvIPTimerCheck>:
 * @param[in] pxTimer: Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d102      	bne.n	8009368 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 8009362:	2300      	movs	r3, #0
 8009364:	60fb      	str	r3, [r7, #12]
 8009366:	e028      	b.n	80093ba <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10f      	bne.n	8009396 <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	1d1a      	adds	r2, r3, #4
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	330c      	adds	r3, #12
 800937e:	4619      	mov	r1, r3
 8009380:	4610      	mov	r0, r2
 8009382:	f7fc ff3b 	bl	80061fc <xTaskCheckForTimeOut>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	7813      	ldrb	r3, [r2, #0]
 8009390:	f043 0302 	orr.w	r3, r3, #2
 8009394:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d008      	beq.n	80093b6 <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7ff ff9a 	bl	80092e4 <prvIPTimerStart>
            xReturn = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e001      	b.n	80093ba <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 80093ba:	68fb      	ldr	r3, [r7, #12]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <FreeRTOS_NetworkDown>:
 * @brief Send a network down event to the IP-task. If it fails to post a message,
 *         the failure will be noted in the variable 'xNetworkDownEventPending'
 *         and later on a 'network-down' event, it will be executed.
 */
void FreeRTOS_NetworkDown( void )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
    static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	607b      	str	r3, [r7, #4]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4808      	ldr	r0, [pc, #32]	; (80093f4 <FreeRTOS_NetworkDown+0x30>)
 80093d2:	f000 f989 	bl	80096e8 <xSendEventStructToIPTask>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d003      	beq.n	80093e4 <FreeRTOS_NetworkDown+0x20>
    {
        /* Could not send the message, so it is still pending. */
        xNetworkDownEventPending = pdTRUE;
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <FreeRTOS_NetworkDown+0x34>)
 80093de:	2201      	movs	r2, #1
 80093e0:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        xNetworkDownEventPending = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 80093e2:	e002      	b.n	80093ea <FreeRTOS_NetworkDown+0x26>
        xNetworkDownEventPending = pdFALSE;
 80093e4:	4b04      	ldr	r3, [pc, #16]	; (80093f8 <FreeRTOS_NetworkDown+0x34>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	080154a8 	.word	0x080154a8
 80093f8:	200250a8 	.word	0x200250a8

080093fc <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8009406:	2100      	movs	r1, #0
 8009408:	6838      	ldr	r0, [r7, #0]
 800940a:	f008 f8f3 	bl	80115f4 <pxGetNetworkBufferWithDescriptor>
 800940e:	60f8      	str	r0, [r7, #12]

    if( pxNewBuffer != NULL )
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d017      	beq.n	8009446 <pxDuplicateNetworkBufferWithDescriptor+0x4a>
    {
        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	61da      	str	r2, [r3, #28]

        /* Copy the original packet information. */
        pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	695a      	ldr	r2, [r3, #20]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8c1a      	ldrh	r2, [r3, #32]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	841a      	strh	r2, [r3, #32]
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	845a      	strh	r2, [r3, #34]	; 0x22
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6998      	ldr	r0, [r3, #24]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6999      	ldr	r1, [r3, #24]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	461a      	mov	r2, r3
 8009442:	f008 f9d6 	bl	80117f2 <memcpy>
    }

    return pxNewBuffer;
 8009446:	68fb      	ldr	r3, [r7, #12]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d102      	bne.n	8009466 <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e011      	b.n	800948a <prvPacketBuffer_to_NetworkBuffer+0x3a>
    }
    else
    {
        /* Obtain the network buffer from the zero copy pointer. */
        uxBuffer = ipPOINTER_CAST( uintptr_t, pvBuffer );
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60bb      	str	r3, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	3b0a      	subs	r3, #10
 8009472:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d103      	bne.n	8009486 <prvPacketBuffer_to_NetworkBuffer+0x36>
        {
            /* The following statement may trigger a:
             * warning: cast increases required alignment of target type [-Wcast-align].
             * It has been confirmed though that the alignment is suitable. */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	e001      	b.n	800948a <prvPacketBuffer_to_NetworkBuffer+0x3a>
        }
        else
        {
            pxResult = NULL;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800948a:	68fb      	ldr	r3, [r7, #12]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 80094a0:	2100      	movs	r1, #0
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff ffd4 	bl	8009450 <prvPacketBuffer_to_NetworkBuffer>
 80094a8:	4603      	mov	r3, r0
    }
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
    return prvPacketBuffer_to_NetworkBuffer( pvBuffer, sizeof( UDPPacket_t ) );
 80094ba:	212a      	movs	r1, #42	; 0x2a
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff ffc7 	bl	8009450 <prvPacketBuffer_to_NetworkBuffer>
 80094c2:	4603      	mov	r3, r0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <FreeRTOS_IPInit>:
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 80094cc:	b5b0      	push	{r4, r5, r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
 80094d8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFALSE;
 80094da:	2300      	movs	r3, #0
 80094dc:	617b      	str	r3, [r7, #20]

    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 80094de:	f000 fd65 	bl	8009fac <xIPIsNetworkTaskReady>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d004      	beq.n	80094f2 <FreeRTOS_IPInit+0x26>
 80094e8:	4969      	ldr	r1, [pc, #420]	; (8009690 <FreeRTOS_IPInit+0x1c4>)
 80094ea:	f44f 608e 	mov.w	r0, #1136	; 0x470
 80094ee:	f7f7 fa9a 	bl	8000a26 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 80094f2:	4b68      	ldr	r3, [pc, #416]	; (8009694 <FreeRTOS_IPInit+0x1c8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d004      	beq.n	8009504 <FreeRTOS_IPInit+0x38>
 80094fa:	4965      	ldr	r1, [pc, #404]	; (8009690 <FreeRTOS_IPInit+0x1c4>)
 80094fc:	f240 4071 	movw	r0, #1137	; 0x471
 8009500:	f7f7 fa91 	bl	8000a26 <vAssertCalled>
    configASSERT( xIPTaskHandle == NULL );
 8009504:	4b64      	ldr	r3, [pc, #400]	; (8009698 <FreeRTOS_IPInit+0x1cc>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d004      	beq.n	8009516 <FreeRTOS_IPInit+0x4a>
 800950c:	4960      	ldr	r1, [pc, #384]	; (8009690 <FreeRTOS_IPInit+0x1c4>)
 800950e:	f240 4072 	movw	r0, #1138	; 0x472
 8009512:	f7f7 fa88 	bl	8000a26 <vAssertCalled>
            configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
            configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
        }
    #endif /* ifndef _lint */
    /* Attempt to create the queue used to communicate with the IP task. */
    xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8009516:	2200      	movs	r2, #0
 8009518:	2108      	movs	r1, #8
 800951a:	2041      	movs	r0, #65	; 0x41
 800951c:	f7fb fb0c 	bl	8004b38 <xQueueGenericCreate>
 8009520:	4602      	mov	r2, r0
 8009522:	4b5c      	ldr	r3, [pc, #368]	; (8009694 <FreeRTOS_IPInit+0x1c8>)
 8009524:	601a      	str	r2, [r3, #0]
    configASSERT( xNetworkEventQueue != NULL );
 8009526:	4b5b      	ldr	r3, [pc, #364]	; (8009694 <FreeRTOS_IPInit+0x1c8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d104      	bne.n	8009538 <FreeRTOS_IPInit+0x6c>
 800952e:	4958      	ldr	r1, [pc, #352]	; (8009690 <FreeRTOS_IPInit+0x1c4>)
 8009530:	f240 4089 	movw	r0, #1161	; 0x489
 8009534:	f7f7 fa77 	bl	8000a26 <vAssertCalled>

    if( xNetworkEventQueue != NULL )
 8009538:	4b56      	ldr	r3, [pc, #344]	; (8009694 <FreeRTOS_IPInit+0x1c8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 809f 	beq.w	8009680 <FreeRTOS_IPInit+0x1b4>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                /* A queue registry is normally used to assist a kernel aware
                 * debugger.  If one is in use then it will be helpful for the debugger
                 * to show information about the network event queue. */
                vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8009542:	4b54      	ldr	r3, [pc, #336]	; (8009694 <FreeRTOS_IPInit+0x1c8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4955      	ldr	r1, [pc, #340]	; (800969c <FreeRTOS_IPInit+0x1d0>)
 8009548:	4618      	mov	r0, r3
 800954a:	f7fc f86b 	bl	8005624 <vQueueAddToRegistry>
            }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 800954e:	f007 ffc7 	bl	80114e0 <xNetworkBuffersInitialise>
 8009552:	4603      	mov	r3, r0
 8009554:	2b01      	cmp	r3, #1
 8009556:	f040 8087 	bne.w	8009668 <FreeRTOS_IPInit+0x19c>
        {
            /* Store the local IP and MAC address. */
            xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3303      	adds	r3, #3
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	061a      	lsls	r2, r3, #24
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	3302      	adds	r3, #2
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	041b      	lsls	r3, r3, #16
 800956a:	431a      	orrs	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3301      	adds	r3, #1
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	4313      	orrs	r3, r2
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	7812      	ldrb	r2, [r2, #0]
 800957a:	4313      	orrs	r3, r2
 800957c:	4a48      	ldr	r2, [pc, #288]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 800957e:	6013      	str	r3, [r2, #0]
            xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	3303      	adds	r3, #3
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	061a      	lsls	r2, r3, #24
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	3302      	adds	r3, #2
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	041b      	lsls	r3, r3, #16
 8009590:	431a      	orrs	r2, r3
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	3301      	adds	r3, #1
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	021b      	lsls	r3, r3, #8
 800959a:	4313      	orrs	r3, r2
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	7812      	ldrb	r2, [r2, #0]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	4a3f      	ldr	r2, [pc, #252]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 80095a4:	6053      	str	r3, [r2, #4]
            xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3303      	adds	r3, #3
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	061a      	lsls	r2, r3, #24
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3302      	adds	r3, #2
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	041b      	lsls	r3, r3, #16
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3301      	adds	r3, #1
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	021b      	lsls	r3, r3, #8
 80095c0:	4313      	orrs	r3, r2
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	7812      	ldrb	r2, [r2, #0]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	4a35      	ldr	r2, [pc, #212]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 80095ca:	6093      	str	r3, [r2, #8]
            xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	3303      	adds	r3, #3
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	061a      	lsls	r2, r3, #24
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	3302      	adds	r3, #2
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	041b      	lsls	r3, r3, #16
 80095dc:	431a      	orrs	r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	3301      	adds	r3, #1
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	021b      	lsls	r3, r3, #8
 80095e6:	4313      	orrs	r3, r2
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	4a2c      	ldr	r2, [pc, #176]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 80095f0:	60d3      	str	r3, [r2, #12]
            xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 80095f2:	4b2b      	ldr	r3, [pc, #172]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	4b2a      	ldr	r3, [pc, #168]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	43db      	mvns	r3, r3
 80095fc:	4313      	orrs	r3, r2
 80095fe:	4a28      	ldr	r2, [pc, #160]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 8009600:	6113      	str	r3, [r2, #16]

            ( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8009602:	4a28      	ldr	r2, [pc, #160]	; (80096a4 <FreeRTOS_IPInit+0x1d8>)
 8009604:	4b26      	ldr	r3, [pc, #152]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 8009606:	4614      	mov	r4, r2
 8009608:	461d      	mov	r5, r3
 800960a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800960c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	6023      	str	r3, [r4, #0]
                    *ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
                }
            #else
                {
                    /* The IP address is set from the value passed in. */
                    *ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8009612:	4b23      	ldr	r3, [pc, #140]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a24      	ldr	r2, [pc, #144]	; (80096a8 <FreeRTOS_IPInit+0x1dc>)
 8009618:	6153      	str	r3, [r2, #20]

                    /* Added to prevent ARP flood to gateway.  Ensure the
                    * gateway is on the same subnet as the IP address. */
                    if( xNetworkAddressing.ulGatewayAddress != 0UL )
 800961a:	4b21      	ldr	r3, [pc, #132]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00e      	beq.n	8009640 <FreeRTOS_IPInit+0x174>
                    {
                        configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 8009622:	4b21      	ldr	r3, [pc, #132]	; (80096a8 <FreeRTOS_IPInit+0x1dc>)
 8009624:	695a      	ldr	r2, [r3, #20]
 8009626:	4b1e      	ldr	r3, [pc, #120]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	405a      	eors	r2, r3
 800962c:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <FreeRTOS_IPInit+0x1d4>)
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	4013      	ands	r3, r2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <FreeRTOS_IPInit+0x174>
 8009636:	4916      	ldr	r1, [pc, #88]	; (8009690 <FreeRTOS_IPInit+0x1c4>)
 8009638:	f240 40af 	movw	r0, #1199	; 0x4af
 800963c:	f7f7 f9f3 	bl	8000a26 <vAssertCalled>
                }
            #endif /* ipconfigUSE_DHCP == 1 */

            /* The MAC address is stored in the start of the default packet
             * header fragment, which is used when sending UDP packets. */
            ( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009640:	2206      	movs	r2, #6
 8009642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009644:	4818      	ldr	r0, [pc, #96]	; (80096a8 <FreeRTOS_IPInit+0x1dc>)
 8009646:	f008 f8d4 	bl	80117f2 <memcpy>

            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 800964a:	f000 fdb3 	bl	800a1b4 <vNetworkSocketsInit>

            /* Create the task that processes Ethernet and stack events. */
            xReturn = xTaskCreate( prvIPTask,
 800964e:	4b12      	ldr	r3, [pc, #72]	; (8009698 <FreeRTOS_IPInit+0x1cc>)
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	2303      	movs	r3, #3
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	2300      	movs	r3, #0
 8009658:	f240 228a 	movw	r2, #650	; 0x28a
 800965c:	4913      	ldr	r1, [pc, #76]	; (80096ac <FreeRTOS_IPInit+0x1e0>)
 800965e:	4814      	ldr	r0, [pc, #80]	; (80096b0 <FreeRTOS_IPInit+0x1e4>)
 8009660:	f7fc f8be 	bl	80057e0 <xTaskCreate>
 8009664:	6178      	str	r0, [r7, #20]
 8009666:	e00e      	b.n	8009686 <FreeRTOS_IPInit+0x1ba>
                                   ipconfigIP_TASK_PRIORITY,
                                   &( xIPTaskHandle ) );
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n" ) );
 8009668:	4812      	ldr	r0, [pc, #72]	; (80096b4 <FreeRTOS_IPInit+0x1e8>)
 800966a:	f7f7 f9b3 	bl	80009d4 <vLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 800966e:	4b09      	ldr	r3, [pc, #36]	; (8009694 <FreeRTOS_IPInit+0x1c8>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4618      	mov	r0, r3
 8009674:	f7fb fe86 	bl	8005384 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009678:	4b06      	ldr	r3, [pc, #24]	; (8009694 <FreeRTOS_IPInit+0x1c8>)
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e002      	b.n	8009686 <FreeRTOS_IPInit+0x1ba>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n" ) );
 8009680:	480d      	ldr	r0, [pc, #52]	; (80096b8 <FreeRTOS_IPInit+0x1ec>)
 8009682:	f7f7 f9a7 	bl	80009d4 <vLoggingPrintf>
    }

    return xReturn;
 8009686:	697b      	ldr	r3, [r7, #20]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bdb0      	pop	{r4, r5, r7, pc}
 8009690:	08013c44 	.word	0x08013c44
 8009694:	20025078 	.word	0x20025078
 8009698:	200250ac 	.word	0x200250ac
 800969c:	08013c74 	.word	0x08013c74
 80096a0:	20025080 	.word	0x20025080
 80096a4:	20025094 	.word	0x20025094
 80096a8:	20000018 	.word	0x20000018
 80096ac:	08013c7c 	.word	0x08013c7c
 80096b0:	08009005 	.word	0x08009005
 80096b4:	08013c84 	.word	0x08013c84
 80096b8:	08013cbc 	.word	0x08013cbc

080096bc <xSendEventToIPTask>:
 * @param[in] eEvent: The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 80096d2:	f107 030c 	add.w	r3, r7, #12
 80096d6:	6979      	ldr	r1, [r7, #20]
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 f805 	bl	80096e8 <xSendEventStructToIPTask>
 80096de:	4603      	mov	r3, r0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 80096f6:	f000 fc59 	bl	8009fac <xIPIsNetworkTaskReady>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d107      	bne.n	8009710 <xSendEventStructToIPTask+0x28>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f993 3000 	ldrsb.w	r3, [r3]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]
 800970e:	e037      	b.n	8009780 <xSendEventStructToIPTask+0x98>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009710:	2301      	movs	r3, #1
 8009712:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
            {
                if( pxEvent->eEventType == eTCPTimerEvent )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f993 3000 	ldrsb.w	r3, [r3]
 800971a:	2b06      	cmp	r3, #6
 800971c:	d10e      	bne.n	800973c <xSendEventStructToIPTask+0x54>
                {
                    /* TCP timer events are sent to wake the timer task when
                     * xTCPTimer has expired, but there is no point sending them if the
                     * IP task is already awake processing other message. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800971e:	4a1b      	ldr	r2, [pc, #108]	; (800978c <xSendEventStructToIPTask+0xa4>)
 8009720:	7813      	ldrb	r3, [r2, #0]
 8009722:	f043 0302 	orr.w	r3, r3, #2
 8009726:	7013      	strb	r3, [r2, #0]

                    if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8009728:	4b19      	ldr	r3, [pc, #100]	; (8009790 <xSendEventStructToIPTask+0xa8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4618      	mov	r0, r3
 800972e:	f7fb fe0f 	bl	8005350 <uxQueueMessagesWaiting>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <xSendEventStructToIPTask+0x54>
                    {
                        /* Not actually going to send the message but this is not a
                         * failure as the message didn't need to be sent. */
                        xSendMessage = pdFALSE;
 8009738:	2300      	movs	r3, #0
 800973a:	613b      	str	r3, [r7, #16]
                    }
                }
            }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01c      	beq.n	800977c <xSendEventStructToIPTask+0x94>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009742:	f7ff fd3b 	bl	80091bc <xIsCallingFromIPTask>
 8009746:	4603      	mov	r3, r0
 8009748:	2b01      	cmp	r3, #1
 800974a:	d104      	bne.n	8009756 <xSendEventStructToIPTask+0x6e>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <xSendEventStructToIPTask+0x6e>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009752:	2300      	movs	r3, #0
 8009754:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8009756:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <xSendEventStructToIPTask+0xa8>)
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	2300      	movs	r3, #0
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	f7fb fa80 	bl	8004c64 <xQueueGenericSend>
 8009764:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <xSendEventStructToIPTask+0x98>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f993 3000 	ldrsb.w	r3, [r3]
 8009772:	4619      	mov	r1, r3
 8009774:	4807      	ldr	r0, [pc, #28]	; (8009794 <xSendEventStructToIPTask+0xac>)
 8009776:	f7f7 f92d 	bl	80009d4 <vLoggingPrintf>
 800977a:	e001      	b.n	8009780 <xSendEventStructToIPTask+0x98>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 800977c:	2301      	movs	r3, #1
 800977e:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009780:	697b      	ldr	r3, [r7, #20]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	200250cc 	.word	0x200250cc
 8009790:	20025078 	.word	0x20025078
 8009794:	08013cf8 	.word	0x08013cf8

08009798 <prvProcessNetworkDownEvent>:

/**
 * @brief Process a 'Network down' event and complete required processing.
 */
static void prvProcessNetworkDownEvent( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
    /* Stop the ARP timer while there is no network. */
    xARPTimer.bActive = pdFALSE_UNSIGNED;
 800979c:	4a10      	ldr	r2, [pc, #64]	; (80097e0 <prvProcessNetworkDownEvent+0x48>)
 800979e:	7813      	ldrb	r3, [r2, #0]
 80097a0:	f36f 0300 	bfc	r3, #0, #1
 80097a4:	7013      	strb	r3, [r2, #0]
            static BaseType_t xCallEventHook = pdFALSE;

            /* The first network down event is generated by the IP stack itself to
             * initialise the network hardware, so do not call the network down event
             * the first time through. */
            if( xCallEventHook == pdTRUE )
 80097a6:	4b0f      	ldr	r3, [pc, #60]	; (80097e4 <prvProcessNetworkDownEvent+0x4c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d102      	bne.n	80097b4 <prvProcessNetworkDownEvent+0x1c>
            {
                vApplicationIPNetworkEventHook( eNetworkDown );
 80097ae:	2001      	movs	r0, #1
 80097b0:	f7f7 f97c 	bl	8000aac <vApplicationIPNetworkEventHook>
            }

            xCallEventHook = pdTRUE;
 80097b4:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <prvProcessNetworkDownEvent+0x4c>)
 80097b6:	2201      	movs	r2, #1
 80097b8:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigUSE_NETWORK_EVENT_HOOK == 1 */

    /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122,
     * treat network down as a "delivery problem" and flush the ARP cache for this
     * interface. */
    FreeRTOS_ClearARP();
 80097ba:	f7fe fbd7 	bl	8007f6c <FreeRTOS_ClearARP>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */
    if( xNetworkInterfaceInitialise() != pdPASS )
 80097be:	f006 fd65 	bl	801028c <xNetworkInterfaceInitialise>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d006      	beq.n	80097d6 <prvProcessNetworkDownEvent+0x3e>
    {
        /* Ideally the network interface initialisation function will only
         * return when the network is available.  In case this is not the case,
         * wait a while before retrying the initialisation. */
        vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 80097c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80097cc:	f7fc f960 	bl	8005a90 <vTaskDelay>
        FreeRTOS_NetworkDown();
 80097d0:	f7ff fdf8 	bl	80093c4 <FreeRTOS_NetworkDown>
                /* Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls();
            }
        #endif
    }
}
 80097d4:	e001      	b.n	80097da <prvProcessNetworkDownEvent+0x42>
                vIPNetworkUpCalls();
 80097d6:	f000 f807 	bl	80097e8 <vIPNetworkUpCalls>
}
 80097da:	bf00      	nop
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200250b8 	.word	0x200250b8
 80097e4:	200250e4 	.word	0x200250e4

080097e8 <vIPNetworkUpCalls>:

/**
 * @brief Perform all the required tasks when the network gets connected.
 */
void vIPNetworkUpCalls( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
    xNetworkUp = pdTRUE;
 80097ec:	4b06      	ldr	r3, [pc, #24]	; (8009808 <vIPNetworkUpCalls+0x20>)
 80097ee:	2201      	movs	r2, #1
 80097f0:	601a      	str	r2, [r3, #0]

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 80097f2:	2000      	movs	r0, #0
 80097f4:	f7f7 f95a 	bl	8000aac <vApplicationIPNetworkEventHook>
            vDNSInitialise();
        }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 80097f8:	f242 7110 	movw	r1, #10000	; 0x2710
 80097fc:	4803      	ldr	r0, [pc, #12]	; (800980c <vIPNetworkUpCalls+0x24>)
 80097fe:	f7ff fd95 	bl	800932c <prvIPTimerReload>
}
 8009802:	bf00      	nop
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	200250b4 	.word	0x200250b4
 800980c:	200250b8 	.word	0x200250b8

08009810 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer: the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]

    configASSERT( pxNetworkBuffer != NULL );
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d104      	bne.n	800982c <prvProcessEthernetPacket+0x1c>
 8009822:	492c      	ldr	r1, [pc, #176]	; (80098d4 <prvProcessEthernetPacket+0xc4>)
 8009824:	f240 607d 	movw	r0, #1661	; 0x67d
 8009828:	f7f7 f8fd 	bl	8000a26 <vAssertCalled>

    iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    /* Interpret the Ethernet frame. */
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	2b0d      	cmp	r3, #13
 8009832:	d939      	bls.n	80098a8 <prvProcessEthernetPacket+0x98>
    {
        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]

        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */
        pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	4618      	mov	r0, r3
 800983e:	f7ff fb68 	bl	8008f12 <vCastConstPointerTo_EthernetHeader_t>
 8009842:	60b8      	str	r0, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	899b      	ldrh	r3, [r3, #12]
 8009848:	b29b      	uxth	r3, r3
 800984a:	2b08      	cmp	r3, #8
 800984c:	d015      	beq.n	800987a <prvProcessEthernetPacket+0x6a>
 800984e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8009852:	d126      	bne.n	80098a2 <prvProcessEthernetPacket+0x92>
            {
                case ipARP_FRAME_TYPE:

                    /* The Ethernet frame contains an ARP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	2b29      	cmp	r3, #41	; 0x29
 800985a:	d90b      	bls.n	8009874 <prvProcessEthernetPacket+0x64>
                    {
                        eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff fb61 	bl	8008f28 <vCastPointerTo_ARPPacket_t>
 8009866:	4603      	mov	r3, r0
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe f80f 	bl	800788c <eARPProcessPacket>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009872:	e01a      	b.n	80098aa <prvProcessEthernetPacket+0x9a>
                        eReturned = eReleaseBuffer;
 8009874:	2300      	movs	r3, #0
 8009876:	73fb      	strb	r3, [r7, #15]
                    break;
 8009878:	e017      	b.n	80098aa <prvProcessEthernetPacket+0x9a>

                case ipIPv4_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	2b21      	cmp	r3, #33	; 0x21
 8009880:	d90c      	bls.n	800989c <prvProcessEthernetPacket+0x8c>
                    {
                        eReturned = prvProcessIPPacket( ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff fb59 	bl	8008f3e <vCastPointerTo_IPPacket_t>
 800988c:	4603      	mov	r3, r0
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	4618      	mov	r0, r3
 8009892:	f000 f921 	bl	8009ad8 <prvProcessIPPacket>
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 800989a:	e006      	b.n	80098aa <prvProcessEthernetPacket+0x9a>
                        eReturned = eReleaseBuffer;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]
                    break;
 80098a0:	e003      	b.n	80098aa <prvProcessEthernetPacket+0x9a>

                default:
                    /* No other packet types are handled.  Nothing to do. */
                    eReturned = eReleaseBuffer;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
                    break;
 80098a6:	e000      	b.n	80098aa <prvProcessEthernetPacket+0x9a>
            }
        }
 80098a8:	bf00      	nop
    }

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d002      	beq.n	80098b6 <prvProcessEthernetPacket+0xa6>
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d009      	beq.n	80098c8 <prvProcessEthernetPacket+0xb8>
 80098b4:	e004      	b.n	80098c0 <prvProcessEthernetPacket+0xb0>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 80098b6:	2101      	movs	r1, #1
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fb0d 	bl	8009ed8 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 80098be:	e004      	b.n	80098ca <prvProcessEthernetPacket+0xba>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f007 ff11 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
            break;
 80098c6:	e000      	b.n	80098ca <prvProcessEthernetPacket+0xba>
            break;
 80098c8:	bf00      	nop
    }
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	08013c44 	.word	0x08013c44

080098d8 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress: The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	061a      	lsls	r2, r3, #24
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	021b      	lsls	r3, r3, #8
 80098e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098ec:	431a      	orrs	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	0a1b      	lsrs	r3, r3, #8
 80098f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80098f6:	431a      	orrs	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	0e1b      	lsrs	r3, r3, #24
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009906:	d306      	bcc.n	8009916 <xIsIPv4Multicast+0x3e>
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800990e:	d202      	bcs.n	8009916 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 8009910:	2301      	movs	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	e001      	b.n	800991a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800991a:	68fb      	ldr	r3, [r7, #12]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress: IP address.
 * @param[out] pxMACAddress: Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	061a      	lsls	r2, r3, #24
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	021b      	lsls	r3, r3, #8
 800993a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800993e:	431a      	orrs	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	0a1b      	lsrs	r3, r3, #8
 8009944:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009948:	431a      	orrs	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	0e1b      	lsrs	r3, r3, #24
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2201      	movs	r2, #1
 8009956:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2200      	movs	r2, #0
 800995c:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	225e      	movs	r2, #94	; 0x5e
 8009962:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	0c1b      	lsrs	r3, r3, #16
 8009968:	b2db      	uxtb	r3, r3
 800996a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996e:	b2da      	uxtb	r2, r3
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	0a1b      	lsrs	r3, r3, #8
 8009978:	b2da      	uxtb	r2, r3
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	715a      	strb	r2, [r3, #5]
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
	...

08009994 <prvAllowIPPacket>:
 * @return Whether the packet should be processed or dropped.
 */
static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
                                                  const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08a      	sub	sp, #40	; 0x28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	330e      	adds	r3, #14
 80099aa:	623b      	str	r3, [r7, #32]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
        {
            /* In systems with a very small amount of RAM, it might be advantageous
             * to have incoming messages checked earlier, by the network card driver.
             * This method may decrease the usage of sparse network buffers. */
            uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	61fb      	str	r3, [r7, #28]

            /* Ensure that the incoming packet is not fragmented (only outgoing
             * packets can be fragmented) as these are the only handled IP frames
             * currently. */
            if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	88db      	ldrh	r3, [r3, #6]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	461a      	mov	r2, r3
 80099ba:	f64f 730f 	movw	r3, #65295	; 0xff0f
 80099be:	4013      	ands	r3, r2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <prvAllowIPPacket+0x38>
            {
                /* Can not handle, fragmented packet. */
                eReturn = eReleaseBuffer;
 80099c4:	2300      	movs	r3, #0
 80099c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099ca:	e024      	b.n	8009a16 <prvAllowIPPacket+0x82>
            }

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	2b44      	cmp	r3, #68	; 0x44
 80099d2:	d903      	bls.n	80099dc <prvAllowIPPacket+0x48>
                     ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	781b      	ldrb	r3, [r3, #0]
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 80099d8:	2b4f      	cmp	r3, #79	; 0x4f
 80099da:	d903      	bls.n	80099e4 <prvAllowIPPacket+0x50>
            {
                /* Can not handle, unknown or invalid header version. */
                eReturn = eReleaseBuffer;
 80099dc:	2300      	movs	r3, #0
 80099de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099e2:	e018      	b.n	8009a16 <prvAllowIPPacket+0x82>
            }
            /* Is the packet for this IP address? */
            else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 80099e4:	4b37      	ldr	r3, [pc, #220]	; (8009ac4 <prvAllowIPPacket+0x130>)
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	69fa      	ldr	r2, [r7, #28]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d013      	beq.n	8009a16 <prvAllowIPPacket+0x82>
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f4:	d00f      	beq.n	8009a16 <prvAllowIPPacket+0x82>
                     /* Is it the global broadcast address 255.255.255.255 ? */
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
                     /* Is it a specific broadcast address 192.168.1.255 ? */
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 80099f6:	4b34      	ldr	r3, [pc, #208]	; (8009ac8 <prvAllowIPPacket+0x134>)
 80099f8:	691b      	ldr	r3, [r3, #16]
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 80099fa:	69fa      	ldr	r2, [r7, #28]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d00a      	beq.n	8009a16 <prvAllowIPPacket+0x82>
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	4a32      	ldr	r2, [pc, #200]	; (8009acc <prvAllowIPPacket+0x138>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d006      	beq.n	8009a16 <prvAllowIPPacket+0x82>
                     #if ( ipconfigUSE_LLMNR == 1 )
                         /* Is it the LLMNR multicast address? */
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
                     #endif
                     /* Or (during DHCP negotiation) we have no IP-address yet? */
                     ( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 8009a08:	4b2e      	ldr	r3, [pc, #184]	; (8009ac4 <prvAllowIPPacket+0x130>)
 8009a0a:	695b      	ldr	r3, [r3, #20]
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <prvAllowIPPacket+0x82>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
        }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
        {
            if( eReturn == eProcessBuffer )
 8009a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d10d      	bne.n	8009a3a <prvAllowIPPacket+0xa6>
            {
                if( xCheckSizeFields( ( uint8_t * ) ( pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer->xDataLength ) != pdPASS )
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	699a      	ldr	r2, [r3, #24]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	4619      	mov	r1, r3
 8009a28:	4610      	mov	r0, r2
 8009a2a:	f000 f9bb 	bl	8009da4 <xCheckSizeFields>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d002      	beq.n	8009a3a <prvAllowIPPacket+0xa6>
                {
                    /* Some of the length checks were not successful. */
                    eReturn = eReleaseBuffer;
 8009a34:	2300      	movs	r3, #0
 8009a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Check if this is a UDP packet without a checksum. */
                    if( eReturn == eProcessBuffer )
 8009a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d13a      	bne.n	8009ab8 <prvAllowIPPacket+0x124>
                        /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                         * and so UDP packets carrying a protocol checksum of 0, will
                         * be dropped. */

                        /* Identify the next protocol. */
                        if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	7ddb      	ldrb	r3, [r3, #23]
 8009a46:	2b11      	cmp	r3, #17
 8009a48:	d136      	bne.n	8009ab8 <prvAllowIPPacket+0x124>
                        {
                            ProtocolPacket_t * pxProtPack;
                            const uint16_t * pusChecksum;

                            /* pxProtPack will point to the offset were the protocols begin. */
                            pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pxNetworkBuffer->pucEthernetBuffer[ uxHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	699a      	ldr	r2, [r3, #24]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	3b14      	subs	r3, #20
 8009a52:	4413      	add	r3, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff fa9e 	bl	8008f96 <vCastPointerTo_ProtocolPacket_t>
 8009a5a:	61b8      	str	r0, [r7, #24]
                            pusChecksum = ( const uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	3328      	adds	r3, #40	; 0x28
 8009a60:	617b      	str	r3, [r7, #20]

                            if( *pusChecksum == ( uint16_t ) 0U )
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d126      	bne.n	8009ab8 <prvAllowIPPacket+0x124>
                            {
                                #if ( ipconfigHAS_PRINTF != 0 )
                                    {
                                        static BaseType_t xCount = 0;

                                        if( xCount < 5 )
 8009a6a:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <prvAllowIPPacket+0x13c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	dc1f      	bgt.n	8009ab2 <prvAllowIPPacket+0x11e>
                                        {
                                            FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009a78:	061a      	lsls	r2, r3, #24
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a86:	431a      	orrs	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009a8e:	0a1b      	lsrs	r3, r3, #8
 8009a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009a94:	431a      	orrs	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009a9c:	0e1b      	lsrs	r3, r3, #24
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	480c      	ldr	r0, [pc, #48]	; (8009ad4 <prvAllowIPPacket+0x140>)
 8009aa4:	f7f6 ff96 	bl	80009d4 <vLoggingPrintf>
                                                               FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                            xCount++;
 8009aa8:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <prvAllowIPPacket+0x13c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3301      	adds	r3, #1
 8009aae:	4a08      	ldr	r2, [pc, #32]	; (8009ad0 <prvAllowIPPacket+0x13c>)
 8009ab0:	6013      	str	r3, [r2, #0]
                                        }
                                    }
                                #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                                /* Protocol checksum not accepted. */
                                eReturn = eReleaseBuffer;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* to avoid warning unused parameters */
            ( void ) uxHeaderLength;
        }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 8009ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3728      	adds	r7, #40	; 0x28
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000018 	.word	0x20000018
 8009ac8:	20025080 	.word	0x20025080
 8009acc:	fc0000e0 	.word	0xfc0000e0
 8009ad0:	200250e8 	.word	0x200250e8
 8009ad4:	08013d24 	.word	0x08013d24

08009ad8 <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b090      	sub	sp, #64	; 0x40
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	330e      	adds	r3, #14
 8009ae6:	63bb      	str	r3, [r7, #56]	; 0x38
    size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	637b      	str	r3, [r7, #52]	; 0x34
    UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009af6:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t ucProtocol;

    /* Bound the calculated header length: take away the Ethernet header size,
     * then check if the IP header is claiming to be longer than the remaining
     * total packet size. Also check for minimal header field length. */
    if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	3b0e      	subs	r3, #14
 8009afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d802      	bhi.n	8009b0a <prvProcessIPPacket+0x32>
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	2b13      	cmp	r3, #19
 8009b08:	d803      	bhi.n	8009b12 <prvProcessIPPacket+0x3a>
        ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
    {
        eReturn = eReleaseBuffer;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009b10:	e0cb      	b.n	8009caa <prvProcessIPPacket+0x1d2>
    }
    else
    {
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	7ddb      	ldrb	r3, [r3, #23]
 8009b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        /* Check if the IP headers are acceptable and if it has our destination. */
        eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff ff38 	bl	8009994 <prvAllowIPPacket>
 8009b24:	4603      	mov	r3, r0
 8009b26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        if( eReturn == eProcessBuffer )
 8009b2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	f040 80b8 	bne.w	8009ca4 <prvProcessIPPacket+0x1cc>
        {
            /* Are there IP-options. */
            if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	2b14      	cmp	r3, #20
 8009b38:	d927      	bls.n	8009b8a <prvProcessIPPacket+0xb2>
                 * The extra space is used for IP-options. */
                #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
                    {
                        /* All structs of headers expect a IP header size of 20 bytes
                         * IP header options were included, we'll ignore them and cut them out. */
                        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	3b14      	subs	r3, #20
 8009b3e:	62bb      	str	r3, [r7, #40]	; 0x28
                        /* From: the previous start of UDP/ICMP/TCP data. */
                        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	330e      	adds	r3, #14
 8009b48:	4413      	add	r3, r2
 8009b4a:	627b      	str	r3, [r7, #36]	; 0x24
                        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
                        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	3322      	adds	r3, #34	; 0x22
 8009b52:	623b      	str	r3, [r7, #32]
                        /* How many: total length minus the options and the lower headers. */
                        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	69da      	ldr	r2, [r3, #28]
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	3b22      	subs	r3, #34	; 0x22
 8009b5e:	61fb      	str	r3, [r7, #28]

                        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 8009b60:	69fa      	ldr	r2, [r7, #28]
 8009b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b64:	6a38      	ldr	r0, [r7, #32]
 8009b66:	f007 fe4f 	bl	8011808 <memmove>
                        pxNetworkBuffer->xDataLength -= optlen;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	69da      	ldr	r2, [r3, #28]
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	1ad2      	subs	r2, r2, r3
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	61da      	str	r2, [r3, #28]

                        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
                        pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 8009b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	f023 030f 	bic.w	r3, r3, #15
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	f043 0305 	orr.w	r3, r3, #5
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b88:	701a      	strb	r2, [r3, #0]
                        eReturn = eReleaseBuffer;
                    }
                #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */
            }

            if( eReturn != eReleaseBuffer )
 8009b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 8088 	beq.w	8009ca4 <prvProcessIPPacket+0x1cc>
            {
                /* Add the IP and MAC addresses to the ARP table if they are not
                 * already there - otherwise refresh the age of the existing
                 * entry. */
                if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009b94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b98:	2b11      	cmp	r3, #17
 8009b9a:	d007      	beq.n	8009bac <prvProcessIPPacket+0xd4>
                    /* Refresh the ARP cache with the IP/MAC-address of the received
                     *  packet. For UDP packets, this will be done later in
                     *  xProcessReceivedUDPPacket(), as soon as it's know that the message
                     *  will be handled.  This will prevent the ARP cache getting
                     *  overwritten with the IP address of useless broadcast packets. */
                    vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	1d9a      	adds	r2, r3, #6
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	f7fd ff02 	bl	80079b0 <vARPRefreshCacheEntry>
                }

                switch( ucProtocol )
 8009bac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bb0:	2b06      	cmp	r3, #6
 8009bb2:	d068      	beq.n	8009c86 <prvProcessIPPacket+0x1ae>
 8009bb4:	2b11      	cmp	r3, #17
 8009bb6:	d01d      	beq.n	8009bf4 <prvProcessIPPacket+0x11c>
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d000      	beq.n	8009bbe <prvProcessIPPacket+0xe6>
                                xProcessedTCPMessage++;
                                break;
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        break;
 8009bbc:	e075      	b.n	8009caa <prvProcessIPPacket+0x1d2>
                            if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	2b29      	cmp	r3, #41	; 0x29
 8009bc4:	d912      	bls.n	8009bec <prvProcessIPPacket+0x114>
                                ICMPPacket_t * pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff f9cd 	bl	8008f6a <vCastPointerTo_ICMPPacket_t>
 8009bd0:	60b8      	str	r0, [r7, #8]
                                if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	691a      	ldr	r2, [r3, #16]
 8009bd6:	4b38      	ldr	r3, [pc, #224]	; (8009cb8 <prvProcessIPPacket+0x1e0>)
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d164      	bne.n	8009ca8 <prvProcessIPPacket+0x1d0>
                                    eReturn = prvProcessICMPPacket( pxICMPPacket );
 8009bde:	68b8      	ldr	r0, [r7, #8]
 8009be0:	f000 f8c6 	bl	8009d70 <prvProcessICMPPacket>
 8009be4:	4603      	mov	r3, r0
 8009be6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 8009bea:	e05d      	b.n	8009ca8 <prvProcessIPPacket+0x1d0>
                                eReturn = eReleaseBuffer;
 8009bec:	2300      	movs	r3, #0
 8009bee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 8009bf2:	e059      	b.n	8009ca8 <prvProcessIPPacket+0x1d0>
                           const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff f9c1 	bl	8008f80 <vCastConstPointerTo_UDPPacket_t>
 8009bfe:	61b8      	str	r0, [r7, #24]
                           usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength );
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	021b      	lsls	r3, r3, #8
 8009c08:	b21a      	sxth	r2, r3
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	0a1b      	lsrs	r3, r3, #8
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	b21b      	sxth	r3, r3
 8009c16:	4313      	orrs	r3, r2
 8009c18:	b21b      	sxth	r3, r3
 8009c1a:	82fb      	strh	r3, [r7, #22]
                           if( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	2b29      	cmp	r3, #41	; 0x29
 8009c22:	d92a      	bls.n	8009c7a <prvProcessIPPacket+0x1a2>
 8009c24:	8afb      	ldrh	r3, [r7, #22]
 8009c26:	2b07      	cmp	r3, #7
 8009c28:	d927      	bls.n	8009c7a <prvProcessIPPacket+0x1a2>
                               uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	3b2a      	subs	r3, #42	; 0x2a
 8009c30:	613b      	str	r3, [r7, #16]
                               uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 8009c32:	8afb      	ldrh	r3, [r7, #22]
 8009c34:	3b08      	subs	r3, #8
 8009c36:	60fb      	str	r3, [r7, #12]
                               if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d904      	bls.n	8009c4a <prvProcessIPPacket+0x172>
                                   pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	61da      	str	r2, [r3, #28]
                               pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	841a      	strh	r2, [r3, #32]
                               pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	615a      	str	r2, [r3, #20]
                               if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	4619      	mov	r1, r3
 8009c66:	6838      	ldr	r0, [r7, #0]
 8009c68:	f006 f9ca 	bl	8010000 <xProcessReceivedUDPPacket>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d107      	bne.n	8009c82 <prvProcessIPPacket+0x1aa>
                                   eReturn = eFrameConsumed;
 8009c72:	2303      	movs	r3, #3
 8009c74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                           {
 8009c78:	e003      	b.n	8009c82 <prvProcessIPPacket+0x1aa>
                               eReturn = eReleaseBuffer;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                       break;
 8009c80:	e013      	b.n	8009caa <prvProcessIPPacket+0x1d2>
                           {
 8009c82:	bf00      	nop
                       break;
 8009c84:	e011      	b.n	8009caa <prvProcessIPPacket+0x1d2>
                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8009c86:	6838      	ldr	r0, [r7, #0]
 8009c88:	f004 fb4a 	bl	800e320 <xProcessReceivedTCPPacket>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d102      	bne.n	8009c98 <prvProcessIPPacket+0x1c0>
                                    eReturn = eFrameConsumed;
 8009c92:	2303      	movs	r3, #3
 8009c94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                xProcessedTCPMessage++;
 8009c98:	4b08      	ldr	r3, [pc, #32]	; (8009cbc <prvProcessIPPacket+0x1e4>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	4a07      	ldr	r2, [pc, #28]	; (8009cbc <prvProcessIPPacket+0x1e4>)
 8009ca0:	6013      	str	r3, [r2, #0]
                                break;
 8009ca2:	e002      	b.n	8009caa <prvProcessIPPacket+0x1d2>
                }
            }
 8009ca4:	bf00      	nop
 8009ca6:	e000      	b.n	8009caa <prvProcessIPPacket+0x1d2>
                        break;
 8009ca8:	bf00      	nop
        }
    }

    return eReturn;
 8009caa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3740      	adds	r7, #64	; 0x40
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000018 	.word	0x20000018
 8009cbc:	200250b0 	.word	0x200250b0

08009cc0 <prvProcessICMPEchoRequest>:
 * @brief Process an ICMP echo request.
 *
 * @param[in,out] pxICMPPacket: The IP packet that contains the ICMP message.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
    {
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint16_t usRequest;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3322      	adds	r3, #34	; 0x22
 8009ccc:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	330e      	adds	r3, #14
 8009cd2:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	701a      	strb	r2, [r3, #0]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8009ce2:	4b22      	ldr	r3, [pc, #136]	; (8009d6c <prvProcessICMPEchoRequest+0xac>)
 8009ce4:	695a      	ldr	r2, [r3, #20]
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	60da      	str	r2, [r3, #12]
         * has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
         * usGenerateChecksum(). */

        /* due to compiler warning "integer operation result is out of range" */

        usRequest = ( uint16_t ) ( ( uint16_t ) ipICMP_ECHO_REQUEST << 8 );
 8009cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cee:	81fb      	strh	r3, [r7, #14]

        if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	885b      	ldrh	r3, [r3, #2]
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	89fb      	ldrh	r3, [r7, #14]
 8009cf8:	43db      	mvns	r3, r3
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	021b      	lsls	r3, r3, #8
 8009cfe:	b299      	uxth	r1, r3
 8009d00:	89f8      	ldrh	r0, [r7, #14]
 8009d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d06:	1a1b      	subs	r3, r3, r0
 8009d08:	0a1b      	lsrs	r3, r3, #8
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	430b      	orrs	r3, r1
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d312      	bcc.n	8009d3a <prvProcessICMPEchoRequest+0x7a>
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	885b      	ldrh	r3, [r3, #2]
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	89fb      	ldrh	r3, [r7, #14]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	021b      	lsls	r3, r3, #8
 8009d22:	b299      	uxth	r1, r3
 8009d24:	89fb      	ldrh	r3, [r7, #14]
 8009d26:	3301      	adds	r3, #1
 8009d28:	0a1b      	lsrs	r3, r3, #8
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	430b      	orrs	r3, r1
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	4413      	add	r3, r2
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	805a      	strh	r2, [r3, #2]
 8009d38:	e010      	b.n	8009d5c <prvProcessICMPEchoRequest+0x9c>
        }
        else
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	885b      	ldrh	r3, [r3, #2]
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	89fb      	ldrh	r3, [r7, #14]
 8009d42:	021b      	lsls	r3, r3, #8
 8009d44:	b219      	sxth	r1, r3
 8009d46:	89fb      	ldrh	r3, [r7, #14]
 8009d48:	0a1b      	lsrs	r3, r3, #8
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	b21b      	sxth	r3, r3
 8009d4e:	430b      	orrs	r3, r1
 8009d50:	b21b      	sxth	r3, r3
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	4413      	add	r3, r2
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	805a      	strh	r2, [r3, #2]
        }

        return eReturnEthernetFrame;
 8009d5c:	2302      	movs	r3, #2
    }
 8009d5e:	4618      	mov	r0, r3
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	20000018 	.word	0x20000018

08009d70 <prvProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
    {
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d008      	beq.n	8009d98 <prvProcessICMPPacket+0x28>
 8009d86:	2b08      	cmp	r3, #8
 8009d88:	d000      	beq.n	8009d8c <prvProcessICMPPacket+0x1c>
                #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                break;

            default:
                /* Only ICMP echo packets are handled. */
                break;
 8009d8a:	e006      	b.n	8009d9a <prvProcessICMPPacket+0x2a>
                    eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7ff ff97 	bl	8009cc0 <prvProcessICMPEchoRequest>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]
                break;
 8009d96:	e000      	b.n	8009d9a <prvProcessICMPPacket+0x2a>
                break;
 8009d98:	bf00      	nop
        }

        return eReturn;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
    }
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <xCheckSizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer,
                                        size_t uxBufferLength )
    {
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08c      	sub	sp, #48	; 0x30
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
        const ProtocolPacket_t * pxProtPack;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	62bb      	str	r3, [r7, #40]	; 0x28

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8009db2:	2300      	movs	r3, #0
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b21      	cmp	r3, #33	; 0x21
 8009dba:	d802      	bhi.n	8009dc2 <xCheckSizeFields+0x1e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009dc0:	e07b      	b.n	8009eba <xCheckSizeFields+0x116>
            }

            /* Map the buffer onto a IP-Packet struct to easily access the
             * fields of the IP packet. */
            pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff f8c6 	bl	8008f54 <vCastConstPointerTo_IPPacket_t>
 8009dc8:	6238      	str	r0, [r7, #32]

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	7b9b      	ldrb	r3, [r3, #14]
 8009dce:	83fb      	strh	r3, [r7, #30]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8009dd0:	8bfb      	ldrh	r3, [r7, #30]
 8009dd2:	2b44      	cmp	r3, #68	; 0x44
 8009dd4:	d902      	bls.n	8009ddc <xCheckSizeFields+0x38>
 8009dd6:	8bfb      	ldrh	r3, [r7, #30]
 8009dd8:	2b4f      	cmp	r3, #79	; 0x4f
 8009dda:	d902      	bls.n	8009de2 <xCheckSizeFields+0x3e>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8009ddc:	2302      	movs	r3, #2
 8009dde:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009de0:	e06b      	b.n	8009eba <xCheckSizeFields+0x116>
            }

            ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 8009de2:	8bfb      	ldrh	r3, [r7, #30]
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009dec:	83fb      	strh	r3, [r7, #30]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8009dee:	8bfb      	ldrh	r3, [r7, #30]
 8009df0:	61bb      	str	r3, [r7, #24]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	330e      	adds	r3, #14
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d202      	bcs.n	8009e02 <xCheckSizeFields+0x5e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009e00:	e05b      	b.n	8009eba <xCheckSizeFields+0x116>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	7c1a      	ldrb	r2, [r3, #16]
 8009e06:	7c5b      	ldrb	r3, [r3, #17]
 8009e08:	021b      	lsls	r3, r3, #8
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	82fb      	strh	r3, [r7, #22]
            usLength = FreeRTOS_ntohs( usLength );
 8009e0e:	8afb      	ldrh	r3, [r7, #22]
 8009e10:	021b      	lsls	r3, r3, #8
 8009e12:	b21a      	sxth	r2, r3
 8009e14:	8afb      	ldrh	r3, [r7, #22]
 8009e16:	0a1b      	lsrs	r3, r3, #8
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	b21b      	sxth	r3, r3
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	b21b      	sxth	r3, r3
 8009e20:	82fb      	strh	r3, [r7, #22]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8009e22:	8afb      	ldrh	r3, [r7, #22]
 8009e24:	330e      	adds	r3, #14
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d202      	bcs.n	8009e32 <xCheckSizeFields+0x8e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8009e2c:	2304      	movs	r3, #4
 8009e2e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009e30:	e043      	b.n	8009eba <xCheckSizeFields+0x116>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	7ddb      	ldrb	r3, [r3, #23]
 8009e36:	757b      	strb	r3, [r7, #21]
             * protocol (Layer 3 or 4) header will be aligned, which is the convenience
             * of this calculation. */

            /* Map the Buffer onto the Protocol Packet struct for easy access to the
             * struct fields. */
            pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	3b14      	subs	r3, #20
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	4413      	add	r3, r2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7ff f8b3 	bl	8008fac <vCastConstPointerTo_ProtocolPacket_t>
 8009e46:	6138      	str	r0, [r7, #16]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009e48:	7d7b      	ldrb	r3, [r7, #21]
 8009e4a:	2b11      	cmp	r3, #17
 8009e4c:	d103      	bne.n	8009e56 <xCheckSizeFields+0xb2>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	3316      	adds	r3, #22
 8009e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e54:	e013      	b.n	8009e7e <xCheckSizeFields+0xda>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8009e56:	7d7b      	ldrb	r3, [r7, #21]
 8009e58:	2b06      	cmp	r3, #6
 8009e5a:	d103      	bne.n	8009e64 <xCheckSizeFields+0xc0>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	3322      	adds	r3, #34	; 0x22
 8009e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e62:	e00c      	b.n	8009e7e <xCheckSizeFields+0xda>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8009e64:	7d7b      	ldrb	r3, [r7, #21]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d002      	beq.n	8009e70 <xCheckSizeFields+0xcc>
 8009e6a:	7d7b      	ldrb	r3, [r7, #21]
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d103      	bne.n	8009e78 <xCheckSizeFields+0xd4>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	3316      	adds	r3, #22
 8009e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e76:	e002      	b.n	8009e7e <xCheckSizeFields+0xda>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8009e78:	2305      	movs	r3, #5
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009e7c:	e01d      	b.n	8009eba <xCheckSizeFields+0x116>
            }

            if( uxBufferLength < uxMinimumLength )
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d202      	bcs.n	8009e8c <xCheckSizeFields+0xe8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8009e86:	2306      	movs	r3, #6
 8009e88:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009e8a:	e016      	b.n	8009eba <xCheckSizeFields+0x116>
            }

            uxLength = ( size_t ) usLength;
 8009e8c:	8afb      	ldrh	r3, [r7, #22]
 8009e8e:	60fb      	str	r3, [r7, #12]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	461a      	mov	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]

            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b07      	cmp	r3, #7
 8009ea0:	d906      	bls.n	8009eb0 <xCheckSizeFields+0x10c>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009ea8:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d902      	bls.n	8009eb6 <xCheckSizeFields+0x112>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8009eb0:	2307      	movs	r3, #7
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8009eb4:	e001      	b.n	8009eba <xCheckSizeFields+0x116>
            }

            xResult = pdPASS;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d003      	beq.n	8009ec8 <xCheckSizeFields+0x124>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
 8009ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ec2:	4804      	ldr	r0, [pc, #16]	; (8009ed4 <xCheckSizeFields+0x130>)
 8009ec4:	f7f6 fd86 	bl	80009d4 <vLoggingPrintf>
        }

        return xResult;
 8009ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3730      	adds	r7, #48	; 0x30
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	08013d60 	.word	0x08013d60

08009ed8 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer: The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend: Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
        {
            if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	2b3b      	cmp	r3, #59	; 0x3b
 8009ee8:	d818      	bhi.n	8009f1c <vReturnEthernetFrame+0x44>
            {
                BaseType_t xIndex;

                FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4827      	ldr	r0, [pc, #156]	; (8009f90 <vReturnEthernetFrame+0xb8>)
 8009ef2:	f7f6 fd6f 	bl	80009d4 <vLoggingPrintf>

                for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	61fb      	str	r3, [r7, #28]
 8009efc:	e008      	b.n	8009f10 <vReturnEthernetFrame+0x38>
                {
                    pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	699a      	ldr	r2, [r3, #24]
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	4413      	add	r3, r2
 8009f06:	2200      	movs	r2, #0
 8009f08:	701a      	strb	r2, [r3, #0]
                for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	2b3b      	cmp	r3, #59	; 0x3b
 8009f14:	ddf3      	ble.n	8009efe <vReturnEthernetFrame+0x26>
                }

                pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	223c      	movs	r2, #60	; 0x3c
 8009f1a:	61da      	str	r2, [r3, #28]
            }
        }
    #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d111      	bne.n	8009f46 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff fa67 	bl	80093fc <pxDuplicateNetworkBufferWithDescriptor>
 8009f2e:	61b8      	str	r0, [r7, #24]

            if( pxNewBuffer != NULL )
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d005      	beq.n	8009f42 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8009f36:	2301      	movs	r3, #1
 8009f38:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	69da      	ldr	r2, [r3, #28]
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	61da      	str	r2, [r3, #28]
            }

            pxNetworkBuffer = pxNewBuffer;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d01d      	beq.n	8009f88 <vReturnEthernetFrame+0xb0>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* Map the Buffer to Ethernet Header struct for easy access to fields. */
        pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fe ffd3 	bl	8008efc <vCastPointerTo_EthernetHeader_t>
 8009f56:	6178      	str	r0, [r7, #20]
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        /* Swap source and destination MAC addresses. */
        pvCopySource = &pxEthernetHeader->xSourceAddress;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	3306      	adds	r3, #6
 8009f5c:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8009f62:	2206      	movs	r2, #6
 8009f64:	6939      	ldr	r1, [r7, #16]
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f007 fc43 	bl	80117f2 <memcpy>

        pvCopySource = ipLOCAL_MAC_ADDRESS;
 8009f6c:	4b09      	ldr	r3, [pc, #36]	; (8009f94 <vReturnEthernetFrame+0xbc>)
 8009f6e:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	3306      	adds	r3, #6
 8009f74:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009f76:	2206      	movs	r2, #6
 8009f78:	6939      	ldr	r1, [r7, #16]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f007 fc39 	bl	80117f2 <memcpy>

        /* Send! */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f006 fafe 	bl	8010584 <xNetworkInterfaceOutput>
    }
}
 8009f88:	bf00      	nop
 8009f8a:	3720      	adds	r7, #32
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	08013eb0 	.word	0x08013eb0
 8009f94:	20000018 	.word	0x20000018

08009f98 <FreeRTOS_GetMACAddress>:
 * @brief Get the MAC address.
 *
 * @return The pointer to MAC address.
 */
const uint8_t * FreeRTOS_GetMACAddress( void )
{
 8009f98:	b480      	push	{r7}
 8009f9a:	af00      	add	r7, sp, #0
    return ipLOCAL_MAC_ADDRESS;
 8009f9c:	4b02      	ldr	r3, [pc, #8]	; (8009fa8 <FreeRTOS_GetMACAddress+0x10>)
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	20000018 	.word	0x20000018

08009fac <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8009fb0:	4b03      	ldr	r3, [pc, #12]	; (8009fc0 <xIPIsNetworkTaskReady+0x14>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	200250e0 	.word	0x200250e0

08009fc4 <FreeRTOS_max_uint32>:
        {
            return ( a >= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_max_uint32( uint32_t a,
                                                        uint32_t b )
        {
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
            return ( a >= b ) ? a : b;
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	bf38      	it	cc
 8009fd6:	4613      	movcc	r3, r2
        }
 8009fd8:	4618      	mov	r0, r3
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <FreeRTOS_round_up>:
        {
            return ( a <= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_round_up( uint32_t a,
                                                      uint32_t d )
        {
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
            return d * ( ( a + d - 1U ) / d );
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	1e5a      	subs	r2, r3, #1
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	fb02 f303 	mul.w	r3, r2, r3
        }
 800a002:	4618      	mov	r0, r3
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <uxStreamBufferSpace>:
                                                  const size_t uxLower,
                                                  const size_t uxUpper );
    static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t * pxBuffer,
                                                  const size_t uxLower,
                                                  const size_t uxUpper )
    {
 800a00e:	b480      	push	{r7}
 800a010:	b087      	sub	sp, #28
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	441a      	add	r2, r3
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	3b01      	subs	r3, #1
 800a028:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	429a      	cmp	r2, r3
 800a032:	d304      	bcc.n	800a03e <uxStreamBufferSpace+0x30>
        {
            uxCount -= pxBuffer->LENGTH;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 800a03e:	697b      	ldr	r3, [r7, #20]
    }
 800a040:	4618      	mov	r0, r3
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <uxStreamBufferDistance>:
                                                     const size_t uxLower,
                                                     const size_t uxUpper );
    static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t * pxBuffer,
                                                     const size_t uxLower,
                                                     const size_t uxUpper )
    {
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	691a      	ldr	r2, [r3, #16]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	441a      	add	r2, r3
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d304      	bcc.n	800a07a <uxStreamBufferDistance+0x2e>
        {
            uxCount -= pxBuffer->LENGTH;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 800a07a:	697b      	ldr	r3, [r7, #20]
    }
 800a07c:	4618      	mov	r0, r3
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer )
    {
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
 * before hitting on uxTail */
        size_t uxHead = pxBuffer->uxHead;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	68f9      	ldr	r1, [r7, #12]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff ffb4 	bl	800a00e <uxStreamBufferSpace>
 800a0a6:	4603      	mov	r3, r0
    }
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer )
    {
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
 * or the number of items which can still be added to uxFront,
 * before hitting on uxTail */

        size_t uxFront = pxBuffer->uxFront;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	68f9      	ldr	r1, [r7, #12]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff ffa0 	bl	800a00e <uxStreamBufferSpace>
 800a0ce:	4603      	mov	r3, r0
    }
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer )
    {
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
 * before reaching uxHead */
        size_t uxHead = pxBuffer->uxHead;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7ff ffab 	bl	800a04c <uxStreamBufferDistance>
 800a0f6:	4603      	mov	r3, r0
    }
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800a108:	687b      	ldr	r3, [r7, #4]
    }
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <vCastConstPointerTo_FreeRTOS_Socket_t>:
    {
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
        return ( const FreeRTOS_Socket_t * ) pvArgument;
 800a11e:	687b      	ldr	r3, [r7, #4]
    }
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 800a134:	687b      	ldr	r3, [r7, #4]
}
 800a136:	4618      	mov	r0, r3
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <vCastPointerTo_StreamBuffer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type StreamBuffer_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( StreamBuffer_t )
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
    return ( StreamBuffer_t * ) pvArgument;
 800a14a:	687b      	ldr	r3, [r7, #4]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800a158:	b480      	push	{r7}
 800a15a:	b087      	sub	sp, #28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <prvValidSocket+0x1a>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a170:	d102      	bne.n	800a178 <prvValidSocket+0x20>
    {
        xReturn = pdFALSE;
 800a172:	2300      	movs	r3, #0
 800a174:	617b      	str	r3, [r7, #20]
 800a176:	e015      	b.n	800a1a4 <prvValidSocket+0x4c>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d006      	beq.n	800a18c <prvValidSocket+0x34>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d102      	bne.n	800a18c <prvValidSocket+0x34>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800a186:	2300      	movs	r3, #0
 800a188:	617b      	str	r3, [r7, #20]
 800a18a:	e00b      	b.n	800a1a4 <prvValidSocket+0x4c>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	429a      	cmp	r2, r3
 800a198:	d002      	beq.n	800a1a0 <prvValidSocket+0x48>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	e001      	b.n	800a1a4 <prvValidSocket+0x4c>
    }
    else
    {
        xReturn = pdTRUE;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a1a4:	697b      	ldr	r3, [r7, #20]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	371c      	adds	r7, #28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
	...

0800a1b4 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800a1b8:	4803      	ldr	r0, [pc, #12]	; (800a1c8 <vNetworkSocketsInit+0x14>)
 800a1ba:	f7fa fba5 	bl	8004908 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
        {
            vListInitialise( &xBoundTCPSocketsList );
 800a1be:	4803      	ldr	r0, [pc, #12]	; (800a1cc <vNetworkSocketsInit+0x18>)
 800a1c0:	f7fa fba2 	bl	8004908 <vListInitialise>
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800a1c4:	bf00      	nop
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20025c64 	.word	0x20025c64
 800a1cc:	20025c50 	.word	0x20025c50

0800a1d0 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800a1e6:	f7ff fee1 	bl	8009fac <xIPIsNetworkTaskReady>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d102      	bne.n	800a1f6 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	617b      	str	r3, [r7, #20]
 800a1f4:	e04e      	b.n	800a294 <prvDetermineSocketSize+0xc4>
    }
    else
    {
        /* Only Ethernet is currently supported. */
        configASSERT( xDomain == FREERTOS_AF_INET );
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d004      	beq.n	800a206 <prvDetermineSocketSize+0x36>
 800a1fc:	4928      	ldr	r1, [pc, #160]	; (800a2a0 <prvDetermineSocketSize+0xd0>)
 800a1fe:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800a202:	f7f6 fc10 	bl	8000a26 <vAssertCalled>

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800a206:	4b27      	ldr	r3, [pc, #156]	; (800a2a4 <prvDetermineSocketSize+0xd4>)
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20e:	d004      	beq.n	800a21a <prvDetermineSocketSize+0x4a>
 800a210:	4923      	ldr	r1, [pc, #140]	; (800a2a0 <prvDetermineSocketSize+0xd0>)
 800a212:	f240 104b 	movw	r0, #331	; 0x14b
 800a216:	f7f6 fc06 	bl	8000a26 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
            {
                /* Check if the TCP socket-list has been initialised. */
                configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800a21a:	4b23      	ldr	r3, [pc, #140]	; (800a2a8 <prvDetermineSocketSize+0xd8>)
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a222:	d004      	beq.n	800a22e <prvDetermineSocketSize+0x5e>
 800a224:	491e      	ldr	r1, [pc, #120]	; (800a2a0 <prvDetermineSocketSize+0xd0>)
 800a226:	f240 104f 	movw	r0, #335	; 0x14f
 800a22a:	f7f6 fbfc 	bl	8000a26 <vAssertCalled>
            }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b11      	cmp	r3, #17
 800a232:	d110      	bne.n	800a256 <prvDetermineSocketSize+0x86>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b02      	cmp	r3, #2
 800a238:	d009      	beq.n	800a24e <prvDetermineSocketSize+0x7e>
            {
                xReturn = pdFAIL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS );
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d004      	beq.n	800a24e <prvDetermineSocketSize+0x7e>
 800a244:	4916      	ldr	r1, [pc, #88]	; (800a2a0 <prvDetermineSocketSize+0xd0>)
 800a246:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800a24a:	f7f6 fbec 	bl	8000a26 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	224c      	movs	r2, #76	; 0x4c
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	e01e      	b.n	800a294 <prvDetermineSocketSize+0xc4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b06      	cmp	r3, #6
 800a25a:	d111      	bne.n	800a280 <prvDetermineSocketSize+0xb0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d009      	beq.n	800a276 <prvDetermineSocketSize+0xa6>
                {
                    xReturn = pdFAIL;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS );
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d004      	beq.n	800a276 <prvDetermineSocketSize+0xa6>
 800a26c:	490c      	ldr	r1, [pc, #48]	; (800a2a0 <prvDetermineSocketSize+0xd0>)
 800a26e:	f240 1065 	movw	r0, #357	; 0x165
 800a272:	f7f6 fbd8 	bl	8000a26 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	e009      	b.n	800a294 <prvDetermineSocketSize+0xc4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800a280:	2300      	movs	r3, #0
 800a282:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS );
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d004      	beq.n	800a294 <prvDetermineSocketSize+0xc4>
 800a28a:	4905      	ldr	r1, [pc, #20]	; (800a2a0 <prvDetermineSocketSize+0xd0>)
 800a28c:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 800a290:	f7f6 fbc9 	bl	8000a26 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800a294:	697b      	ldr	r3, [r7, #20]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	08013fc8 	.word	0x08013fc8
 800a2a4:	20025c64 	.word	0x20025c64
 800a2a8:	20025c50 	.word	0x20025c50

0800a2ac <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;

    if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800a2bc:	f107 0310 	add.w	r3, r7, #16
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	68b9      	ldr	r1, [r7, #8]
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f7ff ff83 	bl	800a1d0 <prvDetermineSocketSize>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d103      	bne.n	800a2d8 <FreeRTOS_socket+0x2c>
    {
        xReturn = FREERTOS_INVALID_SOCKET;
 800a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d4:	61fb      	str	r3, [r7, #28]
 800a2d6:	e080      	b.n	800a3da <FreeRTOS_socket+0x12e>
    {
        /* Allocate the structure that will hold the socket information. The
        * size depends on the type of socket: UDP sockets need less space. A
        * define 'pvPortMallocSocket' will used to allocate the necessary space.
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fc fee6 	bl	80070ac <pvPortMalloc>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff ff0c 	bl	800a100 <vCastPointerTo_FreeRTOS_Socket_t>
 800a2e8:	61b8      	str	r0, [r7, #24]

        if( pxSocket == NULL )
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d103      	bne.n	800a2f8 <FreeRTOS_socket+0x4c>
        {
            xReturn = FREERTOS_INVALID_SOCKET;
 800a2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f4:	61fb      	str	r3, [r7, #28]
 800a2f6:	e070      	b.n	800a3da <FreeRTOS_socket+0x12e>
            iptraceFAILED_TO_CREATE_SOCKET();
        }
        else
        {
            xEventGroup = xEventGroupCreate();
 800a2f8:	f7fa f936 	bl	8004568 <xEventGroupCreate>
 800a2fc:	6178      	str	r0, [r7, #20]

            if( xEventGroup == NULL )
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d106      	bne.n	800a312 <FreeRTOS_socket+0x66>
            {
                vPortFreeSocket( pxSocket );
 800a304:	69b8      	ldr	r0, [r7, #24]
 800a306:	f7fc ff8b 	bl	8007220 <vPortFree>
                xReturn = FREERTOS_INVALID_SOCKET;
 800a30a:	f04f 33ff 	mov.w	r3, #4294967295
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	e063      	b.n	800a3da <FreeRTOS_socket+0x12e>
                    /* Lint wants at least a comment, in case the macro is empty. */
                    iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
                }

                /* Clear the entire space to avoid nulling individual entries. */
                ( void ) memset( pxSocket, 0, uxSocketSize );
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	461a      	mov	r2, r3
 800a316:	2100      	movs	r1, #0
 800a318:	69b8      	ldr	r0, [r7, #24]
 800a31a:	f007 fa8e 	bl	801183a <memset>

                pxSocket->xEventGroup = xEventGroup;
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	605a      	str	r2, [r3, #4]

                /* Initialise the socket's members.  The semaphore will be created
                 * if the socket is bound to an address, for now the pointer to the
                 * semaphore is just set to NULL to show it has not been created. */
                if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b11      	cmp	r3, #17
 800a328:	d104      	bne.n	800a334 <FreeRTOS_socket+0x88>
                {
                    vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	3338      	adds	r3, #56	; 0x38
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fa faea 	bl	8004908 <vListInitialise>
                            pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
                        }
                    #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
                }

                vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	3308      	adds	r3, #8
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fa fb05 	bl	8004948 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	615a      	str	r2, [r3, #20]

                pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	f241 3288 	movw	r2, #5000	; 0x1388
 800a34a:	61da      	str	r2, [r3, #28]
                pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a352:	621a      	str	r2, [r3, #32]
                pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                pxSocket->ucProtocol = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

                #if ( ipconfigUSE_TCP == 1 )
                    {
                        if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b06      	cmp	r3, #6
 800a36a:	d134      	bne.n	800a3d6 <FreeRTOS_socket+0x12a>
                        {
                            /* StreamSize is expressed in number of bytes */
                            /* Round up buffer sizes to nearest multiple of MSS */
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a372:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                            pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ipconfigTCP_MSS;
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a37c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                            pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a386:	66da      	str	r2, [r3, #108]	; 0x6c
                            pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800a388:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800a38c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a390:	f7ff fe28 	bl	8009fe4 <FreeRTOS_round_up>
 800a394:	4602      	mov	r2, r0
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	671a      	str	r2, [r3, #112]	; 0x70
                            /* Use half of the buffer size of the TCP windows */
                            #if ( ipconfigUSE_TCP_WIN == 1 )
                                {
                                    pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a39e:	08db      	lsrs	r3, r3, #3
 800a3a0:	4a10      	ldr	r2, [pc, #64]	; (800a3e4 <FreeRTOS_socket+0x138>)
 800a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a6:	099b      	lsrs	r3, r3, #6
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	2001      	movs	r0, #1
 800a3ac:	f7ff fe0a 	bl	8009fc4 <FreeRTOS_max_uint32>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                                    pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3bc:	08db      	lsrs	r3, r3, #3
 800a3be:	4a09      	ldr	r2, [pc, #36]	; (800a3e4 <FreeRTOS_socket+0x138>)
 800a3c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c4:	099b      	lsrs	r3, r3, #6
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	f7ff fdfb 	bl	8009fc4 <FreeRTOS_max_uint32>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                             * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
                             * socket is connected and data is exchanged. */
                        }
                    }
                #endif /* ipconfigUSE_TCP == 1 */
                xReturn = pxSocket;
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	61fb      	str	r3, [r7, #28]
    }

    /* Remove compiler warnings in the case the configASSERT() is not defined. */
    ( void ) xDomain;

    return xReturn;
 800a3da:	69fb      	ldr	r3, [r7, #28]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	2ce33e6d 	.word	0x2ce33e6d

0800a3e8 <FreeRTOS_recvfrom>:
                           void * pvBuffer,
                           size_t uxBufferLength,
                           BaseType_t xFlags,
                           struct freertos_sockaddr * pxSourceAddress,
                           socklen_t * pxSourceAddressLength )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b092      	sub	sp, #72	; 0x48
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
    BaseType_t lPacketCount;
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    const void * pvCopySource;
    FreeRTOS_Socket_t const * pxSocket = xSocket;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	633b      	str	r3, [r7, #48]	; 0x30
    TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xTimed = pdFALSE;
 800a3fe:	2300      	movs	r3, #0
 800a400:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;
    int32_t lReturn;
    EventBits_t xEventBits = ( EventBits_t ) 0;
 800a402:	2300      	movs	r3, #0
 800a404:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t uxPayloadLength;

    if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800a406:	2201      	movs	r2, #1
 800a408:	2111      	movs	r1, #17
 800a40a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a40c:	f7ff fea4 	bl	800a158 <prvValidSocket>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d103      	bne.n	800a41e <FreeRTOS_recvfrom+0x36>
    {
        lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a416:	f06f 0315 	mvn.w	r3, #21
 800a41a:	637b      	str	r3, [r7, #52]	; 0x34
 800a41c:	e08e      	b.n	800a53c <FreeRTOS_recvfrom+0x154>
    }
    else
    {
        lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a422:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* The function prototype is designed to maintain the expected Berkeley
         * sockets standard, but this implementation does not use all the parameters. */
        ( void ) pxSourceAddressLength;

        while( lPacketCount == 0 )
 800a424:	e02f      	b.n	800a486 <FreeRTOS_recvfrom+0x9e>
        {
            if( xTimed == pdFALSE )
 800a426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d111      	bne.n	800a450 <FreeRTOS_recvfrom+0x68>
            {
                /* Check to see if the socket is non blocking on the first
                 * iteration.  */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	69db      	ldr	r3, [r3, #28]
 800a430:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0 )
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d02a      	beq.n	800a48e <FreeRTOS_recvfrom+0xa6>
                        }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( ( UBaseType_t ) xFlags ) & ( ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) ) != 0U )
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	f003 0310 	and.w	r3, r3, #16
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d127      	bne.n	800a492 <FreeRTOS_recvfrom+0xaa>
                {
                    break;
                }

                /* To ensure this part only executes once. */
                xTimed = pdTRUE;
 800a442:	2301      	movs	r3, #1
 800a444:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800a446:	f107 0314 	add.w	r3, r7, #20
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fb fe9e 	bl	800618c <vTaskSetTimeOutState>
            }

            /* Wait for arrival of data.  While waiting, the IP-task may set the
             * 'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
             * socket, thus unblocking this API call. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, ( ( EventBits_t ) eSOCKET_RECEIVE ) | ( ( EventBits_t ) eSOCKET_INTR ),
 800a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a452:	6858      	ldr	r0, [r3, #4]
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	2300      	movs	r3, #0
 800a45a:	2201      	movs	r2, #1
 800a45c:	2141      	movs	r1, #65	; 0x41
 800a45e:	f7fa f89b 	bl	8004598 <xEventGroupWaitBits>
 800a462:	62f8      	str	r0, [r7, #44]	; 0x2c
                {
                    ( void ) xEventBits;
                }
            #endif /* ipconfigSUPPORT_SIGNALS */

            lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a468:	63fb      	str	r3, [r7, #60]	; 0x3c

            if( lPacketCount != 0 )
 800a46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d112      	bne.n	800a496 <FreeRTOS_recvfrom+0xae>
            {
                break;
            }

            /* Has the timeout been reached ? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800a470:	f107 021c 	add.w	r2, r7, #28
 800a474:	f107 0314 	add.w	r3, r7, #20
 800a478:	4611      	mov	r1, r2
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fb febe 	bl	80061fc <xTaskCheckForTimeOut>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d109      	bne.n	800a49a <FreeRTOS_recvfrom+0xb2>
        while( lPacketCount == 0 )
 800a486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d0cc      	beq.n	800a426 <FreeRTOS_recvfrom+0x3e>
 800a48c:	e006      	b.n	800a49c <FreeRTOS_recvfrom+0xb4>
                    break;
 800a48e:	bf00      	nop
 800a490:	e004      	b.n	800a49c <FreeRTOS_recvfrom+0xb4>
                    break;
 800a492:	bf00      	nop
 800a494:	e002      	b.n	800a49c <FreeRTOS_recvfrom+0xb4>
                break;
 800a496:	bf00      	nop
 800a498:	e000      	b.n	800a49c <FreeRTOS_recvfrom+0xb4>
            {
                break;
 800a49a:	bf00      	nop
            }
        } /* while( lPacketCount == 0 ) */

        if( lPacketCount != 0 )
 800a49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d049      	beq.n	800a536 <FreeRTOS_recvfrom+0x14e>
        {
            taskENTER_CRITICAL();
 800a4a2:	f7fd f8d9 	bl	8007658 <vPortEnterCritical>
            {
                /* The owner of the list item is the network buffer. */
                pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff fe3d 	bl	800a12c <vCastPointerTo_NetworkBufferDescriptor_t>
 800a4b2:	62b8      	str	r0, [r7, #40]	; 0x28

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	f003 0304 	and.w	r3, r3, #4
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d103      	bne.n	800a4c6 <FreeRTOS_recvfrom+0xde>
                {
                    /* Remove the network buffer from the list of buffers waiting to
                     * be processed by the socket. */
                    ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fa faab 	bl	8004a1c <uxListRemove>
                }
            }
            taskEXIT_CRITICAL();
 800a4c6:	f7fd f8f3 	bl	80076b0 <vPortExitCritical>

            /* The returned value is the length of the payload data, which is
             * calculated at the total packet size minus the headers.
             * The validity of `xDataLength` prvProcessIPPacket has been confirmed
             * in 'prvProcessIPPacket()'. */
            uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	69db      	ldr	r3, [r3, #28]
 800a4ce:	3b2a      	subs	r3, #42	; 0x2a
 800a4d0:	627b      	str	r3, [r7, #36]	; 0x24
            lReturn = ( int32_t ) uxPayloadLength;
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34

            if( pxSourceAddress != NULL )
 800a4d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d007      	beq.n	800a4ec <FreeRTOS_recvfrom+0x104>
            {
                pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	8c1a      	ldrh	r2, [r3, #32]
 800a4e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e2:	805a      	strh	r2, [r3, #2]
                pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	695a      	ldr	r2, [r3, #20]
 800a4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ea:	605a      	str	r2, [r3, #4]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d118      	bne.n	800a528 <FreeRTOS_recvfrom+0x140>
            {
                /* The zero copy flag is not set.  Truncate the length if it won't
                 * fit in the provided buffer. */
                if( lReturn > ( int32_t ) uxBufferLength )
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	dd01      	ble.n	800a502 <FreeRTOS_recvfrom+0x11a>
                {
                    iptraceRECVFROM_DISCARDING_BYTES( ( uxBufferLength - lReturn ) );
                    lReturn = ( int32_t ) uxBufferLength;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	637b      	str	r3, [r7, #52]	; 0x34
                }

                /* Copy the received data into the provided buffer, then release the
                 * network buffer. */
                pvCopySource = ( const void * ) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 800a502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	332a      	adds	r3, #42	; 0x2a
 800a508:	623b      	str	r3, [r7, #32]
                ( void ) memcpy( pvBuffer, pvCopySource, ( size_t ) lReturn );
 800a50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50c:	461a      	mov	r2, r3
 800a50e:	6a39      	ldr	r1, [r7, #32]
 800a510:	68b8      	ldr	r0, [r7, #8]
 800a512:	f007 f96e 	bl	80117f2 <memcpy>

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	f003 0304 	and.w	r3, r3, #4
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10d      	bne.n	800a53c <FreeRTOS_recvfrom+0x154>
                {
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a522:	f007 f8e1 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
 800a526:	e009      	b.n	800a53c <FreeRTOS_recvfrom+0x154>
            {
                /* The zero copy flag was set.  pvBuffer is not a buffer into which
                 * the received data can be copied, but a pointer that must be set to
                 * point to the buffer in which the received data has already been
                 * placed. */
                *( ( void ** ) pvBuffer ) = ipPOINTER_CAST( void *, &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	e002      	b.n	800a53c <FreeRTOS_recvfrom+0x154>
                iptraceRECVFROM_INTERRUPTED();
            }
        #endif /* ipconfigSUPPORT_SIGNALS */
        else
        {
            lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800a536:	f06f 030a 	mvn.w	r3, #10
 800a53a:	637b      	str	r3, [r7, #52]	; 0x34
            iptraceRECVFROM_TIMEOUT();
        }
    }

    return lReturn;
 800a53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3740      	adds	r7, #64	; 0x40
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b090      	sub	sp, #64	; 0x40
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    void * pvCopyDest;
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800a556:	2304      	movs	r3, #4
 800a558:	f887 3020 	strb.w	r3, [r7, #32]
 800a55c:	2300      	movs	r3, #0
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    TickType_t xTicksToWait;
    int32_t lReturn = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	63bb      	str	r3, [r7, #56]	; 0x38
    FreeRTOS_Socket_t const * pxSocket;
    const size_t uxMaxPayloadLength = ipMAX_UDP_PAYLOAD_LENGTH;
 800a564:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 800a568:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t uxPayloadOffset = ipUDP_PAYLOAD_OFFSET_IPv4;
 800a56a:	232a      	movs	r3, #42	; 0x2a
 800a56c:	633b      	str	r3, [r7, #48]	; 0x30


    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pvBuffer != NULL );
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d104      	bne.n	800a582 <FreeRTOS_sendto+0x3a>
 800a578:	4944      	ldr	r1, [pc, #272]	; (800a68c <FreeRTOS_sendto+0x144>)
 800a57a:	f240 4015 	movw	r0, #1045	; 0x415
 800a57e:	f7f6 fa52 	bl	8000a26 <vAssertCalled>

    if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a586:	429a      	cmp	r2, r3
 800a588:	d87a      	bhi.n	800a680 <FreeRTOS_sendto+0x138>
    {
        /* If the socket is not already bound to an address, bind it now.
         * Passing NULL as the address parameter tells FreeRTOS_bind() to select
         * the address to bind to. */
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d107      	bne.n	800a5a2 <FreeRTOS_sendto+0x5a>
            ( FreeRTOS_bind( xSocket, NULL, 0U ) == 0 ) )
 800a592:	2200      	movs	r2, #0
 800a594:	2100      	movs	r1, #0
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 f87a 	bl	800a690 <FreeRTOS_bind>
 800a59c:	4603      	mov	r3, r0
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d16e      	bne.n	800a680 <FreeRTOS_sendto+0x138>
        {
            xTicksToWait = pxSocket->xSendBlockTime;
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	617b      	str	r3, [r7, #20]
                        xTicksToWait = ( TickType_t ) 0;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	f003 0310 	and.w	r3, r3, #16
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <FreeRTOS_sendto+0x6e>
            {
                xTicksToWait = ( TickType_t ) 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	617b      	str	r3, [r7, #20]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d128      	bne.n	800a612 <FreeRTOS_sendto+0xca>
            {
                /* Zero copy is not set, so obtain a network buffer into
                 * which the payload will be copied. */
                vTaskSetTimeOutState( &xTimeOut );
 800a5c0:	f107 0318 	add.w	r3, r7, #24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fb fde1 	bl	800618c <vTaskSetTimeOutState>

                /* Block until a buffer becomes available, or until a
                 * timeout has been reached */
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800a5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f007 f80d 	bl	80115f4 <pxGetNetworkBufferWithDescriptor>
 800a5da:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( pxNetworkBuffer != NULL )
 800a5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d01b      	beq.n	800a61a <FreeRTOS_sendto+0xd2>
                {
                    pvCopyDest = ( void * ) &pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ];
 800a5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e4:	699a      	ldr	r2, [r3, #24]
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	4413      	add	r3, r2
 800a5ea:	62bb      	str	r3, [r7, #40]	; 0x28
                    ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f2:	f007 f8fe 	bl	80117f2 <memcpy>

                    if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800a5f6:	f107 0214 	add.w	r2, r7, #20
 800a5fa:	f107 0318 	add.w	r3, r7, #24
 800a5fe:	4611      	mov	r1, r2
 800a600:	4618      	mov	r0, r3
 800a602:	f7fb fdfb 	bl	80061fc <xTaskCheckForTimeOut>
 800a606:	4603      	mov	r3, r0
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d106      	bne.n	800a61a <FreeRTOS_sendto+0xd2>
                    {
                        /* The entire block time has been used up. */
                        xTicksToWait = ( TickType_t ) 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	e003      	b.n	800a61a <FreeRTOS_sendto+0xd2>
            else
            {
                /* When zero copy is used, pvBuffer is a pointer to the
                 * payload of a buffer that has already been obtained from the
                 * stack.  Obtain the network buffer pointer from the buffer. */
                pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800a612:	68b8      	ldr	r0, [r7, #8]
 800a614:	f7fe ff4d 	bl	80094b2 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800a618:	63f8      	str	r0, [r7, #60]	; 0x3c
            }

            if( pxNetworkBuffer != NULL )
 800a61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d02f      	beq.n	800a680 <FreeRTOS_sendto+0x138>
            {
                /* xDataLength is the size of the total packet, including the Ethernet header. */
                pxNetworkBuffer->xDataLength = uxTotalDataLength + sizeof( UDPPacket_t );
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800a626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a628:	61da      	str	r2, [r3, #28]
                pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800a62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a62c:	885a      	ldrh	r2, [r3, #2]
 800a62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a630:	841a      	strh	r2, [r3, #32]
                pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	b29a      	uxth	r2, r3
 800a638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a63a:	845a      	strh	r2, [r3, #34]	; 0x22
                pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 800a63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a642:	615a      	str	r2, [r3, #20]

                /* The socket options are passed to the IP layer in the
                 * space that will eventually get used by the Ethernet header. */
                pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800a644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	3306      	adds	r3, #6
 800a64a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a64c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800a650:	701a      	strb	r2, [r3, #0]

                /* Tell the networking task that the packet needs sending. */
                xStackTxEvent.pvData = pxNetworkBuffer;
 800a652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a654:	627b      	str	r3, [r7, #36]	; 0x24

                /* Ask the IP-task to send this packet */
                if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	f107 0320 	add.w	r3, r7, #32
 800a65c:	4611      	mov	r1, r2
 800a65e:	4618      	mov	r0, r3
 800a660:	f7ff f842 	bl	80096e8 <xSendEventStructToIPTask>
 800a664:	4603      	mov	r3, r0
 800a666:	2b01      	cmp	r3, #1
 800a668:	d102      	bne.n	800a670 <FreeRTOS_sendto+0x128>
                {
                    /* The packet was successfully sent to the IP task. */
                    lReturn = ( int32_t ) uxTotalDataLength;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a66e:	e007      	b.n	800a680 <FreeRTOS_sendto+0x138>
                }
                else
                {
                    /* If the buffer was allocated in this function, release
                     * it. */
                    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d102      	bne.n	800a680 <FreeRTOS_sendto+0x138>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a67a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a67c:	f007 f834 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
    {
        /* The data is longer than the available buffer space. */
        iptraceSENDTO_DATA_TOO_LONG();
    }

    return lReturn;
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
} /* Tested */
 800a682:	4618      	mov	r0, r3
 800a684:	3740      	adds	r7, #64	; 0x40
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	08013fc8 	.word	0x08013fc8

0800a690 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08a      	sub	sp, #40	; 0x28
 800a694:	af02      	add	r7, sp, #8
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	61bb      	str	r3, [r7, #24]
    BaseType_t xReturn = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	61fb      	str	r3, [r7, #28]

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800a6a4:	f7fe fd8a 	bl	80091bc <xIsCallingFromIPTask>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <FreeRTOS_bind+0x28>
 800a6ae:	492f      	ldr	r1, [pc, #188]	; (800a76c <FreeRTOS_bind+0xdc>)
 800a6b0:	f240 40ad 	movw	r0, #1197	; 0x4ad
 800a6b4:	f7f6 f9b7 	bl	8000a26 <vAssertCalled>

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <FreeRTOS_bind+0x36>
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c4:	d103      	bne.n	800a6ce <FreeRTOS_bind+0x3e>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a6c6:	f06f 0315 	mvn.w	r3, #21
 800a6ca:	61fb      	str	r3, [r7, #28]
 800a6cc:	e048      	b.n	800a760 <FreeRTOS_bind+0xd0>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d009      	beq.n	800a6ea <FreeRTOS_bind+0x5a>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4824      	ldr	r0, [pc, #144]	; (800a770 <FreeRTOS_bind+0xe0>)
 800a6de:	f7f6 f979 	bl	80009d4 <vLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a6e2:	f06f 0315 	mvn.w	r3, #21
 800a6e6:	61fb      	str	r3, [r7, #28]
 800a6e8:	e03a      	b.n	800a760 <FreeRTOS_bind+0xd0>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800a6ea:	2309      	movs	r3, #9
 800a6ec:	743b      	strb	r3, [r7, #16]
        xBindEvent.pvData = xSocket;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	617b      	str	r3, [r7, #20]

        if( pxAddress != NULL )
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00e      	beq.n	800a716 <FreeRTOS_bind+0x86>
        {
            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	885b      	ldrh	r3, [r3, #2]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	b21a      	sxth	r2, r3
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	885b      	ldrh	r3, [r3, #2]
 800a704:	0a1b      	lsrs	r3, r3, #8
 800a706:	b29b      	uxth	r3, r3
 800a708:	b21b      	sxth	r3, r3
 800a70a:	4313      	orrs	r3, r2
 800a70c:	b21b      	sxth	r3, r3
 800a70e:	b29a      	uxth	r2, r3
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	849a      	strh	r2, [r3, #36]	; 0x24
 800a714:	e002      	b.n	800a71c <FreeRTOS_bind+0x8c>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	2200      	movs	r2, #0
 800a71a:	849a      	strh	r2, [r3, #36]	; 0x24
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800a71c:	f107 0310 	add.w	r3, r7, #16
 800a720:	f04f 31ff 	mov.w	r1, #4294967295
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe ffdf 	bl	80096e8 <xSendEventStructToIPTask>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d106      	bne.n	800a73e <FreeRTOS_bind+0xae>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800a730:	4810      	ldr	r0, [pc, #64]	; (800a774 <FreeRTOS_bind+0xe4>)
 800a732:	f7f6 f94f 	bl	80009d4 <vLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800a736:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800a73a:	61fb      	str	r3, [r7, #28]
 800a73c:	e010      	b.n	800a760 <FreeRTOS_bind+0xd0>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	6858      	ldr	r0, [r3, #4]
 800a742:	f04f 33ff 	mov.w	r3, #4294967295
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	2300      	movs	r3, #0
 800a74a:	2201      	movs	r2, #1
 800a74c:	2110      	movs	r1, #16
 800a74e:	f7f9 ff23 	bl	8004598 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <FreeRTOS_bind+0xd0>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a75a:	f06f 0315 	mvn.w	r3, #21
 800a75e:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    return xReturn;
 800a760:	69fb      	ldr	r3, [r7, #28]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3720      	adds	r7, #32
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	08013fc8 	.word	0x08013fc8
 800a770:	0801401c 	.word	0x0801401c
 800a774:	08014048 	.word	0x08014048

0800a778 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08a      	sub	sp, #40	; 0x28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800a786:	2300      	movs	r3, #0
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	61fb      	str	r3, [r7, #28]
    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a794:	2b06      	cmp	r3, #6
 800a796:	d102      	bne.n	800a79e <vSocketBind+0x26>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800a798:	4b43      	ldr	r3, [pc, #268]	; (800a8a8 <vSocketBind+0x130>)
 800a79a:	623b      	str	r3, [r7, #32]
 800a79c:	e001      	b.n	800a7a2 <vSocketBind+0x2a>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800a79e:	4b43      	ldr	r3, [pc, #268]	; (800a8ac <vSocketBind+0x134>)
 800a7a0:	623b      	str	r3, [r7, #32]

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) uxAddressLength;

    configASSERT( pxSocket != NULL );
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d104      	bne.n	800a7b2 <vSocketBind+0x3a>
 800a7a8:	4941      	ldr	r1, [pc, #260]	; (800a8b0 <vSocketBind+0x138>)
 800a7aa:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 800a7ae:	f7f6 f93a 	bl	8000a26 <vAssertCalled>
    configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b8:	d104      	bne.n	800a7c4 <vSocketBind+0x4c>
 800a7ba:	493d      	ldr	r1, [pc, #244]	; (800a8b0 <vSocketBind+0x138>)
 800a7bc:	f240 5011 	movw	r0, #1297	; 0x511
 800a7c0:	f7f6 f931 	bl	8000a26 <vAssertCalled>
            /* pxAddress will be NULL if sendto() was called on a socket without the
             * socket being bound to an address. In this case, automatically allocate
             * an address to the socket.  There is a small chance that the allocated
             * port will already be in use - if that is the case, then the check below
             * [pxListFindListItemWithValue()] will result in an error being returned. */
            if( pxAddress == NULL )
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d105      	bne.n	800a7d6 <vSocketBind+0x5e>
            {
                pxAddress = &xAddress;
 800a7ca:	f107 0314 	add.w	r3, r7, #20
 800a7ce:	61fb      	str	r3, [r7, #28]
                /* Put the port to zero to be assigned later. */
                pxAddress->sin_port = 0U;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	805a      	strh	r2, [r3, #2]
        }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d104      	bne.n	800a7e6 <vSocketBind+0x6e>
 800a7dc:	4934      	ldr	r1, [pc, #208]	; (800a8b0 <vSocketBind+0x138>)
 800a7de:	f240 5025 	movw	r0, #1317	; 0x525
 800a7e2:	f7f6 f920 	bl	8000a26 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	885b      	ldrh	r3, [r3, #2]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d111      	bne.n	800a812 <vSocketBind+0x9a>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 f961 	bl	800aabc <prvGetPrivatePortNumber>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	885b      	ldrh	r3, [r3, #2]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d103      	bne.n	800a812 <vSocketBind+0x9a>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800a80a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800a80e:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
 800a810:	e045      	b.n	800a89e <vSocketBind+0x126>
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            /* Check to ensure the port is not already in use.  If the bind is
             * called internally, a port MAY be used by more than one socket. */
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d004      	beq.n	800a822 <vSocketBind+0xaa>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a81e:	2b06      	cmp	r3, #6
 800a820:	d024      	beq.n	800a86c <vSocketBind+0xf4>
                ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	885b      	ldrh	r3, [r3, #2]
 800a826:	4619      	mov	r1, r3
 800a828:	6a38      	ldr	r0, [r7, #32]
 800a82a:	f000 f99f 	bl	800ab6c <pxListFindListItemWithValue>
 800a82e:	4603      	mov	r3, r0
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800a830:	2b00      	cmp	r3, #0
 800a832:	d01b      	beq.n	800a86c <vSocketBind+0xf4>
            {
                FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a83a:	2b06      	cmp	r3, #6
 800a83c:	d101      	bne.n	800a842 <vSocketBind+0xca>
 800a83e:	491d      	ldr	r1, [pc, #116]	; (800a8b4 <vSocketBind+0x13c>)
 800a840:	e000      	b.n	800a844 <vSocketBind+0xcc>
 800a842:	491d      	ldr	r1, [pc, #116]	; (800a8b8 <vSocketBind+0x140>)
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	885b      	ldrh	r3, [r3, #2]
 800a848:	021b      	lsls	r3, r3, #8
 800a84a:	b21a      	sxth	r2, r3
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	885b      	ldrh	r3, [r3, #2]
 800a850:	0a1b      	lsrs	r3, r3, #8
 800a852:	b29b      	uxth	r3, r3
 800a854:	b21b      	sxth	r3, r3
 800a856:	4313      	orrs	r3, r2
 800a858:	b21b      	sxth	r3, r3
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	461a      	mov	r2, r3
 800a85e:	4817      	ldr	r0, [pc, #92]	; (800a8bc <vSocketBind+0x144>)
 800a860:	f7f6 f8b8 	bl	80009d4 <vLoggingPrintf>
                                         ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                         FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800a864:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
 800a86a:	e018      	b.n	800a89e <vSocketBind+0x126>
            }
            else
            {
                /* Allocate the port number to the socket.
                 * This macro will set 'xBoundSocketListItem->xItemValue' */
                socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	885b      	ldrh	r3, [r3, #2]
 800a870:	461a      	mov	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	609a      	str	r2, [r3, #8]

                /* And also store it in a socket field 'usLocalPort' in host-byte-order,
                 * mostly used for logging and debugging purposes */
                pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	885b      	ldrh	r3, [r3, #2]
 800a87a:	021b      	lsls	r3, r3, #8
 800a87c:	b21a      	sxth	r2, r3
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	885b      	ldrh	r3, [r3, #2]
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	b29b      	uxth	r3, r3
 800a886:	b21b      	sxth	r3, r3
 800a888:	4313      	orrs	r3, r2
 800a88a:	b21b      	sxth	r3, r3
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	849a      	strh	r2, [r3, #36]	; 0x24
                            vTaskSuspendAll();
                        }
                    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

                    /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
                    vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3308      	adds	r3, #8
 800a896:	4619      	mov	r1, r3
 800a898:	6a38      	ldr	r0, [r7, #32]
 800a89a:	f7fa f862 	bl	8004962 <vListInsertEnd>
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /* Tested */
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3728      	adds	r7, #40	; 0x28
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	20025c50 	.word	0x20025c50
 800a8ac:	20025c64 	.word	0x20025c64
 800a8b0:	08013fc8 	.word	0x08013fc8
 800a8b4:	0801406c 	.word	0x0801406c
 800a8b8:	08014070 	.word	0x08014070
 800a8bc:	08014074 	.word	0x08014074

0800a8c0 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
    #endif
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800a8c8:	230a      	movs	r3, #10
 800a8ca:	733b      	strb	r3, [r7, #12]
    xCloseEvent.pvData = xSocket;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	613b      	str	r3, [r7, #16]

    if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d003      	beq.n	800a8de <FreeRTOS_closesocket+0x1e>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8dc:	d102      	bne.n	800a8e4 <FreeRTOS_closesocket+0x24>
    {
        xResult = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]
 800a8e2:	e011      	b.n	800a908 <FreeRTOS_closesocket+0x48>
         * packet handling. */

        /* Note when changing the time-out value below, it must be checked who is calling
         * this function. If it is called by the IP-task, a deadlock could occur.
         * The IP-task would only call it in case of a user call-back */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800a8e4:	f107 030c 	add.w	r3, r7, #12
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fefc 	bl	80096e8 <xSendEventStructToIPTask>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <FreeRTOS_closesocket+0x44>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800a8f6:	4807      	ldr	r0, [pc, #28]	; (800a914 <FreeRTOS_closesocket+0x54>)
 800a8f8:	f7f6 f86c 	bl	80009d4 <vLoggingPrintf>
            xResult = -1;
 800a8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	e001      	b.n	800a908 <FreeRTOS_closesocket+0x48>
        }
        else
        {
            xResult = 1;
 800a904:	2301      	movs	r3, #1
 800a906:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800a908:	697b      	ldr	r3, [r7, #20]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	08014098 	.word	0x08014098

0800a918 <vSocketClose>:
 * @param[in] pxSocket: The socket descriptor of the socket being closed.
 *
 * @return Returns NULL, always.
 */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800a918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* For TCP: clean up a little more. */
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a926:	2b06      	cmp	r3, #6
 800a928:	d122      	bne.n	800a970 <vSocketClose+0x58>
            {
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d004      	beq.n	800a93c <vSocketClose+0x24>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a936:	4618      	mov	r0, r3
 800a938:	f006 fed6 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
                        }

                        /* Free the resources which were claimed by the tcpWin member */
                        vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	33d8      	adds	r3, #216	; 0xd8
 800a940:	4618      	mov	r0, r3
 800a942:	f004 fb03 	bl	800ef4c <vTCPWindowDestroy>
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* Free the input and output streams */
                if( pxSocket->u.xTCP.rxStream != NULL )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d004      	beq.n	800a958 <vSocketClose+0x40>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                    vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a952:	4618      	mov	r0, r3
 800a954:	f7fc fc64 	bl	8007220 <vPortFree>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d004      	beq.n	800a96a <vSocketClose+0x52>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                    vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a964:	4618      	mov	r0, r3
 800a966:	f7fc fc5b 	bl	8007220 <vPortFree>
                }

                /* In case this is a child socket, make sure the child-count of the
                 * parent socket is decreased. */
                prvTCPSetSocketCount( pxSocket );
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f850 	bl	800aa10 <prvTCPSetSocketCount>
        }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d004      	beq.n	800a982 <vSocketClose+0x6a>
            {
                vTaskSuspendAll();
            }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3308      	adds	r3, #8
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fa f84d 	bl	8004a1c <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a988:	2b11      	cmp	r3, #17
 800a98a:	d112      	bne.n	800a9b2 <vSocketClose+0x9a>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800a98c:	e00d      	b.n	800a9aa <vSocketClose+0x92>
        {
            pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	4618      	mov	r0, r3
 800a996:	f7ff fbc9 	bl	800a12c <vCastPointerTo_NetworkBufferDescriptor_t>
 800a99a:	60f8      	str	r0, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fa f83c 	bl	8004a1c <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f006 fe9f 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1ed      	bne.n	800a98e <vSocketClose+0x76>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d004      	beq.n	800a9c4 <vSocketClose+0xac>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7f9 ff52 	bl	8004868 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
        {
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a9ca:	2b06      	cmp	r3, #6
 800a9cc:	d114      	bne.n	800a9f8 <vSocketClose+0xe0>
            {
                FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%u to %lxip:%u]: buffers %lu socks %lu\n",
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a9d2:	461d      	mov	r5, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a9dc:	461e      	mov	r6, r3
 800a9de:	f006 feb7 	bl	8011750 <uxGetNumberOfFreeNetworkBuffers>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <vSocketClose+0xf0>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	9301      	str	r3, [sp, #4]
 800a9ea:	9200      	str	r2, [sp, #0]
 800a9ec:	4633      	mov	r3, r6
 800a9ee:	4622      	mov	r2, r4
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	4806      	ldr	r0, [pc, #24]	; (800aa0c <vSocketClose+0xf4>)
 800a9f4:	f7f5 ffee 	bl	80009d4 <vLoggingPrintf>
        }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7fc fc11 	bl	8007220 <vPortFree>

    return NULL;
 800a9fe:	2300      	movs	r3, #0
} /* Tested */
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa08:	20025c50 	.word	0x20025c50
 800aa0c:	080140b8 	.word	0x080140b8

0800aa10 <prvTCPSetSocketCount>:
 *        keep a pointer to it.
 *
 * @param[in] pxSocketToDelete: The socket being closed.
 */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b088      	sub	sp, #32
 800aa14:	af02      	add	r7, sp, #8
 800aa16:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800aa18:	4b24      	ldr	r3, [pc, #144]	; (800aaac <prvTCPSetSocketCount+0x9c>)
 800aa1a:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa20:	81fb      	strh	r3, [r7, #14]

        for( pxIterator = listGET_NEXT( pxEnd );
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	e038      	b.n	800aa9c <prvTCPSetSocketCount+0x8c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff fb66 	bl	800a100 <vCastPointerTo_FreeRTOS_Socket_t>
 800aa34:	60b8      	str	r0, [r7, #8]

            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d12a      	bne.n	800aa96 <prvTCPSetSocketCount+0x86>
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800aa44:	89fa      	ldrh	r2, [r7, #14]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d125      	bne.n	800aa96 <prvTCPSetSocketCount+0x86>
                ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d020      	beq.n	800aa96 <prvTCPSetSocketCount+0x86>
            {
                pxOtherSocket->u.xTCP.usChildCount--;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa68:	4619      	mov	r1, r3
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800aa70:	461a      	mov	r2, r3
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa78:	4618      	mov	r0, r3
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d101      	bne.n	800aa88 <prvTCPSetSocketCount+0x78>
 800aa84:	4b0a      	ldr	r3, [pc, #40]	; (800aab0 <prvTCPSetSocketCount+0xa0>)
 800aa86:	e000      	b.n	800aa8a <prvTCPSetSocketCount+0x7a>
 800aa88:	4b0a      	ldr	r3, [pc, #40]	; (800aab4 <prvTCPSetSocketCount+0xa4>)
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	480a      	ldr	r0, [pc, #40]	; (800aab8 <prvTCPSetSocketCount+0xa8>)
 800aa90:	f7f5 ffa0 	bl	80009d4 <vLoggingPrintf>
                                         pxOtherSocket->usLocalPort,
                                         pxOtherSocket->u.xTCP.usChildCount,
                                         pxOtherSocket->u.xTCP.usBacklog,
                                         ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                break;
 800aa94:	e006      	b.n	800aaa4 <prvTCPSetSocketCount+0x94>
             pxIterator = listGET_NEXT( pxIterator ) )
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	617b      	str	r3, [r7, #20]
        for( pxIterator = listGET_NEXT( pxEnd );
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d1c2      	bne.n	800aa2a <prvTCPSetSocketCount+0x1a>
            }
        }
    }
 800aaa4:	bf00      	nop
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	20025c58 	.word	0x20025c58
 800aab0:	080140f8 	.word	0x080140f8
 800aab4:	080140fc 	.word	0x080140fc
 800aab8:	08014100 	.word	0x08014100

0800aabc <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800aac4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800aac8:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800aaca:	89fb      	ldrh	r3, [r7, #14]
 800aacc:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b06      	cmp	r3, #6
 800aada:	d102      	bne.n	800aae2 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800aadc:	4b21      	ldr	r3, [pc, #132]	; (800ab64 <prvGetPrivatePortNumber+0xa8>)
 800aade:	613b      	str	r3, [r7, #16]
 800aae0:	e001      	b.n	800aae6 <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800aae2:	4b21      	ldr	r3, [pc, #132]	; (800ab68 <prvGetPrivatePortNumber+0xac>)
 800aae4:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800aae6:	f107 0308 	add.w	r3, r7, #8
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7f5 ff8d 	bl	8000a0a <xApplicationGetRandomNumber>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d030      	beq.n	800ab58 <prvGetPrivatePortNumber+0x9c>
        }

        /* Map the random to a candidate port. */
        usResult =
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
            ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount );
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	b29b      	uxth	r3, r3
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800aafa:	89fa      	ldrh	r2, [r7, #14]
 800aafc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab00:	fb02 f201 	mul.w	r2, r2, r1
 800ab04:	1a9b      	subs	r3, r3, r2
 800ab06:	b29b      	uxth	r3, r3
        usResult =
 800ab08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab0c:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800ab0e:	8abb      	ldrh	r3, [r7, #20]
 800ab10:	021b      	lsls	r3, r3, #8
 800ab12:	b21a      	sxth	r2, r3
 800ab14:	8abb      	ldrh	r3, [r7, #20]
 800ab16:	0a1b      	lsrs	r3, r3, #8
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	b21b      	sxth	r3, r3
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	b21b      	sxth	r3, r3
 800ab20:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800ab22:	4619      	mov	r1, r3
 800ab24:	6938      	ldr	r0, [r7, #16]
 800ab26:	f000 f821 	bl	800ab6c <pxListFindListItemWithValue>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800ab30:	8abb      	ldrh	r3, [r7, #20]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	b21a      	sxth	r2, r3
 800ab36:	8abb      	ldrh	r3, [r7, #20]
 800ab38:	0a1b      	lsrs	r3, r3, #8
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	b21b      	sxth	r3, r3
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	b21b      	sxth	r3, r3
 800ab42:	82bb      	strh	r3, [r7, #20]
            break;
 800ab44:	e009      	b.n	800ab5a <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800ab4a:	8afb      	ldrh	r3, [r7, #22]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800ab50:	8afb      	ldrh	r3, [r7, #22]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1c7      	bne.n	800aae6 <prvGetPrivatePortNumber+0x2a>
 800ab56:	e000      	b.n	800ab5a <prvGetPrivatePortNumber+0x9e>
            break;
 800ab58:	bf00      	nop

    return usResult;
 800ab5a:	8abb      	ldrh	r3, [r7, #20]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20025c50 	.word	0x20025c50
 800ab68:	20025c64 	.word	0x20025c64

0800ab6c <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800ab76:	2300      	movs	r3, #0
 800ab78:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800ab7a:	f7ff fa17 	bl	8009fac <xIPIsNetworkTaskReady>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d018      	beq.n	800abb6 <pxListFindListItemWithValue+0x4a>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d015      	beq.n	800abb6 <pxListFindListItemWithValue+0x4a>
    {
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	613b      	str	r3, [r7, #16]
 800ab96:	e00a      	b.n	800abae <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d102      	bne.n	800aba8 <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	617b      	str	r3, [r7, #20]
                break;
 800aba6:	e006      	b.n	800abb6 <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	613b      	str	r3, [r7, #16]
        for( pxIterator = listGET_NEXT( pxEnd );
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d1f0      	bne.n	800ab98 <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800abb6:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800abb8:	4618      	mov	r0, r3
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	480d      	ldr	r0, [pc, #52]	; (800ac04 <pxUDPSocketLookup+0x44>)
 800abd0:	f7ff ffcc 	bl	800ab6c <pxListFindListItemWithValue>
 800abd4:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00d      	beq.n	800abf8 <pxUDPSocketLookup+0x38>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7ff fa8d 	bl	800a100 <vCastPointerTo_FreeRTOS_Socket_t>
 800abe6:	60f8      	str	r0, [r7, #12]
        configASSERT( pxSocket != NULL );
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d104      	bne.n	800abf8 <pxUDPSocketLookup+0x38>
 800abee:	4906      	ldr	r1, [pc, #24]	; (800ac08 <pxUDPSocketLookup+0x48>)
 800abf0:	f640 008b 	movw	r0, #2187	; 0x88b
 800abf4:	f7f5 ff17 	bl	8000a26 <vAssertCalled>
    }

    return pxSocket;
 800abf8:	68fb      	ldr	r3, [r7, #12]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20025c64 	.word	0x20025c64
 800ac08:	08013fc8 	.word	0x08013fc8

0800ac0c <FreeRTOS_inet_ntoa>:
 * @return If all checks pass, then the pointer returned will be same as pcBuffer
 *         and will have the address stored in the location. Else, NULL is returned.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b08d      	sub	sp, #52	; 0x34
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800ac1a:	1d3b      	adds	r3, r7, #4
 800ac1c:	61bb      	str	r3, [r7, #24]
    const char * pcResult = pcBuffer;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24
    const socklen_t uxSize = 16;
 800ac22:	2310      	movs	r3, #16
 800ac24:	617b      	str	r3, [r7, #20]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800ac26:	2300      	movs	r3, #0
 800ac28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac2a:	e073      	b.n	800ad14 <FreeRTOS_inet_ntoa+0x108>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac30:	4413      	add	r3, r2
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800ac38:	2302      	movs	r3, #2
 800ac3a:	61fb      	str	r3, [r7, #28]
        socklen_t uxNeeded;

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800ac3c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ac40:	4b39      	ldr	r3, [pc, #228]	; (800ad28 <FreeRTOS_inet_ntoa+0x11c>)
 800ac42:	fba3 1302 	umull	r1, r3, r3, r2
 800ac46:	08d9      	lsrs	r1, r3, #3
 800ac48:	460b      	mov	r3, r1
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	440b      	add	r3, r1
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	b2d9      	uxtb	r1, r3
 800ac54:	f107 020c 	add.w	r2, r7, #12
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	460a      	mov	r2, r1
 800ac5e:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800ac60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac64:	4a30      	ldr	r2, [pc, #192]	; (800ad28 <FreeRTOS_inet_ntoa+0x11c>)
 800ac66:	fba2 2303 	umull	r2, r3, r2, r3
 800ac6a:	08db      	lsrs	r3, r3, #3
 800ac6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( uxSource == 1U )
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d003      	beq.n	800ac7e <FreeRTOS_inet_ntoa+0x72>
            {
                break;
            }

            uxSource--;
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	61fb      	str	r3, [r7, #28]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800ac7c:	e7de      	b.n	800ac3c <FreeRTOS_inet_ntoa+0x30>
                break;
 800ac7e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800ac80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac84:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ac86:	2300      	movs	r3, #0
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	e009      	b.n	800aca0 <FreeRTOS_inet_ntoa+0x94>
        {
            if( pucDigits[ uxSource ] != 0U )
 800ac8c:	f107 020c 	add.w	r2, r7, #12
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	4413      	add	r3, r2
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d106      	bne.n	800aca8 <FreeRTOS_inet_ntoa+0x9c>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	61fb      	str	r3, [r7, #28]
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d9f2      	bls.n	800ac8c <FreeRTOS_inet_ntoa+0x80>
 800aca6:	e000      	b.n	800acaa <FreeRTOS_inet_ntoa+0x9e>
            {
                break;
 800aca8:	bf00      	nop
            }
        }

        /* Write e.g. "192.", which is 3 digits and a dot. */
        uxNeeded = ( ( socklen_t ) sockDIGIT_COUNT - uxSource ) + 1U;
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	f1c3 0304 	rsb	r3, r3, #4
 800acb0:	613b      	str	r3, [r7, #16]

        if( ( uxIndex + uxNeeded ) > uxSize )
 800acb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	4413      	add	r3, r2
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d213      	bcs.n	800ace6 <FreeRTOS_inet_ntoa+0xda>
        {
            /* The result won't fit. */
            pcResult = NULL;
 800acbe:	2300      	movs	r3, #0
 800acc0:	627b      	str	r3, [r7, #36]	; 0x24
 800acc2:	e02a      	b.n	800ad1a <FreeRTOS_inet_ntoa+0x10e>
            break;
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800acc4:	f107 020c 	add.w	r2, r7, #12
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	4413      	add	r3, r2
 800accc:	781a      	ldrb	r2, [r3, #0]
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	440b      	add	r3, r1
 800acd4:	3230      	adds	r2, #48	; 0x30
 800acd6:	b2d2      	uxtb	r2, r2
 800acd8:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	3301      	adds	r3, #1
 800acde:	62bb      	str	r3, [r7, #40]	; 0x28
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	3301      	adds	r3, #1
 800ace4:	61fb      	str	r3, [r7, #28]
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d9eb      	bls.n	800acc4 <FreeRTOS_inet_ntoa+0xb8>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d805      	bhi.n	800acfe <FreeRTOS_inet_ntoa+0xf2>
        {
            pcBuffer[ uxIndex ] = '.';
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	4413      	add	r3, r2
 800acf8:	222e      	movs	r2, #46	; 0x2e
 800acfa:	701a      	strb	r2, [r3, #0]
 800acfc:	e004      	b.n	800ad08 <FreeRTOS_inet_ntoa+0xfc>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	4413      	add	r3, r2
 800ad04:	2200      	movs	r2, #0
 800ad06:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	62bb      	str	r3, [r7, #40]	; 0x28
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	3301      	adds	r3, #1
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d988      	bls.n	800ac2c <FreeRTOS_inet_ntoa+0x20>
    }

    return pcResult;
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3734      	adds	r7, #52	; 0x34
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	cccccccd 	.word	0xcccccccd

0800ad2c <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	d106      	bne.n	800ad4e <FreeRTOS_inet_ntop+0x22>
    {
        case FREERTOS_AF_INET:
            pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	68b8      	ldr	r0, [r7, #8]
 800ad46:	f000 f80a 	bl	800ad5e <FreeRTOS_inet_ntop4>
 800ad4a:	6178      	str	r0, [r7, #20]
            break;
 800ad4c:	e002      	b.n	800ad54 <FreeRTOS_inet_ntop+0x28>

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	617b      	str	r3, [r7, #20]
            break;
 800ad52:	bf00      	nop
    }

    return pcResult;
 800ad54:	697b      	ldr	r3, [r7, #20]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b088      	sub	sp, #32
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b0f      	cmp	r3, #15
 800ad6e:	d802      	bhi.n	800ad76 <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	61fb      	str	r3, [r7, #28]
 800ad74:	e00e      	b.n	800ad94 <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800ad76:	f107 0314 	add.w	r3, r7, #20
 800ad7a:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	461a      	mov	r2, r3
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	68b9      	ldr	r1, [r7, #8]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7ff ff3e 	bl	800ac0c <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800ad94:	69fb      	ldr	r3, [r7, #28]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3720      	adds	r7, #32
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <FreeRTOS_inet_pton4>:
 *
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
BaseType_t FreeRTOS_inet_pton4( const char * pcSource,
                                void * pvDestination )
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b08d      	sub	sp, #52	; 0x34
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	6039      	str	r1, [r7, #0]
    const uint32_t ulDecimalBase = 10U;
 800ada8:	230a      	movs	r3, #10
 800adaa:	61fb      	str	r3, [r7, #28]
    uint8_t ucOctet[ socketMAX_IP_ADDRESS_OCTETS ];
    uint32_t ulReturn = 0UL, ulValue;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]
    UBaseType_t uxOctetNumber;
    BaseType_t xResult = pdPASS;
 800adb0:	2301      	movs	r3, #1
 800adb2:	627b      	str	r3, [r7, #36]	; 0x24
    const char * pcIPAddress = pcSource;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	623b      	str	r3, [r7, #32]
    const void * pvCopySource;

    /* Translate "192.168.2.100" to a 32-bit number, network-endian. */
    for( uxOctetNumber = 0U; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 800adb8:	2300      	movs	r3, #0
 800adba:	62bb      	str	r3, [r7, #40]	; 0x28
 800adbc:	e043      	b.n	800ae46 <FreeRTOS_inet_pton4+0xa8>
    {
        ulValue = 0UL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	62fb      	str	r3, [r7, #44]	; 0x2c

        while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800adc2:	e011      	b.n	800ade8 <FreeRTOS_inet_pton4+0x4a>
        {
            BaseType_t xChar;

            /* Move previous read characters into the next decimal
             * position. */
            ulValue *= ulDecimalBase;
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	69fa      	ldr	r2, [r7, #28]
 800adc8:	fb02 f303 	mul.w	r3, r2, r3
 800adcc:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Add the binary value of the ascii character. */
            xChar = ( BaseType_t ) pcIPAddress[ 0 ];
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	61bb      	str	r3, [r7, #24]
            xChar = xChar - ( BaseType_t ) '0';
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	3b30      	subs	r3, #48	; 0x30
 800add8:	61bb      	str	r3, [r7, #24]
            ulValue += ( uint32_t ) xChar;
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adde:	4413      	add	r3, r2
 800ade0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Move to next character in the string. */
            pcIPAddress++;
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	3301      	adds	r3, #1
 800ade6:	623b      	str	r3, [r7, #32]
        while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b2f      	cmp	r3, #47	; 0x2f
 800adee:	d903      	bls.n	800adf8 <FreeRTOS_inet_pton4+0x5a>
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b39      	cmp	r3, #57	; 0x39
 800adf6:	d9e5      	bls.n	800adc4 <FreeRTOS_inet_pton4+0x26>
        }

        /* Check characters were read. */
        if( pcIPAddress == pcSource )
 800adf8:	6a3a      	ldr	r2, [r7, #32]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d101      	bne.n	800ae04 <FreeRTOS_inet_pton4+0x66>
        {
            xResult = pdFAIL;
 800ae00:	2300      	movs	r3, #0
 800ae02:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Check the value fits in an 8-bit number. */
        if( ulValue > 0xffUL )
 800ae04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae06:	2bff      	cmp	r3, #255	; 0xff
 800ae08:	d902      	bls.n	800ae10 <FreeRTOS_inet_pton4+0x72>
        {
            xResult = pdFAIL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae0e:	e014      	b.n	800ae3a <FreeRTOS_inet_pton4+0x9c>
        }
        else
        {
            ucOctet[ uxOctetNumber ] = ( uint8_t ) ulValue;
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	b2d9      	uxtb	r1, r3
 800ae14:	f107 0210 	add.w	r2, r7, #16
 800ae18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1a:	4413      	add	r3, r2
 800ae1c:	460a      	mov	r2, r1
 800ae1e:	701a      	strb	r2, [r3, #0]

            /* Check the next character is as expected. */
            if( uxOctetNumber < ( socketMAX_IP_ADDRESS_OCTETS - 1U ) )
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d809      	bhi.n	800ae3a <FreeRTOS_inet_pton4+0x9c>
            {
                if( *pcIPAddress != '.' )
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae2c:	d002      	beq.n	800ae34 <FreeRTOS_inet_pton4+0x96>
                {
                    xResult = pdFAIL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	627b      	str	r3, [r7, #36]	; 0x24
 800ae32:	e002      	b.n	800ae3a <FreeRTOS_inet_pton4+0x9c>
                }
                else
                {
                    /* Move past the dot. */
                    pcIPAddress++;
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	3301      	adds	r3, #1
 800ae38:	623b      	str	r3, [r7, #32]
                }
            }
        }

        if( xResult == pdFAIL )
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d006      	beq.n	800ae4e <FreeRTOS_inet_pton4+0xb0>
    for( uxOctetNumber = 0U; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	3301      	adds	r3, #1
 800ae44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d9b8      	bls.n	800adbe <FreeRTOS_inet_pton4+0x20>
 800ae4c:	e000      	b.n	800ae50 <FreeRTOS_inet_pton4+0xb2>
        {
            /* No point going on. */
            break;
 800ae4e:	bf00      	nop
        }
    }

    if( *pcIPAddress != ( char ) 0 )
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <FreeRTOS_inet_pton4+0xbe>
    {
        /* Expected the end of the string. */
        xResult = pdFAIL;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( uxOctetNumber != socketMAX_IP_ADDRESS_OCTETS )
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d001      	beq.n	800ae66 <FreeRTOS_inet_pton4+0xc8>
    {
        /* Didn't read enough octets. */
        xResult = pdFAIL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xResult == pdPASS )
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d10b      	bne.n	800ae84 <FreeRTOS_inet_pton4+0xe6>
    {
        /* lint: ucOctet has been set because xResult == pdPASS. */
        ulReturn = FreeRTOS_inet_addr_quick( ucOctet[ 0 ], ucOctet[ 1 ], ucOctet[ 2 ], ucOctet[ 3 ] );
 800ae6c:	7cfb      	ldrb	r3, [r7, #19]
 800ae6e:	061a      	lsls	r2, r3, #24
 800ae70:	7cbb      	ldrb	r3, [r7, #18]
 800ae72:	041b      	lsls	r3, r3, #16
 800ae74:	431a      	orrs	r2, r3
 800ae76:	7c7b      	ldrb	r3, [r7, #17]
 800ae78:	021b      	lsls	r3, r3, #8
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	7c3a      	ldrb	r2, [r7, #16]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	e001      	b.n	800ae88 <FreeRTOS_inet_pton4+0xea>
    }
    else
    {
        ulReturn = 0UL;
 800ae84:	2300      	movs	r3, #0
 800ae86:	60fb      	str	r3, [r7, #12]
    }

    pvCopySource = ( const void * ) &ulReturn;
 800ae88:	f107 030c 	add.w	r3, r7, #12
 800ae8c:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvDestination, pvCopySource, sizeof( ulReturn ) );
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	601a      	str	r2, [r3, #0]

    return xResult;
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3734      	adds	r7, #52	; 0x34
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <FreeRTOS_inet_addr>:
 *                         (dotted decimal) format.
 *
 * @return The 32-bit representation of IP(v4) address.
 */
uint32_t FreeRTOS_inet_addr( const char * pcIPAddress )
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
    uint32_t ulReturn = 0UL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]

    /* inet_pton AF_INET target is a 4-byte 'struct in_addr'. */
    ( void ) FreeRTOS_inet_pton4( pcIPAddress, &( ulReturn ) );
 800aeb2:	f107 030c 	add.w	r3, r7, #12
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff ff70 	bl	800ad9e <FreeRTOS_inet_pton4>

    return ulReturn;
 800aebe:	68fb      	ldr	r3, [r7, #12]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket: The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
        }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            if( pxSocket->pxSocketSet != NULL )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d015      	beq.n	800af04 <vSocketWakeUpUser+0x3c>
            {
                EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	0a1b      	lsrs	r3, r3, #8
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	60fb      	str	r3, [r7, #12]

                if( xSelectBits != 0UL )
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00c      	beq.n	800af04 <vSocketWakeUpUser+0x3c>
                {
                    pxSocket->xSocketBits |= xSelectBits;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	431a      	orrs	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	631a      	str	r2, [r3, #48]	; 0x30
                    ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68f9      	ldr	r1, [r7, #12]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7f9 fc30 	bl	8004764 <xEventGroupSetBits>
                }
            }

            pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	601a      	str	r2, [r3, #0]
        }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00b      	beq.n	800af30 <vSocketWakeUpUser+0x68>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d007      	beq.n	800af30 <vSocketWakeUpUser+0x68>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4619      	mov	r1, r3
 800af2a:	4610      	mov	r0, r2
 800af2c:	f7f9 fc1a 	bl	8004764 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0UL;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
}
 800af36:	bf00      	nop
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <xTCPTimerCheck>:
 * @param[in] xWillSleep: Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	; 0x28
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800af48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
        TickType_t xNow = xTaskGetTickCount();
 800af4e:	f7fa fecd 	bl	8005cec <xTaskGetTickCount>
 800af52:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800af54:	4b32      	ldr	r3, [pc, #200]	; (800b020 <xTCPTimerCheck+0xe0>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	623b      	str	r3, [r7, #32]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800af5e:	4b31      	ldr	r3, [pc, #196]	; (800b024 <xTCPTimerCheck+0xe4>)
 800af60:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800af62:	4b31      	ldr	r3, [pc, #196]	; (800b028 <xTCPTimerCheck+0xe8>)
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800af68:	4a2d      	ldr	r2, [pc, #180]	; (800b020 <xTCPTimerCheck+0xe0>)
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d14c      	bne.n	800b00e <xTCPTimerCheck+0xce>
        {
            xDelta = 1U;
 800af74:	2301      	movs	r3, #1
 800af76:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800af78:	e049      	b.n	800b00e <xTCPTimerCheck+0xce>
        {
            pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff f8be 	bl	800a100 <vCastPointerTo_FreeRTOS_Socket_t>
 800af84:	6138      	str	r0, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af92:	2b00      	cmp	r3, #0
 800af94:	d100      	bne.n	800af98 <xTCPTimerCheck+0x58>
            {
                continue;
 800af96:	e03a      	b.n	800b00e <xTCPTimerCheck+0xce>
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800af9e:	461a      	mov	r2, r3
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d20a      	bcs.n	800afbc <xTCPTimerCheck+0x7c>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800afba:	e00b      	b.n	800afd4 <xTCPTimerCheck+0x94>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                xRc = xTCPSocketCheck( pxSocket );
 800afc4:	6938      	ldr	r0, [r7, #16]
 800afc6:	f000 ff2d 	bl	800be24 <xTCPSocketCheck>
 800afca:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	da00      	bge.n	800afd4 <xTCPTimerCheck+0x94>
                {
                    /* Continue because the socket was deleted. */
                    continue;
 800afd2:	e01c      	b.n	800b00e <xTCPTimerCheck+0xce>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d008      	beq.n	800afee <xTCPTimerCheck+0xae>
            {
                if( xWillSleep != pdFALSE )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <xTCPTimerCheck+0xaa>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800afe2:	6938      	ldr	r0, [r7, #16]
 800afe4:	f7ff ff70 	bl	800aec8 <vSocketWakeUpUser>
 800afe8:	e001      	b.n	800afee <xTCPTimerCheck+0xae>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800afea:	2300      	movs	r3, #0
 800afec:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00a      	beq.n	800b00e <xTCPTimerCheck+0xce>
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800affe:	461a      	mov	r2, r3
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	4293      	cmp	r3, r2
 800b004:	d903      	bls.n	800b00e <xTCPTimerCheck+0xce>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
        while( pxIterator != pxEnd )
 800b00e:	69fa      	ldr	r2, [r7, #28]
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	429a      	cmp	r2, r3
 800b014:	d1b1      	bne.n	800af7a <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800b018:	4618      	mov	r0, r3
 800b01a:	3728      	adds	r7, #40	; 0x28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	200250ec 	.word	0x200250ec
 800b024:	20025c58 	.word	0x20025c58
 800b028:	20025c50 	.word	0x20025c50

0800b02c <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           uint32_t ulRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b08a      	sub	sp, #40	; 0x28
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	623b      	str	r3, [r7, #32]
 800b03e:	2300      	movs	r3, #0
 800b040:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800b042:	4b1c      	ldr	r3, [pc, #112]	; (800b0b4 <pxTCPSocketLookup+0x88>)
 800b044:	61bb      	str	r3, [r7, #24]

        /* Parameter not yet supported. */
        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	627b      	str	r3, [r7, #36]	; 0x24
 800b04c:	e024      	b.n	800b098 <pxTCPSocketLookup+0x6c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff f854 	bl	800a100 <vCastPointerTo_FreeRTOS_Socket_t>
 800b058:	6178      	str	r0, [r7, #20]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	b29b      	uxth	r3, r3
 800b062:	429a      	cmp	r2, r3
 800b064:	d115      	bne.n	800b092 <pxTCPSocketLookup+0x66>
            {
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d102      	bne.n	800b076 <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	61fb      	str	r3, [r7, #28]
 800b074:	e00d      	b.n	800b092 <pxTCPSocketLookup+0x66>
                }
                else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	429a      	cmp	r2, r3
 800b080:	d107      	bne.n	800b092 <pxTCPSocketLookup+0x66>
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d102      	bne.n	800b092 <pxTCPSocketLookup+0x66>
                {
                    /* For sockets not in listening mode, find a match with
                     * xLocalPort, ulRemoteIP AND xRemotePort. */
                    pxResult = pxSocket;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	623b      	str	r3, [r7, #32]
                    break;
 800b090:	e006      	b.n	800b0a0 <pxTCPSocketLookup+0x74>
             pxIterator = listGET_NEXT( pxIterator ) )
 800b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	627b      	str	r3, [r7, #36]	; 0x24
        for( pxIterator = listGET_NEXT( pxEnd );
 800b098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d1d6      	bne.n	800b04e <pxTCPSocketLookup+0x22>
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <pxTCPSocketLookup+0x7e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	623b      	str	r3, [r7, #32]
        }

        return pxResult;
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
    }
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3728      	adds	r7, #40	; 0x28
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20025c58 	.word	0x20025c58

0800b0b8 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d025      	beq.n	800b114 <prvTCPCreateStream+0x5c>
        {
            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0cc:	617b      	str	r3, [r7, #20]

            if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10c      	bne.n	800b0f0 <prvTCPCreateStream+0x38>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	4b32      	ldr	r3, [pc, #200]	; (800b1b0 <prvTCPCreateStream+0xf8>)
 800b0e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b0ea:	095a      	lsrs	r2, r3, #5
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	665a      	str	r2, [r3, #100]	; 0x64
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d110      	bne.n	800b11a <prvTCPCreateStream+0x62>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	461a      	mov	r2, r3
 800b106:	4b2a      	ldr	r3, [pc, #168]	; (800b1b0 <prvTCPCreateStream+0xf8>)
 800b108:	fba3 2302 	umull	r2, r3, r3, r2
 800b10c:	095a      	lsrs	r2, r3, #5
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	669a      	str	r2, [r3, #104]	; 0x68
 800b112:	e002      	b.n	800b11a <prvTCPCreateStream+0x62>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b118:	617b      	str	r3, [r7, #20]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	3304      	adds	r3, #4
 800b11e:	617b      	str	r3, [r7, #20]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	f023 0303 	bic.w	r3, r3, #3
 800b126:	617b      	str	r3, [r7, #20]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	3314      	adds	r3, #20
 800b12c:	613b      	str	r3, [r7, #16]

        pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 800b12e:	6938      	ldr	r0, [r7, #16]
 800b130:	f7fb ffbc 	bl	80070ac <pvPortMalloc>
 800b134:	4603      	mov	r3, r0
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff f803 	bl	800a142 <vCastPointerTo_StreamBuffer_t>
 800b13c:	60f8      	str	r0, [r7, #12]

        if( pxBuffer == NULL )
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10e      	bne.n	800b162 <prvTCPCreateStream+0xaa>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800b144:	481b      	ldr	r0, [pc, #108]	; (800b1b4 <prvTCPCreateStream+0xfc>)
 800b146:	f7f5 fc45 	bl	80009d4 <vLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b150:	f043 0308 	orr.w	r3, r3, #8
 800b154:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800b158:	2108      	movs	r1, #8
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f001 fd74 	bl	800cc48 <vTCPStateChange>
 800b160:	e020      	b.n	800b1a4 <prvTCPCreateStream+0xec>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800b162:	2214      	movs	r2, #20
 800b164:	2100      	movs	r1, #0
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f006 fb67 	bl	801183a <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800b172:	4b11      	ldr	r3, [pc, #68]	; (800b1b8 <prvTCPCreateStream+0x100>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <prvTCPCreateStream+0xd8>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <prvTCPCreateStream+0xcc>
 800b180:	2152      	movs	r1, #82	; 0x52
 800b182:	e000      	b.n	800b186 <prvTCPCreateStream+0xce>
 800b184:	2154      	movs	r1, #84	; 0x54
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	480c      	ldr	r0, [pc, #48]	; (800b1bc <prvTCPCreateStream+0x104>)
 800b18c:	f7f5 fc22 	bl	80009d4 <vLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <prvTCPCreateStream+0xe6>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	675a      	str	r2, [r3, #116]	; 0x74
 800b19c:	e002      	b.n	800b1a4 <prvTCPCreateStream+0xec>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	679a      	str	r2, [r3, #120]	; 0x78
            }
        }

        return pxBuffer;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
    }
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	51eb851f 	.word	0x51eb851f
 800b1b4:	08014280 	.word	0x08014280
 800b1b8:	20025114 	.word	0x20025114
 800b1bc:	080142a4 	.word	0x080142a4

0800b1c0 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800b1c0:	b5b0      	push	{r4, r5, r7, lr}
 800b1c2:	b08c      	sub	sp, #48	; 0x30
 800b1c4:	af04      	add	r7, sp, #16
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1d2:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	61bb      	str	r3, [r7, #24]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10a      	bne.n	800b1f4 <lTCPAddRxdata+0x34>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800b1de:	2101      	movs	r1, #1
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7ff ff69 	bl	800b0b8 <prvTCPCreateStream>
 800b1e6:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d102      	bne.n	800b1f4 <lTCPAddRxdata+0x34>
            {
                xResult = -1;
 800b1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f2:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	db5c      	blt.n	800b2b4 <lTCPAddRxdata+0xf4>
                        pcData = NULL;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	69f8      	ldr	r0, [r7, #28]
 800b202:	f000 fb45 	bl	800b890 <uxStreamBufferAdd>
 800b206:	4603      	mov	r3, r0
 800b208:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    if( xResult != ( int32_t ) ulByteCount )
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	69ba      	ldr	r2, [r7, #24]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d013      	beq.n	800b23a <lTCPAddRxdata+0x7a>
                    {
                        FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	681c      	ldr	r4, [r3, #0]
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	689d      	ldr	r5, [r3, #8]
 800b21a:	69f8      	ldr	r0, [r7, #28]
 800b21c:	f7fe ff48 	bl	800a0b0 <uxStreamBufferFrontSpace>
 800b220:	4602      	mov	r2, r0
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	9303      	str	r3, [sp, #12]
 800b228:	9202      	str	r2, [sp, #8]
 800b22a:	9501      	str	r5, [sp, #4]
 800b22c:	9400      	str	r4, [sp, #0]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	4822      	ldr	r0, [pc, #136]	; (800b2c0 <lTCPAddRxdata+0x100>)
 800b236:	f7f5 fbcd 	bl	80009d4 <vLoggingPrintf>
                                                 ( UBaseType_t ) pxStream->uxFront ) );
                    }
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d139      	bne.n	800b2b4 <lTCPAddRxdata+0xf4>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    /* See if running out of space. */
                    if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b246:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d11f      	bne.n	800b290 <lTCPAddRxdata+0xd0>
                    {
                        size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe ff2b 	bl	800a0b0 <uxStreamBufferFrontSpace>
 800b25a:	6178      	str	r0, [r7, #20]

                        if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	429a      	cmp	r2, r3
 800b264:	d814      	bhi.n	800b290 <lTCPAddRxdata+0xd0>
                        {
                            pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b270:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                            pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b27a:	f043 0301 	orr.w	r3, r3, #1
 800b27e:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                            /* bLowWater was reached, send the changed window size. */
                            pxSocket->u.xTCP.usTimeout = 1U;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2201      	movs	r2, #1
 800b286:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800b28a:	2006      	movs	r0, #6
 800b28c:	f7fe fa16 	bl	80096bc <xSendEventToIPTask>
                        }
                    }

                    /* New incoming data is available, wake up the user.   User's
                     * semaphores will be set just before the IP-task goes asleep. */
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f043 0201 	orr.w	r2, r3, #1
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <lTCPAddRxdata+0xf4>
                            {
                                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	601a      	str	r2, [r3, #0]
                    #endif
                }
            }
        }

        return xResult;
 800b2b4:	69bb      	ldr	r3, [r7, #24]
    }
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	080142e0 	.word	0x080142e0

0800b2c4 <FreeRTOS_tx_space>:
 * @param[in] xSocket: the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b2d6:	2b06      	cmp	r3, #6
 800b2d8:	d003      	beq.n	800b2e2 <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b2da:	f06f 0315 	mvn.w	r3, #21
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	e00e      	b.n	800b300 <FreeRTOS_tx_space+0x3c>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d007      	beq.n	800b2fa <FreeRTOS_tx_space+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe feca 	bl	800a088 <uxStreamBufferGetSpace>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	e002      	b.n	800b300 <FreeRTOS_tx_space+0x3c>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fe:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800b300:	68fb      	ldr	r3, [r7, #12]
    }
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b31c:	2b06      	cmp	r3, #6
 800b31e:	d003      	beq.n	800b328 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b320:	f06f 0315 	mvn.w	r3, #21
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	e00d      	b.n	800b344 <FreeRTOS_rx_size+0x3a>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d007      	beq.n	800b340 <FreeRTOS_rx_size+0x36>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b334:	4618      	mov	r0, r3
 800b336:	f7fe fecf 	bl	800a0d8 <uxStreamBufferGetSize>
 800b33a:	4603      	mov	r3, r0
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	e001      	b.n	800b344 <FreeRTOS_rx_size+0x3a>
        }
        else
        {
            xReturn = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800b344:	68fb      	ldr	r3, [r7, #12]
    }
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
	...

0800b350 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800b350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b354:	b095      	sub	sp, #84	; 0x54
 800b356:	af06      	add	r7, sp, #24
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	633b      	str	r3, [r7, #48]	; 0x30
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800b35c:	f006 fa04 	bl	8011768 <uxGetMinimumFreeNetworkBuffers>
 800b360:	62f8      	str	r0, [r7, #44]	; 0x2c
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800b362:	f006 f9f5 	bl	8011750 <uxGetNumberOfFreeNetworkBuffers>
 800b366:	62b8      	str	r0, [r7, #40]	; 0x28

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800b368:	4b5a      	ldr	r3, [pc, #360]	; (800b4d4 <vTCPNetStat+0x184>)
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b370:	d003      	beq.n	800b37a <vTCPNetStat+0x2a>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800b372:	4859      	ldr	r0, [pc, #356]	; (800b4d8 <vTCPNetStat+0x188>)
 800b374:	f7f5 fb2e 	bl	80009d4 <vLoggingPrintf>
                               ( UBaseType_t ) count,
                               ( UBaseType_t ) uxMinimum,
                               ( UBaseType_t ) uxCurrent,
                               ( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800b378:	e0a7      	b.n	800b4ca <vTCPNetStat+0x17a>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800b37a:	4b58      	ldr	r3, [pc, #352]	; (800b4dc <vTCPNetStat+0x18c>)
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800b37e:	4b58      	ldr	r3, [pc, #352]	; (800b4e0 <vTCPNetStat+0x190>)
 800b380:	623b      	str	r3, [r7, #32]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800b382:	4858      	ldr	r0, [pc, #352]	; (800b4e4 <vTCPNetStat+0x194>)
 800b384:	f7f5 fb26 	bl	80009d4 <vLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b388:	4b52      	ldr	r3, [pc, #328]	; (800b4d4 <vTCPNetStat+0x184>)
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	637b      	str	r3, [r7, #52]	; 0x34
 800b38e:	e073      	b.n	800b478 <vTCPNetStat+0x128>
                const FreeRTOS_Socket_t * pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	4618      	mov	r0, r3
 800b396:	f7fe febe 	bl	800a116 <vCastConstPointerTo_FreeRTOS_Socket_t>
 800b39a:	61f8      	str	r0, [r7, #28]
                    TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800b39c:	f7fa fca6 	bl	8005cec <xTaskGetTickCount>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	61bb      	str	r3, [r7, #24]
                char ucChildText[ 16 ] = "";
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	607b      	str	r3, [r7, #4]
 800b3ae:	f107 0308 	add.w	r3, r7, #8
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	605a      	str	r2, [r3, #4]
 800b3b8:	609a      	str	r2, [r3, #8]
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d11e      	bne.n	800b402 <vTCPNetStat+0xb2>
                                                         ( int32_t ) pxSocket->u.xTCP.usChildCount,
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800b3ca:	461a      	mov	r2, r3
                                                         ( int32_t ) pxSocket->u.xTCP.usBacklog );
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800b3d2:	1d38      	adds	r0, r7, #4
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	4a43      	ldr	r2, [pc, #268]	; (800b4e8 <vTCPNetStat+0x198>)
 800b3da:	2110      	movs	r1, #16
 800b3dc:	f006 ff46 	bl	801226c <sniprintf>
 800b3e0:	6178      	str	r0, [r7, #20]
                    configASSERT( copied_len >= 0 );
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	da04      	bge.n	800b3f2 <vTCPNetStat+0xa2>
 800b3e8:	4940      	ldr	r1, [pc, #256]	; (800b4ec <vTCPNetStat+0x19c>)
 800b3ea:	f241 1064 	movw	r0, #4452	; 0x1164
 800b3ee:	f7f5 fb1a 	bl	8000a26 <vAssertCalled>
                    configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) );
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b0f      	cmp	r3, #15
 800b3f6:	dd04      	ble.n	800b402 <vTCPNetStat+0xb2>
 800b3f8:	493c      	ldr	r1, [pc, #240]	; (800b4ec <vTCPNetStat+0x19c>)
 800b3fa:	f241 1065 	movw	r0, #4453	; 0x1165
 800b3fe:	f7f5 fb12 	bl	8000a26 <vAssertCalled>
                FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b406:	4698      	mov	r8, r3
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b410:	4699      	mov	r9, r3
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b416:	2b00      	cmp	r3, #0
 800b418:	bf14      	ite	ne
 800b41a:	2301      	movne	r3, #1
 800b41c:	2300      	moveq	r3, #0
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	461d      	mov	r5, r3
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b426:	2b00      	cmp	r3, #0
 800b428:	bf14      	ite	ne
 800b42a:	2301      	movne	r3, #1
 800b42c:	2300      	moveq	r3, #0
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	461e      	mov	r6, r3
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b438:	4618      	mov	r0, r3
 800b43a:	f003 fab7 	bl	800e9ac <FreeRTOS_GetTCPStateName>
 800b43e:	4601      	mov	r1, r0
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	4a2b      	ldr	r2, [pc, #172]	; (800b4f0 <vTCPNetStat+0x1a0>)
 800b444:	4293      	cmp	r3, r2
 800b446:	bf28      	it	cs
 800b448:	4613      	movcs	r3, r2
 800b44a:	69fa      	ldr	r2, [r7, #28]
 800b44c:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800b450:	4610      	mov	r0, r2
 800b452:	1d3a      	adds	r2, r7, #4
 800b454:	9205      	str	r2, [sp, #20]
 800b456:	9004      	str	r0, [sp, #16]
 800b458:	9303      	str	r3, [sp, #12]
 800b45a:	9102      	str	r1, [sp, #8]
 800b45c:	9601      	str	r6, [sp, #4]
 800b45e:	9500      	str	r5, [sp, #0]
 800b460:	464b      	mov	r3, r9
 800b462:	4622      	mov	r2, r4
 800b464:	4641      	mov	r1, r8
 800b466:	4823      	ldr	r0, [pc, #140]	; (800b4f4 <vTCPNetStat+0x1a4>)
 800b468:	f7f5 fab4 	bl	80009d4 <vLoggingPrintf>
                count++;
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	3301      	adds	r3, #1
 800b470:	633b      	str	r3, [r7, #48]	; 0x30
                 pxIterator = listGET_NEXT( pxIterator ) )
 800b472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	637b      	str	r3, [r7, #52]	; 0x34
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d187      	bne.n	800b390 <vTCPNetStat+0x40>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800b480:	4b1d      	ldr	r3, [pc, #116]	; (800b4f8 <vTCPNetStat+0x1a8>)
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	637b      	str	r3, [r7, #52]	; 0x34
 800b486:	e014      	b.n	800b4b2 <vTCPNetStat+0x162>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 800b488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	021b      	lsls	r3, r3, #8
 800b490:	b29a      	uxth	r2, r3
 800b492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	0a1b      	lsrs	r3, r3, #8
 800b498:	b29b      	uxth	r3, r3
 800b49a:	4313      	orrs	r3, r2
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4816      	ldr	r0, [pc, #88]	; (800b4fc <vTCPNetStat+0x1ac>)
 800b4a2:	f7f5 fa97 	bl	80009d4 <vLoggingPrintf>
                count++;
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	633b      	str	r3, [r7, #48]	; 0x30
                 pxIterator = listGET_NEXT( pxIterator ) )
 800b4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	637b      	str	r3, [r7, #52]	; 0x34
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800b4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d1e6      	bne.n	800b488 <vTCPNetStat+0x138>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %lu sockets %lu < %lu < %ld buffers free\n",
 800b4ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4bc:	233c      	movs	r3, #60	; 0x3c
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4c4:	480e      	ldr	r0, [pc, #56]	; (800b500 <vTCPNetStat+0x1b0>)
 800b4c6:	f7f5 fa85 	bl	80009d4 <vLoggingPrintf>
    }
 800b4ca:	bf00      	nop
 800b4cc:	373c      	adds	r7, #60	; 0x3c
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4d4:	20025c50 	.word	0x20025c50
 800b4d8:	08014328 	.word	0x08014328
 800b4dc:	20025c58 	.word	0x20025c58
 800b4e0:	20025c6c 	.word	0x20025c6c
 800b4e4:	08014344 	.word	0x08014344
 800b4e8:	0801438c 	.word	0x0801438c
 800b4ec:	08013fc8 	.word	0x08013fc8
 800b4f0:	000f423f 	.word	0x000f423f
 800b4f4:	08014394 	.word	0x08014394
 800b4f8:	20025c64 	.word	0x20025c64
 800b4fc:	080143c4 	.word	0x080143c4
 800b500:	080143d4 	.word	0x080143d4

0800b504 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet: The socket-set which is to be waited on for change.
 */
    void vSocketSelect( SocketSelect_t * pxSocketSet )
    {
 800b504:	b580      	push	{r7, lr}
 800b506:	b08c      	sub	sp, #48	; 0x30
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800b50c:	2301      	movs	r3, #1
 800b50e:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800b510:	2300      	movs	r3, #0
 800b512:	627b      	str	r3, [r7, #36]	; 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800b514:	2300      	movs	r3, #0
 800b516:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b518:	e0e4      	b.n	800b6e4 <vSocketSelect+0x1e0>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800b51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <vSocketSelect+0x22>
            {
                pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 800b520:	4b85      	ldr	r3, [pc, #532]	; (800b738 <vSocketSelect+0x234>)
 800b522:	61fb      	str	r3, [r7, #28]
 800b524:	e001      	b.n	800b52a <vSocketSelect+0x26>
            }

            #if ipconfigUSE_TCP == 1
                else
                {
                    pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800b526:	4b85      	ldr	r3, [pc, #532]	; (800b73c <vSocketSelect+0x238>)
 800b528:	61fb      	str	r3, [r7, #28]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	623b      	str	r3, [r7, #32]
 800b530:	e0d0      	b.n	800b6d4 <vSocketSelect+0x1d0>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe fde2 	bl	800a100 <vCastPointerTo_FreeRTOS_Socket_t>
 800b53c:	60b8      	str	r0, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	429a      	cmp	r2, r3
 800b546:	f040 80c1 	bne.w	800b6cc <vSocketSelect+0x1c8>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	62bb      	str	r3, [r7, #40]	; 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b554:	2b06      	cmp	r3, #6
 800b556:	f040 80a3 	bne.w	800b6a0 <vSocketSelect+0x19c>
                    {
                        /* Check if the socket has already been accepted by the
                         * owner.  If not, it is useless to return it from a
                         * select(). */
                        BaseType_t bAccepted = pdFALSE;
 800b55a:	2300      	movs	r3, #0
 800b55c:	61bb      	str	r3, [r7, #24]

                        if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d109      	bne.n	800b582 <vSocketSelect+0x7e>
                        {
                            if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b574:	f003 0302 	and.w	r3, r3, #2
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <vSocketSelect+0x7e>
                            {
                                bAccepted = pdTRUE;
 800b57e:	2301      	movs	r3, #1
 800b580:	61bb      	str	r3, [r7, #24]
                            }
                        }

                        /* Is the set owner interested in READ events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b586:	f003 0301 	and.w	r3, r3, #1
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d038      	beq.n	800b600 <vSocketSelect+0xfc>
                        {
                            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b594:	2b01      	cmp	r3, #1
 800b596:	d111      	bne.n	800b5bc <vSocketSelect+0xb8>
                            {
                                if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d02f      	beq.n	800b600 <vSocketSelect+0xfc>
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5a8:	f003 0302 	and.w	r3, r3, #2
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d026      	beq.n	800b600 <vSocketSelect+0xfc>
                                {
                                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b4:	f043 0301 	orr.w	r3, r3, #1
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5ba:	e021      	b.n	800b600 <vSocketSelect+0xfc>
                                }
                            }
                            else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5c2:	f003 0308 	and.w	r3, r3, #8
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00c      	beq.n	800b5e6 <vSocketSelect+0xe2>
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5d2:	f003 0302 	and.w	r3, r3, #2
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d004      	beq.n	800b5e6 <vSocketSelect+0xe2>
                            {
                                /* This socket has the re-use flag. After connecting it turns into
                                 * a connected socket. Set the READ event, so that accept() will be called. */
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	f043 0301 	orr.w	r3, r3, #1
 800b5e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5e4:	e00c      	b.n	800b600 <vSocketSelect+0xfc>
                            }
                            else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d009      	beq.n	800b600 <vSocketSelect+0xfc>
 800b5ec:	68b8      	ldr	r0, [r7, #8]
 800b5ee:	f7ff fe8c 	bl	800b30a <FreeRTOS_rx_size>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	dd03      	ble.n	800b600 <vSocketSelect+0xfc>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	f043 0301 	orr.w	r3, r3, #1
 800b5fe:	62bb      	str	r3, [r7, #40]	; 0x28
                                /* Nothing. */
                            }
                        }

                        /* Is the set owner interested in EXCEPTION events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	f003 0304 	and.w	r3, r3, #4
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00d      	beq.n	800b628 <vSocketSelect+0x124>
                        {
                            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b612:	2b08      	cmp	r3, #8
 800b614:	d004      	beq.n	800b620 <vSocketSelect+0x11c>
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d103      	bne.n	800b628 <vSocketSelect+0x124>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	f043 0304 	orr.w	r3, r3, #4
 800b626:	62bb      	str	r3, [r7, #40]	; 0x28
                            }
                        }

                        /* Is the set owner interested in WRITE events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62c:	f003 0302 	and.w	r3, r3, #2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d043      	beq.n	800b6bc <vSocketSelect+0x1b8>
                        {
                            BaseType_t bMatch = pdFALSE;
 800b634:	2300      	movs	r3, #0
 800b636:	617b      	str	r3, [r7, #20]

                            if( bAccepted != 0 )
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d007      	beq.n	800b64e <vSocketSelect+0x14a>
                            {
                                if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800b63e:	68b8      	ldr	r0, [r7, #8]
 800b640:	f7ff fe40 	bl	800b2c4 <FreeRTOS_tx_space>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	dd01      	ble.n	800b64e <vSocketSelect+0x14a>
                                {
                                    bMatch = pdTRUE;
 800b64a:	2301      	movs	r3, #1
 800b64c:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch == pdFALSE )
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d11d      	bne.n	800b690 <vSocketSelect+0x18c>
                            {
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b65a:	f003 0308 	and.w	r3, r3, #8
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b00      	cmp	r3, #0
 800b662:	d015      	beq.n	800b690 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800b66a:	2b04      	cmp	r3, #4
 800b66c:	d910      	bls.n	800b690 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b674:	f003 0310 	and.w	r3, r3, #16
 800b678:	b2db      	uxtb	r3, r3
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d108      	bne.n	800b690 <vSocketSelect+0x18c>
                                {
                                    pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b684:	f043 0310 	orr.w	r3, r3, #16
 800b688:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                                    bMatch = pdTRUE;
 800b68c:	2301      	movs	r3, #1
 800b68e:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch != pdFALSE )
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d012      	beq.n	800b6bc <vSocketSelect+0x1b8>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	f043 0302 	orr.w	r3, r3, #2
 800b69c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b69e:	e00d      	b.n	800b6bc <vSocketSelect+0x1b8>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d007      	beq.n	800b6bc <vSocketSelect+0x1b8>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <vSocketSelect+0x1b8>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	f043 0301 	orr.w	r3, r3, #1
 800b6ba:	62bb      	str	r3, [r7, #40]	; 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c0:	631a      	str	r2, [r3, #48]	; 0x30

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800b6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ca:	e000      	b.n	800b6ce <vSocketSelect+0x1ca>
                    continue;
 800b6cc:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800b6d4:	6a3a      	ldr	r2, [r7, #32]
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	f47f af2a 	bne.w	800b532 <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	f77f af16 	ble.w	800b51a <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7f9 f807 	bl	8004708 <xEventGroupClearBits>
 800b6fa:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fe:	43da      	mvns	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	4013      	ands	r3, r2
 800b704:	f003 030f 	and.w	r3, r3, #15
 800b708:	60fb      	str	r3, [r7, #12]
                 * and cleared in FreeRTOS_select(). */
                xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
            }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d005      	beq.n	800b71c <vSocketSelect+0x218>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68f9      	ldr	r1, [r7, #12]
 800b716:	4618      	mov	r0, r3
 800b718:	f7f8 fff6 	bl	8004708 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	f043 0310 	orr.w	r3, r3, #16
 800b726:	4619      	mov	r1, r3
 800b728:	4610      	mov	r0, r2
 800b72a:	f7f9 f81b 	bl	8004764 <xEventGroupSetBits>
    }
 800b72e:	bf00      	nop
 800b730:	3730      	adds	r7, #48	; 0x30
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20025c6c 	.word	0x20025c6c
 800b73c:	20025c58 	.word	0x20025c58

0800b740 <FreeRTOS_min_uint32>:
        {
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	4293      	cmp	r3, r2
 800b750:	bf28      	it	cs
 800b752:	4613      	movcs	r3, r2
        }
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <uxStreamBufferSpace>:
    {
 800b760:	b480      	push	{r7}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	691a      	ldr	r2, [r3, #16]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	441a      	add	r2, r3
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	3b01      	subs	r3, #1
 800b77a:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	697a      	ldr	r2, [r7, #20]
 800b782:	429a      	cmp	r2, r3
 800b784:	d304      	bcc.n	800b790 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	617b      	str	r3, [r7, #20]
        return uxCount;
 800b790:	697b      	ldr	r3, [r7, #20]
    }
 800b792:	4618      	mov	r0, r3
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <uxStreamBufferDistance>:
    {
 800b79e:	b480      	push	{r7}
 800b7a0:	b087      	sub	sp, #28
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	60b9      	str	r1, [r7, #8]
 800b7a8:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	691a      	ldr	r2, [r3, #16]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	441a      	add	r2, r3
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d304      	bcc.n	800b7cc <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	617b      	str	r3, [r7, #20]
        return uxCount;
 800b7cc:	697b      	ldr	r3, [r7, #20]
    }
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	371c      	adds	r7, #28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <uxStreamBufferGetSpace>:
    {
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	68f9      	ldr	r1, [r7, #12]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff ffb4 	bl	800b760 <uxStreamBufferSpace>
 800b7f8:	4603      	mov	r3, r0
    }
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <uxStreamBufferGetSize>:
    {
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	68b9      	ldr	r1, [r7, #8]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff ffbf 	bl	800b79e <uxStreamBufferDistance>
 800b820:	4603      	mov	r3, r0
    }
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <xStreamBufferLessThenEqual>:
                                                             const size_t uxLeft,
                                                             const size_t uxRight );
    static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * pxBuffer,
                                                             const size_t uxLeft,
                                                             const size_t uxRight )
    {
 800b82a:	b480      	push	{r7}
 800b82c:	b087      	sub	sp, #28
 800b82e:	af00      	add	r7, sp, #0
 800b830:	60f8      	str	r0, [r7, #12]
 800b832:	60b9      	str	r1, [r7, #8]
 800b834:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;
        size_t uxTail = pxBuffer->uxTail;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	613b      	str	r3, [r7, #16]

        /* Returns true if ( uxLeft < uxRight ) */
        if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U ) ) != 0U )
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	429a      	cmp	r2, r3
 800b842:	d201      	bcs.n	800b848 <xStreamBufferLessThenEqual+0x1e>
 800b844:	2201      	movs	r2, #1
 800b846:	e000      	b.n	800b84a <xStreamBufferLessThenEqual+0x20>
 800b848:	2200      	movs	r2, #0
 800b84a:	6879      	ldr	r1, [r7, #4]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	4299      	cmp	r1, r3
 800b850:	d201      	bcs.n	800b856 <xStreamBufferLessThenEqual+0x2c>
 800b852:	2301      	movs	r3, #1
 800b854:	e000      	b.n	800b858 <xStreamBufferLessThenEqual+0x2e>
 800b856:	2300      	movs	r3, #0
 800b858:	429a      	cmp	r2, r3
 800b85a:	d009      	beq.n	800b870 <xStreamBufferLessThenEqual+0x46>
        {
            if( uxRight < uxTail )
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	429a      	cmp	r2, r3
 800b862:	d202      	bcs.n	800b86a <xStreamBufferLessThenEqual+0x40>
            {
                xReturn = pdTRUE;
 800b864:	2301      	movs	r3, #1
 800b866:	617b      	str	r3, [r7, #20]
 800b868:	e00b      	b.n	800b882 <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e008      	b.n	800b882 <xStreamBufferLessThenEqual+0x58>
            }
        }
        else
        {
            if( uxLeft <= uxRight )
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	429a      	cmp	r2, r3
 800b876:	d802      	bhi.n	800b87e <xStreamBufferLessThenEqual+0x54>
            {
                xReturn = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e001      	b.n	800b882 <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800b87e:	2300      	movs	r3, #0
 800b880:	617b      	str	r3, [r7, #20]
            }
        }

        return xReturn;
 800b882:	697b      	ldr	r3, [r7, #20]
    }
 800b884:	4618      	mov	r0, r3
 800b886:	371c      	adds	r7, #28
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          const uint8_t * pucData,
                          size_t uxByteCount )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	603b      	str	r3, [r7, #0]
    size_t uxSpace, uxNextHead, uxFirst;
    size_t uxCount = uxByteCount;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	617b      	str	r3, [r7, #20]

    uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f7ff ff99 	bl	800b7da <uxStreamBufferGetSpace>
 800b8a8:	61f8      	str	r0, [r7, #28]

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800b8aa:	69fa      	ldr	r2, [r7, #28]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d904      	bls.n	800b8bc <uxStreamBufferAdd+0x2c>
    {
        uxSpace -= uxOffset;
 800b8b2:	69fa      	ldr	r2, [r7, #28]
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	61fb      	str	r3, [r7, #28]
 800b8ba:	e001      	b.n	800b8c0 <uxStreamBufferAdd+0x30>
    }
    else
    {
        uxSpace = 0U;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	61fb      	str	r3, [r7, #28]
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800b8c0:	6979      	ldr	r1, [r7, #20]
 800b8c2:	69f8      	ldr	r0, [r7, #28]
 800b8c4:	f7ff ff3c 	bl	800b740 <FreeRTOS_min_uint32>
 800b8c8:	6178      	str	r0, [r7, #20]

    if( uxCount != 0U )
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d05a      	beq.n	800b986 <uxStreamBufferAdd+0xf6>
    {
        uxNextHead = pxBuffer->uxHead;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00d      	beq.n	800b8f8 <uxStreamBufferAdd+0x68>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	69ba      	ldr	r2, [r7, #24]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d304      	bcc.n	800b8f8 <uxStreamBufferAdd+0x68>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d022      	beq.n	800b944 <uxStreamBufferAdd+0xb4>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	691a      	ldr	r2, [r3, #16]
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	6979      	ldr	r1, [r7, #20]
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff ff19 	bl	800b740 <FreeRTOS_min_uint32>
 800b90e:	6138      	str	r0, [r7, #16]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	3310      	adds	r3, #16
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	4413      	add	r3, r2
 800b918:	3304      	adds	r3, #4
 800b91a:	693a      	ldr	r2, [r7, #16]
 800b91c:	6879      	ldr	r1, [r7, #4]
 800b91e:	4618      	mov	r0, r3
 800b920:	f005 ff67 	bl	80117f2 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d90b      	bls.n	800b944 <uxStreamBufferAdd+0xb4>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f103 0014 	add.w	r0, r3, #20
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	18d1      	adds	r1, r2, r3
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	461a      	mov	r2, r3
 800b940:	f005 ff57 	bl	80117f2 <memcpy>
            }
        }

        if( uxOffset == 0U )
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d110      	bne.n	800b96c <uxStreamBufferAdd+0xdc>
        {
            /* ( uxOffset == 0 ) means: write at uxHead position */
            uxNextHead += uxCount;
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	4413      	add	r3, r2
 800b950:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	69ba      	ldr	r2, [r7, #24]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d304      	bcc.n	800b966 <uxStreamBufferAdd+0xd6>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	69ba      	ldr	r2, [r7, #24]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxHead = uxNextHead;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	609a      	str	r2, [r3, #8]
        }

        if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	69ba      	ldr	r2, [r7, #24]
 800b972:	4619      	mov	r1, r3
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f7ff ff58 	bl	800b82a <xStreamBufferLessThenEqual>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <uxStreamBufferAdd+0xf6>
        {
            /* Advance the front pointer */
            pxBuffer->uxFront = uxNextHead;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	60da      	str	r2, [r3, #12]
        }
    }

    return uxCount;
 800b986:	697b      	ldr	r3, [r7, #20]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3720      	adds	r7, #32
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          uint8_t * pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b088      	sub	sp, #32
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
 800b99c:	603b      	str	r3, [r7, #0]
    size_t uxSize, uxCount, uxFirst, uxNextTail;

    /* How much data is available? */
    uxSize = uxStreamBufferGetSize( pxBuffer );
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7ff ff2f 	bl	800b802 <uxStreamBufferGetSize>
 800b9a4:	61f8      	str	r0, [r7, #28]

    if( uxSize > uxOffset )
 800b9a6:	69fa      	ldr	r2, [r7, #28]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d904      	bls.n	800b9b8 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800b9ae:	69fa      	ldr	r2, [r7, #28]
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	61fb      	str	r3, [r7, #28]
 800b9b6:	e001      	b.n	800b9bc <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	61fb      	str	r3, [r7, #28]
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	69f8      	ldr	r0, [r7, #28]
 800b9c0:	f7ff febe 	bl	800b740 <FreeRTOS_min_uint32>
 800b9c4:	6178      	str	r0, [r7, #20]

    if( uxCount > 0U )
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d050      	beq.n	800ba6e <uxStreamBufferGet+0xde>
    {
        uxNextTail = pxBuffer->uxTail;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00d      	beq.n	800b9f4 <uxStreamBufferGet+0x64>
        {
            uxNextTail += uxOffset;
 800b9d8:	69ba      	ldr	r2, [r7, #24]
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	4413      	add	r3, r2
 800b9de:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	69ba      	ldr	r2, [r7, #24]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d304      	bcc.n	800b9f4 <uxStreamBufferGet+0x64>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	69ba      	ldr	r2, [r7, #24]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d022      	beq.n	800ba40 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	691a      	ldr	r2, [r3, #16]
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	6979      	ldr	r1, [r7, #20]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff fe9b 	bl	800b740 <FreeRTOS_min_uint32>
 800ba0a:	6138      	str	r0, [r7, #16]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	3310      	adds	r3, #16
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	4413      	add	r3, r2
 800ba14:	3304      	adds	r3, #4
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f005 fee9 	bl	80117f2 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d90b      	bls.n	800ba40 <uxStreamBufferGet+0xb0>
            {
                /*...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	18d0      	adds	r0, r2, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f103 0114 	add.w	r1, r3, #20
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	f005 fed9 	bl	80117f2 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d113      	bne.n	800ba6e <uxStreamBufferGet+0xde>
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d110      	bne.n	800ba6e <uxStreamBufferGet+0xde>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800ba4c:	69ba      	ldr	r2, [r7, #24]
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	4413      	add	r3, r2
 800ba52:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d304      	bcc.n	800ba68 <uxStreamBufferGet+0xd8>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxTail = uxNextTail;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	69ba      	ldr	r2, [r7, #24]
 800ba6c:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800ba6e:	697b      	ldr	r3, [r7, #20]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <FreeRTOS_min_int32>:
        {
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	4293      	cmp	r3, r2
 800ba88:	bfa8      	it	ge
 800ba8a:	4613      	movge	r3, r2
        }
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <FreeRTOS_min_uint32>:
        {
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	4293      	cmp	r3, r2
 800baa8:	bf28      	it	cs
 800baaa:	4613      	movcs	r3, r2
        }
 800baac:	4618      	mov	r0, r3
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <uxStreamBufferSpace>:
    {
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	691a      	ldr	r2, [r3, #16]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	441a      	add	r2, r3
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	3b01      	subs	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	429a      	cmp	r2, r3
 800badc:	d304      	bcc.n	800bae8 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	697a      	ldr	r2, [r7, #20]
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	617b      	str	r3, [r7, #20]
        return uxCount;
 800bae8:	697b      	ldr	r3, [r7, #20]
    }
 800baea:	4618      	mov	r0, r3
 800baec:	371c      	adds	r7, #28
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <uxStreamBufferDistance>:
    {
 800baf6:	b480      	push	{r7}
 800baf8:	b087      	sub	sp, #28
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	691a      	ldr	r2, [r3, #16]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	441a      	add	r2, r3
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d304      	bcc.n	800bb24 <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	617b      	str	r3, [r7, #20]
        return uxCount;
 800bb24:	697b      	ldr	r3, [r7, #20]
    }
 800bb26:	4618      	mov	r0, r3
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <uxStreamBufferGetSpace>:
    {
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b084      	sub	sp, #16
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	68f9      	ldr	r1, [r7, #12]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff ffb4 	bl	800bab8 <uxStreamBufferSpace>
 800bb50:	4603      	mov	r3, r0
    }
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <uxStreamBufferFrontSpace>:
    {
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
        size_t uxFront = pxBuffer->uxFront;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	68f9      	ldr	r1, [r7, #12]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff ffa0 	bl	800bab8 <uxStreamBufferSpace>
 800bb78:	4603      	mov	r3, r0
    }
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <uxStreamBufferMidSpace>:
    {
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b084      	sub	sp, #16
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	60fb      	str	r3, [r7, #12]
        size_t uxMid = pxBuffer->uxMid;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7ff ffab 	bl	800baf6 <uxStreamBufferDistance>
 800bba0:	4603      	mov	r3, r0
    }
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <vStreamBufferMoveMid>:
    {
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
        size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7ff ffe4 	bl	800bb82 <uxStreamBufferMidSpace>
 800bbba:	60b8      	str	r0, [r7, #8]
        size_t uxMoveCount = uxCount;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	60fb      	str	r3, [r7, #12]
        if( uxMoveCount > uxSize )
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d901      	bls.n	800bbcc <vStreamBufferMoveMid+0x22>
            uxMoveCount = uxSize;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	60fb      	str	r3, [r7, #12]
        pxBuffer->uxMid += uxMoveCount;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	441a      	add	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	605a      	str	r2, [r3, #4]
        if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d306      	bcc.n	800bbf2 <vStreamBufferMoveMid+0x48>
            pxBuffer->uxMid -= pxBuffer->LENGTH;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	1ad2      	subs	r2, r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	605a      	str	r2, [r3, #4]
    }
 800bbf2:	bf00      	nop
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <vCastConstPointerTo_IPHeader_t>:
    {
 800bbfa:	b480      	push	{r7}
 800bbfc:	b083      	sub	sp, #12
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
        return ( const IPHeader_t * ) pvArgument;
 800bc02:	687b      	ldr	r3, [r7, #4]
    }
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <vCastPointerTo_TCPPacket_t>:
    {
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
        return ( TCPPacket_t * ) pvArgument;
 800bc18:	687b      	ldr	r3, [r7, #4]
    }
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <vCastConstPointerTo_TCPPacket_t>:
    {
 800bc26:	b480      	push	{r7}
 800bc28:	b083      	sub	sp, #12
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
        return ( const TCPPacket_t * ) pvArgument;
 800bc2e:	687b      	ldr	r3, [r7, #4]
    }
 800bc30:	4618      	mov	r0, r3
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <vCastPointerTo_ProtocolHeaders_t>:
    {
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
        return ( ProtocolHeaders_t * ) pvArgument;
 800bc44:	687b      	ldr	r3, [r7, #4]
    }
 800bc46:	4618      	mov	r0, r3
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <vCastConstPointerTo_ProtocolHeaders_t>:
    {
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
        return ( const ProtocolHeaders_t * ) pvArgument;
 800bc5a:	687b      	ldr	r3, [r7, #4]
    }
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800bc70:	687b      	ldr	r3, [r7, #4]
    }
 800bc72:	4618      	mov	r0, r3
 800bc74:	370c      	adds	r7, #12
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <ulChar2u32>:
    {
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	061a      	lsls	r2, r3, #24
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	041b      	lsls	r3, r3, #16
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800bc94:	431a      	orrs	r2, r3
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	3302      	adds	r3, #2
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	021b      	lsls	r3, r3, #8
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800bc9e:	4313      	orrs	r3, r2
               ( ( ( uint32_t ) apChr[ 3 ] ) );
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	3203      	adds	r2, #3
 800bca4:	7812      	ldrb	r2, [r2, #0]
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800bca6:	4313      	orrs	r3, r2
    }
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <usChar2u16>:
    {
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	021b      	lsls	r3, r3, #8
 800bcc4:	b29a      	uxth	r2, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	b29b      	uxth	r3, r3
        return ( uint16_t )
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	b29b      	uxth	r3, r3
    }
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
	...

0800bce0 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    static BaseType_t prvTCPSocketIsActive( eIPTCPState_t xStatus )
    {
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( xStatus )
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	2b0b      	cmp	r3, #11
 800bcee:	d81e      	bhi.n	800bd2e <prvTCPSocketIsActive+0x4e>
 800bcf0:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <prvTCPSocketIsActive+0x18>)
 800bcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf6:	bf00      	nop
 800bcf8:	0800bd29 	.word	0x0800bd29
 800bcfc:	0800bd2f 	.word	0x0800bd2f
 800bd00:	0800bd2f 	.word	0x0800bd2f
 800bd04:	0800bd2f 	.word	0x0800bd2f
 800bd08:	0800bd2f 	.word	0x0800bd2f
 800bd0c:	0800bd2f 	.word	0x0800bd2f
 800bd10:	0800bd2f 	.word	0x0800bd2f
 800bd14:	0800bd29 	.word	0x0800bd29
 800bd18:	0800bd29 	.word	0x0800bd29
 800bd1c:	0800bd29 	.word	0x0800bd29
 800bd20:	0800bd2f 	.word	0x0800bd2f
 800bd24:	0800bd29 	.word	0x0800bd29
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	60fb      	str	r3, [r7, #12]
                break;
 800bd2c:	e002      	b.n	800bd34 <prvTCPSocketIsActive+0x54>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	60fb      	str	r3, [r7, #12]
                break;
 800bd32:	bf00      	nop
        }

        return xResult;
 800bd34:	68fb      	ldr	r3, [r7, #12]
    }
 800bd36:	4618      	mov	r0, r3
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop

0800bd44 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800bd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd46:	b089      	sub	sp, #36	; 0x24
 800bd48:	af02      	add	r7, sp, #8
 800bd4a:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;
            eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bd52:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800bd54:	7cfb      	ldrb	r3, [r7, #19]
 800bd56:	2b08      	cmp	r3, #8
 800bd58:	d81a      	bhi.n	800bd90 <prvTCPStatusAgeCheck+0x4c>
 800bd5a:	a201      	add	r2, pc, #4	; (adr r2, 800bd60 <prvTCPStatusAgeCheck+0x1c>)
 800bd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd60:	0800bd8b 	.word	0x0800bd8b
 800bd64:	0800bd8b 	.word	0x0800bd8b
 800bd68:	0800bd91 	.word	0x0800bd91
 800bd6c:	0800bd91 	.word	0x0800bd91
 800bd70:	0800bd91 	.word	0x0800bd91
 800bd74:	0800bd85 	.word	0x0800bd85
 800bd78:	0800bd91 	.word	0x0800bd91
 800bd7c:	0800bd91 	.word	0x0800bd91
 800bd80:	0800bd8b 	.word	0x0800bd8b
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800bd84:	2300      	movs	r3, #0
 800bd86:	617b      	str	r3, [r7, #20]
                    break;
 800bd88:	e005      	b.n	800bd96 <prvTCPStatusAgeCheck+0x52>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	617b      	str	r3, [r7, #20]
                    break;
 800bd8e:	e002      	b.n	800bd96 <prvTCPStatusAgeCheck+0x52>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800bd90:	2301      	movs	r3, #1
 800bd92:	617b      	str	r3, [r7, #20]
                    break;
 800bd94:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d03b      	beq.n	800be14 <prvTCPStatusAgeCheck+0xd0>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800bd9c:	f7f9 ffa6 	bl	8005cec <xTaskGetTickCount>
 800bda0:	4602      	mov	r2, r0
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bda6:	1ad3      	subs	r3, r2, r3
 800bda8:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f247 5230 	movw	r2, #30000	; 0x7530
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d92f      	bls.n	800be14 <prvTCPStatusAgeCheck+0xd0>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bdb8:	461d      	mov	r5, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bdc2:	461e      	mov	r6, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f002 fdee 	bl	800e9ac <FreeRTOS_GetTCPStateName>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	4633      	mov	r3, r6
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	4629      	mov	r1, r5
 800bdda:	4811      	ldr	r0, [pc, #68]	; (800be20 <prvTCPStatusAgeCheck+0xdc>)
 800bddc:	f7f4 fdfa 	bl	80009d4 <vLoggingPrintf>
                                                     FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
                        }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800bde0:	2108      	movs	r1, #8
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 ff30 	bl	800cc48 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdee:	f003 0304 	and.w	r3, r3, #4
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00d      	beq.n	800be14 <prvTCPStatusAgeCheck+0xd0>
                    {
                        if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdfe:	f003 0308 	and.w	r3, r3, #8
 800be02:	b2db      	uxtb	r3, r3
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <prvTCPStatusAgeCheck+0xca>
                        {
                            /* As it did not get connected, and the user can never
                             * accept() it anymore, it will be deleted now.  Called from
                             * the IP-task, so it's safe to call the internal Close
                             * function: vSocketClose(). */
                            ( void ) vSocketClose( pxSocket );
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7fe fd85 	bl	800a918 <vSocketClose>
                        }

                        /* Return a negative value to tell to inform the caller
                         * xTCPTimerCheck()
                         * that the socket got closed and may not be accessed anymore. */
                        xResult = -1;
 800be0e:	f04f 33ff 	mov.w	r3, #4294967295
 800be12:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800be14:	697b      	ldr	r3, [r7, #20]
        }
 800be16:	4618      	mov	r0, r3
 800be18:	371c      	adds	r7, #28
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be1e:	bf00      	nop
 800be20:	08014410 	.word	0x08014410

0800be24 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b087      	sub	sp, #28
 800be28:	af02      	add	r7, sp, #8
 800be2a:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800be30:	2300      	movs	r3, #0
 800be32:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800be3a:	2b04      	cmp	r3, #4
 800be3c:	d906      	bls.n	800be4c <xTCPSocketCheck+0x28>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <xTCPSocketCheck+0x28>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f001 fab6 	bl	800d3b8 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d04f      	beq.n	800bef4 <xTCPSocketCheck+0xd0>
                {
                    /* The first task of this regular socket check is to send-out delayed
                     * ACK's. */
                    if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be5a:	f003 0320 	and.w	r3, r3, #32
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	2b00      	cmp	r3, #0
 800be62:	d13b      	bne.n	800bedc <xTCPSocketCheck+0xb8>
                    {
                        /* Earlier data was received but not yet acknowledged.  This
                         * function is called when the TCP timer for the socket expires, the
                         * ACK may be sent now. */
                        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d02e      	beq.n	800becc <xTCPSocketCheck+0xa8>
                        {
                            if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800be6e:	4b2f      	ldr	r3, [pc, #188]	; (800bf2c <xTCPSocketCheck+0x108>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b01      	cmp	r3, #1
 800be74:	dd20      	ble.n	800beb8 <xTCPSocketCheck+0x94>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be7a:	2b17      	cmp	r3, #23
 800be7c:	d01c      	beq.n	800beb8 <xTCPSocketCheck+0x94>
                            {
                                FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %u)\n",
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be82:	4618      	mov	r0, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800be88:	461c      	mov	r4, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800be96:	1ad1      	subs	r1, r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	2228      	movs	r2, #40	; 0x28
 800bea8:	9201      	str	r2, [sp, #4]
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	460b      	mov	r3, r1
 800beae:	4622      	mov	r2, r4
 800beb0:	4601      	mov	r1, r0
 800beb2:	481f      	ldr	r0, [pc, #124]	; (800bf30 <xTCPSocketCheck+0x10c>)
 800beb4:	f7f4 fd8e 	bl	80009d4 <vLoggingPrintf>
                                                         pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
                                                         pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
                                                         ( unsigned ) ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
                            }

                            prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800bebc:	2301      	movs	r3, #1
 800bebe:	2228      	movs	r2, #40	; 0x28
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f8d9 	bl	800c078 <prvTCPReturnPacket>

                            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                                {
                                    /* The ownership has been passed to the SEND routine,
                                     * clear the pointer to it. */
                                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	67da      	str	r2, [r3, #124]	; 0x7c
                                }
                            #endif /* ipconfigZERO_COPY_TX_DRIVER */
                        }

                        if( prvTCPNextTimeout( pxSocket ) > 1U )
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f001 f9e3 	bl	800d298 <prvTCPNextTimeout>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d901      	bls.n	800bedc <xTCPSocketCheck+0xb8>
                        {
                            /* Tell the code below that this function is ready. */
                            xReady = pdTRUE;
 800bed8:	2301      	movs	r3, #1
 800beda:	60bb      	str	r3, [r7, #8]
                        /* The user wants to perform an active shutdown(), skip sending
                         * the delayed ACK.  The function prvTCPSendPacket() will send the
                         * FIN along with the ACK's. */
                    }

                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d007      	beq.n	800bef4 <xTCPSocketCheck+0xd0>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bee8:	4618      	mov	r0, r3
 800beea:	f005 fbfd 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
                        pxSocket->u.xTCP.pxAckMessage = NULL;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	67da      	str	r2, [r3, #124]	; 0x7c
                    }
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d113      	bne.n	800bf22 <xTCPSocketCheck+0xfe>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d804      	bhi.n	800bf0e <xTCPSocketCheck+0xea>
                ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN ) )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d102      	bne.n	800bf14 <xTCPSocketCheck+0xf0>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f810 	bl	800bf34 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f001 f9bf 	bl	800d298 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
                {
                    /* In all (non-connected) states in which keep-alive messages can not be sent
                     * the anti-hang protocol will close sockets that are 'hanging'. */
                    xResult = prvTCPStatusAgeCheck( pxSocket );
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f7ff ff12 	bl	800bd44 <prvTCPStatusAgeCheck>
 800bf20:	60f8      	str	r0, [r7, #12]
                }
            #endif
        }

        return xResult;
 800bf22:	68fb      	ldr	r3, [r7, #12]
    }
 800bf24:	4618      	mov	r0, r3
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd90      	pop	{r4, r7, pc}
 800bf2c:	20025114 	.word	0x20025114
 800bf30:	08014448 	.word	0x08014448

0800bf34 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    static int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d010      	beq.n	800bf70 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	60bb      	str	r3, [r7, #8]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800bf52:	f107 0308 	add.w	r3, r7, #8
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f85d 	bl	800c018 <prvTCPSendRepeated>
 800bf5e:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d051      	beq.n	800c00a <prvTCPSendPacket+0xd6>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f005 fbbd 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
 800bf6e:	e04c      	b.n	800c00a <prvTCPSendPacket+0xd6>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d90c      	bls.n	800bf94 <prvTCPSendPacket+0x60>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800bf82:	461a      	mov	r2, r3
 800bf84:	4823      	ldr	r0, [pc, #140]	; (800c014 <prvTCPSendPacket+0xe0>)
 800bf86:	f7f4 fd25 	bl	80009d4 <vLoggingPrintf>
                                         pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800bf8a:	2108      	movs	r1, #8
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fe5b 	bl	800cc48 <vTCPStateChange>
 800bf92:	e03a      	b.n	800c00a <prvTCPSendPacket+0xd6>
            }
            else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf9a:	f003 0308 	and.w	r3, r3, #8
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d105      	bne.n	800bfb0 <prvTCPSendPacket+0x7c>
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 faa3 	bl	800c4f0 <prvTCPPrepareConnect>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d12c      	bne.n	800c00a <prvTCPSendPacket+0xd6>
            {
                ProtocolHeaders_t * pxProtocolHeaders;
                const UBaseType_t uxHeaderSize = ipSIZE_OF_IPv4_HEADER;
 800bfb0:	2314      	movs	r3, #20
 800bfb2:	617b      	str	r3, [r7, #20]

                /* Or else, if the connection has been prepared, or can be prepared
                 * now, proceed to send the packet with the SYN flag.
                 * prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
                 * the Ethernet address of the peer or the gateway is found. */
                pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxHeaderSize ] ) );
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	330e      	adds	r3, #14
 800bfb8:	3380      	adds	r3, #128	; 0x80
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	3302      	adds	r3, #2
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7ff fe3b 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800bfc6:	6138      	str	r0, [r7, #16]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fdc5 	bl	800cb5c <prvSetSynAckOptions>
 800bfd2:	60f8      	str	r0, [r7, #12]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3328      	adds	r3, #40	; 0x28
 800bfd8:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	3314      	adds	r3, #20
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bff4:	3301      	adds	r3, #1
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800bffe:	69fa      	ldr	r2, [r7, #28]
 800c000:	2300      	movs	r3, #0
 800c002:	2100      	movs	r1, #0
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f837 	bl	800c078 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800c00a:	69fb      	ldr	r3, [r7, #28]
    }
 800c00c:	4618      	mov	r0, r3
 800c00e:	3720      	adds	r7, #32
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	08014474 	.word	0x08014474

0800c018 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                       NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
 800c02e:	e019      	b.n	800c064 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 ff81 	bl	800cf3c <prvTCPPrepareSend>
 800c03a:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	dd14      	ble.n	800c06c <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	6819      	ldr	r1, [r3, #0]
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	2301      	movs	r3, #1
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f814 	bl	800c078 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    *ppxNetworkBuffer = NULL;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
                }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	4413      	add	r3, r2
 800c05c:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	3301      	adds	r3, #1
 800c062:	617b      	str	r3, [r7, #20]
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	2b07      	cmp	r3, #7
 800c068:	d9e2      	bls.n	800c030 <prvTCPSendRepeated+0x18>
 800c06a:	e000      	b.n	800c06e <prvTCPSendRepeated+0x56>
                break;
 800c06c:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800c06e:	693b      	ldr	r3, [r7, #16]
    }
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <prvTCPReturnPacket>:
 */
    static void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                                    NetworkBufferDescriptor_t * pxDescriptor,
                                    uint32_t ulLen,
                                    BaseType_t xReleaseAfterSend )
    {
 800c078:	b580      	push	{r7, lr}
 800c07a:	b0a0      	sub	sp, #128	; 0x80
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        BaseType_t xDoRelease = xReleaseAfterSend;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	67fb      	str	r3, [r7, #124]	; 0x7c
        EthernetHeader_t * pxEthernetHeader;
        uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
        const TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	66bb      	str	r3, [r7, #104]	; 0x68
        void * pvCopyDest;


        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 800c08e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10f      	bne.n	800c0b4 <prvTCPReturnPacket+0x3c>
        {
            pxNetworkBuffer = &xTempBuffer;
 800c094:	f107 0314 	add.w	r3, r7, #20
 800c098:	66bb      	str	r3, [r7, #104]	; 0x68

            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
 800c09a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c09c:	2200      	movs	r2, #0
 800c09e:	625a      	str	r2, [r3, #36]	; 0x24
                }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800c0a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0a8:	619a      	str	r2, [r3, #24]
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c0aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0ac:	2246      	movs	r2, #70	; 0x46
 800c0ae:	61da      	str	r2, [r3, #28]
            xDoRelease = pdFALSE;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                if( xDoRelease == pdFALSE )
 800c0b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10e      	bne.n	800c0d8 <prvTCPReturnPacket+0x60>
                {
                    pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 800c0ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c0c2:	f7fd f99b 	bl	80093fc <pxDuplicateNetworkBufferWithDescriptor>
 800c0c6:	66b8      	str	r0, [r7, #104]	; 0x68

                    if( pxNetworkBuffer == NULL )
 800c0c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <prvTCPReturnPacket+0x5c>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 800c0ce:	489b      	ldr	r0, [pc, #620]	; (800c33c <prvTCPReturnPacket+0x2c4>)
 800c0d0:	f7f4 fc80 	bl	80009d4 <vLoggingPrintf>
                    }

                    xDoRelease = pdTRUE;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	67fb      	str	r3, [r7, #124]	; 0x7c
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL )
 800c0d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f000 81bd 	beq.w	800c45a <prvTCPReturnPacket+0x3e2>
        #endif
        {
            /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800c0e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0e2:	699b      	ldr	r3, [r3, #24]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff fd93 	bl	800bc10 <vCastPointerTo_TCPPacket_t>
 800c0ea:	6638      	str	r0, [r7, #96]	; 0x60
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800c0ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0ee:	330e      	adds	r3, #14
 800c0f0:	65fb      	str	r3, [r7, #92]	; 0x5c
            pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800c0f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0f4:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f000 80f8 	beq.w	800c2ee <prvTCPReturnPacket+0x276>
            {
                /* Calculate the space in the RX buffer in order to advertise the
                 * size of this socket's reception window. */
                pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	33d8      	adds	r3, #216	; 0xd8
 800c102:	653b      	str	r3, [r7, #80]	; 0x50

                if( pxSocket->u.xTCP.rxStream != NULL )
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d006      	beq.n	800c11a <prvTCPReturnPacket+0xa2>
                {
                    /* An RX stream was created already, see how much space is
                     * available. */
                    ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c110:	4618      	mov	r0, r3
 800c112:	f7ff fd22 	bl	800bb5a <uxStreamBufferFrontSpace>
 800c116:	67b8      	str	r0, [r7, #120]	; 0x78
 800c118:	e002      	b.n	800c120 <prvTCPReturnPacket+0xa8>
                }
                else
                {
                    /* No RX stream has been created, the full stream size is
                     * available. */
                    ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c11e:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Take the minimum of the RX buffer space and the RX window size. */
                ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 800c120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c126:	4618      	mov	r0, r3
 800c128:	f7ff fcb6 	bl	800ba98 <FreeRTOS_min_uint32>
 800c12c:	6778      	str	r0, [r7, #116]	; 0x74

                if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c134:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d107      	bne.n	800c14e <prvTCPReturnPacket+0xd6>
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c144:	f003 0304 	and.w	r3, r3, #4
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <prvTCPReturnPacket+0xda>
                {
                    /* The low-water mark was reached, meaning there was little
                     * space left.  The socket will wait until the application has read
                     * or flushed the incoming data, and 'zero-window' will be
                     * advertised. */
                    ulSpace = 0U;
 800c14e:	2300      	movs	r3, #0
 800c150:	677b      	str	r3, [r7, #116]	; 0x74
                }

                /* If possible, advertise an RX window size of at least 1 MSS, otherwise
                 * the peer might start 'zero window probing', i.e. sending small packets
                 * (1, 2, 4, 8... bytes). */
                if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c158:	461a      	mov	r2, r3
 800c15a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d20a      	bcs.n	800c176 <prvTCPReturnPacket+0xfe>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c166:	461a      	mov	r2, r3
 800c168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d303      	bcc.n	800c176 <prvTCPReturnPacket+0xfe>
                {
                    ulSpace = pxSocket->u.xTCP.usCurMSS;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c174:	677b      	str	r3, [r7, #116]	; 0x74
                }

                /* Avoid overflow of the 16-bit win field. */
                #if ( ipconfigUSE_TCP_WIN != 0 )
                    {
                        ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c17c:	461a      	mov	r2, r3
 800c17e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c180:	40d3      	lsrs	r3, r2
 800c182:	66fb      	str	r3, [r7, #108]	; 0x6c
                    {
                        ulWinSize = ulSpace;
                    }
                #endif

                if( ulWinSize > 0xfffcUL )
 800c184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c186:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d902      	bls.n	800c194 <prvTCPReturnPacket+0x11c>
                {
                    ulWinSize = 0xfffcUL;
 800c18e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800c192:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800c194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c196:	b29b      	uxth	r3, r3
 800c198:	021b      	lsls	r3, r3, #8
 800c19a:	b21a      	sxth	r2, r3
 800c19c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	0a1b      	lsrs	r3, r3, #8
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	b21b      	sxth	r3, r3
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	b21b      	sxth	r3, r3
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1ae:	861a      	strh	r2, [r3, #48]	; 0x30

                /* The new window size has been advertised, switch off the flag. */
                pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c1b6:	f36f 0300 	bfc	r3, #0, #1
 800c1ba:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Later on, when deciding to delay an ACK, a precise estimate is needed
                 * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
                 * highest sequence number minus 1 that the socket will accept. */
                pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800c1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1c0:	691a      	ldr	r2, [r3, #16]
 800c1c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1c4:	441a      	add	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	645a      	str	r2, [r3, #68]	; 0x44

                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d02f      	beq.n	800c23a <prvTCPReturnPacket+0x1c2>
                    {
                        /* Sending a keep-alive packet, send the current sequence number
                         * minus 1, which will be recognised as a keep-alive packet and
                         * responded to by acknowledging the last byte. */
                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c1e0:	f36f 0341 	bfc	r3, #1, #1
 800c1e4:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                        pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c1ee:	f043 0304 	orr.w	r3, r3, #4
 800c1f2:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                        pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c1fc:	1e5a      	subs	r2, r3, #1
 800c1fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c200:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
                        pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800c204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c206:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c20a:	061a      	lsls	r2, r3, #24
 800c20c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c20e:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c212:	021b      	lsls	r3, r3, #8
 800c214:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c218:	431a      	orrs	r2, r3
 800c21a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c21c:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c220:	0a1b      	lsrs	r3, r3, #8
 800c222:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c226:	431a      	orrs	r2, r3
 800c228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c22a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c22e:	0e1b      	lsrs	r3, r3, #24
 800c230:	431a      	orrs	r2, r3
 800c232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c234:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c238:	e042      	b.n	800c2c0 <prvTCPReturnPacket+0x248>
                    }
                    else
                #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
                {
                    pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c240:	061a      	lsls	r2, r3, #24
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c248:	021b      	lsls	r3, r3, #8
 800c24a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c24e:	431a      	orrs	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c256:	0a1b      	lsrs	r3, r3, #8
 800c258:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c25c:	431a      	orrs	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c264:	0e1b      	lsrs	r3, r3, #24
 800c266:	431a      	orrs	r2, r3
 800c268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c26a:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

                    if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800c26e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c270:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c274:	f003 0301 	and.w	r3, r3, #1
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d021      	beq.n	800c2c0 <prvTCPReturnPacket+0x248>
                    {
                        /* Suppress FIN in case this packet carries earlier data to be
                         * retransmitted. */
                        uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3b28      	subs	r3, #40	; 0x28
 800c280:	64fb      	str	r3, [r7, #76]	; 0x4c

                        if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800c282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c288:	441a      	add	r2, r3
 800c28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28e:	429a      	cmp	r2, r3
 800c290:	d016      	beq.n	800c2c0 <prvTCPReturnPacket+0x248>
                        {
                            pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 800c292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c294:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c298:	f023 0301 	bic.w	r3, r3, #1
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                            FreeRTOS_debug_printf( ( "Suppress FIN for %lu + %lu < %lu\n",
 800c2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2aa:	69db      	ldr	r3, [r3, #28]
 800c2ac:	1ad1      	subs	r1, r2, r3
 800c2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b4:	69db      	ldr	r3, [r3, #28]
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2ba:	4821      	ldr	r0, [pc, #132]	; (800c340 <prvTCPReturnPacket+0x2c8>)
 800c2bc:	f7f4 fb8a 	bl	80009d4 <vLoggingPrintf>
                        }
                    }
                }

                /* Tell which sequence number is expected next time */
                pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800c2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	061a      	lsls	r2, r3, #24
 800c2c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	021b      	lsls	r3, r3, #8
 800c2cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c2d0:	431a      	orrs	r2, r3
 800c2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	0a1b      	lsrs	r3, r3, #8
 800c2d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	0e1b      	lsrs	r3, r3, #24
 800c2e4:	431a      	orrs	r2, r3
 800c2e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2e8:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800c2ec:	e00d      	b.n	800c30a <prvTCPReturnPacket+0x292>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800c2ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2f0:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c2f4:	657b      	str	r3, [r7, #84]	; 0x54
 800c2f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2f8:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800c2fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2fe:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c306:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800c30a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c30c:	2280      	movs	r2, #128	; 0x80
 800c30e:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	b29b      	uxth	r3, r3
 800c314:	021b      	lsls	r3, r3, #8
 800c316:	b29a      	uxth	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	0a1b      	lsrs	r3, r3, #8
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	4313      	orrs	r3, r2
 800c320:	b29a      	uxth	r2, r3
 800c322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c324:	805a      	strh	r2, [r3, #2]

            if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d003      	beq.n	800c334 <prvTCPReturnPacket+0x2bc>
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <prvTCPReturnPacket+0x2cc>)
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d109      	bne.n	800c348 <prvTCPReturnPacket+0x2d0>
            {
                /* When pxSocket is NULL, this function is called by prvTCPSendReset()
                * and the IP-addresses must be swapped.
                * Also swap the IP-addresses in case the IP-tack doesn't have an
                * IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ). */
                ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800c334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	673b      	str	r3, [r7, #112]	; 0x70
 800c33a:	e008      	b.n	800c34e <prvTCPReturnPacket+0x2d6>
 800c33c:	08014494 	.word	0x08014494
 800c340:	080144bc 	.word	0x080144bc
 800c344:	20000018 	.word	0x20000018
            }
            else
            {
                ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c348:	4b46      	ldr	r3, [pc, #280]	; (800c464 <prvTCPReturnPacket+0x3ec>)
 800c34a:	695b      	ldr	r3, [r3, #20]
 800c34c:	673b      	str	r3, [r7, #112]	; 0x70
            }

            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800c34e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c350:	68da      	ldr	r2, [r3, #12]
 800c352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c354:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800c356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c358:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c35a:	60da      	str	r2, [r3, #12]
            vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800c35c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c35e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c362:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c366:	021b      	lsls	r3, r3, #8
 800c368:	4313      	orrs	r3, r2
 800c36a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c36e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c370:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c372:	b29a      	uxth	r2, r3
 800c374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c376:	845a      	strh	r2, [r3, #34]	; 0x22
 800c378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c37a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800c37e:	849a      	strh	r2, [r3, #36]	; 0x24

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800c380:	4b39      	ldr	r3, [pc, #228]	; (800c468 <prvTCPReturnPacket+0x3f0>)
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	b21a      	sxth	r2, r3
 800c388:	4b37      	ldr	r3, [pc, #220]	; (800c468 <prvTCPReturnPacket+0x3f0>)
 800c38a:	881b      	ldrh	r3, [r3, #0]
 800c38c:	0a1b      	lsrs	r3, r3, #8
 800c38e:	b29b      	uxth	r3, r3
 800c390:	b21b      	sxth	r3, r3
 800c392:	4313      	orrs	r3, r2
 800c394:	b21b      	sxth	r3, r3
 800c396:	b29a      	uxth	r2, r3
 800c398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c39a:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800c39c:	4b32      	ldr	r3, [pc, #200]	; (800c468 <prvTCPReturnPacket+0x3f0>)
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	4b30      	ldr	r3, [pc, #192]	; (800c468 <prvTCPReturnPacket+0x3f0>)
 800c3a6:	801a      	strh	r2, [r3, #0]
            pxIPHeader->usFragmentOffset = 0U;
 800c3a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	719a      	strb	r2, [r3, #6]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	71da      	strb	r2, [r3, #7]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f103 020e 	add.w	r2, r3, #14
 800c3b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3ba:	61da      	str	r2, [r3, #28]
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
 800c3bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3be:	2200      	movs	r2, #0
 800c3c0:	625a      	str	r2, [r3, #36]	; 0x24
                }
            #endif

            /* Fill in the destination MAC addresses. */
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800c3c2:	6db8      	ldr	r0, [r7, #88]	; 0x58
                             ( const void * ) ( &( pxEthernetHeader->xSourceAddress ) ),
 800c3c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3c6:	3306      	adds	r3, #6
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800c3c8:	2206      	movs	r2, #6
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	f005 fa11 	bl	80117f2 <memcpy>
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            /* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
            pvCopySource = ipLOCAL_MAC_ADDRESS;
 800c3d0:	4b24      	ldr	r3, [pc, #144]	; (800c464 <prvTCPReturnPacket+0x3ec>)
 800c3d2:	647b      	str	r3, [r7, #68]	; 0x44
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800c3d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3d6:	3306      	adds	r3, #6
 800c3d8:	643b      	str	r3, [r7, #64]	; 0x40
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c3da:	2206      	movs	r2, #6
 800c3dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c3e0:	f005 fa07 	bl	80117f2 <memcpy>

            #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800c3e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3e6:	69db      	ldr	r3, [r3, #28]
 800c3e8:	2b3b      	cmp	r3, #59	; 0x3b
 800c3ea:	d812      	bhi.n	800c412 <prvTCPReturnPacket+0x39a>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800c3ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3ee:	69db      	ldr	r3, [r3, #28]
 800c3f0:	667b      	str	r3, [r7, #100]	; 0x64
 800c3f2:	e008      	b.n	800c406 <prvTCPReturnPacket+0x38e>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800c3f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3f6:	699a      	ldr	r2, [r3, #24]
 800c3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3fa:	4413      	add	r3, r2
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800c400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c402:	3301      	adds	r3, #1
 800c404:	667b      	str	r3, [r7, #100]	; 0x64
 800c406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c408:	2b3b      	cmp	r3, #59	; 0x3b
 800c40a:	ddf3      	ble.n	800c3f4 <prvTCPReturnPacket+0x37c>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800c40c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c40e:	223c      	movs	r2, #60	; 0x3c
 800c410:	61da      	str	r2, [r3, #28]
                }
            #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 800c412:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c414:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c416:	f004 f8b5 	bl	8010584 <xNetworkInterfaceOutput>

            if( xDoRelease == pdFALSE )
 800c41a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d11c      	bne.n	800c45a <prvTCPReturnPacket+0x3e2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800c420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c422:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c426:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c42a:	021b      	lsls	r3, r3, #8
 800c42c:	4313      	orrs	r3, r2
 800c42e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c432:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c434:	b29a      	uxth	r2, r3
 800c436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c438:	845a      	strh	r2, [r3, #34]	; 0x22
 800c43a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c43c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c43e:	849a      	strh	r2, [r3, #36]	; 0x24
                pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800c440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c442:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800c446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c448:	f8c3 201a 	str.w	r2, [r3, #26]
                ( void ) memcpy( ( void * ) ( pxEthernetHeader->xSourceAddress.ucBytes ), ( const void * ) ( pxEthernetHeader->xDestinationAddress.ucBytes ), ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c44c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c44e:	3306      	adds	r3, #6
 800c450:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c452:	2206      	movs	r2, #6
 800c454:	4618      	mov	r0, r3
 800c456:	f005 f9cc 	bl	80117f2 <memcpy>
            else
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    }
 800c45a:	bf00      	nop
 800c45c:	3780      	adds	r7, #128	; 0x80
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20000018 	.word	0x20000018
 800c468:	2002507c 	.word	0x2002507c

0800c46c <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    static void prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 800c46c:	b5b0      	push	{r4, r5, r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af02      	add	r7, sp, #8
 800c472:	6078      	str	r0, [r7, #4]
        if( xTCPWindowLoggingLevel != 0 )
 800c474:	4b1c      	ldr	r3, [pc, #112]	; (800c4e8 <prvTCPCreateWindow+0x7c>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d011      	beq.n	800c4a0 <prvTCPCreateWindow+0x34>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c482:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c486:	fb02 f103 	mul.w	r1, r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	4603      	mov	r3, r0
 800c49a:	4814      	ldr	r0, [pc, #80]	; (800c4ec <prvTCPCreateWindow+0x80>)
 800c49c:	f7f4 fa9a 	bl	80009d4 <vLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        vTCPWindowCreate(
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
            &pxSocket->u.xTCP.xTCPWindow,
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c4ac:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c4b0:	fb02 f103 	mul.w	r1, r2, r3
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c4ba:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c4be:	fb02 f403 	mul.w	r4, r2, r3
        vTCPWindowCreate(
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 50e8 	ldr.w	r5, [r3, #232]	; 0xe8
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
        vTCPWindowCreate(
 800c4d4:	9201      	str	r2, [sp, #4]
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	462b      	mov	r3, r5
 800c4da:	4622      	mov	r2, r4
 800c4dc:	f002 fd66 	bl	800efac <vTCPWindowCreate>
    }
 800c4e0:	bf00      	nop
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c4e8:	20025114 	.word	0x20025114
 800c4ec:	080144e0 	.word	0x080144e0

0800c4f0 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 800c4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4f2:	b093      	sub	sp, #76	; 0x4c
 800c4f4:	af06      	add	r7, sp, #24
 800c4f6:	6078      	str	r0, [r7, #4]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        eARPLookupResult_t eReturned;
        uint32_t ulRemoteIP;
        MACAddress_t xEthAddress;
        BaseType_t xReturn = pdTRUE;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulInitialSequenceNumber = 0;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	62bb      	str	r3, [r7, #40]	; 0x28

        #if ( ipconfigHAS_PRINTF != 0 )
            {
                /* Only necessary for nicer logging. */
                ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 800c500:	f107 030c 	add.w	r3, r7, #12
 800c504:	2206      	movs	r2, #6
 800c506:	2100      	movs	r1, #0
 800c508:	4618      	mov	r0, r3
 800c50a:	f005 f996 	bl	801183a <memset>
            }
        #endif /* ipconfigHAS_PRINTF != 0 */

        ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c512:	061a      	lsls	r2, r3, #24
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c518:	021b      	lsls	r3, r3, #8
 800c51a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c51e:	431a      	orrs	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c524:	0a1b      	lsrs	r3, r3, #8
 800c526:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c52a:	431a      	orrs	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c530:	0e1b      	lsrs	r3, r3, #24
 800c532:	4313      	orrs	r3, r2
 800c534:	617b      	str	r3, [r7, #20]

        /* Determine the ARP cache status for the requested IP address. */
        eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800c536:	f107 020c 	add.w	r2, r7, #12
 800c53a:	f107 0314 	add.w	r3, r7, #20
 800c53e:	4611      	mov	r1, r2
 800c540:	4618      	mov	r0, r3
 800c542:	f7fb fb2d 	bl	8007ba0 <eARPGetCacheEntry>
 800c546:	4603      	mov	r3, r0
 800c548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        switch( eReturned )
 800c54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c550:	2b01      	cmp	r3, #1
 800c552:	d037      	beq.n	800c5c4 <prvTCPPrepareConnect+0xd4>

            case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
            case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
            default:
                /* Count the number of times it could not find the ARP address. */
                pxSocket->u.xTCP.ucRepCount++;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c55a:	3301      	adds	r3, #1
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	061a      	lsls	r2, r3, #24
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	021b      	lsls	r3, r3, #8
 800c570:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c574:	431a      	orrs	r2, r3
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	0a1b      	lsrs	r3, r3, #8
 800c57a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c57e:	431a      	orrs	r2, r3
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	0e1b      	lsrs	r3, r3, #24
 800c584:	431a      	orrs	r2, r3
 800c586:	f897 e027 	ldrb.w	lr, [r7, #39]	; 0x27
 800c58a:	7b38      	ldrb	r0, [r7, #12]
 800c58c:	7b7c      	ldrb	r4, [r7, #13]
 800c58e:	7bbd      	ldrb	r5, [r7, #14]
 800c590:	7bfe      	ldrb	r6, [r7, #15]
 800c592:	f897 c010 	ldrb.w	ip, [r7, #16]
 800c596:	f8c7 c000 	str.w	ip, [r7]
 800c59a:	f897 c011 	ldrb.w	ip, [r7, #17]
 800c59e:	4663      	mov	r3, ip
 800c5a0:	9305      	str	r3, [sp, #20]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	9304      	str	r3, [sp, #16]
 800c5a6:	9603      	str	r6, [sp, #12]
 800c5a8:	9502      	str	r5, [sp, #8]
 800c5aa:	9401      	str	r4, [sp, #4]
 800c5ac:	9000      	str	r0, [sp, #0]
 800c5ae:	4673      	mov	r3, lr
 800c5b0:	4859      	ldr	r0, [pc, #356]	; (800c718 <prvTCPPrepareConnect+0x228>)
 800c5b2:	f7f4 fa0f 	bl	80009d4 <vLoggingPrintf>
                                         xEthAddress.ucBytes[ 3 ],
                                         xEthAddress.ucBytes[ 4 ],
                                         xEthAddress.ucBytes[ 5 ] ) );

                /* And issue a (new) ARP request */
                FreeRTOS_OutputARPRequest( ulRemoteIP );
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fb fc39 	bl	8007e30 <FreeRTOS_OutputARPRequest>
                xReturn = pdFALSE;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800c5c2:	e000      	b.n	800c5c6 <prvTCPPrepareConnect+0xd6>
                break;            /* We can now prepare the SYN packet. */
 800c5c4:	bf00      	nop
        }

        if( xReturn != pdFALSE )
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00f      	beq.n	800c5ec <prvTCPPrepareConnect+0xfc>
        {
            /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
            ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800c5cc:	4b53      	ldr	r3, [pc, #332]	; (800c71c <prvTCPPrepareConnect+0x22c>)
 800c5ce:	6958      	ldr	r0, [r3, #20]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c5dc:	f7f4 fa03 	bl	80009e6 <ulApplicationGetNextSequenceNumber>
 800c5e0:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                          pxSocket->usLocalPort,
                                                                          pxSocket->u.xTCP.ulRemoteIP,
                                                                          pxSocket->u.xTCP.usRemotePort );

            /* Check for a random number generation error. */
            if( ulInitialSequenceNumber == 0UL )
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d101      	bne.n	800c5ec <prvTCPPrepareConnect+0xfc>
            {
                xReturn = pdFALSE;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        if( xReturn != pdFALSE )
 800c5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f000 808d 	beq.w	800c70e <prvTCPPrepareConnect+0x21e>
            uint16_t usLength;

            /* The MAC-address of the peer (or gateway) has been found,
             * now prepare the initial TCP packet and some fields in the socket. Map
             * the buffer onto the TCPPacket_t struct to easily access it's field. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3382      	adds	r3, #130	; 0x82
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7ff fb09 	bl	800bc10 <vCastPointerTo_TCPPacket_t>
 800c5fe:	6238      	str	r0, [r7, #32]
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800c600:	6a3b      	ldr	r3, [r7, #32]
 800c602:	330e      	adds	r3, #14
 800c604:	61fb      	str	r3, [r7, #28]

            /* reset the retry counter to zero. */
            pxSocket->u.xTCP.ucRepCount = 0U;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

            /* And remember that the connect/SYN data are prepared. */
            pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c614:	f043 0308 	orr.w	r3, r3, #8
 800c618:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

            /* Now that the Ethernet address is known, the initial packet can be
             * prepared. */
            ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3382      	adds	r3, #130	; 0x82
 800c620:	2246      	movs	r2, #70	; 0x46
 800c622:	2100      	movs	r1, #0
 800c624:	4618      	mov	r0, r3
 800c626:	f005 f908 	bl	801183a <memset>

            /* Write the Ethernet address in Source, because it will be swapped by
             * prvTCPReturnPacket(). */
            ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 800c62a:	6a3b      	ldr	r3, [r7, #32]
 800c62c:	3306      	adds	r3, #6
 800c62e:	461a      	mov	r2, r3
 800c630:	f107 030c 	add.w	r3, r7, #12
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	6010      	str	r0, [r2, #0]
 800c638:	889b      	ldrh	r3, [r3, #4]
 800c63a:	8093      	strh	r3, [r2, #4]

            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	2200      	movs	r2, #0
 800c640:	f042 0208 	orr.w	r2, r2, #8
 800c644:	731a      	strb	r2, [r3, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionHeaderLength = 0x45U;
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	2245      	movs	r2, #69	; 0x45
 800c64e:	701a      	strb	r2, [r3, #0]
            usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800c650:	2338      	movs	r3, #56	; 0x38
 800c652:	837b      	strh	r3, [r7, #26]
            pxIPHeader->usLength = FreeRTOS_htons( usLength );
 800c654:	8b7b      	ldrh	r3, [r7, #26]
 800c656:	021b      	lsls	r3, r3, #8
 800c658:	b21a      	sxth	r2, r3
 800c65a:	8b7b      	ldrh	r3, [r7, #26]
 800c65c:	0a1b      	lsrs	r3, r3, #8
 800c65e:	b29b      	uxth	r3, r3
 800c660:	b21b      	sxth	r3, r3
 800c662:	4313      	orrs	r3, r2
 800c664:	b21b      	sxth	r3, r3
 800c666:	b29a      	uxth	r2, r3
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	2280      	movs	r2, #128	; 0x80
 800c670:	721a      	strb	r2, [r3, #8]

            pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	2206      	movs	r2, #6
 800c676:	725a      	strb	r2, [r3, #9]

            /* Addresses and ports will be stored swapped because prvTCPReturnPacket
             * will swap them back while replying. */
            pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c678:	4b28      	ldr	r3, [pc, #160]	; (800c71c <prvTCPPrepareConnect+0x22c>)
 800c67a:	695a      	ldr	r2, [r3, #20]
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c684:	061a      	lsls	r2, r3, #24
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68a:	021b      	lsls	r3, r3, #8
 800c68c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c690:	431a      	orrs	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c696:	0a1b      	lsrs	r3, r3, #8
 800c698:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c69c:	431a      	orrs	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a2:	0e1b      	lsrs	r3, r3, #24
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	60da      	str	r2, [r3, #12]

            pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c6ae:	021b      	lsls	r3, r3, #8
 800c6b0:	b21a      	sxth	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c6b6:	0a1b      	lsrs	r3, r3, #8
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	b21b      	sxth	r3, r3
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	b21b      	sxth	r3, r3
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	6a3b      	ldr	r3, [r7, #32]
 800c6c4:	845a      	strh	r2, [r3, #34]	; 0x22
            pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c6ca:	021b      	lsls	r3, r3, #8
 800c6cc:	b21a      	sxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c6d2:	0a1b      	lsrs	r3, r3, #8
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	b21b      	sxth	r3, r3
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	b21b      	sxth	r3, r3
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	6a3b      	ldr	r3, [r7, #32]
 800c6e0:	849a      	strh	r2, [r3, #36]	; 0x24

            /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
             * isn't known yet. */
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

            /* Start with ISN (Initial Sequence Number). */
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
             * the high nibble of the TCP offset field. */
            pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	2250      	movs	r2, #80	; 0x50
 800c6f6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Only set the SYN flag. */
            pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

            /* Set the values of usInitMSS / usCurMSS for this socket. */
            prvSocketSetMSS( pxSocket );
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f001 fdc8 	bl	800e298 <prvSocketSetMSS>

            /* The initial sequence numbers at our side are known.  Later
             * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
             * first wait for a SYN+ACK reply. */
            prvTCPCreateWindow( pxSocket );
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff feaf 	bl	800c46c <prvTCPCreateWindow>
        }

        return xReturn;
 800c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800c710:	4618      	mov	r0, r3
 800c712:	3734      	adds	r7, #52	; 0x34
 800c714:	46bd      	mov	sp, r7
 800c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c718:	08014518 	.word	0x08014518
 800c71c:	20000018 	.word	0x20000018

0800c720 <prvTCPFlagMeaning>:
 * @param[in] xFlags: The TCP flags.
 *
 * @return The string containing the flags.
 */
        static const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 800c720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c722:	b08d      	sub	sp, #52	; 0x34
 800c724:	af08      	add	r7, sp, #32
 800c726:	6078      	str	r0, [r7, #4]
            static char retString[ 10 ];
            size_t uxFlags = ( size_t ) xFlags;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 800c732:	2b00      	cmp	r3, #0
 800c734:	d002      	beq.n	800c73c <prvTCPFlagMeaning+0x1c>
 800c736:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800c73a:	e001      	b.n	800c740 <prvTCPFlagMeaning+0x20>
 800c73c:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <prvTCPFlagMeaning+0x2e>
 800c74a:	2353      	movs	r3, #83	; 0x53
 800c74c:	e000      	b.n	800c750 <prvTCPFlagMeaning+0x30>
 800c74e:	232e      	movs	r3, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 800c756:	2a00      	cmp	r2, #0
 800c758:	d001      	beq.n	800c75e <prvTCPFlagMeaning+0x3e>
 800c75a:	2252      	movs	r2, #82	; 0x52
 800c75c:	e000      	b.n	800c760 <prvTCPFlagMeaning+0x40>
 800c75e:	222e      	movs	r2, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 800c760:	68f9      	ldr	r1, [r7, #12]
 800c762:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 800c766:	2900      	cmp	r1, #0
 800c768:	d001      	beq.n	800c76e <prvTCPFlagMeaning+0x4e>
 800c76a:	2150      	movs	r1, #80	; 0x50
 800c76c:	e000      	b.n	800c770 <prvTCPFlagMeaning+0x50>
 800c76e:	212e      	movs	r1, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 800c776:	2800      	cmp	r0, #0
 800c778:	d001      	beq.n	800c77e <prvTCPFlagMeaning+0x5e>
 800c77a:	2041      	movs	r0, #65	; 0x41
 800c77c:	e000      	b.n	800c780 <prvTCPFlagMeaning+0x60>
 800c77e:	202e      	movs	r0, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 800c780:	68fc      	ldr	r4, [r7, #12]
 800c782:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 800c786:	2c00      	cmp	r4, #0
 800c788:	d001      	beq.n	800c78e <prvTCPFlagMeaning+0x6e>
 800c78a:	2455      	movs	r4, #85	; 0x55
 800c78c:	e000      	b.n	800c790 <prvTCPFlagMeaning+0x70>
 800c78e:	242e      	movs	r4, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 800c790:	68fd      	ldr	r5, [r7, #12]
 800c792:	f005 0540 	and.w	r5, r5, #64	; 0x40
            ( void ) snprintf( retString,
 800c796:	2d00      	cmp	r5, #0
 800c798:	d001      	beq.n	800c79e <prvTCPFlagMeaning+0x7e>
 800c79a:	2545      	movs	r5, #69	; 0x45
 800c79c:	e000      	b.n	800c7a0 <prvTCPFlagMeaning+0x80>
 800c79e:	252e      	movs	r5, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 800c7a0:	68fe      	ldr	r6, [r7, #12]
 800c7a2:	f006 0680 	and.w	r6, r6, #128	; 0x80
            ( void ) snprintf( retString,
 800c7a6:	2e00      	cmp	r6, #0
 800c7a8:	d001      	beq.n	800c7ae <prvTCPFlagMeaning+0x8e>
 800c7aa:	2643      	movs	r6, #67	; 0x43
 800c7ac:	e000      	b.n	800c7b0 <prvTCPFlagMeaning+0x90>
 800c7ae:	262e      	movs	r6, #46	; 0x2e
 800c7b0:	9606      	str	r6, [sp, #24]
 800c7b2:	9505      	str	r5, [sp, #20]
 800c7b4:	9404      	str	r4, [sp, #16]
 800c7b6:	9003      	str	r0, [sp, #12]
 800c7b8:	9102      	str	r1, [sp, #8]
 800c7ba:	9201      	str	r2, [sp, #4]
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	4663      	mov	r3, ip
 800c7c0:	4a04      	ldr	r2, [pc, #16]	; (800c7d4 <prvTCPFlagMeaning+0xb4>)
 800c7c2:	210a      	movs	r1, #10
 800c7c4:	4804      	ldr	r0, [pc, #16]	; (800c7d8 <prvTCPFlagMeaning+0xb8>)
 800c7c6:	f005 fd51 	bl	801226c <sniprintf>
            return retString;
 800c7ca:	4b03      	ldr	r3, [pc, #12]	; (800c7d8 <prvTCPFlagMeaning+0xb8>)
        }
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3714      	adds	r7, #20
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7d4:	0801455c 	.word	0x0801455c
 800c7d8:	200250f0 	.word	0x200250f0

0800c7dc <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    _static void prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                  const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b08c      	sub	sp, #48	; 0x30
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer );
 800c7e6:	2322      	movs	r3, #34	; 0x22
 800c7e8:	623b      	str	r3, [r7, #32]
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	699a      	ldr	r2, [r3, #24]
 800c7ee:	6a3b      	ldr	r3, [r7, #32]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7ff fa22 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800c7f8:	61f8      	str	r0, [r7, #28]
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ( sizeof( TCPHeader_t ) - sizeof( pxTCPHeader->ucOptdata ) );
 800c7fa:	6a3b      	ldr	r3, [r7, #32]
 800c7fc:	3314      	adds	r3, #20
 800c7fe:	61bb      	str	r3, [r7, #24]
        size_t uxOptionsLength;
        size_t uxResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	617b      	str	r3, [r7, #20]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	3314      	adds	r3, #20
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	7b1b      	ldrb	r3, [r3, #12]
 800c80e:	2b50      	cmp	r3, #80	; 0x50
 800c810:	d93e      	bls.n	800c890 <prvCheckOptions+0xb4>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	7b1b      	ldrb	r3, [r3, #12]
 800c816:	091b      	lsrs	r3, r3, #4
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	3b05      	subs	r3, #5
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	74fb      	strb	r3, [r7, #19]
            uxOptionsLength = ( size_t ) ucLength;
 800c822:	7cfb      	ldrb	r3, [r7, #19]
 800c824:	627b      	str	r3, [r7, #36]	; 0x24

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	69ba      	ldr	r2, [r7, #24]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d22f      	bcs.n	800c890 <prvCheckOptions+0xb4>
            {
                /* Validate options size calculation. */
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	69db      	ldr	r3, [r3, #28]
 800c834:	69ba      	ldr	r2, [r7, #24]
 800c836:	429a      	cmp	r2, r3
 800c838:	d22a      	bcs.n	800c890 <prvCheckOptions+0xb4>
                    ( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	69da      	ldr	r2, [r3, #28]
 800c83e:	69bb      	ldr	r3, [r7, #24]
 800c840:	1ad3      	subs	r3, r2, r3
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800c842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c844:	429a      	cmp	r2, r3
 800c846:	d823      	bhi.n	800c890 <prvCheckOptions+0xb4>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	7b5b      	ldrb	r3, [r3, #13]
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d002      	beq.n	800c85a <prvCheckOptions+0x7e>
                    {
                        xHasSYNFlag = pdTRUE;
 800c854:	2301      	movs	r3, #1
 800c856:	62bb      	str	r3, [r7, #40]	; 0x28
 800c858:	e001      	b.n	800c85e <prvCheckOptions+0x82>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 800c85a:	2300      	movs	r3, #0
 800c85c:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	2b00      	cmp	r3, #0
 800c862:	d012      	beq.n	800c88a <prvCheckOptions+0xae>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        uxResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c86a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c86c:	f000 f814 	bl	800c898 <prvSingleStepTCPHeaderOptions>
 800c870:	60f8      	str	r0, [r7, #12]

                        if( uxResult == 0UL )
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00a      	beq.n	800c88e <prvCheckOptions+0xb2>
                        {
                            break;
                        }

                        uxOptionsLength -= uxResult;
 800c878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	627b      	str	r3, [r7, #36]	; 0x24
                        pucPtr = &( pucPtr[ uxResult ] );
 800c880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	4413      	add	r3, r2
 800c886:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if( uxOptionsLength == 0U )
 800c888:	e7e9      	b.n	800c85e <prvCheckOptions+0x82>
                            break;
 800c88a:	bf00      	nop
 800c88c:	e000      	b.n	800c890 <prvCheckOptions+0xb4>
                            break;
 800c88e:	bf00      	nop
                    }
                }
            }
        }
    }
 800c890:	bf00      	nop
 800c892:	3730      	adds	r7, #48	; 0x30
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <prvSingleStepTCPHeaderOptions>:
 */
    _static size_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 800c898:	b580      	push	{r7, lr}
 800c89a:	b08a      	sub	sp, #40	; 0x28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
 800c8a4:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	61bb      	str	r3, [r7, #24]
        uint8_t ucLen;
        size_t uxIndex;
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	33d8      	adds	r3, #216	; 0xd8
 800c8ae:	617b      	str	r3, [r7, #20]
        BaseType_t xReturn = pdFALSE;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	61fb      	str	r3, [r7, #28]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d102      	bne.n	800c8c2 <prvSingleStepTCPHeaderOptions+0x2a>
        {
            /* End of options. */
            uxIndex = 0U;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	623b      	str	r3, [r7, #32]
 800c8c0:	e0d2      	b.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d102      	bne.n	800c8d0 <prvSingleStepTCPHeaderOptions+0x38>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            uxIndex = 1U;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	623b      	str	r3, [r7, #32]
 800c8ce:	e0cb      	b.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
        }
        else if( uxRemainingOptionsBytes < 2U )
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d802      	bhi.n	800c8dc <prvSingleStepTCPHeaderOptions+0x44>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            uxIndex = 0U;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	e0c5      	b.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b03      	cmp	r3, #3
 800c8e2:	d11c      	bne.n	800c91e <prvSingleStepTCPHeaderOptions+0x86>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d904      	bls.n	800c8f4 <prvSingleStepTCPHeaderOptions+0x5c>
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	d002      	beq.n	800c8fa <prvSingleStepTCPHeaderOptions+0x62>
                {
                    uxIndex = 0U;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	623b      	str	r3, [r7, #32]
 800c8f8:	e0b6      	b.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00b      	beq.n	800c918 <prvSingleStepTCPHeaderOptions+0x80>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	789a      	ldrb	r2, [r3, #2]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800c910:	f043 0310 	orr.w	r3, r3, #16
 800c914:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                    }

                    uxIndex = tcpTCP_OPT_WSOPT_LEN;
 800c918:	2303      	movs	r3, #3
 800c91a:	623b      	str	r3, [r7, #32]
 800c91c:	e0a4      	b.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	2b02      	cmp	r3, #2
 800c924:	d16e      	bne.n	800ca04 <prvSingleStepTCPHeaderOptions+0x16c>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	2b03      	cmp	r3, #3
 800c92a:	d904      	bls.n	800c936 <prvSingleStepTCPHeaderOptions+0x9e>
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	3301      	adds	r3, #1
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	2b04      	cmp	r3, #4
 800c934:	d002      	beq.n	800c93c <prvSingleStepTCPHeaderOptions+0xa4>
            {
                uxIndex = 0U;
 800c936:	2300      	movs	r3, #0
 800c938:	623b      	str	r3, [r7, #32]
 800c93a:	e095      	b.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	3302      	adds	r3, #2
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff f9b7 	bl	800bcb4 <usChar2u16>
 800c946:	4603      	mov	r3, r0
 800c948:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c950:	461a      	mov	r2, r3
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	4293      	cmp	r3, r2
 800c956:	d00f      	beq.n	800c978 <prvSingleStepTCPHeaderOptions+0xe0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d104      	bne.n	800c968 <prvSingleStepTCPHeaderOptions+0xd0>
                    {
                        uxIndex = 0U;
 800c95e:	2300      	movs	r3, #0
 800c960:	623b      	str	r3, [r7, #32]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 800c962:	2301      	movs	r3, #1
 800c964:	61fb      	str	r3, [r7, #28]
 800c966:	e007      	b.n	800c978 <prvSingleStepTCPHeaderOptions+0xe0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c96e:	693a      	ldr	r2, [r7, #16]
 800c970:	4619      	mov	r1, r3
 800c972:	4840      	ldr	r0, [pc, #256]	; (800ca74 <prvSingleStepTCPHeaderOptions+0x1dc>)
 800c974:	f7f4 f82e 	bl	80009d4 <vLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d174      	bne.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
                {
                    if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800c984:	461a      	mov	r2, r3
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	4293      	cmp	r3, r2
 800c98a:	d238      	bcs.n	800c9fe <prvSingleStepTCPHeaderOptions+0x166>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800c992:	f043 0301 	orr.w	r3, r3, #1
 800c996:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                        if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d20c      	bcs.n	800c9c2 <prvSingleStepTCPHeaderOptions+0x12a>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c9ae:	693a      	ldr	r2, [r7, #16]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	4831      	ldr	r0, [pc, #196]	; (800ca78 <prvSingleStepTCPHeaderOptions+0x1e0>)
 800c9b4:	f7f4 f80e 	bl	80009d4 <vLoggingPrintf>
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	fb02 f203 	mul.w	r2, r2, r3
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                    }

                    uxIndex = tcpTCP_OPT_MSS_LEN;
 800c9fe:	2304      	movs	r3, #4
 800ca00:	623b      	str	r3, [r7, #32]
 800ca02:	e031      	b.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	785b      	ldrb	r3, [r3, #1]
 800ca08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            uxIndex = 0U;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	623b      	str	r3, [r7, #32]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 800ca10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d927      	bls.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
 800ca18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca1c:	69ba      	ldr	r2, [r7, #24]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d322      	bcc.n	800ca68 <prvSingleStepTCPHeaderOptions+0x1d0>
                    {
                        /* Selective ACK: the peer has received a packet but it is missing
                         * earlier packets. At least this packet does not need retransmission
                         * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                         */
                        if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	2b05      	cmp	r3, #5
 800ca28:	d119      	bne.n	800ca5e <prvSingleStepTCPHeaderOptions+0x1c6>
                        {
                            ucLen -= 2U;
 800ca2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca2e:	3b02      	subs	r3, #2
 800ca30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            uxIndex += 2U;
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	3302      	adds	r3, #2
 800ca38:	623b      	str	r3, [r7, #32]

                            while( ucLen >= ( uint8_t ) 8U )
 800ca3a:	e00c      	b.n	800ca56 <prvSingleStepTCPHeaderOptions+0x1be>
                            {
                                prvReadSackOption( pucPtr, uxIndex, pxSocket );
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	6a39      	ldr	r1, [r7, #32]
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f000 f81b 	bl	800ca7c <prvReadSackOption>
                                uxIndex += 8U;
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	3308      	adds	r3, #8
 800ca4a:	623b      	str	r3, [r7, #32]
                                ucLen -= 8U;
 800ca4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca50:	3b08      	subs	r3, #8
 800ca52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            while( ucLen >= ( uint8_t ) 8U )
 800ca56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca5a:	2b07      	cmp	r3, #7
 800ca5c:	d8ee      	bhi.n	800ca3c <prvSingleStepTCPHeaderOptions+0x1a4>
                            /* ucLen should be 0 by now. */
                        }
                    }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                uxIndex += ( size_t ) ucLen;
 800ca5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca62:	6a3a      	ldr	r2, [r7, #32]
 800ca64:	4413      	add	r3, r2
 800ca66:	623b      	str	r3, [r7, #32]
            }
        }
        return uxIndex;
 800ca68:	6a3b      	ldr	r3, [r7, #32]
    }
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3728      	adds	r7, #40	; 0x28
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	08014570 	.word	0x08014570
 800ca78:	08014588 	.word	0x08014588

0800ca7c <prvReadSackOption>:
 * @param[in] pxSocket: Socket handling the TCP connection.
 */
        _static void prvReadSackOption( const uint8_t * const pucPtr,
                                        size_t uxIndex,
                                        FreeRTOS_Socket_t * const pxSocket )
        {
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08a      	sub	sp, #40	; 0x28
 800ca80:	af02      	add	r7, sp, #8
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7ff f8f5 	bl	800bc7e <ulChar2u32>
 800ca94:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	3304      	adds	r3, #4
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7ff f8ed 	bl	800bc7e <ulChar2u32>
 800caa4:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	33d8      	adds	r3, #216	; 0xd8
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	69f9      	ldr	r1, [r7, #28]
 800caae:	4618      	mov	r0, r3
 800cab0:	f003 f994 	bl	800fddc <ulTCPWindowTxSack>
 800cab4:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d01d      	beq.n	800cafa <prvReadSackOption+0x7e>
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d01a      	beq.n	800cafa <prvReadSackOption+0x7e>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cac8:	2300      	movs	r3, #0
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	2200      	movs	r2, #0
 800cad0:	2100      	movs	r1, #0
 800cad2:	f7fe ff5d 	bl	800b990 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f043 0202 	orr.w	r2, r3, #2
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae6:	f003 0302 	and.w	r3, r3, #2
 800caea:	2b00      	cmp	r3, #0
 800caec:	d005      	beq.n	800cafa <prvReadSackOption+0x7e>
                        {
                            /* The field 'xEventBits' is used to store regular socket events
                             * (at most 8), as well as 'select events', which will be left-shifted.
                             */
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	601a      	str	r2, [r3, #0]
                            pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
                        }
                    }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 800cafa:	bf00      	nop
 800cafc:	3720      	adds	r7, #32
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
	...

0800cb04 <prvWinScaleFactor>:
 * @param[in] pxSocket: The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800cb18:	fb02 f303 	mul.w	r3, r2, r3
 800cb1c:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffUL )
 800cb22:	e005      	b.n	800cb30 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	085b      	lsrs	r3, r3, #1
 800cb28:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 800cb2a:	7afb      	ldrb	r3, [r7, #11]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffUL )
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb36:	d2f5      	bcs.n	800cb24 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cb44:	461a      	mov	r2, r3
 800cb46:	7afb      	ldrb	r3, [r7, #11]
 800cb48:	4803      	ldr	r0, [pc, #12]	; (800cb58 <prvWinScaleFactor+0x54>)
 800cb4a:	f7f3 ff43 	bl	80009d4 <vLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     ( unsigned ) pxSocket->u.xTCP.usInitMSS,
                                     ucFactor ) );

            return ucFactor;
 800cb4e:	7afb      	ldrb	r3, [r7, #11]
        }
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	080145a0 	.word	0x080145a0

0800cb5c <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                            TCPHeader_t * pxTCPHeader )
    {
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cb6c:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2202      	movs	r2, #2
 800cb72:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2204      	movs	r2, #4
 800cb78:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800cb7a:	89fb      	ldrh	r3, [r7, #14]
 800cb7c:	0a1b      	lsrs	r3, r3, #8
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 800cb86:	89fb      	ldrh	r3, [r7, #14]
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7ff ffb8 	bl	800cb04 <prvWinScaleFactor>
 800cb94:	4603      	mov	r3, r0
 800cb96:	461a      	mov	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

                pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2201      	movs	r2, #1
 800cba2:	761a      	strb	r2, [r3, #24]
                pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2203      	movs	r2, #3
 800cba8:	765a      	strb	r2, [r3, #25]
                pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2203      	movs	r2, #3
 800cbae:	769a      	strb	r2, [r3, #26]
                pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	76da      	strb	r2, [r3, #27]
                uxOptionsLength = 8U;
 800cbba:	2308      	movs	r3, #8
 800cbbc:	60bb      	str	r3, [r7, #8]
            }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	3314      	adds	r3, #20
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	701a      	strb	r2, [r3, #0]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	683a      	ldr	r2, [r7, #0]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	3302      	adds	r3, #2
 800cbda:	683a      	ldr	r2, [r7, #0]
 800cbdc:	4413      	add	r3, r2
 800cbde:	2204      	movs	r2, #4
 800cbe0:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	3303      	adds	r3, #3
 800cbe6:	683a      	ldr	r2, [r7, #0]
 800cbe8:	4413      	add	r3, r2
 800cbea:	2202      	movs	r2, #2
 800cbec:	751a      	strb	r2, [r3, #20]
                uxOptionsLength += 4U;
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 800cbf4:	68bb      	ldr	r3, [r7, #8]
    }
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    static void prvTCPTouchSocket( FreeRTOS_Socket_t * pxSocket )
    {
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b082      	sub	sp, #8
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800cc06:	f7f9 f871 	bl	8005cec <xTaskGetTickCount>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	661a      	str	r2, [r3, #96]	; 0x60
            }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            {
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cc16:	f36f 0382 	bfc	r3, #2, #1
 800cc1a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800cc1e:	687a      	ldr	r2, [r7, #4]
 800cc20:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800cc24:	f36f 0341 	bfc	r3, #1, #1
 800cc28:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800cc34:	f7f9 f85a 	bl	8005cec <xTaskGetTickCount>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	65da      	str	r2, [r3, #92]	; 0x5c
            }
        #endif

        ( void ) pxSocket;
    }
 800cc3e:	bf00      	nop
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
	...

0800cc48 <vTCPStateChange>:
 * @param[in] pxSocket: The socket whose state we are trying to change.
 * @param[in] eTCPState: The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 800cc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4c:	b088      	sub	sp, #32
 800cc4e:	af02      	add	r7, sp, #8
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	460b      	mov	r3, r1
 800cc54:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = NULL;
 800cc56:	2300      	movs	r3, #0
 800cc58:	617b      	str	r3, [r7, #20]
        BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cc60:	2b04      	cmp	r3, #4
 800cc62:	d906      	bls.n	800cc72 <vTCPStateChange+0x2a>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cc6a:	2b08      	cmp	r3, #8
 800cc6c:	d001      	beq.n	800cc72 <vTCPStateChange+0x2a>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e000      	b.n	800cc74 <vTCPStateChange+0x2c>
 800cc72:	2300      	movs	r3, #0
 800cc74:	613b      	str	r3, [r7, #16]
        BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800cc76:	78fb      	ldrb	r3, [r7, #3]
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d904      	bls.n	800cc86 <vTCPStateChange+0x3e>
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	2b08      	cmp	r3, #8
 800cc80:	d001      	beq.n	800cc86 <vTCPStateChange+0x3e>
 800cc82:	2301      	movs	r3, #1
 800cc84:	e000      	b.n	800cc88 <vTCPStateChange+0x40>
 800cc86:	2300      	movs	r3, #0
 800cc88:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            BaseType_t xPreviousState = ( BaseType_t ) pxSocket->u.xTCP.ucTCPState;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cc90:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
        #endif

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	f000 8082 	beq.w	800cda0 <vTCPStateChange+0x158>
        {
            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d05e      	beq.n	800cd60 <vTCPStateChange+0x118>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cca8:	f003 0304 	and.w	r3, r3, #4
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d043      	beq.n	800cd3a <vTCPStateChange+0xf2>
                {
                    /* Now that it is connected, find it's parent. */
                    if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccb8:	f003 0308 	and.w	r3, r3, #8
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d002      	beq.n	800ccc8 <vTCPStateChange+0x80>
                    {
                        xParent = pxSocket;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	617b      	str	r3, [r7, #20]
 800ccc6:	e00a      	b.n	800ccde <vTCPStateChange+0x96>
                    }
                    else
                    {
                        xParent = pxSocket->u.xTCP.pxPeerSocket;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cccc:	617b      	str	r3, [r7, #20]
                        configASSERT( xParent != NULL );
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d104      	bne.n	800ccde <vTCPStateChange+0x96>
 800ccd4:	495d      	ldr	r1, [pc, #372]	; (800ce4c <vTCPStateChange+0x204>)
 800ccd6:	f240 60c4 	movw	r0, #1732	; 0x6c4
 800ccda:	f7f3 fea4 	bl	8000a26 <vAssertCalled>
                    }

                    if( xParent != NULL )
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d018      	beq.n	800cd16 <vTCPStateChange+0xce>
                    {
                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <vTCPStateChange+0xaa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	655a      	str	r2, [r3, #84]	; 0x54
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f043 0204 	orr.w	r2, r3, #4
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                            {
                                /* Library support FreeRTOS_select().  Receiving a new
                                 * connection is being translated as a READ event. */
                                if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd02:	f003 0301 	and.w	r3, r3, #1
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d005      	beq.n	800cd16 <vTCPStateChange+0xce>
                                {
                                    xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	601a      	str	r2, [r3, #0]
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cd22:	f36f 0382 	bfc	r3, #2, #1
 800cd26:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cd30:	f043 0302 	orr.w	r3, r3, #2
 800cd34:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800cd38:	e024      	b.n	800cd84 <vTCPStateChange+0x13c>
                }
                else
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f043 0208 	orr.w	r2, r3, #8
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	f003 0302 	and.w	r3, r3, #2
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d018      	beq.n	800cd84 <vTCPStateChange+0x13c>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	e011      	b.n	800cd84 <vTCPStateChange+0x13c>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting a semaphore. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f043 0220 	orr.w	r2, r3, #32
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	f003 0304 	and.w	r3, r3, #4
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d005      	beq.n	800cd84 <vTCPStateChange+0x13c>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	601a      	str	r2, [r3, #0]
                        xConnected = pxSocket;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fe ffa8 	bl	800bce0 <prvTCPSocketIsActive>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d125      	bne.n	800cde2 <vTCPStateChange+0x19a>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cd9e:	e020      	b.n	800cde2 <vTCPStateChange+0x19a>
            }
        }
        else
        {
            if( ( ( BaseType_t ) eTCPState ) == ( ( BaseType_t ) eCLOSED ) )
 800cda0:	78fb      	ldrb	r3, [r7, #3]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d11d      	bne.n	800cde2 <vTCPStateChange+0x19a>
            {
                /* Socket goes to status eCLOSED because of a RST.
                 * When nobody owns the socket yet, delete it. */
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cdac:	f003 0304 	and.w	r3, r3, #4
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d107      	bne.n	800cdc6 <vTCPStateChange+0x17e>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cdbc:	f003 0302 	and.w	r3, r3, #2
 800cdc0:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00d      	beq.n	800cde2 <vTCPStateChange+0x19a>
                {
                    FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
 800cdc6:	4822      	ldr	r0, [pc, #136]	; (800ce50 <vTCPStateChange+0x208>)
 800cdc8:	f7f3 fe04 	bl	80009d4 <vLoggingPrintf>

                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cdd2:	f003 0308 	and.w	r3, r3, #8
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d102      	bne.n	800cde2 <vTCPStateChange+0x19a>
                    {
                        ( void ) FreeRTOS_closesocket( pxSocket );
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7fd fd6f 	bl	800a8c0 <FreeRTOS_closesocket>
                }
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	78fa      	ldrb	r2, [r7, #3]
 800cde6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7ff ff07 	bl	800cbfe <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
            {
                if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800cdf0:	4b18      	ldr	r3, [pc, #96]	; (800ce54 <vTCPStateChange+0x20c>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	db1d      	blt.n	800ce34 <vTCPStateChange+0x1ec>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cdfc:	2b17      	cmp	r3, #23
 800cdfe:	d019      	beq.n	800ce34 <vTCPStateChange+0x1ec>
                {
                    FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce04:	461e      	mov	r6, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ce0e:	4698      	mov	r8, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f001 fdca 	bl	800e9ac <FreeRTOS_GetTCPStateName>
 800ce18:	4605      	mov	r5, r0
 800ce1a:	78fb      	ldrb	r3, [r7, #3]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f001 fdc5 	bl	800e9ac <FreeRTOS_GetTCPStateName>
 800ce22:	4603      	mov	r3, r0
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	9500      	str	r5, [sp, #0]
 800ce28:	4643      	mov	r3, r8
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	480a      	ldr	r0, [pc, #40]	; (800ce58 <vTCPStateChange+0x210>)
 800ce30:	f7f3 fdd0 	bl	80009d4 <vLoggingPrintf>
                    xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
                }
            }
        #endif

        if( xParent != NULL )
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d002      	beq.n	800ce40 <vTCPStateChange+0x1f8>
        {
            vSocketWakeUpUser( xParent );
 800ce3a:	6978      	ldr	r0, [r7, #20]
 800ce3c:	f7fe f844 	bl	800aec8 <vSocketWakeUpUser>
        }
    }
 800ce40:	bf00      	nop
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce4a:	bf00      	nop
 800ce4c:	080145d4 	.word	0x080145d4
 800ce50:	08014608 	.word	0x08014608
 800ce54:	20025114 	.word	0x20025114
 800ce58:	0801462c 	.word	0x0801462c

0800ce5c <prvTCPBufferResize>:
 */
    static NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                           NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                           int32_t lDataLen,
                                                           UBaseType_t uxOptionsLength )
    {
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b088      	sub	sp, #32
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
 800ce68:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 800ce6a:	4b32      	ldr	r3, [pc, #200]	; (800cf34 <prvTCPBufferResize+0xd8>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00b      	beq.n	800ce8a <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800ce72:	f240 53f2 	movw	r3, #1522	; 0x5f2
 800ce76:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d102      	bne.n	800ce84 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	617b      	str	r3, [r7, #20]
 800ce82:	e019      	b.n	800ceb8 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800ce84:	2300      	movs	r3, #0
 800ce86:	617b      	str	r3, [r7, #20]
 800ce88:	e016      	b.n	800ceb8 <prvTCPBufferResize+0x5c>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	4413      	add	r3, r2
 800ce90:	3336      	adds	r3, #54	; 0x36
 800ce92:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	2b45      	cmp	r3, #69	; 0x45
 800ce98:	d801      	bhi.n	800ce9e <prvTCPBufferResize+0x42>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800ce9a:	2346      	movs	r3, #70	; 0x46
 800ce9c:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d004      	beq.n	800ceae <prvTCPBufferResize+0x52>
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	69db      	ldr	r3, [r3, #28]
 800cea8:	69ba      	ldr	r2, [r7, #24]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d902      	bls.n	800ceb4 <prvTCPBufferResize+0x58>
            {
                xResize = pdTRUE;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	617b      	str	r3, [r7, #20]
 800ceb2:	e001      	b.n	800ceb8 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d023      	beq.n	800cf06 <prvTCPBufferResize+0xaa>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 800cebe:	2100      	movs	r1, #0
 800cec0:	69b8      	ldr	r0, [r7, #24]
 800cec2:	f004 fb97 	bl	80115f4 <pxGetNetworkBufferWithDescriptor>
 800cec6:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d02c      	beq.n	800cf28 <prvTCPBufferResize+0xcc>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	69ba      	ldr	r2, [r7, #24]
 800ced2:	61da      	str	r2, [r3, #28]

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00c      	beq.n	800cef4 <prvTCPBufferResize+0x98>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	6998      	ldr	r0, [r3, #24]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	6999      	ldr	r1, [r3, #24]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	69db      	ldr	r3, [r3, #28]
 800cee6:	461a      	mov	r2, r3
 800cee8:	f004 fc83 	bl	80117f2 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ceec:	68b8      	ldr	r0, [r7, #8]
 800ceee:	f004 fbfb 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
 800cef2:	e019      	b.n	800cf28 <prvTCPBufferResize+0xcc>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	6998      	ldr	r0, [r3, #24]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	3382      	adds	r3, #130	; 0x82
 800cefc:	2246      	movs	r2, #70	; 0x46
 800cefe:	4619      	mov	r1, r3
 800cf00:	f004 fc77 	bl	80117f2 <memcpy>
 800cf04:	e010      	b.n	800cf28 <prvTCPBufferResize+0xcc>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d104      	bne.n	800cf16 <prvTCPBufferResize+0xba>
 800cf0c:	490a      	ldr	r1, [pc, #40]	; (800cf38 <prvTCPBufferResize+0xdc>)
 800cf0e:	f240 70b9 	movw	r0, #1977	; 0x7b9
 800cf12:	f7f3 fd88 	bl	8000a26 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	4413      	add	r3, r2
 800cf20:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	61da      	str	r2, [r3, #28]
        }

        return pxReturn;
 800cf28:	69fb      	ldr	r3, [r7, #28]
    }
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3720      	adds	r7, #32
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	080154f0 	.word	0x080154f0
 800cf38:	080145d4 	.word	0x080145d4

0800cf3c <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                                      NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                      UBaseType_t uxOptionsLength )
    {
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b096      	sub	sp, #88	; 0x58
 800cf40:	af02      	add	r7, sp, #8
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d004      	beq.n	800cf5e <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf5c:	e002      	b.n	800cf64 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3382      	adds	r3, #130	; 0x82
 800cf62:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800cf64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf66:	3322      	adds	r3, #34	; 0x22
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fe fe67 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800cf6e:	6478      	str	r0, [r7, #68]	; 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	33d8      	adds	r3, #216	; 0xd8
 800cf74:	63bb      	str	r3, [r7, #56]	; 0x38
        lDataLen = 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	64fb      	str	r3, [r7, #76]	; 0x4c
        lStreamPos = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 800cf7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf80:	7b5b      	ldrb	r3, [r3, #13]
 800cf82:	f043 0310 	orr.w	r3, r3, #16
 800cf86:	b2da      	uxtb	r2, r3
 800cf88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8a:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f000 809e 	beq.w	800d0d2 <prvTCPPrepareSend+0x196>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usCurMSS > 1U )
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d90a      	bls.n	800cfb6 <prvTCPPrepareSend+0x7a>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cfa6:	f107 0210 	add.w	r2, r7, #16
 800cfaa:	4619      	mov	r1, r3
 800cfac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfae:	f002 fc45 	bl	800f83c <ulTCPWindowTxGet>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            if( lDataLen > 0 )
 800cfb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f340 808a 	ble.w	800d0d2 <prvTCPPrepareSend+0x196>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	6819      	ldr	r1, [r3, #0]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f7ff ff48 	bl	800ce5c <prvTCPBufferResize>
 800cfcc:	6378      	str	r0, [r7, #52]	; 0x34

                if( pxNewBuffer != NULL )
 800cfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d07b      	beq.n	800d0cc <prvTCPPrepareSend+0x190>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfd8:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800cfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfdc:	699b      	ldr	r3, [r3, #24]
 800cfde:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Map the byte stream onto ProtocolHeaders_t struct for easy
                     * access to the fields. */
                    pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800cfe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfe2:	3322      	adds	r3, #34	; 0x22
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe fe29 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800cfea:	6478      	str	r0, [r7, #68]	; 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	3336      	adds	r3, #54	; 0x36
 800cff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cff2:	4413      	add	r3, r2
 800cff4:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	4619      	mov	r1, r3
 800d004:	f7fe fd77 	bl	800baf6 <uxStreamBufferDistance>
 800d008:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d00e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d010:	2301      	movs	r3, #1
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	4613      	mov	r3, r2
 800d016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d01a:	f7fe fcb9 	bl	800b990 <uxStreamBufferGet>
 800d01e:	62b8      	str	r0, [r7, #40]	; 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            if( ulDataGot != ( uint32_t ) lDataLen )
 800d020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d024:	429a      	cmp	r2, r3
 800d026:	d007      	beq.n	800d038 <prvTCPPrepareSend+0xfc>
                            {
                                FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 800d028:	6939      	ldr	r1, [r7, #16]
 800d02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d032:	4894      	ldr	r0, [pc, #592]	; (800d284 <prvTCPPrepareSend+0x348>)
 800d034:	f7f3 fcce 	bl	80009d4 <vLoggingPrintf>
                        }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d044      	beq.n	800d0d2 <prvTCPPrepareSend+0x196>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d052:	b2db      	uxtb	r3, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d13c      	bne.n	800d0d2 <prvTCPPrepareSend+0x196>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	4619      	mov	r1, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	461a      	mov	r2, r3
 800d068:	f7fe fd45 	bl	800baf6 <uxStreamBufferDistance>
 800d06c:	6278      	str	r0, [r7, #36]	; 0x24

                        if( ulDistance == ulDataGot )
 800d06e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	429a      	cmp	r2, r3
 800d074:	d12d      	bne.n	800d0d2 <prvTCPPrepareSend+0x196>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                                {
                                    /* the order of volatile accesses is undefined
                                     *  so such workaround */
                                    size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	623b      	str	r3, [r7, #32]
                                    size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	61fb      	str	r3, [r7, #28]
                                    size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	61bb      	str	r3, [r7, #24]

                                    FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	9301      	str	r3, [sp, #4]
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	69bb      	ldr	r3, [r7, #24]
 800d098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d09a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d09c:	487a      	ldr	r0, [pc, #488]	; (800d288 <prvTCPPrepareSend+0x34c>)
 800d09e:	f7f3 fc99 	bl	80009d4 <vLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800d0a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0a4:	7b5b      	ldrb	r3, [r3, #13]
 800d0a6:	f043 0301 	orr.w	r3, r3, #1
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ae:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b6:	441a      	add	r2, r3
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ba:	625a      	str	r2, [r3, #36]	; 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d0ca:	e002      	b.n	800d0d2 <prvTCPPrepareSend+0x196>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 800d0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 800d0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f2c0 8095 	blt.w	800d204 <prvTCPPrepareSend+0x2c8>
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d0e0:	2b05      	cmp	r3, #5
 800d0e2:	f040 808f 	bne.w	800d204 <prvTCPPrepareSend+0x2c8>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0ec:	f003 0320 	and.w	r3, r3, #32
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d029      	beq.n	800d14a <prvTCPPrepareSend+0x20e>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800d0f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0f8:	f002 fae8 	bl	800f6cc <xTCPWindowTxDone>
 800d0fc:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d023      	beq.n	800d14a <prvTCPPrepareSend+0x20e>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d108:	f36f 1345 	bfc	r3, #5, #1
 800d10c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800d110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d112:	7b5b      	ldrb	r3, [r3, #13]
 800d114:	f043 0301 	orr.w	r3, r3, #1
 800d118:	b2da      	uxtb	r2, r3
 800d11a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d11c:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d128:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d12c:	68fa      	ldr	r2, [r7, #12]
 800d12e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d132:	f043 0301 	orr.w	r3, r3, #1
 800d136:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13c:	6a1a      	ldr	r2, [r3, #32]
 800d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d140:	625a      	str	r2, [r3, #36]	; 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800d142:	2106      	movs	r1, #6
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7ff fd7f 	bl	800cc48 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
                {
                    if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d150:	2b03      	cmp	r3, #3
 800d152:	d90e      	bls.n	800d172 <prvTCPPrepareSend+0x236>
                    {
                        FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d15c:	461a      	mov	r2, r3
 800d15e:	484b      	ldr	r0, [pc, #300]	; (800d28c <prvTCPPrepareSend+0x350>)
 800d160:	f7f3 fc38 	bl	80009d4 <vLoggingPrintf>
                                                 pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                                 pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                        vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d164:	2108      	movs	r1, #8
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f7ff fd6e 	bl	800cc48 <vTCPStateChange>
                        lDataLen = -1;
 800d16c:	f04f 33ff 	mov.w	r3, #4294967295
 800d170:	64fb      	str	r3, [r7, #76]	; 0x4c
                    }

                    if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800d172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d145      	bne.n	800d204 <prvTCPPrepareSend+0x2c8>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d17e:	f003 0301 	and.w	r3, r3, #1
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d13d      	bne.n	800d204 <prvTCPPrepareSend+0x2c8>
                    {
                        /* If there is no data to be sent, and no window-update message,
                         * we might want to send a keep-alive message. */
                        TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800d188:	f7f8 fdb0 	bl	8005cec <xTaskGetTickCount>
 800d18c:	4602      	mov	r2, r0
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	617b      	str	r3, [r7, #20]
                        TickType_t xMax;
                        xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 800d196:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d19a:	643b      	str	r3, [r7, #64]	; 0x40

                        if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <prvTCPPrepareSend+0x270>
                        {
                            xMax = ( TickType_t ) ( 3U * configTICK_RATE_HZ );
 800d1a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d1aa:	643b      	str	r3, [r7, #64]	; 0x40
                        }

                        if( xAge > xMax )
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d927      	bls.n	800d204 <prvTCPPrepareSend+0x2c8>
                        {
                            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800d1b4:	f7f8 fd9a 	bl	8005cec <xTaskGetTickCount>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	65da      	str	r2, [r3, #92]	; 0x5c

                            if( xTCPWindowLoggingLevel != 0 )
 800d1be:	4b34      	ldr	r3, [pc, #208]	; (800d290 <prvTCPPrepareSend+0x354>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00a      	beq.n	800d1dc <prvTCPPrepareSend+0x2a0>
                            {
                                FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d1d6:	482f      	ldr	r0, [pc, #188]	; (800d294 <prvTCPPrepareSend+0x358>)
 800d1d8:	f7f3 fbfc 	bl	80009d4 <vLoggingPrintf>
                                                         pxSocket->u.xTCP.ulRemoteIP,
                                                         pxSocket->u.xTCP.usRemotePort,
                                                         pxSocket->u.xTCP.ucKeepRepCount ) );
                            }

                            pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d1e2:	f043 0302 	orr.w	r3, r3, #2
 800d1e6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                            pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d1f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            pxSocket->u.xTCP.ucKeepRepCount++;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        /* Anything to send, a change of the advertised window size, or maybe send a
         * keep-alive message? */
        if( ( lDataLen > 0 ) ||
 800d204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d206:	2b00      	cmp	r3, #0
 800d208:	dc0f      	bgt.n	800d22a <prvTCPPrepareSend+0x2ee>
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d210:	f003 0301 	and.w	r3, r3, #1
 800d214:	b2db      	uxtb	r3, r3
        if( ( lDataLen > 0 ) ||
 800d216:	2b00      	cmp	r3, #0
 800d218:	d107      	bne.n	800d22a <prvTCPPrepareSend+0x2ee>
            ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d220:	f003 0302 	and.w	r3, r3, #2
 800d224:	b2db      	uxtb	r3, r3
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d226:	2b00      	cmp	r3, #0
 800d228:	d026      	beq.n	800d278 <prvTCPPrepareSend+0x33c>
        {
            pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800d22a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d22c:	7b5b      	ldrb	r3, [r3, #13]
 800d22e:	f023 0308 	bic.w	r3, r3, #8
 800d232:	b2da      	uxtb	r2, r3
 800d234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d236:	735a      	strb	r2, [r3, #13]
            pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	3314      	adds	r3, #20
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	b2da      	uxtb	r2, r3
 800d244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d246:	731a      	strb	r2, [r3, #12]

            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 800d248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d24a:	7b5b      	ldrb	r3, [r3, #13]
 800d24c:	f043 0310 	orr.w	r3, r3, #16
 800d250:	b2da      	uxtb	r2, r3
 800d252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d254:	735a      	strb	r2, [r3, #13]

            if( lDataLen != 0L )
 800d256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d006      	beq.n	800d26a <prvTCPPrepareSend+0x32e>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 800d25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d25e:	7b5b      	ldrb	r3, [r3, #13]
 800d260:	f043 0308 	orr.w	r3, r3, #8
 800d264:	b2da      	uxtb	r2, r3
 800d266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d268:	735a      	strb	r2, [r3, #13]
            }

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3328      	adds	r3, #40	; 0x28
 800d26e:	63fb      	str	r3, [r7, #60]	; 0x3c
            lDataLen += ( int32_t ) uxIntermediateResult;
 800d270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d274:	4413      	add	r3, r2
 800d276:	64fb      	str	r3, [r7, #76]	; 0x4c
        }

        return lDataLen;
 800d278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800d27a:	4618      	mov	r0, r3
 800d27c:	3750      	adds	r7, #80	; 0x50
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	08014650 	.word	0x08014650
 800d288:	08014684 	.word	0x08014684
 800d28c:	080146ac 	.word	0x080146ac
 800d290:	20025114 	.word	0x20025114
 800d294:	080146cc 	.word	0x080146cc

0800d298 <prvTCPNextTimeout>:
 * @param[in] pxSocket: The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t * pxSocket )
    {
 800d298:	b580      	push	{r7, lr}
 800d29a:	b086      	sub	sp, #24
 800d29c:	af02      	add	r7, sp, #8
 800d29e:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d2a0:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d2a4:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d144      	bne.n	800d33a <prvTCPNextTimeout+0xa2>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2b6:	f003 0308 	and.w	r3, r3, #8
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d012      	beq.n	800d2e6 <prvTCPNextTimeout+0x4e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d809      	bhi.n	800d2de <prvTCPNextTimeout+0x46>
                {
                    ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2da:	60bb      	str	r3, [r7, #8]
 800d2dc:	e006      	b.n	800d2ec <prvTCPNextTimeout+0x54>
                }
                else
                {
                    ulDelayMs = 11000UL;
 800d2de:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800d2e2:	60bb      	str	r3, [r7, #8]
 800d2e4:	e002      	b.n	800d2ec <prvTCPNextTimeout+0x54>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500UL;
 800d2e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d2ea:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	4603      	mov	r3, r0
 800d304:	482a      	ldr	r0, [pc, #168]	; (800d3b0 <prvTCPNextTimeout+0x118>)
 800d306:	f7f3 fb65 	bl	80009d4 <vLoggingPrintf>
                                     pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d310:	fb02 f303 	mul.w	r3, r2, r3
 800d314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d318:	d30a      	bcc.n	800d330 <prvTCPNextTimeout+0x98>
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d320:	fb02 f303 	mul.w	r3, r2, r3
 800d324:	4a23      	ldr	r2, [pc, #140]	; (800d3b4 <prvTCPNextTimeout+0x11c>)
 800d326:	fba2 2303 	umull	r2, r3, r2, r3
 800d32a:	099b      	lsrs	r3, r3, #6
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	e000      	b.n	800d332 <prvTCPNextTimeout+0x9a>
 800d330:	2201      	movs	r2, #1
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d338:	e033      	b.n	800d3a2 <prvTCPNextTimeout+0x10a>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d340:	2b00      	cmp	r3, #0
 800d342:	d12e      	bne.n	800d3a2 <prvTCPNextTimeout+0x10a>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d350:	f107 0208 	add.w	r2, r7, #8
 800d354:	4619      	mov	r1, r3
 800d356:	f002 fa11 	bl	800f77c <xTCPWindowTxHasData>
 800d35a:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d108      	bne.n	800d374 <prvTCPNextTimeout+0xdc>
            {
                if( xResult != ( BaseType_t ) 0 )
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <prvTCPNextTimeout+0xd6>
                {
                    ulDelayMs = 1UL;
 800d368:	2301      	movs	r3, #1
 800d36a:	60bb      	str	r3, [r7, #8]
 800d36c:	e002      	b.n	800d374 <prvTCPNextTimeout+0xdc>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d36e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d372:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d37a:	fb02 f303 	mul.w	r3, r2, r3
 800d37e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d382:	d30a      	bcc.n	800d39a <prvTCPNextTimeout+0x102>
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d38a:	fb02 f303 	mul.w	r3, r2, r3
 800d38e:	4a09      	ldr	r2, [pc, #36]	; (800d3b4 <prvTCPNextTimeout+0x11c>)
 800d390:	fba2 2303 	umull	r2, r3, r2, r3
 800d394:	099b      	lsrs	r3, r3, #6
 800d396:	b29a      	uxth	r2, r3
 800d398:	e000      	b.n	800d39c <prvTCPNextTimeout+0x104>
 800d39a:	2201      	movs	r2, #1
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    }
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	080146ec 	.word	0x080146ec
 800d3b4:	10624dd3 	.word	0x10624dd3

0800d3b8 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket: The socket owning the connection.
 */
    static void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fe fbdc 	bl	800bb82 <uxStreamBufferMidSpace>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	dd17      	ble.n	800d404 <prvTCPAddTxData+0x4c>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800d3da:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3e0:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800d3e2:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3e8:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800d3ea:	f002 f873 	bl	800f4d4 <lTCPWindowTxAdd>
 800d3ee:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	dd06      	ble.n	800d404 <prvTCPAddTxData+0x4c>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3fa:	68ba      	ldr	r2, [r7, #8]
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe fbd3 	bl	800bbaa <vStreamBufferMoveMid>
            }
        }
    }
 800d404:	bf00      	nop
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d40c:	b5b0      	push	{r4, r5, r7, lr}
 800d40e:	b08a      	sub	sp, #40	; 0x28
 800d410:	af02      	add	r7, sp, #8
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	699b      	ldr	r3, [r3, #24]
 800d41a:	3322      	adds	r3, #34	; 0x22
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fe fc0d 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800d422:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d428:	2300      	movs	r3, #0
 800d42a:	74fb      	strb	r3, [r7, #19]
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	7b5b      	ldrb	r3, [r3, #13]
 800d430:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	33d8      	adds	r3, #216	; 0xd8
 800d436:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	061a      	lsls	r2, r3, #24
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	021b      	lsls	r3, r3, #8
 800d448:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d44c:	431a      	orrs	r2, r3
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	0a1b      	lsrs	r3, r3, #8
 800d454:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d458:	431a      	orrs	r2, r3
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	0e1b      	lsrs	r3, r3, #24
 800d460:	4313      	orrs	r3, r2
 800d462:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800d464:	7cbb      	ldrb	r3, [r7, #18]
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d004      	beq.n	800d478 <prvTCPHandleFin+0x6c>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	695b      	ldr	r3, [r3, #20]
 800d472:	1c5a      	adds	r2, r3, #1
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d482:	b2db      	uxtb	r3, r3
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10b      	bne.n	800d4a0 <prvTCPHandleFin+0x94>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6a1a      	ldr	r2, [r3, #32]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	625a      	str	r2, [r3, #36]	; 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d49a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d49e:	e00c      	b.n	800d4ba <prvTCPHandleFin+0xae>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d106      	bne.n	800d4ba <prvTCPHandleFin+0xae>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d4b2:	f043 0301 	orr.w	r3, r3, #1
 800d4b6:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10b      	bne.n	800d4e2 <prvTCPHandleFin+0xd6>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	2211      	movs	r2, #17
 800d4d6:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 800d4d8:	210a      	movs	r1, #10
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff fbb4 	bl	800cc48 <vTCPStateChange>
 800d4e0:	e023      	b.n	800d52a <prvTCPHandleFin+0x11e>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e6:	1c5a      	adds	r2, r3, #1
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d103      	bne.n	800d504 <prvTCPHandleFin+0xf8>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2200      	movs	r2, #0
 800d500:	735a      	strb	r2, [r3, #13]
 800d502:	e012      	b.n	800d52a <prvTCPHandleFin+0x11e>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d50a:	f003 0302 	and.w	r3, r3, #2
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	2b00      	cmp	r3, #0
 800d512:	d103      	bne.n	800d51c <prvTCPHandleFin+0x110>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2210      	movs	r2, #16
 800d518:	735a      	strb	r2, [r3, #13]
 800d51a:	e002      	b.n	800d522 <prvTCPHandleFin+0x116>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	2200      	movs	r2, #0
 800d520:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d522:	2108      	movs	r1, #8
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7ff fb8f 	bl	800cc48 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	6a1a      	ldr	r2, [r3, #32]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	62da      	str	r2, [r3, #44]	; 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	7b5b      	ldrb	r3, [r3, #13]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <prvTCPHandleFin+0x13c>
        {
            ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d540:	3328      	adds	r3, #40	; 0x28
 800d542:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 800d544:	7cfb      	ldrb	r3, [r7, #19]
 800d546:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d54e:	3314      	adds	r3, #20
 800d550:	b2db      	uxtb	r3, r3
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	b2da      	uxtb	r2, r3
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 800d55a:	4b14      	ldr	r3, [pc, #80]	; (800d5ac <prvTCPHandleFin+0x1a0>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d01f      	beq.n	800d5a2 <prvTCPHandleFin+0x196>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %lu, cur/nxt %lu/%lu) ourSeqNr %lu | Rx %lu\n",
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	69db      	ldr	r3, [r3, #28]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	1ad0      	subs	r0, r2, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6a1a      	ldr	r2, [r3, #32]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	69db      	ldr	r3, [r3, #28]
 800d572:	1ad4      	subs	r4, r2, r3
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	69db      	ldr	r3, [r3, #28]
 800d57c:	1ad5      	subs	r5, r2, r3
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	6911      	ldr	r1, [r2, #16]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	68d2      	ldr	r2, [r2, #12]
 800d590:	1a8a      	subs	r2, r1, r2
 800d592:	9201      	str	r2, [sp, #4]
 800d594:	9300      	str	r3, [sp, #0]
 800d596:	462b      	mov	r3, r5
 800d598:	4622      	mov	r2, r4
 800d59a:	4601      	mov	r1, r0
 800d59c:	4804      	ldr	r0, [pc, #16]	; (800d5b0 <prvTCPHandleFin+0x1a4>)
 800d59e:	f7f3 fa19 	bl	80009d4 <vLoggingPrintf>
                                     pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
        }

        return xSendLength;
 800d5a2:	69fb      	ldr	r3, [r7, #28]
    }
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3720      	adds	r7, #32
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bdb0      	pop	{r4, r5, r7, pc}
 800d5ac:	20025114 	.word	0x20025114
 800d5b0:	08014718 	.word	0x08014718

0800d5b4 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    static BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint8_t ** ppucRecvData )
    {
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b08c      	sub	sp, #48	; 0x30
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	699b      	ldr	r3, [r3, #24]
 800d5c2:	3322      	adds	r3, #34	; 0x22
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fe fb39 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800d5ca:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */
        const IPHeader_t * pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	330e      	adds	r3, #14
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe fb0f 	bl	800bbfa <vCastConstPointerTo_IPHeader_t>
 800d5dc:	6238      	str	r0, [r7, #32]
        const size_t xIPHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800d5de:	2314      	movs	r3, #20
 800d5e0:	61fb      	str	r3, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e8:	7b1b      	ldrb	r3, [r3, #12]
 800d5ea:	089b      	lsrs	r3, r3, #2
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800d5f2:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 800d5f4:	7efb      	ldrb	r3, [r7, #27]
 800d5f6:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	699a      	ldr	r2, [r3, #24]
 800d5fc:	6979      	ldr	r1, [r7, #20]
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	440b      	add	r3, r1
 800d602:	330e      	adds	r3, #14
 800d604:	441a      	add	r2, r3
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	69db      	ldr	r3, [r3, #28]
 800d60e:	3b0e      	subs	r3, #14
 800d610:	62fb      	str	r3, [r7, #44]	; 0x2c

        usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800d612:	6a3b      	ldr	r3, [r7, #32]
 800d614:	885b      	ldrh	r3, [r3, #2]
 800d616:	b29b      	uxth	r3, r3
 800d618:	021b      	lsls	r3, r3, #8
 800d61a:	b21a      	sxth	r2, r3
 800d61c:	6a3b      	ldr	r3, [r7, #32]
 800d61e:	885b      	ldrh	r3, [r3, #2]
 800d620:	b29b      	uxth	r3, r3
 800d622:	0a1b      	lsrs	r3, r3, #8
 800d624:	b29b      	uxth	r3, r3
 800d626:	b21b      	sxth	r3, r3
 800d628:	4313      	orrs	r3, r2
 800d62a:	b21b      	sxth	r3, r3
 800d62c:	827b      	strh	r3, [r7, #18]
        lLength = ( int32_t ) usLength;
 800d62e:	8a7b      	ldrh	r3, [r7, #18]
 800d630:	60fb      	str	r3, [r7, #12]

        if( lReceiveLength > lLength )
 800d632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	429a      	cmp	r2, r3
 800d638:	dd01      	ble.n	800d63e <prvCheckRxData+0x8a>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 800d63e:	69fa      	ldr	r2, [r7, #28]
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	4413      	add	r3, r2
 800d644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d646:	429a      	cmp	r2, r3
 800d648:	dd06      	ble.n	800d658 <prvCheckRxData+0xa4>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 800d64a:	69fa      	ldr	r2, [r7, #28]
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	4413      	add	r3, r2
 800d650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d656:	e001      	b.n	800d65c <prvCheckRxData+0xa8>
        }
        else
        {
            lReceiveLength = 0;
 800d658:	2300      	movs	r3, #0
 800d65a:	62fb      	str	r3, [r7, #44]	; 0x2c
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	7b5b      	ldrb	r3, [r3, #13]
 800d660:	f003 0320 	and.w	r3, r3, #32
 800d664:	2b00      	cmp	r3, #0
 800d666:	d01c      	beq.n	800d6a2 <prvCheckRxData+0xee>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800d668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66a:	8a5b      	ldrh	r3, [r3, #18]
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	021b      	lsls	r3, r3, #8
 800d670:	b21a      	sxth	r2, r3
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	8a5b      	ldrh	r3, [r3, #18]
 800d676:	b29b      	uxth	r3, r3
 800d678:	0a1b      	lsrs	r3, r3, #8
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	b21b      	sxth	r3, r3
 800d67e:	4313      	orrs	r3, r2
 800d680:	b21b      	sxth	r3, r3
 800d682:	b29b      	uxth	r3, r3
 800d684:	60bb      	str	r3, [r7, #8]
            *ppucRecvData += lUrgentLength;
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	441a      	add	r2, r3
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800d692:	68b9      	ldr	r1, [r7, #8]
 800d694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d696:	f7fe f9ef 	bl	800ba78 <FreeRTOS_min_int32>
 800d69a:	4602      	mov	r2, r0
 800d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69e:	1a9b      	subs	r3, r3, r2
 800d6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        return ( BaseType_t ) lReceiveLength;
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3730      	adds	r7, #48	; 0x30
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <prvStoreRxData>:
 */
    static BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                                      const uint8_t * pucRecvData,
                                      NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint32_t ulReceiveLength )
    {
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08c      	sub	sp, #48	; 0x30
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
 800d6b8:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	699b      	ldr	r3, [r3, #24]
 800d6be:	3322      	adds	r3, #34	; 0x22
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fe fac6 	bl	800bc52 <vCastConstPointerTo_ProtocolHeaders_t>
 800d6c6:	6278      	str	r0, [r7, #36]	; 0x24
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	623b      	str	r3, [r7, #32]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	33d8      	adds	r3, #216	; 0xd8
 800d6d0:	61fb      	str	r3, [r7, #28]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	62bb      	str	r3, [r7, #40]	; 0x28

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d6d6:	6a3b      	ldr	r3, [r7, #32]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	061a      	lsls	r2, r3, #24
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	021b      	lsls	r3, r3, #8
 800d6e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d6e6:	431a      	orrs	r2, r3
 800d6e8:	6a3b      	ldr	r3, [r7, #32]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	0a1b      	lsrs	r3, r3, #8
 800d6ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d6f2:	431a      	orrs	r2, r3
 800d6f4:	6a3b      	ldr	r3, [r7, #32]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	0e1b      	lsrs	r3, r3, #24
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	61bb      	str	r3, [r7, #24]

        if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d044      	beq.n	800d78e <prvStoreRxData+0xe2>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	d93f      	bls.n	800d78e <prvStoreRxData+0xe2>
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d712:	2b00      	cmp	r3, #0
 800d714:	d006      	beq.n	800d724 <prvStoreRxData+0x78>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fe fa09 	bl	800bb32 <uxStreamBufferGetSpace>
 800d720:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d722:	e002      	b.n	800d72a <prvStoreRxData+0x7e>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d728:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800d72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72c:	683a      	ldr	r2, [r7, #0]
 800d72e:	69b9      	ldr	r1, [r7, #24]
 800d730:	69f8      	ldr	r0, [r7, #28]
 800d732:	f001 fd5b 	bl	800f1ec <lTCPWindowRxCheck>
 800d736:	6178      	str	r0, [r7, #20]

            if( lOffset >= 0 )
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	db15      	blt.n	800d76a <prvStoreRxData+0xbe>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800d73e:	6979      	ldr	r1, [r7, #20]
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f7fd fd3b 	bl	800b1c0 <lTCPAddRxdata>
 800d74a:	6138      	str	r0, [r7, #16]

                if( lStored != ( int32_t ) ulReceiveLength )
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	693a      	ldr	r2, [r7, #16]
 800d750:	429a      	cmp	r2, r3
 800d752:	d00a      	beq.n	800d76a <prvStoreRxData+0xbe>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );
 800d754:	683a      	ldr	r2, [r7, #0]
 800d756:	6939      	ldr	r1, [r7, #16]
 800d758:	4812      	ldr	r0, [pc, #72]	; (800d7a4 <prvStoreRxData+0xf8>)
 800d75a:	f7f3 f93b 	bl	80009d4 <vLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fd8c 	bl	800e27c <prvTCPSendReset>
                    xResult = -1;
 800d764:	f04f 33ff 	mov.w	r3, #4294967295
 800d768:	62bb      	str	r3, [r7, #40]	; 0x28
            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    /* Now lTCPAddRxdata() will move the rxHead pointer forward
                     * so data becomes available to the user immediately
                     * In case the low-water mark is reached, bLowWater will be set. */
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d113      	bne.n	800d798 <prvStoreRxData+0xec>
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00f      	beq.n	800d798 <prvStoreRxData+0xec>
                    {
                        ( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77c:	2200      	movs	r2, #0
 800d77e:	2100      	movs	r1, #0
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f7fd fd1d 	bl	800b1c0 <lTCPAddRxdata>
                        pxTCPWindow->ulUserDataLength = 0;
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	2200      	movs	r2, #0
 800d78a:	631a      	str	r2, [r3, #48]	; 0x30
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800d78c:	e004      	b.n	800d798 <prvStoreRxData+0xec>
                }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	2200      	movs	r2, #0
 800d792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d796:	e000      	b.n	800d79a <prvStoreRxData+0xee>
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800d798:	bf00      	nop
        }

        return xResult;
 800d79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 800d79c:	4618      	mov	r0, r3
 800d79e:	3730      	adds	r7, #48	; 0x30
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	0801475c 	.word	0x0801475c

0800d7a8 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    static UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d7a8:	b590      	push	{r4, r7, lr}
 800d7aa:	b08b      	sub	sp, #44	; 0x2c
 800d7ac:	af02      	add	r7, sp, #8
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	699b      	ldr	r3, [r3, #24]
 800d7b6:	3322      	adds	r3, #34	; 0x22
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fe fa3f 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800d7be:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	33d8      	adds	r3, #216	; 0xd8
 800d7c8:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7d0:	61fb      	str	r3, [r7, #28]
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            if( uxOptionsLength != 0U )
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d05b      	beq.n	800d890 <prvSetOptions+0xe8>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 800d7d8:	4b4e      	ldr	r3, [pc, #312]	; (800d914 <prvSetOptions+0x16c>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	db43      	blt.n	800d868 <prvSetOptions+0xc0>
                {
                    FreeRTOS_debug_printf( ( "SACK[%d,%d]: optlen %lu sending %lu - %lu\n",
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d7ea:	461c      	mov	r4, r3
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7f2:	061a      	lsls	r2, r3, #24
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7fa:	021b      	lsls	r3, r3, #8
 800d7fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d800:	431a      	orrs	r2, r3
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d808:	0a1b      	lsrs	r3, r3, #8
 800d80a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d80e:	431a      	orrs	r2, r3
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d816:	0e1b      	lsrs	r3, r3, #24
 800d818:	431a      	orrs	r2, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	693a      	ldr	r2, [r7, #16]
 800d824:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800d828:	0611      	lsls	r1, r2, #24
 800d82a:	693a      	ldr	r2, [r7, #16]
 800d82c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800d830:	0212      	lsls	r2, r2, #8
 800d832:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800d836:	4311      	orrs	r1, r2
 800d838:	693a      	ldr	r2, [r7, #16]
 800d83a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800d83e:	0a12      	lsrs	r2, r2, #8
 800d840:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800d844:	4311      	orrs	r1, r2
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800d84c:	0e12      	lsrs	r2, r2, #24
 800d84e:	4311      	orrs	r1, r2
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800d856:	1a8a      	subs	r2, r1, r2
 800d858:	9201      	str	r2, [sp, #4]
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	4622      	mov	r2, r4
 800d860:	4601      	mov	r1, r0
 800d862:	482d      	ldr	r0, [pc, #180]	; (800d918 <prvSetOptions+0x170>)
 800d864:	f7f3 f8b6 	bl	80009d4 <vLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	3380      	adds	r3, #128	; 0x80
 800d86c:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	3314      	adds	r3, #20
 800d872:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 800d874:	69fa      	ldr	r2, [r7, #28]
 800d876:	68f9      	ldr	r1, [r7, #12]
 800d878:	68b8      	ldr	r0, [r7, #8]
 800d87a:	f003 ffba 	bl	80117f2 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	b2db      	uxtb	r3, r3
 800d882:	3314      	adds	r3, #20
 800d884:	b2db      	uxtb	r3, r3
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	731a      	strb	r2, [r3, #12]
 800d88e:	e03c      	b.n	800d90a <prvSetOptions+0x162>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d896:	2b04      	cmp	r3, #4
 800d898:	d937      	bls.n	800d90a <prvSetOptions+0x162>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d8a0:	f003 0301 	and.w	r3, r3, #1
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d02f      	beq.n	800d90a <prvSetOptions+0x162>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d8b0:	f36f 0300 	bfc	r3, #0, #1
 800d8b4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

            if( xTCPWindowLoggingLevel >= 0 )
 800d8b8:	4b16      	ldr	r3, [pc, #88]	; (800d914 <prvSetOptions+0x16c>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	db06      	blt.n	800d8ce <prvSetOptions+0x126>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	4814      	ldr	r0, [pc, #80]	; (800d91c <prvSetOptions+0x174>)
 800d8ca:	f7f3 f883 	bl	80009d4 <vLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	2204      	movs	r2, #4
 800d8d8:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d8e0:	0a1b      	lsrs	r3, r3, #8
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	b2da      	uxtb	r2, r3
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 800d8f6:	2304      	movs	r3, #4
 800d8f8:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	3314      	adds	r3, #20
 800d900:	b2db      	uxtb	r3, r3
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	b2da      	uxtb	r2, r3
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 800d90a:	69fb      	ldr	r3, [r7, #28]
    }
 800d90c:	4618      	mov	r0, r3
 800d90e:	3724      	adds	r7, #36	; 0x24
 800d910:	46bd      	mov	sp, r7
 800d912:	bd90      	pop	{r4, r7, pc}
 800d914:	20025114 	.word	0x20025114
 800d918:	08014788 	.word	0x08014788
 800d91c:	080147b4 	.word	0x080147b4

0800d920 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800d920:	b590      	push	{r4, r7, lr}
 800d922:	b091      	sub	sp, #68	; 0x44
 800d924:	af02      	add	r7, sp, #8
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	699b      	ldr	r3, [r3, #24]
 800d932:	3322      	adds	r3, #34	; 0x22
 800d934:	4618      	mov	r0, r3
 800d936:	f7fe f981 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800d93a:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	62bb      	str	r3, [r7, #40]	; 0x28
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	33d8      	adds	r3, #216	; 0xd8
 800d944:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d948:	7b5b      	ldrb	r3, [r3, #13]
 800d94a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800d94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	061a      	lsls	r2, r3, #24
 800d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	021b      	lsls	r3, r3, #8
 800d95a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d95e:	431a      	orrs	r2, r3
 800d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	0a1b      	lsrs	r3, r3, #8
 800d966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d96a:	431a      	orrs	r2, r3
 800d96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	0e1b      	lsrs	r3, r3, #24
 800d972:	4313      	orrs	r3, r2
 800d974:	61fb      	str	r3, [r7, #28]
        BaseType_t xSendLength = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	637b      	str	r3, [r7, #52]	; 0x34
        UBaseType_t uxIntermediateResult = 0;
 800d97a:	2300      	movs	r3, #0
 800d97c:	61bb      	str	r3, [r7, #24]

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 800d97e:	2310      	movs	r3, #16
 800d980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	d105      	bne.n	800d99a <prvHandleSynReceived+0x7a>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 800d98e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d992:	f043 0302 	orr.w	r3, r3, #2
 800d996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 800d99a:	2317      	movs	r3, #23
 800d99c:	75fb      	strb	r3, [r7, #23]

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800d99e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d9a2:	7dfb      	ldrb	r3, [r7, #23]
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d03f      	beq.n	800da30 <prvHandleSynReceived+0x110>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d9b6:	2b04      	cmp	r3, #4
 800d9b8:	d101      	bne.n	800d9be <prvHandleSynReceived+0x9e>
 800d9ba:	4967      	ldr	r1, [pc, #412]	; (800db58 <prvHandleSynReceived+0x238>)
 800d9bc:	e000      	b.n	800d9c0 <prvHandleSynReceived+0xa0>
 800d9be:	4967      	ldr	r1, [pc, #412]	; (800db5c <prvHandleSynReceived+0x23c>)
 800d9c0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d9c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d9c8:	4865      	ldr	r0, [pc, #404]	; (800db60 <prvHandleSynReceived+0x240>)
 800d9ca:	f7f3 f803 	bl	80009d4 <vLoggingPrintf>
                                     ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d9ce:	2108      	movs	r1, #8
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f7ff f939 	bl	800cc48 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 800d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	061a      	lsls	r2, r3, #24
 800d9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	021b      	lsls	r3, r3, #8
 800d9e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d9e6:	431a      	orrs	r2, r3
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	0a1b      	lsrs	r3, r3, #8
 800d9ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d9f2:	431a      	orrs	r2, r3
 800d9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f6:	689b      	ldr	r3, [r3, #8]
 800d9f8:	0e1b      	lsrs	r3, r3, #24
 800d9fa:	431a      	orrs	r2, r3
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	62da      	str	r2, [r3, #44]	; 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	69fa      	ldr	r2, [r7, #28]
 800da04:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 800da06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da08:	7b5b      	ldrb	r3, [r3, #13]
 800da0a:	f043 0304 	orr.w	r3, r3, #4
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da12:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	3328      	adds	r3, #40	; 0x28
 800da18:	61bb      	str	r3, [r7, #24]
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	637b      	str	r3, [r7, #52]	; 0x34

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	b2db      	uxtb	r3, r3
 800da22:	3314      	adds	r3, #20
 800da24:	b2db      	uxtb	r3, r3
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	b2da      	uxtb	r2, r3
 800da2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2c:	731a      	strb	r2, [r3, #12]
 800da2e:	e08d      	b.n	800db4c <prvHandleSynReceived+0x22c>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da40:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d12a      	bne.n	800daa4 <prvHandleSynReceived+0x184>
            {
                /* Map the Last packet onto the ProtocolHeader_t struct for easy access to the fields. */
                ProtocolHeaders_t * pxLastHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	33a4      	adds	r3, #164	; 0xa4
 800da52:	4618      	mov	r0, r3
 800da54:	f7fe f8f2 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800da58:	6138      	str	r0, [r7, #16]
                                                                            &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	2210      	movs	r2, #16
 800da5e:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800da60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da62:	2210      	movs	r2, #16
 800da64:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800da78:	69f9      	ldr	r1, [r7, #28]
 800da7a:	f001 fadd 	bl	800f038 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da84:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	1c5a      	adds	r2, r3, #1
 800da8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8c:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800da8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da96:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9c:	1c5a      	adds	r2, r3, #1
 800da9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa0:	635a      	str	r2, [r3, #52]	; 0x34
 800daa2:	e005      	b.n	800dab0 <prvHandleSynReceived+0x190>
            }
            else if( ulReceiveLength == 0U )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d102      	bne.n	800dab0 <prvHandleSynReceived+0x190>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daac:	69fa      	ldr	r2, [r7, #28]
 800daae:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800dab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab2:	69db      	ldr	r3, [r3, #28]
 800dab4:	1c5a      	adds	r2, r3, #1
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	62da      	str	r2, [r3, #44]	; 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d101      	bne.n	800dac8 <prvHandleSynReceived+0x1a8>
 800dac4:	4927      	ldr	r1, [pc, #156]	; (800db64 <prvHandleSynReceived+0x244>)
 800dac6:	e000      	b.n	800daca <prvHandleSynReceived+0x1aa>
 800dac8:	4927      	ldr	r1, [pc, #156]	; (800db68 <prvHandleSynReceived+0x248>)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dace:	461c      	mov	r4, r3
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dad8:	4618      	mov	r0, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dae0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	9301      	str	r3, [sp, #4]
 800dae8:	9000      	str	r0, [sp, #0]
 800daea:	4613      	mov	r3, r2
 800daec:	4622      	mov	r2, r4
 800daee:	481f      	ldr	r0, [pc, #124]	; (800db6c <prvHandleSynReceived+0x24c>)
 800daf0:	f7f2 ff70 	bl	80009d4 <vLoggingPrintf>
                                             pxSocket->u.xTCP.usRemotePort,
                                             ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
                }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d002      	beq.n	800db04 <prvHandleSynReceived+0x1e4>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00f      	beq.n	800db24 <prvHandleSynReceived+0x204>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	2210      	movs	r2, #16
 800db08:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	3328      	adds	r3, #40	; 0x28
 800db0e:	61bb      	str	r3, [r7, #24]
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	637b      	str	r3, [r7, #52]	; 0x34
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	b2db      	uxtb	r3, r3
 800db18:	3314      	adds	r3, #20
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db22:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
                {
                    if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db2a:	f003 0310 	and.w	r3, r3, #16
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	2b00      	cmp	r3, #0
 800db32:	d107      	bne.n	800db44 <prvHandleSynReceived+0x224>
                    {
                        /* The other party did not send a scaling factor.
                         * A shifting factor in this side must be canceled. */
                        pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 800db44:	2105      	movs	r1, #5
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f7ff f87e 	bl	800cc48 <vTCPStateChange>
        }

        return xSendLength;
 800db4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800db4e:	4618      	mov	r0, r3
 800db50:	373c      	adds	r7, #60	; 0x3c
 800db52:	46bd      	mov	sp, r7
 800db54:	bd90      	pop	{r4, r7, pc}
 800db56:	bf00      	nop
 800db58:	080147c8 	.word	0x080147c8
 800db5c:	080147d8 	.word	0x080147d8
 800db60:	080147e8 	.word	0x080147e8
 800db64:	0801480c 	.word	0x0801480c
 800db68:	08014814 	.word	0x08014814
 800db6c:	0801481c 	.word	0x0801481c

0800db70 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800db70:	b580      	push	{r7, lr}
 800db72:	b096      	sub	sp, #88	; 0x58
 800db74:	af02      	add	r7, sp, #8
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	699b      	ldr	r3, [r3, #24]
 800db84:	3322      	adds	r3, #34	; 0x22
 800db86:	4618      	mov	r0, r3
 800db88:	f7fe f858 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800db8c:	6478      	str	r0, [r7, #68]	; 0x44
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800db8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db90:	643b      	str	r3, [r7, #64]	; 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	33d8      	adds	r3, #216	; 0xd8
 800db96:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800db98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db9a:	7b5b      	ldrb	r3, [r3, #13]
 800db9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 800dba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	061a      	lsls	r2, r3, #24
 800dba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	021b      	lsls	r3, r3, #8
 800dbac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbb0:	431a      	orrs	r2, r3
 800dbb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	0a1b      	lsrs	r3, r3, #8
 800dbb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dbbc:	431a      	orrs	r2, r3
 800dbbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	0e1b      	lsrs	r3, r3, #24
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	637b      	str	r3, [r7, #52]	; 0x34
 800dbc8:	2300      	movs	r3, #0
 800dbca:	633b      	str	r3, [r7, #48]	; 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	64bb      	str	r3, [r7, #72]	; 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800dbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbda:	89db      	ldrh	r3, [r3, #14]
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	021b      	lsls	r3, r3, #8
 800dbe0:	b21a      	sxth	r2, r3
 800dbe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe4:	89db      	ldrh	r3, [r3, #14]
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	0a1b      	lsrs	r3, r3, #8
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	b21b      	sxth	r3, r3
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	b21b      	sxth	r3, r3
 800dbf2:	857b      	strh	r3, [r7, #42]	; 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800dbf4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ulWindowSize =
                    ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800dc08:	fa03 f202 	lsl.w	r2, r3, r2
                pxSocket->u.xTCP.ulWindowSize =
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 800dc12:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dc16:	f003 0310 	and.w	r3, r3, #16
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d03c      	beq.n	800dc98 <prvHandleEstablished+0x128>
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 800dc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	061a      	lsls	r2, r3, #24
 800dc24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	021b      	lsls	r3, r3, #8
 800dc2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc2e:	431a      	orrs	r2, r3
 800dc30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	0a1b      	lsrs	r3, r3, #8
 800dc36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc3a:	431a      	orrs	r2, r3
 800dc3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	0e1b      	lsrs	r3, r3, #24
 800dc42:	4313      	orrs	r3, r2
 800dc44:	4619      	mov	r1, r3
 800dc46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dc48:	f002 f8aa 	bl	800fda0 <ulTCPWindowTxAck>
 800dc4c:	6278      	str	r0, [r7, #36]	; 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d020      	beq.n	800dc98 <prvHandleEstablished+0x128>
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d01d      	beq.n	800dc98 <prvHandleEstablished+0x128>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dc60:	2300      	movs	r3, #0
 800dc62:	9300      	str	r3, [sp, #0]
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	2200      	movs	r2, #0
 800dc68:	2100      	movs	r1, #0
 800dc6a:	f7fd fe91 	bl	800b990 <uxStreamBufferGet>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d011      	beq.n	800dc98 <prvHandleEstablished+0x128>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f043 0202 	orr.w	r2, r3, #2
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc84:	f003 0302 	and.w	r3, r3, #2
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d005      	beq.n	800dc98 <prvHandleEstablished+0x128>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	601a      	str	r2, [r3, #0]
            }
        }

        /* If this socket has a stream for transmission, add the data to the
         * outgoing segment(s). */
        if( pxSocket->u.xTCP.txStream != NULL )
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <prvHandleEstablished+0x136>
        {
            prvTCPAddTxData( pxSocket );
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f7ff fb89 	bl	800d3b8 <prvTCPAddTxData>
        }

        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800dca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dca8:	6a1a      	ldr	r2, [r3, #32]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

        if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcb6:	f003 0320 	and.w	r3, r3, #32
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d105      	bne.n	800dccc <prvHandleEstablished+0x15c>
 800dcc0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dcc4:	f003 0301 	and.w	r3, r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d06a      	beq.n	800dda2 <prvHandleEstablished+0x232>
        {
            /* Peer is requesting to stop, see if we're really finished. */
            xMayClose = pdTRUE;
 800dccc:	2301      	movs	r3, #1
 800dcce:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Checks are only necessary if we haven't sent a FIN yet. */
            if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d139      	bne.n	800dd54 <prvHandleEstablished+0x1e4>
            {
                /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800dce0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dce2:	f001 f89f 	bl	800ee24 <xTCPWindowRxEmpty>
 800dce6:	6238      	str	r0, [r7, #32]
                bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800dce8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dcea:	f001 fcef 	bl	800f6cc <xTCPWindowTxDone>
 800dcee:	61f8      	str	r0, [r7, #28]

                if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800dcf0:	6a3b      	ldr	r3, [r7, #32]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d002      	beq.n	800dcfc <prvHandleEstablished+0x18c>
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10e      	bne.n	800dd1a <prvHandleEstablished+0x1aa>
                {
                    /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                    FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd00:	4619      	mov	r1, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dd06:	461a      	mov	r2, r3
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	6a3b      	ldr	r3, [r7, #32]
 800dd0e:	483f      	ldr	r0, [pc, #252]	; (800de0c <prvHandleEstablished+0x29c>)
 800dd10:	f7f2 fe60 	bl	80009d4 <vLoggingPrintf>
                                             pxSocket->usLocalPort,
                                             pxSocket->u.xTCP.usRemotePort,
                                             bRxComplete, bTxDone ) );
                    xMayClose = pdFALSE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd18:	e01c      	b.n	800dd54 <prvHandleEstablished+0x1e4>
                }
                else
                {
                    ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800dd1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	441a      	add	r2, r3
 800dd20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	1ad3      	subs	r3, r2, r3
 800dd26:	633b      	str	r3, [r7, #48]	; 0x30
                    lDistance = ( int32_t ) ulIntermediateResult;
 800dd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2a:	61bb      	str	r3, [r7, #24]

                    if( lDistance > 1 )
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	dd10      	ble.n	800dd54 <prvHandleEstablished+0x1e4>
                    {
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
 800dd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd34:	691a      	ldr	r2, [r3, #16]
 800dd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	1ad1      	subs	r1, r2, r3
 800dd3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd3e:	699a      	ldr	r2, [r3, #24]
 800dd40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	460a      	mov	r2, r1
 800dd48:	69b9      	ldr	r1, [r7, #24]
 800dd4a:	4831      	ldr	r0, [pc, #196]	; (800de10 <prvHandleEstablished+0x2a0>)
 800dd4c:	f7f2 fe42 	bl	80009d4 <vLoggingPrintf>
                                                 lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
                                                 pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

                        xMayClose = pdFALSE;
 800dd50:	2300      	movs	r3, #0
 800dd52:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                }
            }

            if( xTCPWindowLoggingLevel > 0 )
 800dd54:	4b2f      	ldr	r3, [pc, #188]	; (800de14 <prvHandleEstablished+0x2a4>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	dd11      	ble.n	800dd80 <prvHandleEstablished+0x210>
            {
                FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dd62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd64:	1ad1      	subs	r1, r2, r3
 800dd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd68:	6a1a      	ldr	r2, [r3, #32]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	460a      	mov	r2, r1
 800dd78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd7a:	4827      	ldr	r0, [pc, #156]	; (800de18 <prvHandleEstablished+0x2a8>)
 800dd7c:	f7f2 fe2a 	bl	80009d4 <vLoggingPrintf>
                                         xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
                                         pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
            }

            if( xMayClose != pdFALSE )
 800dd80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00d      	beq.n	800dda2 <prvHandleEstablished+0x232>
            {
                pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800dd8c:	f043 0320 	orr.w	r3, r3, #32
 800dd90:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f7ff fb36 	bl	800d40c <prvTCPHandleFin>
 800dda0:	64f8      	str	r0, [r7, #76]	; 0x4c
            }
        }

        if( xMayClose == pdFALSE )
 800dda2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d12c      	bne.n	800de02 <prvHandleEstablished+0x292>
        {
            pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800dda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddaa:	2210      	movs	r2, #16
 800ddac:	735a      	strb	r2, [r3, #13]

            if( ulReceiveLength != 0U )
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d018      	beq.n	800dde6 <prvHandleEstablished+0x276>
            {
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	3328      	adds	r3, #40	; 0x28
 800ddb8:	62fb      	str	r3, [r7, #44]	; 0x2c
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800ddba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbc:	64fb      	str	r3, [r7, #76]	; 0x4c
                /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	3314      	adds	r3, #20
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddcc:	731a      	strb	r2, [r3, #12]

                if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <prvHandleEstablished+0x276>
                {
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800ddde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde4:	621a      	str	r2, [r3, #32]

            /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
             * can not send-out both TCP options and also a full packet. Sending
             * options (SACK) is always more urgent than sending data, which can be
             * sent later. */
            if( uxOptionsLength == 0U )
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10a      	bne.n	800de02 <prvHandleEstablished+0x292>
            {
                /* prvTCPPrepareSend might allocate a bigger network buffer, if
                 * necessary. */
                lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800ddec:	683a      	ldr	r2, [r7, #0]
 800ddee:	68b9      	ldr	r1, [r7, #8]
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f7ff f8a3 	bl	800cf3c <prvTCPPrepareSend>
 800ddf6:	6178      	str	r0, [r7, #20]

                if( lSendResult > 0 )
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	dd01      	ble.n	800de02 <prvHandleEstablished+0x292>
                {
                    xSendLength = ( BaseType_t ) lSendResult;
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }
        }

        return xSendLength;
 800de02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800de04:	4618      	mov	r0, r3
 800de06:	3750      	adds	r7, #80	; 0x50
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	0801484c 	.word	0x0801484c
 800de10:	0801487c 	.word	0x0801487c
 800de14:	20025114 	.word	0x20025114
 800de18:	080148b4 	.word	0x080148b4

0800de1c <prvSendData>:
 */
    static BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                   uint32_t ulReceiveLength,
                                   BaseType_t xByteCount )
    {
 800de1c:	b5b0      	push	{r4, r5, r7, lr}
 800de1e:	b090      	sub	sp, #64	; 0x40
 800de20:	af04      	add	r7, sp, #16
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
 800de28:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	3322      	adds	r3, #34	; 0x22
 800de32:	4618      	mov	r0, r3
 800de34:	f7fd ff02 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800de38:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800de3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3c:	627b      	str	r3, [r7, #36]	; 0x24
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	33d8      	adds	r3, #216	; 0xd8
 800de42:	623b      	str	r3, [r7, #32]
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	62fb      	str	r3, [r7, #44]	; 0x2c
            #endif
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de4c:	6a3b      	ldr	r3, [r7, #32]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
            {
                #if ( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
                    {
                        lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	617b      	str	r3, [r7, #20]
                #endif /* ipconfigTCP_ACK_EARLIER_PACKET */

                /* In case we're receiving data continuously, we might postpone sending
                 * an ACK to gain performance. */
                /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
                if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d071      	beq.n	800df4c <prvSendData+0x130>
 800de68:	69ba      	ldr	r2, [r7, #24]
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	db6d      	blt.n	800df4c <prvSendData+0x130>
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de7a:	b2db      	uxtb	r3, r3
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d165      	bne.n	800df4c <prvSendData+0x130>
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de82:	2b28      	cmp	r3, #40	; 0x28
 800de84:	d162      	bne.n	800df4c <prvSendData+0x130>
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
 800de8c:	2b05      	cmp	r3, #5
 800de8e:	d15d      	bne.n	800df4c <prvSendData+0x130>
                    ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )                              /* There are no other flags than an ACK. */
 800de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de92:	7b5b      	ldrb	r3, [r3, #13]
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800de94:	2b10      	cmp	r3, #16
 800de96:	d159      	bne.n	800df4c <prvSendData+0x130>
                {
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d00c      	beq.n	800debe <prvSendData+0xa2>
                    {
                        /* There was still a delayed in queue, delete it. */
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d004      	beq.n	800deb6 <prvSendData+0x9a>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800deb0:	4618      	mov	r0, r3
 800deb2:	f003 fc19 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
                        }

                        pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dec4:	461a      	mov	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4293      	cmp	r3, r2
 800deca:	d307      	bcc.n	800dedc <prvSendData+0xc0>
                        ( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) ) /* There are less than 2 x MSS space in the Rx buffer. */
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	461a      	mov	r2, r3
                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	4293      	cmp	r3, r2
 800deda:	da04      	bge.n	800dee6 <prvSendData+0xca>
                    {
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2202      	movs	r2, #2
 800dee0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dee4:	e003      	b.n	800deee <prvSendData+0xd2>
                    else
                    {
                        /* Normally a delayed ACK should wait 200 ms for a next incoming
                         * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                         * for full-size message. */
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2214      	movs	r2, #20
 800deea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    }

                    if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800deee:	4b3a      	ldr	r3, [pc, #232]	; (800dfd8 <prvSendData+0x1bc>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b01      	cmp	r3, #1
 800def4:	dd24      	ble.n	800df40 <prvSendData+0x124>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800defa:	2b17      	cmp	r3, #23
 800defc:	d020      	beq.n	800df40 <prvSendData+0x124>
                    {
                        FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %lu) tmout %u d %lu\n",
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df02:	461c      	mov	r4, r3
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800df08:	461d      	mov	r5, r3
 800df0a:	6a3b      	ldr	r3, [r7, #32]
 800df0c:	691a      	ldr	r2, [r3, #16]
 800df0e:	6a3b      	ldr	r3, [r7, #32]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	1ad1      	subs	r1, r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	69db      	ldr	r3, [r3, #28]
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800df26:	4610      	mov	r0, r2
 800df28:	69ba      	ldr	r2, [r7, #24]
 800df2a:	9203      	str	r2, [sp, #12]
 800df2c:	9002      	str	r0, [sp, #8]
 800df2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df30:	9201      	str	r2, [sp, #4]
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	460b      	mov	r3, r1
 800df36:	462a      	mov	r2, r5
 800df38:	4621      	mov	r1, r4
 800df3a:	4828      	ldr	r0, [pc, #160]	; (800dfdc <prvSendData+0x1c0>)
 800df3c:	f7f2 fd4a 	bl	80009d4 <vLoggingPrintf>
                                                 pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                                 xSendLength,
                                                 pxSocket->u.xTCP.usTimeout, lRxSpace ) );
                    }

                    *ppxNetworkBuffer = NULL;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	2200      	movs	r2, #0
 800df44:	601a      	str	r2, [r3, #0]
                    xSendLength = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df4a:	e011      	b.n	800df70 <prvSendData+0x154>
                }
                else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00d      	beq.n	800df70 <prvSendData+0x154>
                {
                    /* As an ACK is not being delayed, remove any earlier delayed ACK
                     * message. */
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d004      	beq.n	800df6a <prvSendData+0x14e>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df64:	4618      	mov	r0, r3
 800df66:	f003 fbbf 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2200      	movs	r2, #0
 800df6e:	67da      	str	r2, [r3, #124]	; 0x7c
                ( void ) pxTCPHeader;
                ( void ) lRxSpace;
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 800df70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df72:	2b00      	cmp	r3, #0
 800df74:	d02a      	beq.n	800dfcc <prvSendData+0x1b0>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800df76:	4b18      	ldr	r3, [pc, #96]	; (800dfd8 <prvSendData+0x1bc>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	dd1c      	ble.n	800dfb8 <prvSendData+0x19c>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df82:	2b17      	cmp	r3, #23
 800df84:	d018      	beq.n	800dfb8 <prvSendData+0x19c>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %lu SEQ %lu (len %lu)\n",
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df8a:	4618      	mov	r0, r3
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800df90:	461c      	mov	r4, r3
 800df92:	6a3b      	ldr	r3, [r7, #32]
 800df94:	691a      	ldr	r2, [r3, #16]
 800df96:	6a3b      	ldr	r3, [r7, #32]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	1ad1      	subs	r1, r2, r3
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa0:	6a3b      	ldr	r3, [r7, #32]
 800dfa2:	69db      	ldr	r3, [r3, #28]
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfa8:	9201      	str	r2, [sp, #4]
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	460b      	mov	r3, r1
 800dfae:	4622      	mov	r2, r4
 800dfb0:	4601      	mov	r1, r0
 800dfb2:	480b      	ldr	r0, [pc, #44]	; (800dfe0 <prvSendData+0x1c4>)
 800dfb4:	f7f2 fd0e 	bl	80009d4 <vLoggingPrintf>
                                         xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	6819      	ldr	r1, [r3, #0]
 800dfbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f7fe f859 	bl	800c078 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* The driver has taken ownership of the Network Buffer. */
                    *ppxNetworkBuffer = NULL;
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	601a      	str	r2, [r3, #0]
                }
            #endif
        }

        return xSendLength;
 800dfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3730      	adds	r7, #48	; 0x30
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bdb0      	pop	{r4, r5, r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20025114 	.word	0x20025114
 800dfdc:	080148f0 	.word	0x080148f0
 800dfe0:	0801492c 	.word	0x0801492c

0800dfe4 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b08c      	sub	sp, #48	; 0x30
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	3322      	adds	r3, #34	; 0x22
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fd fe20 	bl	800bc3c <vCastPointerTo_ProtocolHeaders_t>
 800dffc:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800dffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e000:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xSendLength = 0;
 800e002:	2300      	movs	r3, #0
 800e004:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	061a      	lsls	r2, r3, #24
 800e00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	021b      	lsls	r3, r3, #8
 800e012:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e016:	431a      	orrs	r2, r3
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	0a1b      	lsrs	r3, r3, #8
 800e01e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e022:	431a      	orrs	r2, r3
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	0e1b      	lsrs	r3, r3, #24
 800e02a:	4313      	orrs	r3, r2
 800e02c:	623b      	str	r3, [r7, #32]
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 800e02e:	2300      	movs	r3, #0
 800e030:	61fb      	str	r3, [r7, #28]
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	7b5b      	ldrb	r3, [r3, #13]
 800e036:	76fb      	strb	r3, [r7, #27]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	33d8      	adds	r3, #216	; 0xd8
 800e03c:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIntermediateResult = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	613b      	str	r3, [r7, #16]

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f107 0208 	add.w	r2, r7, #8
 800e04a:	4611      	mov	r1, r2
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7ff fab1 	bl	800d5b4 <prvCheckRxData>
 800e052:	4603      	mov	r3, r0
 800e054:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e05c:	2b04      	cmp	r3, #4
 800e05e:	d90c      	bls.n	800e07a <prvTCPHandleState+0x96>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	691a      	ldr	r2, [r3, #16]
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	3301      	adds	r3, #1
 800e068:	429a      	cmp	r2, r3
 800e06a:	d106      	bne.n	800e07a <prvTCPHandleState+0x96>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e072:	f043 0301 	orr.w	r3, r3, #1
 800e076:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        if( ( ulSequenceNumber + ulReceiveLength ) > pxTCPWindow->rx.ulHighestSequenceNumber )
 800e07a:	6a3a      	ldr	r2, [r7, #32]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	441a      	add	r2, r3
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	699b      	ldr	r3, [r3, #24]
 800e084:	429a      	cmp	r2, r3
 800e086:	d904      	bls.n	800e092 <prvTCPHandleState+0xae>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e088:	6a3a      	ldr	r2, [r7, #32]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	441a      	add	r2, r3
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800e092:	68b9      	ldr	r1, [r7, #8]
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7ff fb06 	bl	800d6ac <prvStoreRxData>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	da03      	bge.n	800e0ae <prvTCPHandleState+0xca>
        {
            xSendLength = -1;
 800e0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0ac:	e0a6      	b.n	800e1fc <prvTCPHandleState+0x218>
        }
        else
        {
            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7ff fb77 	bl	800d7a8 <prvSetOptions>
 800e0ba:	61f8      	str	r0, [r7, #28]

            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e0c2:	2b04      	cmp	r3, #4
 800e0c4:	d10b      	bne.n	800e0de <prvTCPHandleState+0xfa>
 800e0c6:	7efb      	ldrb	r3, [r7, #27]
 800e0c8:	f003 031f 	and.w	r3, r3, #31
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d106      	bne.n	800e0de <prvTCPHandleState+0xfa>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 800e0d0:	4852      	ldr	r0, [pc, #328]	; (800e21c <prvTCPHandleState+0x238>)
 800e0d2:	f7f2 fc7f 	bl	80009d4 <vLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 800e0d6:	2103      	movs	r1, #3
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7fe fdb5 	bl	800cc48 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800e0de:	7efb      	ldrb	r3, [r7, #27]
 800e0e0:	f003 0301 	and.w	r3, r3, #1
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d022      	beq.n	800e12e <prvTCPHandleState+0x14a>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d11a      	bne.n	800e12e <prvTCPHandleState+0x14a>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e0f8:	6a3a      	ldr	r2, [r7, #32]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	441a      	add	r2, r3
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e10c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d106      	bne.n	800e12e <prvTCPHandleState+0x14a>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800e126:	f043 0302 	orr.w	r3, r3, #2
 800e12a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                }
            }

            switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e134:	2b0b      	cmp	r3, #11
 800e136:	d860      	bhi.n	800e1fa <prvTCPHandleState+0x216>
 800e138:	a201      	add	r2, pc, #4	; (adr r2, 800e140 <prvTCPHandleState+0x15c>)
 800e13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e13e:	bf00      	nop
 800e140:	0800e1fb 	.word	0x0800e1fb
 800e144:	0800e1fb 	.word	0x0800e1fb
 800e148:	0800e1c9 	.word	0x0800e1c9
 800e14c:	0800e171 	.word	0x0800e171
 800e150:	0800e1c9 	.word	0x0800e1c9
 800e154:	0800e1db 	.word	0x0800e1db
 800e158:	0800e1eb 	.word	0x0800e1eb
 800e15c:	0800e1eb 	.word	0x0800e1eb
 800e160:	0800e1fb 	.word	0x0800e1fb
 800e164:	0800e1fb 	.word	0x0800e1fb
 800e168:	0800e1eb 	.word	0x0800e1eb
 800e16c:	0800e1fb 	.word	0x0800e1fb
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800e170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7fe fcf2 	bl	800cb5c <prvSetSynAckOptions>
 800e178:	61f8      	str	r0, [r7, #28]
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	2212      	movs	r2, #18
 800e17e:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	3328      	adds	r3, #40	; 0x28
 800e184:	613b      	str	r3, [r7, #16]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	3314      	adds	r3, #20
 800e190:	b2db      	uxtb	r3, r3
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	b2da      	uxtb	r2, r3
 800e196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e198:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800e19a:	2104      	movs	r1, #4
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7fe fd53 	bl	800cc48 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 800e1a2:	6a3b      	ldr	r3, [r7, #32]
 800e1a4:	1c5a      	adds	r2, r3, #1
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 800e1aa:	6a3b      	ldr	r3, [r7, #32]
 800e1ac:	1c5a      	adds	r2, r3, #1
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	69db      	ldr	r3, [r3, #28]
 800e1b6:	1c5a      	adds	r2, r3, #1
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	635a      	str	r2, [r3, #52]	; 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	69db      	ldr	r3, [r3, #28]
 800e1c0:	1c5a      	adds	r2, r3, #1
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	621a      	str	r2, [r3, #32]
                    break;
 800e1c6:	e019      	b.n	800e1fc <prvTCPHandleState+0x218>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	6819      	ldr	r1, [r3, #0]
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff fba5 	bl	800d920 <prvHandleSynReceived>
 800e1d6:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800e1d8:	e010      	b.n	800e1fc <prvTCPHandleState+0x218>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	68fa      	ldr	r2, [r7, #12]
 800e1de:	6839      	ldr	r1, [r7, #0]
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7ff fcc5 	bl	800db70 <prvHandleEstablished>
 800e1e6:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800e1e8:	e008      	b.n	800e1fc <prvTCPHandleState+0x218>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7ff f90b 	bl	800d40c <prvTCPHandleFin>
 800e1f6:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800e1f8:	e000      	b.n	800e1fc <prvTCPHandleState+0x218>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 800e1fa:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	dd06      	ble.n	800e210 <prvTCPHandleState+0x22c>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	6839      	ldr	r1, [r7, #0]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7ff fe07 	bl	800de1c <prvSendData>
 800e20e:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        return xSendLength;
 800e210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800e212:	4618      	mov	r0, r3
 800e214:	3730      	adds	r7, #48	; 0x30
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	08014958 	.word	0x08014958

0800e220 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    static BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                     uint8_t ucTCPFlags )
    {
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	460b      	mov	r3, r1
 800e22a:	70fb      	strb	r3, [r7, #3]
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
            {
                /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */
                TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	699b      	ldr	r3, [r3, #24]
 800e230:	4618      	mov	r0, r3
 800e232:	f7fd fced 	bl	800bc10 <vCastPointerTo_TCPPacket_t>
 800e236:	60f8      	str	r0, [r7, #12]
                const uint32_t ulSendLength =
 800e238:	2328      	movs	r3, #40	; 0x28
 800e23a:	60bb      	str	r3, [r7, #8]
                    ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ); /* Plus 0 options. */

                pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	78fa      	ldrb	r2, [r7, #3]
 800e240:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2250      	movs	r2, #80	; 0x50
 800e248:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 800e24c:	2300      	movs	r3, #0
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	6879      	ldr	r1, [r7, #4]
 800e252:	2000      	movs	r0, #0
 800e254:	f7fd ff10 	bl	800c078 <prvTCPReturnPacket>
            }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return pdFAIL;
 800e258:	2300      	movs	r3, #0
    }
 800e25a:	4618      	mov	r0, r3
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e262:	b580      	push	{r7, lr}
 800e264:	b082      	sub	sp, #8
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 800e26a:	2110      	movs	r1, #16
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7ff ffd7 	bl	800e220 <prvTCPSendSpecialPacketHelper>
 800e272:	4603      	mov	r3, r0
    }
 800e274:	4618      	mov	r0, r3
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 800e284:	2114      	movs	r1, #20
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7ff ffca 	bl	800e220 <prvTCPSendSpecialPacketHelper>
 800e28c:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 800e28e:	4618      	mov	r0, r3
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
	...

0800e298 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket: The socket whose MSS is to be set.
 */
    static void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
        uint32_t ulMSS = ipconfigTCP_MSS;
 800e2a0:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e2a4:	60fb      	str	r3, [r7, #12]

        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2aa:	061a      	lsls	r2, r3, #24
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b0:	021b      	lsls	r3, r3, #8
 800e2b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e2b6:	431a      	orrs	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2bc:	0a1b      	lsrs	r3, r3, #8
 800e2be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e2c2:	431a      	orrs	r2, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c8:	0e1b      	lsrs	r3, r3, #24
 800e2ca:	431a      	orrs	r2, r3
 800e2cc:	4b11      	ldr	r3, [pc, #68]	; (800e314 <prvSocketSetMSS+0x7c>)
 800e2ce:	695b      	ldr	r3, [r3, #20]
 800e2d0:	405a      	eors	r2, r3
 800e2d2:	4b11      	ldr	r3, [pc, #68]	; (800e318 <prvSocketSetMSS+0x80>)
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	4013      	ands	r3, r2
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d005      	beq.n	800e2e8 <prvSocketSetMSS+0x50>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800e2dc:	68f9      	ldr	r1, [r7, #12]
 800e2de:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800e2e2:	f7fd fbd9 	bl	800ba98 <FreeRTOS_min_uint32>
 800e2e6:	60f8      	str	r0, [r7, #12]
        }

        FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e2f0:	68f9      	ldr	r1, [r7, #12]
 800e2f2:	480a      	ldr	r0, [pc, #40]	; (800e31c <prvSocketSetMSS+0x84>)
 800e2f4:	f7f2 fb6e 	bl	80009d4 <vLoggingPrintf>

        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ulMSS;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	b29a      	uxth	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }
 800e30c:	bf00      	nop
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	20000018 	.word	0x20000018
 800e318:	20025080 	.word	0x20025080
 800e31c:	08014998 	.word	0x08014998

0800e320 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 800e320:	b580      	push	{r7, lr}
 800e322:	b092      	sub	sp, #72	; 0x48
 800e324:	af02      	add	r7, sp, #8
 800e326:	6078      	str	r0, [r7, #4]
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	60fb      	str	r3, [r7, #12]

        /* Map the buffer onto a ProtocolHeaders_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	699b      	ldr	r3, [r3, #24]
 800e330:	3322      	adds	r3, #34	; 0x22
 800e332:	4618      	mov	r0, r3
 800e334:	f7fd fc8d 	bl	800bc52 <vCastConstPointerTo_ProtocolHeaders_t>
 800e338:	6378      	str	r0, [r7, #52]	; 0x34
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        FreeRTOS_Socket_t * pxSocket;
        uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 800e33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e33c:	7b5b      	ldrb	r3, [r3, #13]
 800e33e:	867b      	strh	r3, [r7, #50]	; 0x32
        uint32_t ulLocalIP;
        uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 800e340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e342:	885b      	ldrh	r3, [r3, #2]
 800e344:	b29b      	uxth	r3, r3
 800e346:	021b      	lsls	r3, r3, #8
 800e348:	b21a      	sxth	r2, r3
 800e34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34c:	885b      	ldrh	r3, [r3, #2]
 800e34e:	b29b      	uxth	r3, r3
 800e350:	0a1b      	lsrs	r3, r3, #8
 800e352:	b29b      	uxth	r3, r3
 800e354:	b21b      	sxth	r3, r3
 800e356:	4313      	orrs	r3, r2
 800e358:	b21b      	sxth	r3, r3
 800e35a:	863b      	strh	r3, [r7, #48]	; 0x30
        uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 800e35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e35e:	881b      	ldrh	r3, [r3, #0]
 800e360:	b29b      	uxth	r3, r3
 800e362:	021b      	lsls	r3, r3, #8
 800e364:	b21a      	sxth	r2, r3
 800e366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	0a1b      	lsrs	r3, r3, #8
 800e36e:	b29b      	uxth	r3, r3
 800e370:	b21b      	sxth	r3, r3
 800e372:	4313      	orrs	r3, r2
 800e374:	b21b      	sxth	r3, r3
 800e376:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t ulRemoteIP;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800e378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	061a      	lsls	r2, r3, #24
 800e37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e380:	685b      	ldr	r3, [r3, #4]
 800e382:	021b      	lsls	r3, r3, #8
 800e384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e388:	431a      	orrs	r2, r3
 800e38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	0a1b      	lsrs	r3, r3, #8
 800e390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e394:	431a      	orrs	r2, r3
 800e396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	0e1b      	lsrs	r3, r3, #24
 800e39c:	4313      	orrs	r3, r2
 800e39e:	62bb      	str	r3, [r7, #40]	; 0x28
        uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );
 800e3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	061a      	lsls	r2, r3, #24
 800e3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	021b      	lsls	r3, r3, #8
 800e3ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3b0:	431a      	orrs	r2, r3
 800e3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	0a1b      	lsrs	r3, r3, #8
 800e3b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e3bc:	431a      	orrs	r2, r3
 800e3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	0e1b      	lsrs	r3, r3, #24
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xResult = pdPASS;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	63bb      	str	r3, [r7, #56]	; 0x38

        configASSERT( pxNetworkBuffer != NULL );
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d104      	bne.n	800e3dc <xProcessReceivedTCPPacket+0xbc>
 800e3d2:	49af      	ldr	r1, [pc, #700]	; (800e690 <xProcessReceivedTCPPacket+0x370>)
 800e3d4:	f640 5088 	movw	r0, #3464	; 0xd88
 800e3d8:	f7f2 fb25 	bl	8000a26 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	699b      	ldr	r3, [r3, #24]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d104      	bne.n	800e3ee <xProcessReceivedTCPPacket+0xce>
 800e3e4:	49aa      	ldr	r1, [pc, #680]	; (800e690 <xProcessReceivedTCPPacket+0x370>)
 800e3e6:	f640 5089 	movw	r0, #3465	; 0xd89
 800e3ea:	f7f2 fb1c 	bl	8000a26 <vAssertCalled>
        const IPHeader_t * pxIPHeader;

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	69db      	ldr	r3, [r3, #28]
 800e3f2:	2b35      	cmp	r3, #53	; 0x35
 800e3f4:	d802      	bhi.n	800e3fc <xProcessReceivedTCPPacket+0xdc>
        {
            xResult = pdFAIL;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3fa:	e143      	b.n	800e684 <xProcessReceivedTCPPacket+0x364>
        }
        else
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	330e      	adds	r3, #14
 800e402:	4618      	mov	r0, r3
 800e404:	f7fd fbf9 	bl	800bbfa <vCastConstPointerTo_IPHeader_t>
 800e408:	6238      	str	r0, [r7, #32]
            ulLocalIP = FreeRTOS_htonl( pxIPHeader->ulDestinationIPAddress );
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	691b      	ldr	r3, [r3, #16]
 800e40e:	061a      	lsls	r2, r3, #24
 800e410:	6a3b      	ldr	r3, [r7, #32]
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	021b      	lsls	r3, r3, #8
 800e416:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e41a:	431a      	orrs	r2, r3
 800e41c:	6a3b      	ldr	r3, [r7, #32]
 800e41e:	691b      	ldr	r3, [r3, #16]
 800e420:	0a1b      	lsrs	r3, r3, #8
 800e422:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e426:	431a      	orrs	r2, r3
 800e428:	6a3b      	ldr	r3, [r7, #32]
 800e42a:	691b      	ldr	r3, [r3, #16]
 800e42c:	0e1b      	lsrs	r3, r3, #24
 800e42e:	4313      	orrs	r3, r2
 800e430:	61fb      	str	r3, [r7, #28]
            ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	061a      	lsls	r2, r3, #24
 800e438:	6a3b      	ldr	r3, [r7, #32]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	021b      	lsls	r3, r3, #8
 800e43e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e442:	431a      	orrs	r2, r3
 800e444:	6a3b      	ldr	r3, [r7, #32]
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	0a1b      	lsrs	r3, r3, #8
 800e44a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e44e:	431a      	orrs	r2, r3
 800e450:	6a3b      	ldr	r3, [r7, #32]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	0e1b      	lsrs	r3, r3, #24
 800e456:	4313      	orrs	r3, r2
 800e458:	61bb      	str	r3, [r7, #24]

            /* Find the destination socket, and if not found: return a socket listing to
             * the destination PORT. */
            pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800e45a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800e45c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e45e:	69ba      	ldr	r2, [r7, #24]
 800e460:	69f8      	ldr	r0, [r7, #28]
 800e462:	f7fc fde3 	bl	800b02c <pxTCPSocketLookup>
 800e466:	63f8      	str	r0, [r7, #60]	; 0x3c

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 800e468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d008      	beq.n	800e480 <xProcessReceivedTCPPacket+0x160>
 800e46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e470:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e474:	4618      	mov	r0, r3
 800e476:	f7fd fc33 	bl	800bce0 <prvTCPSocketIsActive>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d116      	bne.n	800e4ae <xProcessReceivedTCPPacket+0x18e>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%lxip:%d)\n", xLocalPort, ulRemoteIP, xRemotePort ) );
 800e480:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800e482:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e484:	69ba      	ldr	r2, [r7, #24]
 800e486:	4883      	ldr	r0, [pc, #524]	; (800e694 <xProcessReceivedTCPPacket+0x374>)
 800e488:	f7f2 faa4 	bl	80009d4 <vLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800e48c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e48e:	f003 031f 	and.w	r3, r3, #31
 800e492:	2b10      	cmp	r3, #16
 800e494:	d008      	beq.n	800e4a8 <xProcessReceivedTCPPacket+0x188>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 800e496:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e498:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d103      	bne.n	800e4a8 <xProcessReceivedTCPPacket+0x188>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7ff feea 	bl	800e27c <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4ac:	e092      	b.n	800e5d4 <xProcessReceivedTCPPacket+0x2b4>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 800e4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800e4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4b8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d129      	bne.n	800e514 <xProcessReceivedTCPPacket+0x1f4>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 800e4c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e4c2:	f003 031f 	and.w	r3, r3, #31
 800e4c6:	2b02      	cmp	r3, #2
 800e4c8:	d018      	beq.n	800e4fc <xProcessReceivedTCPPacket+0x1dc>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
 800e4ca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe f927 	bl	800c720 <prvTCPFlagMeaning>
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e4d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e4d8:	9300      	str	r3, [sp, #0]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	69ba      	ldr	r2, [r7, #24]
 800e4de:	486e      	ldr	r0, [pc, #440]	; (800e698 <xProcessReceivedTCPPacket+0x378>)
 800e4e0:	f7f2 fa78 	bl	80009d4 <vLoggingPrintf>
                                                         prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 800e4e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e4e6:	f003 0304 	and.w	r3, r3, #4
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d103      	bne.n	800e4f6 <xProcessReceivedTCPPacket+0x1d6>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7ff fec3 	bl	800e27c <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4fa:	e06b      	b.n	800e5d4 <xProcessReceivedTCPPacket+0x2b4>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4619      	mov	r1, r3
 800e500:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e502:	f000 f8cf 	bl	800e6a4 <prvHandleListen>
 800e506:	63f8      	str	r0, [r7, #60]	; 0x3c

                        if( pxSocket == NULL )
 800e508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d162      	bne.n	800e5d4 <xProcessReceivedTCPPacket+0x2b4>
                        {
                            xResult = pdFAIL;
 800e50e:	2300      	movs	r3, #0
 800e510:	63bb      	str	r3, [r7, #56]	; 0x38
 800e512:	e05f      	b.n	800e5d4 <xProcessReceivedTCPPacket+0x2b4>
                } /* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 800e514:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e516:	f003 0304 	and.w	r3, r3, #4
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d038      	beq.n	800e590 <xProcessReceivedTCPPacket+0x270>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
 800e51e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e520:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e522:	69b9      	ldr	r1, [r7, #24]
 800e524:	485d      	ldr	r0, [pc, #372]	; (800e69c <xProcessReceivedTCPPacket+0x37c>)
 800e526:	f7f2 fa55 	bl	80009d4 <vLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800e52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e530:	2b02      	cmp	r3, #2
 800e532:	d10b      	bne.n	800e54c <xProcessReceivedTCPPacket+0x22c>
                        {
                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 800e534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e536:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e53a:	3301      	adds	r3, #1
 800e53c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e53e:	429a      	cmp	r2, r3
 800e540:	d123      	bne.n	800e58a <xProcessReceivedTCPPacket+0x26a>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800e542:	2100      	movs	r1, #0
 800e544:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e546:	f7fe fb7f 	bl	800cc48 <vTCPStateChange>
 800e54a:	e01e      	b.n	800e58a <xProcessReceivedTCPPacket+0x26a>
                            }
                        }
                        else
                        {
                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800e54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e54e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e554:	429a      	cmp	r2, r3
 800e556:	d104      	bne.n	800e562 <xProcessReceivedTCPPacket+0x242>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800e558:	2100      	movs	r1, #0
 800e55a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e55c:	f7fe fb74 	bl	800cc48 <vTCPStateChange>
 800e560:	e013      	b.n	800e58a <xProcessReceivedTCPPacket+0x26a>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800e562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d90d      	bls.n	800e58a <xProcessReceivedTCPPacket+0x26a>
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800e56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e570:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
                                                            pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) ) )
 800e574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e576:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800e57a:	4413      	add	r3, r2
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800e57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e57e:	429a      	cmp	r2, r3
 800e580:	d203      	bcs.n	800e58a <xProcessReceivedTCPPacket+0x26a>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	4618      	mov	r0, r3
 800e586:	f7ff fe6c 	bl	800e262 <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 800e58a:	2300      	movs	r3, #0
 800e58c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e58e:	e021      	b.n	800e5d4 <xProcessReceivedTCPPacket+0x2b4>
                    }
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 800e590:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e592:	f003 031f 	and.w	r3, r3, #31
 800e596:	2b02      	cmp	r3, #2
 800e598:	d10d      	bne.n	800e5b6 <xProcessReceivedTCPPacket+0x296>
 800e59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e5a0:	2b04      	cmp	r3, #4
 800e5a2:	d908      	bls.n	800e5b6 <xProcessReceivedTCPPacket+0x296>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );
 800e5a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	69b9      	ldr	r1, [r7, #24]
 800e5aa:	483d      	ldr	r0, [pc, #244]	; (800e6a0 <xProcessReceivedTCPPacket+0x380>)
 800e5ac:	f7f2 fa12 	bl	80009d4 <vLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5b4:	e00e      	b.n	800e5d4 <xProcessReceivedTCPPacket+0x2b4>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t lOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 800e5b6:	2322      	movs	r3, #34	; 0x22
 800e5b8:	617b      	str	r3, [r7, #20]
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	3380      	adds	r3, #128	; 0x80
 800e5be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5c0:	4413      	add	r3, r2
 800e5c2:	1c98      	adds	r0, r3, #2
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ lOffset ] ) ),
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	699a      	ldr	r2, [r3, #24]
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800e5cc:	2214      	movs	r2, #20
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	f003 f90f 	bl	80117f2 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                    }
                }
            }

            if( xResult != pdFAIL )
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d054      	beq.n	800e684 <xProcessReceivedTCPPacket+0x364>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL );
 800e5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d104      	bne.n	800e5ea <xProcessReceivedTCPPacket+0x2ca>
 800e5e0:	492b      	ldr	r1, [pc, #172]	; (800e690 <xProcessReceivedTCPPacket+0x370>)
 800e5e2:	f44f 6062 	mov.w	r0, #3616	; 0xe20
 800e5e6:	f7f2 fa1e 	bl	8000a26 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 800e5ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5ec:	f7fe fb07 	bl	800cbfe <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 800e5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f2:	7b1b      	ldrb	r3, [r3, #12]
 800e5f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5f8:	2b50      	cmp	r3, #80	; 0x50
 800e5fa:	d904      	bls.n	800e606 <xProcessReceivedTCPPacket+0x2e6>
                {
                    prvCheckOptions( pxSocket, pxNetworkBuffer );
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4619      	mov	r1, r3
 800e600:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e602:	f7fe f8eb 	bl	800c7dc <prvCheckOptions>
                }

                usWindow = FreeRTOS_ntohs( pxProtocolHeaders->xTCPHeader.usWindow );
 800e606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e608:	89db      	ldrh	r3, [r3, #14]
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	021b      	lsls	r3, r3, #8
 800e60e:	b21a      	sxth	r2, r3
 800e610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e612:	89db      	ldrh	r3, [r3, #14]
 800e614:	b29b      	uxth	r3, r3
 800e616:	0a1b      	lsrs	r3, r3, #8
 800e618:	b29b      	uxth	r3, r3
 800e61a:	b21b      	sxth	r3, r3
 800e61c:	4313      	orrs	r3, r2
 800e61e:	b21b      	sxth	r3, r3
 800e620:	827b      	strh	r3, [r7, #18]
                pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800e622:	8a7a      	ldrh	r2, [r7, #18]
 800e624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e626:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 800e62a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e62c:	f003 0302 	and.w	r3, r3, #2
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10a      	bne.n	800e64a <xProcessReceivedTCPPacket+0x32a>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800e634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e636:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e63a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e63c:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800e640:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 800e644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e646:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* In prvTCPHandleState() the incoming messages will be handled
                 * depending on the current state of the connection. */
                if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800e64a:	f107 030c 	add.w	r3, r7, #12
 800e64e:	4619      	mov	r1, r3
 800e650:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e652:	f7ff fcc7 	bl	800dfe4 <prvTCPHandleState>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	dd05      	ble.n	800e668 <xProcessReceivedTCPPacket+0x348>
                {
                    /* prvTCPHandleState() has sent a message, see if there are more to
                     * be transmitted. */
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800e65c:	f107 030c 	add.w	r3, r7, #12
 800e660:	4619      	mov	r1, r3
 800e662:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e664:	f7fd fcd8 	bl	800c018 <prvTCPSendRepeated>
                        }
                    #endif /* ipconfigUSE_TCP_WIN */
                }

                if( pxNetworkBuffer != NULL )
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d005      	beq.n	800e67a <xProcessReceivedTCPPacket+0x35a>
                {
                    /* We must check if the buffer is unequal to NULL, because the
                     * socket might keep a reference to it in case a delayed ACK must be
                     * sent. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	4618      	mov	r0, r3
 800e672:	f003 f839 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
                    #ifndef _lint
                        /* Clear pointers that are freed. */
                        pxNetworkBuffer = NULL;
 800e676:	2300      	movs	r3, #0
 800e678:	60fb      	str	r3, [r7, #12]
                    #endif
                }

                /* And finally, calculate when this socket wants to be woken up. */
                ( void ) prvTCPNextTimeout( pxSocket );
 800e67a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e67c:	f7fe fe0c 	bl	800d298 <prvTCPNextTimeout>
                /* Return pdPASS to tell that the network buffer is 'consumed'. */
                xResult = pdPASS;
 800e680:	2301      	movs	r3, #1
 800e682:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 800e684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    }
 800e686:	4618      	mov	r0, r3
 800e688:	3740      	adds	r7, #64	; 0x40
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	080145d4 	.word	0x080145d4
 800e694:	080149c4 	.word	0x080149c4
 800e698:	080149f4 	.word	0x080149f4
 800e69c:	08014a34 	.word	0x08014a34
 800e6a0:	08014a5c 	.word	0x08014a5c

0800e6a4 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    static FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                                NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b08a      	sub	sp, #40	; 0x28
 800e6a8:	af02      	add	r7, sp, #8
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
        const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fd fab7 	bl	800bc26 <vCastConstPointerTo_TCPPacket_t>
 800e6b8:	61b8      	str	r0, [r7, #24]
        FreeRTOS_Socket_t * pxReturn = NULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	61fb      	str	r3, [r7, #28]
        uint32_t ulInitialSequenceNumber;

        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800e6be:	4b68      	ldr	r3, [pc, #416]	; (800e860 <prvHandleListen+0x1bc>)
 800e6c0:	6958      	ldr	r0, [r3, #20]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	f7f2 f988 	bl	80009e6 <ulApplicationGetNextSequenceNumber>
 800e6d6:	6178      	str	r0, [r7, #20]
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );

        /* A pure SYN (without ACK) has come in, create a new socket to answer
         * it. */
        if( ulInitialSequenceNumber != 0UL )
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d057      	beq.n	800e78e <prvHandleListen+0xea>
        {
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6e4:	f003 0308 	and.w	r3, r3, #8
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00c      	beq.n	800e708 <prvHandleListen+0x64>
            {
                /* The flag bReuseSocket indicates that the same instance of the
                 * listening socket should be used for the connection. */
                pxReturn = pxSocket;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	61fb      	str	r3, [r7, #28]
                pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e6f8:	f043 0304 	orr.w	r3, r3, #4
 800e6fc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	655a      	str	r2, [r3, #84]	; 0x54
 800e706:	e042      	b.n	800e78e <prvHandleListen+0xea>
            }
            else
            {
                /* The socket does not have the bReuseSocket flag set meaning create a
                 * new socket when a connection comes in. */
                pxReturn = NULL;
 800e708:	2300      	movs	r3, #0
 800e70a:	61fb      	str	r3, [r7, #28]

                if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e718:	429a      	cmp	r2, r3
 800e71a:	d31b      	bcc.n	800e754 <prvHandleListen+0xb0>
                {
                    FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e720:	4619      	mov	r1, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e728:	461a      	mov	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e730:	4618      	mov	r0, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d101      	bne.n	800e740 <prvHandleListen+0x9c>
 800e73c:	4b49      	ldr	r3, [pc, #292]	; (800e864 <prvHandleListen+0x1c0>)
 800e73e:	e000      	b.n	800e742 <prvHandleListen+0x9e>
 800e740:	4b49      	ldr	r3, [pc, #292]	; (800e868 <prvHandleListen+0x1c4>)
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	4603      	mov	r3, r0
 800e746:	4849      	ldr	r0, [pc, #292]	; (800e86c <prvHandleListen+0x1c8>)
 800e748:	f7f2 f944 	bl	80009d4 <vLoggingPrintf>
                                       pxSocket->usLocalPort,
                                       pxSocket->u.xTCP.usChildCount,
                                       pxSocket->u.xTCP.usBacklog,
                                       ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e74c:	6838      	ldr	r0, [r7, #0]
 800e74e:	f7ff fd95 	bl	800e27c <prvTCPSendReset>
 800e752:	e01c      	b.n	800e78e <prvHandleListen+0xea>
                }
                else
                {
                    FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
 800e754:	2206      	movs	r2, #6
 800e756:	2101      	movs	r1, #1
 800e758:	2002      	movs	r0, #2
 800e75a:	f7fb fda7 	bl	800a2ac <FreeRTOS_socket>
 800e75e:	6138      	str	r0, [r7, #16]
                                                      FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

                    if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d003      	beq.n	800e76e <prvHandleListen+0xca>
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76c:	d106      	bne.n	800e77c <prvHandleListen+0xd8>
                    {
                        FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 800e76e:	4840      	ldr	r0, [pc, #256]	; (800e870 <prvHandleListen+0x1cc>)
 800e770:	f7f2 f930 	bl	80009d4 <vLoggingPrintf>
                        ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e774:	6838      	ldr	r0, [r7, #0]
 800e776:	f7ff fd81 	bl	800e27c <prvTCPSendReset>
 800e77a:	e008      	b.n	800e78e <prvHandleListen+0xea>
                    }
                    else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800e77c:	6879      	ldr	r1, [r7, #4]
 800e77e:	6938      	ldr	r0, [r7, #16]
 800e780:	f000 f878 	bl	800e874 <prvTCPSocketCopy>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d001      	beq.n	800e78e <prvHandleListen+0xea>
                    {
                        /* The socket will be connected immediately, no time for the
                         * owner to setsockopt's, therefore copy properties of the server
                         * socket to the new socket.  Only the binding might fail (due to
                         * lack of resources). */
                        pxReturn = pxNewSocket;
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	61fb      	str	r3, [r7, #28]
                    }
                }
            }
        }

        if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d05f      	beq.n	800e854 <prvHandleListen+0x1b0>
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d05c      	beq.n	800e854 <prvHandleListen+0x1b0>
        {
            /* Map the byte stream onto the ProtocolHeaders_t for easy access to the fields. */
            const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	699b      	ldr	r3, [r3, #24]
 800e79e:	3322      	adds	r3, #34	; 0x22
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fd fa56 	bl	800bc52 <vCastConstPointerTo_ProtocolHeaders_t>
 800e7a6:	60f8      	str	r0, [r7, #12]
                                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );

            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	021b      	lsls	r3, r3, #8
 800e7b0:	b21a      	sxth	r2, r3
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	0a1b      	lsrs	r3, r3, #8
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	b21b      	sxth	r3, r3
 800e7be:	4313      	orrs	r3, r2
 800e7c0:	b21b      	sxth	r3, r3
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	879a      	strh	r2, [r3, #60]	; 0x3c
            pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e7ce:	061a      	lsls	r2, r3, #24
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e7d6:	021b      	lsls	r3, r3, #8
 800e7d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7dc:	431a      	orrs	r2, r3
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e7e4:	0a1b      	lsrs	r3, r3, #8
 800e7e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e7ea:	431a      	orrs	r2, r3
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e7f2:	0e1b      	lsrs	r3, r3, #24
 800e7f4:	431a      	orrs	r2, r3
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	639a      	str	r2, [r3, #56]	; 0x38
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	061a      	lsls	r2, r3, #24
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	021b      	lsls	r3, r3, #8
 800e80e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e812:	431a      	orrs	r2, r3
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	0a1b      	lsrs	r3, r3, #8
 800e81a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e81e:	431a      	orrs	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	0e1b      	lsrs	r3, r3, #24
 800e826:	431a      	orrs	r2, r3
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
            prvSocketSetMSS( pxReturn );
 800e82e:	69f8      	ldr	r0, [r7, #28]
 800e830:	f7ff fd32 	bl	800e298 <prvSocketSetMSS>

            prvTCPCreateWindow( pxReturn );
 800e834:	69f8      	ldr	r0, [r7, #28]
 800e836:	f7fd fe19 	bl	800c46c <prvTCPCreateWindow>

            vTCPStateChange( pxReturn, eSYN_FIRST );
 800e83a:	2103      	movs	r1, #3
 800e83c:	69f8      	ldr	r0, [r7, #28]
 800e83e:	f7fe fa03 	bl	800cc48 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            ( void ) memcpy( ( void * ) ( pxReturn->u.xTCP.xPacket.u.ucLastPacket ), ( const void * ) ( pxNetworkBuffer->pucEthernetBuffer ), sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	699b      	ldr	r3, [r3, #24]
 800e84c:	2246      	movs	r2, #70	; 0x46
 800e84e:	4619      	mov	r1, r3
 800e850:	f002 ffcf 	bl	80117f2 <memcpy>
        }

        return pxReturn;
 800e854:	69fb      	ldr	r3, [r7, #28]
    }
 800e856:	4618      	mov	r0, r3
 800e858:	3720      	adds	r7, #32
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	20000018 	.word	0x20000018
 800e864:	08014a80 	.word	0x08014a80
 800e868:	08014a84 	.word	0x08014a84
 800e86c:	08014a88 	.word	0x08014a88
 800e870:	08014ab8 	.word	0x08014ab8

0800e874 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                        FreeRTOS_Socket_t * pxSocket )
    {
 800e874:	b580      	push	{r7, lr}
 800e876:	b088      	sub	sp, #32
 800e878:	af02      	add	r7, sp, #8
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	69da      	ldr	r2, [r3, #28]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	61da      	str	r2, [r3, #28]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	6a1a      	ldr	r2, [r3, #32]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	621a      	str	r2, [r3, #32]
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	66da      	str	r2, [r3, #108]	; 0x6c
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	671a      	str	r2, [r3, #112]	; 0x70
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	665a      	str	r2, [r3, #100]	; 0x64
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	669a      	str	r2, [r3, #104]	; 0x68
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                /* Child socket of listening sockets will inherit the Socket Set
                 * Otherwise the owner has no chance of including it into the set. */
                if( pxSocket->pxSocketSet != NULL )
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d009      	beq.n	800e8ee <prvTCPSocketCopy+0x7a>
                {
                    pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	629a      	str	r2, [r3, #40]	; 0x28
                    pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e6:	f043 0205 	orr.w	r2, r3, #5
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	62da      	str	r2, [r3, #44]	; 0x2c
                }
            }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800e8ee:	4b2a      	ldr	r3, [pc, #168]	; (800e998 <prvTCPSocketCopy+0x124>)
 800e8f0:	695b      	ldr	r3, [r3, #20]
 800e8f2:	613b      	str	r3, [r7, #16]
        xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8f8:	021b      	lsls	r3, r3, #8
 800e8fa:	b21a      	sxth	r2, r3
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e900:	0a1b      	lsrs	r3, r3, #8
 800e902:	b29b      	uxth	r3, r3
 800e904:	b21b      	sxth	r3, r3
 800e906:	4313      	orrs	r3, r2
 800e908:	b21b      	sxth	r3, r3
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	81fb      	strh	r3, [r7, #14]
                 * orphan temporarily.  Once this socket is really connected, the owner of
                 * the server socket will be notified. */

                /* When bPassQueued is true, the socket is an orphan until it gets
                 * connected. */
                pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800e914:	f043 0304 	orr.w	r3, r3, #4
 800e918:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	683a      	ldr	r2, [r7, #0]
 800e920:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
                }
            }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e928:	3301      	adds	r3, #1
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e936:	4619      	mov	r1, r3
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e93e:	461a      	mov	r2, r3
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e946:	4618      	mov	r0, r3
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d101      	bne.n	800e956 <prvTCPSocketCopy+0xe2>
 800e952:	4b12      	ldr	r3, [pc, #72]	; (800e99c <prvTCPSocketCopy+0x128>)
 800e954:	e000      	b.n	800e958 <prvTCPSocketCopy+0xe4>
 800e956:	4b12      	ldr	r3, [pc, #72]	; (800e9a0 <prvTCPSocketCopy+0x12c>)
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	4603      	mov	r3, r0
 800e95c:	4811      	ldr	r0, [pc, #68]	; (800e9a4 <prvTCPSocketCopy+0x130>)
 800e95e:	f7f2 f839 	bl	80009d4 <vLoggingPrintf>
                                 pxSocket->u.xTCP.usChildCount,
                                 pxSocket->u.xTCP.usBacklog,
                                 ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800e962:	f107 010c 	add.w	r1, r7, #12
 800e966:	2301      	movs	r3, #1
 800e968:	2208      	movs	r2, #8
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7fb ff04 	bl	800a778 <vSocketBind>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d008      	beq.n	800e988 <prvTCPSocketCopy+0x114>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 800e976:	480c      	ldr	r0, [pc, #48]	; (800e9a8 <prvTCPSocketCopy+0x134>)
 800e978:	f7f2 f82c 	bl	80009d4 <vLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7fb ffcb 	bl	800a918 <vSocketClose>
            xResult = pdFALSE;
 800e982:	2300      	movs	r3, #0
 800e984:	617b      	str	r3, [r7, #20]
 800e986:	e001      	b.n	800e98c <prvTCPSocketCopy+0x118>
        }
        else
        {
            xResult = pdTRUE;
 800e988:	2301      	movs	r3, #1
 800e98a:	617b      	str	r3, [r7, #20]
        }

        return xResult;
 800e98c:	697b      	ldr	r3, [r7, #20]
    }
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	20000018 	.word	0x20000018
 800e99c:	08014a80 	.word	0x08014a80
 800e9a0:	08014a84 	.word	0x08014a84
 800e9a4:	08014ad8 	.word	0x08014ad8
 800e9a8:	08014b04 	.word	0x08014b04

0800e9ac <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 800e9ac:	b480      	push	{r7}
 800e9ae:	b085      	sub	sp, #20
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	db02      	blt.n	800e9c4 <FreeRTOS_GetTCPStateName+0x18>
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b0c      	cmp	r3, #12
 800e9c2:	dd04      	ble.n	800e9ce <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 800e9c4:	230d      	movs	r3, #13
 800e9c6:	60fb      	str	r3, [r7, #12]
                xIndex--;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	3b01      	subs	r3, #1
 800e9cc:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 800e9ce:	4a05      	ldr	r2, [pc, #20]	; (800e9e4 <FreeRTOS_GetTCPStateName+0x38>)
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3714      	adds	r7, #20
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	080154b0 	.word	0x080154b0

0800e9e8 <xTCPCheckNewClient>:
 * @param[in] pxSocket: The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9f4:	021b      	lsls	r3, r3, #8
 800e9f6:	b21a      	sxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9fc:	0a1b      	lsrs	r3, r3, #8
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	b21b      	sxth	r3, r3
 800ea02:	4313      	orrs	r3, r2
 800ea04:	b21b      	sxth	r3, r3
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	61bb      	str	r3, [r7, #24]
        const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800ea0e:	4b1b      	ldr	r3, [pc, #108]	; (800ea7c <xTCPCheckNewClient+0x94>)
 800ea10:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ea12:	4b1b      	ldr	r3, [pc, #108]	; (800ea80 <xTCPCheckNewClient+0x98>)
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	61fb      	str	r3, [r7, #28]
 800ea18:	e026      	b.n	800ea68 <xTCPCheckNewClient+0x80>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d11e      	bne.n	800ea62 <xTCPCheckNewClient+0x7a>
            {
                pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fd f91d 	bl	800bc68 <vCastPointerTo_FreeRTOS_Socket_t>
 800ea2e:	60f8      	str	r0, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ea36:	2b06      	cmp	r3, #6
 800ea38:	d113      	bne.n	800ea62 <xTCPCheckNewClient+0x7a>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ea40:	f003 0302 	and.w	r3, r3, #2
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00b      	beq.n	800ea62 <xTCPCheckNewClient+0x7a>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	655a      	str	r2, [r3, #84]	; 0x54
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea54:	4619      	mov	r1, r3
 800ea56:	480b      	ldr	r0, [pc, #44]	; (800ea84 <xTCPCheckNewClient+0x9c>)
 800ea58:	f7f1 ffbc 	bl	80009d4 <vLoggingPrintf>
                    xResult = pdTRUE;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	61bb      	str	r3, [r7, #24]
                    break;
 800ea60:	e006      	b.n	800ea70 <xTCPCheckNewClient+0x88>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	61fb      	str	r3, [r7, #28]
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ea68:	69fa      	ldr	r2, [r7, #28]
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d1d4      	bne.n	800ea1a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 800ea70:	69bb      	ldr	r3, [r7, #24]
    }
 800ea72:	4618      	mov	r0, r3
 800ea74:	3720      	adds	r7, #32
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	20025c58 	.word	0x20025c58
 800ea80:	20025c50 	.word	0x20025c50
 800ea84:	08014b28 	.word	0x08014b28

0800ea88 <FreeRTOS_min_int32>:
        {
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	4293      	cmp	r3, r2
 800ea98:	bfa8      	it	ge
 800ea9a:	4613      	movge	r3, r2
        }
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <FreeRTOS_min_uint32>:
        {
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	4293      	cmp	r3, r2
 800eab8:	bf28      	it	cs
 800eaba:	4613      	movcs	r3, r2
        }
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <vCastPointerTo_TCPSegment_t>:
 * @brief Utility function to cast pointer of a type to pointer of type TCPSegment_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( TCPSegment_t )
    {
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
        return ( TCPSegment_t * ) pvArgument;
 800ead0:	687b      	ldr	r3, [r7, #4]
    }
 800ead2:	4618      	mov	r0, r3
 800ead4:	370c      	adds	r7, #12
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr

0800eade <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 800eade:	b480      	push	{r7}
 800eae0:	b085      	sub	sp, #20
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
 800eae6:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 800eae8:	683a      	ldr	r2, [r7, #0]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	db02      	blt.n	800eaf8 <xSequenceLessThanOrEqual+0x1a>
            {
                xResult = pdTRUE;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	60fb      	str	r3, [r7, #12]
 800eaf6:	e001      	b.n	800eafc <xSequenceLessThanOrEqual+0x1e>
            }
            else
            {
                xResult = pdFALSE;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800eafc:	68fb      	ldr	r3, [r7, #12]
        }
 800eafe:	4618      	mov	r0, r3
 800eb00:	3714      	adds	r7, #20
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThan( uint32_t a,
                                                        uint32_t b )
        {
 800eb0a:	b480      	push	{r7}
 800eb0c:	b085      	sub	sp, #20
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a < b */
            if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 800eb14:	683a      	ldr	r2, [r7, #0]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	1ad3      	subs	r3, r2, r3
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	db02      	blt.n	800eb26 <xSequenceLessThan+0x1c>
            {
                xResult = pdTRUE;
 800eb20:	2301      	movs	r3, #1
 800eb22:	60fb      	str	r3, [r7, #12]
 800eb24:	e001      	b.n	800eb2a <xSequenceLessThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800eb26:	2300      	movs	r3, #0
 800eb28:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
        }
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3714      	adds	r7, #20
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr

0800eb38 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a,
                                                           uint32_t b )
        {
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a > b */
            if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	1ad3      	subs	r3, r2, r3
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	db02      	blt.n	800eb54 <xSequenceGreaterThan+0x1c>
            {
                xResult = pdTRUE;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	60fb      	str	r3, [r7, #12]
 800eb52:	e001      	b.n	800eb58 <xSequenceGreaterThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800eb54:	2300      	movs	r3, #0
 800eb56:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800eb58:	68fb      	ldr	r3, [r7, #12]
        }
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3714      	adds	r7, #20
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr

0800eb66 <xSequenceGreaterThanOrEqual>:
 * @return pdTRUE if a>=b, else pdFALSE.
 */

    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 800eb66:	b480      	push	{r7}
 800eb68:	b085      	sub	sp, #20
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 800eb70:	687a      	ldr	r2, [r7, #4]
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	db02      	blt.n	800eb80 <xSequenceGreaterThanOrEqual+0x1a>
        {
            xResult = pdTRUE;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	60fb      	str	r3, [r7, #12]
 800eb7e:	e001      	b.n	800eb84 <xSequenceGreaterThanOrEqual+0x1e>
        }
        else
        {
            xResult = pdFALSE;
 800eb80:	2300      	movs	r3, #0
 800eb82:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800eb84:	68fb      	ldr	r3, [r7, #12]
    }
 800eb86:	4618      	mov	r0, r3
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <vListInsertFifo>:
 * @param[in] pxList: The list in which the item is to inserted.
 * @param[in] pxNewListItem: The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b082      	sub	sp, #8
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
 800eb9a:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	3308      	adds	r3, #8
 800eba0:	461a      	mov	r2, r3
 800eba2:	6839      	ldr	r1, [r7, #0]
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 f81f 	bl	800ebe8 <vListInsertGeneric>
        }
 800ebaa:	bf00      	nop
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer: The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b082      	sub	sp, #8
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
        pxTimer->ulBorn = xTaskGetTickCount();
 800ebba:	f7f7 f897 	bl	8005cec <xTaskGetTickCount>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	601a      	str	r2, [r3, #0]
    }
 800ebc4:	bf00      	nop
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <ulTimerGetAge>:
 * @param[in] pxTimer: The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
        return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 800ebd4:	f7f7 f88a 	bl	8005cec <xTaskGetTickCount>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	1ad3      	subs	r3, r2, r3
    }
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <vListInsertGeneric>:
 * @param[in] pxWhere: Where should the item be inserted.
 */
    static void vListInsertGeneric( List_t * const pxList,
                                    ListItem_t * const pxNewListItem,
                                    MiniListItem_t * const pxWhere )
    {
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	607a      	str	r2, [r7, #4]
        /* Insert a new list item into pxList, it does not sort the list,
         * but it puts the item just before xListEnd, so it will be the last item
         * returned by listGET_HEAD_ENTRY() */
        pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	605a      	str	r2, [r3, #4]
        pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	689a      	ldr	r2, [r3, #8]
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	609a      	str	r2, [r3, #8]
        pxWhere->pxPrevious->pxNext = pxNewListItem;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	68ba      	ldr	r2, [r7, #8]
 800ec08:	605a      	str	r2, [r3, #4]
        pxWhere->pxPrevious = pxNewListItem;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	609a      	str	r2, [r3, #8]

        /* Remember which list the item is in. */
        listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	611a      	str	r2, [r3, #16]

        ( pxList->uxNumberOfItems )++;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	601a      	str	r2, [r3, #0]
    }
 800ec20:	bf00      	nop
 800ec22:	3714      	adds	r7, #20
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
            BaseType_t xIndex, xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 800ec32:	4829      	ldr	r0, [pc, #164]	; (800ecd8 <prvCreateSectors+0xac>)
 800ec34:	f7f5 fe68 	bl	8004908 <vListInitialise>
            xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 800ec38:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800ec3c:	f7f8 fa36 	bl	80070ac <pvPortMalloc>
 800ec40:	4603      	mov	r3, r0
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7ff ff40 	bl	800eac8 <vCastPointerTo_TCPSegment_t>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	4b24      	ldr	r3, [pc, #144]	; (800ecdc <prvCreateSectors+0xb0>)
 800ec4c:	601a      	str	r2, [r3, #0]

            if( xTCPSegments == NULL )
 800ec4e:	4b23      	ldr	r3, [pc, #140]	; (800ecdc <prvCreateSectors+0xb0>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d107      	bne.n	800ec66 <prvCreateSectors+0x3a>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 800ec56:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800ec5a:	4821      	ldr	r0, [pc, #132]	; (800ece0 <prvCreateSectors+0xb4>)
 800ec5c:	f7f1 feba 	bl	80009d4 <vLoggingPrintf>
                                         ( unsigned ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

                xReturn = pdFAIL;
 800ec60:	2300      	movs	r3, #0
 800ec62:	603b      	str	r3, [r7, #0]
 800ec64:	e032      	b.n	800eccc <prvCreateSectors+0xa0>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800ec66:	4b1d      	ldr	r3, [pc, #116]	; (800ecdc <prvCreateSectors+0xb0>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800ec6e:	2100      	movs	r1, #0
 800ec70:	4618      	mov	r0, r3
 800ec72:	f002 fde2 	bl	801183a <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800ec76:	2300      	movs	r3, #0
 800ec78:	607b      	str	r3, [r7, #4]
 800ec7a:	e022      	b.n	800ecc2 <prvCreateSectors+0x96>
                {
                    /* Could call vListInitialiseItem here but all data has been
                    * nulled already.  Set the owner to a segment descriptor. */
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800ec7c:	4b17      	ldr	r3, [pc, #92]	; (800ecdc <prvCreateSectors+0xb0>)
 800ec7e:	6819      	ldr	r1, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	019a      	lsls	r2, r3, #6
 800ec84:	4b15      	ldr	r3, [pc, #84]	; (800ecdc <prvCreateSectors+0xb0>)
 800ec86:	6818      	ldr	r0, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	019b      	lsls	r3, r3, #6
 800ec8c:	4403      	add	r3, r0
 800ec8e:	440a      	add	r2, r1
 800ec90:	639a      	str	r2, [r3, #56]	; 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800ec92:	4b12      	ldr	r3, [pc, #72]	; (800ecdc <prvCreateSectors+0xb0>)
 800ec94:	6819      	ldr	r1, [r3, #0]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	019a      	lsls	r2, r3, #6
 800ec9a:	4b10      	ldr	r3, [pc, #64]	; (800ecdc <prvCreateSectors+0xb0>)
 800ec9c:	6818      	ldr	r0, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	019b      	lsls	r3, r3, #6
 800eca2:	4403      	add	r3, r0
 800eca4:	440a      	add	r2, r1
 800eca6:	625a      	str	r2, [r3, #36]	; 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 800eca8:	4b0c      	ldr	r3, [pc, #48]	; (800ecdc <prvCreateSectors+0xb0>)
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	019b      	lsls	r3, r3, #6
 800ecb0:	4413      	add	r3, r2
 800ecb2:	332c      	adds	r3, #44	; 0x2c
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	4808      	ldr	r0, [pc, #32]	; (800ecd8 <prvCreateSectors+0xac>)
 800ecb8:	f7ff ff6b 	bl	800eb92 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	607b      	str	r3, [r7, #4]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2bef      	cmp	r3, #239	; 0xef
 800ecc6:	ddd9      	ble.n	800ec7c <prvCreateSectors+0x50>
                }

                xReturn = pdPASS;
 800ecc8:	2301      	movs	r3, #1
 800ecca:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 800eccc:	683b      	ldr	r3, [r7, #0]
        }
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20025100 	.word	0x20025100
 800ecdc:	200250fc 	.word	0x200250fc
 800ece0:	08014bd8 	.word	0x08014bd8

0800ece4 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b086      	sub	sp, #24
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	613b      	str	r3, [r7, #16]

            /* Find a segment with a given sequence number in the list of received
             * segments. */
            pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	33ac      	adds	r3, #172	; 0xac
 800ecf6:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	617b      	str	r3, [r7, #20]
 800ecfe:	e010      	b.n	800ed22 <xTCPWindowRxFind+0x3e>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7ff fedf 	bl	800eac8 <vCastPointerTo_TCPSegment_t>
 800ed0a:	60b8      	str	r0, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	683a      	ldr	r2, [r7, #0]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d102      	bne.n	800ed1c <xTCPWindowRxFind+0x38>
                {
                    pxReturn = pxSegment;
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	613b      	str	r3, [r7, #16]
                    break;
 800ed1a:	e006      	b.n	800ed2a <xTCPWindowRxFind+0x46>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	617b      	str	r3, [r7, #20]
            for( pxIterator = listGET_NEXT( pxEnd );
 800ed22:	697a      	ldr	r2, [r7, #20]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d1ea      	bne.n	800ed00 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 800ed2a:	693b      	ldr	r3, [r7, #16]
        }
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3718      	adds	r7, #24
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b088      	sub	sp, #32
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
 800ed40:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800ed42:	4b34      	ldr	r3, [pc, #208]	; (800ee14 <xTCPWindowNew+0xe0>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d10c      	bne.n	800ed64 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <xTCPWindowNew+0x20>
 800ed50:	2352      	movs	r3, #82	; 0x52
 800ed52:	e000      	b.n	800ed56 <xTCPWindowNew+0x22>
 800ed54:	2354      	movs	r3, #84	; 0x54
 800ed56:	4619      	mov	r1, r3
 800ed58:	482f      	ldr	r0, [pc, #188]	; (800ee18 <xTCPWindowNew+0xe4>)
 800ed5a:	f7f1 fe3b 	bl	80009d4 <vLoggingPrintf>
                pxSegment = NULL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	61fb      	str	r3, [r7, #28]
 800ed62:	e052      	b.n	800ee0a <xTCPWindowNew+0xd6>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800ed64:	4b2b      	ldr	r3, [pc, #172]	; (800ee14 <xTCPWindowNew+0xe0>)
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	61bb      	str	r3, [r7, #24]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7ff feaa 	bl	800eac8 <vCastPointerTo_TCPSegment_t>
 800ed74:	61f8      	str	r0, [r7, #28]

                configASSERT( pxItem != NULL );
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d104      	bne.n	800ed86 <xTCPWindowNew+0x52>
 800ed7c:	4927      	ldr	r1, [pc, #156]	; (800ee1c <xTCPWindowNew+0xe8>)
 800ed7e:	f240 2035 	movw	r0, #565	; 0x235
 800ed82:	f7f1 fe50 	bl	8000a26 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d104      	bne.n	800ed96 <xTCPWindowNew+0x62>
 800ed8c:	4923      	ldr	r1, [pc, #140]	; (800ee1c <xTCPWindowNew+0xe8>)
 800ed8e:	f240 2036 	movw	r0, #566	; 0x236
 800ed92:	f7f1 fe48 	bl	8000a26 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 800ed96:	69b8      	ldr	r0, [r7, #24]
 800ed98:	f7f5 fe40 	bl	8004a1c <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d006      	beq.n	800edb0 <xTCPWindowNew+0x7c>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	33a4      	adds	r3, #164	; 0xa4
 800eda6:	69b9      	ldr	r1, [r7, #24]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7ff fef2 	bl	800eb92 <vListInsertFifo>
 800edae:	e005      	b.n	800edbc <xTCPWindowNew+0x88>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	3390      	adds	r3, #144	; 0x90
 800edb4:	69b9      	ldr	r1, [r7, #24]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7ff feeb 	bl	800eb92 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	3310      	adds	r3, #16
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7ff fef6 	bl	800ebb2 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	2200      	movs	r2, #0
 800edca:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <xTCPWindowNew+0xa2>
 800edd2:	2101      	movs	r1, #1
 800edd4:	e000      	b.n	800edd8 <xTCPWindowNew+0xa4>
 800edd6:	2100      	movs	r1, #0
 800edd8:	69fa      	ldr	r2, [r7, #28]
 800edda:	7d93      	ldrb	r3, [r2, #22]
 800eddc:	f361 0382 	bfi	r3, r1, #2, #1
 800ede0:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                        UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 800edf4:	4b07      	ldr	r3, [pc, #28]	; (800ee14 <xTCPWindowNew+0xe0>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	617b      	str	r3, [r7, #20]

                        if( xLowestLength > xLength )
 800edfa:	4b09      	ldr	r3, [pc, #36]	; (800ee20 <xTCPWindowNew+0xec>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	697a      	ldr	r2, [r7, #20]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d202      	bcs.n	800ee0a <xTCPWindowNew+0xd6>
                        {
                            xLowestLength = xLength;
 800ee04:	4a06      	ldr	r2, [pc, #24]	; (800ee20 <xTCPWindowNew+0xec>)
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	6013      	str	r3, [r2, #0]
                        }
                    }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 800ee0a:	69fb      	ldr	r3, [r7, #28]
        }
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3720      	adds	r7, #32
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	20025100 	.word	0x20025100
 800ee18:	08014bfc 	.word	0x08014bfc
 800ee1c:	08014c2c 	.word	0x08014c2c
 800ee20:	20000014 	.word	0x20000014

0800ee24 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d002      	beq.n	800ee3c <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 800ee36:	2300      	movs	r3, #0
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	e01d      	b.n	800ee78 <xTCPWindowRxEmpty+0x54>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	691a      	ldr	r2, [r3, #16]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	699b      	ldr	r3, [r3, #24]
 800ee44:	4619      	mov	r1, r3
 800ee46:	4610      	mov	r0, r2
 800ee48:	f7ff fe8d 	bl	800eb66 <xSequenceGreaterThanOrEqual>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d002      	beq.n	800ee58 <xTCPWindowRxEmpty+0x34>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 800ee52:	2301      	movs	r3, #1
 800ee54:	60fb      	str	r3, [r7, #12]
 800ee56:	e00f      	b.n	800ee78 <xTCPWindowRxEmpty+0x54>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	691a      	ldr	r2, [r3, #16]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	1ad1      	subs	r1, r2, r3
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	699a      	ldr	r2, [r3, #24]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	68db      	ldr	r3, [r3, #12]
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	4805      	ldr	r0, [pc, #20]	; (800ee84 <xTCPWindowRxEmpty+0x60>)
 800ee70:	f7f1 fdb0 	bl	80009d4 <vLoggingPrintf>
                                         ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 800ee74:	2300      	movs	r3, #0
 800ee76:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 800ee78:	68fb      	ldr	r3, [r7, #12]
        }
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	08014c60 	.word	0x08014c60

0800ee88 <xTCPWindowGetHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d102      	bne.n	800ee9e <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	60fb      	str	r3, [r7, #12]
 800ee9c:	e00b      	b.n	800eeb6 <xTCPWindowGetHead+0x2e>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	60bb      	str	r3, [r7, #8]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff fe0d 	bl	800eac8 <vCastPointerTo_TCPSegment_t>
 800eeae:	60f8      	str	r0, [r7, #12]

                ( void ) uxListRemove( pxItem );
 800eeb0:	68b8      	ldr	r0, [r7, #8]
 800eeb2:	f7f5 fdb3 	bl	8004a1c <uxListRemove>
            }

            return pxSegment;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
        }
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <xTCPWindowPeekHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b084      	sub	sp, #16
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d102      	bne.n	800eed6 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 800eed0:	2300      	movs	r3, #0
 800eed2:	60fb      	str	r3, [r7, #12]
 800eed4:	e008      	b.n	800eee8 <xTCPWindowPeekHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	60bb      	str	r3, [r7, #8]
                pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7ff fdf1 	bl	800eac8 <vCastPointerTo_TCPSegment_t>
 800eee6:	60f8      	str	r0, [r7, #12]
            }

            return pxReturn;
 800eee8:	68fb      	ldr	r3, [r7, #12]
        }
 800eeea:	4618      	mov	r0, r3
 800eeec:	3710      	adds	r7, #16
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
	...

0800eef4 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment: The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d004      	beq.n	800ef0e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	3318      	adds	r3, #24
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7f5 fd87 	bl	8004a1c <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0UL;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2200      	movs	r2, #0
 800ef12:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0L;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0UL;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d004      	beq.n	800ef32 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	332c      	adds	r3, #44	; 0x2c
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7f5 fd75 	bl	8004a1c <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	332c      	adds	r3, #44	; 0x2c
 800ef36:	4619      	mov	r1, r3
 800ef38:	4803      	ldr	r0, [pc, #12]	; (800ef48 <vTCPWindowFree+0x54>)
 800ef3a:	f7ff fe2a 	bl	800eb92 <vListInsertFifo>
        }
 800ef3e:	bf00      	nop
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	20025100 	.word	0x20025100

0800ef4c <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 800ef54:	2300      	movs	r3, #0
 800ef56:	613b      	str	r3, [r7, #16]
 800ef58:	e020      	b.n	800ef9c <vTCPWindowDestroy+0x50>
            {
                if( xRound != 0 )
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d003      	beq.n	800ef68 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	33a4      	adds	r3, #164	; 0xa4
 800ef64:	617b      	str	r3, [r7, #20]
 800ef66:	e002      	b.n	800ef6e <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3390      	adds	r3, #144	; 0x90
 800ef6c:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef76:	d10e      	bne.n	800ef96 <vTCPWindowDestroy+0x4a>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800ef78:	e009      	b.n	800ef8e <vTCPWindowDestroy+0x42>
                    {
                        pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff fda1 	bl	800eac8 <vCastPointerTo_TCPSegment_t>
 800ef86:	60f8      	str	r0, [r7, #12]
                        vTCPWindowFree( pxSegment );
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f7ff ffb3 	bl	800eef4 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d1f1      	bne.n	800ef7a <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	613b      	str	r3, [r7, #16]
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	dddb      	ble.n	800ef5a <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 800efa2:	bf00      	nop
 800efa4:	3718      	adds	r7, #24
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
	...

0800efac <vTCPWindowCreate>:
                           uint32_t ulRxWindowLength,
                           uint32_t ulTxWindowLength,
                           uint32_t ulAckNumber,
                           uint32_t ulSequenceNumber,
                           uint32_t ulMSS )
    {
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	60b9      	str	r1, [r7, #8]
 800efb6:	607a      	str	r2, [r7, #4]
 800efb8:	603b      	str	r3, [r7, #0]
        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( xTCPSegments == NULL )
 800efba:	4b1c      	ldr	r3, [pc, #112]	; (800f02c <vTCPWindowCreate+0x80>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d101      	bne.n	800efc6 <vTCPWindowCreate+0x1a>
                {
                    ( void ) prvCreateSectors();
 800efc2:	f7ff fe33 	bl	800ec2c <prvCreateSectors>
                }

                vListInitialise( &( pxWindow->xTxSegments ) );
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	3390      	adds	r3, #144	; 0x90
 800efca:	4618      	mov	r0, r3
 800efcc:	f7f5 fc9c 	bl	8004908 <vListInitialise>
                vListInitialise( &( pxWindow->xRxSegments ) );
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	33a4      	adds	r3, #164	; 0xa4
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7f5 fc97 	bl	8004908 <vListInitialise>

                vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	3340      	adds	r3, #64	; 0x40
 800efde:	4618      	mov	r0, r3
 800efe0:	f7f5 fc92 	bl	8004908 <vListInitialise>
                vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	3354      	adds	r3, #84	; 0x54
 800efe8:	4618      	mov	r0, r3
 800efea:	f7f5 fc8d 	bl	8004908 <vListInitialise>
                vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	3368      	adds	r3, #104	; 0x68
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7f5 fc88 	bl	8004908 <vListInitialise>
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 800eff8:	4b0d      	ldr	r3, [pc, #52]	; (800f030 <vTCPWindowCreate+0x84>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d004      	beq.n	800f00a <vTCPWindowCreate+0x5e>
        {
            FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	68b9      	ldr	r1, [r7, #8]
 800f004:	480b      	ldr	r0, [pc, #44]	; (800f034 <vTCPWindowCreate+0x88>)
 800f006:	f7f1 fce5 	bl	80009d4 <vLoggingPrintf>
                                     ulRxWindowLength, ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	687a      	ldr	r2, [r7, #4]
 800f014:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	69ba      	ldr	r2, [r7, #24]
 800f01a:	6839      	ldr	r1, [r7, #0]
 800f01c:	68f8      	ldr	r0, [r7, #12]
 800f01e:	f000 f80b 	bl	800f038 <vTCPWindowInit>
    }
 800f022:	bf00      	nop
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	200250fc 	.word	0x200250fc
 800f030:	20025114 	.word	0x20025114
 800f034:	08014c90 	.word	0x08014c90

0800f038 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 800f038:	b480      	push	{r7}
 800f03a:	b087      	sub	sp, #28
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
 800f044:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 800f046:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f04a:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0UL;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2200      	movs	r2, #0
 800f050:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800f052:	68fa      	ldr	r2, [r7, #12]
 800f054:	7813      	ldrb	r3, [r2, #0]
 800f056:	f043 0301 	orr.w	r3, r3, #1
 800f05a:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0UL )
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d024      	beq.n	800f0ac <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d004      	beq.n	800f076 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	b29a      	uxth	r2, r3
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f07c:	461a      	mov	r2, r3
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	4293      	cmp	r3, r2
 800f082:	d304      	bcc.n	800f08e <vTCPWindowInit+0x56>
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10e      	bne.n	800f0ac <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	685a      	ldr	r2, [r3, #4]
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	fbb2 f3f3 	udiv	r3, r2, r3
 800f098:	683a      	ldr	r2, [r7, #0]
 800f09a:	fb02 f203 	mul.w	r2, r2, r3
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	b29a      	uxth	r2, r3
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	697a      	ldr	r2, [r7, #20]
 800f0b0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	68ba      	ldr	r2, [r7, #8]
 800f0b6:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	68ba      	ldr	r2, [r7, #8]
 800f0c2:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	635a      	str	r2, [r3, #52]	; 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	629a      	str	r2, [r3, #40]	; 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800f0e2:	bf00      	nop
 800f0e4:	371c      	adds	r7, #28
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
	...

0800f0f0 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 800f0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0f2:	b08f      	sub	sp, #60	; 0x3c
 800f0f4:	af04      	add	r7, sp, #16
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800f100:	68ba      	ldr	r2, [r7, #8]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4413      	add	r3, r2
 800f106:	61fb      	str	r3, [r7, #28]
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	33ac      	adds	r3, #172	; 0xac
 800f10c:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	623b      	str	r3, [r7, #32]
 800f114:	e02a      	b.n	800f16c <xTCPWindowRxConfirm+0x7c>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	68db      	ldr	r3, [r3, #12]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff fcd4 	bl	800eac8 <vCastPointerTo_TCPSegment_t>
 800f120:	6178      	str	r0, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68b9      	ldr	r1, [r7, #8]
 800f128:	4618      	mov	r0, r3
 800f12a:	f7ff fd1c 	bl	800eb66 <xSequenceGreaterThanOrEqual>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d018      	beq.n	800f166 <xTCPWindowRxConfirm+0x76>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	69f9      	ldr	r1, [r7, #28]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7ff fce5 	bl	800eb0a <xSequenceLessThan>
 800f140:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00f      	beq.n	800f166 <xTCPWindowRxConfirm+0x76>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00a      	beq.n	800f162 <xTCPWindowRxConfirm+0x72>
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4619      	mov	r1, r3
 800f156:	4610      	mov	r0, r2
 800f158:	f7ff fcd7 	bl	800eb0a <xSequenceLessThan>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d001      	beq.n	800f166 <xTCPWindowRxConfirm+0x76>
                    {
                        pxBest = pxSegment;
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	627b      	str	r3, [r7, #36]	; 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800f16c:	6a3a      	ldr	r2, [r7, #32]
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	429a      	cmp	r2, r3
 800f172:	d1d0      	bne.n	800f116 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 800f174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f176:	2b00      	cmp	r3, #0
 800f178:	d030      	beq.n	800f1dc <xTCPWindowRxConfirm+0xec>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17c:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 800f17e:	68ba      	ldr	r2, [r7, #8]
 800f180:	429a      	cmp	r2, r3
 800f182:	d104      	bne.n	800f18e <xTCPWindowRxConfirm+0x9e>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800f184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f186:	689a      	ldr	r2, [r3, #8]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d026      	beq.n	800f1dc <xTCPWindowRxConfirm+0xec>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %lu (+%ld=%lu) found %lu (+%ld=%lu)\n",
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f194:	461e      	mov	r6, r3
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	1ad5      	subs	r5, r2, r3
 800f19e:	68ba      	ldr	r2, [r7, #8]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	441a      	add	r2, r3
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ac:	6811      	ldr	r1, [r2, #0]
 800f1ae:	68fa      	ldr	r2, [r7, #12]
 800f1b0:	68d2      	ldr	r2, [r2, #12]
 800f1b2:	1a8a      	subs	r2, r1, r2
 800f1b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1b6:	6889      	ldr	r1, [r1, #8]
 800f1b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1ba:	6800      	ldr	r0, [r0, #0]
 800f1bc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800f1be:	68a4      	ldr	r4, [r4, #8]
 800f1c0:	4404      	add	r4, r0
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	68c0      	ldr	r0, [r0, #12]
 800f1c6:	1a20      	subs	r0, r4, r0
 800f1c8:	9003      	str	r0, [sp, #12]
 800f1ca:	9102      	str	r1, [sp, #8]
 800f1cc:	9201      	str	r2, [sp, #4]
 800f1ce:	9300      	str	r3, [sp, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	462a      	mov	r2, r5
 800f1d4:	4631      	mov	r1, r6
 800f1d6:	4804      	ldr	r0, [pc, #16]	; (800f1e8 <xTCPWindowRxConfirm+0xf8>)
 800f1d8:	f7f1 fbfc 	bl	80009d4 <vLoggingPrintf>
                                         pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
                                         pxBest->lDataLength,
                                         pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
            }

            return pxBest;
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800f1de:	4618      	mov	r0, r3
 800f1e0:	372c      	adds	r7, #44	; 0x2c
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	08014cc0 	.word	0x08014cc0

0800f1ec <lTCPWindowRxCheck>:
 */
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace )
        {
 800f1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ee:	b091      	sub	sp, #68	; 0x44
 800f1f0:	af04      	add	r7, sp, #16
 800f1f2:	60f8      	str	r0, [r7, #12]
 800f1f4:	60b9      	str	r1, [r7, #8]
 800f1f6:	607a      	str	r2, [r7, #4]
 800f1f8:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber, ulLast, ulSavedSequenceNumber, ulIntermediateResult = 0;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	623b      	str	r3, [r7, #32]
             * or there is not enough space.
             *
             * As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
             * if more Rx data may be passed to the user after this packet. */

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2200      	movs	r2, #0
 800f208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0UL;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2200      	movs	r2, #0
 800f210:	631a      	str	r2, [r3, #48]	; 0x30

            if( ulCurrentSequenceNumber == ulSequenceNumber )
 800f212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	429a      	cmp	r2, r3
 800f218:	d16a      	bne.n	800f2f0 <lTCPWindowRxCheck+0x104>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulLength > ulSpace )
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d908      	bls.n	800f234 <lTCPWindowRxCheck+0x48>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
 800f222:	683a      	ldr	r2, [r7, #0]
 800f224:	6879      	ldr	r1, [r7, #4]
 800f226:	4897      	ldr	r0, [pc, #604]	; (800f484 <lTCPWindowRxCheck+0x298>)
 800f228:	f7f1 fbd4 	bl	80009d4 <vLoggingPrintf>
                    lReturn = -1;
 800f22c:	f04f 33ff 	mov.w	r3, #4294967295
 800f230:	627b      	str	r3, [r7, #36]	; 0x24
 800f232:	e122      	b.n	800f47a <lTCPWindowRxCheck+0x28e>
                }
                else
                {
                    ulCurrentSequenceNumber += ulLength;
 800f234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4413      	add	r3, r2
 800f23a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f242:	2b00      	cmp	r3, #0
 800f244:	d04e      	beq.n	800f2e4 <lTCPWindowRxCheck+0xf8>
                    {
                        ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	617b      	str	r3, [r7, #20]
                         * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                         * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                         * clean them out. */
                        do
                        {
                            pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	68b9      	ldr	r1, [r7, #8]
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f7ff ff4e 	bl	800f0f0 <xTCPWindowRxConfirm>
 800f254:	61b8      	str	r0, [r7, #24]

                            if( pxFound != NULL )
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <lTCPWindowRxCheck+0x76>
                            {
                                /* Remove it because it will be passed to user directly. */
                                vTCPWindowFree( pxFound );
 800f25c:	69b8      	ldr	r0, [r7, #24]
 800f25e:	f7ff fe49 	bl	800eef4 <vTCPWindowFree>
                            }
                        } while( pxFound != NULL );
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d1f0      	bne.n	800f24a <lTCPWindowRxCheck+0x5e>

                        /*  Check for following segments that are already in the
                         * queue and increment ulCurrentSequenceNumber. */
                        for( ; ; )
                        {
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800f268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f7ff fd3a 	bl	800ece4 <xTCPWindowRxFind>
 800f270:	61b8      	str	r0, [r7, #24]

                            if( pxFound == NULL )
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d009      	beq.n	800f28c <lTCPWindowRxCheck+0xa0>
                            {
                                break;
                            }

                            ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800f278:	69bb      	ldr	r3, [r7, #24]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	461a      	mov	r2, r3
 800f27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f280:	4413      	add	r3, r2
 800f282:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* As all packet below this one have been passed to the
                             * user it can be discarded. */
                            vTCPWindowFree( pxFound );
 800f284:	69b8      	ldr	r0, [r7, #24]
 800f286:	f7ff fe35 	bl	800eef4 <vTCPWindowFree>
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800f28a:	e7ed      	b.n	800f268 <lTCPWindowRxCheck+0x7c>
                                break;
 800f28c:	bf00      	nop
                        }

                        if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800f28e:	697a      	ldr	r2, [r7, #20]
 800f290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f292:	429a      	cmp	r2, r3
 800f294:	d026      	beq.n	800f2e4 <lTCPWindowRxCheck+0xf8>
                        {
                            /*  After the current data-package, there is more data
                             * to be popped. */
                            pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800f296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	1ad2      	subs	r2, r2, r3
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	631a      	str	r2, [r3, #48]	; 0x30

                            if( xTCPWindowLoggingLevel >= 1 )
 800f2a0:	4b79      	ldr	r3, [pc, #484]	; (800f488 <lTCPWindowRxCheck+0x29c>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	dd1d      	ble.n	800f2e4 <lTCPWindowRxCheck+0xf8>
                            {
                                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: retran %lu (Found %lu bytes at %lu cnt %ld)\n",
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f2ae:	461c      	mov	r4, r3
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f2b6:	461d      	mov	r5, r3
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	68ba      	ldr	r2, [r7, #8]
 800f2be:	1ad0      	subs	r0, r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c4:	68fa      	ldr	r2, [r7, #12]
 800f2c6:	68d2      	ldr	r2, [r2, #12]
 800f2c8:	6979      	ldr	r1, [r7, #20]
 800f2ca:	1a8a      	subs	r2, r1, r2
 800f2cc:	68f9      	ldr	r1, [r7, #12]
 800f2ce:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 800f2d2:	9102      	str	r1, [sp, #8]
 800f2d4:	9201      	str	r2, [sp, #4]
 800f2d6:	9300      	str	r3, [sp, #0]
 800f2d8:	4603      	mov	r3, r0
 800f2da:	462a      	mov	r2, r5
 800f2dc:	4621      	mov	r1, r4
 800f2de:	486b      	ldr	r0, [pc, #428]	; (800f48c <lTCPWindowRxCheck+0x2a0>)
 800f2e0:	f7f1 fb78 	bl	80009d4 <vLoggingPrintf>
                                                         listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                            }
                        }
                    }

                    pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2e8:	611a      	str	r2, [r3, #16]

                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    lReturn = 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	627b      	str	r3, [r7, #36]	; 0x24
 800f2ee:	e0c4      	b.n	800f47a <lTCPWindowRxCheck+0x28e>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d103      	bne.n	800f302 <lTCPWindowRxCheck+0x116>
            {
                /* Looks like a TCP keep-alive message.  Do not accept/store Rx data
                 * ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
                lReturn = -1;
 800f2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f2fe:	627b      	str	r3, [r7, #36]	; 0x24
 800f300:	e0bb      	b.n	800f47a <lTCPWindowRxCheck+0x28e>
                /* The packet is not the one expected.  See if it falls within the Rx
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */
                ulLast = ulSequenceNumber + ulLength;
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4413      	add	r3, r2
 800f308:	62bb      	str	r3, [r7, #40]	; 0x28

                ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 800f30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	623b      	str	r3, [r7, #32]
                /* The cast from unsigned long to signed long is on purpose. */
                lDistance = ( int32_t ) ulIntermediateResult;
 800f312:	6a3b      	ldr	r3, [r7, #32]
 800f314:	61fb      	str	r3, [r7, #28]

                if( lDistance <= 0 )
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dc03      	bgt.n	800f324 <lTCPWindowRxCheck+0x138>
                {
                    /* An earlier has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                    lReturn = -1;
 800f31c:	f04f 33ff 	mov.w	r3, #4294967295
 800f320:	627b      	str	r3, [r7, #36]	; 0x24
 800f322:	e0aa      	b.n	800f47a <lTCPWindowRxCheck+0x28e>
                }
                else if( lDistance > ( int32_t ) ulSpace )
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	69fa      	ldr	r2, [r7, #28]
 800f328:	429a      	cmp	r2, r3
 800f32a:	dd09      	ble.n	800f340 <lTCPWindowRxCheck+0x154>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	69f9      	ldr	r1, [r7, #28]
 800f332:	4857      	ldr	r0, [pc, #348]	; (800f490 <lTCPWindowRxCheck+0x2a4>)
 800f334:	f7f1 fb4e 	bl	80009d4 <vLoggingPrintf>
                    lReturn = -1;
 800f338:	f04f 33ff 	mov.w	r3, #4294967295
 800f33c:	627b      	str	r3, [r7, #36]	; 0x24
 800f33e:	e09c      	b.n	800f47a <lTCPWindowRxCheck+0x28e>
                     * This is useful because subsequent packets will be SACK'd with
                     * single one message
                     */
                    for( ; ; )
                    {
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800f340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f7ff fcce 	bl	800ece4 <xTCPWindowRxFind>
 800f348:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d006      	beq.n	800f35e <lTCPWindowRxCheck+0x172>
                        {
                            break;
                        }

                        ulLast += ( uint32_t ) pxFound->lDataLength;
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	461a      	mov	r2, r3
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	4413      	add	r3, r2
 800f35a:	62bb      	str	r3, [r7, #40]	; 0x28
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800f35c:	e7f0      	b.n	800f340 <lTCPWindowRxCheck+0x154>
                            break;
 800f35e:	bf00      	nop
                    }

                    if( xTCPWindowLoggingLevel >= 1 )
 800f360:	4b49      	ldr	r3, [pc, #292]	; (800f488 <lTCPWindowRxCheck+0x29c>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	dd1f      	ble.n	800f3a8 <lTCPWindowRxCheck+0x1bc>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f36e:	461d      	mov	r5, r3
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f376:	461e      	mov	r6, r3
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	68ba      	ldr	r2, [r7, #8]
 800f37e:	1ad4      	subs	r4, r2, r3
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	68b9      	ldr	r1, [r7, #8]
 800f38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f38c:	1a8a      	subs	r2, r1, r2
 800f38e:	68f9      	ldr	r1, [r7, #12]
 800f390:	68c9      	ldr	r1, [r1, #12]
 800f392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f394:	1a41      	subs	r1, r0, r1
 800f396:	9102      	str	r1, [sp, #8]
 800f398:	9201      	str	r2, [sp, #4]
 800f39a:	9300      	str	r3, [sp, #0]
 800f39c:	4623      	mov	r3, r4
 800f39e:	4632      	mov	r2, r6
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	483c      	ldr	r0, [pc, #240]	; (800f494 <lTCPWindowRxCheck+0x2a8>)
 800f3a4:	f7f1 fb16 	bl	80009d4 <vLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
                    }

                    /* Now prepare the SACK message.
                     * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
                    pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	4a3b      	ldr	r2, [pc, #236]	; (800f498 <lTCPWindowRxCheck+0x2ac>)
 800f3ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* First sequence number that we received. */
                    pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	061a      	lsls	r2, r3, #24
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	021b      	lsls	r3, r3, #8
 800f3b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3bc:	431a      	orrs	r2, r3
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	0a1b      	lsrs	r3, r3, #8
 800f3c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3c6:	431a      	orrs	r2, r3
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	0e1b      	lsrs	r3, r3, #24
 800f3cc:	431a      	orrs	r2, r3
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                    /* Last + 1 */
                    pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 800f3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d6:	061a      	lsls	r2, r3, #24
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	021b      	lsls	r3, r3, #8
 800f3dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3e0:	431a      	orrs	r2, r3
 800f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e4:	0a1b      	lsrs	r3, r3, #8
 800f3e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3ea:	431a      	orrs	r2, r3
 800f3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ee:	0e1b      	lsrs	r3, r3, #24
 800f3f0:	431a      	orrs	r2, r3
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

                    /* Which make 12 (3*4) option bytes. */
                    pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	220c      	movs	r2, #12
 800f3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                    pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800f400:	68b9      	ldr	r1, [r7, #8]
 800f402:	68f8      	ldr	r0, [r7, #12]
 800f404:	f7ff fc6e 	bl	800ece4 <xTCPWindowRxFind>
 800f408:	61b8      	str	r0, [r7, #24]

                    if( pxFound != NULL )
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d003      	beq.n	800f418 <lTCPWindowRxCheck+0x22c>
                    {
                        /* This out-of-sequence packet has been received for a
                         * second time.  It is already stored but do send a SACK
                         * again. */
                        lReturn = -1;
 800f410:	f04f 33ff 	mov.w	r3, #4294967295
 800f414:	627b      	str	r3, [r7, #36]	; 0x24
 800f416:	e030      	b.n	800f47a <lTCPWindowRxCheck+0x28e>
                    }
                    else
                    {
                        pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	2301      	movs	r3, #1
 800f41c:	68b9      	ldr	r1, [r7, #8]
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f7ff fc88 	bl	800ed34 <xTCPWindowNew>
 800f424:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d107      	bne.n	800f43c <lTCPWindowRxCheck+0x250>
                        {
                            /* Can not send a SACK, because the segment cannot be
                             * stored. */
                            pxWindow->ucOptionLength = 0U;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                            /* Needs to be stored but there is no segment
                             * available. */
                            lReturn = -1;
 800f434:	f04f 33ff 	mov.w	r3, #4294967295
 800f438:	627b      	str	r3, [r7, #36]	; 0x24
 800f43a:	e01e      	b.n	800f47a <lTCPWindowRxCheck+0x28e>
                        }
                        else
                        {
                            if( xTCPWindowLoggingLevel != 0 )
 800f43c:	4b12      	ldr	r3, [pc, #72]	; (800f488 <lTCPWindowRxCheck+0x29c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d014      	beq.n	800f46e <lTCPWindowRxCheck+0x282>
                            {
                                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %lu (cnt %lu)\n",
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f44a:	4619      	mov	r1, r3
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f452:	4618      	mov	r0, r3
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	1ad2      	subs	r2, r2, r3
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	4613      	mov	r3, r2
 800f466:	4602      	mov	r2, r0
 800f468:	480c      	ldr	r0, [pc, #48]	; (800f49c <lTCPWindowRxCheck+0x2b0>)
 800f46a:	f7f1 fab3 	bl	80009d4 <vLoggingPrintf>
                                FreeRTOS_flush_logging();
                            }

                            /* Return a positive value.  The packet may be accepted
                            * and stored but an earlier packet is still missing. */
                            ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 800f46e:	68ba      	ldr	r2, [r7, #8]
 800f470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	623b      	str	r3, [r7, #32]
                            lReturn = ( int32_t ) ulIntermediateResult;
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	627b      	str	r3, [r7, #36]	; 0x24
                        }
                    }
                }
            }

            return lReturn;
 800f47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800f47c:	4618      	mov	r0, r3
 800f47e:	3734      	adds	r7, #52	; 0x34
 800f480:	46bd      	mov	sp, r7
 800f482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f484:	08014d08 	.word	0x08014d08
 800f488:	20025114 	.word	0x20025114
 800f48c:	08014d4c 	.word	0x08014d4c
 800f490:	08014d94 	.word	0x08014d94
 800f494:	08014ddc 	.word	0x08014ddc
 800f498:	0a050101 	.word	0x0a050101
 800f49c:	08014e1c 	.word	0x08014e1c

0800f4a0 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 800f4a0:	b480      	push	{r7}
 800f4a2:	b087      	sub	sp, #28
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 800f4b4:	697a      	ldr	r2, [r7, #20]
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	db03      	blt.n	800f4c4 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 800f4bc:	697a      	ldr	r2, [r7, #20]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	1ad3      	subs	r3, r2, r3
 800f4c2:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 800f4c4:	697b      	ldr	r3, [r7, #20]
        }
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	371c      	adds	r7, #28
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
	...

0800f4d4 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b08c      	sub	sp, #48	; 0x30
 800f4d8:	af02      	add	r7, sp, #8
 800f4da:	60f8      	str	r0, [r7, #12]
 800f4dc:	60b9      	str	r1, [r7, #8]
 800f4de:	607a      	str	r2, [r7, #4]
 800f4e0:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	627b      	str	r3, [r7, #36]	; 0x24
            int32_t lDone = 0;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4f2:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( pxSegment != NULL )
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f000 80d6 	beq.w	800f6a8 <lTCPWindowTxAdd+0x1d4>
            {
                if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	689a      	ldr	r2, [r3, #8]
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	429a      	cmp	r2, r3
 800f506:	f280 80cf 	bge.w	800f6a8 <lTCPWindowTxAdd+0x1d4>
                {
                    if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	7d9b      	ldrb	r3, [r3, #22]
 800f50e:	f003 0301 	and.w	r3, r3, #1
 800f512:	b2db      	uxtb	r3, r3
 800f514:	2b00      	cmp	r3, #0
 800f516:	f040 80c7 	bne.w	800f6a8 <lTCPWindowTxAdd+0x1d4>
 800f51a:	69bb      	ldr	r3, [r7, #24]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f000 80c2 	beq.w	800f6a8 <lTCPWindowTxAdd+0x1d4>
                    {
                        /* Adding data to a segment that was already in the TX queue.  It
                         * will be filled-up to a maximum of MSS (maximum segment size). */
                        lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	685a      	ldr	r2, [r3, #4]
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	1ad3      	subs	r3, r2, r3
 800f52e:	4619      	mov	r1, r3
 800f530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f532:	f7ff faa9 	bl	800ea88 <FreeRTOS_min_int32>
 800f536:	6178      	str	r0, [r7, #20]

                        pxSegment->lDataLength += lToWrite;
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	689a      	ldr	r2, [r3, #8]
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	441a      	add	r2, r3
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	609a      	str	r2, [r3, #8]

                        if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	689a      	ldr	r2, [r3, #8]
 800f548:	69bb      	ldr	r3, [r7, #24]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	db02      	blt.n	800f556 <lTCPWindowTxAdd+0x82>
                        {
                            /* This segment is full, don't add more bytes. */
                            pxWindow->pxHeadSegment = NULL;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2200      	movs	r2, #0
 800f554:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        lBytesLeft -= lToWrite;
 800f556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	1ad3      	subs	r3, r2, r3
 800f55c:	627b      	str	r3, [r7, #36]	; 0x24

                        /* ulNextTxSequenceNumber is the sequence number of the next byte to
                         * be stored for transmission. */
                        pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	441a      	add	r2, r3
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Increased the return value. */
                        lDone += lToWrite;
 800f56a:	6a3a      	ldr	r2, [r7, #32]
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	4413      	add	r3, r2
 800f570:	623b      	str	r3, [r7, #32]

                        /* Some detailed logging, for those who're interested. */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800f572:	4b52      	ldr	r3, [pc, #328]	; (800f6bc <lTCPWindowTxAdd+0x1e8>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b01      	cmp	r3, #1
 800f578:	dd1a      	ble.n	800f5b0 <lTCPWindowTxAdd+0xdc>
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f580:	2b17      	cmp	r3, #23
 800f582:	d015      	beq.n	800f5b0 <lTCPWindowTxAdd+0xdc>
                        {
                            FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4lu bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	69db      	ldr	r3, [r3, #28]
 800f58c:	1ad1      	subs	r1, r2, r3
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	6898      	ldr	r0, [r3, #8]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	69db      	ldr	r3, [r3, #28]
 800f59a:	1ad3      	subs	r3, r2, r3
 800f59c:	69ba      	ldr	r2, [r7, #24]
 800f59e:	68d2      	ldr	r2, [r2, #12]
 800f5a0:	9201      	str	r2, [sp, #4]
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	460a      	mov	r2, r1
 800f5a8:	68b9      	ldr	r1, [r7, #8]
 800f5aa:	4845      	ldr	r0, [pc, #276]	; (800f6c0 <lTCPWindowTxAdd+0x1ec>)
 800f5ac:	f7f1 fa12 	bl	80009d4 <vLoggingPrintf>
                            FreeRTOS_flush_logging();
                        }

                        /* Calculate the next position in the circular data buffer, knowing
                         * its maximum length 'lMax'. */
                        lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800f5b0:	697a      	ldr	r2, [r7, #20]
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	69f8      	ldr	r0, [r7, #28]
 800f5b6:	f7ff ff73 	bl	800f4a0 <lTCPIncrementTxPosition>
 800f5ba:	61f8      	str	r0, [r7, #28]
                    }
                }
            }

            while( lBytesLeft > 0 )
 800f5bc:	e074      	b.n	800f6a8 <lTCPWindowTxAdd+0x1d4>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f7ff fbb1 	bl	800ed34 <xTCPWindowNew>
 800f5d2:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800f5d4:	69bb      	ldr	r3, [r7, #24]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d05e      	beq.n	800f698 <lTCPWindowTxAdd+0x1c4>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	4619      	mov	r1, r3
 800f5e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5e2:	f7ff fa51 	bl	800ea88 <FreeRTOS_min_int32>
 800f5e6:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	69fa      	ldr	r2, [r7, #28]
 800f5f2:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 800f5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	627b      	str	r3, [r7, #36]	; 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800f5fc:	697a      	ldr	r2, [r7, #20]
 800f5fe:	6839      	ldr	r1, [r7, #0]
 800f600:	69f8      	ldr	r0, [r7, #28]
 800f602:	f7ff ff4d 	bl	800f4a0 <lTCPIncrementTxPosition>
 800f606:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	441a      	add	r2, r3
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	635a      	str	r2, [r3, #52]	; 0x34
                    lDone += lToWrite;
 800f614:	6a3a      	ldr	r2, [r7, #32]
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	4413      	add	r3, r2
 800f61a:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	3318      	adds	r3, #24
 800f626:	4619      	mov	r1, r3
 800f628:	4610      	mov	r0, r2
 800f62a:	f7ff fab2 	bl	800eb92 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	689a      	ldr	r2, [r3, #8]
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	429a      	cmp	r2, r3
 800f638:	da03      	bge.n	800f642 <lTCPWindowTxAdd+0x16e>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	69ba      	ldr	r2, [r7, #24]
 800f63e:	67da      	str	r2, [r3, #124]	; 0x7c
 800f640:	e002      	b.n	800f648 <lTCPWindowTxAdd+0x174>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2200      	movs	r2, #0
 800f646:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f64e:	2b17      	cmp	r3, #23
 800f650:	d02a      	beq.n	800f6a8 <lTCPWindowTxAdd+0x1d4>
                    {
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f652:	4b1a      	ldr	r3, [pc, #104]	; (800f6bc <lTCPWindowTxAdd+0x1e8>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	2b02      	cmp	r3, #2
 800f658:	dc07      	bgt.n	800f66a <lTCPWindowTxAdd+0x196>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800f65a:	4b18      	ldr	r3, [pc, #96]	; (800f6bc <lTCPWindowTxAdd+0x1e8>)
 800f65c:	681b      	ldr	r3, [r3, #0]
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800f65e:	2b01      	cmp	r3, #1
 800f660:	dd22      	ble.n	800f6a8 <lTCPWindowTxAdd+0x1d4>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f666:	2b00      	cmp	r3, #0
 800f668:	d01e      	beq.n	800f6a8 <lTCPWindowTxAdd+0x1d4>
                        {
                            FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: New %4ld bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	69db      	ldr	r3, [r3, #28]
 800f672:	1ad1      	subs	r1, r2, r3
 800f674:	69bb      	ldr	r3, [r7, #24]
 800f676:	6898      	ldr	r0, [r3, #8]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	69db      	ldr	r3, [r3, #28]
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	69ba      	ldr	r2, [r7, #24]
 800f684:	68d2      	ldr	r2, [r2, #12]
 800f686:	9201      	str	r2, [sp, #4]
 800f688:	9300      	str	r3, [sp, #0]
 800f68a:	4603      	mov	r3, r0
 800f68c:	460a      	mov	r2, r1
 800f68e:	68b9      	ldr	r1, [r7, #8]
 800f690:	480c      	ldr	r0, [pc, #48]	; (800f6c4 <lTCPWindowTxAdd+0x1f0>)
 800f692:	f7f1 f99f 	bl	80009d4 <vLoggingPrintf>
 800f696:	e007      	b.n	800f6a8 <lTCPWindowTxAdd+0x1d4>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 800f698:	6a3b      	ldr	r3, [r7, #32]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d008      	beq.n	800f6b0 <lTCPWindowTxAdd+0x1dc>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
 800f69e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6a0:	4809      	ldr	r0, [pc, #36]	; (800f6c8 <lTCPWindowTxAdd+0x1f4>)
 800f6a2:	f7f1 f997 	bl	80009d4 <vLoggingPrintf>
                    }

                    break;
 800f6a6:	e003      	b.n	800f6b0 <lTCPWindowTxAdd+0x1dc>
            while( lBytesLeft > 0 )
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	dc87      	bgt.n	800f5be <lTCPWindowTxAdd+0xea>
 800f6ae:	e000      	b.n	800f6b2 <lTCPWindowTxAdd+0x1de>
                    break;
 800f6b0:	bf00      	nop
                }
            }

            return lDone;
 800f6b2:	6a3b      	ldr	r3, [r7, #32]
        }
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3728      	adds	r7, #40	; 0x28
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	20025114 	.word	0x20025114
 800f6c0:	08014e4c 	.word	0x08014e4c
 800f6c4:	08014e98 	.word	0x08014e98
 800f6c8:	08014ee4 	.word	0x08014ee4

0800f6cc <xTCPWindowTxDone>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d101      	bne.n	800f6e2 <xTCPWindowTxDone+0x16>
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e000      	b.n	800f6e4 <xTCPWindowTxDone+0x18>
 800f6e2:	2300      	movs	r3, #0
        }
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	3354      	adds	r3, #84	; 0x54
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7ff fbde 	bl	800eec0 <xTCPWindowPeekHead>
 800f704:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d102      	bne.n	800f712 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 800f70c:	2300      	movs	r3, #0
 800f70e:	613b      	str	r3, [r7, #16]
 800f710:	e02f      	b.n	800f772 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6a1b      	ldr	r3, [r3, #32]
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d306      	bcc.n	800f72c <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6a1b      	ldr	r3, [r3, #32]
 800f726:	1ad3      	subs	r3, r2, r3
 800f728:	617b      	str	r3, [r7, #20]
 800f72a:	e001      	b.n	800f730 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0UL;
 800f72c:	2300      	movs	r3, #0
 800f72e:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800f730:	6979      	ldr	r1, [r7, #20]
 800f732:	6838      	ldr	r0, [r7, #0]
 800f734:	f7ff f9b8 	bl	800eaa8 <FreeRTOS_min_uint32>
 800f738:	4602      	mov	r2, r0
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	1a9b      	subs	r3, r3, r2
 800f73e:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	461a      	mov	r2, r3
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	4293      	cmp	r3, r2
 800f74a:	d302      	bcc.n	800f752 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 800f74c:	2301      	movs	r3, #1
 800f74e:	613b      	str	r3, [r7, #16]
 800f750:	e001      	b.n	800f756 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 800f752:	2300      	movs	r3, #0
 800f754:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00a      	beq.n	800f772 <prvTCPWindowTxHasSpace+0x82>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	689a      	ldr	r2, [r3, #8]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	4619      	mov	r1, r3
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	440b      	add	r3, r1
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d201      	bcs.n	800f772 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 800f76e:	2300      	movs	r3, #0
 800f770:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 800f772:	693b      	ldr	r3, [r7, #16]
        }
 800f774:	4618      	mov	r0, r3
 800f776:	3718      	adds	r7, #24
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b088      	sub	sp, #32
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2200      	movs	r2, #0
 800f78c:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f792:	2b00      	cmp	r3, #0
 800f794:	d002      	beq.n	800f79c <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 800f796:	2301      	movs	r3, #1
 800f798:	61fb      	str	r3, [r7, #28]
 800f79a:	e04a      	b.n	800f832 <xTCPWindowTxHasData+0xb6>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	3368      	adds	r3, #104	; 0x68
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7ff fb8d 	bl	800eec0 <xTCPWindowPeekHead>
 800f7a6:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d019      	beq.n	800f7e2 <xTCPWindowTxHasData+0x66>
                {
                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	3310      	adds	r3, #16
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7ff fa0a 	bl	800ebcc <ulTimerGetAge>
 800f7b8:	6178      	str	r0, [r7, #20]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7be:	461a      	mov	r2, r3
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	7d1b      	ldrb	r3, [r3, #20]
 800f7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f7c8:	613b      	str	r3, [r7, #16]

                    if( ulMaxAge > ulAge )
 800f7ca:	693a      	ldr	r2, [r7, #16]
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d904      	bls.n	800f7dc <xTCPWindowTxHasData+0x60>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 800f7d2:	693a      	ldr	r2, [r7, #16]
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	1ad2      	subs	r2, r2, r3
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	61fb      	str	r3, [r7, #28]
 800f7e0:	e027      	b.n	800f832 <xTCPWindowTxHasData+0xb6>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	3354      	adds	r3, #84	; 0x54
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff fb6a 	bl	800eec0 <xTCPWindowPeekHead>
 800f7ec:	61b8      	str	r0, [r7, #24]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d102      	bne.n	800f7fa <xTCPWindowTxHasData+0x7e>
                    {
                        xReturn = pdFALSE;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	61fb      	str	r3, [r7, #28]
 800f7f8:	e01b      	b.n	800f832 <xTCPWindowTxHasData+0xb6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f7fa:	68b9      	ldr	r1, [r7, #8]
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f7ff ff77 	bl	800f6f0 <prvTCPWindowTxHasSpace>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d102      	bne.n	800f80e <xTCPWindowTxHasData+0x92>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 800f808:	2300      	movs	r3, #0
 800f80a:	61fb      	str	r3, [r7, #28]
 800f80c:	e011      	b.n	800f832 <xTCPWindowTxHasData+0xb6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	f003 0302 	and.w	r3, r3, #2
 800f816:	b2db      	uxtb	r3, r3
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d008      	beq.n	800f82e <xTCPWindowTxHasData+0xb2>
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	689a      	ldr	r2, [r3, #8]
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	429a      	cmp	r2, r3
 800f826:	da02      	bge.n	800f82e <xTCPWindowTxHasData+0xb2>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 800f828:	2300      	movs	r3, #0
 800f82a:	61fb      	str	r3, [r7, #28]
 800f82c:	e001      	b.n	800f832 <xTCPWindowTxHasData+0xb6>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 800f82e:	2301      	movs	r3, #1
 800f830:	61fb      	str	r3, [r7, #28]
                    }
                }
            }

            return xReturn;
 800f832:	69fb      	ldr	r3, [r7, #28]
        }
 800f834:	4618      	mov	r0, r3
 800f836:	3720      	adds	r7, #32
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 800f83c:	b590      	push	{r4, r7, lr}
 800f83e:	b08b      	sub	sp, #44	; 0x2c
 800f840:	af02      	add	r7, sp, #8
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulMaxTime;
            uint32_t ulReturn = ~0UL;
 800f848:	f04f 33ff 	mov.w	r3, #4294967295
 800f84c:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3340      	adds	r3, #64	; 0x40
 800f852:	4618      	mov	r0, r3
 800f854:	f7ff fb18 	bl	800ee88 <xTCPWindowGetHead>
 800f858:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	62da      	str	r2, [r3, #44]	; 0x2c

            if( pxSegment == NULL )
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	2b00      	cmp	r3, #0
 800f866:	f040 80a8 	bne.w	800f9ba <ulTCPWindowTxGet+0x17e>
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	3368      	adds	r3, #104	; 0x68
 800f86e:	4618      	mov	r0, r3
 800f870:	f7ff fb26 	bl	800eec0 <xTCPWindowPeekHead>
 800f874:	61f8      	str	r0, [r7, #28]

                if( pxSegment != NULL )
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d03e      	beq.n	800f8fa <ulTCPWindowTxGet+0xbe>
                {
                    /* Do check the timing. */
                    ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f880:	461a      	mov	r2, r3
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	7d1b      	ldrb	r3, [r3, #20]
 800f886:	fa02 f303 	lsl.w	r3, r2, r3
 800f88a:	617b      	str	r3, [r7, #20]

                    if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	3310      	adds	r3, #16
 800f890:	4618      	mov	r0, r3
 800f892:	f7ff f99b 	bl	800ebcc <ulTimerGetAge>
 800f896:	4602      	mov	r2, r0
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d22b      	bcs.n	800f8f6 <ulTCPWindowTxGet+0xba>
                    {
                        /* A normal (non-fast) retransmission.  Move it from the
                         * head of the waiting queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	3368      	adds	r3, #104	; 0x68
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7ff faf0 	bl	800ee88 <xTCPWindowGetHead>
 800f8a8:	61f8      	str	r0, [r7, #28]
                        pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	755a      	strb	r2, [r3, #21]

                        /* Some detailed logging. */
                        if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800f8b0:	4b81      	ldr	r3, [pc, #516]	; (800fab8 <ulTCPWindowTxGet+0x27c>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d020      	beq.n	800f8fa <ulTCPWindowTxGet+0xbe>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f8be:	2b17      	cmp	r3, #23
 800f8c0:	d01b      	beq.n	800f8fa <ulTCPWindowTxGet+0xbe>
                        {
                            FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %ld bytes for sequence number %lu (%lX)\n",
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f8d0:	461c      	mov	r4, r3
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	6899      	ldr	r1, [r3, #8]
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	69db      	ldr	r3, [r3, #28]
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	69fa      	ldr	r2, [r7, #28]
 800f8e2:	6812      	ldr	r2, [r2, #0]
 800f8e4:	9201      	str	r2, [sp, #4]
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	4622      	mov	r2, r4
 800f8ec:	4601      	mov	r1, r0
 800f8ee:	4873      	ldr	r0, [pc, #460]	; (800fabc <ulTCPWindowTxGet+0x280>)
 800f8f0:	f7f1 f870 	bl	80009d4 <vLoggingPrintf>
 800f8f4:	e001      	b.n	800f8fa <ulTCPWindowTxGet+0xbe>
                            FreeRTOS_flush_logging();
                        }
                    }
                    else
                    {
                        pxSegment = NULL;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	61fb      	str	r3, [r7, #28]
                    }
                }

                if( pxSegment == NULL )
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d178      	bne.n	800f9f2 <ulTCPWindowTxGet+0x1b6>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	3354      	adds	r3, #84	; 0x54
 800f904:	4618      	mov	r0, r3
 800f906:	f7ff fadb 	bl	800eec0 <xTCPWindowPeekHead>
 800f90a:	61f8      	str	r0, [r7, #28]

                    if( pxSegment == NULL )
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d102      	bne.n	800f918 <ulTCPWindowTxGet+0xdc>
                    {
                        /* No segments queued. */
                        ulReturn = 0UL;
 800f912:	2300      	movs	r3, #0
 800f914:	61bb      	str	r3, [r7, #24]
 800f916:	e06c      	b.n	800f9f2 <ulTCPWindowTxGet+0x1b6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	f003 0302 	and.w	r3, r3, #2
 800f920:	b2db      	uxtb	r3, r3
 800f922:	2b00      	cmp	r3, #0
 800f924:	d008      	beq.n	800f938 <ulTCPWindowTxGet+0xfc>
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	689a      	ldr	r2, [r3, #8]
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	429a      	cmp	r2, r3
 800f930:	da02      	bge.n	800f938 <ulTCPWindowTxGet+0xfc>
                    {
                        /* A segment has been queued but the driver waits until it
                         * has a full size of MSS. */
                        ulReturn = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	61bb      	str	r3, [r7, #24]
 800f936:	e05c      	b.n	800f9f2 <ulTCPWindowTxGet+0x1b6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800f938:	68b9      	ldr	r1, [r7, #8]
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f7ff fed8 	bl	800f6f0 <prvTCPWindowTxHasSpace>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d102      	bne.n	800f94c <ulTCPWindowTxGet+0x110>
                    {
                        /* Peer has no more space at this moment. */
                        ulReturn = 0;
 800f946:	2300      	movs	r3, #0
 800f948:	61bb      	str	r3, [r7, #24]
 800f94a:	e052      	b.n	800f9f2 <ulTCPWindowTxGet+0x1b6>
                    }
                    else
                    {
                        /* Move it out of the Tx queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	3354      	adds	r3, #84	; 0x54
 800f950:	4618      	mov	r0, r3
 800f952:	f7ff fa99 	bl	800ee88 <xTCPWindowGetHead>
 800f956:	61f8      	str	r0, [r7, #28]

                        /* Don't let pxHeadSegment point to this segment any more,
                         * so no more data will be added. */
                        if( pxWindow->pxHeadSegment == pxSegment )
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f95c:	69fa      	ldr	r2, [r7, #28]
 800f95e:	429a      	cmp	r2, r3
 800f960:	d102      	bne.n	800f968 <ulTCPWindowTxGet+0x12c>
                        {
                            pxWindow->pxHeadSegment = NULL;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2200      	movs	r2, #0
 800f966:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        /* pxWindow->tx.highest registers the highest sequence
                         * number in our transmission window. */
                        pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	69fa      	ldr	r2, [r7, #28]
 800f96e:	6892      	ldr	r2, [r2, #8]
 800f970:	441a      	add	r2, r3
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	629a      	str	r2, [r3, #40]	; 0x28

                        /* ...and more detailed logging */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800f976:	4b50      	ldr	r3, [pc, #320]	; (800fab8 <ulTCPWindowTxGet+0x27c>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	dd39      	ble.n	800f9f2 <ulTCPWindowTxGet+0x1b6>
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f984:	2b17      	cmp	r3, #23
 800f986:	d034      	beq.n	800f9f2 <ulTCPWindowTxGet+0x1b6>
                        {
                            FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %ld bytes for sequence number %lu (ws %lu)\n",
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f98e:	4618      	mov	r0, r3
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f996:	461c      	mov	r4, r3
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	6899      	ldr	r1, [r3, #8]
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	69db      	ldr	r3, [r3, #28]
 800f9a4:	1ad3      	subs	r3, r2, r3
 800f9a6:	68ba      	ldr	r2, [r7, #8]
 800f9a8:	9201      	str	r2, [sp, #4]
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	4622      	mov	r2, r4
 800f9b0:	4601      	mov	r1, r0
 800f9b2:	4843      	ldr	r0, [pc, #268]	; (800fac0 <ulTCPWindowTxGet+0x284>)
 800f9b4:	f7f1 f80e 	bl	80009d4 <vLoggingPrintf>
 800f9b8:	e01b      	b.n	800f9f2 <ulTCPWindowTxGet+0x1b6>
            }
            else
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 800f9ba:	4b3f      	ldr	r3, [pc, #252]	; (800fab8 <ulTCPWindowTxGet+0x27c>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d017      	beq.n	800f9f2 <ulTCPWindowTxGet+0x1b6>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %ld bytes for sequence number %lu (ws %lu)\n",
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f9d0:	461c      	mov	r4, r3
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	6899      	ldr	r1, [r3, #8]
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	69db      	ldr	r3, [r3, #28]
 800f9de:	1ad3      	subs	r3, r2, r3
 800f9e0:	68ba      	ldr	r2, [r7, #8]
 800f9e2:	9201      	str	r2, [sp, #4]
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	4622      	mov	r2, r4
 800f9ea:	4601      	mov	r1, r0
 800f9ec:	4835      	ldr	r0, [pc, #212]	; (800fac4 <ulTCPWindowTxGet+0x288>)
 800f9ee:	f7f0 fff1 	bl	80009d4 <vLoggingPrintf>
                    FreeRTOS_flush_logging();
                }
            }

            /* See if it has already been determined to return 0. */
            if( ulReturn != 0UL )
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d05a      	beq.n	800faae <ulTCPWindowTxGet+0x272>
            {
                /* pxSegment is not NULL when ulReturn != 0UL. */
                configASSERT( pxSegment != NULL );
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d104      	bne.n	800fa08 <ulTCPWindowTxGet+0x1cc>
 800f9fe:	4932      	ldr	r1, [pc, #200]	; (800fac8 <ulTCPWindowTxGet+0x28c>)
 800fa00:	f240 60d9 	movw	r0, #1753	; 0x6d9
 800fa04:	f7f1 f80f 	bl	8000a26 <vAssertCalled>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d004      	beq.n	800fa1a <ulTCPWindowTxGet+0x1de>
 800fa10:	492d      	ldr	r1, [pc, #180]	; (800fac8 <ulTCPWindowTxGet+0x28c>)
 800fa12:	f240 60da 	movw	r0, #1754	; 0x6da
 800fa16:	f7f1 f806 	bl	8000a26 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	3318      	adds	r3, #24
 800fa24:	4619      	mov	r1, r3
 800fa26:	4610      	mov	r0, r2
 800fa28:	f7ff f8b3 	bl	800eb92 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800fa2c:	69fa      	ldr	r2, [r7, #28]
 800fa2e:	7d93      	ldrb	r3, [r2, #22]
 800fa30:	f043 0301 	orr.w	r3, r3, #1
 800fa34:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	7d1b      	ldrb	r3, [r3, #20]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	b2da      	uxtb	r2, r3
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	7d1b      	ldrb	r3, [r3, #20]
 800fa46:	2b04      	cmp	r3, #4
 800fa48:	d121      	bne.n	800fa8e <ulTCPWindowTxGet+0x252>
                {
                    if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	689a      	ldr	r2, [r3, #8]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800fa54:	005b      	lsls	r3, r3, #1
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d919      	bls.n	800fa8e <ulTCPWindowTxGet+0x252>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800fa60:	4619      	mov	r1, r3
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fa68:	4618      	mov	r0, r3
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	689a      	ldr	r2, [r3, #8]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800fa74:	005b      	lsls	r3, r3, #1
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	4813      	ldr	r0, [pc, #76]	; (800facc <ulTCPWindowTxGet+0x290>)
 800fa7e:	f7f0 ffa9 	bl	80009d4 <vLoggingPrintf>
                                                 pxWindow->usPeerPortNumber,
                                                 pxWindow->usOurPortNumber,
                                                 pxWindow->xSize.ulTxWindowLength,
                                                 2U * pxWindow->usMSS ) );
                        pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800fa88:	005a      	lsls	r2, r3, #1
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	609a      	str	r2, [r3, #8]
                    }
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	3310      	adds	r3, #16
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7ff f88d 	bl	800ebb2 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	68da      	ldr	r2, [r3, #12]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 800faae:	69bb      	ldr	r3, [r7, #24]
        }
 800fab0:	4618      	mov	r0, r3
 800fab2:	3724      	adds	r7, #36	; 0x24
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd90      	pop	{r4, r7, pc}
 800fab8:	20025114 	.word	0x20025114
 800fabc:	08014f20 	.word	0x08014f20
 800fac0:	08014f6c 	.word	0x08014f6c
 800fac4:	08014fbc 	.word	0x08014fbc
 800fac8:	08014c2c 	.word	0x08014c2c
 800facc:	0801500c 	.word	0x0801500c

0800fad0 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 800fad0:	b5b0      	push	{r4, r5, r7, lr}
 800fad2:	b092      	sub	sp, #72	; 0x48
 800fad4:	af04      	add	r7, sp, #16
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 800fadc:	2300      	movs	r3, #0
 800fade:	637b      	str	r3, [r7, #52]	; 0x34
            uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	633b      	str	r3, [r7, #48]	; 0x30
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	3398      	adds	r3, #152	; 0x98
 800fae8:	627b      	str	r3, [r7, #36]	; 0x24
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 800faea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	62fb      	str	r3, [r7, #44]	; 0x2c

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800faf0:	e0d4      	b.n	800fc9c <prvTCPWindowTxCheckAck+0x1cc>
            {
                xDoUnlink = pdFALSE;
 800faf2:	2300      	movs	r3, #0
 800faf4:	62bb      	str	r3, [r7, #40]	; 0x28
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7fe ffe4 	bl	800eac8 <vCastPointerTo_TCPSegment_t>
 800fb00:	6238      	str	r0, [r7, #32]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800fb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800fb08:	6a3b      	ldr	r3, [r7, #32]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb10:	f7ff f812 	bl	800eb38 <xSequenceGreaterThan>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d000      	beq.n	800fb1c <prvTCPWindowTxCheckAck+0x4c>
                {
                    continue;
 800fb1a:	e0bf      	b.n	800fc9c <prvTCPWindowTxCheckAck+0x1cc>
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800fb1c:	6a3b      	ldr	r3, [r7, #32]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb22:	429a      	cmp	r2, r3
 800fb24:	f040 80c7 	bne.w	800fcb6 <prvTCPWindowTxCheckAck+0x1e6>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800fb28:	6a3b      	ldr	r3, [r7, #32]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	61fb      	str	r3, [r7, #28]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800fb2e:	6a3b      	ldr	r3, [r7, #32]
 800fb30:	7d9b      	ldrb	r3, [r3, #22]
 800fb32:	f003 0302 	and.w	r3, r3, #2
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d171      	bne.n	800fc20 <prvTCPWindowTxCheckAck+0x150>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 800fb3c:	6a3b      	ldr	r3, [r7, #32]
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	4413      	add	r3, r2
 800fb44:	6879      	ldr	r1, [r7, #4]
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fe fff6 	bl	800eb38 <xSequenceGreaterThan>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d023      	beq.n	800fb9a <prvTCPWindowTxCheckAck+0xca>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                            {
                                uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 800fb52:	6a3b      	ldr	r3, [r7, #32]
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	1ad3      	subs	r3, r2, r3
 800fb5c:	617b      	str	r3, [r7, #20]
                                FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %lu - %lu Partial sequence number %lu - %lu\n",
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800fb64:	461c      	mov	r4, r3
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fb6c:	461d      	mov	r5, r3
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	69db      	ldr	r3, [r3, #28]
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	1ad0      	subs	r0, r2, r3
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	69db      	ldr	r3, [r3, #28]
 800fb7a:	687a      	ldr	r2, [r7, #4]
 800fb7c:	1ad3      	subs	r3, r2, r3
 800fb7e:	6979      	ldr	r1, [r7, #20]
 800fb80:	69fa      	ldr	r2, [r7, #28]
 800fb82:	440a      	add	r2, r1
 800fb84:	9202      	str	r2, [sp, #8]
 800fb86:	697a      	ldr	r2, [r7, #20]
 800fb88:	9201      	str	r2, [sp, #4]
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	462a      	mov	r2, r5
 800fb90:	4621      	mov	r1, r4
 800fb92:	484c      	ldr	r0, [pc, #304]	; (800fcc4 <prvTCPWindowTxCheckAck+0x1f4>)
 800fb94:	f7f0 ff1e 	bl	80009d4 <vLoggingPrintf>
                                                         ulFirstSeq - pxWindow->tx.ulFirstSequenceNumber,
                                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                         ulFirstSeq, ulFirstSeq + ulDataLength ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */
                        break;
 800fb98:	e08e      	b.n	800fcb8 <prvTCPWindowTxCheckAck+0x1e8>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 800fb9a:	6a3a      	ldr	r2, [r7, #32]
 800fb9c:	7d93      	ldrb	r3, [r2, #22]
 800fb9e:	f043 0302 	orr.w	r3, r3, #2
 800fba2:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 800fba4:	6a3b      	ldr	r3, [r7, #32]
 800fba6:	7d1b      	ldrb	r3, [r3, #20]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d137      	bne.n	800fc1c <prvTCPWindowTxCheckAck+0x14c>
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d130      	bne.n	800fc1c <prvTCPWindowTxCheckAck+0x14c>
                    {
                        int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 800fbba:	6a3b      	ldr	r3, [r7, #32]
 800fbbc:	3310      	adds	r3, #16
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7ff f804 	bl	800ebcc <ulTimerGetAge>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	61bb      	str	r3, [r7, #24]

                        if( pxWindow->lSRTT >= mS )
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbcc:	69ba      	ldr	r2, [r7, #24]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	dc0e      	bgt.n	800fbf0 <prvTCPWindowTxCheckAck+0x120>
                        {
                            /* RTT becomes smaller: adapt slowly. */
                            pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	00db      	lsls	r3, r3, #3
 800fbda:	1a9a      	subs	r2, r3, r2
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	4413      	add	r3, r2
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	da00      	bge.n	800fbe6 <prvTCPWindowTxCheckAck+0x116>
 800fbe4:	3307      	adds	r3, #7
 800fbe6:	10db      	asrs	r3, r3, #3
 800fbe8:	461a      	mov	r2, r3
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	639a      	str	r2, [r3, #56]	; 0x38
 800fbee:	e00e      	b.n	800fc0e <prvTCPWindowTxCheckAck+0x13e>
                        }
                        else
                        {
                            /* RTT becomes larger: adapt quicker */
                            pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	441a      	add	r2, r3
 800fbfa:	69bb      	ldr	r3, [r7, #24]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	005b      	lsls	r3, r3, #1
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	da00      	bge.n	800fc06 <prvTCPWindowTxCheckAck+0x136>
 800fc04:	3307      	adds	r3, #7
 800fc06:	10db      	asrs	r3, r3, #3
 800fc08:	461a      	mov	r2, r3
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Cap to the minimum of 50ms. */
                        if( pxWindow->lSRTT < winSRTT_CAP_mS )
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc12:	2b31      	cmp	r3, #49	; 0x31
 800fc14:	dc02      	bgt.n	800fc1c <prvTCPWindowTxCheckAck+0x14c>
                        {
                            pxWindow->lSRTT = winSRTT_CAP_mS;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2232      	movs	r2, #50	; 0x32
 800fc1a:	639a      	str	r2, [r3, #56]	; 0x38
                        }
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	62bb      	str	r3, [r7, #40]	; 0x28
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	6a1b      	ldr	r3, [r3, #32]
 800fc24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d128      	bne.n	800fc7c <prvTCPWindowTxCheckAck+0x1ac>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800fc2a:	4b27      	ldr	r3, [pc, #156]	; (800fcc8 <prvTCPWindowTxCheckAck+0x1f8>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	dd15      	ble.n	800fc5e <prvTCPWindowTxCheckAck+0x18e>
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fc38:	2b17      	cmp	r3, #23
 800fc3a:	d010      	beq.n	800fc5e <prvTCPWindowTxCheckAck+0x18e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %lu - %lu Ready sequence number %lu\n",
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	69db      	ldr	r3, [r3, #28]
 800fc40:	68ba      	ldr	r2, [r7, #8]
 800fc42:	1ad1      	subs	r1, r2, r3
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	69db      	ldr	r3, [r3, #28]
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	1ad0      	subs	r0, r2, r3
 800fc4c:	6a3b      	ldr	r3, [r7, #32]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	69db      	ldr	r3, [r3, #28]
 800fc54:	1ad3      	subs	r3, r2, r3
 800fc56:	4602      	mov	r2, r0
 800fc58:	481c      	ldr	r0, [pc, #112]	; (800fccc <prvTCPWindowTxCheckAck+0x1fc>)
 800fc5a:	f7f0 febb 	bl	80009d4 <vLoggingPrintf>
                                                 ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                 pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6a1a      	ldr	r2, [r3, #32]
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	441a      	add	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 800fc6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	4413      	add	r3, r2
 800fc70:	637b      	str	r3, [r7, #52]	; 0x34

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 800fc72:	6a38      	ldr	r0, [r7, #32]
 800fc74:	f7ff f93e 	bl	800eef4 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	62bb      	str	r3, [r7, #40]	; 0x28
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 800fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d008      	beq.n	800fc94 <prvTCPWindowTxCheckAck+0x1c4>
 800fc82:	6a3b      	ldr	r3, [r7, #32]
 800fc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d004      	beq.n	800fc94 <prvTCPWindowTxCheckAck+0x1c4>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 800fc8a:	6a3b      	ldr	r3, [r7, #32]
 800fc8c:	3318      	adds	r3, #24
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7f4 fec4 	bl	8004a1c <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 800fc94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	4413      	add	r3, r2
 800fc9a:	633b      	str	r3, [r7, #48]	; 0x30
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800fc9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d009      	beq.n	800fcb8 <prvTCPWindowTxCheckAck+0x1e8>
 800fca4:	6879      	ldr	r1, [r7, #4]
 800fca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fca8:	f7fe ff2f 	bl	800eb0a <xSequenceLessThan>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	f47f af1f 	bne.w	800faf2 <prvTCPWindowTxCheckAck+0x22>
 800fcb4:	e000      	b.n	800fcb8 <prvTCPWindowTxCheckAck+0x1e8>
                    break;
 800fcb6:	bf00      	nop
            }

            return ulBytesConfirmed;
 800fcb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        }
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3738      	adds	r7, #56	; 0x38
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bdb0      	pop	{r4, r5, r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	08015044 	.word	0x08015044
 800fcc8:	20025114 	.word	0x20025114
 800fccc:	08015090 	.word	0x08015090

0800fcd0 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b086      	sub	sp, #24
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0UL;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	613b      	str	r3, [r7, #16]

            /* A higher Tx block has been acknowledged.  Now iterate through the
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	3370      	adds	r3, #112	; 0x70
 800fce2:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800fcea:	e04c      	b.n	800fd86 <prvTCPWindowFastRetransmit+0xb6>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fe fee9 	bl	800eac8 <vCastPointerTo_TCPSegment_t>
 800fcf6:	60b8      	str	r0, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	7d9b      	ldrb	r3, [r3, #22]
 800fd02:	f003 0302 	and.w	r3, r3, #2
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d13c      	bne.n	800fd86 <prvTCPWindowFastRetransmit+0xb6>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6839      	ldr	r1, [r7, #0]
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fe fef9 	bl	800eb0a <xSequenceLessThan>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d033      	beq.n	800fd86 <prvTCPWindowFastRetransmit+0xb6>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	7d5b      	ldrb	r3, [r3, #21]
 800fd22:	3301      	adds	r3, #1
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	7d5b      	ldrb	r3, [r3, #21]
 800fd2e:	2b03      	cmp	r3, #3
 800fd30:	d129      	bne.n	800fd86 <prvTCPWindowFastRetransmit+0xb6>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	2200      	movs	r2, #0
 800fd36:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800fd38:	4b17      	ldr	r3, [pc, #92]	; (800fd98 <prvTCPWindowFastRetransmit+0xc8>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	db11      	blt.n	800fd64 <prvTCPWindowFastRetransmit+0x94>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fd46:	2b17      	cmp	r3, #23
 800fd48:	d00c      	beq.n	800fd64 <prvTCPWindowFastRetransmit+0x94>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %lu < %lu\n",
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	69db      	ldr	r3, [r3, #28]
 800fd52:	1ad1      	subs	r1, r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	69db      	ldr	r3, [r3, #28]
 800fd58:	683a      	ldr	r2, [r7, #0]
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	480f      	ldr	r0, [pc, #60]	; (800fd9c <prvTCPWindowFastRetransmit+0xcc>)
 800fd60:	f7f0 fe38 	bl	80009d4 <vLoggingPrintf>
                                                         ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
                                FreeRTOS_flush_logging();
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	3318      	adds	r3, #24
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7f4 fe57 	bl	8004a1c <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	3318      	adds	r3, #24
 800fd78:	4619      	mov	r1, r3
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	f7fe ff09 	bl	800eb92 <vListInsertFifo>
                            ulCount++;
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	3301      	adds	r3, #1
 800fd84:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 800fd86:	697a      	ldr	r2, [r7, #20]
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d1ae      	bne.n	800fcec <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 800fd8e:	693b      	ldr	r3, [r7, #16]
        }
 800fd90:	4618      	mov	r0, r3
 800fd92:	3718      	adds	r7, #24
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	20025114 	.word	0x20025114
 800fd9c:	080150d0 	.word	0x080150d0

0800fda0 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence, ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6a1b      	ldr	r3, [r3, #32]
 800fdae:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 800fdb0:	68b9      	ldr	r1, [r7, #8]
 800fdb2:	6838      	ldr	r0, [r7, #0]
 800fdb4:	f7fe fe93 	bl	800eade <xSequenceLessThanOrEqual>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d002      	beq.n	800fdc4 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0UL;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	60fb      	str	r3, [r7, #12]
 800fdc2:	e005      	b.n	800fdd0 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	68b9      	ldr	r1, [r7, #8]
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f7ff fe81 	bl	800fad0 <prvTCPWindowTxCheckAck>
 800fdce:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
        }
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3710      	adds	r7, #16
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
	...

0800fddc <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 800fddc:	b5b0      	push	{r4, r5, r7, lr}
 800fdde:	b088      	sub	sp, #32
 800fde0:	af02      	add	r7, sp, #8
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6a1b      	ldr	r3, [r3, #32]
 800fdec:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	68b9      	ldr	r1, [r7, #8]
 800fdf2:	68f8      	ldr	r0, [r7, #12]
 800fdf4:	f7ff fe6c 	bl	800fad0 <prvTCPWindowTxCheckAck>
 800fdf8:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 800fdfa:	68b9      	ldr	r1, [r7, #8]
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f7ff ff67 	bl	800fcd0 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 800fe02:	4b16      	ldr	r3, [pc, #88]	; (800fe5c <ulTCPWindowTxSack+0x80>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	dd23      	ble.n	800fe52 <ulTCPWindowTxSack+0x76>
 800fe0a:	6979      	ldr	r1, [r7, #20]
 800fe0c:	68b8      	ldr	r0, [r7, #8]
 800fe0e:	f7fe fe93 	bl	800eb38 <xSequenceGreaterThan>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d01c      	beq.n	800fe52 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %lu to %lu (ack = %lu)\n",
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800fe1e:	461c      	mov	r4, r3
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fe26:	461d      	mov	r5, r3
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	69db      	ldr	r3, [r3, #28]
 800fe2c:	68ba      	ldr	r2, [r7, #8]
 800fe2e:	1ad0      	subs	r0, r2, r3
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	69db      	ldr	r3, [r3, #28]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	1ad3      	subs	r3, r2, r3
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	6a11      	ldr	r1, [r2, #32]
 800fe3c:	68fa      	ldr	r2, [r7, #12]
 800fe3e:	69d2      	ldr	r2, [r2, #28]
 800fe40:	1a8a      	subs	r2, r1, r2
 800fe42:	9201      	str	r2, [sp, #4]
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	4603      	mov	r3, r0
 800fe48:	462a      	mov	r2, r5
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	4804      	ldr	r0, [pc, #16]	; (800fe60 <ulTCPWindowTxSack+0x84>)
 800fe4e:	f7f0 fdc1 	bl	80009d4 <vLoggingPrintf>
                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                         pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                FreeRTOS_flush_logging();
            }

            return ulAckCount;
 800fe52:	693b      	ldr	r3, [r7, #16]
        }
 800fe54:	4618      	mov	r0, r3
 800fe56:	3718      	adds	r7, #24
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bdb0      	pop	{r4, r5, r7, pc}
 800fe5c:	20025114 	.word	0x20025114
 800fe60:	08015110 	.word	0x08015110

0800fe64 <vCastPointerTo_UDPPacket_t>:
    {
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 800fe6c:	687b      	ldr	r3, [r7, #4]
    }
 800fe6e:	4618      	mov	r0, r3
 800fe70:	370c      	adds	r7, #12
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr

0800fe7a <vCastConstPointerTo_UDPPacket_t>:
    {
 800fe7a:	b480      	push	{r7}
 800fe7c:	b083      	sub	sp, #12
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 800fe82:	687b      	ldr	r3, [r7, #4]
    }
 800fe84:	4618      	mov	r0, r3
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer: The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b08c      	sub	sp, #48	; 0x30
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	695b      	ldr	r3, [r3, #20]
 800fe9c:	60fb      	str	r3, [r7, #12]
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    /* Map the UDP packet onto the start of the frame. */
    pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	699b      	ldr	r3, [r3, #24]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7ff ffde 	bl	800fe64 <vCastPointerTo_UDPPacket_t>
 800fea8:	6278      	str	r0, [r7, #36]	; 0x24
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	69db      	ldr	r3, [r3, #28]
 800feae:	3b2a      	subs	r3, #42	; 0x2a
 800feb0:	623b      	str	r3, [r7, #32]
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 800feb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feb4:	f107 030c 	add.w	r3, r7, #12
 800feb8:	4611      	mov	r1, r2
 800feba:	4618      	mov	r0, r3
 800febc:	f7f7 fe70 	bl	8007ba0 <eARPGetCacheEntry>
 800fec0:	4603      	mov	r3, r0
 800fec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( eReturned != eCantSendPacket )
 800fec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d06d      	beq.n	800ffaa <vProcessGeneratedUDPPacket+0x11a>
    {
        if( eReturned == eARPCacheHit )
 800fece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d156      	bne.n	800ff84 <vProcessGeneratedUDPPacket+0xf4>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 800fed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed8:	330e      	adds	r3, #14
 800feda:	61fb      	str	r3, [r7, #28]
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800fedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fede:	3322      	adds	r3, #34	; 0x22
 800fee0:	61bb      	str	r3, [r7, #24]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	8c1a      	ldrh	r2, [r3, #32]
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 800fef2:	6a3b      	ldr	r3, [r7, #32]
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	3308      	adds	r3, #8
 800fef8:	b29a      	uxth	r2, r3
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	889b      	ldrh	r3, [r3, #4]
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	021b      	lsls	r3, r3, #8
 800ff06:	b21a      	sxth	r2, r3
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	889b      	ldrh	r3, [r3, #4]
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	0a1b      	lsrs	r3, r3, #8
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	b21b      	sxth	r3, r3
 800ff14:	4313      	orrs	r3, r2
 800ff16:	b21b      	sxth	r3, r3
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	2200      	movs	r2, #0
 800ff22:	719a      	strb	r2, [r3, #6]
 800ff24:	2200      	movs	r2, #0
 800ff26:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = xDefaultPartUDPPacketHeader.ucBytes;
 800ff28:	4b33      	ldr	r3, [pc, #204]	; (800fff8 <vProcessGeneratedUDPPacket+0x168>)
 800ff2a:	617b      	str	r3, [r7, #20]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	699b      	ldr	r3, [r3, #24]
 800ff30:	3306      	adds	r3, #6
 800ff32:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 800ff34:	2218      	movs	r2, #24
 800ff36:	6979      	ldr	r1, [r7, #20]
 800ff38:	6938      	ldr	r0, [r7, #16]
 800ff3a:	f001 fc5a 	bl	80117f2 <memcpy>
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 800ff3e:	6a3b      	ldr	r3, [r7, #32]
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	331c      	adds	r3, #28
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	69fb      	ldr	r3, [r7, #28]
 800ff48:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	885b      	ldrh	r3, [r3, #2]
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	021b      	lsls	r3, r3, #8
 800ff52:	b21a      	sxth	r2, r3
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	885b      	ldrh	r3, [r3, #2]
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	0a1b      	lsrs	r3, r3, #8
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	b21b      	sxth	r3, r3
 800ff60:	4313      	orrs	r3, r2
 800ff62:	b21b      	sxth	r3, r3
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	695a      	ldr	r2, [r3, #20]
 800ff6e:	69fb      	ldr	r3, [r7, #28]
 800ff70:	611a      	str	r2, [r3, #16]

            #if ( ipconfigUSE_LLMNR == 1 )
                {
                    /* LLMNR messages are typically used on a LAN and they're
                     * not supposed to cross routers */
                    if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	695b      	ldr	r3, [r3, #20]
 800ff76:	4a21      	ldr	r2, [pc, #132]	; (800fffc <vProcessGeneratedUDPPacket+0x16c>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d116      	bne.n	800ffaa <vProcessGeneratedUDPPacket+0x11a>
                    {
                        pxIPHeader->ucTimeToLive = 0x01;
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	2201      	movs	r2, #1
 800ff80:	721a      	strb	r2, [r3, #8]
 800ff82:	e012      	b.n	800ffaa <vProcessGeneratedUDPPacket+0x11a>
                        pxUDPPacket->xUDPHeader.usChecksum = 0U;
                    }
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 800ff84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d10b      	bne.n	800ffa4 <vProcessGeneratedUDPPacket+0x114>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress );
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	4619      	mov	r1, r3
 800ff90:	2000      	movs	r0, #0
 800ff92:	f7f7 fd0d 	bl	80079b0 <vARPRefreshCacheEntry>

            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
            pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800ff96:	68fa      	ldr	r2, [r7, #12]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	615a      	str	r2, [r3, #20]
            vARPGenerateRequestPacket( pxNetworkBuffer );
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f7f7 ff8f 	bl	8007ec0 <vARPGenerateRequestPacket>
 800ffa2:	e002      	b.n	800ffaa <vProcessGeneratedUDPPacket+0x11a>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 800ffa4:	2302      	movs	r3, #2
 800ffa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    if( eReturned != eCantSendPacket )
 800ffaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	d01b      	beq.n	800ffea <vProcessGeneratedUDPPacket+0x15a>
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	69db      	ldr	r3, [r3, #28]
 800ffb6:	2b3b      	cmp	r3, #59	; 0x3b
 800ffb8:	d812      	bhi.n	800ffe0 <vProcessGeneratedUDPPacket+0x150>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	69db      	ldr	r3, [r3, #28]
 800ffbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800ffc0:	e008      	b.n	800ffd4 <vProcessGeneratedUDPPacket+0x144>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	699a      	ldr	r2, [r3, #24]
 800ffc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc8:	4413      	add	r3, r2
 800ffca:	2200      	movs	r2, #0
 800ffcc:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800ffce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ffd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd6:	2b3b      	cmp	r3, #59	; 0x3b
 800ffd8:	ddf3      	ble.n	800ffc2 <vProcessGeneratedUDPPacket+0x132>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	223c      	movs	r2, #60	; 0x3c
 800ffde:	61da      	str	r2, [r3, #28]
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800ffe0:	2101      	movs	r1, #1
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 face 	bl	8010584 <xNetworkInterfaceOutput>
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 800ffe8:	e002      	b.n	800fff0 <vProcessGeneratedUDPPacket+0x160>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f001 fb7c 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
}
 800fff0:	bf00      	nop
 800fff2:	3730      	adds	r7, #48	; 0x30
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	20000018 	.word	0x20000018
 800fffc:	fc0000e0 	.word	0xfc0000e0

08010000 <xProcessReceivedUDPPacket>:
 *
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b086      	sub	sp, #24
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	460b      	mov	r3, r1
 801000a:	807b      	strh	r3, [r7, #2]
    BaseType_t xReturn = pdPASS;
 801000c:	2301      	movs	r3, #1
 801000e:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    configASSERT( pxNetworkBuffer != NULL );
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d104      	bne.n	8010020 <xProcessReceivedUDPPacket+0x20>
 8010016:	4945      	ldr	r1, [pc, #276]	; (801012c <xProcessReceivedUDPPacket+0x12c>)
 8010018:	f44f 7092 	mov.w	r0, #292	; 0x124
 801001c:	f7f0 fd03 	bl	8000a26 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	699b      	ldr	r3, [r3, #24]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d104      	bne.n	8010032 <xProcessReceivedUDPPacket+0x32>
 8010028:	4940      	ldr	r1, [pc, #256]	; (801012c <xProcessReceivedUDPPacket+0x12c>)
 801002a:	f240 1025 	movw	r0, #293	; 0x125
 801002e:	f7f0 fcfa 	bl	8000a26 <vAssertCalled>

    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
    const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	699b      	ldr	r3, [r3, #24]
 8010036:	4618      	mov	r0, r3
 8010038:	f7ff ff1f 	bl	800fe7a <vCastConstPointerTo_UDPPacket_t>
 801003c:	6138      	str	r0, [r7, #16]

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 801003e:	887b      	ldrh	r3, [r7, #2]
 8010040:	4618      	mov	r0, r3
 8010042:	f7fa fdbd 	bl	800abc0 <pxUDPSocketLookup>
 8010046:	60f8      	str	r0, [r7, #12]

    if( pxSocket != NULL )
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d033      	beq.n	80100b6 <xProcessReceivedUDPPacket+0xb6>
    {
        /* When refreshing the ARP cache with received UDP packets we must be
         * careful;  hundreds of broadcast messages may pass and if we're not
         * handling them, no use to fill the ARP cache with those IP addresses. */
        vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	1d9a      	adds	r2, r3, #6
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	f7f7 fca8 	bl	80079b0 <vARPRefreshCacheEntry>
            if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
        #else
            /* xReturn is still pdPASS. */
        #endif
        {
            vTaskSuspendAll();
 8010060:	f7f5 fd9e 	bl	8005ba0 <vTaskSuspendAll>
            {
                taskENTER_CRITICAL();
 8010064:	f7f7 faf8 	bl	8007658 <vPortEnterCritical>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	3338      	adds	r3, #56	; 0x38
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	4611      	mov	r1, r2
 8010070:	4618      	mov	r0, r3
 8010072:	f7f4 fc76 	bl	8004962 <vListInsertEnd>
                }
                taskEXIT_CRITICAL();
 8010076:	f7f7 fb1b 	bl	80076b0 <vPortExitCritical>
            }
            ( void ) xTaskResumeAll();
 801007a:	f7f5 fd9f 	bl	8005bbc <xTaskResumeAll>

            /* Set the socket's receive event */
            if( pxSocket->xEventGroup != NULL )
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d005      	beq.n	8010092 <xProcessReceivedUDPPacket+0x92>
            {
                ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	2101      	movs	r1, #1
 801008c:	4618      	mov	r0, r3
 801008e:	f7f4 fb69 	bl	8004764 <xEventGroupSetBits>
            }

            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010096:	2b00      	cmp	r3, #0
 8010098:	d043      	beq.n	8010122 <xProcessReceivedUDPPacket+0x122>
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801009e:	f003 0301 	and.w	r3, r3, #1
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d03d      	beq.n	8010122 <xProcessReceivedUDPPacket+0x122>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2101      	movs	r1, #1
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7f4 fb58 	bl	8004764 <xEventGroupSetBits>
 80100b4:	e035      	b.n	8010122 <xProcessReceivedUDPPacket+0x122>
            else
        #endif

        #if ( ipconfigUSE_LLMNR == 1 )
            /* A LLMNR request, check for the destination port. */
            if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80100b6:	887b      	ldrh	r3, [r7, #2]
 80100b8:	f64e 3214 	movw	r2, #60180	; 0xeb14
 80100bc:	4293      	cmp	r3, r2
 80100be:	d006      	beq.n	80100ce <xProcessReceivedUDPPacket+0xce>
                ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80100c4:	b29b      	uxth	r3, r3
            if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80100c6:	f64e 3214 	movw	r2, #60180	; 0xeb14
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d10e      	bne.n	80100ec <xProcessReceivedUDPPacket+0xec>
            {
                vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	1d9a      	adds	r2, r3, #6
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80100d8:	4619      	mov	r1, r3
 80100da:	4610      	mov	r0, r2
 80100dc:	f7f7 fc68 	bl	80079b0 <vARPRefreshCacheEntry>
                xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7f8 f884 	bl	80081ee <ulDNSHandlePacket>
 80100e6:	4603      	mov	r3, r0
 80100e8:	617b      	str	r3, [r7, #20]
 80100ea:	e01a      	b.n	8010122 <xProcessReceivedUDPPacket+0x122>
            else
        #endif /* ipconfigUSE_LLMNR */

        #if ( ipconfigUSE_NBNS == 1 )
            /* a NetBIOS request, check for the destination port */
            if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
 80100ec:	887b      	ldrh	r3, [r7, #2]
 80100ee:	f5b3 4f09 	cmp.w	r3, #35072	; 0x8900
 80100f2:	d005      	beq.n	8010100 <xProcessReceivedUDPPacket+0x100>
                ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipNBNS_PORT ) ) )
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80100f8:	b29b      	uxth	r3, r3
            if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
 80100fa:	f5b3 4f09 	cmp.w	r3, #35072	; 0x8900
 80100fe:	d10e      	bne.n	801011e <xProcessReceivedUDPPacket+0x11e>
            {
                vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	1d9a      	adds	r2, r3, #6
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	f8d3 301a 	ldr.w	r3, [r3, #26]
 801010a:	4619      	mov	r1, r3
 801010c:	4610      	mov	r0, r2
 801010e:	f7f7 fc4f 	bl	80079b0 <vARPRefreshCacheEntry>
                xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7f8 f888 	bl	8008228 <ulNBNSHandlePacket>
 8010118:	4603      	mov	r3, r0
 801011a:	617b      	str	r3, [r7, #20]
 801011c:	e001      	b.n	8010122 <xProcessReceivedUDPPacket+0x122>
            }
            else
        #endif /* ipconfigUSE_NBNS */
        {
            xReturn = pdFAIL;
 801011e:	2300      	movs	r3, #0
 8010120:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8010122:	697b      	ldr	r3, [r7, #20]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3718      	adds	r7, #24
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}
 801012c:	08015148 	.word	0x08015148

08010130 <HAL_ETH_RxCpltCallback>:
};

/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8010138:	2300      	movs	r3, #0
 801013a:	60fb      	str	r3, [r7, #12]

    ( void ) heth;

    /* Ethernet RX-Complete callback function, elsewhere declared as weak. */
    ulISREvents |= EMAC_IF_RX_EVENT;
 801013c:	4b10      	ldr	r3, [pc, #64]	; (8010180 <HAL_ETH_RxCpltCallback+0x50>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f043 0301 	orr.w	r3, r3, #1
 8010144:	4a0e      	ldr	r2, [pc, #56]	; (8010180 <HAL_ETH_RxCpltCallback+0x50>)
 8010146:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8010148:	4b0e      	ldr	r3, [pc, #56]	; (8010184 <HAL_ETH_RxCpltCallback+0x54>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d012      	beq.n	8010176 <HAL_ETH_RxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 8010150:	4b0c      	ldr	r3, [pc, #48]	; (8010184 <HAL_ETH_RxCpltCallback+0x54>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f107 020c 	add.w	r2, r7, #12
 8010158:	2100      	movs	r1, #0
 801015a:	4618      	mov	r0, r3
 801015c:	f7f6 fb94 	bl	8006888 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d007      	beq.n	8010176 <HAL_ETH_RxCpltCallback+0x46>
 8010166:	4b08      	ldr	r3, [pc, #32]	; (8010188 <HAL_ETH_RxCpltCallback+0x58>)
 8010168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801016c:	601a      	str	r2, [r3, #0]
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	f3bf 8f6f 	isb	sy
    }
}
 8010176:	bf00      	nop
 8010178:	3710      	adds	r7, #16
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop
 8010180:	2002511c 	.word	0x2002511c
 8010184:	200251b0 	.word	0x200251b0
 8010188:	e000ed04 	.word	0xe000ed04

0801018c <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8010194:	2300      	movs	r3, #0
 8010196:	60fb      	str	r3, [r7, #12]
    ( void ) heth;

    /* This call-back is only useful in case packets are being sent
     * zero-copy.  Once they're sent, the buffers will be released
     * by the function vClearTXBuffers(). */
    ulISREvents |= EMAC_IF_TX_EVENT;
 8010198:	4b10      	ldr	r3, [pc, #64]	; (80101dc <HAL_ETH_TxCpltCallback+0x50>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f043 0302 	orr.w	r3, r3, #2
 80101a0:	4a0e      	ldr	r2, [pc, #56]	; (80101dc <HAL_ETH_TxCpltCallback+0x50>)
 80101a2:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 80101a4:	4b0e      	ldr	r3, [pc, #56]	; (80101e0 <HAL_ETH_TxCpltCallback+0x54>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d012      	beq.n	80101d2 <HAL_ETH_TxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 80101ac:	4b0c      	ldr	r3, [pc, #48]	; (80101e0 <HAL_ETH_TxCpltCallback+0x54>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f107 020c 	add.w	r2, r7, #12
 80101b4:	2100      	movs	r1, #0
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7f6 fb66 	bl	8006888 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d007      	beq.n	80101d2 <HAL_ETH_TxCpltCallback+0x46>
 80101c2:	4b08      	ldr	r3, [pc, #32]	; (80101e4 <HAL_ETH_TxCpltCallback+0x58>)
 80101c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101c8:	601a      	str	r2, [r3, #0]
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	f3bf 8f6f 	isb	sy
    }
}
 80101d2:	bf00      	nop
 80101d4:	3710      	adds	r7, #16
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	2002511c 	.word	0x2002511c
 80101e0:	200251b0 	.word	0x200251b0
 80101e4:	e000ed04 	.word	0xe000ed04

080101e8 <vClearTXBuffers>:
/*-----------------------------------------------------------*/

static void vClearTXBuffers()
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
    __IO ETH_DMADescTypeDef * txLastDescriptor = xETH.TxDesc;
 80101ee:	4b24      	ldr	r3, [pc, #144]	; (8010280 <vClearTXBuffers+0x98>)
 80101f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f2:	60bb      	str	r3, [r7, #8]
    size_t uxCount = ( ( UBaseType_t ) ETH_TXBUFNB ) - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 80101f4:	4b23      	ldr	r3, [pc, #140]	; (8010284 <vClearTXBuffers+0x9c>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7f5 f8a9 	bl	8005350 <uxQueueMessagesWaiting>
 80101fe:	4603      	mov	r3, r0
 8010200:	f1c3 0304 	rsb	r3, r3, #4
 8010204:	60fb      	str	r3, [r7, #12]

    /* This function is called after a TX-completion interrupt.
     * It will release each Network Buffer used in xNetworkInterfaceOutput().
     * 'uxCount' represents the number of descriptors given to DMA for transmission.
     * After sending a packet, the DMA will clear the 'ETH_DMATXDESC_OWN' bit. */
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 8010206:	e02c      	b.n	8010262 <vClearTXBuffers+0x7a>
    {
        if( ( DMATxDescToClear == txLastDescriptor ) && ( uxCount != ETH_TXBUFNB ) )
 8010208:	4b1f      	ldr	r3, [pc, #124]	; (8010288 <vClearTXBuffers+0xa0>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	68ba      	ldr	r2, [r7, #8]
 801020e:	429a      	cmp	r2, r3
 8010210:	d102      	bne.n	8010218 <vClearTXBuffers+0x30>
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2b04      	cmp	r3, #4
 8010216:	d12d      	bne.n	8010274 <vClearTXBuffers+0x8c>
            break;
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                ucPayLoad = ( uint8_t * ) DMATxDescToClear->Buffer1Addr;
 8010218:	4b1b      	ldr	r3, [pc, #108]	; (8010288 <vClearTXBuffers+0xa0>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	607b      	str	r3, [r7, #4]

                if( ucPayLoad != NULL )
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00d      	beq.n	8010242 <vClearTXBuffers+0x5a>
                {
                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f7f9 f936 	bl	8009498 <pxPacketBuffer_to_NetworkBuffer>
 801022c:	6038      	str	r0, [r7, #0]

                    if( pxNetworkBuffer != NULL )
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d002      	beq.n	801023a <vClearTXBuffers+0x52>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8010234:	6838      	ldr	r0, [r7, #0]
 8010236:	f001 fa57 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    DMATxDescToClear->Buffer1Addr = ( uint32_t ) 0u;
 801023a:	4b13      	ldr	r3, [pc, #76]	; (8010288 <vClearTXBuffers+0xa0>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2200      	movs	r2, #0
 8010240:	609a      	str	r2, [r3, #8]
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        DMATxDescToClear = ( ETH_DMADescTypeDef * ) ( DMATxDescToClear->Buffer2NextDescAddr );
 8010242:	4b11      	ldr	r3, [pc, #68]	; (8010288 <vClearTXBuffers+0xa0>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	461a      	mov	r2, r3
 801024a:	4b0f      	ldr	r3, [pc, #60]	; (8010288 <vClearTXBuffers+0xa0>)
 801024c:	601a      	str	r2, [r3, #0]

        uxCount--;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	3b01      	subs	r3, #1
 8010252:	60fb      	str	r3, [r7, #12]
        /* Tell the counting semaphore that one more TX descriptor is available. */
        xSemaphoreGive( xTXDescriptorSemaphore );
 8010254:	4b0b      	ldr	r3, [pc, #44]	; (8010284 <vClearTXBuffers+0x9c>)
 8010256:	6818      	ldr	r0, [r3, #0]
 8010258:	2300      	movs	r3, #0
 801025a:	2200      	movs	r2, #0
 801025c:	2100      	movs	r1, #0
 801025e:	f7f4 fd01 	bl	8004c64 <xQueueGenericSend>
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d006      	beq.n	8010276 <vClearTXBuffers+0x8e>
 8010268:	4b07      	ldr	r3, [pc, #28]	; (8010288 <vClearTXBuffers+0xa0>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	daca      	bge.n	8010208 <vClearTXBuffers+0x20>
    }
}
 8010272:	e000      	b.n	8010276 <vClearTXBuffers+0x8e>
            break;
 8010274:	bf00      	nop
}
 8010276:	bf00      	nop
 8010278:	3710      	adds	r7, #16
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	20025160 	.word	0x20025160
 8010284:	200251a8 	.word	0x200251a8
 8010288:	200251ac 	.word	0x200251ac

0801028c <xNetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceInitialise( void )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef hal_eth_init_status;
    BaseType_t xResult;

    if( xMacInitStatus == eMACInit )
 8010292:	4b49      	ldr	r3, [pc, #292]	; (80103b8 <xNetworkInterfaceInitialise+0x12c>)
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d167      	bne.n	801036a <xNetworkInterfaceInitialise+0xde>
    {
        xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TXBUFNB, ( UBaseType_t ) ETH_TXBUFNB );
 801029a:	2104      	movs	r1, #4
 801029c:	2004      	movs	r0, #4
 801029e:	f7f4 fcb7 	bl	8004c10 <xQueueCreateCountingSemaphore>
 80102a2:	4602      	mov	r2, r0
 80102a4:	4b45      	ldr	r3, [pc, #276]	; (80103bc <xNetworkInterfaceInitialise+0x130>)
 80102a6:	601a      	str	r2, [r3, #0]

        if( xTXDescriptorSemaphore == NULL )
 80102a8:	4b44      	ldr	r3, [pc, #272]	; (80103bc <xNetworkInterfaceInitialise+0x130>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d103      	bne.n	80102b8 <xNetworkInterfaceInitialise+0x2c>
        {
            xMacInitStatus = eMACFailed;
 80102b0:	4b41      	ldr	r3, [pc, #260]	; (80103b8 <xNetworkInterfaceInitialise+0x12c>)
 80102b2:	2202      	movs	r2, #2
 80102b4:	701a      	strb	r2, [r3, #0]
 80102b6:	e058      	b.n	801036a <xNetworkInterfaceInitialise+0xde>
        }
        else
        {
            /* Initialise ETH */

            xETH.Instance = ETH;
 80102b8:	4b41      	ldr	r3, [pc, #260]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102ba:	4a42      	ldr	r2, [pc, #264]	; (80103c4 <xNetworkInterfaceInitialise+0x138>)
 80102bc:	601a      	str	r2, [r3, #0]
            xETH.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80102be:	4b40      	ldr	r3, [pc, #256]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102c0:	2201      	movs	r2, #1
 80102c2:	605a      	str	r2, [r3, #4]
            xETH.Init.Speed = ETH_SPEED_100M;
 80102c4:	4b3e      	ldr	r3, [pc, #248]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80102ca:	609a      	str	r2, [r3, #8]
            xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80102cc:	4b3c      	ldr	r3, [pc, #240]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80102d2:	60da      	str	r2, [r3, #12]
            /* Value of PhyAddress doesn't matter, will be probed for. */
            xETH.Init.PhyAddress = 0;
 80102d4:	4b3a      	ldr	r3, [pc, #232]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102d6:	2200      	movs	r2, #0
 80102d8:	821a      	strh	r2, [r3, #16]

            xETH.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 80102da:	f7f9 fe5d 	bl	8009f98 <FreeRTOS_GetMACAddress>
 80102de:	4602      	mov	r2, r0
 80102e0:	4b37      	ldr	r3, [pc, #220]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102e2:	615a      	str	r2, [r3, #20]
            xETH.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80102e4:	4b36      	ldr	r3, [pc, #216]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102e6:	2201      	movs	r2, #1
 80102e8:	619a      	str	r2, [r3, #24]
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
                {
                    /* using the ETH_CHECKSUM_BY_HARDWARE option:
                     * both the IP and the protocol checksums will be calculated
                     * by the peripheral. */
                    xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80102ea:	4b35      	ldr	r3, [pc, #212]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	61da      	str	r2, [r3, #28]
                }
            #endif

            #if ( ipconfigUSE_RMII != 0 )
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80102f0:	4b33      	ldr	r3, [pc, #204]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80102f6:	621a      	str	r2, [r3, #32]
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
                }
            #endif /* ipconfigUSE_RMII */

            hal_eth_init_status = HAL_ETH_Init( &xETH );
 80102f8:	4831      	ldr	r0, [pc, #196]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 80102fa:	f7f3 fb3f 	bl	800397c <HAL_ETH_Init>
 80102fe:	4603      	mov	r3, r0
 8010300:	70fb      	strb	r3, [r7, #3]

            /* Only for inspection by debugger. */
            ( void ) hal_eth_init_status;

            /* Set the TxDesc and RxDesc pointers. */
            xETH.TxDesc = DMATxDscrTab;
 8010302:	4b2f      	ldr	r3, [pc, #188]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 8010304:	4a30      	ldr	r2, [pc, #192]	; (80103c8 <xNetworkInterfaceInitialise+0x13c>)
 8010306:	62da      	str	r2, [r3, #44]	; 0x2c
            xETH.RxDesc = DMARxDscrTab;
 8010308:	4b2d      	ldr	r3, [pc, #180]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 801030a:	4a30      	ldr	r2, [pc, #192]	; (80103cc <xNetworkInterfaceInitialise+0x140>)
 801030c:	629a      	str	r2, [r3, #40]	; 0x28

            /* Make sure that all unused fields are cleared. */
            memset( &DMATxDscrTab, '\0', sizeof( DMATxDscrTab ) );
 801030e:	2280      	movs	r2, #128	; 0x80
 8010310:	2100      	movs	r1, #0
 8010312:	482d      	ldr	r0, [pc, #180]	; (80103c8 <xNetworkInterfaceInitialise+0x13c>)
 8010314:	f001 fa91 	bl	801183a <memset>
            memset( &DMARxDscrTab, '\0', sizeof( DMARxDscrTab ) );
 8010318:	2280      	movs	r2, #128	; 0x80
 801031a:	2100      	movs	r1, #0
 801031c:	482b      	ldr	r0, [pc, #172]	; (80103cc <xNetworkInterfaceInitialise+0x140>)
 801031e:	f001 fa8c 	bl	801183a <memset>

            /* Initialize Tx Descriptors list: Chain Mode */
            DMATxDescToClear = DMATxDscrTab;
 8010322:	4b2b      	ldr	r3, [pc, #172]	; (80103d0 <xNetworkInterfaceInitialise+0x144>)
 8010324:	4a28      	ldr	r2, [pc, #160]	; (80103c8 <xNetworkInterfaceInitialise+0x13c>)
 8010326:	601a      	str	r2, [r3, #0]

            /* Initialise TX-descriptors. */
            prvDMATxDescListInit();
 8010328:	f000 f862 	bl	80103f0 <prvDMATxDescListInit>

            /* Initialise RX-descriptors. */
            prvDMARxDescListInit();
 801032c:	f000 f8a4 	bl	8010478 <prvDMARxDescListInit>

            #if ( ipconfigUSE_LLMNR != 0 )
                {
                    /* Program the LLMNR address at index 1. */
                    prvMACAddressConfig( &xETH, ETH_MAC_ADDRESS1, ( uint8_t * ) xLLMNR_MACAddress );
 8010330:	4a28      	ldr	r2, [pc, #160]	; (80103d4 <xNetworkInterfaceInitialise+0x148>)
 8010332:	2108      	movs	r1, #8
 8010334:	4822      	ldr	r0, [pc, #136]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 8010336:	f000 f8eb 	bl	8010510 <prvMACAddressConfig>
                }
            #endif

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 801033a:	2001      	movs	r0, #1
 801033c:	f000 fb08 	bl	8010950 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             * possible priority to ensure the interrupt handler can return directly
             * to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             * notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &xEMACTaskHandle ) == pdPASS )
 8010340:	4b25      	ldr	r3, [pc, #148]	; (80103d8 <xNetworkInterfaceInitialise+0x14c>)
 8010342:	9301      	str	r3, [sp, #4]
 8010344:	2304      	movs	r3, #4
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	2300      	movs	r3, #0
 801034a:	f44f 7282 	mov.w	r2, #260	; 0x104
 801034e:	4923      	ldr	r1, [pc, #140]	; (80103dc <xNetworkInterfaceInitialise+0x150>)
 8010350:	4823      	ldr	r0, [pc, #140]	; (80103e0 <xNetworkInterfaceInitialise+0x154>)
 8010352:	f7f5 fa45 	bl	80057e0 <xTaskCreate>
 8010356:	4603      	mov	r3, r0
 8010358:	2b01      	cmp	r3, #1
 801035a:	d103      	bne.n	8010364 <xNetworkInterfaceInitialise+0xd8>
            {
                /* The xTXDescriptorSemaphore and the task are created successfully. */
                xMacInitStatus = eMACPass;
 801035c:	4b16      	ldr	r3, [pc, #88]	; (80103b8 <xNetworkInterfaceInitialise+0x12c>)
 801035e:	2201      	movs	r2, #1
 8010360:	701a      	strb	r2, [r3, #0]
 8010362:	e002      	b.n	801036a <xNetworkInterfaceInitialise+0xde>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8010364:	4b14      	ldr	r3, [pc, #80]	; (80103b8 <xNetworkInterfaceInitialise+0x12c>)
 8010366:	2202      	movs	r2, #2
 8010368:	701a      	strb	r2, [r3, #0]
            }
        }
    } /* if( xEMACTaskHandle == NULL ) */

    if( xMacInitStatus != eMACPass )
 801036a:	4b13      	ldr	r3, [pc, #76]	; (80103b8 <xNetworkInterfaceInitialise+0x12c>)
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	2b01      	cmp	r3, #1
 8010370:	d002      	beq.n	8010378 <xNetworkInterfaceInitialise+0xec>
    {
        /* EMAC initialisation failed, return pdFAIL. */
        xResult = pdFAIL;
 8010372:	2300      	movs	r3, #0
 8010374:	607b      	str	r3, [r7, #4]
 8010376:	e019      	b.n	80103ac <xNetworkInterfaceInitialise+0x120>
    }
    else
    {
        if( xPhyObject.ulLinkStatusMask != 0uL )
 8010378:	4b1a      	ldr	r3, [pc, #104]	; (80103e4 <xNetworkInterfaceInitialise+0x158>)
 801037a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801037c:	2b00      	cmp	r3, #0
 801037e:	d013      	beq.n	80103a8 <xNetworkInterfaceInitialise+0x11c>
        {
            xETH.Instance->DMAIER |= ETH_DMA_ALL_INTS;
 8010380:	4b0f      	ldr	r3, [pc, #60]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	f241 031c 	movw	r3, #4124	; 0x101c
 8010388:	4413      	add	r3, r2
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a0c      	ldr	r2, [pc, #48]	; (80103c0 <xNetworkInterfaceInitialise+0x134>)
 801038e:	6811      	ldr	r1, [r2, #0]
 8010390:	4a15      	ldr	r2, [pc, #84]	; (80103e8 <xNetworkInterfaceInitialise+0x15c>)
 8010392:	431a      	orrs	r2, r3
 8010394:	f241 031c 	movw	r3, #4124	; 0x101c
 8010398:	440b      	add	r3, r1
 801039a:	601a      	str	r2, [r3, #0]
            xResult = pdPASS;
 801039c:	2301      	movs	r3, #1
 801039e:	607b      	str	r3, [r7, #4]
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 80103a0:	4812      	ldr	r0, [pc, #72]	; (80103ec <xNetworkInterfaceInitialise+0x160>)
 80103a2:	f7f0 fb17 	bl	80009d4 <vLoggingPrintf>
 80103a6:	e001      	b.n	80103ac <xNetworkInterfaceInitialise+0x120>
        }
        else
        {
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
            xResult = pdFAIL;
 80103a8:	2300      	movs	r3, #0
 80103aa:	607b      	str	r3, [r7, #4]
        }
    }

    /* When returning non-zero, the stack will become active and
     * start DHCP (in configured) */
    return xResult;
 80103ac:	687b      	ldr	r3, [r7, #4]
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	20025118 	.word	0x20025118
 80103bc:	200251a8 	.word	0x200251a8
 80103c0:	20025160 	.word	0x20025160
 80103c4:	40028000 	.word	0x40028000
 80103c8:	20025c80 	.word	0x20025c80
 80103cc:	20025d00 	.word	0x20025d00
 80103d0:	200251ac 	.word	0x200251ac
 80103d4:	080154e4 	.word	0x080154e4
 80103d8:	200251b0 	.word	0x200251b0
 80103dc:	0801517c 	.word	0x0801517c
 80103e0:	08010a45 	.word	0x08010a45
 80103e4:	20025120 	.word	0x20025120
 80103e8:	380163fb 	.word	0x380163fb
 80103ec:	08015184 	.word	0x08015184

080103f0 <prvDMATxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMATxDescListInit()
{
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
    ETH_DMADescTypeDef * pxDMADescriptor;
    BaseType_t xIndex;

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMATxDscrTab;
 80103f6:	4b1e      	ldr	r3, [pc, #120]	; (8010470 <prvDMATxDescListInit+0x80>)
 80103f8:	607b      	str	r3, [r7, #4]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 80103fa:	2300      	movs	r3, #0
 80103fc:	603b      	str	r3, [r7, #0]
 80103fe:	e026      	b.n	801044e <prvDMATxDescListInit+0x5e>
    {
        /* Set Second Address Chained bit */
        pxDMADescriptor->Status = ETH_DMATXDESC_TCH;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010406:	601a      	str	r2, [r3, #0]
                /* Set Buffer1 address pointer */
                pxDMADescriptor->Buffer1Addr = ( uint32_t ) ( Tx_Buff[ xIndex ] );
            }
        #endif

        if( xETH.Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 8010408:	4b1a      	ldr	r3, [pc, #104]	; (8010474 <prvDMATxDescListInit+0x84>)
 801040a:	69db      	ldr	r3, [r3, #28]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d106      	bne.n	801041e <prvDMATxDescListInit+0x2e>
        {
            /* Set the DMA Tx descriptors checksum insertion for TCP, UDP, and ICMP */
            pxDMADescriptor->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	601a      	str	r2, [r3, #0]
 801041c:	e005      	b.n	801042a <prvDMATxDescListInit+0x3a>
        }
        else
        {
            pxDMADescriptor->Status &= ~( ( uint32_t ) ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL );
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	601a      	str	r2, [r3, #0]
        }

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_TXBUFNB - 1 )
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	2b02      	cmp	r3, #2
 801042e:	d805      	bhi.n	801043c <prvDMATxDescListInit+0x4c>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	3320      	adds	r3, #32
 8010434:	461a      	mov	r2, r3
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	60da      	str	r2, [r3, #12]
 801043a:	e002      	b.n	8010442 <prvDMATxDescListInit+0x52>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMATxDscrTab;
 801043c:	4a0c      	ldr	r2, [pc, #48]	; (8010470 <prvDMATxDescListInit+0x80>)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	3301      	adds	r3, #1
 8010446:	603b      	str	r3, [r7, #0]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	3320      	adds	r3, #32
 801044c:	607b      	str	r3, [r7, #4]
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	2b03      	cmp	r3, #3
 8010452:	d9d5      	bls.n	8010400 <prvDMATxDescListInit+0x10>
        }
    }

    /* Set Transmit Descriptor List Address Register */
    xETH.Instance->DMATDLAR = ( uint32_t ) DMATxDscrTab;
 8010454:	4b07      	ldr	r3, [pc, #28]	; (8010474 <prvDMATxDescListInit+0x84>)
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	4905      	ldr	r1, [pc, #20]	; (8010470 <prvDMATxDescListInit+0x80>)
 801045a:	f241 0310 	movw	r3, #4112	; 0x1010
 801045e:	4413      	add	r3, r2
 8010460:	6019      	str	r1, [r3, #0]
}
 8010462:	bf00      	nop
 8010464:	370c      	adds	r7, #12
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	20025c80 	.word	0x20025c80
 8010474:	20025160 	.word	0x20025160

08010478 <prvDMARxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMARxDescListInit()
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
    /*
     * RX-descriptors.
     */

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMARxDscrTab;
 801047e:	4b21      	ldr	r3, [pc, #132]	; (8010504 <prvDMARxDescListInit+0x8c>)
 8010480:	60fb      	str	r3, [r7, #12]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 8010482:	2300      	movs	r3, #0
 8010484:	60bb      	str	r3, [r7, #8]
 8010486:	e02f      	b.n	80104e8 <prvDMARxDescListInit+0x70>
    {
        /* Set Buffer1 size and Second Address Chained bit */
        pxDMADescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 801048e:	605a      	str	r2, [r3, #4]
        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Set Buffer1 address pointer */
                NetworkBufferDescriptor_t * pxBuffer;

                pxBuffer = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, 100ul );
 8010490:	2164      	movs	r1, #100	; 0x64
 8010492:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8010496:	f001 f8ad 	bl	80115f4 <pxGetNetworkBufferWithDescriptor>
 801049a:	6078      	str	r0, [r7, #4]

                /* If the assert below fails, make sure that there are at least 'ETH_RXBUFNB'
                 * Network Buffers available during start-up ( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) */
                configASSERT( pxBuffer != NULL );
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d104      	bne.n	80104ac <prvDMARxDescListInit+0x34>
 80104a2:	4919      	ldr	r1, [pc, #100]	; (8010508 <prvDMARxDescListInit+0x90>)
 80104a4:	f240 2055 	movw	r0, #597	; 0x255
 80104a8:	f7f0 fabd 	bl	8000a26 <vAssertCalled>

                if( pxBuffer != NULL )
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d008      	beq.n	80104c4 <prvDMARxDescListInit+0x4c>
                {
                    pxDMADescriptor->Buffer1Addr = ( uint32_t ) pxBuffer->pucEthernetBuffer;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	461a      	mov	r2, r3
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	609a      	str	r2, [r3, #8]
                    pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80104c2:	601a      	str	r2, [r3, #0]
                pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_RXBUFNB - 1 )
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d805      	bhi.n	80104d6 <prvDMARxDescListInit+0x5e>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	3320      	adds	r3, #32
 80104ce:	461a      	mov	r2, r3
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	60da      	str	r2, [r3, #12]
 80104d4:	e002      	b.n	80104dc <prvDMARxDescListInit+0x64>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMARxDscrTab;
 80104d6:	4a0b      	ldr	r2, [pc, #44]	; (8010504 <prvDMARxDescListInit+0x8c>)
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	3301      	adds	r3, #1
 80104e0:	60bb      	str	r3, [r7, #8]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	3320      	adds	r3, #32
 80104e6:	60fb      	str	r3, [r7, #12]
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	2b03      	cmp	r3, #3
 80104ec:	d9cc      	bls.n	8010488 <prvDMARxDescListInit+0x10>
        }
    }

    /* Set Receive Descriptor List Address Register */
    xETH.Instance->DMARDLAR = ( uint32_t ) DMARxDscrTab;
 80104ee:	4b07      	ldr	r3, [pc, #28]	; (801050c <prvDMARxDescListInit+0x94>)
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	4904      	ldr	r1, [pc, #16]	; (8010504 <prvDMARxDescListInit+0x8c>)
 80104f4:	f241 030c 	movw	r3, #4108	; 0x100c
 80104f8:	4413      	add	r3, r2
 80104fa:	6019      	str	r1, [r3, #0]
}
 80104fc:	bf00      	nop
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	20025d00 	.word	0x20025d00
 8010508:	0801519c 	.word	0x0801519c
 801050c:	20025160 	.word	0x20025160

08010510 <prvMACAddressConfig>:
/*-----------------------------------------------------------*/

static void prvMACAddressConfig( ETH_HandleTypeDef * heth,
                                 uint32_t ulIndex,
                                 uint8_t * Addr )
{
 8010510:	b480      	push	{r7}
 8010512:	b087      	sub	sp, #28
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
    uint32_t ulTempReg;

    ( void ) heth;

    /* Calculate the selected MAC address high register. */
    ulTempReg = 0x80000000ul | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	3305      	adds	r3, #5
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	021b      	lsls	r3, r3, #8
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	3204      	adds	r2, #4
 8010528:	7812      	ldrb	r2, [r2, #0]
 801052a:	4313      	orrs	r3, r2
 801052c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010530:	617b      	str	r3, [r7, #20]

    /* Load the selected MAC address high register. */
    ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + ulIndex ) ) ) = ulTempReg;
 8010532:	68ba      	ldr	r2, [r7, #8]
 8010534:	4b11      	ldr	r3, [pc, #68]	; (801057c <prvMACAddressConfig+0x6c>)
 8010536:	4413      	add	r3, r2
 8010538:	461a      	mov	r2, r3
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	6013      	str	r3, [r2, #0]

    /* Calculate the selected MAC address low register. */
    ulTempReg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) Addr[ 1 ] << 8 ) | Addr[ 0 ];
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	3303      	adds	r3, #3
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	061a      	lsls	r2, r3, #24
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	3302      	adds	r3, #2
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	041b      	lsls	r3, r3, #16
 801054e:	431a      	orrs	r2, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	3301      	adds	r3, #1
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	021b      	lsls	r3, r3, #8
 8010558:	4313      	orrs	r3, r2
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	7812      	ldrb	r2, [r2, #0]
 801055e:	4313      	orrs	r3, r2
 8010560:	617b      	str	r3, [r7, #20]

    /* Load the selected MAC address low register */
    ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + ulIndex ) ) ) = ulTempReg;
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	4b06      	ldr	r3, [pc, #24]	; (8010580 <prvMACAddressConfig+0x70>)
 8010566:	4413      	add	r3, r2
 8010568:	461a      	mov	r2, r3
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	6013      	str	r3, [r2, #0]
}
 801056e:	bf00      	nop
 8010570:	371c      	adds	r7, #28
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop
 801057c:	40028040 	.word	0x40028040
 8010580:	40028044 	.word	0x40028044

08010584 <xNetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor,
                                    BaseType_t bReleaseAfterSend )
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b088      	sub	sp, #32
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 801058e:	2300      	movs	r3, #0
 8010590:	61fb      	str	r3, [r7, #28]
    uint32_t ulTransmitSize = 0;
 8010592:	2300      	movs	r3, #0
 8010594:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDmaTxDesc;
/* Do not wait too long for a free TX DMA buffer. */
    const TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 50u );
 8010596:	2332      	movs	r3, #50	; 0x32
 8010598:	617b      	str	r3, [r7, #20]
            {
                ProtocolPacket_t * pxPacket;

                /* If the peripheral must calculate the checksum, it wants
                 * the protocol checksum to have a value of zero. */
                pxPacket = ( ProtocolPacket_t * ) ( pxDescriptor->pucEthernetBuffer );
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	699b      	ldr	r3, [r3, #24]
 801059e:	613b      	str	r3, [r7, #16]

                if( pxPacket->xICMPPacket.xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP )
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	7ddb      	ldrb	r3, [r3, #23]
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d106      	bne.n	80105b6 <xNetworkInterfaceOutput+0x32>
                {
                    pxPacket->xICMPPacket.xICMPHeader.usChecksum = ( uint16_t ) 0u;
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	2200      	movs	r2, #0
 80105ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80105b0:	2200      	movs	r2, #0
 80105b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
            }
        #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM */

        if( xPhyObject.ulLinkStatusMask != 0 )
 80105b6:	4b33      	ldr	r3, [pc, #204]	; (8010684 <xNetworkInterfaceOutput+0x100>)
 80105b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d057      	beq.n	801066e <xNetworkInterfaceOutput+0xea>
        {
            if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 80105be:	4b32      	ldr	r3, [pc, #200]	; (8010688 <xNetworkInterfaceOutput+0x104>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	6979      	ldr	r1, [r7, #20]
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7f4 fdcd 	bl	8005164 <xQueueSemaphoreTake>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d14d      	bne.n	801066c <xNetworkInterfaceOutput+0xe8>
                break;
            }

            /* This function does the actual transmission of the packet. The packet is
             * contained in 'pxDescriptor' that is passed to the function. */
            pxDmaTxDesc = xETH.TxDesc;
 80105d0:	4b2e      	ldr	r3, [pc, #184]	; (801068c <xNetworkInterfaceOutput+0x108>)
 80105d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d4:	60fb      	str	r3, [r7, #12]

            /* Is this buffer available? */
            configASSERT( ( pxDmaTxDesc->Status & ETH_DMATXDESC_OWN ) == 0 );
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	da04      	bge.n	80105e8 <xNetworkInterfaceOutput+0x64>
 80105de:	492c      	ldr	r1, [pc, #176]	; (8010690 <xNetworkInterfaceOutput+0x10c>)
 80105e0:	f240 20b6 	movw	r0, #694	; 0x2b6
 80105e4:	f7f0 fa1f 	bl	8000a26 <vAssertCalled>

            {
                /* Is this buffer available? */
                /* Get bytes in current buffer. */
                ulTransmitSize = pxDescriptor->xDataLength;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	69db      	ldr	r3, [r3, #28]
 80105ec:	61bb      	str	r3, [r7, #24]

                if( ulTransmitSize > ETH_TX_BUF_SIZE )
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80105f4:	d902      	bls.n	80105fc <xNetworkInterfaceOutput+0x78>
                {
                    ulTransmitSize = ETH_TX_BUF_SIZE;
 80105f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80105fa:	61bb      	str	r3, [r7, #24]
                        /* Copy the bytes. */
                        memcpy( ( void * ) pxDmaTxDesc->Buffer1Addr, pxDescriptor->pucEthernetBuffer, ulTransmitSize );
                    }
                #else
                    {
                        configASSERT( bReleaseAfterSend != 0 );
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d104      	bne.n	801060c <xNetworkInterfaceOutput+0x88>
 8010602:	4923      	ldr	r1, [pc, #140]	; (8010690 <xNetworkInterfaceOutput+0x10c>)
 8010604:	f240 20c9 	movw	r0, #713	; 0x2c9
 8010608:	f7f0 fa0d 	bl	8000a26 <vAssertCalled>

                        /* Move the buffer. */
                        pxDmaTxDesc->Buffer1Addr = ( uint32_t ) pxDescriptor->pucEthernetBuffer;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	699b      	ldr	r3, [r3, #24]
 8010610:	461a      	mov	r2, r3
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	609a      	str	r2, [r3, #8]
                        /* The Network Buffer has been passed to DMA, no need to release it. */
                        bReleaseAfterSend = pdFALSE_UNSIGNED;
 8010616:	2300      	movs	r3, #0
 8010618:	603b      	str	r3, [r7, #0]

                /* Ask to set the IPv4 checksum.
                 * Also need an Interrupt on Completion so that 'vClearTXBuffers()' will be called.. */
                #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
                    {
                        pxDmaTxDesc->Status |= ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_IC;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	4b1d      	ldr	r3, [pc, #116]	; (8010694 <xNetworkInterfaceOutput+0x110>)
 8010620:	4313      	orrs	r3, r2
 8010622:	68fa      	ldr	r2, [r7, #12]
 8010624:	6013      	str	r3, [r2, #0]


                /* Prepare transmit descriptors to give to DMA. */

                /* Set LAST and FIRST segment */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f043 5240 	orr.w	r2, r3, #805306368	; 0x30000000
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	601a      	str	r2, [r3, #0]
                /* Set frame size */
                pxDmaTxDesc->ControlBufferSize = ( ulTransmitSize & ETH_DMATXDESC_TBS1 );
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	605a      	str	r2, [r3, #4]
                        cache_clean_invalidate_by_addr( pulBuffer, xlength );
                    }
                #endif

                /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_OWN;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	601a      	str	r2, [r3, #0]

                /* Point to next descriptor */
                xETH.TxDesc = ( ETH_DMADescTypeDef * ) ( xETH.TxDesc->Buffer2NextDescAddr );
 8010648:	4b10      	ldr	r3, [pc, #64]	; (801068c <xNetworkInterfaceOutput+0x108>)
 801064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801064c:	68db      	ldr	r3, [r3, #12]
 801064e:	461a      	mov	r2, r3
 8010650:	4b0e      	ldr	r3, [pc, #56]	; (801068c <xNetworkInterfaceOutput+0x108>)
 8010652:	62da      	str	r2, [r3, #44]	; 0x2c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010654:	f3bf 8f4f 	dsb	sy
                /* Ensure completion of memory access */
                __DSB();
                /* Resume DMA transmission*/
                xETH.Instance->DMATPDR = 0;
 8010658:	4b0c      	ldr	r3, [pc, #48]	; (801068c <xNetworkInterfaceOutput+0x108>)
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	f241 0304 	movw	r3, #4100	; 0x1004
 8010660:	4413      	add	r3, r2
 8010662:	2200      	movs	r2, #0
 8010664:	601a      	str	r2, [r3, #0]
                iptraceNETWORK_INTERFACE_TRANSMIT();
                xReturn = pdPASS;
 8010666:	2301      	movs	r3, #1
 8010668:	61fb      	str	r3, [r7, #28]
 801066a:	e000      	b.n	801066e <xNetworkInterfaceOutput+0xea>
                break;
 801066c:	bf00      	nop
            /* The PHY has no Link Status, packet shall be dropped. */
        }
    } while( 0 );

    /* The buffer has been sent so can be released. */
    if( bReleaseAfterSend != pdFALSE )
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d002      	beq.n	801067a <xNetworkInterfaceOutput+0xf6>
    {
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f001 f837 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
    }

    return xReturn;
 801067a:	69fb      	ldr	r3, [r7, #28]
}
 801067c:	4618      	mov	r0, r3
 801067e:	3720      	adds	r7, #32
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	20025120 	.word	0x20025120
 8010688:	200251a8 	.word	0x200251a8
 801068c:	20025160 	.word	0x20025160
 8010690:	0801519c 	.word	0x0801519c
 8010694:	40c00000 	.word	0x40c00000

08010698 <xMayAcceptPacket>:
/*-----------------------------------------------------------*/

static BaseType_t xMayAcceptPacket( uint8_t * pcBuffer )
{
 8010698:	b480      	push	{r7}
 801069a:	b085      	sub	sp, #20
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
    const ProtocolPacket_t * pxProtPacket = ( const ProtocolPacket_t * ) pcBuffer;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	60fb      	str	r3, [r7, #12]

    switch( pxProtPacket->xTCPPacket.xEthernetHeader.usFrameType )
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	899b      	ldrh	r3, [r3, #12]
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	2b08      	cmp	r3, #8
 80106ac:	d006      	beq.n	80106bc <xMayAcceptPacket+0x24>
 80106ae:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80106b2:	d101      	bne.n	80106b8 <xMayAcceptPacket+0x20>
    {
        case ipARP_FRAME_TYPE:
            /* Check it later. */
            return pdTRUE;
 80106b4:	2301      	movs	r3, #1
 80106b6:	e003      	b.n	80106c0 <xMayAcceptPacket+0x28>
            /* Check it here. */
            break;

        default:
            /* Refuse the packet. */
            return pdFALSE;
 80106b8:	2300      	movs	r3, #0
 80106ba:	e001      	b.n	80106c0 <xMayAcceptPacket+0x28>
            break;
 80106bc:	bf00      	nop
                    return pdFALSE;
                }
            }
        }
    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    return pdTRUE;
 80106be:	2301      	movs	r3, #1
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3714      	adds	r7, #20
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <prvPassEthMessages>:
/*-----------------------------------------------------------*/

static void prvPassEthMessages( NetworkBufferDescriptor_t * pxDescriptor )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b086      	sub	sp, #24
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xRxEvent;

    xRxEvent.eEventType = eNetworkRxEvent;
 80106d4:	2301      	movs	r3, #1
 80106d6:	733b      	strb	r3, [r7, #12]
    xRxEvent.pvData = ( void * ) pxDescriptor;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	613b      	str	r3, [r7, #16]

    if( xSendEventStructToIPTask( &xRxEvent, ( TickType_t ) 1000 ) != pdPASS )
 80106dc:	f107 030c 	add.w	r3, r7, #12
 80106e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f8 ffff 	bl	80096e8 <xSendEventStructToIPTask>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d00d      	beq.n	801070c <prvPassEthMessages+0x40>
         * use the task level function here. */
        #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                do
                {
                    NetworkBufferDescriptor_t * pxNext = pxDescriptor->pxNextBuffer;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f4:	617b      	str	r3, [r7, #20]
                    vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 fff6 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
                    pxDescriptor = pxNext;
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	607b      	str	r3, [r7, #4]
                } while( pxDescriptor != NULL );
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1f4      	bne.n	80106f0 <prvPassEthMessages+0x24>
            {
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
            }
        #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
        iptraceETHERNET_RX_EVENT_LOST();
        FreeRTOS_printf( ( "prvPassEthMessages: Can not queue return packet!\n" ) );
 8010706:	4803      	ldr	r0, [pc, #12]	; (8010714 <prvPassEthMessages+0x48>)
 8010708:	f7f0 f964 	bl	80009d4 <vLoggingPrintf>
    }
    else
    {
        iptraceNETWORK_INTERFACE_RECEIVE();
    }
}
 801070c:	bf00      	nop
 801070e:	3718      	adds	r7, #24
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	080151d0 	.word	0x080151d0

08010718 <prvNetworkInterfaceInput>:

static BaseType_t prvNetworkInterfaceInput( void )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b08a      	sub	sp, #40	; 0x28
 801071c:	af00      	add	r7, sp, #0
    NetworkBufferDescriptor_t * pxCurDescriptor;
    NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 801071e:	2300      	movs	r3, #0
 8010720:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        NetworkBufferDescriptor_t * pxFirstDescriptor = NULL;
 8010722:	2300      	movs	r3, #0
 8010724:	623b      	str	r3, [r7, #32]
        NetworkBufferDescriptor_t * pxLastDescriptor = NULL;
 8010726:	2300      	movs	r3, #0
 8010728:	61fb      	str	r3, [r7, #28]
    #endif
    BaseType_t xReceivedLength = 0;
 801072a:	2300      	movs	r3, #0
 801072c:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDMARxDescriptor;
    const TickType_t xDescriptorWaitTime = pdMS_TO_TICKS( niDESCRIPTOR_WAIT_TIME_MS );
 801072e:	23fa      	movs	r3, #250	; 0xfa
 8010730:	60fb      	str	r3, [r7, #12]
    uint8_t * pucBuffer;

    pxDMARxDescriptor = xETH.RxDesc;
 8010732:	4b4f      	ldr	r3, [pc, #316]	; (8010870 <prvNetworkInterfaceInput+0x158>)
 8010734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010736:	617b      	str	r3, [r7, #20]

    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 8010738:	e084      	b.n	8010844 <prvNetworkInterfaceInput+0x12c>
    {
        BaseType_t xAccepted = pdTRUE;
 801073a:	2301      	movs	r3, #1
 801073c:	613b      	str	r3, [r7, #16]
        /* Get the Frame Length of the received packet: subtract 4 bytes of the CRC */
        xReceivedLength = ( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_FL ) >> ETH_DMARXDESC_FRAMELENGTHSHIFT ) - 4;
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	0c1b      	lsrs	r3, r3, #16
 8010744:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010748:	3b04      	subs	r3, #4
 801074a:	61bb      	str	r3, [r7, #24]

        pucBuffer = ( uint8_t * ) pxDMARxDescriptor->Buffer1Addr;
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	689b      	ldr	r3, [r3, #8]
 8010750:	60bb      	str	r3, [r7, #8]

        /* Update the ETHERNET DMA global Rx descriptor with next Rx descriptor */
        /* Chained Mode */
        /* Selects the next DMA Rx descriptor list for next buffer to read */
        xETH.RxDesc = ( ETH_DMADescTypeDef * ) pxDMARxDescriptor->Buffer2NextDescAddr;
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	461a      	mov	r2, r3
 8010758:	4b45      	ldr	r3, [pc, #276]	; (8010870 <prvNetworkInterfaceInput+0x158>)
 801075a:	629a      	str	r2, [r3, #40]	; 0x28

        /* In order to make the code easier and faster, only packets in a single buffer
         * will be accepted.  This can be done by making the buffers large enough to
         * hold a complete Ethernet packet (1536 bytes).
         * Therefore, two sanity checks: */
        configASSERT( xReceivedLength <= ETH_RX_BUF_SIZE );
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010762:	d904      	bls.n	801076e <prvNetworkInterfaceInput+0x56>
 8010764:	4943      	ldr	r1, [pc, #268]	; (8010874 <prvNetworkInterfaceInput+0x15c>)
 8010766:	f240 30a6 	movw	r0, #934	; 0x3a6
 801076a:	f7f0 f95c 	bl	8000a26 <vAssertCalled>

        if( ( pxDMARxDescriptor->Status & ( ETH_DMARXDESC_CE | ETH_DMARXDESC_IPV4HCE | ETH_DMARXDESC_FT ) ) != ETH_DMARXDESC_FT )
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f003 03a2 	and.w	r3, r3, #162	; 0xa2
 8010776:	2b20      	cmp	r3, #32
 8010778:	d002      	beq.n	8010780 <prvNetworkInterfaceInput+0x68>
        {
            /* Not an Ethernet frame-type or a checksum error. */
            xAccepted = pdFALSE;
 801077a:	2300      	movs	r3, #0
 801077c:	613b      	str	r3, [r7, #16]
 801077e:	e003      	b.n	8010788 <prvNetworkInterfaceInput+0x70>
        }
        else
        {
            /* See if this packet must be handled. */
            xAccepted = xMayAcceptPacket( pucBuffer );
 8010780:	68b8      	ldr	r0, [r7, #8]
 8010782:	f7ff ff89 	bl	8010698 <xMayAcceptPacket>
 8010786:	6138      	str	r0, [r7, #16]
        }

        if( xAccepted != pdFALSE )
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d00a      	beq.n	80107a4 <prvNetworkInterfaceInput+0x8c>
        {
            /* The packet will be accepted, but check first if a new Network Buffer can
             * be obtained. If not, the packet will still be dropped. */
            pxNewDescriptor = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, xDescriptorWaitTime );
 801078e:	68f9      	ldr	r1, [r7, #12]
 8010790:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8010794:	f000 ff2e 	bl	80115f4 <pxGetNetworkBufferWithDescriptor>
 8010798:	6278      	str	r0, [r7, #36]	; 0x24

            if( pxNewDescriptor == NULL )
 801079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079c:	2b00      	cmp	r3, #0
 801079e:	d101      	bne.n	80107a4 <prvNetworkInterfaceInput+0x8c>
            {
                /* A new descriptor can not be allocated now. This packet will be dropped. */
                xAccepted = pdFALSE;
 80107a0:	2300      	movs	r3, #0
 80107a2:	613b      	str	r3, [r7, #16]
        }

        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Find out which Network Buffer was originally passed to the descriptor. */
                pxCurDescriptor = pxPacketBuffer_to_NetworkBuffer( pucBuffer );
 80107a4:	68b8      	ldr	r0, [r7, #8]
 80107a6:	f7f8 fe77 	bl	8009498 <pxPacketBuffer_to_NetworkBuffer>
 80107aa:	6078      	str	r0, [r7, #4]
                configASSERT( pxCurDescriptor != NULL );
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d104      	bne.n	80107bc <prvNetworkInterfaceInput+0xa4>
 80107b2:	4930      	ldr	r1, [pc, #192]	; (8010874 <prvNetworkInterfaceInput+0x15c>)
 80107b4:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 80107b8:	f7f0 f935 	bl	8000a26 <vAssertCalled>
                    memcpy( pxNewDescriptor->pucEthernetBuffer, pucBuffer, xReceivedLength );
                }
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        if( xAccepted != pdFALSE )
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d013      	beq.n	80107ea <prvNetworkInterfaceInput+0xd2>
        {
            pxCurDescriptor->xDataLength = xReceivedLength;
 80107c2:	69ba      	ldr	r2, [r7, #24]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	61da      	str	r2, [r3, #28]
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxCurDescriptor->pxNextBuffer = NULL;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2200      	movs	r2, #0
 80107cc:	625a      	str	r2, [r3, #36]	; 0x24

                    if( pxFirstDescriptor == NULL )
 80107ce:	6a3b      	ldr	r3, [r7, #32]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d102      	bne.n	80107da <prvNetworkInterfaceInput+0xc2>
                    {
                        /* Becomes the first message */
                        pxFirstDescriptor = pxCurDescriptor;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	623b      	str	r3, [r7, #32]
 80107d8:	e005      	b.n	80107e6 <prvNetworkInterfaceInput+0xce>
                    }
                    else if( pxLastDescriptor != NULL )
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d002      	beq.n	80107e6 <prvNetworkInterfaceInput+0xce>
                    {
                        /* Add to the tail */
                        pxLastDescriptor->pxNextBuffer = pxCurDescriptor;
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	625a      	str	r2, [r3, #36]	; 0x24
                    }

                    pxLastDescriptor = pxCurDescriptor;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	61fb      	str	r3, [r7, #28]

        /* Release descriptors to DMA */
        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Set Buffer1 address pointer */
                if( pxNewDescriptor != NULL )
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d004      	beq.n	80107fa <prvNetworkInterfaceInput+0xe2>
                {
                    pxDMARxDescriptor->Buffer1Addr = ( uint32_t ) pxNewDescriptor->pucEthernetBuffer;
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	699b      	ldr	r3, [r3, #24]
 80107f4:	461a      	mov	r2, r3
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	609a      	str	r2, [r3, #8]
                }
            }
        #endif /* ipconfigZERO_COPY_RX_DRIVER */

        /* Set Buffer1 size and Second Address Chained bit */
        pxDMARxDescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8010800:	605a      	str	r2, [r3, #4]
        pxDMARxDescriptor->Status = ETH_DMARXDESC_OWN;
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010808:	601a      	str	r2, [r3, #0]
 801080a:	f3bf 8f4f 	dsb	sy
        /* Ensure completion of memory access */
        __DSB();

        /* When Rx Buffer unavailable flag is set clear it and resume
         * reception. */
        if( ( xETH.Instance->DMASR & ETH_DMASR_RBUS ) != 0 )
 801080e:	4b18      	ldr	r3, [pc, #96]	; (8010870 <prvNetworkInterfaceInput+0x158>)
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	f241 0314 	movw	r3, #4116	; 0x1014
 8010816:	4413      	add	r3, r2
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801081e:	2b00      	cmp	r3, #0
 8010820:	d00d      	beq.n	801083e <prvNetworkInterfaceInput+0x126>
        {
            /* Clear RBUS ETHERNET DMA flag. */
            xETH.Instance->DMASR = ETH_DMASR_RBUS;
 8010822:	4b13      	ldr	r3, [pc, #76]	; (8010870 <prvNetworkInterfaceInput+0x158>)
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	f241 0314 	movw	r3, #4116	; 0x1014
 801082a:	4413      	add	r3, r2
 801082c:	2280      	movs	r2, #128	; 0x80
 801082e:	601a      	str	r2, [r3, #0]

            /* Resume DMA reception. */
            xETH.Instance->DMARPDR = 0;
 8010830:	4b0f      	ldr	r3, [pc, #60]	; (8010870 <prvNetworkInterfaceInput+0x158>)
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	f241 0308 	movw	r3, #4104	; 0x1008
 8010838:	4413      	add	r3, r2
 801083a:	2200      	movs	r2, #0
 801083c:	601a      	str	r2, [r3, #0]
        }

        pxDMARxDescriptor = xETH.RxDesc;
 801083e:	4b0c      	ldr	r3, [pc, #48]	; (8010870 <prvNetworkInterfaceInput+0x158>)
 8010840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010842:	617b      	str	r3, [r7, #20]
    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	f6bf af76 	bge.w	801073a <prvNetworkInterfaceInput+0x22>
    }

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        {
            if( pxFirstDescriptor != NULL )
 801084e:	6a3b      	ldr	r3, [r7, #32]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <prvNetworkInterfaceInput+0x142>
            {
                prvPassEthMessages( pxFirstDescriptor );
 8010854:	6a38      	ldr	r0, [r7, #32]
 8010856:	f7ff ff39 	bl	80106cc <prvPassEthMessages>
            }
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */

    return( xReceivedLength > 0 );
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	2b00      	cmp	r3, #0
 801085e:	bfcc      	ite	gt
 8010860:	2301      	movgt	r3, #1
 8010862:	2300      	movle	r3, #0
 8010864:	b2db      	uxtb	r3, r3
}
 8010866:	4618      	mov	r0, r3
 8010868:	3728      	adds	r7, #40	; 0x28
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	20025160 	.word	0x20025160
 8010874:	0801519c 	.word	0x0801519c

08010878 <xSTM32_PhyRead>:


BaseType_t xSTM32_PhyRead( BaseType_t xAddress,
                           BaseType_t xRegister,
                           uint32_t * pulValue )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b086      	sub	sp, #24
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	60b9      	str	r1, [r7, #8]
 8010882:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 8010884:	4b10      	ldr	r3, [pc, #64]	; (80108c8 <xSTM32_PhyRead+0x50>)
 8010886:	8a1b      	ldrh	r3, [r3, #16]
 8010888:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	b29a      	uxth	r2, r3
 801088e:	4b0e      	ldr	r3, [pc, #56]	; (80108c8 <xSTM32_PhyRead+0x50>)
 8010890:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_ReadPHYRegister( &xETH, ( uint16_t ) xRegister, pulValue );
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	b29b      	uxth	r3, r3
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	4619      	mov	r1, r3
 801089a:	480b      	ldr	r0, [pc, #44]	; (80108c8 <xSTM32_PhyRead+0x50>)
 801089c:	f7f3 f954 	bl	8003b48 <HAL_ETH_ReadPHYRegister>
 80108a0:	4603      	mov	r3, r0
 80108a2:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 80108a4:	4a08      	ldr	r2, [pc, #32]	; (80108c8 <xSTM32_PhyRead+0x50>)
 80108a6:	8a7b      	ldrh	r3, [r7, #18]
 80108a8:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 80108aa:	7c7b      	ldrb	r3, [r7, #17]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d102      	bne.n	80108b6 <xSTM32_PhyRead+0x3e>
    {
        xResult = 0;
 80108b0:	2300      	movs	r3, #0
 80108b2:	617b      	str	r3, [r7, #20]
 80108b4:	e002      	b.n	80108bc <xSTM32_PhyRead+0x44>
    }
    else
    {
        xResult = -1;
 80108b6:	f04f 33ff 	mov.w	r3, #4294967295
 80108ba:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 80108bc:	697b      	ldr	r3, [r7, #20]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3718      	adds	r7, #24
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	20025160 	.word	0x20025160

080108cc <xSTM32_PhyWrite>:
/*-----------------------------------------------------------*/

BaseType_t xSTM32_PhyWrite( BaseType_t xAddress,
                            BaseType_t xRegister,
                            uint32_t ulValue )
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b086      	sub	sp, #24
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 80108d8:	4b10      	ldr	r3, [pc, #64]	; (801091c <xSTM32_PhyWrite+0x50>)
 80108da:	8a1b      	ldrh	r3, [r3, #16]
 80108dc:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	4b0e      	ldr	r3, [pc, #56]	; (801091c <xSTM32_PhyWrite+0x50>)
 80108e4:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_WritePHYRegister( &xETH, ( uint16_t ) xRegister, ulValue );
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	4619      	mov	r1, r3
 80108ee:	480b      	ldr	r0, [pc, #44]	; (801091c <xSTM32_PhyWrite+0x50>)
 80108f0:	f7f3 f99a 	bl	8003c28 <HAL_ETH_WritePHYRegister>
 80108f4:	4603      	mov	r3, r0
 80108f6:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 80108f8:	4a08      	ldr	r2, [pc, #32]	; (801091c <xSTM32_PhyWrite+0x50>)
 80108fa:	8a7b      	ldrh	r3, [r7, #18]
 80108fc:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 80108fe:	7c7b      	ldrb	r3, [r7, #17]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d102      	bne.n	801090a <xSTM32_PhyWrite+0x3e>
    {
        xResult = 0;
 8010904:	2300      	movs	r3, #0
 8010906:	617b      	str	r3, [r7, #20]
 8010908:	e002      	b.n	8010910 <xSTM32_PhyWrite+0x44>
    }
    else
    {
        xResult = -1;
 801090a:	f04f 33ff 	mov.w	r3, #4294967295
 801090e:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8010910:	697b      	ldr	r3, [r7, #20]
}
 8010912:	4618      	mov	r0, r3
 8010914:	3718      	adds	r7, #24
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	20025160 	.word	0x20025160

08010920 <vMACBProbePhy>:
/*-----------------------------------------------------------*/

void vMACBProbePhy( void )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	af00      	add	r7, sp, #0
    vPhyInitialise( &xPhyObject, xSTM32_PhyRead, xSTM32_PhyWrite );
 8010924:	4a06      	ldr	r2, [pc, #24]	; (8010940 <vMACBProbePhy+0x20>)
 8010926:	4907      	ldr	r1, [pc, #28]	; (8010944 <vMACBProbePhy+0x24>)
 8010928:	4807      	ldr	r0, [pc, #28]	; (8010948 <vMACBProbePhy+0x28>)
 801092a:	f000 f947 	bl	8010bbc <vPhyInitialise>
    xPhyDiscover( &xPhyObject );
 801092e:	4806      	ldr	r0, [pc, #24]	; (8010948 <vMACBProbePhy+0x28>)
 8010930:	f000 f95a 	bl	8010be8 <xPhyDiscover>
    xPhyConfigure( &xPhyObject, &xPHYProperties );
 8010934:	4905      	ldr	r1, [pc, #20]	; (801094c <vMACBProbePhy+0x2c>)
 8010936:	4804      	ldr	r0, [pc, #16]	; (8010948 <vMACBProbePhy+0x28>)
 8010938:	f000 fa52 	bl	8010de0 <xPhyConfigure>
}
 801093c:	bf00      	nop
 801093e:	bd80      	pop	{r7, pc}
 8010940:	080108cd 	.word	0x080108cd
 8010944:	08010879 	.word	0x08010879
 8010948:	20025120 	.word	0x20025120
 801094c:	080154ec 	.word	0x080154ec

08010950 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8010958:	4b37      	ldr	r3, [pc, #220]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 801095a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	4619      	mov	r1, r3
 8010960:	4836      	ldr	r0, [pc, #216]	; (8010a3c <prvEthernetUpdateConfig+0xec>)
 8010962:	f7f0 f837 	bl	80009d4 <vLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d103      	bne.n	8010974 <prvEthernetUpdateConfig+0x24>
 801096c:	4b32      	ldr	r3, [pc, #200]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 801096e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010970:	2b00      	cmp	r3, #0
 8010972:	d059      	beq.n	8010a28 <prvEthernetUpdateConfig+0xd8>
    {
        /* Restart the auto-negotiation. */
        if( xETH.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE )
 8010974:	4b32      	ldr	r3, [pc, #200]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d024      	beq.n	80109c6 <prvEthernetUpdateConfig+0x76>
        {
            xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 801097c:	4b2e      	ldr	r3, [pc, #184]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 801097e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010980:	2201      	movs	r2, #1
 8010982:	fa02 f303 	lsl.w	r3, r2, r3
 8010986:	3b01      	subs	r3, #1
 8010988:	4619      	mov	r1, r3
 801098a:	482b      	ldr	r0, [pc, #172]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 801098c:	f000 fb6e 	bl	801106c <xPhyStartAutoNegotiation>

            /* Configure the MAC with the Duplex Mode fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8010990:	4b29      	ldr	r3, [pc, #164]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 8010992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010996:	2b02      	cmp	r3, #2
 8010998:	d104      	bne.n	80109a4 <prvEthernetUpdateConfig+0x54>
            {
                xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801099a:	4b29      	ldr	r3, [pc, #164]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 801099c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80109a0:	60da      	str	r2, [r3, #12]
 80109a2:	e002      	b.n	80109aa <prvEthernetUpdateConfig+0x5a>
            }
            else
            {
                xETH.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80109a4:	4b26      	ldr	r3, [pc, #152]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	60da      	str	r2, [r3, #12]
            }

            /* Configure the MAC with the speed fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 80109aa:	4b23      	ldr	r3, [pc, #140]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 80109ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d103      	bne.n	80109bc <prvEthernetUpdateConfig+0x6c>
            {
                xETH.Init.Speed = ETH_SPEED_10M;
 80109b4:	4b22      	ldr	r3, [pc, #136]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	609a      	str	r2, [r3, #8]
 80109ba:	e02d      	b.n	8010a18 <prvEthernetUpdateConfig+0xc8>
            }
            else
            {
                xETH.Init.Speed = ETH_SPEED_100M;
 80109bc:	4b20      	ldr	r3, [pc, #128]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 80109be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80109c2:	609a      	str	r2, [r3, #8]
 80109c4:	e028      	b.n	8010a18 <prvEthernetUpdateConfig+0xc8>
        {
            /* Check parameters */
            assert_param( IS_ETH_SPEED( xETH.Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( xETH.Init.DuplexMode ) );

            if( xETH.Init.DuplexMode == ETH_MODE_FULLDUPLEX )
 80109c6:	4b1e      	ldr	r3, [pc, #120]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109ce:	d104      	bne.n	80109da <prvEthernetUpdateConfig+0x8a>
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_HALF;
 80109d0:	4b19      	ldr	r3, [pc, #100]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 80109d2:	2201      	movs	r2, #1
 80109d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80109d8:	e003      	b.n	80109e2 <prvEthernetUpdateConfig+0x92>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_FULL;
 80109da:	4b17      	ldr	r3, [pc, #92]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 80109dc:	2202      	movs	r2, #2
 80109de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            }

            if( xETH.Init.Speed == ETH_SPEED_10M )
 80109e2:	4b17      	ldr	r3, [pc, #92]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 80109e4:	689b      	ldr	r3, [r3, #8]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d104      	bne.n	80109f4 <prvEthernetUpdateConfig+0xa4>
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_10;
 80109ea:	4b13      	ldr	r3, [pc, #76]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 80109ec:	2201      	movs	r2, #1
 80109ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80109f2:	e003      	b.n	80109fc <prvEthernetUpdateConfig+0xac>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_100;
 80109f4:	4b10      	ldr	r3, [pc, #64]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 80109f6:	2202      	movs	r2, #2
 80109f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }

            xPhyObject.xPhyPreferences.ucMDI_X = PHY_MDIX_AUTO;
 80109fc:	4b0e      	ldr	r3, [pc, #56]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 80109fe:	2203      	movs	r2, #3
 8010a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            /* Use predefined (fixed) configuration. */
            xPhyFixedValue( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 8010a04:	4b0c      	ldr	r3, [pc, #48]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 8010a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a08:	2201      	movs	r2, #1
 8010a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	4619      	mov	r1, r3
 8010a12:	4809      	ldr	r0, [pc, #36]	; (8010a38 <prvEthernetUpdateConfig+0xe8>)
 8010a14:	f000 faea 	bl	8010fec <xPhyFixedValue>
        }

        /* ETHERNET MAC Re-Configuration */
        HAL_ETH_ConfigMAC( &xETH, ( ETH_MACInitTypeDef * ) NULL );
 8010a18:	2100      	movs	r1, #0
 8010a1a:	4809      	ldr	r0, [pc, #36]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 8010a1c:	f7f3 fa46 	bl	8003eac <HAL_ETH_ConfigMAC>

        /* Restart MAC interface */
        HAL_ETH_Start( &xETH );
 8010a20:	4807      	ldr	r0, [pc, #28]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 8010a22:	f7f3 f971 	bl	8003d08 <HAL_ETH_Start>
 8010a26:	e002      	b.n	8010a2e <prvEthernetUpdateConfig+0xde>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop( &xETH );
 8010a28:	4805      	ldr	r0, [pc, #20]	; (8010a40 <prvEthernetUpdateConfig+0xf0>)
 8010a2a:	f7f3 f99c 	bl	8003d66 <HAL_ETH_Stop>
    }
}
 8010a2e:	bf00      	nop
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	20025120 	.word	0x20025120
 8010a3c:	08015204 	.word	0x08015204
 8010a40:	20025160 	.word	0x20025160

08010a44 <prvEMACHandlerTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b086      	sub	sp, #24
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxLastMinBufferCount = 0;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	617b      	str	r3, [r7, #20]
    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        UBaseType_t uxLastMinQueueSpace = 0;
    #endif
    UBaseType_t uxCurrentCount;
    BaseType_t xResult;
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
 8010a50:	2364      	movs	r3, #100	; 0x64
 8010a52:	60fb      	str	r3, [r7, #12]
    /* Remove compiler warnings about unused parameters. */
    ( void ) pvParameters;

    for( ; ; )
    {
        xResult = 0;
 8010a54:	2300      	movs	r3, #0
 8010a56:	613b      	str	r3, [r7, #16]
        uxCurrentCount = uxGetMinimumFreeNetworkBuffers();
 8010a58:	f000 fe86 	bl	8011768 <uxGetMinimumFreeNetworkBuffers>
 8010a5c:	60b8      	str	r0, [r7, #8]

        if( uxLastMinBufferCount != uxCurrentCount )
 8010a5e:	697a      	ldr	r2, [r7, #20]
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d009      	beq.n	8010a7a <prvEMACHandlerTask+0x36>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentCount;
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	617b      	str	r3, [r7, #20]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 8010a6a:	f000 fe71 	bl	8011750 <uxGetNumberOfFreeNetworkBuffers>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	4619      	mov	r1, r3
 8010a74:	482c      	ldr	r0, [pc, #176]	; (8010b28 <prvEMACHandlerTask+0xe4>)
 8010a76:	f7ef ffad 	bl	80009d4 <vLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(), uxCurrentCount ) );
        }

        if( xTXDescriptorSemaphore != NULL )
 8010a7a:	4b2c      	ldr	r3, [pc, #176]	; (8010b2c <prvEMACHandlerTask+0xe8>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d013      	beq.n	8010aaa <prvEMACHandlerTask+0x66>
        {
            static UBaseType_t uxLowestSemCount = ( UBaseType_t ) ETH_TXBUFNB - 1;

            uxCurrentCount = uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8010a82:	4b2a      	ldr	r3, [pc, #168]	; (8010b2c <prvEMACHandlerTask+0xe8>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7f4 fc62 	bl	8005350 <uxQueueMessagesWaiting>
 8010a8c:	60b8      	str	r0, [r7, #8]

            if( uxLowestSemCount > uxCurrentCount )
 8010a8e:	4b28      	ldr	r3, [pc, #160]	; (8010b30 <prvEMACHandlerTask+0xec>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	68ba      	ldr	r2, [r7, #8]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d208      	bcs.n	8010aaa <prvEMACHandlerTask+0x66>
            {
                uxLowestSemCount = uxCurrentCount;
 8010a98:	4a25      	ldr	r2, [pc, #148]	; (8010b30 <prvEMACHandlerTask+0xec>)
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "TX DMA buffers: lowest %lu\n", uxLowestSemCount ) );
 8010a9e:	4b24      	ldr	r3, [pc, #144]	; (8010b30 <prvEMACHandlerTask+0xec>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	4823      	ldr	r0, [pc, #140]	; (8010b34 <prvEMACHandlerTask+0xf0>)
 8010aa6:	f7ef ff95 	bl	80009d4 <vLoggingPrintf>
                    FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
                }
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
 8010aaa:	4b23      	ldr	r3, [pc, #140]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	f003 0307 	and.w	r3, r3, #7
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d104      	bne.n	8010ac0 <prvEMACHandlerTask+0x7c>
        {
            /* No events to process now, wait for the next. */
            ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8010ab6:	68fa      	ldr	r2, [r7, #12]
 8010ab8:	2100      	movs	r1, #0
 8010aba:	2000      	movs	r0, #0
 8010abc:	f7f5 fe80 	bl	80067c0 <ulTaskGenericNotifyTake>
        }

        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
 8010ac0:	4b1d      	ldr	r3, [pc, #116]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 0301 	and.w	r3, r3, #1
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d008      	beq.n	8010ade <prvEMACHandlerTask+0x9a>
        {
            ulISREvents &= ~EMAC_IF_RX_EVENT;
 8010acc:	4b1a      	ldr	r3, [pc, #104]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f023 0301 	bic.w	r3, r3, #1
 8010ad4:	4a18      	ldr	r2, [pc, #96]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010ad6:	6013      	str	r3, [r2, #0]

            xResult = prvNetworkInterfaceInput();
 8010ad8:	f7ff fe1e 	bl	8010718 <prvNetworkInterfaceInput>
 8010adc:	6138      	str	r0, [r7, #16]
        }

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0 )
 8010ade:	4b16      	ldr	r3, [pc, #88]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f003 0302 	and.w	r3, r3, #2
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d007      	beq.n	8010afa <prvEMACHandlerTask+0xb6>
        {
            /* Code to release TX buffers if zero-copy is used. */
            ulISREvents &= ~EMAC_IF_TX_EVENT;
 8010aea:	4b13      	ldr	r3, [pc, #76]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f023 0302 	bic.w	r3, r3, #2
 8010af2:	4a11      	ldr	r2, [pc, #68]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010af4:	6013      	str	r3, [r2, #0]
            /* Check if DMA packets have been delivered. */
            vClearTXBuffers();
 8010af6:	f7ff fb77 	bl	80101e8 <vClearTXBuffers>
        }

        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0 )
 8010afa:	4b0f      	ldr	r3, [pc, #60]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f003 0304 	and.w	r3, r3, #4
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d005      	beq.n	8010b12 <prvEMACHandlerTask+0xce>
        {
            /* Future extension: logging about errors that occurred. */
            ulISREvents &= ~EMAC_IF_ERR_EVENT;
 8010b06:	4b0c      	ldr	r3, [pc, #48]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f023 0304 	bic.w	r3, r3, #4
 8010b0e:	4a0a      	ldr	r2, [pc, #40]	; (8010b38 <prvEMACHandlerTask+0xf4>)
 8010b10:	6013      	str	r3, [r2, #0]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != 0 )
 8010b12:	6939      	ldr	r1, [r7, #16]
 8010b14:	4809      	ldr	r0, [pc, #36]	; (8010b3c <prvEMACHandlerTask+0xf8>)
 8010b16:	f000 fc35 	bl	8011384 <xPhyCheckLinkStatus>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d099      	beq.n	8010a54 <prvEMACHandlerTask+0x10>
        {
            /* Something has changed to a Link Status, need re-check. */
            prvEthernetUpdateConfig( pdFALSE );
 8010b20:	2000      	movs	r0, #0
 8010b22:	f7ff ff15 	bl	8010950 <prvEthernetUpdateConfig>
        xResult = 0;
 8010b26:	e795      	b.n	8010a54 <prvEMACHandlerTask+0x10>
 8010b28:	08015238 	.word	0x08015238
 8010b2c:	200251a8 	.word	0x200251a8
 8010b30:	20000030 	.word	0x20000030
 8010b34:	0801525c 	.word	0x0801525c
 8010b38:	2002511c 	.word	0x2002511c
 8010b3c:	20025120 	.word	0x20025120

08010b40 <ETH_IRQHandler>:
    }
}
/*-----------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &xETH );
 8010b44:	4802      	ldr	r0, [pc, #8]	; (8010b50 <ETH_IRQHandler+0x10>)
 8010b46:	f7f2 ffc3 	bl	8003ad0 <HAL_ETH_IRQHandler>
}
 8010b4a:	bf00      	nop
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	20025160 	.word	0x20025160

08010b54 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8010b54:	b480      	push	{r7}
 8010b56:	b085      	sub	sp, #20
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	4a08      	ldr	r2, [pc, #32]	; (8010b80 <xHas_1F_PHYSPCS+0x2c>)
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d002      	beq.n	8010b6a <xHas_1F_PHYSPCS+0x16>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8010b64:	2301      	movs	r3, #1
 8010b66:	60fb      	str	r3, [r7, #12]
            break;
 8010b68:	e002      	b.n	8010b70 <xHas_1F_PHYSPCS+0x1c>

        case PHY_ID_DP83848I:
            xResult = pdFALSE;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	60fb      	str	r3, [r7, #12]
            break;
 8010b6e:	bf00      	nop
    }

    return xResult;
 8010b70:	68fb      	ldr	r3, [r7, #12]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3714      	adds	r7, #20
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop
 8010b80:	20005c90 	.word	0x20005c90

08010b84 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	4a09      	ldr	r2, [pc, #36]	; (8010bb4 <xHas_19_PHYCR+0x30>)
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d002      	beq.n	8010b9a <xHas_19_PHYCR+0x16>
 8010b94:	4a08      	ldr	r2, [pc, #32]	; (8010bb8 <xHas_19_PHYCR+0x34>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d102      	bne.n	8010ba0 <xHas_19_PHYCR+0x1c>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
            xResult = pdTRUE;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	60fb      	str	r3, [r7, #12]
            break;
 8010b9e:	e002      	b.n	8010ba6 <xHas_19_PHYCR+0x22>

        default:
            /* Most PHY's do not have a 19_PHYCR */
            xResult = pdFALSE;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	60fb      	str	r3, [r7, #12]
            break;
 8010ba4:	bf00      	nop
    }

    return xResult;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3714      	adds	r7, #20
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr
 8010bb4:	0007c130 	.word	0x0007c130
 8010bb8:	20005c90 	.word	0x20005c90

08010bbc <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b084      	sub	sp, #16
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8010bc8:	2240      	movs	r2, #64	; 0x40
 8010bca:	2100      	movs	r1, #0
 8010bcc:	68f8      	ldr	r0, [r7, #12]
 8010bce:	f000 fe34 	bl	801183a <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	68ba      	ldr	r2, [r7, #8]
 8010bd6:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	605a      	str	r2, [r3, #4]
}
 8010bde:	bf00      	nop
 8010be0:	3710      	adds	r7, #16
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}
	...

08010be8 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b086      	sub	sp, #24
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	629a      	str	r2, [r3, #40]	; 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	617b      	str	r3, [r7, #20]
 8010bfa:	e038      	b.n	8010c6e <xPhyDiscover+0x86>
    {
        uint32_t ulLowerID;

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f107 020c 	add.w	r2, r7, #12
 8010c04:	2103      	movs	r1, #3
 8010c06:	6978      	ldr	r0, [r7, #20]
 8010c08:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d029      	beq.n	8010c68 <xPhyDiscover+0x80>
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d026      	beq.n	8010c68 <xPhyDiscover+0x80>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f107 0208 	add.w	r2, r7, #8
 8010c22:	2102      	movs	r1, #2
 8010c24:	6978      	ldr	r0, [r7, #20]
 8010c26:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	041a      	lsls	r2, r3, #16
 8010c2c:	68f9      	ldr	r1, [r7, #12]
 8010c2e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8010c32:	400b      	ands	r3, r1
 8010c34:	4313      	orrs	r3, r2
 8010c36:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c3c:	697a      	ldr	r2, [r7, #20]
 8010c3e:	b2d1      	uxtb	r1, r2
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	4413      	add	r3, r2
 8010c44:	460a      	mov	r2, r1
 8010c46:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	3202      	adds	r2, #2
 8010c50:	6939      	ldr	r1, [r7, #16]
 8010c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c5a:	1c5a      	adds	r2, r3, #1
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	629a      	str	r2, [r3, #40]	; 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c64:	2b04      	cmp	r3, #4
 8010c66:	d005      	beq.n	8010c74 <xPhyDiscover+0x8c>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	617b      	str	r3, [r7, #20]
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	2b1f      	cmp	r3, #31
 8010c72:	ddc3      	ble.n	8010bfc <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	dd05      	ble.n	8010c88 <xPhyDiscover+0xa0>
    {
        FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	689b      	ldr	r3, [r3, #8]
 8010c80:	4619      	mov	r1, r3
 8010c82:	4804      	ldr	r0, [pc, #16]	; (8010c94 <xPhyDiscover+0xac>)
 8010c84:	f7ef fea6 	bl	80009d4 <vLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3718      	adds	r7, #24
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	08015278 	.word	0x08015278

08010c98 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b08c      	sub	sp, #48	; 0x30
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0UL;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010caa:	e017      	b.n	8010cdc <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8010cac:	687a      	ldr	r2, [r7, #4]
 8010cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb0:	4413      	add	r3, r2
 8010cb2:	3318      	adds	r3, #24
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f107 0218 	add.w	r2, r7, #24
 8010cc0:	2100      	movs	r1, #0
 8010cc2:	69f8      	ldr	r0, [r7, #28]
 8010cc4:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	69ba      	ldr	r2, [r7, #24]
 8010ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010cd0:	2100      	movs	r1, #0
 8010cd2:	69f8      	ldr	r0, [r7, #28]
 8010cd4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd8:	3301      	adds	r3, #1
 8010cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	dbe2      	blt.n	8010cac <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8010ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010cea:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8010cec:	f107 030c 	add.w	r3, r7, #12
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7f5 fa4b 	bl	800618c <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cfa:	e01f      	b.n	8010d3c <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8010cfc:	687a      	ldr	r2, [r7, #4]
 8010cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d00:	4413      	add	r3, r2
 8010d02:	3318      	adds	r3, #24
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f107 0218 	add.w	r2, r7, #24
 8010d10:	2100      	movs	r1, #0
 8010d12:	6a38      	ldr	r0, [r7, #32]
 8010d14:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8010d16:	69bb      	ldr	r3, [r7, #24]
 8010d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d10a      	bne.n	8010d36 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8010d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d22:	482d      	ldr	r0, [pc, #180]	; (8010dd8 <xPhyReset+0x140>)
 8010d24:	f7ef fe56 	bl	80009d4 <vLoggingPrintf>
                ulDoneMask |= ( 1UL << xPhyIndex );
 8010d28:	2201      	movs	r2, #1
 8010d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d32:	4313      	orrs	r3, r2
 8010d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d38:	3301      	adds	r3, #1
 8010d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d42:	429a      	cmp	r2, r3
 8010d44:	dbda      	blt.n	8010cfc <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8010d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d013      	beq.n	8010d76 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8010d4e:	f107 0214 	add.w	r2, r7, #20
 8010d52:	f107 030c 	add.w	r3, r7, #12
 8010d56:	4611      	mov	r1, r2
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7f5 fa4f 	bl	80061fc <xTaskCheckForTimeOut>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d004      	beq.n	8010d6e <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 8010d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d66:	481d      	ldr	r0, [pc, #116]	; (8010ddc <xPhyReset+0x144>)
 8010d68:	f7ef fe34 	bl	80009d4 <vLoggingPrintf>
            break;
 8010d6c:	e004      	b.n	8010d78 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8010d6e:	2032      	movs	r0, #50	; 0x32
 8010d70:	f7f4 fe8e 	bl	8005a90 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010d74:	e7bf      	b.n	8010cf6 <xPhyReset+0x5e>
            break;
 8010d76:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010d78:	2300      	movs	r3, #0
 8010d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d7c:	e01f      	b.n	8010dbe <xPhyReset+0x126>
    {
        if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 8010d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d82:	fa22 f303 	lsr.w	r3, r2, r3
 8010d86:	f003 0301 	and.w	r3, r3, #1
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d114      	bne.n	8010db8 <xPhyReset+0x120>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	4413      	add	r3, r2
 8010d94:	3318      	adds	r3, #24
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	627b      	str	r3, [r7, #36]	; 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f107 0218 	add.w	r2, r7, #24
 8010da2:	2100      	movs	r1, #0
 8010da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010da6:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	69ba      	ldr	r2, [r7, #24]
 8010dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010db2:	2100      	movs	r1, #0
 8010db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010db6:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dba:	3301      	adds	r3, #1
 8010dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	dbda      	blt.n	8010d7e <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8010dc8:	2032      	movs	r0, #50	; 0x32
 8010dca:	f7f4 fe61 	bl	8005a90 <vTaskDelay>

    return ulDoneMask;
 8010dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3730      	adds	r7, #48	; 0x30
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	08015284 	.word	0x08015284
 8010ddc:	080152a8 	.word	0x080152a8

08010de0 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b088      	sub	sp, #32
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	dc05      	bgt.n	8010dfe <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8010df2:	487c      	ldr	r0, [pc, #496]	; (8010fe4 <xPhyConfigure+0x204>)
 8010df4:	f7ef fdee 	bl	80009d4 <vLoggingPrintf>
        return -1;
 8010df8:	f04f 33ff 	mov.w	r3, #4294967295
 8010dfc:	e0ed      	b.n	8010fda <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	2b03      	cmp	r3, #3
 8010e04:	d107      	bne.n	8010e16 <xPhyConfigure+0x36>
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	789b      	ldrb	r3, [r3, #2]
 8010e0a:	2b03      	cmp	r3, #3
 8010e0c:	d103      	bne.n	8010e16 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8010e0e:	f240 13e1 	movw	r3, #481	; 0x1e1
 8010e12:	61fb      	str	r3, [r7, #28]
 8010e14:	e044      	b.n	8010ea0 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8010e16:	2301      	movs	r3, #1
 8010e18:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	2b03      	cmp	r3, #3
 8010e20:	d10d      	bne.n	8010e3e <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	789b      	ldrb	r3, [r3, #2]
 8010e26:	2b02      	cmp	r3, #2
 8010e28:	d104      	bne.n	8010e34 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8010e30:	61fb      	str	r3, [r7, #28]
 8010e32:	e035      	b.n	8010ea0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8010e3a:	61fb      	str	r3, [r7, #28]
 8010e3c:	e030      	b.n	8010ea0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	789b      	ldrb	r3, [r3, #2]
 8010e42:	2b03      	cmp	r3, #3
 8010e44:	d10d      	bne.n	8010e62 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d104      	bne.n	8010e58 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010e54:	61fb      	str	r3, [r7, #28]
 8010e56:	e023      	b.n	8010ea0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8010e5e:	61fb      	str	r3, [r7, #28]
 8010e60:	e01e      	b.n	8010ea0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	d10d      	bne.n	8010e86 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	789b      	ldrb	r3, [r3, #2]
 8010e6e:	2b02      	cmp	r3, #2
 8010e70:	d104      	bne.n	8010e7c <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e78:	61fb      	str	r3, [r7, #28]
 8010e7a:	e011      	b.n	8010ea0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e82:	61fb      	str	r3, [r7, #28]
 8010e84:	e00c      	b.n	8010ea0 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	789b      	ldrb	r3, [r3, #2]
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d104      	bne.n	8010e98 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e94:	61fb      	str	r3, [r7, #28]
 8010e96:	e003      	b.n	8010ea0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	f043 0320 	orr.w	r3, r3, #32
 8010e9e:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	4619      	mov	r1, r3
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7ff fef2 	bl	8010c98 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	61bb      	str	r3, [r7, #24]
 8010eb8:	e080      	b.n	8010fbc <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	69bb      	ldr	r3, [r7, #24]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	3318      	adds	r3, #24
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	69ba      	ldr	r2, [r7, #24]
 8010eca:	3202      	adds	r2, #2
 8010ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ed0:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	69fa      	ldr	r2, [r7, #28]
 8010ed8:	2104      	movs	r1, #4
 8010eda:	6978      	ldr	r0, [r7, #20]
 8010edc:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	f107 020c 	add.w	r2, r7, #12
 8010ee6:	2100      	movs	r1, #0
 8010ee8:	6978      	ldr	r0, [r7, #20]
 8010eea:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 8010ef2:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010efa:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	2b02      	cmp	r3, #2
 8010f02:	d003      	beq.n	8010f0c <xPhyConfigure+0x12c>
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	2b03      	cmp	r3, #3
 8010f0a:	d104      	bne.n	8010f16 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010f12:	60fb      	str	r3, [r7, #12]
 8010f14:	e007      	b.n	8010f26 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d103      	bne.n	8010f26 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010f24:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	789b      	ldrb	r3, [r3, #2]
 8010f2a:	2b02      	cmp	r3, #2
 8010f2c:	d003      	beq.n	8010f36 <xPhyConfigure+0x156>
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	789b      	ldrb	r3, [r3, #2]
 8010f32:	2b03      	cmp	r3, #3
 8010f34:	d104      	bne.n	8010f40 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f3c:	60fb      	str	r3, [r7, #12]
 8010f3e:	e007      	b.n	8010f50 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	789b      	ldrb	r3, [r3, #2]
 8010f44:	2b01      	cmp	r3, #1
 8010f46:	d103      	bne.n	8010f50 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f4e:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8010f50:	6938      	ldr	r0, [r7, #16]
 8010f52:	f7ff fe17 	bl	8010b84 <xHas_19_PHYCR>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d026      	beq.n	8010faa <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f107 0208 	add.w	r2, r7, #8
 8010f64:	2119      	movs	r1, #25
 8010f66:	6978      	ldr	r0, [r7, #20]
 8010f68:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8010f70:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	785b      	ldrb	r3, [r3, #1]
 8010f76:	2b03      	cmp	r3, #3
 8010f78:	d104      	bne.n	8010f84 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f80:	60bb      	str	r3, [r7, #8]
 8010f82:	e00c      	b.n	8010f9e <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	785b      	ldrb	r3, [r3, #1]
 8010f88:	2b02      	cmp	r3, #2
 8010f8a:	d104      	bne.n	8010f96 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f92:	60bb      	str	r3, [r7, #8]
 8010f94:	e003      	b.n	8010f9e <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f9c:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	68ba      	ldr	r2, [r7, #8]
 8010fa4:	2119      	movs	r1, #25
 8010fa6:	6978      	ldr	r0, [r7, #20]
 8010fa8:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	461a      	mov	r2, r3
 8010fae:	69f9      	ldr	r1, [r7, #28]
 8010fb0:	480d      	ldr	r0, [pc, #52]	; (8010fe8 <xPhyConfigure+0x208>)
 8010fb2:	f7ef fd0f 	bl	80009d4 <vLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8010fb6:	69bb      	ldr	r3, [r7, #24]
 8010fb8:	3301      	adds	r3, #1
 8010fba:	61bb      	str	r3, [r7, #24]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fc0:	69ba      	ldr	r2, [r7, #24]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	f6ff af79 	blt.w	8010eba <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	69fa      	ldr	r2, [r7, #28]
 8010fd6:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8010fd8:	2300      	movs	r3, #0
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3720      	adds	r7, #32
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	080152e0 	.word	0x080152e0
 8010fe8:	08015304 	.word	0x08015304

08010fec <xPhyFixedValue>:
 * The caller has set the values in 'xPhyPreferences' (ucDuplex and ucSpeed).
 * The PHY register phyREG_00_BMCR will be set for every connected PHY that matches
 * with ulPhyMask. */
BaseType_t xPhyFixedValue( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
    BaseType_t xPhyIndex;
    uint32_t ulValue, ulBitMask = ( uint32_t ) 1U;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	60fb      	str	r3, [r7, #12]

    ulValue = ( uint32_t ) 0U;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	613b      	str	r3, [r7, #16]

    if( pxPhyObject->xPhyPreferences.ucDuplex == PHY_DUPLEX_FULL )
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011004:	2b02      	cmp	r3, #2
 8011006:	d103      	bne.n	8011010 <xPhyFixedValue+0x24>
    {
        ulValue |= phyBMCR_FULL_DUPLEX;
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801100e:	613b      	str	r3, [r7, #16]
    }

    if( pxPhyObject->xPhyPreferences.ucSpeed == PHY_SPEED_100 )
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011016:	2b02      	cmp	r3, #2
 8011018:	d103      	bne.n	8011022 <xPhyFixedValue+0x36>
    {
        ulValue |= phyBMCR_SPEED_100;
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011020:	613b      	str	r3, [r7, #16]
    }

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011022:	2300      	movs	r3, #0
 8011024:	617b      	str	r3, [r7, #20]
 8011026:	e016      	b.n	8011056 <xPhyFixedValue+0x6a>
    {
        if( ( ulPhyMask & ulBitMask ) != 0lu )
 8011028:	683a      	ldr	r2, [r7, #0]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	4013      	ands	r3, r2
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00b      	beq.n	801104a <xPhyFixedValue+0x5e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	4413      	add	r3, r2
 8011038:	3318      	adds	r3, #24
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	60bb      	str	r3, [r7, #8]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulValue );
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	693a      	ldr	r2, [r7, #16]
 8011044:	2100      	movs	r1, #0
 8011046:	68b8      	ldr	r0, [r7, #8]
 8011048:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	3301      	adds	r3, #1
 801104e:	617b      	str	r3, [r7, #20]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	005b      	lsls	r3, r3, #1
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801105a:	697a      	ldr	r2, [r7, #20]
 801105c:	429a      	cmp	r2, r3
 801105e:	dbe3      	blt.n	8011028 <xPhyFixedValue+0x3c>
        }
    }

    return 0;
 8011060:	2300      	movs	r3, #0
}
 8011062:	4618      	mov	r0, r3
 8011064:	3718      	adds	r7, #24
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
	...

0801106c <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b092      	sub	sp, #72	; 0x48
 8011070:	af02      	add	r7, sp, #8
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulPHYLinkStatus, ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d101      	bne.n	8011080 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 801107c:	2300      	movs	r3, #0
 801107e:	e170      	b.n	8011362 <xPhyStartAutoNegotiation+0x2f6>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8011080:	2300      	movs	r3, #0
 8011082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011084:	e020      	b.n	80110c8 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8011086:	683a      	ldr	r2, [r7, #0]
 8011088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801108a:	fa22 f303 	lsr.w	r3, r2, r3
 801108e:	f003 0301 	and.w	r3, r3, #1
 8011092:	2b00      	cmp	r3, #0
 8011094:	d015      	beq.n	80110c2 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801109a:	4413      	add	r3, r2
 801109c:	3318      	adds	r3, #24
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	623b      	str	r3, [r7, #32]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	687a      	ldr	r2, [r7, #4]
 80110a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80110aa:	2104      	movs	r1, #4
 80110ac:	6a38      	ldr	r0, [r7, #32]
 80110ae:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80110b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80110bc:	2100      	movs	r1, #0
 80110be:	6a38      	ldr	r0, [r7, #32]
 80110c0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80110c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110c4:	3301      	adds	r3, #1
 80110c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110cc:	461a      	mov	r2, r3
 80110ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d3d8      	bcc.n	8011086 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 80110d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80110d8:	61bb      	str	r3, [r7, #24]
    vTaskSetTimeOutState( &xTimer );
 80110da:	f107 0310 	add.w	r3, r7, #16
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f5 f854 	bl	800618c <vTaskSetTimeOutState>
    ulDoneMask = 0;
 80110e4:	2300      	movs	r3, #0
 80110e6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 80110e8:	2301      	movs	r3, #1
 80110ea:	637b      	str	r3, [r7, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80110ec:	2300      	movs	r3, #0
 80110ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110f0:	e025      	b.n	801113e <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 80110f2:	683a      	ldr	r2, [r7, #0]
 80110f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f6:	4013      	ands	r3, r2
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d01a      	beq.n	8011132 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 80110fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011100:	4013      	ands	r3, r2
 8011102:	2b00      	cmp	r3, #0
 8011104:	d115      	bne.n	8011132 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801110a:	4413      	add	r3, r2
 801110c:	3318      	adds	r3, #24
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	627b      	str	r3, [r7, #36]	; 0x24

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	f107 021c 	add.w	r2, r7, #28
 801111a:	2101      	movs	r1, #1
 801111c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801111e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	f003 0320 	and.w	r3, r3, #32
 8011126:	2b00      	cmp	r3, #0
 8011128:	d003      	beq.n	8011132 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 801112a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801112e:	4313      	orrs	r3, r2
 8011130:	63bb      	str	r3, [r7, #56]	; 0x38
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011134:	3301      	adds	r3, #1
 8011136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113a:	005b      	lsls	r3, r3, #1
 801113c:	637b      	str	r3, [r7, #52]	; 0x34
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011142:	461a      	mov	r2, r3
 8011144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011146:	4293      	cmp	r3, r2
 8011148:	d3d3      	bcc.n	80110f2 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 801114a:	683a      	ldr	r2, [r7, #0]
 801114c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114e:	429a      	cmp	r2, r3
 8011150:	d013      	beq.n	801117a <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8011152:	f107 0218 	add.w	r2, r7, #24
 8011156:	f107 0310 	add.w	r3, r7, #16
 801115a:	4611      	mov	r1, r2
 801115c:	4618      	mov	r0, r3
 801115e:	f7f5 f84d 	bl	80061fc <xTaskCheckForTimeOut>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	d004      	beq.n	8011172 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 8011168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801116a:	4880      	ldr	r0, [pc, #512]	; (801136c <xPhyStartAutoNegotiation+0x300>)
 801116c:	f7ef fc32 	bl	80009d4 <vLoggingPrintf>
            break;
 8011170:	e004      	b.n	801117c <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8011172:	2032      	movs	r0, #50	; 0x32
 8011174:	f7f4 fc8c 	bl	8005a90 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8011178:	e7b6      	b.n	80110e8 <xPhyStartAutoNegotiation+0x7c>
            break;
 801117a:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 801117c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117e:	2b00      	cmp	r3, #0
 8011180:	f000 80ee 	beq.w	8011360 <xPhyStartAutoNegotiation+0x2f4>
    {
        ulBitMask = ( uint32_t ) 1U;
 8011184:	2301      	movs	r3, #1
 8011186:	637b      	str	r3, [r7, #52]	; 0x34
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801118c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118e:	43db      	mvns	r3, r3
 8011190:	401a      	ands	r2, r3
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	635a      	str	r2, [r3, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011196:	2300      	movs	r3, #0
 8011198:	63fb      	str	r3, [r7, #60]	; 0x3c
 801119a:	e0da      	b.n	8011352 <xPhyStartAutoNegotiation+0x2e6>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a0:	4413      	add	r3, r2
 80111a2:	3318      	adds	r3, #24
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111ac:	3202      	adds	r2, #2
 80111ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111b2:	62bb      	str	r3, [r7, #40]	; 0x28

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 80111b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b8:	4013      	ands	r3, r2
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	f000 80c2 	beq.w	8011344 <xPhyStartAutoNegotiation+0x2d8>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80111c8:	2100      	movs	r1, #0
 80111ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111cc:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f107 021c 	add.w	r2, r7, #28
 80111d6:	2101      	movs	r1, #1
 80111d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111da:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	f003 0304 	and.w	r3, r3, #4
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d00a      	beq.n	80111fc <xPhyStartAutoNegotiation+0x190>
            {
                ulPHYLinkStatus |= phyBMSR_LINK_STATUS;
 80111e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e8:	f043 0304 	orr.w	r3, r3, #4
 80111ec:	633b      	str	r3, [r7, #48]	; 0x30
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111f4:	431a      	orrs	r2, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	635a      	str	r2, [r3, #52]	; 0x34
 80111fa:	e003      	b.n	8011204 <xPhyStartAutoNegotiation+0x198>
            }
            else
            {
                ulPHYLinkStatus &= ~( phyBMSR_LINK_STATUS );
 80111fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fe:	f023 0304 	bic.w	r3, r3, #4
 8011202:	633b      	str	r3, [r7, #48]	; 0x30
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8011204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011206:	4a5a      	ldr	r2, [pc, #360]	; (8011370 <xPhyStartAutoNegotiation+0x304>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d13a      	bne.n	8011282 <xPhyStartAutoNegotiation+0x216>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f107 020c 	add.w	r2, r7, #12
 8011214:	211e      	movs	r1, #30
 8011216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011218:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	f003 0307 	and.w	r3, r3, #7
 8011220:	3b01      	subs	r3, #1
 8011222:	2b05      	cmp	r3, #5
 8011224:	d813      	bhi.n	801124e <xPhyStartAutoNegotiation+0x1e2>
 8011226:	a201      	add	r2, pc, #4	; (adr r2, 801122c <xPhyStartAutoNegotiation+0x1c0>)
 8011228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801122c:	08011245 	.word	0x08011245
 8011230:	0801124f 	.word	0x0801124f
 8011234:	0801124f 	.word	0x0801124f
 8011238:	0801124f 	.word	0x0801124f
 801123c:	08011245 	.word	0x08011245
 8011240:	0801124f 	.word	0x0801124f
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	f043 0302 	orr.w	r3, r3, #2
 801124a:	61fb      	str	r3, [r7, #28]
                        break;
 801124c:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	f003 0307 	and.w	r3, r3, #7
 8011254:	3b01      	subs	r3, #1
 8011256:	2b05      	cmp	r3, #5
 8011258:	d83c      	bhi.n	80112d4 <xPhyStartAutoNegotiation+0x268>
 801125a:	a201      	add	r2, pc, #4	; (adr r2, 8011260 <xPhyStartAutoNegotiation+0x1f4>)
 801125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011260:	080112d5 	.word	0x080112d5
 8011264:	080112d5 	.word	0x080112d5
 8011268:	080112d5 	.word	0x080112d5
 801126c:	080112d5 	.word	0x080112d5
 8011270:	08011279 	.word	0x08011279
 8011274:	08011279 	.word	0x08011279
                    case 0x05:
                    case 0x06:
/*	[101] = 10BASE-T full-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        /* Full duplex. */
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	f043 0304 	orr.w	r3, r3, #4
 801127e:	61fb      	str	r3, [r7, #28]
                        break;
 8011280:	e028      	b.n	80112d4 <xPhyStartAutoNegotiation+0x268>
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8011282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011284:	f7ff fc66 	bl	8010b54 <xHas_1F_PHYSPCS>
 8011288:	4603      	mov	r3, r0
 801128a:	2b00      	cmp	r3, #0
 801128c:	d01b      	beq.n	80112c6 <xPhyStartAutoNegotiation+0x25a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	f107 0208 	add.w	r2, r7, #8
 8011296:	211f      	movs	r1, #31
 8011298:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801129a:	4798      	blx	r3
                ulRegValue = 0;
 801129c:	2300      	movs	r3, #0
 801129e:	61fb      	str	r3, [r7, #28]

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	f003 0310 	and.w	r3, r3, #16
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <xPhyStartAutoNegotiation+0x246>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	f043 0304 	orr.w	r3, r3, #4
 80112b0:	61fb      	str	r3, [r7, #28]
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	f003 030c 	and.w	r3, r3, #12
 80112b8:	2b04      	cmp	r3, #4
 80112ba:	d10b      	bne.n	80112d4 <xPhyStartAutoNegotiation+0x268>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	f043 0302 	orr.w	r3, r3, #2
 80112c2:	61fb      	str	r3, [r7, #28]
 80112c4:	e006      	b.n	80112d4 <xPhyStartAutoNegotiation+0x268>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f107 021c 	add.w	r2, r7, #28
 80112ce:	2110      	movs	r1, #16
 80112d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112d2:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 80112d4:	69f9      	ldr	r1, [r7, #28]
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	f003 0304 	and.w	r3, r3, #4
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d001      	beq.n	80112e4 <xPhyStartAutoNegotiation+0x278>
 80112e0:	4a24      	ldr	r2, [pc, #144]	; (8011374 <xPhyStartAutoNegotiation+0x308>)
 80112e2:	e000      	b.n	80112e6 <xPhyStartAutoNegotiation+0x27a>
 80112e4:	4a24      	ldr	r2, [pc, #144]	; (8011378 <xPhyStartAutoNegotiation+0x30c>)
 80112e6:	69fb      	ldr	r3, [r7, #28]
 80112e8:	f003 0302 	and.w	r3, r3, #2
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d001      	beq.n	80112f4 <xPhyStartAutoNegotiation+0x288>
 80112f0:	200a      	movs	r0, #10
 80112f2:	e000      	b.n	80112f6 <xPhyStartAutoNegotiation+0x28a>
 80112f4:	2064      	movs	r0, #100	; 0x64
 80112f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f8:	f043 0304 	orr.w	r3, r3, #4
 80112fc:	633b      	str	r3, [r7, #48]	; 0x30
 80112fe:	4b1f      	ldr	r3, [pc, #124]	; (801137c <xPhyStartAutoNegotiation+0x310>)
 8011300:	9300      	str	r3, [sp, #0]
 8011302:	4603      	mov	r3, r0
 8011304:	481e      	ldr	r0, [pc, #120]	; (8011380 <xPhyStartAutoNegotiation+0x314>)
 8011306:	f7ef fb65 	bl	80009d4 <vLoggingPrintf>
                               ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( ulPHYLinkStatus |= phyBMSR_LINK_STATUS ) != 0 ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 801130a:	69fb      	ldr	r3, [r7, #28]
 801130c:	f003 0304 	and.w	r3, r3, #4
 8011310:	2b00      	cmp	r3, #0
 8011312:	d004      	beq.n	801131e <xPhyStartAutoNegotiation+0x2b2>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2202      	movs	r2, #2
 8011318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801131c:	e003      	b.n	8011326 <xPhyStartAutoNegotiation+0x2ba>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2201      	movs	r2, #1
 8011322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	f003 0302 	and.w	r3, r3, #2
 801132c:	2b00      	cmp	r3, #0
 801132e:	d004      	beq.n	801133a <xPhyStartAutoNegotiation+0x2ce>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2201      	movs	r2, #1
 8011334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011338:	e005      	b.n	8011346 <xPhyStartAutoNegotiation+0x2da>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2202      	movs	r2, #2
 801133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011342:	e000      	b.n	8011346 <xPhyStartAutoNegotiation+0x2da>
                continue;
 8011344:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011348:	3301      	adds	r3, #1
 801134a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801134e:	005b      	lsls	r3, r3, #1
 8011350:	637b      	str	r3, [r7, #52]	; 0x34
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011356:	461a      	mov	r2, r3
 8011358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801135a:	4293      	cmp	r3, r2
 801135c:	f4ff af1e 	bcc.w	801119c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3740      	adds	r7, #64	; 0x40
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	0801532c 	.word	0x0801532c
 8011370:	00221560 	.word	0x00221560
 8011374:	08015370 	.word	0x08015370
 8011378:	08015378 	.word	0x08015378
 801137c:	08015380 	.word	0x08015380
 8011380:	08015388 	.word	0x08015388

08011384 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b088      	sub	sp, #32
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 801138e:	2301      	movs	r3, #1
 8011390:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8011392:	2300      	movs	r3, #0
 8011394:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	dd2b      	ble.n	80113f4 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	331c      	adds	r3, #28
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7f4 fef3 	bl	800618c <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80113ac:	625a      	str	r2, [r3, #36]	; 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80113ae:	2300      	movs	r3, #0
 80113b0:	61bb      	str	r3, [r7, #24]
 80113b2:	e019      	b.n	80113e8 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	4013      	ands	r3, r2
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d10d      	bne.n	80113dc <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113c4:	69fb      	ldr	r3, [r7, #28]
 80113c6:	431a      	orrs	r2, r3
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	635a      	str	r2, [r3, #52]	; 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113d0:	4619      	mov	r1, r3
 80113d2:	4842      	ldr	r0, [pc, #264]	; (80114dc <xPhyCheckLinkStatus+0x158>)
 80113d4:	f7ef fafe 	bl	80009d4 <vLoggingPrintf>
                xNeedCheck = pdTRUE;
 80113d8:	2301      	movs	r3, #1
 80113da:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80113dc:	69bb      	ldr	r3, [r7, #24]
 80113de:	3301      	adds	r3, #1
 80113e0:	61bb      	str	r3, [r7, #24]
 80113e2:	69fb      	ldr	r3, [r7, #28]
 80113e4:	005b      	lsls	r3, r3, #1
 80113e6:	61fb      	str	r3, [r7, #28]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ec:	69ba      	ldr	r2, [r7, #24]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	dbe0      	blt.n	80113b4 <xPhyCheckLinkStatus+0x30>
 80113f2:	e06e      	b.n	80114d2 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f103 021c 	add.w	r2, r3, #28
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	3324      	adds	r3, #36	; 0x24
 80113fe:	4619      	mov	r1, r3
 8011400:	4610      	mov	r0, r2
 8011402:	f7f4 fefb 	bl	80061fc <xTaskCheckForTimeOut>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	d062      	beq.n	80114d2 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801140c:	2300      	movs	r3, #0
 801140e:	61bb      	str	r3, [r7, #24]
 8011410:	e045      	b.n	801149e <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	4413      	add	r3, r2
 8011418:	3318      	adds	r3, #24
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f107 020c 	add.w	r2, r7, #12
 8011426:	2101      	movs	r1, #1
 8011428:	6938      	ldr	r0, [r7, #16]
 801142a:	4798      	blx	r3
 801142c:	4603      	mov	r3, r0
 801142e:	2b00      	cmp	r3, #0
 8011430:	d12f      	bne.n	8011492 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	4013      	ands	r3, r2
 801143a:	2b00      	cmp	r3, #0
 801143c:	bf14      	ite	ne
 801143e:	2301      	movne	r3, #1
 8011440:	2300      	moveq	r3, #0
 8011442:	b2da      	uxtb	r2, r3
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f003 0304 	and.w	r3, r3, #4
 801144a:	2b00      	cmp	r3, #0
 801144c:	bf14      	ite	ne
 801144e:	2301      	movne	r3, #1
 8011450:	2300      	moveq	r3, #0
 8011452:	b2db      	uxtb	r3, r3
 8011454:	4053      	eors	r3, r2
 8011456:	b2db      	uxtb	r3, r3
 8011458:	2b00      	cmp	r3, #0
 801145a:	d01a      	beq.n	8011492 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f003 0304 	and.w	r3, r3, #4
 8011462:	2b00      	cmp	r3, #0
 8011464:	d006      	beq.n	8011474 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	431a      	orrs	r2, r3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	635a      	str	r2, [r3, #52]	; 0x34
 8011472:	e006      	b.n	8011482 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	43db      	mvns	r3, r3
 801147c:	401a      	ands	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	635a      	str	r2, [r3, #52]	; 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011486:	4619      	mov	r1, r3
 8011488:	4814      	ldr	r0, [pc, #80]	; (80114dc <xPhyCheckLinkStatus+0x158>)
 801148a:	f7ef faa3 	bl	80009d4 <vLoggingPrintf>
                    xNeedCheck = pdTRUE;
 801148e:	2301      	movs	r3, #1
 8011490:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011492:	69bb      	ldr	r3, [r7, #24]
 8011494:	3301      	adds	r3, #1
 8011496:	61bb      	str	r3, [r7, #24]
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	005b      	lsls	r3, r3, #1
 801149c:	61fb      	str	r3, [r7, #28]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a2:	69ba      	ldr	r2, [r7, #24]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	dbb4      	blt.n	8011412 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	331c      	adds	r3, #28
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7f4 fe6d 	bl	800618c <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114b6:	69fb      	ldr	r3, [r7, #28]
 80114b8:	085b      	lsrs	r3, r3, #1
 80114ba:	4013      	ands	r3, r2
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d004      	beq.n	80114ca <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80114c6:	625a      	str	r2, [r3, #36]	; 0x24
 80114c8:	e003      	b.n	80114d2 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80114d0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    }

    return xNeedCheck;
 80114d2:	697b      	ldr	r3, [r7, #20]
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3720      	adds	r7, #32
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	080153bc 	.word	0x080153bc

080114e0 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 80114e6:	4b34      	ldr	r3, [pc, #208]	; (80115b8 <xNetworkBuffersInitialise+0xd8>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d156      	bne.n	801159c <xNetworkBuffersInitialise+0xbc>
    {
        xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80114ee:	213c      	movs	r1, #60	; 0x3c
 80114f0:	203c      	movs	r0, #60	; 0x3c
 80114f2:	f7f3 fb8d 	bl	8004c10 <xQueueCreateCountingSemaphore>
 80114f6:	4602      	mov	r2, r0
 80114f8:	4b2f      	ldr	r3, [pc, #188]	; (80115b8 <xNetworkBuffersInitialise+0xd8>)
 80114fa:	601a      	str	r2, [r3, #0]
        configASSERT( xNetworkBufferSemaphore != NULL );
 80114fc:	4b2e      	ldr	r3, [pc, #184]	; (80115b8 <xNetworkBuffersInitialise+0xd8>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d103      	bne.n	801150c <xNetworkBuffersInitialise+0x2c>
 8011504:	492d      	ldr	r1, [pc, #180]	; (80115bc <xNetworkBuffersInitialise+0xdc>)
 8011506:	206a      	movs	r0, #106	; 0x6a
 8011508:	f7ef fa8d 	bl	8000a26 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 801150c:	4b2a      	ldr	r3, [pc, #168]	; (80115b8 <xNetworkBuffersInitialise+0xd8>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d043      	beq.n	801159c <xNetworkBuffersInitialise+0xbc>
        {
            #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 8011514:	4b28      	ldr	r3, [pc, #160]	; (80115b8 <xNetworkBuffersInitialise+0xd8>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4929      	ldr	r1, [pc, #164]	; (80115c0 <xNetworkBuffersInitialise+0xe0>)
 801151a:	4618      	mov	r0, r3
 801151c:	f7f4 f882 	bl	8005624 <vQueueAddToRegistry>
                    vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
                    vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
                }
            #endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

            vListInitialise( &xFreeBuffersList );
 8011520:	4828      	ldr	r0, [pc, #160]	; (80115c4 <xNetworkBuffersInitialise+0xe4>)
 8011522:	f7f3 f9f1 	bl	8004908 <vListInitialise>

            /* Initialise all the network buffers.  No storage is allocated to
             * the buffers yet. */
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8011526:	2300      	movs	r3, #0
 8011528:	603b      	str	r3, [r7, #0]
 801152a:	e031      	b.n	8011590 <xNetworkBuffersInitialise+0xb0>
            {
                /* Initialise and set the owner of the buffer list items. */
                xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 801152c:	4926      	ldr	r1, [pc, #152]	; (80115c8 <xNetworkBuffersInitialise+0xe8>)
 801152e:	683a      	ldr	r2, [r7, #0]
 8011530:	4613      	mov	r3, r2
 8011532:	009b      	lsls	r3, r3, #2
 8011534:	4413      	add	r3, r2
 8011536:	00db      	lsls	r3, r3, #3
 8011538:	440b      	add	r3, r1
 801153a:	3318      	adds	r3, #24
 801153c:	2200      	movs	r2, #0
 801153e:	601a      	str	r2, [r3, #0]
                vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8011540:	683a      	ldr	r2, [r7, #0]
 8011542:	4613      	mov	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	4413      	add	r3, r2
 8011548:	00db      	lsls	r3, r3, #3
 801154a:	4a1f      	ldr	r2, [pc, #124]	; (80115c8 <xNetworkBuffersInitialise+0xe8>)
 801154c:	4413      	add	r3, r2
 801154e:	4618      	mov	r0, r3
 8011550:	f7f3 f9fa 	bl	8004948 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 8011554:	683a      	ldr	r2, [r7, #0]
 8011556:	4613      	mov	r3, r2
 8011558:	009b      	lsls	r3, r3, #2
 801155a:	4413      	add	r3, r2
 801155c:	00db      	lsls	r3, r3, #3
 801155e:	4a1a      	ldr	r2, [pc, #104]	; (80115c8 <xNetworkBuffersInitialise+0xe8>)
 8011560:	1899      	adds	r1, r3, r2
 8011562:	4819      	ldr	r0, [pc, #100]	; (80115c8 <xNetworkBuffersInitialise+0xe8>)
 8011564:	683a      	ldr	r2, [r7, #0]
 8011566:	4613      	mov	r3, r2
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4413      	add	r3, r2
 801156c:	00db      	lsls	r3, r3, #3
 801156e:	4403      	add	r3, r0
 8011570:	330c      	adds	r3, #12
 8011572:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8011574:	683a      	ldr	r2, [r7, #0]
 8011576:	4613      	mov	r3, r2
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	4413      	add	r3, r2
 801157c:	00db      	lsls	r3, r3, #3
 801157e:	4a12      	ldr	r2, [pc, #72]	; (80115c8 <xNetworkBuffersInitialise+0xe8>)
 8011580:	4413      	add	r3, r2
 8011582:	4619      	mov	r1, r3
 8011584:	480f      	ldr	r0, [pc, #60]	; (80115c4 <xNetworkBuffersInitialise+0xe4>)
 8011586:	f7f3 fa10 	bl	80049aa <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	3301      	adds	r3, #1
 801158e:	603b      	str	r3, [r7, #0]
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	2b3b      	cmp	r3, #59	; 0x3b
 8011594:	d9ca      	bls.n	801152c <xNetworkBuffersInitialise+0x4c>
            }

            uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8011596:	4b0d      	ldr	r3, [pc, #52]	; (80115cc <xNetworkBuffersInitialise+0xec>)
 8011598:	223c      	movs	r2, #60	; 0x3c
 801159a:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 801159c:	4b06      	ldr	r3, [pc, #24]	; (80115b8 <xNetworkBuffersInitialise+0xd8>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d102      	bne.n	80115aa <xNetworkBuffersInitialise+0xca>
    {
        xReturn = pdFAIL;
 80115a4:	2300      	movs	r3, #0
 80115a6:	607b      	str	r3, [r7, #4]
 80115a8:	e001      	b.n	80115ae <xNetworkBuffersInitialise+0xce>
    }
    else
    {
        xReturn = pdPASS;
 80115aa:	2301      	movs	r3, #1
 80115ac:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 80115ae:	687b      	ldr	r3, [r7, #4]
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	20025b2c 	.word	0x20025b2c
 80115bc:	080153e4 	.word	0x080153e4
 80115c0:	08015434 	.word	0x08015434
 80115c4:	200251b4 	.word	0x200251b4
 80115c8:	200251cc 	.word	0x200251cc
 80115cc:	200251c8 	.word	0x200251c8

080115d0 <vReleaseNetworkBuffer>:
    return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t * pucEthernetBuffer )
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
    /* There is space before the Ethernet buffer in which a pointer to the
     * network buffer that references this Ethernet buffer is stored.  Remove the
     * space before freeing the buffer. */
    if( pucEthernetBuffer != NULL )
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d005      	beq.n	80115ea <vReleaseNetworkBuffer+0x1a>
    {
        pucEthernetBuffer -= ipBUFFER_PADDING;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	3b0a      	subs	r3, #10
 80115e2:	607b      	str	r3, [r7, #4]
        vPortFree( ( void * ) pucEthernetBuffer );
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7f5 fe1b 	bl	8007220 <vPortFree>
    }
}
 80115ea:	bf00      	nop
 80115ec:	3708      	adds	r7, #8
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
	...

080115f4 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 80115fe:	2300      	movs	r3, #0
 8011600:	60fb      	str	r3, [r7, #12]
    size_t uxCount;

    if( xNetworkBufferSemaphore != NULL )
 8011602:	4b35      	ldr	r3, [pc, #212]	; (80116d8 <pxGetNetworkBufferWithDescriptor+0xe4>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d061      	beq.n	80116ce <pxGetNetworkBufferWithDescriptor+0xda>
    {
        if( ( xRequestedSizeBytes != 0U ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d004      	beq.n	801161a <pxGetNetworkBufferWithDescriptor+0x26>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b45      	cmp	r3, #69	; 0x45
 8011614:	d801      	bhi.n	801161a <pxGetNetworkBufferWithDescriptor+0x26>
        {
            /* ARP packets can replace application packets, so the storage must be
             * at least large enough to hold an ARP. */
            xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 8011616:	2346      	movs	r3, #70	; 0x46
 8011618:	607b      	str	r3, [r7, #4]
        }

        /* Add 2 bytes to xRequestedSizeBytes and round up xRequestedSizeBytes
         * to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
        xRequestedSizeBytes += 2U;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	3302      	adds	r3, #2
 801161e:	607b      	str	r3, [r7, #4]

        if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1U ) ) != 0U )
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f003 0303 	and.w	r3, r3, #3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d004      	beq.n	8011634 <pxGetNetworkBufferWithDescriptor+0x40>
        {
            xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1U ) ) + 1U;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f043 0303 	orr.w	r3, r3, #3
 8011630:	3301      	adds	r3, #1
 8011632:	607b      	str	r3, [r7, #4]
        }

        /* If there is a semaphore available, there is a network buffer available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8011634:	4b28      	ldr	r3, [pc, #160]	; (80116d8 <pxGetNetworkBufferWithDescriptor+0xe4>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	6839      	ldr	r1, [r7, #0]
 801163a:	4618      	mov	r0, r3
 801163c:	f7f3 fd92 	bl	8005164 <xQueueSemaphoreTake>
 8011640:	4603      	mov	r3, r0
 8011642:	2b01      	cmp	r3, #1
 8011644:	d143      	bne.n	80116ce <pxGetNetworkBufferWithDescriptor+0xda>
        {
            /* Protect the structure as it is accessed from tasks and interrupts. */
            taskENTER_CRITICAL();
 8011646:	f7f6 f807 	bl	8007658 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 801164a:	4b24      	ldr	r3, [pc, #144]	; (80116dc <pxGetNetworkBufferWithDescriptor+0xe8>)
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	60fb      	str	r3, [r7, #12]
                ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	4618      	mov	r0, r3
 8011656:	f7f3 f9e1 	bl	8004a1c <uxListRemove>
            }
            taskEXIT_CRITICAL();
 801165a:	f7f6 f829 	bl	80076b0 <vPortExitCritical>

            /* Reading UBaseType_t, no critical section needed. */
            uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 801165e:	4b1f      	ldr	r3, [pc, #124]	; (80116dc <pxGetNetworkBufferWithDescriptor+0xe8>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	60bb      	str	r3, [r7, #8]

            if( uxMinimumFreeNetworkBuffers > uxCount )
 8011664:	4b1e      	ldr	r3, [pc, #120]	; (80116e0 <pxGetNetworkBufferWithDescriptor+0xec>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	68ba      	ldr	r2, [r7, #8]
 801166a:	429a      	cmp	r2, r3
 801166c:	d202      	bcs.n	8011674 <pxGetNetworkBufferWithDescriptor+0x80>
            {
                uxMinimumFreeNetworkBuffers = uxCount;
 801166e:	4a1c      	ldr	r2, [pc, #112]	; (80116e0 <pxGetNetworkBufferWithDescriptor+0xec>)
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	6013      	str	r3, [r2, #0]
            }

            /* Allocate storage of exactly the requested size to the buffer. */
            configASSERT( pxReturn->pucEthernetBuffer == NULL );
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	699b      	ldr	r3, [r3, #24]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d003      	beq.n	8011684 <pxGetNetworkBufferWithDescriptor+0x90>
 801167c:	4919      	ldr	r1, [pc, #100]	; (80116e4 <pxGetNetworkBufferWithDescriptor+0xf0>)
 801167e:	20fe      	movs	r0, #254	; 0xfe
 8011680:	f7ef f9d1 	bl	8000a26 <vAssertCalled>

            if( xRequestedSizeBytes > 0U )
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d021      	beq.n	80116ce <pxGetNetworkBufferWithDescriptor+0xda>
            {
                /* Extra space is obtained so a pointer to the network buffer can
                 * be stored at the beginning of the buffer. */
                pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	330a      	adds	r3, #10
 801168e:	4618      	mov	r0, r3
 8011690:	f7f5 fd0c 	bl	80070ac <pvPortMalloc>
 8011694:	4602      	mov	r2, r0
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	619a      	str	r2, [r3, #24]

                if( pxReturn->pucEthernetBuffer == NULL )
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	699b      	ldr	r3, [r3, #24]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d105      	bne.n	80116ae <pxGetNetworkBufferWithDescriptor+0xba>
                {
                    /* The attempt to allocate storage for the buffer payload failed,
                     * so the network buffer structure cannot be used and must be
                     * released. */
                    vReleaseNetworkBufferAndDescriptor( pxReturn );
 80116a2:	68f8      	ldr	r0, [r7, #12]
 80116a4:	f000 f820 	bl	80116e8 <vReleaseNetworkBufferAndDescriptor>
                    pxReturn = NULL;
 80116a8:	2300      	movs	r3, #0
 80116aa:	60fb      	str	r3, [r7, #12]
 80116ac:	e00f      	b.n	80116ce <pxGetNetworkBufferWithDescriptor+0xda>
                {
                    /* Store a pointer to the network buffer structure in the
                     * buffer storage area, then move the buffer pointer on past the
                     * stored pointer so the pointer value is not overwritten by the
                     * application when the buffer is used. */
                    *( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	699b      	ldr	r3, [r3, #24]
 80116b2:	68fa      	ldr	r2, [r7, #12]
 80116b4:	601a      	str	r2, [r3, #0]
                    pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	699b      	ldr	r3, [r3, #24]
 80116ba:	f103 020a 	add.w	r2, r3, #10
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	619a      	str	r2, [r3, #24]

                    /* Store the actual size of the allocated buffer, which may be
                     * greater than the original requested size. */
                    pxReturn->xDataLength = xRequestedSizeBytes;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	61da      	str	r2, [r3, #28]

                    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                        {
                            /* make sure the buffer is not linked */
                            pxReturn->pxNextBuffer = NULL;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2200      	movs	r2, #0
 80116cc:	625a      	str	r2, [r3, #36]	; 0x24
    {
        /* No action. */
        iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
    }

    return pxReturn;
 80116ce:	68fb      	ldr	r3, [r7, #12]
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3710      	adds	r7, #16
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	20025b2c 	.word	0x20025b2c
 80116dc:	200251b4 	.word	0x200251b4
 80116e0:	200251c8 	.word	0x200251c8
 80116e4:	080153e4 	.word	0x080153e4

080116e8 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
    /* Ensure the buffer is returned to the list of free buffers before the
    * counting semaphore is 'given' to say a buffer is available.  Release the
    * storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
    * IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
    * MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
    vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	699b      	ldr	r3, [r3, #24]
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7ff ff6b 	bl	80115d0 <vReleaseNetworkBuffer>
    pxNetworkBuffer->pucEthernetBuffer = NULL;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2200      	movs	r2, #0
 80116fe:	619a      	str	r2, [r3, #24]

    taskENTER_CRITICAL();
 8011700:	f7f5 ffaa 	bl	8007658 <vPortEnterCritical>
    {
        xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	691b      	ldr	r3, [r3, #16]
 8011708:	4a0f      	ldr	r2, [pc, #60]	; (8011748 <vReleaseNetworkBufferAndDescriptor+0x60>)
 801170a:	4293      	cmp	r3, r2
 801170c:	d101      	bne.n	8011712 <vReleaseNetworkBufferAndDescriptor+0x2a>
 801170e:	2301      	movs	r3, #1
 8011710:	e000      	b.n	8011714 <vReleaseNetworkBufferAndDescriptor+0x2c>
 8011712:	2300      	movs	r3, #0
 8011714:	60fb      	str	r3, [r7, #12]

        if( xListItemAlreadyInFreeList == pdFALSE )
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d104      	bne.n	8011726 <vReleaseNetworkBufferAndDescriptor+0x3e>
        {
            vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	4619      	mov	r1, r3
 8011720:	4809      	ldr	r0, [pc, #36]	; (8011748 <vReleaseNetworkBufferAndDescriptor+0x60>)
 8011722:	f7f3 f91e 	bl	8004962 <vListInsertEnd>
        }
    }
    taskEXIT_CRITICAL();
 8011726:	f7f5 ffc3 	bl	80076b0 <vPortExitCritical>

    /*
     * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
     * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
     */
    if( xListItemAlreadyInFreeList == pdFALSE )
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d106      	bne.n	801173e <vReleaseNetworkBufferAndDescriptor+0x56>
    {
        if( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 8011730:	4b06      	ldr	r3, [pc, #24]	; (801174c <vReleaseNetworkBufferAndDescriptor+0x64>)
 8011732:	6818      	ldr	r0, [r3, #0]
 8011734:	2300      	movs	r3, #0
 8011736:	2200      	movs	r2, #0
 8011738:	2100      	movs	r1, #0
 801173a:	f7f3 fa93 	bl	8004c64 <xQueueGenericSend>
    else
    {
        /* No action. */
        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 801173e:	bf00      	nop
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	200251b4 	.word	0x200251b4
 801174c:	20025b2c 	.word	0x20025b2c

08011750 <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8011750:	b480      	push	{r7}
 8011752:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8011754:	4b03      	ldr	r3, [pc, #12]	; (8011764 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8011756:	681b      	ldr	r3, [r3, #0]
}
 8011758:	4618      	mov	r0, r3
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
 8011762:	bf00      	nop
 8011764:	200251b4 	.word	0x200251b4

08011768 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8011768:	b480      	push	{r7}
 801176a:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 801176c:	4b03      	ldr	r3, [pc, #12]	; (801177c <uxGetMinimumFreeNetworkBuffers+0x14>)
 801176e:	681b      	ldr	r3, [r3, #0]
}
 8011770:	4618      	mov	r0, r3
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	200251c8 	.word	0x200251c8

08011780 <__errno>:
 8011780:	4b01      	ldr	r3, [pc, #4]	; (8011788 <__errno+0x8>)
 8011782:	6818      	ldr	r0, [r3, #0]
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop
 8011788:	20000034 	.word	0x20000034

0801178c <__libc_init_array>:
 801178c:	b570      	push	{r4, r5, r6, lr}
 801178e:	4e0d      	ldr	r6, [pc, #52]	; (80117c4 <__libc_init_array+0x38>)
 8011790:	4c0d      	ldr	r4, [pc, #52]	; (80117c8 <__libc_init_array+0x3c>)
 8011792:	1ba4      	subs	r4, r4, r6
 8011794:	10a4      	asrs	r4, r4, #2
 8011796:	2500      	movs	r5, #0
 8011798:	42a5      	cmp	r5, r4
 801179a:	d109      	bne.n	80117b0 <__libc_init_array+0x24>
 801179c:	4e0b      	ldr	r6, [pc, #44]	; (80117cc <__libc_init_array+0x40>)
 801179e:	4c0c      	ldr	r4, [pc, #48]	; (80117d0 <__libc_init_array+0x44>)
 80117a0:	f002 f894 	bl	80138cc <_init>
 80117a4:	1ba4      	subs	r4, r4, r6
 80117a6:	10a4      	asrs	r4, r4, #2
 80117a8:	2500      	movs	r5, #0
 80117aa:	42a5      	cmp	r5, r4
 80117ac:	d105      	bne.n	80117ba <__libc_init_array+0x2e>
 80117ae:	bd70      	pop	{r4, r5, r6, pc}
 80117b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80117b4:	4798      	blx	r3
 80117b6:	3501      	adds	r5, #1
 80117b8:	e7ee      	b.n	8011798 <__libc_init_array+0xc>
 80117ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80117be:	4798      	blx	r3
 80117c0:	3501      	adds	r5, #1
 80117c2:	e7f2      	b.n	80117aa <__libc_init_array+0x1e>
 80117c4:	080157b8 	.word	0x080157b8
 80117c8:	080157b8 	.word	0x080157b8
 80117cc:	080157b8 	.word	0x080157b8
 80117d0:	080157bc 	.word	0x080157bc

080117d4 <memcmp>:
 80117d4:	b530      	push	{r4, r5, lr}
 80117d6:	2400      	movs	r4, #0
 80117d8:	42a2      	cmp	r2, r4
 80117da:	d101      	bne.n	80117e0 <memcmp+0xc>
 80117dc:	2000      	movs	r0, #0
 80117de:	e007      	b.n	80117f0 <memcmp+0x1c>
 80117e0:	5d03      	ldrb	r3, [r0, r4]
 80117e2:	3401      	adds	r4, #1
 80117e4:	190d      	adds	r5, r1, r4
 80117e6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80117ea:	42ab      	cmp	r3, r5
 80117ec:	d0f4      	beq.n	80117d8 <memcmp+0x4>
 80117ee:	1b58      	subs	r0, r3, r5
 80117f0:	bd30      	pop	{r4, r5, pc}

080117f2 <memcpy>:
 80117f2:	b510      	push	{r4, lr}
 80117f4:	1e43      	subs	r3, r0, #1
 80117f6:	440a      	add	r2, r1
 80117f8:	4291      	cmp	r1, r2
 80117fa:	d100      	bne.n	80117fe <memcpy+0xc>
 80117fc:	bd10      	pop	{r4, pc}
 80117fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011806:	e7f7      	b.n	80117f8 <memcpy+0x6>

08011808 <memmove>:
 8011808:	4288      	cmp	r0, r1
 801180a:	b510      	push	{r4, lr}
 801180c:	eb01 0302 	add.w	r3, r1, r2
 8011810:	d807      	bhi.n	8011822 <memmove+0x1a>
 8011812:	1e42      	subs	r2, r0, #1
 8011814:	4299      	cmp	r1, r3
 8011816:	d00a      	beq.n	801182e <memmove+0x26>
 8011818:	f811 4b01 	ldrb.w	r4, [r1], #1
 801181c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011820:	e7f8      	b.n	8011814 <memmove+0xc>
 8011822:	4283      	cmp	r3, r0
 8011824:	d9f5      	bls.n	8011812 <memmove+0xa>
 8011826:	1881      	adds	r1, r0, r2
 8011828:	1ad2      	subs	r2, r2, r3
 801182a:	42d3      	cmn	r3, r2
 801182c:	d100      	bne.n	8011830 <memmove+0x28>
 801182e:	bd10      	pop	{r4, pc}
 8011830:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011834:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011838:	e7f7      	b.n	801182a <memmove+0x22>

0801183a <memset>:
 801183a:	4402      	add	r2, r0
 801183c:	4603      	mov	r3, r0
 801183e:	4293      	cmp	r3, r2
 8011840:	d100      	bne.n	8011844 <memset+0xa>
 8011842:	4770      	bx	lr
 8011844:	f803 1b01 	strb.w	r1, [r3], #1
 8011848:	e7f9      	b.n	801183e <memset+0x4>
	...

0801184c <_malloc_r>:
 801184c:	b570      	push	{r4, r5, r6, lr}
 801184e:	1ccd      	adds	r5, r1, #3
 8011850:	f025 0503 	bic.w	r5, r5, #3
 8011854:	3508      	adds	r5, #8
 8011856:	2d0c      	cmp	r5, #12
 8011858:	bf38      	it	cc
 801185a:	250c      	movcc	r5, #12
 801185c:	2d00      	cmp	r5, #0
 801185e:	4606      	mov	r6, r0
 8011860:	db01      	blt.n	8011866 <_malloc_r+0x1a>
 8011862:	42a9      	cmp	r1, r5
 8011864:	d903      	bls.n	801186e <_malloc_r+0x22>
 8011866:	230c      	movs	r3, #12
 8011868:	6033      	str	r3, [r6, #0]
 801186a:	2000      	movs	r0, #0
 801186c:	bd70      	pop	{r4, r5, r6, pc}
 801186e:	f001 fb65 	bl	8012f3c <__malloc_lock>
 8011872:	4a21      	ldr	r2, [pc, #132]	; (80118f8 <_malloc_r+0xac>)
 8011874:	6814      	ldr	r4, [r2, #0]
 8011876:	4621      	mov	r1, r4
 8011878:	b991      	cbnz	r1, 80118a0 <_malloc_r+0x54>
 801187a:	4c20      	ldr	r4, [pc, #128]	; (80118fc <_malloc_r+0xb0>)
 801187c:	6823      	ldr	r3, [r4, #0]
 801187e:	b91b      	cbnz	r3, 8011888 <_malloc_r+0x3c>
 8011880:	4630      	mov	r0, r6
 8011882:	f000 fce3 	bl	801224c <_sbrk_r>
 8011886:	6020      	str	r0, [r4, #0]
 8011888:	4629      	mov	r1, r5
 801188a:	4630      	mov	r0, r6
 801188c:	f000 fcde 	bl	801224c <_sbrk_r>
 8011890:	1c43      	adds	r3, r0, #1
 8011892:	d124      	bne.n	80118de <_malloc_r+0x92>
 8011894:	230c      	movs	r3, #12
 8011896:	6033      	str	r3, [r6, #0]
 8011898:	4630      	mov	r0, r6
 801189a:	f001 fb50 	bl	8012f3e <__malloc_unlock>
 801189e:	e7e4      	b.n	801186a <_malloc_r+0x1e>
 80118a0:	680b      	ldr	r3, [r1, #0]
 80118a2:	1b5b      	subs	r3, r3, r5
 80118a4:	d418      	bmi.n	80118d8 <_malloc_r+0x8c>
 80118a6:	2b0b      	cmp	r3, #11
 80118a8:	d90f      	bls.n	80118ca <_malloc_r+0x7e>
 80118aa:	600b      	str	r3, [r1, #0]
 80118ac:	50cd      	str	r5, [r1, r3]
 80118ae:	18cc      	adds	r4, r1, r3
 80118b0:	4630      	mov	r0, r6
 80118b2:	f001 fb44 	bl	8012f3e <__malloc_unlock>
 80118b6:	f104 000b 	add.w	r0, r4, #11
 80118ba:	1d23      	adds	r3, r4, #4
 80118bc:	f020 0007 	bic.w	r0, r0, #7
 80118c0:	1ac3      	subs	r3, r0, r3
 80118c2:	d0d3      	beq.n	801186c <_malloc_r+0x20>
 80118c4:	425a      	negs	r2, r3
 80118c6:	50e2      	str	r2, [r4, r3]
 80118c8:	e7d0      	b.n	801186c <_malloc_r+0x20>
 80118ca:	428c      	cmp	r4, r1
 80118cc:	684b      	ldr	r3, [r1, #4]
 80118ce:	bf16      	itet	ne
 80118d0:	6063      	strne	r3, [r4, #4]
 80118d2:	6013      	streq	r3, [r2, #0]
 80118d4:	460c      	movne	r4, r1
 80118d6:	e7eb      	b.n	80118b0 <_malloc_r+0x64>
 80118d8:	460c      	mov	r4, r1
 80118da:	6849      	ldr	r1, [r1, #4]
 80118dc:	e7cc      	b.n	8011878 <_malloc_r+0x2c>
 80118de:	1cc4      	adds	r4, r0, #3
 80118e0:	f024 0403 	bic.w	r4, r4, #3
 80118e4:	42a0      	cmp	r0, r4
 80118e6:	d005      	beq.n	80118f4 <_malloc_r+0xa8>
 80118e8:	1a21      	subs	r1, r4, r0
 80118ea:	4630      	mov	r0, r6
 80118ec:	f000 fcae 	bl	801224c <_sbrk_r>
 80118f0:	3001      	adds	r0, #1
 80118f2:	d0cf      	beq.n	8011894 <_malloc_r+0x48>
 80118f4:	6025      	str	r5, [r4, #0]
 80118f6:	e7db      	b.n	80118b0 <_malloc_r+0x64>
 80118f8:	20025b30 	.word	0x20025b30
 80118fc:	20025b34 	.word	0x20025b34

08011900 <__cvt>:
 8011900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011902:	ed2d 8b02 	vpush	{d8}
 8011906:	eeb0 8b40 	vmov.f64	d8, d0
 801190a:	b085      	sub	sp, #20
 801190c:	4617      	mov	r7, r2
 801190e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011910:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011912:	ee18 2a90 	vmov	r2, s17
 8011916:	f025 0520 	bic.w	r5, r5, #32
 801191a:	2a00      	cmp	r2, #0
 801191c:	bfb6      	itet	lt
 801191e:	222d      	movlt	r2, #45	; 0x2d
 8011920:	2200      	movge	r2, #0
 8011922:	eeb1 8b40 	vneglt.f64	d8, d0
 8011926:	2d46      	cmp	r5, #70	; 0x46
 8011928:	460c      	mov	r4, r1
 801192a:	701a      	strb	r2, [r3, #0]
 801192c:	d004      	beq.n	8011938 <__cvt+0x38>
 801192e:	2d45      	cmp	r5, #69	; 0x45
 8011930:	d100      	bne.n	8011934 <__cvt+0x34>
 8011932:	3401      	adds	r4, #1
 8011934:	2102      	movs	r1, #2
 8011936:	e000      	b.n	801193a <__cvt+0x3a>
 8011938:	2103      	movs	r1, #3
 801193a:	ab03      	add	r3, sp, #12
 801193c:	9301      	str	r3, [sp, #4]
 801193e:	ab02      	add	r3, sp, #8
 8011940:	9300      	str	r3, [sp, #0]
 8011942:	4622      	mov	r2, r4
 8011944:	4633      	mov	r3, r6
 8011946:	eeb0 0b48 	vmov.f64	d0, d8
 801194a:	f000 fd75 	bl	8012438 <_dtoa_r>
 801194e:	2d47      	cmp	r5, #71	; 0x47
 8011950:	d101      	bne.n	8011956 <__cvt+0x56>
 8011952:	07fb      	lsls	r3, r7, #31
 8011954:	d51e      	bpl.n	8011994 <__cvt+0x94>
 8011956:	2d46      	cmp	r5, #70	; 0x46
 8011958:	eb00 0304 	add.w	r3, r0, r4
 801195c:	d10c      	bne.n	8011978 <__cvt+0x78>
 801195e:	7802      	ldrb	r2, [r0, #0]
 8011960:	2a30      	cmp	r2, #48	; 0x30
 8011962:	d107      	bne.n	8011974 <__cvt+0x74>
 8011964:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196c:	bf1c      	itt	ne
 801196e:	f1c4 0401 	rsbne	r4, r4, #1
 8011972:	6034      	strne	r4, [r6, #0]
 8011974:	6832      	ldr	r2, [r6, #0]
 8011976:	4413      	add	r3, r2
 8011978:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011980:	d007      	beq.n	8011992 <__cvt+0x92>
 8011982:	2130      	movs	r1, #48	; 0x30
 8011984:	9a03      	ldr	r2, [sp, #12]
 8011986:	429a      	cmp	r2, r3
 8011988:	d204      	bcs.n	8011994 <__cvt+0x94>
 801198a:	1c54      	adds	r4, r2, #1
 801198c:	9403      	str	r4, [sp, #12]
 801198e:	7011      	strb	r1, [r2, #0]
 8011990:	e7f8      	b.n	8011984 <__cvt+0x84>
 8011992:	9303      	str	r3, [sp, #12]
 8011994:	9b03      	ldr	r3, [sp, #12]
 8011996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011998:	1a1b      	subs	r3, r3, r0
 801199a:	6013      	str	r3, [r2, #0]
 801199c:	b005      	add	sp, #20
 801199e:	ecbd 8b02 	vpop	{d8}
 80119a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119a4 <__exponent>:
 80119a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119a6:	2900      	cmp	r1, #0
 80119a8:	4604      	mov	r4, r0
 80119aa:	bfba      	itte	lt
 80119ac:	4249      	neglt	r1, r1
 80119ae:	232d      	movlt	r3, #45	; 0x2d
 80119b0:	232b      	movge	r3, #43	; 0x2b
 80119b2:	2909      	cmp	r1, #9
 80119b4:	f804 2b02 	strb.w	r2, [r4], #2
 80119b8:	7043      	strb	r3, [r0, #1]
 80119ba:	dd20      	ble.n	80119fe <__exponent+0x5a>
 80119bc:	f10d 0307 	add.w	r3, sp, #7
 80119c0:	461f      	mov	r7, r3
 80119c2:	260a      	movs	r6, #10
 80119c4:	fb91 f5f6 	sdiv	r5, r1, r6
 80119c8:	fb06 1115 	mls	r1, r6, r5, r1
 80119cc:	3130      	adds	r1, #48	; 0x30
 80119ce:	2d09      	cmp	r5, #9
 80119d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80119d4:	f103 32ff 	add.w	r2, r3, #4294967295
 80119d8:	4629      	mov	r1, r5
 80119da:	dc09      	bgt.n	80119f0 <__exponent+0x4c>
 80119dc:	3130      	adds	r1, #48	; 0x30
 80119de:	3b02      	subs	r3, #2
 80119e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80119e4:	42bb      	cmp	r3, r7
 80119e6:	4622      	mov	r2, r4
 80119e8:	d304      	bcc.n	80119f4 <__exponent+0x50>
 80119ea:	1a10      	subs	r0, r2, r0
 80119ec:	b003      	add	sp, #12
 80119ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119f0:	4613      	mov	r3, r2
 80119f2:	e7e7      	b.n	80119c4 <__exponent+0x20>
 80119f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119f8:	f804 2b01 	strb.w	r2, [r4], #1
 80119fc:	e7f2      	b.n	80119e4 <__exponent+0x40>
 80119fe:	2330      	movs	r3, #48	; 0x30
 8011a00:	4419      	add	r1, r3
 8011a02:	7083      	strb	r3, [r0, #2]
 8011a04:	1d02      	adds	r2, r0, #4
 8011a06:	70c1      	strb	r1, [r0, #3]
 8011a08:	e7ef      	b.n	80119ea <__exponent+0x46>
 8011a0a:	0000      	movs	r0, r0
 8011a0c:	0000      	movs	r0, r0
	...

08011a10 <_printf_float>:
 8011a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a14:	b08d      	sub	sp, #52	; 0x34
 8011a16:	460c      	mov	r4, r1
 8011a18:	4616      	mov	r6, r2
 8011a1a:	461f      	mov	r7, r3
 8011a1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011a20:	4605      	mov	r5, r0
 8011a22:	f001 fa63 	bl	8012eec <_localeconv_r>
 8011a26:	f8d0 b000 	ldr.w	fp, [r0]
 8011a2a:	4658      	mov	r0, fp
 8011a2c:	f7ee fc12 	bl	8000254 <strlen>
 8011a30:	2300      	movs	r3, #0
 8011a32:	930a      	str	r3, [sp, #40]	; 0x28
 8011a34:	f8d8 3000 	ldr.w	r3, [r8]
 8011a38:	9005      	str	r0, [sp, #20]
 8011a3a:	3307      	adds	r3, #7
 8011a3c:	f023 0307 	bic.w	r3, r3, #7
 8011a40:	f103 0108 	add.w	r1, r3, #8
 8011a44:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011a48:	6822      	ldr	r2, [r4, #0]
 8011a4a:	f8c8 1000 	str.w	r1, [r8]
 8011a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011a52:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011a56:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8011ce0 <_printf_float+0x2d0>
 8011a5a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011a5e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011a62:	eeb4 6b47 	vcmp.f64	d6, d7
 8011a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6a:	dd24      	ble.n	8011ab6 <_printf_float+0xa6>
 8011a6c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a74:	d502      	bpl.n	8011a7c <_printf_float+0x6c>
 8011a76:	232d      	movs	r3, #45	; 0x2d
 8011a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a7c:	499a      	ldr	r1, [pc, #616]	; (8011ce8 <_printf_float+0x2d8>)
 8011a7e:	4b9b      	ldr	r3, [pc, #620]	; (8011cec <_printf_float+0x2dc>)
 8011a80:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011a84:	bf8c      	ite	hi
 8011a86:	4688      	movhi	r8, r1
 8011a88:	4698      	movls	r8, r3
 8011a8a:	f022 0204 	bic.w	r2, r2, #4
 8011a8e:	2303      	movs	r3, #3
 8011a90:	6123      	str	r3, [r4, #16]
 8011a92:	6022      	str	r2, [r4, #0]
 8011a94:	f04f 0a00 	mov.w	sl, #0
 8011a98:	9700      	str	r7, [sp, #0]
 8011a9a:	4633      	mov	r3, r6
 8011a9c:	aa0b      	add	r2, sp, #44	; 0x2c
 8011a9e:	4621      	mov	r1, r4
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	f000 f9e1 	bl	8011e68 <_printf_common>
 8011aa6:	3001      	adds	r0, #1
 8011aa8:	f040 8089 	bne.w	8011bbe <_printf_float+0x1ae>
 8011aac:	f04f 30ff 	mov.w	r0, #4294967295
 8011ab0:	b00d      	add	sp, #52	; 0x34
 8011ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab6:	eeb4 0b40 	vcmp.f64	d0, d0
 8011aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011abe:	d702      	bvc.n	8011ac6 <_printf_float+0xb6>
 8011ac0:	498b      	ldr	r1, [pc, #556]	; (8011cf0 <_printf_float+0x2e0>)
 8011ac2:	4b8c      	ldr	r3, [pc, #560]	; (8011cf4 <_printf_float+0x2e4>)
 8011ac4:	e7dc      	b.n	8011a80 <_printf_float+0x70>
 8011ac6:	6861      	ldr	r1, [r4, #4]
 8011ac8:	1c4b      	adds	r3, r1, #1
 8011aca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011ace:	ab0a      	add	r3, sp, #40	; 0x28
 8011ad0:	a809      	add	r0, sp, #36	; 0x24
 8011ad2:	d13b      	bne.n	8011b4c <_printf_float+0x13c>
 8011ad4:	2106      	movs	r1, #6
 8011ad6:	6061      	str	r1, [r4, #4]
 8011ad8:	f04f 0c00 	mov.w	ip, #0
 8011adc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8011ae0:	e9cd 0900 	strd	r0, r9, [sp]
 8011ae4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011ae8:	6022      	str	r2, [r4, #0]
 8011aea:	6861      	ldr	r1, [r4, #4]
 8011aec:	4628      	mov	r0, r5
 8011aee:	f7ff ff07 	bl	8011900 <__cvt>
 8011af2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8011af6:	2b47      	cmp	r3, #71	; 0x47
 8011af8:	4680      	mov	r8, r0
 8011afa:	d109      	bne.n	8011b10 <_printf_float+0x100>
 8011afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011afe:	1cd8      	adds	r0, r3, #3
 8011b00:	db02      	blt.n	8011b08 <_printf_float+0xf8>
 8011b02:	6862      	ldr	r2, [r4, #4]
 8011b04:	4293      	cmp	r3, r2
 8011b06:	dd47      	ble.n	8011b98 <_printf_float+0x188>
 8011b08:	f1a9 0902 	sub.w	r9, r9, #2
 8011b0c:	fa5f f989 	uxtb.w	r9, r9
 8011b10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011b14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b16:	d824      	bhi.n	8011b62 <_printf_float+0x152>
 8011b18:	3901      	subs	r1, #1
 8011b1a:	464a      	mov	r2, r9
 8011b1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b20:	9109      	str	r1, [sp, #36]	; 0x24
 8011b22:	f7ff ff3f 	bl	80119a4 <__exponent>
 8011b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b28:	1813      	adds	r3, r2, r0
 8011b2a:	2a01      	cmp	r2, #1
 8011b2c:	4682      	mov	sl, r0
 8011b2e:	6123      	str	r3, [r4, #16]
 8011b30:	dc02      	bgt.n	8011b38 <_printf_float+0x128>
 8011b32:	6822      	ldr	r2, [r4, #0]
 8011b34:	07d1      	lsls	r1, r2, #31
 8011b36:	d501      	bpl.n	8011b3c <_printf_float+0x12c>
 8011b38:	3301      	adds	r3, #1
 8011b3a:	6123      	str	r3, [r4, #16]
 8011b3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d0a9      	beq.n	8011a98 <_printf_float+0x88>
 8011b44:	232d      	movs	r3, #45	; 0x2d
 8011b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b4a:	e7a5      	b.n	8011a98 <_printf_float+0x88>
 8011b4c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8011b50:	f000 8178 	beq.w	8011e44 <_printf_float+0x434>
 8011b54:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011b58:	d1be      	bne.n	8011ad8 <_printf_float+0xc8>
 8011b5a:	2900      	cmp	r1, #0
 8011b5c:	d1bc      	bne.n	8011ad8 <_printf_float+0xc8>
 8011b5e:	2101      	movs	r1, #1
 8011b60:	e7b9      	b.n	8011ad6 <_printf_float+0xc6>
 8011b62:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011b66:	d119      	bne.n	8011b9c <_printf_float+0x18c>
 8011b68:	2900      	cmp	r1, #0
 8011b6a:	6863      	ldr	r3, [r4, #4]
 8011b6c:	dd0c      	ble.n	8011b88 <_printf_float+0x178>
 8011b6e:	6121      	str	r1, [r4, #16]
 8011b70:	b913      	cbnz	r3, 8011b78 <_printf_float+0x168>
 8011b72:	6822      	ldr	r2, [r4, #0]
 8011b74:	07d2      	lsls	r2, r2, #31
 8011b76:	d502      	bpl.n	8011b7e <_printf_float+0x16e>
 8011b78:	3301      	adds	r3, #1
 8011b7a:	440b      	add	r3, r1
 8011b7c:	6123      	str	r3, [r4, #16]
 8011b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b80:	65a3      	str	r3, [r4, #88]	; 0x58
 8011b82:	f04f 0a00 	mov.w	sl, #0
 8011b86:	e7d9      	b.n	8011b3c <_printf_float+0x12c>
 8011b88:	b913      	cbnz	r3, 8011b90 <_printf_float+0x180>
 8011b8a:	6822      	ldr	r2, [r4, #0]
 8011b8c:	07d0      	lsls	r0, r2, #31
 8011b8e:	d501      	bpl.n	8011b94 <_printf_float+0x184>
 8011b90:	3302      	adds	r3, #2
 8011b92:	e7f3      	b.n	8011b7c <_printf_float+0x16c>
 8011b94:	2301      	movs	r3, #1
 8011b96:	e7f1      	b.n	8011b7c <_printf_float+0x16c>
 8011b98:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011b9c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	db05      	blt.n	8011bb0 <_printf_float+0x1a0>
 8011ba4:	6822      	ldr	r2, [r4, #0]
 8011ba6:	6123      	str	r3, [r4, #16]
 8011ba8:	07d1      	lsls	r1, r2, #31
 8011baa:	d5e8      	bpl.n	8011b7e <_printf_float+0x16e>
 8011bac:	3301      	adds	r3, #1
 8011bae:	e7e5      	b.n	8011b7c <_printf_float+0x16c>
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	bfd4      	ite	le
 8011bb4:	f1c3 0302 	rsble	r3, r3, #2
 8011bb8:	2301      	movgt	r3, #1
 8011bba:	4413      	add	r3, r2
 8011bbc:	e7de      	b.n	8011b7c <_printf_float+0x16c>
 8011bbe:	6823      	ldr	r3, [r4, #0]
 8011bc0:	055a      	lsls	r2, r3, #21
 8011bc2:	d407      	bmi.n	8011bd4 <_printf_float+0x1c4>
 8011bc4:	6923      	ldr	r3, [r4, #16]
 8011bc6:	4642      	mov	r2, r8
 8011bc8:	4631      	mov	r1, r6
 8011bca:	4628      	mov	r0, r5
 8011bcc:	47b8      	blx	r7
 8011bce:	3001      	adds	r0, #1
 8011bd0:	d12a      	bne.n	8011c28 <_printf_float+0x218>
 8011bd2:	e76b      	b.n	8011aac <_printf_float+0x9c>
 8011bd4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011bd8:	f240 80de 	bls.w	8011d98 <_printf_float+0x388>
 8011bdc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011be0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be8:	d133      	bne.n	8011c52 <_printf_float+0x242>
 8011bea:	2301      	movs	r3, #1
 8011bec:	4a42      	ldr	r2, [pc, #264]	; (8011cf8 <_printf_float+0x2e8>)
 8011bee:	4631      	mov	r1, r6
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	47b8      	blx	r7
 8011bf4:	3001      	adds	r0, #1
 8011bf6:	f43f af59 	beq.w	8011aac <_printf_float+0x9c>
 8011bfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	db02      	blt.n	8011c08 <_printf_float+0x1f8>
 8011c02:	6823      	ldr	r3, [r4, #0]
 8011c04:	07d8      	lsls	r0, r3, #31
 8011c06:	d50f      	bpl.n	8011c28 <_printf_float+0x218>
 8011c08:	9b05      	ldr	r3, [sp, #20]
 8011c0a:	465a      	mov	r2, fp
 8011c0c:	4631      	mov	r1, r6
 8011c0e:	4628      	mov	r0, r5
 8011c10:	47b8      	blx	r7
 8011c12:	3001      	adds	r0, #1
 8011c14:	f43f af4a 	beq.w	8011aac <_printf_float+0x9c>
 8011c18:	f04f 0800 	mov.w	r8, #0
 8011c1c:	f104 091a 	add.w	r9, r4, #26
 8011c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c22:	3b01      	subs	r3, #1
 8011c24:	4543      	cmp	r3, r8
 8011c26:	dc09      	bgt.n	8011c3c <_printf_float+0x22c>
 8011c28:	6823      	ldr	r3, [r4, #0]
 8011c2a:	079b      	lsls	r3, r3, #30
 8011c2c:	f100 8105 	bmi.w	8011e3a <_printf_float+0x42a>
 8011c30:	68e0      	ldr	r0, [r4, #12]
 8011c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c34:	4298      	cmp	r0, r3
 8011c36:	bfb8      	it	lt
 8011c38:	4618      	movlt	r0, r3
 8011c3a:	e739      	b.n	8011ab0 <_printf_float+0xa0>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	464a      	mov	r2, r9
 8011c40:	4631      	mov	r1, r6
 8011c42:	4628      	mov	r0, r5
 8011c44:	47b8      	blx	r7
 8011c46:	3001      	adds	r0, #1
 8011c48:	f43f af30 	beq.w	8011aac <_printf_float+0x9c>
 8011c4c:	f108 0801 	add.w	r8, r8, #1
 8011c50:	e7e6      	b.n	8011c20 <_printf_float+0x210>
 8011c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	dc2b      	bgt.n	8011cb0 <_printf_float+0x2a0>
 8011c58:	2301      	movs	r3, #1
 8011c5a:	4a27      	ldr	r2, [pc, #156]	; (8011cf8 <_printf_float+0x2e8>)
 8011c5c:	4631      	mov	r1, r6
 8011c5e:	4628      	mov	r0, r5
 8011c60:	47b8      	blx	r7
 8011c62:	3001      	adds	r0, #1
 8011c64:	f43f af22 	beq.w	8011aac <_printf_float+0x9c>
 8011c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c6a:	b923      	cbnz	r3, 8011c76 <_printf_float+0x266>
 8011c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c6e:	b913      	cbnz	r3, 8011c76 <_printf_float+0x266>
 8011c70:	6823      	ldr	r3, [r4, #0]
 8011c72:	07d9      	lsls	r1, r3, #31
 8011c74:	d5d8      	bpl.n	8011c28 <_printf_float+0x218>
 8011c76:	9b05      	ldr	r3, [sp, #20]
 8011c78:	465a      	mov	r2, fp
 8011c7a:	4631      	mov	r1, r6
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	47b8      	blx	r7
 8011c80:	3001      	adds	r0, #1
 8011c82:	f43f af13 	beq.w	8011aac <_printf_float+0x9c>
 8011c86:	f04f 0900 	mov.w	r9, #0
 8011c8a:	f104 0a1a 	add.w	sl, r4, #26
 8011c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c90:	425b      	negs	r3, r3
 8011c92:	454b      	cmp	r3, r9
 8011c94:	dc01      	bgt.n	8011c9a <_printf_float+0x28a>
 8011c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c98:	e795      	b.n	8011bc6 <_printf_float+0x1b6>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	4652      	mov	r2, sl
 8011c9e:	4631      	mov	r1, r6
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	47b8      	blx	r7
 8011ca4:	3001      	adds	r0, #1
 8011ca6:	f43f af01 	beq.w	8011aac <_printf_float+0x9c>
 8011caa:	f109 0901 	add.w	r9, r9, #1
 8011cae:	e7ee      	b.n	8011c8e <_printf_float+0x27e>
 8011cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	bfa8      	it	ge
 8011cb8:	461a      	movge	r2, r3
 8011cba:	2a00      	cmp	r2, #0
 8011cbc:	4691      	mov	r9, r2
 8011cbe:	dd07      	ble.n	8011cd0 <_printf_float+0x2c0>
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	4631      	mov	r1, r6
 8011cc4:	4642      	mov	r2, r8
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	47b8      	blx	r7
 8011cca:	3001      	adds	r0, #1
 8011ccc:	f43f aeee 	beq.w	8011aac <_printf_float+0x9c>
 8011cd0:	f104 031a 	add.w	r3, r4, #26
 8011cd4:	f04f 0a00 	mov.w	sl, #0
 8011cd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cdc:	9307      	str	r3, [sp, #28]
 8011cde:	e017      	b.n	8011d10 <_printf_float+0x300>
 8011ce0:	ffffffff 	.word	0xffffffff
 8011ce4:	7fefffff 	.word	0x7fefffff
 8011ce8:	08015558 	.word	0x08015558
 8011cec:	08015554 	.word	0x08015554
 8011cf0:	08015560 	.word	0x08015560
 8011cf4:	0801555c 	.word	0x0801555c
 8011cf8:	08015564 	.word	0x08015564
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	9a07      	ldr	r2, [sp, #28]
 8011d00:	4631      	mov	r1, r6
 8011d02:	4628      	mov	r0, r5
 8011d04:	47b8      	blx	r7
 8011d06:	3001      	adds	r0, #1
 8011d08:	f43f aed0 	beq.w	8011aac <_printf_float+0x9c>
 8011d0c:	f10a 0a01 	add.w	sl, sl, #1
 8011d10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d12:	9306      	str	r3, [sp, #24]
 8011d14:	eba3 0309 	sub.w	r3, r3, r9
 8011d18:	4553      	cmp	r3, sl
 8011d1a:	dcef      	bgt.n	8011cfc <_printf_float+0x2ec>
 8011d1c:	9b06      	ldr	r3, [sp, #24]
 8011d1e:	4498      	add	r8, r3
 8011d20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d24:	429a      	cmp	r2, r3
 8011d26:	db15      	blt.n	8011d54 <_printf_float+0x344>
 8011d28:	6823      	ldr	r3, [r4, #0]
 8011d2a:	07da      	lsls	r2, r3, #31
 8011d2c:	d412      	bmi.n	8011d54 <_printf_float+0x344>
 8011d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d30:	9a06      	ldr	r2, [sp, #24]
 8011d32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d34:	1a9a      	subs	r2, r3, r2
 8011d36:	eba3 0a01 	sub.w	sl, r3, r1
 8011d3a:	4592      	cmp	sl, r2
 8011d3c:	bfa8      	it	ge
 8011d3e:	4692      	movge	sl, r2
 8011d40:	f1ba 0f00 	cmp.w	sl, #0
 8011d44:	dc0e      	bgt.n	8011d64 <_printf_float+0x354>
 8011d46:	f04f 0800 	mov.w	r8, #0
 8011d4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d4e:	f104 091a 	add.w	r9, r4, #26
 8011d52:	e019      	b.n	8011d88 <_printf_float+0x378>
 8011d54:	9b05      	ldr	r3, [sp, #20]
 8011d56:	465a      	mov	r2, fp
 8011d58:	4631      	mov	r1, r6
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	47b8      	blx	r7
 8011d5e:	3001      	adds	r0, #1
 8011d60:	d1e5      	bne.n	8011d2e <_printf_float+0x31e>
 8011d62:	e6a3      	b.n	8011aac <_printf_float+0x9c>
 8011d64:	4653      	mov	r3, sl
 8011d66:	4642      	mov	r2, r8
 8011d68:	4631      	mov	r1, r6
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	47b8      	blx	r7
 8011d6e:	3001      	adds	r0, #1
 8011d70:	d1e9      	bne.n	8011d46 <_printf_float+0x336>
 8011d72:	e69b      	b.n	8011aac <_printf_float+0x9c>
 8011d74:	2301      	movs	r3, #1
 8011d76:	464a      	mov	r2, r9
 8011d78:	4631      	mov	r1, r6
 8011d7a:	4628      	mov	r0, r5
 8011d7c:	47b8      	blx	r7
 8011d7e:	3001      	adds	r0, #1
 8011d80:	f43f ae94 	beq.w	8011aac <_printf_float+0x9c>
 8011d84:	f108 0801 	add.w	r8, r8, #1
 8011d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d8c:	1a9b      	subs	r3, r3, r2
 8011d8e:	eba3 030a 	sub.w	r3, r3, sl
 8011d92:	4543      	cmp	r3, r8
 8011d94:	dcee      	bgt.n	8011d74 <_printf_float+0x364>
 8011d96:	e747      	b.n	8011c28 <_printf_float+0x218>
 8011d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d9a:	2a01      	cmp	r2, #1
 8011d9c:	dc01      	bgt.n	8011da2 <_printf_float+0x392>
 8011d9e:	07db      	lsls	r3, r3, #31
 8011da0:	d539      	bpl.n	8011e16 <_printf_float+0x406>
 8011da2:	2301      	movs	r3, #1
 8011da4:	4642      	mov	r2, r8
 8011da6:	4631      	mov	r1, r6
 8011da8:	4628      	mov	r0, r5
 8011daa:	47b8      	blx	r7
 8011dac:	3001      	adds	r0, #1
 8011dae:	f43f ae7d 	beq.w	8011aac <_printf_float+0x9c>
 8011db2:	9b05      	ldr	r3, [sp, #20]
 8011db4:	465a      	mov	r2, fp
 8011db6:	4631      	mov	r1, r6
 8011db8:	4628      	mov	r0, r5
 8011dba:	47b8      	blx	r7
 8011dbc:	3001      	adds	r0, #1
 8011dbe:	f108 0801 	add.w	r8, r8, #1
 8011dc2:	f43f ae73 	beq.w	8011aac <_printf_float+0x9c>
 8011dc6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dcc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd4:	f103 33ff 	add.w	r3, r3, #4294967295
 8011dd8:	d018      	beq.n	8011e0c <_printf_float+0x3fc>
 8011dda:	4642      	mov	r2, r8
 8011ddc:	4631      	mov	r1, r6
 8011dde:	4628      	mov	r0, r5
 8011de0:	47b8      	blx	r7
 8011de2:	3001      	adds	r0, #1
 8011de4:	d10e      	bne.n	8011e04 <_printf_float+0x3f4>
 8011de6:	e661      	b.n	8011aac <_printf_float+0x9c>
 8011de8:	2301      	movs	r3, #1
 8011dea:	464a      	mov	r2, r9
 8011dec:	4631      	mov	r1, r6
 8011dee:	4628      	mov	r0, r5
 8011df0:	47b8      	blx	r7
 8011df2:	3001      	adds	r0, #1
 8011df4:	f43f ae5a 	beq.w	8011aac <_printf_float+0x9c>
 8011df8:	f108 0801 	add.w	r8, r8, #1
 8011dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dfe:	3b01      	subs	r3, #1
 8011e00:	4543      	cmp	r3, r8
 8011e02:	dcf1      	bgt.n	8011de8 <_printf_float+0x3d8>
 8011e04:	4653      	mov	r3, sl
 8011e06:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011e0a:	e6dd      	b.n	8011bc8 <_printf_float+0x1b8>
 8011e0c:	f04f 0800 	mov.w	r8, #0
 8011e10:	f104 091a 	add.w	r9, r4, #26
 8011e14:	e7f2      	b.n	8011dfc <_printf_float+0x3ec>
 8011e16:	2301      	movs	r3, #1
 8011e18:	e7df      	b.n	8011dda <_printf_float+0x3ca>
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	464a      	mov	r2, r9
 8011e1e:	4631      	mov	r1, r6
 8011e20:	4628      	mov	r0, r5
 8011e22:	47b8      	blx	r7
 8011e24:	3001      	adds	r0, #1
 8011e26:	f43f ae41 	beq.w	8011aac <_printf_float+0x9c>
 8011e2a:	f108 0801 	add.w	r8, r8, #1
 8011e2e:	68e3      	ldr	r3, [r4, #12]
 8011e30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e32:	1a9b      	subs	r3, r3, r2
 8011e34:	4543      	cmp	r3, r8
 8011e36:	dcf0      	bgt.n	8011e1a <_printf_float+0x40a>
 8011e38:	e6fa      	b.n	8011c30 <_printf_float+0x220>
 8011e3a:	f04f 0800 	mov.w	r8, #0
 8011e3e:	f104 0919 	add.w	r9, r4, #25
 8011e42:	e7f4      	b.n	8011e2e <_printf_float+0x41e>
 8011e44:	2900      	cmp	r1, #0
 8011e46:	f43f ae8a 	beq.w	8011b5e <_printf_float+0x14e>
 8011e4a:	f04f 0c00 	mov.w	ip, #0
 8011e4e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8011e52:	e9cd 0900 	strd	r0, r9, [sp]
 8011e56:	6022      	str	r2, [r4, #0]
 8011e58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	f7ff fd4f 	bl	8011900 <__cvt>
 8011e62:	4680      	mov	r8, r0
 8011e64:	e64a      	b.n	8011afc <_printf_float+0xec>
 8011e66:	bf00      	nop

08011e68 <_printf_common>:
 8011e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e6c:	4691      	mov	r9, r2
 8011e6e:	461f      	mov	r7, r3
 8011e70:	688a      	ldr	r2, [r1, #8]
 8011e72:	690b      	ldr	r3, [r1, #16]
 8011e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	bfb8      	it	lt
 8011e7c:	4613      	movlt	r3, r2
 8011e7e:	f8c9 3000 	str.w	r3, [r9]
 8011e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e86:	4606      	mov	r6, r0
 8011e88:	460c      	mov	r4, r1
 8011e8a:	b112      	cbz	r2, 8011e92 <_printf_common+0x2a>
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	f8c9 3000 	str.w	r3, [r9]
 8011e92:	6823      	ldr	r3, [r4, #0]
 8011e94:	0699      	lsls	r1, r3, #26
 8011e96:	bf42      	ittt	mi
 8011e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011e9c:	3302      	addmi	r3, #2
 8011e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8011ea2:	6825      	ldr	r5, [r4, #0]
 8011ea4:	f015 0506 	ands.w	r5, r5, #6
 8011ea8:	d107      	bne.n	8011eba <_printf_common+0x52>
 8011eaa:	f104 0a19 	add.w	sl, r4, #25
 8011eae:	68e3      	ldr	r3, [r4, #12]
 8011eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8011eb4:	1a9b      	subs	r3, r3, r2
 8011eb6:	42ab      	cmp	r3, r5
 8011eb8:	dc28      	bgt.n	8011f0c <_printf_common+0xa4>
 8011eba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011ebe:	6822      	ldr	r2, [r4, #0]
 8011ec0:	3300      	adds	r3, #0
 8011ec2:	bf18      	it	ne
 8011ec4:	2301      	movne	r3, #1
 8011ec6:	0692      	lsls	r2, r2, #26
 8011ec8:	d42d      	bmi.n	8011f26 <_printf_common+0xbe>
 8011eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ece:	4639      	mov	r1, r7
 8011ed0:	4630      	mov	r0, r6
 8011ed2:	47c0      	blx	r8
 8011ed4:	3001      	adds	r0, #1
 8011ed6:	d020      	beq.n	8011f1a <_printf_common+0xb2>
 8011ed8:	6823      	ldr	r3, [r4, #0]
 8011eda:	68e5      	ldr	r5, [r4, #12]
 8011edc:	f8d9 2000 	ldr.w	r2, [r9]
 8011ee0:	f003 0306 	and.w	r3, r3, #6
 8011ee4:	2b04      	cmp	r3, #4
 8011ee6:	bf08      	it	eq
 8011ee8:	1aad      	subeq	r5, r5, r2
 8011eea:	68a3      	ldr	r3, [r4, #8]
 8011eec:	6922      	ldr	r2, [r4, #16]
 8011eee:	bf0c      	ite	eq
 8011ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ef4:	2500      	movne	r5, #0
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	bfc4      	itt	gt
 8011efa:	1a9b      	subgt	r3, r3, r2
 8011efc:	18ed      	addgt	r5, r5, r3
 8011efe:	f04f 0900 	mov.w	r9, #0
 8011f02:	341a      	adds	r4, #26
 8011f04:	454d      	cmp	r5, r9
 8011f06:	d11a      	bne.n	8011f3e <_printf_common+0xd6>
 8011f08:	2000      	movs	r0, #0
 8011f0a:	e008      	b.n	8011f1e <_printf_common+0xb6>
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	4652      	mov	r2, sl
 8011f10:	4639      	mov	r1, r7
 8011f12:	4630      	mov	r0, r6
 8011f14:	47c0      	blx	r8
 8011f16:	3001      	adds	r0, #1
 8011f18:	d103      	bne.n	8011f22 <_printf_common+0xba>
 8011f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f22:	3501      	adds	r5, #1
 8011f24:	e7c3      	b.n	8011eae <_printf_common+0x46>
 8011f26:	18e1      	adds	r1, r4, r3
 8011f28:	1c5a      	adds	r2, r3, #1
 8011f2a:	2030      	movs	r0, #48	; 0x30
 8011f2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f30:	4422      	add	r2, r4
 8011f32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f3a:	3302      	adds	r3, #2
 8011f3c:	e7c5      	b.n	8011eca <_printf_common+0x62>
 8011f3e:	2301      	movs	r3, #1
 8011f40:	4622      	mov	r2, r4
 8011f42:	4639      	mov	r1, r7
 8011f44:	4630      	mov	r0, r6
 8011f46:	47c0      	blx	r8
 8011f48:	3001      	adds	r0, #1
 8011f4a:	d0e6      	beq.n	8011f1a <_printf_common+0xb2>
 8011f4c:	f109 0901 	add.w	r9, r9, #1
 8011f50:	e7d8      	b.n	8011f04 <_printf_common+0x9c>
	...

08011f54 <_printf_i>:
 8011f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011f5c:	460c      	mov	r4, r1
 8011f5e:	7e09      	ldrb	r1, [r1, #24]
 8011f60:	b085      	sub	sp, #20
 8011f62:	296e      	cmp	r1, #110	; 0x6e
 8011f64:	4617      	mov	r7, r2
 8011f66:	4606      	mov	r6, r0
 8011f68:	4698      	mov	r8, r3
 8011f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f6c:	f000 80b3 	beq.w	80120d6 <_printf_i+0x182>
 8011f70:	d822      	bhi.n	8011fb8 <_printf_i+0x64>
 8011f72:	2963      	cmp	r1, #99	; 0x63
 8011f74:	d036      	beq.n	8011fe4 <_printf_i+0x90>
 8011f76:	d80a      	bhi.n	8011f8e <_printf_i+0x3a>
 8011f78:	2900      	cmp	r1, #0
 8011f7a:	f000 80b9 	beq.w	80120f0 <_printf_i+0x19c>
 8011f7e:	2958      	cmp	r1, #88	; 0x58
 8011f80:	f000 8083 	beq.w	801208a <_printf_i+0x136>
 8011f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011f8c:	e032      	b.n	8011ff4 <_printf_i+0xa0>
 8011f8e:	2964      	cmp	r1, #100	; 0x64
 8011f90:	d001      	beq.n	8011f96 <_printf_i+0x42>
 8011f92:	2969      	cmp	r1, #105	; 0x69
 8011f94:	d1f6      	bne.n	8011f84 <_printf_i+0x30>
 8011f96:	6820      	ldr	r0, [r4, #0]
 8011f98:	6813      	ldr	r3, [r2, #0]
 8011f9a:	0605      	lsls	r5, r0, #24
 8011f9c:	f103 0104 	add.w	r1, r3, #4
 8011fa0:	d52a      	bpl.n	8011ff8 <_printf_i+0xa4>
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	6011      	str	r1, [r2, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	da03      	bge.n	8011fb2 <_printf_i+0x5e>
 8011faa:	222d      	movs	r2, #45	; 0x2d
 8011fac:	425b      	negs	r3, r3
 8011fae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011fb2:	486f      	ldr	r0, [pc, #444]	; (8012170 <_printf_i+0x21c>)
 8011fb4:	220a      	movs	r2, #10
 8011fb6:	e039      	b.n	801202c <_printf_i+0xd8>
 8011fb8:	2973      	cmp	r1, #115	; 0x73
 8011fba:	f000 809d 	beq.w	80120f8 <_printf_i+0x1a4>
 8011fbe:	d808      	bhi.n	8011fd2 <_printf_i+0x7e>
 8011fc0:	296f      	cmp	r1, #111	; 0x6f
 8011fc2:	d020      	beq.n	8012006 <_printf_i+0xb2>
 8011fc4:	2970      	cmp	r1, #112	; 0x70
 8011fc6:	d1dd      	bne.n	8011f84 <_printf_i+0x30>
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	f043 0320 	orr.w	r3, r3, #32
 8011fce:	6023      	str	r3, [r4, #0]
 8011fd0:	e003      	b.n	8011fda <_printf_i+0x86>
 8011fd2:	2975      	cmp	r1, #117	; 0x75
 8011fd4:	d017      	beq.n	8012006 <_printf_i+0xb2>
 8011fd6:	2978      	cmp	r1, #120	; 0x78
 8011fd8:	d1d4      	bne.n	8011f84 <_printf_i+0x30>
 8011fda:	2378      	movs	r3, #120	; 0x78
 8011fdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011fe0:	4864      	ldr	r0, [pc, #400]	; (8012174 <_printf_i+0x220>)
 8011fe2:	e055      	b.n	8012090 <_printf_i+0x13c>
 8011fe4:	6813      	ldr	r3, [r2, #0]
 8011fe6:	1d19      	adds	r1, r3, #4
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	6011      	str	r1, [r2, #0]
 8011fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	e08c      	b.n	8012112 <_printf_i+0x1be>
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	6011      	str	r1, [r2, #0]
 8011ffc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012000:	bf18      	it	ne
 8012002:	b21b      	sxthne	r3, r3
 8012004:	e7cf      	b.n	8011fa6 <_printf_i+0x52>
 8012006:	6813      	ldr	r3, [r2, #0]
 8012008:	6825      	ldr	r5, [r4, #0]
 801200a:	1d18      	adds	r0, r3, #4
 801200c:	6010      	str	r0, [r2, #0]
 801200e:	0628      	lsls	r0, r5, #24
 8012010:	d501      	bpl.n	8012016 <_printf_i+0xc2>
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	e002      	b.n	801201c <_printf_i+0xc8>
 8012016:	0668      	lsls	r0, r5, #25
 8012018:	d5fb      	bpl.n	8012012 <_printf_i+0xbe>
 801201a:	881b      	ldrh	r3, [r3, #0]
 801201c:	4854      	ldr	r0, [pc, #336]	; (8012170 <_printf_i+0x21c>)
 801201e:	296f      	cmp	r1, #111	; 0x6f
 8012020:	bf14      	ite	ne
 8012022:	220a      	movne	r2, #10
 8012024:	2208      	moveq	r2, #8
 8012026:	2100      	movs	r1, #0
 8012028:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801202c:	6865      	ldr	r5, [r4, #4]
 801202e:	60a5      	str	r5, [r4, #8]
 8012030:	2d00      	cmp	r5, #0
 8012032:	f2c0 8095 	blt.w	8012160 <_printf_i+0x20c>
 8012036:	6821      	ldr	r1, [r4, #0]
 8012038:	f021 0104 	bic.w	r1, r1, #4
 801203c:	6021      	str	r1, [r4, #0]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d13d      	bne.n	80120be <_printf_i+0x16a>
 8012042:	2d00      	cmp	r5, #0
 8012044:	f040 808e 	bne.w	8012164 <_printf_i+0x210>
 8012048:	4665      	mov	r5, ip
 801204a:	2a08      	cmp	r2, #8
 801204c:	d10b      	bne.n	8012066 <_printf_i+0x112>
 801204e:	6823      	ldr	r3, [r4, #0]
 8012050:	07db      	lsls	r3, r3, #31
 8012052:	d508      	bpl.n	8012066 <_printf_i+0x112>
 8012054:	6923      	ldr	r3, [r4, #16]
 8012056:	6862      	ldr	r2, [r4, #4]
 8012058:	429a      	cmp	r2, r3
 801205a:	bfde      	ittt	le
 801205c:	2330      	movle	r3, #48	; 0x30
 801205e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012062:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012066:	ebac 0305 	sub.w	r3, ip, r5
 801206a:	6123      	str	r3, [r4, #16]
 801206c:	f8cd 8000 	str.w	r8, [sp]
 8012070:	463b      	mov	r3, r7
 8012072:	aa03      	add	r2, sp, #12
 8012074:	4621      	mov	r1, r4
 8012076:	4630      	mov	r0, r6
 8012078:	f7ff fef6 	bl	8011e68 <_printf_common>
 801207c:	3001      	adds	r0, #1
 801207e:	d14d      	bne.n	801211c <_printf_i+0x1c8>
 8012080:	f04f 30ff 	mov.w	r0, #4294967295
 8012084:	b005      	add	sp, #20
 8012086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801208a:	4839      	ldr	r0, [pc, #228]	; (8012170 <_printf_i+0x21c>)
 801208c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012090:	6813      	ldr	r3, [r2, #0]
 8012092:	6821      	ldr	r1, [r4, #0]
 8012094:	1d1d      	adds	r5, r3, #4
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	6015      	str	r5, [r2, #0]
 801209a:	060a      	lsls	r2, r1, #24
 801209c:	d50b      	bpl.n	80120b6 <_printf_i+0x162>
 801209e:	07ca      	lsls	r2, r1, #31
 80120a0:	bf44      	itt	mi
 80120a2:	f041 0120 	orrmi.w	r1, r1, #32
 80120a6:	6021      	strmi	r1, [r4, #0]
 80120a8:	b91b      	cbnz	r3, 80120b2 <_printf_i+0x15e>
 80120aa:	6822      	ldr	r2, [r4, #0]
 80120ac:	f022 0220 	bic.w	r2, r2, #32
 80120b0:	6022      	str	r2, [r4, #0]
 80120b2:	2210      	movs	r2, #16
 80120b4:	e7b7      	b.n	8012026 <_printf_i+0xd2>
 80120b6:	064d      	lsls	r5, r1, #25
 80120b8:	bf48      	it	mi
 80120ba:	b29b      	uxthmi	r3, r3
 80120bc:	e7ef      	b.n	801209e <_printf_i+0x14a>
 80120be:	4665      	mov	r5, ip
 80120c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80120c4:	fb02 3311 	mls	r3, r2, r1, r3
 80120c8:	5cc3      	ldrb	r3, [r0, r3]
 80120ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80120ce:	460b      	mov	r3, r1
 80120d0:	2900      	cmp	r1, #0
 80120d2:	d1f5      	bne.n	80120c0 <_printf_i+0x16c>
 80120d4:	e7b9      	b.n	801204a <_printf_i+0xf6>
 80120d6:	6813      	ldr	r3, [r2, #0]
 80120d8:	6825      	ldr	r5, [r4, #0]
 80120da:	6961      	ldr	r1, [r4, #20]
 80120dc:	1d18      	adds	r0, r3, #4
 80120de:	6010      	str	r0, [r2, #0]
 80120e0:	0628      	lsls	r0, r5, #24
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	d501      	bpl.n	80120ea <_printf_i+0x196>
 80120e6:	6019      	str	r1, [r3, #0]
 80120e8:	e002      	b.n	80120f0 <_printf_i+0x19c>
 80120ea:	066a      	lsls	r2, r5, #25
 80120ec:	d5fb      	bpl.n	80120e6 <_printf_i+0x192>
 80120ee:	8019      	strh	r1, [r3, #0]
 80120f0:	2300      	movs	r3, #0
 80120f2:	6123      	str	r3, [r4, #16]
 80120f4:	4665      	mov	r5, ip
 80120f6:	e7b9      	b.n	801206c <_printf_i+0x118>
 80120f8:	6813      	ldr	r3, [r2, #0]
 80120fa:	1d19      	adds	r1, r3, #4
 80120fc:	6011      	str	r1, [r2, #0]
 80120fe:	681d      	ldr	r5, [r3, #0]
 8012100:	6862      	ldr	r2, [r4, #4]
 8012102:	2100      	movs	r1, #0
 8012104:	4628      	mov	r0, r5
 8012106:	f7ee f8b3 	bl	8000270 <memchr>
 801210a:	b108      	cbz	r0, 8012110 <_printf_i+0x1bc>
 801210c:	1b40      	subs	r0, r0, r5
 801210e:	6060      	str	r0, [r4, #4]
 8012110:	6863      	ldr	r3, [r4, #4]
 8012112:	6123      	str	r3, [r4, #16]
 8012114:	2300      	movs	r3, #0
 8012116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801211a:	e7a7      	b.n	801206c <_printf_i+0x118>
 801211c:	6923      	ldr	r3, [r4, #16]
 801211e:	462a      	mov	r2, r5
 8012120:	4639      	mov	r1, r7
 8012122:	4630      	mov	r0, r6
 8012124:	47c0      	blx	r8
 8012126:	3001      	adds	r0, #1
 8012128:	d0aa      	beq.n	8012080 <_printf_i+0x12c>
 801212a:	6823      	ldr	r3, [r4, #0]
 801212c:	079b      	lsls	r3, r3, #30
 801212e:	d413      	bmi.n	8012158 <_printf_i+0x204>
 8012130:	68e0      	ldr	r0, [r4, #12]
 8012132:	9b03      	ldr	r3, [sp, #12]
 8012134:	4298      	cmp	r0, r3
 8012136:	bfb8      	it	lt
 8012138:	4618      	movlt	r0, r3
 801213a:	e7a3      	b.n	8012084 <_printf_i+0x130>
 801213c:	2301      	movs	r3, #1
 801213e:	464a      	mov	r2, r9
 8012140:	4639      	mov	r1, r7
 8012142:	4630      	mov	r0, r6
 8012144:	47c0      	blx	r8
 8012146:	3001      	adds	r0, #1
 8012148:	d09a      	beq.n	8012080 <_printf_i+0x12c>
 801214a:	3501      	adds	r5, #1
 801214c:	68e3      	ldr	r3, [r4, #12]
 801214e:	9a03      	ldr	r2, [sp, #12]
 8012150:	1a9b      	subs	r3, r3, r2
 8012152:	42ab      	cmp	r3, r5
 8012154:	dcf2      	bgt.n	801213c <_printf_i+0x1e8>
 8012156:	e7eb      	b.n	8012130 <_printf_i+0x1dc>
 8012158:	2500      	movs	r5, #0
 801215a:	f104 0919 	add.w	r9, r4, #25
 801215e:	e7f5      	b.n	801214c <_printf_i+0x1f8>
 8012160:	2b00      	cmp	r3, #0
 8012162:	d1ac      	bne.n	80120be <_printf_i+0x16a>
 8012164:	7803      	ldrb	r3, [r0, #0]
 8012166:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801216a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801216e:	e76c      	b.n	801204a <_printf_i+0xf6>
 8012170:	08015566 	.word	0x08015566
 8012174:	08015577 	.word	0x08015577

08012178 <cleanup_glue>:
 8012178:	b538      	push	{r3, r4, r5, lr}
 801217a:	460c      	mov	r4, r1
 801217c:	6809      	ldr	r1, [r1, #0]
 801217e:	4605      	mov	r5, r0
 8012180:	b109      	cbz	r1, 8012186 <cleanup_glue+0xe>
 8012182:	f7ff fff9 	bl	8012178 <cleanup_glue>
 8012186:	4621      	mov	r1, r4
 8012188:	4628      	mov	r0, r5
 801218a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801218e:	f001 b9c1 	b.w	8013514 <_free_r>
	...

08012194 <_reclaim_reent>:
 8012194:	4b2c      	ldr	r3, [pc, #176]	; (8012248 <_reclaim_reent+0xb4>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	4283      	cmp	r3, r0
 801219a:	b570      	push	{r4, r5, r6, lr}
 801219c:	4604      	mov	r4, r0
 801219e:	d051      	beq.n	8012244 <_reclaim_reent+0xb0>
 80121a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80121a2:	b143      	cbz	r3, 80121b6 <_reclaim_reent+0x22>
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d14a      	bne.n	8012240 <_reclaim_reent+0xac>
 80121aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121ac:	6819      	ldr	r1, [r3, #0]
 80121ae:	b111      	cbz	r1, 80121b6 <_reclaim_reent+0x22>
 80121b0:	4620      	mov	r0, r4
 80121b2:	f001 f9af 	bl	8013514 <_free_r>
 80121b6:	6961      	ldr	r1, [r4, #20]
 80121b8:	b111      	cbz	r1, 80121c0 <_reclaim_reent+0x2c>
 80121ba:	4620      	mov	r0, r4
 80121bc:	f001 f9aa 	bl	8013514 <_free_r>
 80121c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80121c2:	b111      	cbz	r1, 80121ca <_reclaim_reent+0x36>
 80121c4:	4620      	mov	r0, r4
 80121c6:	f001 f9a5 	bl	8013514 <_free_r>
 80121ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80121cc:	b111      	cbz	r1, 80121d4 <_reclaim_reent+0x40>
 80121ce:	4620      	mov	r0, r4
 80121d0:	f001 f9a0 	bl	8013514 <_free_r>
 80121d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80121d6:	b111      	cbz	r1, 80121de <_reclaim_reent+0x4a>
 80121d8:	4620      	mov	r0, r4
 80121da:	f001 f99b 	bl	8013514 <_free_r>
 80121de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80121e0:	b111      	cbz	r1, 80121e8 <_reclaim_reent+0x54>
 80121e2:	4620      	mov	r0, r4
 80121e4:	f001 f996 	bl	8013514 <_free_r>
 80121e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80121ea:	b111      	cbz	r1, 80121f2 <_reclaim_reent+0x5e>
 80121ec:	4620      	mov	r0, r4
 80121ee:	f001 f991 	bl	8013514 <_free_r>
 80121f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80121f4:	b111      	cbz	r1, 80121fc <_reclaim_reent+0x68>
 80121f6:	4620      	mov	r0, r4
 80121f8:	f001 f98c 	bl	8013514 <_free_r>
 80121fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121fe:	b111      	cbz	r1, 8012206 <_reclaim_reent+0x72>
 8012200:	4620      	mov	r0, r4
 8012202:	f001 f987 	bl	8013514 <_free_r>
 8012206:	69a3      	ldr	r3, [r4, #24]
 8012208:	b1e3      	cbz	r3, 8012244 <_reclaim_reent+0xb0>
 801220a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801220c:	4620      	mov	r0, r4
 801220e:	4798      	blx	r3
 8012210:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012212:	b1b9      	cbz	r1, 8012244 <_reclaim_reent+0xb0>
 8012214:	4620      	mov	r0, r4
 8012216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801221a:	f7ff bfad 	b.w	8012178 <cleanup_glue>
 801221e:	5949      	ldr	r1, [r1, r5]
 8012220:	b941      	cbnz	r1, 8012234 <_reclaim_reent+0xa0>
 8012222:	3504      	adds	r5, #4
 8012224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012226:	2d80      	cmp	r5, #128	; 0x80
 8012228:	68d9      	ldr	r1, [r3, #12]
 801222a:	d1f8      	bne.n	801221e <_reclaim_reent+0x8a>
 801222c:	4620      	mov	r0, r4
 801222e:	f001 f971 	bl	8013514 <_free_r>
 8012232:	e7ba      	b.n	80121aa <_reclaim_reent+0x16>
 8012234:	680e      	ldr	r6, [r1, #0]
 8012236:	4620      	mov	r0, r4
 8012238:	f001 f96c 	bl	8013514 <_free_r>
 801223c:	4631      	mov	r1, r6
 801223e:	e7ef      	b.n	8012220 <_reclaim_reent+0x8c>
 8012240:	2500      	movs	r5, #0
 8012242:	e7ef      	b.n	8012224 <_reclaim_reent+0x90>
 8012244:	bd70      	pop	{r4, r5, r6, pc}
 8012246:	bf00      	nop
 8012248:	20000034 	.word	0x20000034

0801224c <_sbrk_r>:
 801224c:	b538      	push	{r3, r4, r5, lr}
 801224e:	4c06      	ldr	r4, [pc, #24]	; (8012268 <_sbrk_r+0x1c>)
 8012250:	2300      	movs	r3, #0
 8012252:	4605      	mov	r5, r0
 8012254:	4608      	mov	r0, r1
 8012256:	6023      	str	r3, [r4, #0]
 8012258:	f7ee fe22 	bl	8000ea0 <_sbrk>
 801225c:	1c43      	adds	r3, r0, #1
 801225e:	d102      	bne.n	8012266 <_sbrk_r+0x1a>
 8012260:	6823      	ldr	r3, [r4, #0]
 8012262:	b103      	cbz	r3, 8012266 <_sbrk_r+0x1a>
 8012264:	602b      	str	r3, [r5, #0]
 8012266:	bd38      	pop	{r3, r4, r5, pc}
 8012268:	20025d80 	.word	0x20025d80

0801226c <sniprintf>:
 801226c:	b40c      	push	{r2, r3}
 801226e:	b530      	push	{r4, r5, lr}
 8012270:	4b17      	ldr	r3, [pc, #92]	; (80122d0 <sniprintf+0x64>)
 8012272:	1e0c      	subs	r4, r1, #0
 8012274:	b09d      	sub	sp, #116	; 0x74
 8012276:	681d      	ldr	r5, [r3, #0]
 8012278:	da08      	bge.n	801228c <sniprintf+0x20>
 801227a:	238b      	movs	r3, #139	; 0x8b
 801227c:	602b      	str	r3, [r5, #0]
 801227e:	f04f 30ff 	mov.w	r0, #4294967295
 8012282:	b01d      	add	sp, #116	; 0x74
 8012284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012288:	b002      	add	sp, #8
 801228a:	4770      	bx	lr
 801228c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012290:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012294:	bf14      	ite	ne
 8012296:	f104 33ff 	addne.w	r3, r4, #4294967295
 801229a:	4623      	moveq	r3, r4
 801229c:	9304      	str	r3, [sp, #16]
 801229e:	9307      	str	r3, [sp, #28]
 80122a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122a4:	9002      	str	r0, [sp, #8]
 80122a6:	9006      	str	r0, [sp, #24]
 80122a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80122ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80122ae:	ab21      	add	r3, sp, #132	; 0x84
 80122b0:	a902      	add	r1, sp, #8
 80122b2:	4628      	mov	r0, r5
 80122b4:	9301      	str	r3, [sp, #4]
 80122b6:	f001 f9d5 	bl	8013664 <_svfiprintf_r>
 80122ba:	1c43      	adds	r3, r0, #1
 80122bc:	bfbc      	itt	lt
 80122be:	238b      	movlt	r3, #139	; 0x8b
 80122c0:	602b      	strlt	r3, [r5, #0]
 80122c2:	2c00      	cmp	r4, #0
 80122c4:	d0dd      	beq.n	8012282 <sniprintf+0x16>
 80122c6:	9b02      	ldr	r3, [sp, #8]
 80122c8:	2200      	movs	r2, #0
 80122ca:	701a      	strb	r2, [r3, #0]
 80122cc:	e7d9      	b.n	8012282 <sniprintf+0x16>
 80122ce:	bf00      	nop
 80122d0:	20000034 	.word	0x20000034

080122d4 <strcasecmp>:
 80122d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122d6:	4606      	mov	r6, r0
 80122d8:	460f      	mov	r7, r1
 80122da:	f816 4b01 	ldrb.w	r4, [r6], #1
 80122de:	f000 fdf7 	bl	8012ed0 <__locale_ctype_ptr>
 80122e2:	4420      	add	r0, r4
 80122e4:	f817 5b01 	ldrb.w	r5, [r7], #1
 80122e8:	7843      	ldrb	r3, [r0, #1]
 80122ea:	f003 0303 	and.w	r3, r3, #3
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	bf08      	it	eq
 80122f2:	3420      	addeq	r4, #32
 80122f4:	f000 fdec 	bl	8012ed0 <__locale_ctype_ptr>
 80122f8:	4428      	add	r0, r5
 80122fa:	7842      	ldrb	r2, [r0, #1]
 80122fc:	f002 0203 	and.w	r2, r2, #3
 8012300:	2a01      	cmp	r2, #1
 8012302:	bf08      	it	eq
 8012304:	3520      	addeq	r5, #32
 8012306:	1b60      	subs	r0, r4, r5
 8012308:	d101      	bne.n	801230e <strcasecmp+0x3a>
 801230a:	2d00      	cmp	r5, #0
 801230c:	d1e5      	bne.n	80122da <strcasecmp+0x6>
 801230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012310 <strcpy>:
 8012310:	4603      	mov	r3, r0
 8012312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012316:	f803 2b01 	strb.w	r2, [r3], #1
 801231a:	2a00      	cmp	r2, #0
 801231c:	d1f9      	bne.n	8012312 <strcpy+0x2>
 801231e:	4770      	bx	lr

08012320 <quorem>:
 8012320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012324:	6903      	ldr	r3, [r0, #16]
 8012326:	690c      	ldr	r4, [r1, #16]
 8012328:	42a3      	cmp	r3, r4
 801232a:	4680      	mov	r8, r0
 801232c:	f2c0 8082 	blt.w	8012434 <quorem+0x114>
 8012330:	3c01      	subs	r4, #1
 8012332:	f101 0714 	add.w	r7, r1, #20
 8012336:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801233a:	f100 0614 	add.w	r6, r0, #20
 801233e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012342:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012346:	eb06 030c 	add.w	r3, r6, ip
 801234a:	3501      	adds	r5, #1
 801234c:	eb07 090c 	add.w	r9, r7, ip
 8012350:	9301      	str	r3, [sp, #4]
 8012352:	fbb0 f5f5 	udiv	r5, r0, r5
 8012356:	b395      	cbz	r5, 80123be <quorem+0x9e>
 8012358:	f04f 0a00 	mov.w	sl, #0
 801235c:	4638      	mov	r0, r7
 801235e:	46b6      	mov	lr, r6
 8012360:	46d3      	mov	fp, sl
 8012362:	f850 2b04 	ldr.w	r2, [r0], #4
 8012366:	b293      	uxth	r3, r2
 8012368:	fb05 a303 	mla	r3, r5, r3, sl
 801236c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012370:	b29b      	uxth	r3, r3
 8012372:	ebab 0303 	sub.w	r3, fp, r3
 8012376:	0c12      	lsrs	r2, r2, #16
 8012378:	f8de b000 	ldr.w	fp, [lr]
 801237c:	fb05 a202 	mla	r2, r5, r2, sl
 8012380:	fa13 f38b 	uxtah	r3, r3, fp
 8012384:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012388:	fa1f fb82 	uxth.w	fp, r2
 801238c:	f8de 2000 	ldr.w	r2, [lr]
 8012390:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012398:	b29b      	uxth	r3, r3
 801239a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801239e:	4581      	cmp	r9, r0
 80123a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80123a4:	f84e 3b04 	str.w	r3, [lr], #4
 80123a8:	d2db      	bcs.n	8012362 <quorem+0x42>
 80123aa:	f856 300c 	ldr.w	r3, [r6, ip]
 80123ae:	b933      	cbnz	r3, 80123be <quorem+0x9e>
 80123b0:	9b01      	ldr	r3, [sp, #4]
 80123b2:	3b04      	subs	r3, #4
 80123b4:	429e      	cmp	r6, r3
 80123b6:	461a      	mov	r2, r3
 80123b8:	d330      	bcc.n	801241c <quorem+0xfc>
 80123ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80123be:	4640      	mov	r0, r8
 80123c0:	f000 ffd4 	bl	801336c <__mcmp>
 80123c4:	2800      	cmp	r0, #0
 80123c6:	db25      	blt.n	8012414 <quorem+0xf4>
 80123c8:	3501      	adds	r5, #1
 80123ca:	4630      	mov	r0, r6
 80123cc:	f04f 0c00 	mov.w	ip, #0
 80123d0:	f857 2b04 	ldr.w	r2, [r7], #4
 80123d4:	f8d0 e000 	ldr.w	lr, [r0]
 80123d8:	b293      	uxth	r3, r2
 80123da:	ebac 0303 	sub.w	r3, ip, r3
 80123de:	0c12      	lsrs	r2, r2, #16
 80123e0:	fa13 f38e 	uxtah	r3, r3, lr
 80123e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80123e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123f2:	45b9      	cmp	r9, r7
 80123f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80123f8:	f840 3b04 	str.w	r3, [r0], #4
 80123fc:	d2e8      	bcs.n	80123d0 <quorem+0xb0>
 80123fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012402:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012406:	b92a      	cbnz	r2, 8012414 <quorem+0xf4>
 8012408:	3b04      	subs	r3, #4
 801240a:	429e      	cmp	r6, r3
 801240c:	461a      	mov	r2, r3
 801240e:	d30b      	bcc.n	8012428 <quorem+0x108>
 8012410:	f8c8 4010 	str.w	r4, [r8, #16]
 8012414:	4628      	mov	r0, r5
 8012416:	b003      	add	sp, #12
 8012418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801241c:	6812      	ldr	r2, [r2, #0]
 801241e:	3b04      	subs	r3, #4
 8012420:	2a00      	cmp	r2, #0
 8012422:	d1ca      	bne.n	80123ba <quorem+0x9a>
 8012424:	3c01      	subs	r4, #1
 8012426:	e7c5      	b.n	80123b4 <quorem+0x94>
 8012428:	6812      	ldr	r2, [r2, #0]
 801242a:	3b04      	subs	r3, #4
 801242c:	2a00      	cmp	r2, #0
 801242e:	d1ef      	bne.n	8012410 <quorem+0xf0>
 8012430:	3c01      	subs	r4, #1
 8012432:	e7ea      	b.n	801240a <quorem+0xea>
 8012434:	2000      	movs	r0, #0
 8012436:	e7ee      	b.n	8012416 <quorem+0xf6>

08012438 <_dtoa_r>:
 8012438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243c:	ec57 6b10 	vmov	r6, r7, d0
 8012440:	b095      	sub	sp, #84	; 0x54
 8012442:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012444:	9108      	str	r1, [sp, #32]
 8012446:	4604      	mov	r4, r0
 8012448:	920a      	str	r2, [sp, #40]	; 0x28
 801244a:	9311      	str	r3, [sp, #68]	; 0x44
 801244c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8012450:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012454:	b93d      	cbnz	r5, 8012466 <_dtoa_r+0x2e>
 8012456:	2010      	movs	r0, #16
 8012458:	f000 fd56 	bl	8012f08 <malloc>
 801245c:	6260      	str	r0, [r4, #36]	; 0x24
 801245e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012462:	6005      	str	r5, [r0, #0]
 8012464:	60c5      	str	r5, [r0, #12]
 8012466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012468:	6819      	ldr	r1, [r3, #0]
 801246a:	b151      	cbz	r1, 8012482 <_dtoa_r+0x4a>
 801246c:	685a      	ldr	r2, [r3, #4]
 801246e:	604a      	str	r2, [r1, #4]
 8012470:	2301      	movs	r3, #1
 8012472:	4093      	lsls	r3, r2
 8012474:	608b      	str	r3, [r1, #8]
 8012476:	4620      	mov	r0, r4
 8012478:	f000 fd96 	bl	8012fa8 <_Bfree>
 801247c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801247e:	2200      	movs	r2, #0
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	1e3b      	subs	r3, r7, #0
 8012484:	bfb9      	ittee	lt
 8012486:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801248a:	9303      	strlt	r3, [sp, #12]
 801248c:	2300      	movge	r3, #0
 801248e:	f8c8 3000 	strge.w	r3, [r8]
 8012492:	9d03      	ldr	r5, [sp, #12]
 8012494:	4bac      	ldr	r3, [pc, #688]	; (8012748 <_dtoa_r+0x310>)
 8012496:	bfbc      	itt	lt
 8012498:	2201      	movlt	r2, #1
 801249a:	f8c8 2000 	strlt.w	r2, [r8]
 801249e:	43ab      	bics	r3, r5
 80124a0:	d11b      	bne.n	80124da <_dtoa_r+0xa2>
 80124a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124a4:	f242 730f 	movw	r3, #9999	; 0x270f
 80124a8:	6013      	str	r3, [r2, #0]
 80124aa:	9b02      	ldr	r3, [sp, #8]
 80124ac:	b923      	cbnz	r3, 80124b8 <_dtoa_r+0x80>
 80124ae:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80124b2:	2d00      	cmp	r5, #0
 80124b4:	f000 84dd 	beq.w	8012e72 <_dtoa_r+0xa3a>
 80124b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80124ba:	b953      	cbnz	r3, 80124d2 <_dtoa_r+0x9a>
 80124bc:	4ba3      	ldr	r3, [pc, #652]	; (801274c <_dtoa_r+0x314>)
 80124be:	e020      	b.n	8012502 <_dtoa_r+0xca>
 80124c0:	4ba3      	ldr	r3, [pc, #652]	; (8012750 <_dtoa_r+0x318>)
 80124c2:	9304      	str	r3, [sp, #16]
 80124c4:	3308      	adds	r3, #8
 80124c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80124c8:	6013      	str	r3, [r2, #0]
 80124ca:	9804      	ldr	r0, [sp, #16]
 80124cc:	b015      	add	sp, #84	; 0x54
 80124ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d2:	4b9e      	ldr	r3, [pc, #632]	; (801274c <_dtoa_r+0x314>)
 80124d4:	9304      	str	r3, [sp, #16]
 80124d6:	3303      	adds	r3, #3
 80124d8:	e7f5      	b.n	80124c6 <_dtoa_r+0x8e>
 80124da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80124de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80124e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80124ea:	d10c      	bne.n	8012506 <_dtoa_r+0xce>
 80124ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80124ee:	2301      	movs	r3, #1
 80124f0:	6013      	str	r3, [r2, #0]
 80124f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	f000 84b9 	beq.w	8012e6c <_dtoa_r+0xa34>
 80124fa:	4b96      	ldr	r3, [pc, #600]	; (8012754 <_dtoa_r+0x31c>)
 80124fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80124fe:	6013      	str	r3, [r2, #0]
 8012500:	3b01      	subs	r3, #1
 8012502:	9304      	str	r3, [sp, #16]
 8012504:	e7e1      	b.n	80124ca <_dtoa_r+0x92>
 8012506:	a913      	add	r1, sp, #76	; 0x4c
 8012508:	aa12      	add	r2, sp, #72	; 0x48
 801250a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801250e:	4620      	mov	r0, r4
 8012510:	f000 ffa3 	bl	801345a <__d2b>
 8012514:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8012518:	9001      	str	r0, [sp, #4]
 801251a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801251c:	2e00      	cmp	r6, #0
 801251e:	d046      	beq.n	80125ae <_dtoa_r+0x176>
 8012520:	9805      	ldr	r0, [sp, #20]
 8012522:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801252a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801252e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012532:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8012536:	2700      	movs	r7, #0
 8012538:	ee07 aa90 	vmov	s15, sl
 801253c:	ec43 2b16 	vmov	d6, r2, r3
 8012540:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012544:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8012730 <_dtoa_r+0x2f8>
 8012548:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801254c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012550:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8012738 <_dtoa_r+0x300>
 8012554:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012558:	eeb0 7b46 	vmov.f64	d7, d6
 801255c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012740 <_dtoa_r+0x308>
 8012560:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012564:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012568:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801256c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012570:	ee16 ba90 	vmov	fp, s13
 8012574:	d508      	bpl.n	8012588 <_dtoa_r+0x150>
 8012576:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801257a:	eeb4 6b47 	vcmp.f64	d6, d7
 801257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012582:	bf18      	it	ne
 8012584:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012588:	f1bb 0f16 	cmp.w	fp, #22
 801258c:	d834      	bhi.n	80125f8 <_dtoa_r+0x1c0>
 801258e:	4b72      	ldr	r3, [pc, #456]	; (8012758 <_dtoa_r+0x320>)
 8012590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012594:	ed93 7b00 	vldr	d7, [r3]
 8012598:	ed9d 6b02 	vldr	d6, [sp, #8]
 801259c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80125a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a4:	dd01      	ble.n	80125aa <_dtoa_r+0x172>
 80125a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80125aa:	2300      	movs	r3, #0
 80125ac:	e025      	b.n	80125fa <_dtoa_r+0x1c2>
 80125ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80125b0:	eb01 0a03 	add.w	sl, r1, r3
 80125b4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80125b8:	2b20      	cmp	r3, #32
 80125ba:	dd17      	ble.n	80125ec <_dtoa_r+0x1b4>
 80125bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80125c0:	9a02      	ldr	r2, [sp, #8]
 80125c2:	409d      	lsls	r5, r3
 80125c4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80125c8:	fa22 f303 	lsr.w	r3, r2, r3
 80125cc:	432b      	orrs	r3, r5
 80125ce:	ee07 3a90 	vmov	s15, r3
 80125d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80125d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80125da:	ed8d 7b04 	vstr	d7, [sp, #16]
 80125de:	9805      	ldr	r0, [sp, #20]
 80125e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125e4:	2701      	movs	r7, #1
 80125e6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80125ea:	e7a5      	b.n	8012538 <_dtoa_r+0x100>
 80125ec:	9a02      	ldr	r2, [sp, #8]
 80125ee:	f1c3 0320 	rsb	r3, r3, #32
 80125f2:	fa02 f303 	lsl.w	r3, r2, r3
 80125f6:	e7ea      	b.n	80125ce <_dtoa_r+0x196>
 80125f8:	2301      	movs	r3, #1
 80125fa:	eba1 0a0a 	sub.w	sl, r1, sl
 80125fe:	9310      	str	r3, [sp, #64]	; 0x40
 8012600:	f1ba 0301 	subs.w	r3, sl, #1
 8012604:	9307      	str	r3, [sp, #28]
 8012606:	bf43      	ittte	mi
 8012608:	2300      	movmi	r3, #0
 801260a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801260e:	9307      	strmi	r3, [sp, #28]
 8012610:	f04f 0a00 	movpl.w	sl, #0
 8012614:	f1bb 0f00 	cmp.w	fp, #0
 8012618:	db19      	blt.n	801264e <_dtoa_r+0x216>
 801261a:	9b07      	ldr	r3, [sp, #28]
 801261c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012620:	445b      	add	r3, fp
 8012622:	9307      	str	r3, [sp, #28]
 8012624:	f04f 0800 	mov.w	r8, #0
 8012628:	9b08      	ldr	r3, [sp, #32]
 801262a:	2b09      	cmp	r3, #9
 801262c:	d866      	bhi.n	80126fc <_dtoa_r+0x2c4>
 801262e:	2b05      	cmp	r3, #5
 8012630:	bfc4      	itt	gt
 8012632:	3b04      	subgt	r3, #4
 8012634:	9308      	strgt	r3, [sp, #32]
 8012636:	9b08      	ldr	r3, [sp, #32]
 8012638:	f1a3 0302 	sub.w	r3, r3, #2
 801263c:	bfcc      	ite	gt
 801263e:	2500      	movgt	r5, #0
 8012640:	2501      	movle	r5, #1
 8012642:	2b03      	cmp	r3, #3
 8012644:	d866      	bhi.n	8012714 <_dtoa_r+0x2dc>
 8012646:	e8df f003 	tbb	[pc, r3]
 801264a:	5755      	.short	0x5755
 801264c:	4909      	.short	0x4909
 801264e:	2300      	movs	r3, #0
 8012650:	ebaa 0a0b 	sub.w	sl, sl, fp
 8012654:	f1cb 0800 	rsb	r8, fp, #0
 8012658:	930b      	str	r3, [sp, #44]	; 0x2c
 801265a:	e7e5      	b.n	8012628 <_dtoa_r+0x1f0>
 801265c:	2301      	movs	r3, #1
 801265e:	9309      	str	r3, [sp, #36]	; 0x24
 8012660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012662:	2b00      	cmp	r3, #0
 8012664:	dd59      	ble.n	801271a <_dtoa_r+0x2e2>
 8012666:	9306      	str	r3, [sp, #24]
 8012668:	4699      	mov	r9, r3
 801266a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801266c:	2200      	movs	r2, #0
 801266e:	6072      	str	r2, [r6, #4]
 8012670:	2204      	movs	r2, #4
 8012672:	f102 0014 	add.w	r0, r2, #20
 8012676:	4298      	cmp	r0, r3
 8012678:	6871      	ldr	r1, [r6, #4]
 801267a:	d953      	bls.n	8012724 <_dtoa_r+0x2ec>
 801267c:	4620      	mov	r0, r4
 801267e:	f000 fc5f 	bl	8012f40 <_Balloc>
 8012682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012684:	6030      	str	r0, [r6, #0]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	9304      	str	r3, [sp, #16]
 801268a:	f1b9 0f0e 	cmp.w	r9, #14
 801268e:	f200 80c2 	bhi.w	8012816 <_dtoa_r+0x3de>
 8012692:	2d00      	cmp	r5, #0
 8012694:	f000 80bf 	beq.w	8012816 <_dtoa_r+0x3de>
 8012698:	ed9d 7b02 	vldr	d7, [sp, #8]
 801269c:	f1bb 0f00 	cmp.w	fp, #0
 80126a0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80126a4:	f340 80e6 	ble.w	8012874 <_dtoa_r+0x43c>
 80126a8:	4a2b      	ldr	r2, [pc, #172]	; (8012758 <_dtoa_r+0x320>)
 80126aa:	f00b 030f 	and.w	r3, fp, #15
 80126ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80126b2:	ed93 7b00 	vldr	d7, [r3]
 80126b6:	ea4f 132b 	mov.w	r3, fp, asr #4
 80126ba:	06da      	lsls	r2, r3, #27
 80126bc:	f140 80d8 	bpl.w	8012870 <_dtoa_r+0x438>
 80126c0:	4a26      	ldr	r2, [pc, #152]	; (801275c <_dtoa_r+0x324>)
 80126c2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80126c6:	ed92 6b08 	vldr	d6, [r2, #32]
 80126ca:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80126ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 80126d2:	f003 030f 	and.w	r3, r3, #15
 80126d6:	2203      	movs	r2, #3
 80126d8:	4920      	ldr	r1, [pc, #128]	; (801275c <_dtoa_r+0x324>)
 80126da:	e04a      	b.n	8012772 <_dtoa_r+0x33a>
 80126dc:	2301      	movs	r3, #1
 80126de:	9309      	str	r3, [sp, #36]	; 0x24
 80126e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126e2:	445b      	add	r3, fp
 80126e4:	f103 0901 	add.w	r9, r3, #1
 80126e8:	9306      	str	r3, [sp, #24]
 80126ea:	464b      	mov	r3, r9
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	bfb8      	it	lt
 80126f0:	2301      	movlt	r3, #1
 80126f2:	e7ba      	b.n	801266a <_dtoa_r+0x232>
 80126f4:	2300      	movs	r3, #0
 80126f6:	e7b2      	b.n	801265e <_dtoa_r+0x226>
 80126f8:	2300      	movs	r3, #0
 80126fa:	e7f0      	b.n	80126de <_dtoa_r+0x2a6>
 80126fc:	2501      	movs	r5, #1
 80126fe:	2300      	movs	r3, #0
 8012700:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8012704:	f04f 33ff 	mov.w	r3, #4294967295
 8012708:	9306      	str	r3, [sp, #24]
 801270a:	4699      	mov	r9, r3
 801270c:	2200      	movs	r2, #0
 801270e:	2312      	movs	r3, #18
 8012710:	920a      	str	r2, [sp, #40]	; 0x28
 8012712:	e7aa      	b.n	801266a <_dtoa_r+0x232>
 8012714:	2301      	movs	r3, #1
 8012716:	9309      	str	r3, [sp, #36]	; 0x24
 8012718:	e7f4      	b.n	8012704 <_dtoa_r+0x2cc>
 801271a:	2301      	movs	r3, #1
 801271c:	9306      	str	r3, [sp, #24]
 801271e:	4699      	mov	r9, r3
 8012720:	461a      	mov	r2, r3
 8012722:	e7f5      	b.n	8012710 <_dtoa_r+0x2d8>
 8012724:	3101      	adds	r1, #1
 8012726:	6071      	str	r1, [r6, #4]
 8012728:	0052      	lsls	r2, r2, #1
 801272a:	e7a2      	b.n	8012672 <_dtoa_r+0x23a>
 801272c:	f3af 8000 	nop.w
 8012730:	636f4361 	.word	0x636f4361
 8012734:	3fd287a7 	.word	0x3fd287a7
 8012738:	8b60c8b3 	.word	0x8b60c8b3
 801273c:	3fc68a28 	.word	0x3fc68a28
 8012740:	509f79fb 	.word	0x509f79fb
 8012744:	3fd34413 	.word	0x3fd34413
 8012748:	7ff00000 	.word	0x7ff00000
 801274c:	08015591 	.word	0x08015591
 8012750:	08015588 	.word	0x08015588
 8012754:	08015565 	.word	0x08015565
 8012758:	080155c8 	.word	0x080155c8
 801275c:	080155a0 	.word	0x080155a0
 8012760:	07de      	lsls	r6, r3, #31
 8012762:	d504      	bpl.n	801276e <_dtoa_r+0x336>
 8012764:	ed91 6b00 	vldr	d6, [r1]
 8012768:	3201      	adds	r2, #1
 801276a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801276e:	105b      	asrs	r3, r3, #1
 8012770:	3108      	adds	r1, #8
 8012772:	2b00      	cmp	r3, #0
 8012774:	d1f4      	bne.n	8012760 <_dtoa_r+0x328>
 8012776:	ed9d 6b02 	vldr	d6, [sp, #8]
 801277a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801277e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012782:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012784:	2b00      	cmp	r3, #0
 8012786:	f000 80a7 	beq.w	80128d8 <_dtoa_r+0x4a0>
 801278a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801278e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012792:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801279a:	f140 809d 	bpl.w	80128d8 <_dtoa_r+0x4a0>
 801279e:	f1b9 0f00 	cmp.w	r9, #0
 80127a2:	f000 8099 	beq.w	80128d8 <_dtoa_r+0x4a0>
 80127a6:	9b06      	ldr	r3, [sp, #24]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	dd30      	ble.n	801280e <_dtoa_r+0x3d6>
 80127ac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80127b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127b8:	9d06      	ldr	r5, [sp, #24]
 80127ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80127be:	3201      	adds	r2, #1
 80127c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80127c4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80127c8:	ee07 2a90 	vmov	s15, r2
 80127cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80127d0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80127d4:	ed8d 5b02 	vstr	d5, [sp, #8]
 80127d8:	9a03      	ldr	r2, [sp, #12]
 80127da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127de:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80127e2:	2d00      	cmp	r5, #0
 80127e4:	d17b      	bne.n	80128de <_dtoa_r+0x4a6>
 80127e6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80127ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80127ee:	ec41 0b17 	vmov	d7, r0, r1
 80127f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80127f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fa:	f300 8253 	bgt.w	8012ca4 <_dtoa_r+0x86c>
 80127fe:	eeb1 7b47 	vneg.f64	d7, d7
 8012802:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801280a:	f100 8249 	bmi.w	8012ca0 <_dtoa_r+0x868>
 801280e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012812:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012818:	2b00      	cmp	r3, #0
 801281a:	f2c0 8119 	blt.w	8012a50 <_dtoa_r+0x618>
 801281e:	f1bb 0f0e 	cmp.w	fp, #14
 8012822:	f300 8115 	bgt.w	8012a50 <_dtoa_r+0x618>
 8012826:	4bc3      	ldr	r3, [pc, #780]	; (8012b34 <_dtoa_r+0x6fc>)
 8012828:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801282c:	ed93 6b00 	vldr	d6, [r3]
 8012830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012832:	2b00      	cmp	r3, #0
 8012834:	f280 80ba 	bge.w	80129ac <_dtoa_r+0x574>
 8012838:	f1b9 0f00 	cmp.w	r9, #0
 801283c:	f300 80b6 	bgt.w	80129ac <_dtoa_r+0x574>
 8012840:	f040 822d 	bne.w	8012c9e <_dtoa_r+0x866>
 8012844:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012848:	ee26 6b07 	vmul.f64	d6, d6, d7
 801284c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012850:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012858:	464d      	mov	r5, r9
 801285a:	464f      	mov	r7, r9
 801285c:	f280 8204 	bge.w	8012c68 <_dtoa_r+0x830>
 8012860:	9b04      	ldr	r3, [sp, #16]
 8012862:	9a04      	ldr	r2, [sp, #16]
 8012864:	1c5e      	adds	r6, r3, #1
 8012866:	2331      	movs	r3, #49	; 0x31
 8012868:	7013      	strb	r3, [r2, #0]
 801286a:	f10b 0b01 	add.w	fp, fp, #1
 801286e:	e1ff      	b.n	8012c70 <_dtoa_r+0x838>
 8012870:	2202      	movs	r2, #2
 8012872:	e731      	b.n	80126d8 <_dtoa_r+0x2a0>
 8012874:	d02e      	beq.n	80128d4 <_dtoa_r+0x49c>
 8012876:	f1cb 0300 	rsb	r3, fp, #0
 801287a:	4aae      	ldr	r2, [pc, #696]	; (8012b34 <_dtoa_r+0x6fc>)
 801287c:	f003 010f 	and.w	r1, r3, #15
 8012880:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012884:	ed92 7b00 	vldr	d7, [r2]
 8012888:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801288c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012890:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012894:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012898:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801289c:	49a6      	ldr	r1, [pc, #664]	; (8012b38 <_dtoa_r+0x700>)
 801289e:	111b      	asrs	r3, r3, #4
 80128a0:	2000      	movs	r0, #0
 80128a2:	2202      	movs	r2, #2
 80128a4:	b93b      	cbnz	r3, 80128b6 <_dtoa_r+0x47e>
 80128a6:	2800      	cmp	r0, #0
 80128a8:	f43f af6b 	beq.w	8012782 <_dtoa_r+0x34a>
 80128ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80128b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128b4:	e765      	b.n	8012782 <_dtoa_r+0x34a>
 80128b6:	07dd      	lsls	r5, r3, #31
 80128b8:	d509      	bpl.n	80128ce <_dtoa_r+0x496>
 80128ba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80128be:	ed91 7b00 	vldr	d7, [r1]
 80128c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80128c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80128ca:	3201      	adds	r2, #1
 80128cc:	2001      	movs	r0, #1
 80128ce:	105b      	asrs	r3, r3, #1
 80128d0:	3108      	adds	r1, #8
 80128d2:	e7e7      	b.n	80128a4 <_dtoa_r+0x46c>
 80128d4:	2202      	movs	r2, #2
 80128d6:	e754      	b.n	8012782 <_dtoa_r+0x34a>
 80128d8:	465b      	mov	r3, fp
 80128da:	464d      	mov	r5, r9
 80128dc:	e770      	b.n	80127c0 <_dtoa_r+0x388>
 80128de:	4a95      	ldr	r2, [pc, #596]	; (8012b34 <_dtoa_r+0x6fc>)
 80128e0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80128e4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80128e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128ea:	ec41 0b17 	vmov	d7, r0, r1
 80128ee:	b35a      	cbz	r2, 8012948 <_dtoa_r+0x510>
 80128f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80128f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80128f8:	9e04      	ldr	r6, [sp, #16]
 80128fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80128fe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012902:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012906:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801290a:	ee14 2a90 	vmov	r2, s9
 801290e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012912:	3230      	adds	r2, #48	; 0x30
 8012914:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012918:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012920:	f806 2b01 	strb.w	r2, [r6], #1
 8012924:	d43b      	bmi.n	801299e <_dtoa_r+0x566>
 8012926:	ee32 5b46 	vsub.f64	d5, d2, d6
 801292a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012932:	d472      	bmi.n	8012a1a <_dtoa_r+0x5e2>
 8012934:	9a04      	ldr	r2, [sp, #16]
 8012936:	1ab2      	subs	r2, r6, r2
 8012938:	4295      	cmp	r5, r2
 801293a:	f77f af68 	ble.w	801280e <_dtoa_r+0x3d6>
 801293e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012942:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012946:	e7de      	b.n	8012906 <_dtoa_r+0x4ce>
 8012948:	9a04      	ldr	r2, [sp, #16]
 801294a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801294e:	1956      	adds	r6, r2, r5
 8012950:	4611      	mov	r1, r2
 8012952:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012956:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801295a:	ee14 2a90 	vmov	r2, s9
 801295e:	3230      	adds	r2, #48	; 0x30
 8012960:	f801 2b01 	strb.w	r2, [r1], #1
 8012964:	42b1      	cmp	r1, r6
 8012966:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801296a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801296e:	d11a      	bne.n	80129a6 <_dtoa_r+0x56e>
 8012970:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012974:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012978:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012980:	dc4b      	bgt.n	8012a1a <_dtoa_r+0x5e2>
 8012982:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012986:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298e:	f57f af3e 	bpl.w	801280e <_dtoa_r+0x3d6>
 8012992:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012996:	2a30      	cmp	r2, #48	; 0x30
 8012998:	f106 31ff 	add.w	r1, r6, #4294967295
 801299c:	d001      	beq.n	80129a2 <_dtoa_r+0x56a>
 801299e:	469b      	mov	fp, r3
 80129a0:	e02a      	b.n	80129f8 <_dtoa_r+0x5c0>
 80129a2:	460e      	mov	r6, r1
 80129a4:	e7f5      	b.n	8012992 <_dtoa_r+0x55a>
 80129a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80129aa:	e7d4      	b.n	8012956 <_dtoa_r+0x51e>
 80129ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80129b0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80129b4:	9e04      	ldr	r6, [sp, #16]
 80129b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80129ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80129be:	ee15 3a10 	vmov	r3, s10
 80129c2:	3330      	adds	r3, #48	; 0x30
 80129c4:	f806 3b01 	strb.w	r3, [r6], #1
 80129c8:	9b04      	ldr	r3, [sp, #16]
 80129ca:	1af3      	subs	r3, r6, r3
 80129cc:	4599      	cmp	r9, r3
 80129ce:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80129d2:	eea3 7b46 	vfms.f64	d7, d3, d6
 80129d6:	d133      	bne.n	8012a40 <_dtoa_r+0x608>
 80129d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80129dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80129e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e4:	dc18      	bgt.n	8012a18 <_dtoa_r+0x5e0>
 80129e6:	eeb4 7b46 	vcmp.f64	d7, d6
 80129ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ee:	d103      	bne.n	80129f8 <_dtoa_r+0x5c0>
 80129f0:	ee15 3a10 	vmov	r3, s10
 80129f4:	07db      	lsls	r3, r3, #31
 80129f6:	d40f      	bmi.n	8012a18 <_dtoa_r+0x5e0>
 80129f8:	9901      	ldr	r1, [sp, #4]
 80129fa:	4620      	mov	r0, r4
 80129fc:	f000 fad4 	bl	8012fa8 <_Bfree>
 8012a00:	2300      	movs	r3, #0
 8012a02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012a04:	7033      	strb	r3, [r6, #0]
 8012a06:	f10b 0301 	add.w	r3, fp, #1
 8012a0a:	6013      	str	r3, [r2, #0]
 8012a0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	f43f ad5b 	beq.w	80124ca <_dtoa_r+0x92>
 8012a14:	601e      	str	r6, [r3, #0]
 8012a16:	e558      	b.n	80124ca <_dtoa_r+0x92>
 8012a18:	465b      	mov	r3, fp
 8012a1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012a1e:	2939      	cmp	r1, #57	; 0x39
 8012a20:	f106 32ff 	add.w	r2, r6, #4294967295
 8012a24:	d106      	bne.n	8012a34 <_dtoa_r+0x5fc>
 8012a26:	9904      	ldr	r1, [sp, #16]
 8012a28:	4291      	cmp	r1, r2
 8012a2a:	d107      	bne.n	8012a3c <_dtoa_r+0x604>
 8012a2c:	2230      	movs	r2, #48	; 0x30
 8012a2e:	700a      	strb	r2, [r1, #0]
 8012a30:	3301      	adds	r3, #1
 8012a32:	460a      	mov	r2, r1
 8012a34:	7811      	ldrb	r1, [r2, #0]
 8012a36:	3101      	adds	r1, #1
 8012a38:	7011      	strb	r1, [r2, #0]
 8012a3a:	e7b0      	b.n	801299e <_dtoa_r+0x566>
 8012a3c:	4616      	mov	r6, r2
 8012a3e:	e7ec      	b.n	8012a1a <_dtoa_r+0x5e2>
 8012a40:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012a44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4c:	d1b3      	bne.n	80129b6 <_dtoa_r+0x57e>
 8012a4e:	e7d3      	b.n	80129f8 <_dtoa_r+0x5c0>
 8012a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a52:	2a00      	cmp	r2, #0
 8012a54:	f000 808d 	beq.w	8012b72 <_dtoa_r+0x73a>
 8012a58:	9a08      	ldr	r2, [sp, #32]
 8012a5a:	2a01      	cmp	r2, #1
 8012a5c:	dc72      	bgt.n	8012b44 <_dtoa_r+0x70c>
 8012a5e:	2f00      	cmp	r7, #0
 8012a60:	d06c      	beq.n	8012b3c <_dtoa_r+0x704>
 8012a62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012a66:	4645      	mov	r5, r8
 8012a68:	4656      	mov	r6, sl
 8012a6a:	9a07      	ldr	r2, [sp, #28]
 8012a6c:	2101      	movs	r1, #1
 8012a6e:	441a      	add	r2, r3
 8012a70:	4620      	mov	r0, r4
 8012a72:	449a      	add	sl, r3
 8012a74:	9207      	str	r2, [sp, #28]
 8012a76:	f000 fb37 	bl	80130e8 <__i2b>
 8012a7a:	4607      	mov	r7, r0
 8012a7c:	2e00      	cmp	r6, #0
 8012a7e:	dd0b      	ble.n	8012a98 <_dtoa_r+0x660>
 8012a80:	9b07      	ldr	r3, [sp, #28]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	dd08      	ble.n	8012a98 <_dtoa_r+0x660>
 8012a86:	42b3      	cmp	r3, r6
 8012a88:	9a07      	ldr	r2, [sp, #28]
 8012a8a:	bfa8      	it	ge
 8012a8c:	4633      	movge	r3, r6
 8012a8e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012a92:	1af6      	subs	r6, r6, r3
 8012a94:	1ad3      	subs	r3, r2, r3
 8012a96:	9307      	str	r3, [sp, #28]
 8012a98:	f1b8 0f00 	cmp.w	r8, #0
 8012a9c:	d01d      	beq.n	8012ada <_dtoa_r+0x6a2>
 8012a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d06a      	beq.n	8012b7a <_dtoa_r+0x742>
 8012aa4:	b18d      	cbz	r5, 8012aca <_dtoa_r+0x692>
 8012aa6:	4639      	mov	r1, r7
 8012aa8:	462a      	mov	r2, r5
 8012aaa:	4620      	mov	r0, r4
 8012aac:	f000 fbbc 	bl	8013228 <__pow5mult>
 8012ab0:	9a01      	ldr	r2, [sp, #4]
 8012ab2:	4601      	mov	r1, r0
 8012ab4:	4607      	mov	r7, r0
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	f000 fb1f 	bl	80130fa <__multiply>
 8012abc:	9901      	ldr	r1, [sp, #4]
 8012abe:	900c      	str	r0, [sp, #48]	; 0x30
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f000 fa71 	bl	8012fa8 <_Bfree>
 8012ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ac8:	9301      	str	r3, [sp, #4]
 8012aca:	ebb8 0205 	subs.w	r2, r8, r5
 8012ace:	d004      	beq.n	8012ada <_dtoa_r+0x6a2>
 8012ad0:	9901      	ldr	r1, [sp, #4]
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f000 fba8 	bl	8013228 <__pow5mult>
 8012ad8:	9001      	str	r0, [sp, #4]
 8012ada:	2101      	movs	r1, #1
 8012adc:	4620      	mov	r0, r4
 8012ade:	f000 fb03 	bl	80130e8 <__i2b>
 8012ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ae4:	4605      	mov	r5, r0
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	f000 81ca 	beq.w	8012e80 <_dtoa_r+0xa48>
 8012aec:	461a      	mov	r2, r3
 8012aee:	4601      	mov	r1, r0
 8012af0:	4620      	mov	r0, r4
 8012af2:	f000 fb99 	bl	8013228 <__pow5mult>
 8012af6:	9b08      	ldr	r3, [sp, #32]
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	4605      	mov	r5, r0
 8012afc:	dc44      	bgt.n	8012b88 <_dtoa_r+0x750>
 8012afe:	9b02      	ldr	r3, [sp, #8]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d13c      	bne.n	8012b7e <_dtoa_r+0x746>
 8012b04:	9b03      	ldr	r3, [sp, #12]
 8012b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d137      	bne.n	8012b7e <_dtoa_r+0x746>
 8012b0e:	9b03      	ldr	r3, [sp, #12]
 8012b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b14:	0d1b      	lsrs	r3, r3, #20
 8012b16:	051b      	lsls	r3, r3, #20
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d033      	beq.n	8012b84 <_dtoa_r+0x74c>
 8012b1c:	9b07      	ldr	r3, [sp, #28]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	f10a 0a01 	add.w	sl, sl, #1
 8012b24:	9307      	str	r3, [sp, #28]
 8012b26:	f04f 0801 	mov.w	r8, #1
 8012b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b2c:	bb73      	cbnz	r3, 8012b8c <_dtoa_r+0x754>
 8012b2e:	2001      	movs	r0, #1
 8012b30:	e034      	b.n	8012b9c <_dtoa_r+0x764>
 8012b32:	bf00      	nop
 8012b34:	080155c8 	.word	0x080155c8
 8012b38:	080155a0 	.word	0x080155a0
 8012b3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012b42:	e790      	b.n	8012a66 <_dtoa_r+0x62e>
 8012b44:	f109 35ff 	add.w	r5, r9, #4294967295
 8012b48:	45a8      	cmp	r8, r5
 8012b4a:	bfbf      	itttt	lt
 8012b4c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8012b4e:	eba5 0808 	sublt.w	r8, r5, r8
 8012b52:	4443      	addlt	r3, r8
 8012b54:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8012b56:	bfb6      	itet	lt
 8012b58:	46a8      	movlt	r8, r5
 8012b5a:	eba8 0505 	subge.w	r5, r8, r5
 8012b5e:	2500      	movlt	r5, #0
 8012b60:	f1b9 0f00 	cmp.w	r9, #0
 8012b64:	bfb9      	ittee	lt
 8012b66:	ebaa 0609 	sublt.w	r6, sl, r9
 8012b6a:	2300      	movlt	r3, #0
 8012b6c:	4656      	movge	r6, sl
 8012b6e:	464b      	movge	r3, r9
 8012b70:	e77b      	b.n	8012a6a <_dtoa_r+0x632>
 8012b72:	4645      	mov	r5, r8
 8012b74:	4656      	mov	r6, sl
 8012b76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012b78:	e780      	b.n	8012a7c <_dtoa_r+0x644>
 8012b7a:	4642      	mov	r2, r8
 8012b7c:	e7a8      	b.n	8012ad0 <_dtoa_r+0x698>
 8012b7e:	f04f 0800 	mov.w	r8, #0
 8012b82:	e7d2      	b.n	8012b2a <_dtoa_r+0x6f2>
 8012b84:	4698      	mov	r8, r3
 8012b86:	e7d0      	b.n	8012b2a <_dtoa_r+0x6f2>
 8012b88:	f04f 0800 	mov.w	r8, #0
 8012b8c:	692b      	ldr	r3, [r5, #16]
 8012b8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012b92:	6918      	ldr	r0, [r3, #16]
 8012b94:	f000 fa5a 	bl	801304c <__hi0bits>
 8012b98:	f1c0 0020 	rsb	r0, r0, #32
 8012b9c:	9b07      	ldr	r3, [sp, #28]
 8012b9e:	4418      	add	r0, r3
 8012ba0:	f010 001f 	ands.w	r0, r0, #31
 8012ba4:	d047      	beq.n	8012c36 <_dtoa_r+0x7fe>
 8012ba6:	f1c0 0320 	rsb	r3, r0, #32
 8012baa:	2b04      	cmp	r3, #4
 8012bac:	dd3b      	ble.n	8012c26 <_dtoa_r+0x7ee>
 8012bae:	9b07      	ldr	r3, [sp, #28]
 8012bb0:	f1c0 001c 	rsb	r0, r0, #28
 8012bb4:	4482      	add	sl, r0
 8012bb6:	4406      	add	r6, r0
 8012bb8:	4403      	add	r3, r0
 8012bba:	9307      	str	r3, [sp, #28]
 8012bbc:	f1ba 0f00 	cmp.w	sl, #0
 8012bc0:	dd05      	ble.n	8012bce <_dtoa_r+0x796>
 8012bc2:	4652      	mov	r2, sl
 8012bc4:	9901      	ldr	r1, [sp, #4]
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	f000 fb7c 	bl	80132c4 <__lshift>
 8012bcc:	9001      	str	r0, [sp, #4]
 8012bce:	9b07      	ldr	r3, [sp, #28]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	dd05      	ble.n	8012be0 <_dtoa_r+0x7a8>
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	4620      	mov	r0, r4
 8012bda:	f000 fb73 	bl	80132c4 <__lshift>
 8012bde:	4605      	mov	r5, r0
 8012be0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012be2:	b353      	cbz	r3, 8012c3a <_dtoa_r+0x802>
 8012be4:	4629      	mov	r1, r5
 8012be6:	9801      	ldr	r0, [sp, #4]
 8012be8:	f000 fbc0 	bl	801336c <__mcmp>
 8012bec:	2800      	cmp	r0, #0
 8012bee:	da24      	bge.n	8012c3a <_dtoa_r+0x802>
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	220a      	movs	r2, #10
 8012bf4:	9901      	ldr	r1, [sp, #4]
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	f000 f9ed 	bl	8012fd6 <__multadd>
 8012bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bfe:	9001      	str	r0, [sp, #4]
 8012c00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	f000 8142 	beq.w	8012e8e <_dtoa_r+0xa56>
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	4639      	mov	r1, r7
 8012c0e:	220a      	movs	r2, #10
 8012c10:	4620      	mov	r0, r4
 8012c12:	f000 f9e0 	bl	8012fd6 <__multadd>
 8012c16:	9b06      	ldr	r3, [sp, #24]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	4607      	mov	r7, r0
 8012c1c:	dc4b      	bgt.n	8012cb6 <_dtoa_r+0x87e>
 8012c1e:	9b08      	ldr	r3, [sp, #32]
 8012c20:	2b02      	cmp	r3, #2
 8012c22:	dd48      	ble.n	8012cb6 <_dtoa_r+0x87e>
 8012c24:	e011      	b.n	8012c4a <_dtoa_r+0x812>
 8012c26:	d0c9      	beq.n	8012bbc <_dtoa_r+0x784>
 8012c28:	9a07      	ldr	r2, [sp, #28]
 8012c2a:	331c      	adds	r3, #28
 8012c2c:	441a      	add	r2, r3
 8012c2e:	449a      	add	sl, r3
 8012c30:	441e      	add	r6, r3
 8012c32:	4613      	mov	r3, r2
 8012c34:	e7c1      	b.n	8012bba <_dtoa_r+0x782>
 8012c36:	4603      	mov	r3, r0
 8012c38:	e7f6      	b.n	8012c28 <_dtoa_r+0x7f0>
 8012c3a:	f1b9 0f00 	cmp.w	r9, #0
 8012c3e:	dc34      	bgt.n	8012caa <_dtoa_r+0x872>
 8012c40:	9b08      	ldr	r3, [sp, #32]
 8012c42:	2b02      	cmp	r3, #2
 8012c44:	dd31      	ble.n	8012caa <_dtoa_r+0x872>
 8012c46:	f8cd 9018 	str.w	r9, [sp, #24]
 8012c4a:	9b06      	ldr	r3, [sp, #24]
 8012c4c:	b963      	cbnz	r3, 8012c68 <_dtoa_r+0x830>
 8012c4e:	4629      	mov	r1, r5
 8012c50:	2205      	movs	r2, #5
 8012c52:	4620      	mov	r0, r4
 8012c54:	f000 f9bf 	bl	8012fd6 <__multadd>
 8012c58:	4601      	mov	r1, r0
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	9801      	ldr	r0, [sp, #4]
 8012c5e:	f000 fb85 	bl	801336c <__mcmp>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	f73f adfc 	bgt.w	8012860 <_dtoa_r+0x428>
 8012c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c6a:	9e04      	ldr	r6, [sp, #16]
 8012c6c:	ea6f 0b03 	mvn.w	fp, r3
 8012c70:	f04f 0900 	mov.w	r9, #0
 8012c74:	4629      	mov	r1, r5
 8012c76:	4620      	mov	r0, r4
 8012c78:	f000 f996 	bl	8012fa8 <_Bfree>
 8012c7c:	2f00      	cmp	r7, #0
 8012c7e:	f43f aebb 	beq.w	80129f8 <_dtoa_r+0x5c0>
 8012c82:	f1b9 0f00 	cmp.w	r9, #0
 8012c86:	d005      	beq.n	8012c94 <_dtoa_r+0x85c>
 8012c88:	45b9      	cmp	r9, r7
 8012c8a:	d003      	beq.n	8012c94 <_dtoa_r+0x85c>
 8012c8c:	4649      	mov	r1, r9
 8012c8e:	4620      	mov	r0, r4
 8012c90:	f000 f98a 	bl	8012fa8 <_Bfree>
 8012c94:	4639      	mov	r1, r7
 8012c96:	4620      	mov	r0, r4
 8012c98:	f000 f986 	bl	8012fa8 <_Bfree>
 8012c9c:	e6ac      	b.n	80129f8 <_dtoa_r+0x5c0>
 8012c9e:	2500      	movs	r5, #0
 8012ca0:	462f      	mov	r7, r5
 8012ca2:	e7e1      	b.n	8012c68 <_dtoa_r+0x830>
 8012ca4:	469b      	mov	fp, r3
 8012ca6:	462f      	mov	r7, r5
 8012ca8:	e5da      	b.n	8012860 <_dtoa_r+0x428>
 8012caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cac:	f8cd 9018 	str.w	r9, [sp, #24]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f000 80f3 	beq.w	8012e9c <_dtoa_r+0xa64>
 8012cb6:	2e00      	cmp	r6, #0
 8012cb8:	dd05      	ble.n	8012cc6 <_dtoa_r+0x88e>
 8012cba:	4639      	mov	r1, r7
 8012cbc:	4632      	mov	r2, r6
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f000 fb00 	bl	80132c4 <__lshift>
 8012cc4:	4607      	mov	r7, r0
 8012cc6:	f1b8 0f00 	cmp.w	r8, #0
 8012cca:	d04c      	beq.n	8012d66 <_dtoa_r+0x92e>
 8012ccc:	6879      	ldr	r1, [r7, #4]
 8012cce:	4620      	mov	r0, r4
 8012cd0:	f000 f936 	bl	8012f40 <_Balloc>
 8012cd4:	693a      	ldr	r2, [r7, #16]
 8012cd6:	3202      	adds	r2, #2
 8012cd8:	4606      	mov	r6, r0
 8012cda:	0092      	lsls	r2, r2, #2
 8012cdc:	f107 010c 	add.w	r1, r7, #12
 8012ce0:	300c      	adds	r0, #12
 8012ce2:	f7fe fd86 	bl	80117f2 <memcpy>
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	4631      	mov	r1, r6
 8012cea:	4620      	mov	r0, r4
 8012cec:	f000 faea 	bl	80132c4 <__lshift>
 8012cf0:	9b02      	ldr	r3, [sp, #8]
 8012cf2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012cf6:	f003 0301 	and.w	r3, r3, #1
 8012cfa:	46b9      	mov	r9, r7
 8012cfc:	9307      	str	r3, [sp, #28]
 8012cfe:	4607      	mov	r7, r0
 8012d00:	4629      	mov	r1, r5
 8012d02:	9801      	ldr	r0, [sp, #4]
 8012d04:	f7ff fb0c 	bl	8012320 <quorem>
 8012d08:	4649      	mov	r1, r9
 8012d0a:	4606      	mov	r6, r0
 8012d0c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012d10:	9801      	ldr	r0, [sp, #4]
 8012d12:	f000 fb2b 	bl	801336c <__mcmp>
 8012d16:	463a      	mov	r2, r7
 8012d18:	9002      	str	r0, [sp, #8]
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f000 fb3f 	bl	80133a0 <__mdiff>
 8012d22:	68c3      	ldr	r3, [r0, #12]
 8012d24:	4602      	mov	r2, r0
 8012d26:	bb03      	cbnz	r3, 8012d6a <_dtoa_r+0x932>
 8012d28:	4601      	mov	r1, r0
 8012d2a:	9009      	str	r0, [sp, #36]	; 0x24
 8012d2c:	9801      	ldr	r0, [sp, #4]
 8012d2e:	f000 fb1d 	bl	801336c <__mcmp>
 8012d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d34:	4603      	mov	r3, r0
 8012d36:	4611      	mov	r1, r2
 8012d38:	4620      	mov	r0, r4
 8012d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d3c:	f000 f934 	bl	8012fa8 <_Bfree>
 8012d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d42:	b9a3      	cbnz	r3, 8012d6e <_dtoa_r+0x936>
 8012d44:	9a08      	ldr	r2, [sp, #32]
 8012d46:	b992      	cbnz	r2, 8012d6e <_dtoa_r+0x936>
 8012d48:	9a07      	ldr	r2, [sp, #28]
 8012d4a:	b982      	cbnz	r2, 8012d6e <_dtoa_r+0x936>
 8012d4c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012d50:	d029      	beq.n	8012da6 <_dtoa_r+0x96e>
 8012d52:	9b02      	ldr	r3, [sp, #8]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	dd01      	ble.n	8012d5c <_dtoa_r+0x924>
 8012d58:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8012d5c:	f10a 0601 	add.w	r6, sl, #1
 8012d60:	f88a 8000 	strb.w	r8, [sl]
 8012d64:	e786      	b.n	8012c74 <_dtoa_r+0x83c>
 8012d66:	4638      	mov	r0, r7
 8012d68:	e7c2      	b.n	8012cf0 <_dtoa_r+0x8b8>
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	e7e3      	b.n	8012d36 <_dtoa_r+0x8fe>
 8012d6e:	9a02      	ldr	r2, [sp, #8]
 8012d70:	2a00      	cmp	r2, #0
 8012d72:	db04      	blt.n	8012d7e <_dtoa_r+0x946>
 8012d74:	d124      	bne.n	8012dc0 <_dtoa_r+0x988>
 8012d76:	9a08      	ldr	r2, [sp, #32]
 8012d78:	bb12      	cbnz	r2, 8012dc0 <_dtoa_r+0x988>
 8012d7a:	9a07      	ldr	r2, [sp, #28]
 8012d7c:	bb02      	cbnz	r2, 8012dc0 <_dtoa_r+0x988>
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	ddec      	ble.n	8012d5c <_dtoa_r+0x924>
 8012d82:	2201      	movs	r2, #1
 8012d84:	9901      	ldr	r1, [sp, #4]
 8012d86:	4620      	mov	r0, r4
 8012d88:	f000 fa9c 	bl	80132c4 <__lshift>
 8012d8c:	4629      	mov	r1, r5
 8012d8e:	9001      	str	r0, [sp, #4]
 8012d90:	f000 faec 	bl	801336c <__mcmp>
 8012d94:	2800      	cmp	r0, #0
 8012d96:	dc03      	bgt.n	8012da0 <_dtoa_r+0x968>
 8012d98:	d1e0      	bne.n	8012d5c <_dtoa_r+0x924>
 8012d9a:	f018 0f01 	tst.w	r8, #1
 8012d9e:	d0dd      	beq.n	8012d5c <_dtoa_r+0x924>
 8012da0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012da4:	d1d8      	bne.n	8012d58 <_dtoa_r+0x920>
 8012da6:	2339      	movs	r3, #57	; 0x39
 8012da8:	f10a 0601 	add.w	r6, sl, #1
 8012dac:	f88a 3000 	strb.w	r3, [sl]
 8012db0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012db4:	2b39      	cmp	r3, #57	; 0x39
 8012db6:	f106 32ff 	add.w	r2, r6, #4294967295
 8012dba:	d04c      	beq.n	8012e56 <_dtoa_r+0xa1e>
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	e051      	b.n	8012e64 <_dtoa_r+0xa2c>
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	f10a 0601 	add.w	r6, sl, #1
 8012dc6:	dd05      	ble.n	8012dd4 <_dtoa_r+0x99c>
 8012dc8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012dcc:	d0eb      	beq.n	8012da6 <_dtoa_r+0x96e>
 8012dce:	f108 0801 	add.w	r8, r8, #1
 8012dd2:	e7c5      	b.n	8012d60 <_dtoa_r+0x928>
 8012dd4:	9b04      	ldr	r3, [sp, #16]
 8012dd6:	9a06      	ldr	r2, [sp, #24]
 8012dd8:	f806 8c01 	strb.w	r8, [r6, #-1]
 8012ddc:	1af3      	subs	r3, r6, r3
 8012dde:	4293      	cmp	r3, r2
 8012de0:	d021      	beq.n	8012e26 <_dtoa_r+0x9ee>
 8012de2:	2300      	movs	r3, #0
 8012de4:	220a      	movs	r2, #10
 8012de6:	9901      	ldr	r1, [sp, #4]
 8012de8:	4620      	mov	r0, r4
 8012dea:	f000 f8f4 	bl	8012fd6 <__multadd>
 8012dee:	45b9      	cmp	r9, r7
 8012df0:	9001      	str	r0, [sp, #4]
 8012df2:	f04f 0300 	mov.w	r3, #0
 8012df6:	f04f 020a 	mov.w	r2, #10
 8012dfa:	4649      	mov	r1, r9
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	d105      	bne.n	8012e0c <_dtoa_r+0x9d4>
 8012e00:	f000 f8e9 	bl	8012fd6 <__multadd>
 8012e04:	4681      	mov	r9, r0
 8012e06:	4607      	mov	r7, r0
 8012e08:	46b2      	mov	sl, r6
 8012e0a:	e779      	b.n	8012d00 <_dtoa_r+0x8c8>
 8012e0c:	f000 f8e3 	bl	8012fd6 <__multadd>
 8012e10:	4639      	mov	r1, r7
 8012e12:	4681      	mov	r9, r0
 8012e14:	2300      	movs	r3, #0
 8012e16:	220a      	movs	r2, #10
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f000 f8dc 	bl	8012fd6 <__multadd>
 8012e1e:	4607      	mov	r7, r0
 8012e20:	e7f2      	b.n	8012e08 <_dtoa_r+0x9d0>
 8012e22:	f04f 0900 	mov.w	r9, #0
 8012e26:	2201      	movs	r2, #1
 8012e28:	9901      	ldr	r1, [sp, #4]
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f000 fa4a 	bl	80132c4 <__lshift>
 8012e30:	4629      	mov	r1, r5
 8012e32:	9001      	str	r0, [sp, #4]
 8012e34:	f000 fa9a 	bl	801336c <__mcmp>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	dcb9      	bgt.n	8012db0 <_dtoa_r+0x978>
 8012e3c:	d102      	bne.n	8012e44 <_dtoa_r+0xa0c>
 8012e3e:	f018 0f01 	tst.w	r8, #1
 8012e42:	d1b5      	bne.n	8012db0 <_dtoa_r+0x978>
 8012e44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e48:	2b30      	cmp	r3, #48	; 0x30
 8012e4a:	f106 32ff 	add.w	r2, r6, #4294967295
 8012e4e:	f47f af11 	bne.w	8012c74 <_dtoa_r+0x83c>
 8012e52:	4616      	mov	r6, r2
 8012e54:	e7f6      	b.n	8012e44 <_dtoa_r+0xa0c>
 8012e56:	9b04      	ldr	r3, [sp, #16]
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d105      	bne.n	8012e68 <_dtoa_r+0xa30>
 8012e5c:	9a04      	ldr	r2, [sp, #16]
 8012e5e:	f10b 0b01 	add.w	fp, fp, #1
 8012e62:	2331      	movs	r3, #49	; 0x31
 8012e64:	7013      	strb	r3, [r2, #0]
 8012e66:	e705      	b.n	8012c74 <_dtoa_r+0x83c>
 8012e68:	4616      	mov	r6, r2
 8012e6a:	e7a1      	b.n	8012db0 <_dtoa_r+0x978>
 8012e6c:	4b16      	ldr	r3, [pc, #88]	; (8012ec8 <_dtoa_r+0xa90>)
 8012e6e:	f7ff bb48 	b.w	8012502 <_dtoa_r+0xca>
 8012e72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	f47f ab23 	bne.w	80124c0 <_dtoa_r+0x88>
 8012e7a:	4b14      	ldr	r3, [pc, #80]	; (8012ecc <_dtoa_r+0xa94>)
 8012e7c:	f7ff bb41 	b.w	8012502 <_dtoa_r+0xca>
 8012e80:	9b08      	ldr	r3, [sp, #32]
 8012e82:	2b01      	cmp	r3, #1
 8012e84:	f77f ae3b 	ble.w	8012afe <_dtoa_r+0x6c6>
 8012e88:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012e8c:	e64f      	b.n	8012b2e <_dtoa_r+0x6f6>
 8012e8e:	9b06      	ldr	r3, [sp, #24]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	dc03      	bgt.n	8012e9c <_dtoa_r+0xa64>
 8012e94:	9b08      	ldr	r3, [sp, #32]
 8012e96:	2b02      	cmp	r3, #2
 8012e98:	f73f aed7 	bgt.w	8012c4a <_dtoa_r+0x812>
 8012e9c:	9e04      	ldr	r6, [sp, #16]
 8012e9e:	9801      	ldr	r0, [sp, #4]
 8012ea0:	4629      	mov	r1, r5
 8012ea2:	f7ff fa3d 	bl	8012320 <quorem>
 8012ea6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012eaa:	f806 8b01 	strb.w	r8, [r6], #1
 8012eae:	9b04      	ldr	r3, [sp, #16]
 8012eb0:	9a06      	ldr	r2, [sp, #24]
 8012eb2:	1af3      	subs	r3, r6, r3
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	ddb4      	ble.n	8012e22 <_dtoa_r+0x9ea>
 8012eb8:	2300      	movs	r3, #0
 8012eba:	220a      	movs	r2, #10
 8012ebc:	9901      	ldr	r1, [sp, #4]
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	f000 f889 	bl	8012fd6 <__multadd>
 8012ec4:	9001      	str	r0, [sp, #4]
 8012ec6:	e7ea      	b.n	8012e9e <_dtoa_r+0xa66>
 8012ec8:	08015564 	.word	0x08015564
 8012ecc:	08015588 	.word	0x08015588

08012ed0 <__locale_ctype_ptr>:
 8012ed0:	4b04      	ldr	r3, [pc, #16]	; (8012ee4 <__locale_ctype_ptr+0x14>)
 8012ed2:	4a05      	ldr	r2, [pc, #20]	; (8012ee8 <__locale_ctype_ptr+0x18>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	6a1b      	ldr	r3, [r3, #32]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	bf08      	it	eq
 8012edc:	4613      	moveq	r3, r2
 8012ede:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012ee2:	4770      	bx	lr
 8012ee4:	20000034 	.word	0x20000034
 8012ee8:	20000098 	.word	0x20000098

08012eec <_localeconv_r>:
 8012eec:	4b04      	ldr	r3, [pc, #16]	; (8012f00 <_localeconv_r+0x14>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	6a18      	ldr	r0, [r3, #32]
 8012ef2:	4b04      	ldr	r3, [pc, #16]	; (8012f04 <_localeconv_r+0x18>)
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	bf08      	it	eq
 8012ef8:	4618      	moveq	r0, r3
 8012efa:	30f0      	adds	r0, #240	; 0xf0
 8012efc:	4770      	bx	lr
 8012efe:	bf00      	nop
 8012f00:	20000034 	.word	0x20000034
 8012f04:	20000098 	.word	0x20000098

08012f08 <malloc>:
 8012f08:	4b02      	ldr	r3, [pc, #8]	; (8012f14 <malloc+0xc>)
 8012f0a:	4601      	mov	r1, r0
 8012f0c:	6818      	ldr	r0, [r3, #0]
 8012f0e:	f7fe bc9d 	b.w	801184c <_malloc_r>
 8012f12:	bf00      	nop
 8012f14:	20000034 	.word	0x20000034

08012f18 <__ascii_mbtowc>:
 8012f18:	b082      	sub	sp, #8
 8012f1a:	b901      	cbnz	r1, 8012f1e <__ascii_mbtowc+0x6>
 8012f1c:	a901      	add	r1, sp, #4
 8012f1e:	b142      	cbz	r2, 8012f32 <__ascii_mbtowc+0x1a>
 8012f20:	b14b      	cbz	r3, 8012f36 <__ascii_mbtowc+0x1e>
 8012f22:	7813      	ldrb	r3, [r2, #0]
 8012f24:	600b      	str	r3, [r1, #0]
 8012f26:	7812      	ldrb	r2, [r2, #0]
 8012f28:	1c10      	adds	r0, r2, #0
 8012f2a:	bf18      	it	ne
 8012f2c:	2001      	movne	r0, #1
 8012f2e:	b002      	add	sp, #8
 8012f30:	4770      	bx	lr
 8012f32:	4610      	mov	r0, r2
 8012f34:	e7fb      	b.n	8012f2e <__ascii_mbtowc+0x16>
 8012f36:	f06f 0001 	mvn.w	r0, #1
 8012f3a:	e7f8      	b.n	8012f2e <__ascii_mbtowc+0x16>

08012f3c <__malloc_lock>:
 8012f3c:	4770      	bx	lr

08012f3e <__malloc_unlock>:
 8012f3e:	4770      	bx	lr

08012f40 <_Balloc>:
 8012f40:	b570      	push	{r4, r5, r6, lr}
 8012f42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012f44:	4604      	mov	r4, r0
 8012f46:	460e      	mov	r6, r1
 8012f48:	b93d      	cbnz	r5, 8012f5a <_Balloc+0x1a>
 8012f4a:	2010      	movs	r0, #16
 8012f4c:	f7ff ffdc 	bl	8012f08 <malloc>
 8012f50:	6260      	str	r0, [r4, #36]	; 0x24
 8012f52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012f56:	6005      	str	r5, [r0, #0]
 8012f58:	60c5      	str	r5, [r0, #12]
 8012f5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012f5c:	68eb      	ldr	r3, [r5, #12]
 8012f5e:	b183      	cbz	r3, 8012f82 <_Balloc+0x42>
 8012f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012f68:	b9b8      	cbnz	r0, 8012f9a <_Balloc+0x5a>
 8012f6a:	2101      	movs	r1, #1
 8012f6c:	fa01 f506 	lsl.w	r5, r1, r6
 8012f70:	1d6a      	adds	r2, r5, #5
 8012f72:	0092      	lsls	r2, r2, #2
 8012f74:	4620      	mov	r0, r4
 8012f76:	f000 fabf 	bl	80134f8 <_calloc_r>
 8012f7a:	b160      	cbz	r0, 8012f96 <_Balloc+0x56>
 8012f7c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012f80:	e00e      	b.n	8012fa0 <_Balloc+0x60>
 8012f82:	2221      	movs	r2, #33	; 0x21
 8012f84:	2104      	movs	r1, #4
 8012f86:	4620      	mov	r0, r4
 8012f88:	f000 fab6 	bl	80134f8 <_calloc_r>
 8012f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f8e:	60e8      	str	r0, [r5, #12]
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d1e4      	bne.n	8012f60 <_Balloc+0x20>
 8012f96:	2000      	movs	r0, #0
 8012f98:	bd70      	pop	{r4, r5, r6, pc}
 8012f9a:	6802      	ldr	r2, [r0, #0]
 8012f9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012fa6:	e7f7      	b.n	8012f98 <_Balloc+0x58>

08012fa8 <_Bfree>:
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012fac:	4606      	mov	r6, r0
 8012fae:	460d      	mov	r5, r1
 8012fb0:	b93c      	cbnz	r4, 8012fc2 <_Bfree+0x1a>
 8012fb2:	2010      	movs	r0, #16
 8012fb4:	f7ff ffa8 	bl	8012f08 <malloc>
 8012fb8:	6270      	str	r0, [r6, #36]	; 0x24
 8012fba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012fbe:	6004      	str	r4, [r0, #0]
 8012fc0:	60c4      	str	r4, [r0, #12]
 8012fc2:	b13d      	cbz	r5, 8012fd4 <_Bfree+0x2c>
 8012fc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012fc6:	686a      	ldr	r2, [r5, #4]
 8012fc8:	68db      	ldr	r3, [r3, #12]
 8012fca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012fce:	6029      	str	r1, [r5, #0]
 8012fd0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012fd4:	bd70      	pop	{r4, r5, r6, pc}

08012fd6 <__multadd>:
 8012fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fda:	690d      	ldr	r5, [r1, #16]
 8012fdc:	461f      	mov	r7, r3
 8012fde:	4606      	mov	r6, r0
 8012fe0:	460c      	mov	r4, r1
 8012fe2:	f101 0c14 	add.w	ip, r1, #20
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	f8dc 0000 	ldr.w	r0, [ip]
 8012fec:	b281      	uxth	r1, r0
 8012fee:	fb02 7101 	mla	r1, r2, r1, r7
 8012ff2:	0c0f      	lsrs	r7, r1, #16
 8012ff4:	0c00      	lsrs	r0, r0, #16
 8012ff6:	fb02 7000 	mla	r0, r2, r0, r7
 8012ffa:	b289      	uxth	r1, r1
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013002:	429d      	cmp	r5, r3
 8013004:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013008:	f84c 1b04 	str.w	r1, [ip], #4
 801300c:	dcec      	bgt.n	8012fe8 <__multadd+0x12>
 801300e:	b1d7      	cbz	r7, 8013046 <__multadd+0x70>
 8013010:	68a3      	ldr	r3, [r4, #8]
 8013012:	42ab      	cmp	r3, r5
 8013014:	dc12      	bgt.n	801303c <__multadd+0x66>
 8013016:	6861      	ldr	r1, [r4, #4]
 8013018:	4630      	mov	r0, r6
 801301a:	3101      	adds	r1, #1
 801301c:	f7ff ff90 	bl	8012f40 <_Balloc>
 8013020:	6922      	ldr	r2, [r4, #16]
 8013022:	3202      	adds	r2, #2
 8013024:	f104 010c 	add.w	r1, r4, #12
 8013028:	4680      	mov	r8, r0
 801302a:	0092      	lsls	r2, r2, #2
 801302c:	300c      	adds	r0, #12
 801302e:	f7fe fbe0 	bl	80117f2 <memcpy>
 8013032:	4621      	mov	r1, r4
 8013034:	4630      	mov	r0, r6
 8013036:	f7ff ffb7 	bl	8012fa8 <_Bfree>
 801303a:	4644      	mov	r4, r8
 801303c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013040:	3501      	adds	r5, #1
 8013042:	615f      	str	r7, [r3, #20]
 8013044:	6125      	str	r5, [r4, #16]
 8013046:	4620      	mov	r0, r4
 8013048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801304c <__hi0bits>:
 801304c:	0c02      	lsrs	r2, r0, #16
 801304e:	0412      	lsls	r2, r2, #16
 8013050:	4603      	mov	r3, r0
 8013052:	b9b2      	cbnz	r2, 8013082 <__hi0bits+0x36>
 8013054:	0403      	lsls	r3, r0, #16
 8013056:	2010      	movs	r0, #16
 8013058:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801305c:	bf04      	itt	eq
 801305e:	021b      	lsleq	r3, r3, #8
 8013060:	3008      	addeq	r0, #8
 8013062:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013066:	bf04      	itt	eq
 8013068:	011b      	lsleq	r3, r3, #4
 801306a:	3004      	addeq	r0, #4
 801306c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013070:	bf04      	itt	eq
 8013072:	009b      	lsleq	r3, r3, #2
 8013074:	3002      	addeq	r0, #2
 8013076:	2b00      	cmp	r3, #0
 8013078:	db06      	blt.n	8013088 <__hi0bits+0x3c>
 801307a:	005b      	lsls	r3, r3, #1
 801307c:	d503      	bpl.n	8013086 <__hi0bits+0x3a>
 801307e:	3001      	adds	r0, #1
 8013080:	4770      	bx	lr
 8013082:	2000      	movs	r0, #0
 8013084:	e7e8      	b.n	8013058 <__hi0bits+0xc>
 8013086:	2020      	movs	r0, #32
 8013088:	4770      	bx	lr

0801308a <__lo0bits>:
 801308a:	6803      	ldr	r3, [r0, #0]
 801308c:	f013 0207 	ands.w	r2, r3, #7
 8013090:	4601      	mov	r1, r0
 8013092:	d00b      	beq.n	80130ac <__lo0bits+0x22>
 8013094:	07da      	lsls	r2, r3, #31
 8013096:	d423      	bmi.n	80130e0 <__lo0bits+0x56>
 8013098:	0798      	lsls	r0, r3, #30
 801309a:	bf49      	itett	mi
 801309c:	085b      	lsrmi	r3, r3, #1
 801309e:	089b      	lsrpl	r3, r3, #2
 80130a0:	2001      	movmi	r0, #1
 80130a2:	600b      	strmi	r3, [r1, #0]
 80130a4:	bf5c      	itt	pl
 80130a6:	600b      	strpl	r3, [r1, #0]
 80130a8:	2002      	movpl	r0, #2
 80130aa:	4770      	bx	lr
 80130ac:	b298      	uxth	r0, r3
 80130ae:	b9a8      	cbnz	r0, 80130dc <__lo0bits+0x52>
 80130b0:	0c1b      	lsrs	r3, r3, #16
 80130b2:	2010      	movs	r0, #16
 80130b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80130b8:	bf04      	itt	eq
 80130ba:	0a1b      	lsreq	r3, r3, #8
 80130bc:	3008      	addeq	r0, #8
 80130be:	071a      	lsls	r2, r3, #28
 80130c0:	bf04      	itt	eq
 80130c2:	091b      	lsreq	r3, r3, #4
 80130c4:	3004      	addeq	r0, #4
 80130c6:	079a      	lsls	r2, r3, #30
 80130c8:	bf04      	itt	eq
 80130ca:	089b      	lsreq	r3, r3, #2
 80130cc:	3002      	addeq	r0, #2
 80130ce:	07da      	lsls	r2, r3, #31
 80130d0:	d402      	bmi.n	80130d8 <__lo0bits+0x4e>
 80130d2:	085b      	lsrs	r3, r3, #1
 80130d4:	d006      	beq.n	80130e4 <__lo0bits+0x5a>
 80130d6:	3001      	adds	r0, #1
 80130d8:	600b      	str	r3, [r1, #0]
 80130da:	4770      	bx	lr
 80130dc:	4610      	mov	r0, r2
 80130de:	e7e9      	b.n	80130b4 <__lo0bits+0x2a>
 80130e0:	2000      	movs	r0, #0
 80130e2:	4770      	bx	lr
 80130e4:	2020      	movs	r0, #32
 80130e6:	4770      	bx	lr

080130e8 <__i2b>:
 80130e8:	b510      	push	{r4, lr}
 80130ea:	460c      	mov	r4, r1
 80130ec:	2101      	movs	r1, #1
 80130ee:	f7ff ff27 	bl	8012f40 <_Balloc>
 80130f2:	2201      	movs	r2, #1
 80130f4:	6144      	str	r4, [r0, #20]
 80130f6:	6102      	str	r2, [r0, #16]
 80130f8:	bd10      	pop	{r4, pc}

080130fa <__multiply>:
 80130fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130fe:	4614      	mov	r4, r2
 8013100:	690a      	ldr	r2, [r1, #16]
 8013102:	6923      	ldr	r3, [r4, #16]
 8013104:	429a      	cmp	r2, r3
 8013106:	bfb8      	it	lt
 8013108:	460b      	movlt	r3, r1
 801310a:	4688      	mov	r8, r1
 801310c:	bfbc      	itt	lt
 801310e:	46a0      	movlt	r8, r4
 8013110:	461c      	movlt	r4, r3
 8013112:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013116:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801311a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801311e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013122:	eb07 0609 	add.w	r6, r7, r9
 8013126:	42b3      	cmp	r3, r6
 8013128:	bfb8      	it	lt
 801312a:	3101      	addlt	r1, #1
 801312c:	f7ff ff08 	bl	8012f40 <_Balloc>
 8013130:	f100 0514 	add.w	r5, r0, #20
 8013134:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013138:	462b      	mov	r3, r5
 801313a:	2200      	movs	r2, #0
 801313c:	4573      	cmp	r3, lr
 801313e:	d316      	bcc.n	801316e <__multiply+0x74>
 8013140:	f104 0214 	add.w	r2, r4, #20
 8013144:	f108 0114 	add.w	r1, r8, #20
 8013148:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801314c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013150:	9300      	str	r3, [sp, #0]
 8013152:	9b00      	ldr	r3, [sp, #0]
 8013154:	9201      	str	r2, [sp, #4]
 8013156:	4293      	cmp	r3, r2
 8013158:	d80c      	bhi.n	8013174 <__multiply+0x7a>
 801315a:	2e00      	cmp	r6, #0
 801315c:	dd03      	ble.n	8013166 <__multiply+0x6c>
 801315e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013162:	2b00      	cmp	r3, #0
 8013164:	d05d      	beq.n	8013222 <__multiply+0x128>
 8013166:	6106      	str	r6, [r0, #16]
 8013168:	b003      	add	sp, #12
 801316a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801316e:	f843 2b04 	str.w	r2, [r3], #4
 8013172:	e7e3      	b.n	801313c <__multiply+0x42>
 8013174:	f8b2 b000 	ldrh.w	fp, [r2]
 8013178:	f1bb 0f00 	cmp.w	fp, #0
 801317c:	d023      	beq.n	80131c6 <__multiply+0xcc>
 801317e:	4689      	mov	r9, r1
 8013180:	46ac      	mov	ip, r5
 8013182:	f04f 0800 	mov.w	r8, #0
 8013186:	f859 4b04 	ldr.w	r4, [r9], #4
 801318a:	f8dc a000 	ldr.w	sl, [ip]
 801318e:	b2a3      	uxth	r3, r4
 8013190:	fa1f fa8a 	uxth.w	sl, sl
 8013194:	fb0b a303 	mla	r3, fp, r3, sl
 8013198:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801319c:	f8dc 4000 	ldr.w	r4, [ip]
 80131a0:	4443      	add	r3, r8
 80131a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80131a6:	fb0b 840a 	mla	r4, fp, sl, r8
 80131aa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80131ae:	46e2      	mov	sl, ip
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80131b6:	454f      	cmp	r7, r9
 80131b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80131bc:	f84a 3b04 	str.w	r3, [sl], #4
 80131c0:	d82b      	bhi.n	801321a <__multiply+0x120>
 80131c2:	f8cc 8004 	str.w	r8, [ip, #4]
 80131c6:	9b01      	ldr	r3, [sp, #4]
 80131c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80131cc:	3204      	adds	r2, #4
 80131ce:	f1ba 0f00 	cmp.w	sl, #0
 80131d2:	d020      	beq.n	8013216 <__multiply+0x11c>
 80131d4:	682b      	ldr	r3, [r5, #0]
 80131d6:	4689      	mov	r9, r1
 80131d8:	46a8      	mov	r8, r5
 80131da:	f04f 0b00 	mov.w	fp, #0
 80131de:	f8b9 c000 	ldrh.w	ip, [r9]
 80131e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80131e6:	fb0a 440c 	mla	r4, sl, ip, r4
 80131ea:	445c      	add	r4, fp
 80131ec:	46c4      	mov	ip, r8
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80131f4:	f84c 3b04 	str.w	r3, [ip], #4
 80131f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80131fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013200:	0c1b      	lsrs	r3, r3, #16
 8013202:	fb0a b303 	mla	r3, sl, r3, fp
 8013206:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801320a:	454f      	cmp	r7, r9
 801320c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013210:	d805      	bhi.n	801321e <__multiply+0x124>
 8013212:	f8c8 3004 	str.w	r3, [r8, #4]
 8013216:	3504      	adds	r5, #4
 8013218:	e79b      	b.n	8013152 <__multiply+0x58>
 801321a:	46d4      	mov	ip, sl
 801321c:	e7b3      	b.n	8013186 <__multiply+0x8c>
 801321e:	46e0      	mov	r8, ip
 8013220:	e7dd      	b.n	80131de <__multiply+0xe4>
 8013222:	3e01      	subs	r6, #1
 8013224:	e799      	b.n	801315a <__multiply+0x60>
	...

08013228 <__pow5mult>:
 8013228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801322c:	4615      	mov	r5, r2
 801322e:	f012 0203 	ands.w	r2, r2, #3
 8013232:	4606      	mov	r6, r0
 8013234:	460f      	mov	r7, r1
 8013236:	d007      	beq.n	8013248 <__pow5mult+0x20>
 8013238:	3a01      	subs	r2, #1
 801323a:	4c21      	ldr	r4, [pc, #132]	; (80132c0 <__pow5mult+0x98>)
 801323c:	2300      	movs	r3, #0
 801323e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013242:	f7ff fec8 	bl	8012fd6 <__multadd>
 8013246:	4607      	mov	r7, r0
 8013248:	10ad      	asrs	r5, r5, #2
 801324a:	d035      	beq.n	80132b8 <__pow5mult+0x90>
 801324c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801324e:	b93c      	cbnz	r4, 8013260 <__pow5mult+0x38>
 8013250:	2010      	movs	r0, #16
 8013252:	f7ff fe59 	bl	8012f08 <malloc>
 8013256:	6270      	str	r0, [r6, #36]	; 0x24
 8013258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801325c:	6004      	str	r4, [r0, #0]
 801325e:	60c4      	str	r4, [r0, #12]
 8013260:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013268:	b94c      	cbnz	r4, 801327e <__pow5mult+0x56>
 801326a:	f240 2171 	movw	r1, #625	; 0x271
 801326e:	4630      	mov	r0, r6
 8013270:	f7ff ff3a 	bl	80130e8 <__i2b>
 8013274:	2300      	movs	r3, #0
 8013276:	f8c8 0008 	str.w	r0, [r8, #8]
 801327a:	4604      	mov	r4, r0
 801327c:	6003      	str	r3, [r0, #0]
 801327e:	f04f 0800 	mov.w	r8, #0
 8013282:	07eb      	lsls	r3, r5, #31
 8013284:	d50a      	bpl.n	801329c <__pow5mult+0x74>
 8013286:	4639      	mov	r1, r7
 8013288:	4622      	mov	r2, r4
 801328a:	4630      	mov	r0, r6
 801328c:	f7ff ff35 	bl	80130fa <__multiply>
 8013290:	4639      	mov	r1, r7
 8013292:	4681      	mov	r9, r0
 8013294:	4630      	mov	r0, r6
 8013296:	f7ff fe87 	bl	8012fa8 <_Bfree>
 801329a:	464f      	mov	r7, r9
 801329c:	106d      	asrs	r5, r5, #1
 801329e:	d00b      	beq.n	80132b8 <__pow5mult+0x90>
 80132a0:	6820      	ldr	r0, [r4, #0]
 80132a2:	b938      	cbnz	r0, 80132b4 <__pow5mult+0x8c>
 80132a4:	4622      	mov	r2, r4
 80132a6:	4621      	mov	r1, r4
 80132a8:	4630      	mov	r0, r6
 80132aa:	f7ff ff26 	bl	80130fa <__multiply>
 80132ae:	6020      	str	r0, [r4, #0]
 80132b0:	f8c0 8000 	str.w	r8, [r0]
 80132b4:	4604      	mov	r4, r0
 80132b6:	e7e4      	b.n	8013282 <__pow5mult+0x5a>
 80132b8:	4638      	mov	r0, r7
 80132ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132be:	bf00      	nop
 80132c0:	08015690 	.word	0x08015690

080132c4 <__lshift>:
 80132c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132c8:	460c      	mov	r4, r1
 80132ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80132ce:	6923      	ldr	r3, [r4, #16]
 80132d0:	6849      	ldr	r1, [r1, #4]
 80132d2:	eb0a 0903 	add.w	r9, sl, r3
 80132d6:	68a3      	ldr	r3, [r4, #8]
 80132d8:	4607      	mov	r7, r0
 80132da:	4616      	mov	r6, r2
 80132dc:	f109 0501 	add.w	r5, r9, #1
 80132e0:	42ab      	cmp	r3, r5
 80132e2:	db32      	blt.n	801334a <__lshift+0x86>
 80132e4:	4638      	mov	r0, r7
 80132e6:	f7ff fe2b 	bl	8012f40 <_Balloc>
 80132ea:	2300      	movs	r3, #0
 80132ec:	4680      	mov	r8, r0
 80132ee:	f100 0114 	add.w	r1, r0, #20
 80132f2:	461a      	mov	r2, r3
 80132f4:	4553      	cmp	r3, sl
 80132f6:	db2b      	blt.n	8013350 <__lshift+0x8c>
 80132f8:	6920      	ldr	r0, [r4, #16]
 80132fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80132fe:	f104 0314 	add.w	r3, r4, #20
 8013302:	f016 021f 	ands.w	r2, r6, #31
 8013306:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801330a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801330e:	d025      	beq.n	801335c <__lshift+0x98>
 8013310:	f1c2 0e20 	rsb	lr, r2, #32
 8013314:	2000      	movs	r0, #0
 8013316:	681e      	ldr	r6, [r3, #0]
 8013318:	468a      	mov	sl, r1
 801331a:	4096      	lsls	r6, r2
 801331c:	4330      	orrs	r0, r6
 801331e:	f84a 0b04 	str.w	r0, [sl], #4
 8013322:	f853 0b04 	ldr.w	r0, [r3], #4
 8013326:	459c      	cmp	ip, r3
 8013328:	fa20 f00e 	lsr.w	r0, r0, lr
 801332c:	d814      	bhi.n	8013358 <__lshift+0x94>
 801332e:	6048      	str	r0, [r1, #4]
 8013330:	b108      	cbz	r0, 8013336 <__lshift+0x72>
 8013332:	f109 0502 	add.w	r5, r9, #2
 8013336:	3d01      	subs	r5, #1
 8013338:	4638      	mov	r0, r7
 801333a:	f8c8 5010 	str.w	r5, [r8, #16]
 801333e:	4621      	mov	r1, r4
 8013340:	f7ff fe32 	bl	8012fa8 <_Bfree>
 8013344:	4640      	mov	r0, r8
 8013346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801334a:	3101      	adds	r1, #1
 801334c:	005b      	lsls	r3, r3, #1
 801334e:	e7c7      	b.n	80132e0 <__lshift+0x1c>
 8013350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013354:	3301      	adds	r3, #1
 8013356:	e7cd      	b.n	80132f4 <__lshift+0x30>
 8013358:	4651      	mov	r1, sl
 801335a:	e7dc      	b.n	8013316 <__lshift+0x52>
 801335c:	3904      	subs	r1, #4
 801335e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013362:	f841 2f04 	str.w	r2, [r1, #4]!
 8013366:	459c      	cmp	ip, r3
 8013368:	d8f9      	bhi.n	801335e <__lshift+0x9a>
 801336a:	e7e4      	b.n	8013336 <__lshift+0x72>

0801336c <__mcmp>:
 801336c:	6903      	ldr	r3, [r0, #16]
 801336e:	690a      	ldr	r2, [r1, #16]
 8013370:	1a9b      	subs	r3, r3, r2
 8013372:	b530      	push	{r4, r5, lr}
 8013374:	d10c      	bne.n	8013390 <__mcmp+0x24>
 8013376:	0092      	lsls	r2, r2, #2
 8013378:	3014      	adds	r0, #20
 801337a:	3114      	adds	r1, #20
 801337c:	1884      	adds	r4, r0, r2
 801337e:	4411      	add	r1, r2
 8013380:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013388:	4295      	cmp	r5, r2
 801338a:	d003      	beq.n	8013394 <__mcmp+0x28>
 801338c:	d305      	bcc.n	801339a <__mcmp+0x2e>
 801338e:	2301      	movs	r3, #1
 8013390:	4618      	mov	r0, r3
 8013392:	bd30      	pop	{r4, r5, pc}
 8013394:	42a0      	cmp	r0, r4
 8013396:	d3f3      	bcc.n	8013380 <__mcmp+0x14>
 8013398:	e7fa      	b.n	8013390 <__mcmp+0x24>
 801339a:	f04f 33ff 	mov.w	r3, #4294967295
 801339e:	e7f7      	b.n	8013390 <__mcmp+0x24>

080133a0 <__mdiff>:
 80133a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133a4:	460d      	mov	r5, r1
 80133a6:	4607      	mov	r7, r0
 80133a8:	4611      	mov	r1, r2
 80133aa:	4628      	mov	r0, r5
 80133ac:	4614      	mov	r4, r2
 80133ae:	f7ff ffdd 	bl	801336c <__mcmp>
 80133b2:	1e06      	subs	r6, r0, #0
 80133b4:	d108      	bne.n	80133c8 <__mdiff+0x28>
 80133b6:	4631      	mov	r1, r6
 80133b8:	4638      	mov	r0, r7
 80133ba:	f7ff fdc1 	bl	8012f40 <_Balloc>
 80133be:	2301      	movs	r3, #1
 80133c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80133c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133c8:	bfa4      	itt	ge
 80133ca:	4623      	movge	r3, r4
 80133cc:	462c      	movge	r4, r5
 80133ce:	4638      	mov	r0, r7
 80133d0:	6861      	ldr	r1, [r4, #4]
 80133d2:	bfa6      	itte	ge
 80133d4:	461d      	movge	r5, r3
 80133d6:	2600      	movge	r6, #0
 80133d8:	2601      	movlt	r6, #1
 80133da:	f7ff fdb1 	bl	8012f40 <_Balloc>
 80133de:	692b      	ldr	r3, [r5, #16]
 80133e0:	60c6      	str	r6, [r0, #12]
 80133e2:	6926      	ldr	r6, [r4, #16]
 80133e4:	f105 0914 	add.w	r9, r5, #20
 80133e8:	f104 0214 	add.w	r2, r4, #20
 80133ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80133f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80133f4:	f100 0514 	add.w	r5, r0, #20
 80133f8:	f04f 0e00 	mov.w	lr, #0
 80133fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8013400:	f859 4b04 	ldr.w	r4, [r9], #4
 8013404:	fa1e f18a 	uxtah	r1, lr, sl
 8013408:	b2a3      	uxth	r3, r4
 801340a:	1ac9      	subs	r1, r1, r3
 801340c:	0c23      	lsrs	r3, r4, #16
 801340e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013412:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013416:	b289      	uxth	r1, r1
 8013418:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801341c:	45c8      	cmp	r8, r9
 801341e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013422:	4694      	mov	ip, r2
 8013424:	f845 3b04 	str.w	r3, [r5], #4
 8013428:	d8e8      	bhi.n	80133fc <__mdiff+0x5c>
 801342a:	45bc      	cmp	ip, r7
 801342c:	d304      	bcc.n	8013438 <__mdiff+0x98>
 801342e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013432:	b183      	cbz	r3, 8013456 <__mdiff+0xb6>
 8013434:	6106      	str	r6, [r0, #16]
 8013436:	e7c5      	b.n	80133c4 <__mdiff+0x24>
 8013438:	f85c 1b04 	ldr.w	r1, [ip], #4
 801343c:	fa1e f381 	uxtah	r3, lr, r1
 8013440:	141a      	asrs	r2, r3, #16
 8013442:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013446:	b29b      	uxth	r3, r3
 8013448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801344c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013450:	f845 3b04 	str.w	r3, [r5], #4
 8013454:	e7e9      	b.n	801342a <__mdiff+0x8a>
 8013456:	3e01      	subs	r6, #1
 8013458:	e7e9      	b.n	801342e <__mdiff+0x8e>

0801345a <__d2b>:
 801345a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801345e:	460e      	mov	r6, r1
 8013460:	2101      	movs	r1, #1
 8013462:	ec59 8b10 	vmov	r8, r9, d0
 8013466:	4615      	mov	r5, r2
 8013468:	f7ff fd6a 	bl	8012f40 <_Balloc>
 801346c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013470:	4607      	mov	r7, r0
 8013472:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013476:	bb34      	cbnz	r4, 80134c6 <__d2b+0x6c>
 8013478:	9301      	str	r3, [sp, #4]
 801347a:	f1b8 0300 	subs.w	r3, r8, #0
 801347e:	d027      	beq.n	80134d0 <__d2b+0x76>
 8013480:	a802      	add	r0, sp, #8
 8013482:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013486:	f7ff fe00 	bl	801308a <__lo0bits>
 801348a:	9900      	ldr	r1, [sp, #0]
 801348c:	b1f0      	cbz	r0, 80134cc <__d2b+0x72>
 801348e:	9a01      	ldr	r2, [sp, #4]
 8013490:	f1c0 0320 	rsb	r3, r0, #32
 8013494:	fa02 f303 	lsl.w	r3, r2, r3
 8013498:	430b      	orrs	r3, r1
 801349a:	40c2      	lsrs	r2, r0
 801349c:	617b      	str	r3, [r7, #20]
 801349e:	9201      	str	r2, [sp, #4]
 80134a0:	9b01      	ldr	r3, [sp, #4]
 80134a2:	61bb      	str	r3, [r7, #24]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	bf14      	ite	ne
 80134a8:	2102      	movne	r1, #2
 80134aa:	2101      	moveq	r1, #1
 80134ac:	6139      	str	r1, [r7, #16]
 80134ae:	b1c4      	cbz	r4, 80134e2 <__d2b+0x88>
 80134b0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80134b4:	4404      	add	r4, r0
 80134b6:	6034      	str	r4, [r6, #0]
 80134b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80134bc:	6028      	str	r0, [r5, #0]
 80134be:	4638      	mov	r0, r7
 80134c0:	b003      	add	sp, #12
 80134c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80134ca:	e7d5      	b.n	8013478 <__d2b+0x1e>
 80134cc:	6179      	str	r1, [r7, #20]
 80134ce:	e7e7      	b.n	80134a0 <__d2b+0x46>
 80134d0:	a801      	add	r0, sp, #4
 80134d2:	f7ff fdda 	bl	801308a <__lo0bits>
 80134d6:	9b01      	ldr	r3, [sp, #4]
 80134d8:	617b      	str	r3, [r7, #20]
 80134da:	2101      	movs	r1, #1
 80134dc:	6139      	str	r1, [r7, #16]
 80134de:	3020      	adds	r0, #32
 80134e0:	e7e5      	b.n	80134ae <__d2b+0x54>
 80134e2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80134e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80134ea:	6030      	str	r0, [r6, #0]
 80134ec:	6918      	ldr	r0, [r3, #16]
 80134ee:	f7ff fdad 	bl	801304c <__hi0bits>
 80134f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80134f6:	e7e1      	b.n	80134bc <__d2b+0x62>

080134f8 <_calloc_r>:
 80134f8:	b538      	push	{r3, r4, r5, lr}
 80134fa:	fb02 f401 	mul.w	r4, r2, r1
 80134fe:	4621      	mov	r1, r4
 8013500:	f7fe f9a4 	bl	801184c <_malloc_r>
 8013504:	4605      	mov	r5, r0
 8013506:	b118      	cbz	r0, 8013510 <_calloc_r+0x18>
 8013508:	4622      	mov	r2, r4
 801350a:	2100      	movs	r1, #0
 801350c:	f7fe f995 	bl	801183a <memset>
 8013510:	4628      	mov	r0, r5
 8013512:	bd38      	pop	{r3, r4, r5, pc}

08013514 <_free_r>:
 8013514:	b538      	push	{r3, r4, r5, lr}
 8013516:	4605      	mov	r5, r0
 8013518:	2900      	cmp	r1, #0
 801351a:	d045      	beq.n	80135a8 <_free_r+0x94>
 801351c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013520:	1f0c      	subs	r4, r1, #4
 8013522:	2b00      	cmp	r3, #0
 8013524:	bfb8      	it	lt
 8013526:	18e4      	addlt	r4, r4, r3
 8013528:	f7ff fd08 	bl	8012f3c <__malloc_lock>
 801352c:	4a1f      	ldr	r2, [pc, #124]	; (80135ac <_free_r+0x98>)
 801352e:	6813      	ldr	r3, [r2, #0]
 8013530:	4610      	mov	r0, r2
 8013532:	b933      	cbnz	r3, 8013542 <_free_r+0x2e>
 8013534:	6063      	str	r3, [r4, #4]
 8013536:	6014      	str	r4, [r2, #0]
 8013538:	4628      	mov	r0, r5
 801353a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801353e:	f7ff bcfe 	b.w	8012f3e <__malloc_unlock>
 8013542:	42a3      	cmp	r3, r4
 8013544:	d90c      	bls.n	8013560 <_free_r+0x4c>
 8013546:	6821      	ldr	r1, [r4, #0]
 8013548:	1862      	adds	r2, r4, r1
 801354a:	4293      	cmp	r3, r2
 801354c:	bf04      	itt	eq
 801354e:	681a      	ldreq	r2, [r3, #0]
 8013550:	685b      	ldreq	r3, [r3, #4]
 8013552:	6063      	str	r3, [r4, #4]
 8013554:	bf04      	itt	eq
 8013556:	1852      	addeq	r2, r2, r1
 8013558:	6022      	streq	r2, [r4, #0]
 801355a:	6004      	str	r4, [r0, #0]
 801355c:	e7ec      	b.n	8013538 <_free_r+0x24>
 801355e:	4613      	mov	r3, r2
 8013560:	685a      	ldr	r2, [r3, #4]
 8013562:	b10a      	cbz	r2, 8013568 <_free_r+0x54>
 8013564:	42a2      	cmp	r2, r4
 8013566:	d9fa      	bls.n	801355e <_free_r+0x4a>
 8013568:	6819      	ldr	r1, [r3, #0]
 801356a:	1858      	adds	r0, r3, r1
 801356c:	42a0      	cmp	r0, r4
 801356e:	d10b      	bne.n	8013588 <_free_r+0x74>
 8013570:	6820      	ldr	r0, [r4, #0]
 8013572:	4401      	add	r1, r0
 8013574:	1858      	adds	r0, r3, r1
 8013576:	4282      	cmp	r2, r0
 8013578:	6019      	str	r1, [r3, #0]
 801357a:	d1dd      	bne.n	8013538 <_free_r+0x24>
 801357c:	6810      	ldr	r0, [r2, #0]
 801357e:	6852      	ldr	r2, [r2, #4]
 8013580:	605a      	str	r2, [r3, #4]
 8013582:	4401      	add	r1, r0
 8013584:	6019      	str	r1, [r3, #0]
 8013586:	e7d7      	b.n	8013538 <_free_r+0x24>
 8013588:	d902      	bls.n	8013590 <_free_r+0x7c>
 801358a:	230c      	movs	r3, #12
 801358c:	602b      	str	r3, [r5, #0]
 801358e:	e7d3      	b.n	8013538 <_free_r+0x24>
 8013590:	6820      	ldr	r0, [r4, #0]
 8013592:	1821      	adds	r1, r4, r0
 8013594:	428a      	cmp	r2, r1
 8013596:	bf04      	itt	eq
 8013598:	6811      	ldreq	r1, [r2, #0]
 801359a:	6852      	ldreq	r2, [r2, #4]
 801359c:	6062      	str	r2, [r4, #4]
 801359e:	bf04      	itt	eq
 80135a0:	1809      	addeq	r1, r1, r0
 80135a2:	6021      	streq	r1, [r4, #0]
 80135a4:	605c      	str	r4, [r3, #4]
 80135a6:	e7c7      	b.n	8013538 <_free_r+0x24>
 80135a8:	bd38      	pop	{r3, r4, r5, pc}
 80135aa:	bf00      	nop
 80135ac:	20025b30 	.word	0x20025b30

080135b0 <__ssputs_r>:
 80135b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135b4:	688e      	ldr	r6, [r1, #8]
 80135b6:	429e      	cmp	r6, r3
 80135b8:	4682      	mov	sl, r0
 80135ba:	460c      	mov	r4, r1
 80135bc:	4690      	mov	r8, r2
 80135be:	4699      	mov	r9, r3
 80135c0:	d837      	bhi.n	8013632 <__ssputs_r+0x82>
 80135c2:	898a      	ldrh	r2, [r1, #12]
 80135c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80135c8:	d031      	beq.n	801362e <__ssputs_r+0x7e>
 80135ca:	6825      	ldr	r5, [r4, #0]
 80135cc:	6909      	ldr	r1, [r1, #16]
 80135ce:	1a6f      	subs	r7, r5, r1
 80135d0:	6965      	ldr	r5, [r4, #20]
 80135d2:	2302      	movs	r3, #2
 80135d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80135dc:	f109 0301 	add.w	r3, r9, #1
 80135e0:	443b      	add	r3, r7
 80135e2:	429d      	cmp	r5, r3
 80135e4:	bf38      	it	cc
 80135e6:	461d      	movcc	r5, r3
 80135e8:	0553      	lsls	r3, r2, #21
 80135ea:	d530      	bpl.n	801364e <__ssputs_r+0x9e>
 80135ec:	4629      	mov	r1, r5
 80135ee:	f7fe f92d 	bl	801184c <_malloc_r>
 80135f2:	4606      	mov	r6, r0
 80135f4:	b950      	cbnz	r0, 801360c <__ssputs_r+0x5c>
 80135f6:	230c      	movs	r3, #12
 80135f8:	f8ca 3000 	str.w	r3, [sl]
 80135fc:	89a3      	ldrh	r3, [r4, #12]
 80135fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013602:	81a3      	strh	r3, [r4, #12]
 8013604:	f04f 30ff 	mov.w	r0, #4294967295
 8013608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801360c:	463a      	mov	r2, r7
 801360e:	6921      	ldr	r1, [r4, #16]
 8013610:	f7fe f8ef 	bl	80117f2 <memcpy>
 8013614:	89a3      	ldrh	r3, [r4, #12]
 8013616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801361a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801361e:	81a3      	strh	r3, [r4, #12]
 8013620:	6126      	str	r6, [r4, #16]
 8013622:	6165      	str	r5, [r4, #20]
 8013624:	443e      	add	r6, r7
 8013626:	1bed      	subs	r5, r5, r7
 8013628:	6026      	str	r6, [r4, #0]
 801362a:	60a5      	str	r5, [r4, #8]
 801362c:	464e      	mov	r6, r9
 801362e:	454e      	cmp	r6, r9
 8013630:	d900      	bls.n	8013634 <__ssputs_r+0x84>
 8013632:	464e      	mov	r6, r9
 8013634:	4632      	mov	r2, r6
 8013636:	4641      	mov	r1, r8
 8013638:	6820      	ldr	r0, [r4, #0]
 801363a:	f7fe f8e5 	bl	8011808 <memmove>
 801363e:	68a3      	ldr	r3, [r4, #8]
 8013640:	1b9b      	subs	r3, r3, r6
 8013642:	60a3      	str	r3, [r4, #8]
 8013644:	6823      	ldr	r3, [r4, #0]
 8013646:	441e      	add	r6, r3
 8013648:	6026      	str	r6, [r4, #0]
 801364a:	2000      	movs	r0, #0
 801364c:	e7dc      	b.n	8013608 <__ssputs_r+0x58>
 801364e:	462a      	mov	r2, r5
 8013650:	f000 f90d 	bl	801386e <_realloc_r>
 8013654:	4606      	mov	r6, r0
 8013656:	2800      	cmp	r0, #0
 8013658:	d1e2      	bne.n	8013620 <__ssputs_r+0x70>
 801365a:	6921      	ldr	r1, [r4, #16]
 801365c:	4650      	mov	r0, sl
 801365e:	f7ff ff59 	bl	8013514 <_free_r>
 8013662:	e7c8      	b.n	80135f6 <__ssputs_r+0x46>

08013664 <_svfiprintf_r>:
 8013664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013668:	461d      	mov	r5, r3
 801366a:	898b      	ldrh	r3, [r1, #12]
 801366c:	061f      	lsls	r7, r3, #24
 801366e:	b09d      	sub	sp, #116	; 0x74
 8013670:	4680      	mov	r8, r0
 8013672:	460c      	mov	r4, r1
 8013674:	4616      	mov	r6, r2
 8013676:	d50f      	bpl.n	8013698 <_svfiprintf_r+0x34>
 8013678:	690b      	ldr	r3, [r1, #16]
 801367a:	b96b      	cbnz	r3, 8013698 <_svfiprintf_r+0x34>
 801367c:	2140      	movs	r1, #64	; 0x40
 801367e:	f7fe f8e5 	bl	801184c <_malloc_r>
 8013682:	6020      	str	r0, [r4, #0]
 8013684:	6120      	str	r0, [r4, #16]
 8013686:	b928      	cbnz	r0, 8013694 <_svfiprintf_r+0x30>
 8013688:	230c      	movs	r3, #12
 801368a:	f8c8 3000 	str.w	r3, [r8]
 801368e:	f04f 30ff 	mov.w	r0, #4294967295
 8013692:	e0c8      	b.n	8013826 <_svfiprintf_r+0x1c2>
 8013694:	2340      	movs	r3, #64	; 0x40
 8013696:	6163      	str	r3, [r4, #20]
 8013698:	2300      	movs	r3, #0
 801369a:	9309      	str	r3, [sp, #36]	; 0x24
 801369c:	2320      	movs	r3, #32
 801369e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136a2:	2330      	movs	r3, #48	; 0x30
 80136a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136a8:	9503      	str	r5, [sp, #12]
 80136aa:	f04f 0b01 	mov.w	fp, #1
 80136ae:	4637      	mov	r7, r6
 80136b0:	463d      	mov	r5, r7
 80136b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80136b6:	b10b      	cbz	r3, 80136bc <_svfiprintf_r+0x58>
 80136b8:	2b25      	cmp	r3, #37	; 0x25
 80136ba:	d13e      	bne.n	801373a <_svfiprintf_r+0xd6>
 80136bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80136c0:	d00b      	beq.n	80136da <_svfiprintf_r+0x76>
 80136c2:	4653      	mov	r3, sl
 80136c4:	4632      	mov	r2, r6
 80136c6:	4621      	mov	r1, r4
 80136c8:	4640      	mov	r0, r8
 80136ca:	f7ff ff71 	bl	80135b0 <__ssputs_r>
 80136ce:	3001      	adds	r0, #1
 80136d0:	f000 80a4 	beq.w	801381c <_svfiprintf_r+0x1b8>
 80136d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136d6:	4453      	add	r3, sl
 80136d8:	9309      	str	r3, [sp, #36]	; 0x24
 80136da:	783b      	ldrb	r3, [r7, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	f000 809d 	beq.w	801381c <_svfiprintf_r+0x1b8>
 80136e2:	2300      	movs	r3, #0
 80136e4:	f04f 32ff 	mov.w	r2, #4294967295
 80136e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136ec:	9304      	str	r3, [sp, #16]
 80136ee:	9307      	str	r3, [sp, #28]
 80136f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136f4:	931a      	str	r3, [sp, #104]	; 0x68
 80136f6:	462f      	mov	r7, r5
 80136f8:	2205      	movs	r2, #5
 80136fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80136fe:	4850      	ldr	r0, [pc, #320]	; (8013840 <_svfiprintf_r+0x1dc>)
 8013700:	f7ec fdb6 	bl	8000270 <memchr>
 8013704:	9b04      	ldr	r3, [sp, #16]
 8013706:	b9d0      	cbnz	r0, 801373e <_svfiprintf_r+0xda>
 8013708:	06d9      	lsls	r1, r3, #27
 801370a:	bf44      	itt	mi
 801370c:	2220      	movmi	r2, #32
 801370e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013712:	071a      	lsls	r2, r3, #28
 8013714:	bf44      	itt	mi
 8013716:	222b      	movmi	r2, #43	; 0x2b
 8013718:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801371c:	782a      	ldrb	r2, [r5, #0]
 801371e:	2a2a      	cmp	r2, #42	; 0x2a
 8013720:	d015      	beq.n	801374e <_svfiprintf_r+0xea>
 8013722:	9a07      	ldr	r2, [sp, #28]
 8013724:	462f      	mov	r7, r5
 8013726:	2000      	movs	r0, #0
 8013728:	250a      	movs	r5, #10
 801372a:	4639      	mov	r1, r7
 801372c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013730:	3b30      	subs	r3, #48	; 0x30
 8013732:	2b09      	cmp	r3, #9
 8013734:	d94d      	bls.n	80137d2 <_svfiprintf_r+0x16e>
 8013736:	b1b8      	cbz	r0, 8013768 <_svfiprintf_r+0x104>
 8013738:	e00f      	b.n	801375a <_svfiprintf_r+0xf6>
 801373a:	462f      	mov	r7, r5
 801373c:	e7b8      	b.n	80136b0 <_svfiprintf_r+0x4c>
 801373e:	4a40      	ldr	r2, [pc, #256]	; (8013840 <_svfiprintf_r+0x1dc>)
 8013740:	1a80      	subs	r0, r0, r2
 8013742:	fa0b f000 	lsl.w	r0, fp, r0
 8013746:	4318      	orrs	r0, r3
 8013748:	9004      	str	r0, [sp, #16]
 801374a:	463d      	mov	r5, r7
 801374c:	e7d3      	b.n	80136f6 <_svfiprintf_r+0x92>
 801374e:	9a03      	ldr	r2, [sp, #12]
 8013750:	1d11      	adds	r1, r2, #4
 8013752:	6812      	ldr	r2, [r2, #0]
 8013754:	9103      	str	r1, [sp, #12]
 8013756:	2a00      	cmp	r2, #0
 8013758:	db01      	blt.n	801375e <_svfiprintf_r+0xfa>
 801375a:	9207      	str	r2, [sp, #28]
 801375c:	e004      	b.n	8013768 <_svfiprintf_r+0x104>
 801375e:	4252      	negs	r2, r2
 8013760:	f043 0302 	orr.w	r3, r3, #2
 8013764:	9207      	str	r2, [sp, #28]
 8013766:	9304      	str	r3, [sp, #16]
 8013768:	783b      	ldrb	r3, [r7, #0]
 801376a:	2b2e      	cmp	r3, #46	; 0x2e
 801376c:	d10c      	bne.n	8013788 <_svfiprintf_r+0x124>
 801376e:	787b      	ldrb	r3, [r7, #1]
 8013770:	2b2a      	cmp	r3, #42	; 0x2a
 8013772:	d133      	bne.n	80137dc <_svfiprintf_r+0x178>
 8013774:	9b03      	ldr	r3, [sp, #12]
 8013776:	1d1a      	adds	r2, r3, #4
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	9203      	str	r2, [sp, #12]
 801377c:	2b00      	cmp	r3, #0
 801377e:	bfb8      	it	lt
 8013780:	f04f 33ff 	movlt.w	r3, #4294967295
 8013784:	3702      	adds	r7, #2
 8013786:	9305      	str	r3, [sp, #20]
 8013788:	4d2e      	ldr	r5, [pc, #184]	; (8013844 <_svfiprintf_r+0x1e0>)
 801378a:	7839      	ldrb	r1, [r7, #0]
 801378c:	2203      	movs	r2, #3
 801378e:	4628      	mov	r0, r5
 8013790:	f7ec fd6e 	bl	8000270 <memchr>
 8013794:	b138      	cbz	r0, 80137a6 <_svfiprintf_r+0x142>
 8013796:	2340      	movs	r3, #64	; 0x40
 8013798:	1b40      	subs	r0, r0, r5
 801379a:	fa03 f000 	lsl.w	r0, r3, r0
 801379e:	9b04      	ldr	r3, [sp, #16]
 80137a0:	4303      	orrs	r3, r0
 80137a2:	3701      	adds	r7, #1
 80137a4:	9304      	str	r3, [sp, #16]
 80137a6:	7839      	ldrb	r1, [r7, #0]
 80137a8:	4827      	ldr	r0, [pc, #156]	; (8013848 <_svfiprintf_r+0x1e4>)
 80137aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137ae:	2206      	movs	r2, #6
 80137b0:	1c7e      	adds	r6, r7, #1
 80137b2:	f7ec fd5d 	bl	8000270 <memchr>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d038      	beq.n	801382c <_svfiprintf_r+0x1c8>
 80137ba:	4b24      	ldr	r3, [pc, #144]	; (801384c <_svfiprintf_r+0x1e8>)
 80137bc:	bb13      	cbnz	r3, 8013804 <_svfiprintf_r+0x1a0>
 80137be:	9b03      	ldr	r3, [sp, #12]
 80137c0:	3307      	adds	r3, #7
 80137c2:	f023 0307 	bic.w	r3, r3, #7
 80137c6:	3308      	adds	r3, #8
 80137c8:	9303      	str	r3, [sp, #12]
 80137ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137cc:	444b      	add	r3, r9
 80137ce:	9309      	str	r3, [sp, #36]	; 0x24
 80137d0:	e76d      	b.n	80136ae <_svfiprintf_r+0x4a>
 80137d2:	fb05 3202 	mla	r2, r5, r2, r3
 80137d6:	2001      	movs	r0, #1
 80137d8:	460f      	mov	r7, r1
 80137da:	e7a6      	b.n	801372a <_svfiprintf_r+0xc6>
 80137dc:	2300      	movs	r3, #0
 80137de:	3701      	adds	r7, #1
 80137e0:	9305      	str	r3, [sp, #20]
 80137e2:	4619      	mov	r1, r3
 80137e4:	250a      	movs	r5, #10
 80137e6:	4638      	mov	r0, r7
 80137e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137ec:	3a30      	subs	r2, #48	; 0x30
 80137ee:	2a09      	cmp	r2, #9
 80137f0:	d903      	bls.n	80137fa <_svfiprintf_r+0x196>
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d0c8      	beq.n	8013788 <_svfiprintf_r+0x124>
 80137f6:	9105      	str	r1, [sp, #20]
 80137f8:	e7c6      	b.n	8013788 <_svfiprintf_r+0x124>
 80137fa:	fb05 2101 	mla	r1, r5, r1, r2
 80137fe:	2301      	movs	r3, #1
 8013800:	4607      	mov	r7, r0
 8013802:	e7f0      	b.n	80137e6 <_svfiprintf_r+0x182>
 8013804:	ab03      	add	r3, sp, #12
 8013806:	9300      	str	r3, [sp, #0]
 8013808:	4622      	mov	r2, r4
 801380a:	4b11      	ldr	r3, [pc, #68]	; (8013850 <_svfiprintf_r+0x1ec>)
 801380c:	a904      	add	r1, sp, #16
 801380e:	4640      	mov	r0, r8
 8013810:	f7fe f8fe 	bl	8011a10 <_printf_float>
 8013814:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013818:	4681      	mov	r9, r0
 801381a:	d1d6      	bne.n	80137ca <_svfiprintf_r+0x166>
 801381c:	89a3      	ldrh	r3, [r4, #12]
 801381e:	065b      	lsls	r3, r3, #25
 8013820:	f53f af35 	bmi.w	801368e <_svfiprintf_r+0x2a>
 8013824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013826:	b01d      	add	sp, #116	; 0x74
 8013828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382c:	ab03      	add	r3, sp, #12
 801382e:	9300      	str	r3, [sp, #0]
 8013830:	4622      	mov	r2, r4
 8013832:	4b07      	ldr	r3, [pc, #28]	; (8013850 <_svfiprintf_r+0x1ec>)
 8013834:	a904      	add	r1, sp, #16
 8013836:	4640      	mov	r0, r8
 8013838:	f7fe fb8c 	bl	8011f54 <_printf_i>
 801383c:	e7ea      	b.n	8013814 <_svfiprintf_r+0x1b0>
 801383e:	bf00      	nop
 8013840:	0801569c 	.word	0x0801569c
 8013844:	080156a2 	.word	0x080156a2
 8013848:	080156a6 	.word	0x080156a6
 801384c:	08011a11 	.word	0x08011a11
 8013850:	080135b1 	.word	0x080135b1

08013854 <__ascii_wctomb>:
 8013854:	b149      	cbz	r1, 801386a <__ascii_wctomb+0x16>
 8013856:	2aff      	cmp	r2, #255	; 0xff
 8013858:	bf85      	ittet	hi
 801385a:	238a      	movhi	r3, #138	; 0x8a
 801385c:	6003      	strhi	r3, [r0, #0]
 801385e:	700a      	strbls	r2, [r1, #0]
 8013860:	f04f 30ff 	movhi.w	r0, #4294967295
 8013864:	bf98      	it	ls
 8013866:	2001      	movls	r0, #1
 8013868:	4770      	bx	lr
 801386a:	4608      	mov	r0, r1
 801386c:	4770      	bx	lr

0801386e <_realloc_r>:
 801386e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013870:	4607      	mov	r7, r0
 8013872:	4614      	mov	r4, r2
 8013874:	460e      	mov	r6, r1
 8013876:	b921      	cbnz	r1, 8013882 <_realloc_r+0x14>
 8013878:	4611      	mov	r1, r2
 801387a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801387e:	f7fd bfe5 	b.w	801184c <_malloc_r>
 8013882:	b922      	cbnz	r2, 801388e <_realloc_r+0x20>
 8013884:	f7ff fe46 	bl	8013514 <_free_r>
 8013888:	4625      	mov	r5, r4
 801388a:	4628      	mov	r0, r5
 801388c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801388e:	f000 f814 	bl	80138ba <_malloc_usable_size_r>
 8013892:	42a0      	cmp	r0, r4
 8013894:	d20f      	bcs.n	80138b6 <_realloc_r+0x48>
 8013896:	4621      	mov	r1, r4
 8013898:	4638      	mov	r0, r7
 801389a:	f7fd ffd7 	bl	801184c <_malloc_r>
 801389e:	4605      	mov	r5, r0
 80138a0:	2800      	cmp	r0, #0
 80138a2:	d0f2      	beq.n	801388a <_realloc_r+0x1c>
 80138a4:	4631      	mov	r1, r6
 80138a6:	4622      	mov	r2, r4
 80138a8:	f7fd ffa3 	bl	80117f2 <memcpy>
 80138ac:	4631      	mov	r1, r6
 80138ae:	4638      	mov	r0, r7
 80138b0:	f7ff fe30 	bl	8013514 <_free_r>
 80138b4:	e7e9      	b.n	801388a <_realloc_r+0x1c>
 80138b6:	4635      	mov	r5, r6
 80138b8:	e7e7      	b.n	801388a <_realloc_r+0x1c>

080138ba <_malloc_usable_size_r>:
 80138ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138be:	1f18      	subs	r0, r3, #4
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	bfbc      	itt	lt
 80138c4:	580b      	ldrlt	r3, [r1, r0]
 80138c6:	18c0      	addlt	r0, r0, r3
 80138c8:	4770      	bx	lr
	...

080138cc <_init>:
 80138cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ce:	bf00      	nop
 80138d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138d2:	bc08      	pop	{r3}
 80138d4:	469e      	mov	lr, r3
 80138d6:	4770      	bx	lr

080138d8 <_fini>:
 80138d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138da:	bf00      	nop
 80138dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138de:	bc08      	pop	{r3}
 80138e0:	469e      	mov	lr, r3
 80138e2:	4770      	bx	lr
