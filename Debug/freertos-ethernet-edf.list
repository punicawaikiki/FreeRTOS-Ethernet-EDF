
freertos-ethernet-edf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014db4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000153fc  08014fb8  08014fb8  00024fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a3b4  0802a3b4  00056b08  2**0
                  CONTENTS
  4 .ARM          00000008  0802a3b4  0802a3b4  0003a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a3bc  0802a3bc  00056b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a3bc  0802a3bc  0003a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a3c0  0802a3c0  0003a3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00016b08  20000000  0802a3c4  00040000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001066c  20016b08  08040ecc  00056b08  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20027174  08040ecc  00057174  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00056b08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034eb1  00000000  00000000  00056b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006afd  00000000  00000000  0008b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002108  00000000  00000000  000924e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f10  00000000  00000000  000945f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037b73  00000000  00000000  00096500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022e05  00000000  00000000  000ce073  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001351a5  00000000  00000000  000f0e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  0022601d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090c8  00000000  00000000  00226108  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000392e  00000000  00000000  0022f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20016b08 	.word	0x20016b08
 800021c:	00000000 	.word	0x00000000
 8000220:	08014f9c 	.word	0x08014f9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20016b0c 	.word	0x20016b0c
 800023c:	08014f9c 	.word	0x08014f9c

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <strcmp>:
 8000300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000308:	2a01      	cmp	r2, #1
 800030a:	bf28      	it	cs
 800030c:	429a      	cmpcs	r2, r3
 800030e:	d0f7      	beq.n	8000300 <strcmp>
 8000310:	1ad0      	subs	r0, r2, r3
 8000312:	4770      	bx	lr

08000314 <strlen>:
 8000314:	4603      	mov	r3, r0
 8000316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800031a:	2a00      	cmp	r2, #0
 800031c:	d1fb      	bne.n	8000316 <strlen+0x2>
 800031e:	1a18      	subs	r0, r3, r0
 8000320:	3801      	subs	r0, #1
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_uldivmod>:
 80003d0:	b953      	cbnz	r3, 80003e8 <__aeabi_uldivmod+0x18>
 80003d2:	b94a      	cbnz	r2, 80003e8 <__aeabi_uldivmod+0x18>
 80003d4:	2900      	cmp	r1, #0
 80003d6:	bf08      	it	eq
 80003d8:	2800      	cmpeq	r0, #0
 80003da:	bf1c      	itt	ne
 80003dc:	f04f 31ff 	movne.w	r1, #4294967295
 80003e0:	f04f 30ff 	movne.w	r0, #4294967295
 80003e4:	f000 b972 	b.w	80006cc <__aeabi_idiv0>
 80003e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f0:	f000 f806 	bl	8000400 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4770      	bx	lr

08000400 <__udivmoddi4>:
 8000400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000404:	9e08      	ldr	r6, [sp, #32]
 8000406:	4604      	mov	r4, r0
 8000408:	4688      	mov	r8, r1
 800040a:	2b00      	cmp	r3, #0
 800040c:	d14b      	bne.n	80004a6 <__udivmoddi4+0xa6>
 800040e:	428a      	cmp	r2, r1
 8000410:	4615      	mov	r5, r2
 8000412:	d967      	bls.n	80004e4 <__udivmoddi4+0xe4>
 8000414:	fab2 f282 	clz	r2, r2
 8000418:	b14a      	cbz	r2, 800042e <__udivmoddi4+0x2e>
 800041a:	f1c2 0720 	rsb	r7, r2, #32
 800041e:	fa01 f302 	lsl.w	r3, r1, r2
 8000422:	fa20 f707 	lsr.w	r7, r0, r7
 8000426:	4095      	lsls	r5, r2
 8000428:	ea47 0803 	orr.w	r8, r7, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	0c23      	lsrs	r3, r4, #16
 8000434:	fbb8 f7fe 	udiv	r7, r8, lr
 8000438:	fa1f fc85 	uxth.w	ip, r5
 800043c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000440:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000444:	fb07 f10c 	mul.w	r1, r7, ip
 8000448:	4299      	cmp	r1, r3
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x60>
 800044c:	18eb      	adds	r3, r5, r3
 800044e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000452:	f080 811b 	bcs.w	800068c <__udivmoddi4+0x28c>
 8000456:	4299      	cmp	r1, r3
 8000458:	f240 8118 	bls.w	800068c <__udivmoddi4+0x28c>
 800045c:	3f02      	subs	r7, #2
 800045e:	442b      	add	r3, r5
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb3 f0fe 	udiv	r0, r3, lr
 8000468:	fb0e 3310 	mls	r3, lr, r0, r3
 800046c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000470:	fb00 fc0c 	mul.w	ip, r0, ip
 8000474:	45a4      	cmp	ip, r4
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x8c>
 8000478:	192c      	adds	r4, r5, r4
 800047a:	f100 33ff 	add.w	r3, r0, #4294967295
 800047e:	f080 8107 	bcs.w	8000690 <__udivmoddi4+0x290>
 8000482:	45a4      	cmp	ip, r4
 8000484:	f240 8104 	bls.w	8000690 <__udivmoddi4+0x290>
 8000488:	3802      	subs	r0, #2
 800048a:	442c      	add	r4, r5
 800048c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	2700      	movs	r7, #0
 8000496:	b11e      	cbz	r6, 80004a0 <__udivmoddi4+0xa0>
 8000498:	40d4      	lsrs	r4, r2
 800049a:	2300      	movs	r3, #0
 800049c:	e9c6 4300 	strd	r4, r3, [r6]
 80004a0:	4639      	mov	r1, r7
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d909      	bls.n	80004be <__udivmoddi4+0xbe>
 80004aa:	2e00      	cmp	r6, #0
 80004ac:	f000 80eb 	beq.w	8000686 <__udivmoddi4+0x286>
 80004b0:	2700      	movs	r7, #0
 80004b2:	e9c6 0100 	strd	r0, r1, [r6]
 80004b6:	4638      	mov	r0, r7
 80004b8:	4639      	mov	r1, r7
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	fab3 f783 	clz	r7, r3
 80004c2:	2f00      	cmp	r7, #0
 80004c4:	d147      	bne.n	8000556 <__udivmoddi4+0x156>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d302      	bcc.n	80004d0 <__udivmoddi4+0xd0>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	f200 80fa 	bhi.w	80006c4 <__udivmoddi4+0x2c4>
 80004d0:	1a84      	subs	r4, r0, r2
 80004d2:	eb61 0303 	sbc.w	r3, r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	4698      	mov	r8, r3
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d0e0      	beq.n	80004a0 <__udivmoddi4+0xa0>
 80004de:	e9c6 4800 	strd	r4, r8, [r6]
 80004e2:	e7dd      	b.n	80004a0 <__udivmoddi4+0xa0>
 80004e4:	b902      	cbnz	r2, 80004e8 <__udivmoddi4+0xe8>
 80004e6:	deff      	udf	#255	; 0xff
 80004e8:	fab2 f282 	clz	r2, r2
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f040 808f 	bne.w	8000610 <__udivmoddi4+0x210>
 80004f2:	1b49      	subs	r1, r1, r5
 80004f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f8:	fa1f f885 	uxth.w	r8, r5
 80004fc:	2701      	movs	r7, #1
 80004fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000502:	0c23      	lsrs	r3, r4, #16
 8000504:	fb0e 111c 	mls	r1, lr, ip, r1
 8000508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050c:	fb08 f10c 	mul.w	r1, r8, ip
 8000510:	4299      	cmp	r1, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x124>
 8000514:	18eb      	adds	r3, r5, r3
 8000516:	f10c 30ff 	add.w	r0, ip, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x122>
 800051c:	4299      	cmp	r1, r3
 800051e:	f200 80cd 	bhi.w	80006bc <__udivmoddi4+0x2bc>
 8000522:	4684      	mov	ip, r0
 8000524:	1a59      	subs	r1, r3, r1
 8000526:	b2a3      	uxth	r3, r4
 8000528:	fbb1 f0fe 	udiv	r0, r1, lr
 800052c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000530:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000534:	fb08 f800 	mul.w	r8, r8, r0
 8000538:	45a0      	cmp	r8, r4
 800053a:	d907      	bls.n	800054c <__udivmoddi4+0x14c>
 800053c:	192c      	adds	r4, r5, r4
 800053e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000542:	d202      	bcs.n	800054a <__udivmoddi4+0x14a>
 8000544:	45a0      	cmp	r8, r4
 8000546:	f200 80b6 	bhi.w	80006b6 <__udivmoddi4+0x2b6>
 800054a:	4618      	mov	r0, r3
 800054c:	eba4 0408 	sub.w	r4, r4, r8
 8000550:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000554:	e79f      	b.n	8000496 <__udivmoddi4+0x96>
 8000556:	f1c7 0c20 	rsb	ip, r7, #32
 800055a:	40bb      	lsls	r3, r7
 800055c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000560:	ea4e 0e03 	orr.w	lr, lr, r3
 8000564:	fa01 f407 	lsl.w	r4, r1, r7
 8000568:	fa20 f50c 	lsr.w	r5, r0, ip
 800056c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000570:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000574:	4325      	orrs	r5, r4
 8000576:	fbb3 f9f8 	udiv	r9, r3, r8
 800057a:	0c2c      	lsrs	r4, r5, #16
 800057c:	fb08 3319 	mls	r3, r8, r9, r3
 8000580:	fa1f fa8e 	uxth.w	sl, lr
 8000584:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000588:	fb09 f40a 	mul.w	r4, r9, sl
 800058c:	429c      	cmp	r4, r3
 800058e:	fa02 f207 	lsl.w	r2, r2, r7
 8000592:	fa00 f107 	lsl.w	r1, r0, r7
 8000596:	d90b      	bls.n	80005b0 <__udivmoddi4+0x1b0>
 8000598:	eb1e 0303 	adds.w	r3, lr, r3
 800059c:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a0:	f080 8087 	bcs.w	80006b2 <__udivmoddi4+0x2b2>
 80005a4:	429c      	cmp	r4, r3
 80005a6:	f240 8084 	bls.w	80006b2 <__udivmoddi4+0x2b2>
 80005aa:	f1a9 0902 	sub.w	r9, r9, #2
 80005ae:	4473      	add	r3, lr
 80005b0:	1b1b      	subs	r3, r3, r4
 80005b2:	b2ad      	uxth	r5, r5
 80005b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005b8:	fb08 3310 	mls	r3, r8, r0, r3
 80005bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005c4:	45a2      	cmp	sl, r4
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x1da>
 80005c8:	eb1e 0404 	adds.w	r4, lr, r4
 80005cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80005d0:	d26b      	bcs.n	80006aa <__udivmoddi4+0x2aa>
 80005d2:	45a2      	cmp	sl, r4
 80005d4:	d969      	bls.n	80006aa <__udivmoddi4+0x2aa>
 80005d6:	3802      	subs	r0, #2
 80005d8:	4474      	add	r4, lr
 80005da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005de:	fba0 8902 	umull	r8, r9, r0, r2
 80005e2:	eba4 040a 	sub.w	r4, r4, sl
 80005e6:	454c      	cmp	r4, r9
 80005e8:	46c2      	mov	sl, r8
 80005ea:	464b      	mov	r3, r9
 80005ec:	d354      	bcc.n	8000698 <__udivmoddi4+0x298>
 80005ee:	d051      	beq.n	8000694 <__udivmoddi4+0x294>
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d069      	beq.n	80006c8 <__udivmoddi4+0x2c8>
 80005f4:	ebb1 050a 	subs.w	r5, r1, sl
 80005f8:	eb64 0403 	sbc.w	r4, r4, r3
 80005fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000600:	40fd      	lsrs	r5, r7
 8000602:	40fc      	lsrs	r4, r7
 8000604:	ea4c 0505 	orr.w	r5, ip, r5
 8000608:	e9c6 5400 	strd	r5, r4, [r6]
 800060c:	2700      	movs	r7, #0
 800060e:	e747      	b.n	80004a0 <__udivmoddi4+0xa0>
 8000610:	f1c2 0320 	rsb	r3, r2, #32
 8000614:	fa20 f703 	lsr.w	r7, r0, r3
 8000618:	4095      	lsls	r5, r2
 800061a:	fa01 f002 	lsl.w	r0, r1, r2
 800061e:	fa21 f303 	lsr.w	r3, r1, r3
 8000622:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000626:	4338      	orrs	r0, r7
 8000628:	0c01      	lsrs	r1, r0, #16
 800062a:	fbb3 f7fe 	udiv	r7, r3, lr
 800062e:	fa1f f885 	uxth.w	r8, r5
 8000632:	fb0e 3317 	mls	r3, lr, r7, r3
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb07 f308 	mul.w	r3, r7, r8
 800063e:	428b      	cmp	r3, r1
 8000640:	fa04 f402 	lsl.w	r4, r4, r2
 8000644:	d907      	bls.n	8000656 <__udivmoddi4+0x256>
 8000646:	1869      	adds	r1, r5, r1
 8000648:	f107 3cff 	add.w	ip, r7, #4294967295
 800064c:	d22f      	bcs.n	80006ae <__udivmoddi4+0x2ae>
 800064e:	428b      	cmp	r3, r1
 8000650:	d92d      	bls.n	80006ae <__udivmoddi4+0x2ae>
 8000652:	3f02      	subs	r7, #2
 8000654:	4429      	add	r1, r5
 8000656:	1acb      	subs	r3, r1, r3
 8000658:	b281      	uxth	r1, r0
 800065a:	fbb3 f0fe 	udiv	r0, r3, lr
 800065e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000662:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000666:	fb00 f308 	mul.w	r3, r0, r8
 800066a:	428b      	cmp	r3, r1
 800066c:	d907      	bls.n	800067e <__udivmoddi4+0x27e>
 800066e:	1869      	adds	r1, r5, r1
 8000670:	f100 3cff 	add.w	ip, r0, #4294967295
 8000674:	d217      	bcs.n	80006a6 <__udivmoddi4+0x2a6>
 8000676:	428b      	cmp	r3, r1
 8000678:	d915      	bls.n	80006a6 <__udivmoddi4+0x2a6>
 800067a:	3802      	subs	r0, #2
 800067c:	4429      	add	r1, r5
 800067e:	1ac9      	subs	r1, r1, r3
 8000680:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000684:	e73b      	b.n	80004fe <__udivmoddi4+0xfe>
 8000686:	4637      	mov	r7, r6
 8000688:	4630      	mov	r0, r6
 800068a:	e709      	b.n	80004a0 <__udivmoddi4+0xa0>
 800068c:	4607      	mov	r7, r0
 800068e:	e6e7      	b.n	8000460 <__udivmoddi4+0x60>
 8000690:	4618      	mov	r0, r3
 8000692:	e6fb      	b.n	800048c <__udivmoddi4+0x8c>
 8000694:	4541      	cmp	r1, r8
 8000696:	d2ab      	bcs.n	80005f0 <__udivmoddi4+0x1f0>
 8000698:	ebb8 0a02 	subs.w	sl, r8, r2
 800069c:	eb69 020e 	sbc.w	r2, r9, lr
 80006a0:	3801      	subs	r0, #1
 80006a2:	4613      	mov	r3, r2
 80006a4:	e7a4      	b.n	80005f0 <__udivmoddi4+0x1f0>
 80006a6:	4660      	mov	r0, ip
 80006a8:	e7e9      	b.n	800067e <__udivmoddi4+0x27e>
 80006aa:	4618      	mov	r0, r3
 80006ac:	e795      	b.n	80005da <__udivmoddi4+0x1da>
 80006ae:	4667      	mov	r7, ip
 80006b0:	e7d1      	b.n	8000656 <__udivmoddi4+0x256>
 80006b2:	4681      	mov	r9, r0
 80006b4:	e77c      	b.n	80005b0 <__udivmoddi4+0x1b0>
 80006b6:	3802      	subs	r0, #2
 80006b8:	442c      	add	r4, r5
 80006ba:	e747      	b.n	800054c <__udivmoddi4+0x14c>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	442b      	add	r3, r5
 80006c2:	e72f      	b.n	8000524 <__udivmoddi4+0x124>
 80006c4:	4638      	mov	r0, r7
 80006c6:	e708      	b.n	80004da <__udivmoddi4+0xda>
 80006c8:	4637      	mov	r7, r6
 80006ca:	e6e9      	b.n	80004a0 <__udivmoddi4+0xa0>

080006cc <__aeabi_idiv0>:
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <HAL_ETH_MspInit>:
  }

}

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08e      	sub	sp, #56	; 0x38
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a52      	ldr	r2, [pc, #328]	; (8000838 <HAL_ETH_MspInit+0x168>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	f040 809d 	bne.w	800082e <HAL_ETH_MspInit+0x15e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006f4:	4b51      	ldr	r3, [pc, #324]	; (800083c <HAL_ETH_MspInit+0x16c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	4a50      	ldr	r2, [pc, #320]	; (800083c <HAL_ETH_MspInit+0x16c>)
 80006fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000700:	4b4e      	ldr	r3, [pc, #312]	; (800083c <HAL_ETH_MspInit+0x16c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000708:	623b      	str	r3, [r7, #32]
 800070a:	6a3b      	ldr	r3, [r7, #32]
 800070c:	4b4b      	ldr	r3, [pc, #300]	; (800083c <HAL_ETH_MspInit+0x16c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4a4a      	ldr	r2, [pc, #296]	; (800083c <HAL_ETH_MspInit+0x16c>)
 8000712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
 8000718:	4b48      	ldr	r3, [pc, #288]	; (800083c <HAL_ETH_MspInit+0x16c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000720:	61fb      	str	r3, [r7, #28]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	4b45      	ldr	r3, [pc, #276]	; (800083c <HAL_ETH_MspInit+0x16c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a44      	ldr	r2, [pc, #272]	; (800083c <HAL_ETH_MspInit+0x16c>)
 800072a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
 8000730:	4b42      	ldr	r3, [pc, #264]	; (800083c <HAL_ETH_MspInit+0x16c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800073c:	4b3f      	ldr	r3, [pc, #252]	; (800083c <HAL_ETH_MspInit+0x16c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	4a3e      	ldr	r2, [pc, #248]	; (800083c <HAL_ETH_MspInit+0x16c>)
 8000742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
 8000748:	4b3c      	ldr	r3, [pc, #240]	; (800083c <HAL_ETH_MspInit+0x16c>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000754:	4b39      	ldr	r3, [pc, #228]	; (800083c <HAL_ETH_MspInit+0x16c>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	4a38      	ldr	r2, [pc, #224]	; (800083c <HAL_ETH_MspInit+0x16c>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6313      	str	r3, [r2, #48]	; 0x30
 8000760:	4b36      	ldr	r3, [pc, #216]	; (800083c <HAL_ETH_MspInit+0x16c>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <HAL_ETH_MspInit+0x16c>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a32      	ldr	r2, [pc, #200]	; (800083c <HAL_ETH_MspInit+0x16c>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <HAL_ETH_MspInit+0x16c>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8000784:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000796:	230b      	movs	r3, #11
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	4619      	mov	r1, r3
 80007a0:	4827      	ldr	r0, [pc, #156]	; (8000840 <HAL_ETH_MspInit+0x170>)
 80007a2:	f000 ffaf 	bl	8001704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80007a6:	2332      	movs	r3, #50	; 0x32
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b6:	230b      	movs	r3, #11
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4619      	mov	r1, r3
 80007c0:	4820      	ldr	r0, [pc, #128]	; (8000844 <HAL_ETH_MspInit+0x174>)
 80007c2:	f000 ff9f 	bl	8001704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80007c6:	2386      	movs	r3, #134	; 0x86
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007de:	4619      	mov	r1, r3
 80007e0:	4819      	ldr	r0, [pc, #100]	; (8000848 <HAL_ETH_MspInit+0x178>)
 80007e2:	f000 ff8f 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */
    /* PD5 as PXER */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_ETH_MspInit+0x16c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <HAL_ETH_MspInit+0x16c>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_ETH_MspInit+0x16c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007fe:	2320      	movs	r3, #32
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080e:	230b      	movs	r3, #11
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <HAL_ETH_MspInit+0x17c>)
 800081a:	f000 ff73 	bl	8001704 <HAL_GPIO_Init>


  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2107      	movs	r1, #7
 8000822:	203d      	movs	r0, #61	; 0x3d
 8000824:	f000 ff44 	bl	80016b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000828:	203d      	movs	r0, #61	; 0x3d
 800082a:	f000 ff5d 	bl	80016e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800082e:	bf00      	nop
 8000830:	3738      	adds	r7, #56	; 0x38
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40028000 	.word	0x40028000
 800083c:	40023800 	.word	0x40023800
 8000840:	40021800 	.word	0x40021800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020c00 	.word	0x40020c00

08000850 <calculateFFT>:
static float32_t fftOutputData[TOTAL_SAMPLE_SIZE];
static float32_t fftOutputDataMag[FFT_SIZE];

/* Task for receiving data from receivedQueue, calculate fft, calculate magnitude and push results to sendQueue */
void calculateFFT( void *pvParameters )
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	extern QueueHandle_t sendQueue;
	/* Create FFT Instances */
	arm_rfft_fast_instance_f32 S;
	arm_status status;
	/* Initialize the FFT Structures	 */
	status = arm_rfft_fast_init_f32(&S, TOTAL_SAMPLE_SIZE);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000860:	4618      	mov	r0, r3
 8000862:	f011 f9bd 	bl	8011be0 <arm_rfft_fast_init_f32>
 8000866:	4603      	mov	r3, r0
 8000868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ( status != ARM_MATH_SUCCESS )
 800086c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <calculateFFT+0x30>
	{
		HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087a:	481b      	ldr	r0, [pc, #108]	; (80008e8 <calculateFFT+0x98>)
 800087c:	f001 f904 	bl	8001a88 <HAL_GPIO_WritePin>
	}
    for( ;; )
    {
    	/* get number of messages in receivedQueue */
    	UBaseType_t waitingMessages = uxQueueMessagesWaiting(receivedQueue);
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <calculateFFT+0x9c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f004 ff7b 	bl	8005780 <uxQueueMessagesWaiting>
 800088a:	6278      	str	r0, [r7, #36]	; 0x24
    	if (waitingMessages > 0)
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f6      	beq.n	8000880 <calculateFFT+0x30>
    	{
			/* iterate over number of messages in receivedQueue */
			for (int i = 0; i < waitingMessages; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000896:	e022      	b.n	80008de <calculateFFT+0x8e>
			{
				/* get one message from receivedQueue */
				if (xQueueReceive( receivedQueue,
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <calculateFFT+0x9c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	4913      	ldr	r1, [pc, #76]	; (80008f0 <calculateFFT+0xa0>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fda6 	bl	80053f4 <xQueueReceive>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d114      	bne.n	80008d8 <calculateFFT+0x88>
							   &fftInputData,
							   portMAX_DELAY) == pdPASS )
				{
					/* calculate fft */
					arm_rfft_fast_f32(&S, fftInputData, fftOutputData, 0);
 80008ae:	f107 000c 	add.w	r0, r7, #12
 80008b2:	2300      	movs	r3, #0
 80008b4:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <calculateFFT+0xa4>)
 80008b6:	490e      	ldr	r1, [pc, #56]	; (80008f0 <calculateFFT+0xa0>)
 80008b8:	f011 fa44 	bl	8011d44 <arm_rfft_fast_f32>
					/* Process the data through the Complex Magnitude Module for
					  calculating the magnitude at each bin */
					arm_cmplx_mag_f32( fftOutputData, fftOutputDataMag, FFT_SIZE);
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	490d      	ldr	r1, [pc, #52]	; (80008f8 <calculateFFT+0xa8>)
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <calculateFFT+0xa4>)
 80008c4:	f011 fea4 	bl	8012610 <arm_cmplx_mag_f32>
					/* send fft results to queue for sending data back to the computer */
					xQueueSend( sendQueue,
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <calculateFFT+0xac>)
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	f04f 32ff 	mov.w	r2, #4294967295
 80008d2:	4909      	ldr	r1, [pc, #36]	; (80008f8 <calculateFFT+0xa8>)
 80008d4:	f004 fbde 	bl	8005094 <xQueueGenericSend>
			for (int i = 0; i < waitingMessages; i++)
 80008d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008da:	3301      	adds	r3, #1
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d8d8      	bhi.n	8000898 <calculateFFT+0x48>
    {
 80008e6:	e7cb      	b.n	8000880 <calculateFFT+0x30>
 80008e8:	40022400 	.word	0x40022400
 80008ec:	20019338 	.word	0x20019338
 80008f0:	20016b24 	.word	0x20016b24
 80008f4:	20017b24 	.word	0x20017b24
 80008f8:	20018b24 	.word	0x20018b24
 80008fc:	2001933c 	.word	0x2001933c

08000900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a2f      	ldr	r2, [pc, #188]	; (80009d8 <MX_GPIO_Init+0xd8>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a29      	ldr	r2, [pc, #164]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <MX_GPIO_Init+0xd8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <MX_GPIO_Init+0xd8>)
 800094c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_GPIO_Init+0xd8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_GPIO_Init+0xd8>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_GPIO_Init+0xd8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f242 0120 	movw	r1, #8224	; 0x2020
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_GPIO_Init+0xdc>)
 8000996:	f001 f877 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|LD_USER2_Pin;
 800099a:	f242 0320 	movw	r3, #8224	; 0x2020
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	480a      	ldr	r0, [pc, #40]	; (80009dc <MX_GPIO_Init+0xdc>)
 80009b4:	f000 fea6 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 80009b8:	2301      	movs	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_GPIO_Init+0xe0>)
 80009cc:	f000 fe9a 	bl	8001704 <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40022400 	.word	0x40022400
 80009e0:	40020000 	.word	0x40020000

080009e4 <prvSRand>:
#include "usart.h"
#include "string.h"
#include "user_variables.h"

void prvSRand( UBaseType_t ulSeed )
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	/* Utility function to seed the pseudo random number generator. */
	ulNextRand = ulSeed;
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <prvSRand+0x1c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20027030 	.word	0x20027030

08000a04 <uxRand>:

UBaseType_t uxRand( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
const uint32_t ulMultiplier = 0x015a4e35UL, ulIncrement = 1UL;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <uxRand+0x6c>)
 8000a0c:	61fb      	str	r3, [r7, #28]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
static BaseType_t xInitialised = pdFALSE;

	/* Don't initialise until the scheduler is running, as the timeout in the
	random number generator uses the tick count. */
	if( xInitialised == pdFALSE )
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <uxRand+0x70>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d117      	bne.n	8000a4a <uxRand+0x46>
	{
		if( xTaskGetSchedulerState() !=  taskSCHEDULER_NOT_STARTED )
 8000a1a:	f005 ff35 	bl	8006888 <xTaskGetSchedulerState>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d012      	beq.n	8000a4a <uxRand+0x46>
		RNG_HandleTypeDef xRND;
		uint32_t ulSeed;

			/* Generate a random number with which to seed the local pseudo random
			number generating function. */
			HAL_RNG_Init( &xRND );
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 f989 	bl	8002d40 <HAL_RNG_Init>
			HAL_RNG_GenerateRandomNumber( &xRND, &ulSeed );
 8000a2e:	1d3a      	adds	r2, r7, #4
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 f9ac 	bl	8002d94 <HAL_RNG_GenerateRandomNumber>
			prvSRand( ulSeed );
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffd0 	bl	80009e4 <prvSRand>
			xInitialised = pdTRUE;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <uxRand+0x70>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
		}
	}

	/* Utility function to generate a pseudo random number. */

	ulNextRand = ( ulMultiplier * ulNextRand ) + ulIncrement;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <uxRand+0x74>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	fb02 f203 	mul.w	r2, r2, r3
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <uxRand+0x74>)
 8000a5a:	6013      	str	r3, [r2, #0]
	return( ( int ) ( ulNextRand >> 16UL ) & 0x7fffUL );
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <uxRand+0x74>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	0c1b      	lsrs	r3, r3, #16
 8000a62:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	015a4e35 	.word	0x015a4e35
 8000a74:	20019324 	.word	0x20019324
 8000a78:	20027030 	.word	0x20027030

08000a7c <vLoggingPrintf>:

void vLoggingPrintf( const char *pcFormatString, ... )
{
 8000a7c:	b40f      	push	{r0, r1, r2, r3}
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
	return;
 8000a82:	bf00      	nop
}
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	b004      	add	sp, #16
 8000a8c:	4770      	bx	lr

08000a8e <ulApplicationGetNextSequenceNumber>:

uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
													uint16_t usSourcePort,
													uint32_t ulDestinationAddress,
													uint16_t usDestinationPort ){
 8000a8e:	b480      	push	{r7}
 8000a90:	b085      	sub	sp, #20
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	817b      	strh	r3, [r7, #10]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	813b      	strh	r3, [r7, #8]
	return 306;
 8000aa2:	f44f 7399 	mov.w	r3, #306	; 0x132
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <xApplicationGetRandomNumber>:
 * Supply a random number to FreeRTOS+TCP stack.
 * THIS IS ONLY A DUMMY IMPLEMENTATION THAT RETURNS A PSEUDO RANDOM NUMBER
 * SO IS NOT INTENDED FOR USE IN PRODUCTION SYSTEMS.
 */
BaseType_t xApplicationGetRandomNumber(uint32_t* pulNumber)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	*(pulNumber) = uxRand();
 8000aba:	f7ff ffa3 	bl	8000a04 <uxRand>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <vAssertCalled>:

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8000adc:	f006 ffdc 	bl	8007a98 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 8000ae0:	e000      	b.n	8000ae4 <vAssertCalled+0x16>
		{
			__NOP();
 8000ae2:	bf00      	nop
		while( ul == 0 )
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0fb      	beq.n	8000ae2 <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8000aea:	f007 f801 	bl	8007af0 <vPortExitCritical>
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <debugPrintln>:
void debugPrint(char _out[]){
 HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 10);
}

/* print string over usart1 with \r\n */
void debugPrintln(char _out[]){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 10);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fc07 	bl	8000314 <strlen>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	4808      	ldr	r0, [pc, #32]	; (8000b30 <debugPrintln+0x38>)
 8000b10:	f002 fcae 	bl	8003470 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8000b14:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000b18:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 10);
 8000b1a:	f107 010c 	add.w	r1, r7, #12
 8000b1e:	230a      	movs	r3, #10
 8000b20:	2202      	movs	r2, #2
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <debugPrintln+0x38>)
 8000b24:	f002 fca4 	bl	8003470 <HAL_UART_Transmit>
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20027084 	.word	0x20027084

08000b34 <checkBoolArrayTrue>:

/* iterate over an array and check if all members are True (1) */
unsigned char checkBoolArrayTrue ( unsigned char* receivedPackets )
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	unsigned int count = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
	for (int entry = 0; entry < EPOCHES; entry++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	e00b      	b.n	8000b5e <checkBoolArrayTrue+0x2a>
	{
		if (receivedPackets[entry])
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <checkBoolArrayTrue+0x24>
		{
			count++;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
	for (int entry = 0; entry < EPOCHES; entry++)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	ddf0      	ble.n	8000b46 <checkBoolArrayTrue+0x12>
		}
	}
	if (count == EPOCHES)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d101      	bne.n	8000b6e <checkBoolArrayTrue+0x3a>
	{
		return 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e000      	b.n	8000b70 <checkBoolArrayTrue+0x3c>
	}
	else
	{
		return 0;
 8000b6e:	2300      	movs	r3, #0
	}
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <resetBoolArray>:

/* set all members of array to False (0) */
void resetBoolArray ( unsigned char* receivedPackets )
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	for (int entry = 0; entry < EPOCHES; entry++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	e007      	b.n	8000b9a <resetBoolArray+0x1e>
	{
		receivedPackets[entry] = 0;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	for (int entry = 0; entry < EPOCHES; entry++)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3301      	adds	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	ddf4      	ble.n	8000b8a <resetBoolArray+0xe>
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <pcApplicationHostnameHook>:
TaskHandle_t* UDPReceiveTaskHandle = NULL;
TaskHandle_t* UDPSendTaskHandle = NULL;
TaskHandle_t* FFTTaskHandle = NULL;

const char *pcApplicationHostnameHook( void )
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	/* Assign the name "rtosdemo" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return mainHOST_NAME;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <pcApplicationHostnameHook+0x10>)
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	08014fb8 	.word	0x08014fb8

08000bc0 <xApplicationDNSQueryHook>:


BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8000bc8:	f7ff fff0 	bl	8000bac <pcApplicationHostnameHook>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4619      	mov	r1, r3
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f012 fe8f 	bl	80138f4 <strcasecmp>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <xApplicationDNSQueryHook+0x22>
	{
		xReturn = pdPASS;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	e00b      	b.n	8000bfa <xApplicationDNSQueryHook+0x3a>
	}
	else if( strcasecmp( pcName, mainDEVICE_NICK_NAME ) == 0 )
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <xApplicationDNSQueryHook+0x44>)
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f012 fe85 	bl	80138f4 <strcasecmp>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <xApplicationDNSQueryHook+0x36>
	{
		xReturn = pdPASS;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e001      	b.n	8000bfa <xApplicationDNSQueryHook+0x3a>
	}
	else
	{
		xReturn = pdFAIL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	08014fc4 	.word	0x08014fc4

08000c08 <vApplicationIPNetworkEventHook>:


void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
static BaseType_t xTasksAlreadyCreated = pdFALSE;
    /* Both eNetworkUp and eNetworkDown events can be processed here. */
    if( eNetworkEvent == eNetworkUp )
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d12e      	bne.n	8000c76 <vApplicationIPNetworkEventHook+0x6e>
    {
    	debugPrintln("Network is up, create Tasks");
 8000c18:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <vApplicationIPNetworkEventHook+0x98>)
 8000c1a:	f7ff ff6d 	bl	8000af8 <debugPrintln>
//    	xTaskCreate( udpSendingTask, "UDPSend", ( unsigned short ) 500 , NULL, standardTASK_PRIORITY, UDPSendTaskHandle );
//    	xTaskCreate( udpReceivingTask, "UDPReceive", ( unsigned short ) 500 , NULL, standardTASK_PRIORITY, UDPReceiveTaskHandle );
//    	xTaskCreate( calculateFFT, "FFT", ( unsigned short ) 500 , NULL, standardTASK_PRIORITY, FFTTaskHandle );
    	xTaskCreate( udpSendingTask, "UDPSend", ( unsigned short ) 500 , NULL, 2, UDPSendTaskHandle );
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <vApplicationIPNetworkEventHook+0x9c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	2302      	movs	r3, #2
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c2e:	491e      	ldr	r1, [pc, #120]	; (8000ca8 <vApplicationIPNetworkEventHook+0xa0>)
 8000c30:	481e      	ldr	r0, [pc, #120]	; (8000cac <vApplicationIPNetworkEventHook+0xa4>)
 8000c32:	f004 ffed 	bl	8005c10 <xTaskCreate>
    	xTaskCreate( udpReceivingTask, "UDPReceive", ( unsigned short ) 500 , NULL, 2, UDPReceiveTaskHandle );
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <vApplicationIPNetworkEventHook+0xa8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2300      	movs	r3, #0
 8000c42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c46:	491b      	ldr	r1, [pc, #108]	; (8000cb4 <vApplicationIPNetworkEventHook+0xac>)
 8000c48:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <vApplicationIPNetworkEventHook+0xb0>)
 8000c4a:	f004 ffe1 	bl	8005c10 <xTaskCreate>
    	xTaskCreate( calculateFFT, "FFT", ( unsigned short ) 500 , NULL, 2, FFTTaskHandle );
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <vApplicationIPNetworkEventHook+0xb4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	2302      	movs	r3, #2
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c5e:	4918      	ldr	r1, [pc, #96]	; (8000cc0 <vApplicationIPNetworkEventHook+0xb8>)
 8000c60:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <vApplicationIPNetworkEventHook+0xbc>)
 8000c62:	f004 ffd5 	bl	8005c10 <xTaskCreate>
        /* Create the tasks that use the TCP/IP stack if they have not already
        been created. */
        if( xTasksAlreadyCreated == pdFALSE )
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <vApplicationIPNetworkEventHook+0xc0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d114      	bne.n	8000c98 <vApplicationIPNetworkEventHook+0x90>
            /*
             * For convenience, tasks that use FreeRTOS+TCP can be created here
             * to ensure they are not created before the network is usable.
             */

            xTasksAlreadyCreated = pdTRUE;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <vApplicationIPNetworkEventHook+0xc0>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
    	if (HAL_GPIO_ReadPin(LD_USER1_GPIO_Port, LD_USER1_Pin) != 1)
    	{
    		HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
    	}
    }
}
 8000c74:	e010      	b.n	8000c98 <vApplicationIPNetworkEventHook+0x90>
    	debugPrintln("Network is down, waiting ...");
 8000c76:	4815      	ldr	r0, [pc, #84]	; (8000ccc <vApplicationIPNetworkEventHook+0xc4>)
 8000c78:	f7ff ff3e 	bl	8000af8 <debugPrintln>
    	if (HAL_GPIO_ReadPin(LD_USER1_GPIO_Port, LD_USER1_Pin) != 1)
 8000c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <vApplicationIPNetworkEventHook+0xc8>)
 8000c82:	f000 fee9 	bl	8001a58 <HAL_GPIO_ReadPin>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d005      	beq.n	8000c98 <vApplicationIPNetworkEventHook+0x90>
    		HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c92:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <vApplicationIPNetworkEventHook+0xc8>)
 8000c94:	f000 fef8 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08014fcc 	.word	0x08014fcc
 8000ca4:	2001932c 	.word	0x2001932c
 8000ca8:	08014fe8 	.word	0x08014fe8
 8000cac:	0800127d 	.word	0x0800127d
 8000cb0:	20019328 	.word	0x20019328
 8000cb4:	08014ff0 	.word	0x08014ff0
 8000cb8:	08001161 	.word	0x08001161
 8000cbc:	20019330 	.word	0x20019330
 8000cc0:	08014ffc 	.word	0x08014ffc
 8000cc4:	08000851 	.word	0x08000851
 8000cc8:	20019334 	.word	0x20019334
 8000ccc:	08015000 	.word	0x08015000
 8000cd0:	40022400 	.word	0x40022400

08000cd4 <vApplicationMallocFailedHook>:


void vApplicationMallocFailedHook(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	debugPrintln("Malloc Failed Hook called!!!");
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <vApplicationMallocFailedHook+0x10>)
 8000cda:	f7ff ff0d 	bl	8000af8 <debugPrintln>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08015020 	.word	0x08015020

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cee:	f000 fbfa 	bl	80014e6 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf2:	f000 f855 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf6:	f7ff fe03 	bl	8000900 <MX_GPIO_Init>
  MX_RNG_Init();
 8000cfa:	f000 f8fb 	bl	8000ef4 <MX_RNG_Init>
  MX_USART1_UART_Init();
 8000cfe:	f000 fb55 	bl	80013ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  debugPrintln("Main Hardware Init finished");
 8000d02:	481b      	ldr	r0, [pc, #108]	; (8000d70 <main+0x88>)
 8000d04:	f7ff fef8 	bl	8000af8 <debugPrintln>

  /* create queue for sending data between receiving UDP task and fft task */
  receivedQueue= xQueueCreate( 3, (sizeof( float32_t * ) * TOTAL_SAMPLE_SIZE));
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f004 f92a 	bl	8004f68 <xQueueGenericCreate>
 8000d14:	4602      	mov	r2, r0
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <main+0x8c>)
 8000d18:	601a      	str	r2, [r3, #0]
  /* create queue for sending data between fft task and sending UDP task */
  sendQueue= xQueueCreate( 3, (sizeof( float32_t * ) * FFT_SIZE) );
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d20:	2003      	movs	r0, #3
 8000d22:	f004 f921 	bl	8004f68 <xQueueGenericCreate>
 8000d26:	4602      	mov	r2, r0
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <main+0x90>)
 8000d2a:	601a      	str	r2, [r3, #0]
  /* check if queue pointers are NULL */
  if ( ( receivedQueue == NULL ) || ( sendQueue == NULL) )
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <main+0x8c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <main+0x54>
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <main+0x90>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d108      	bne.n	8000d4e <main+0x66>
  {
	  debugPrintln( "--------------------------------");
 8000d3c:	480f      	ldr	r0, [pc, #60]	; (8000d7c <main+0x94>)
 8000d3e:	f7ff fedb 	bl	8000af8 <debugPrintln>
	  debugPrintln( " ONE QUEUE IS NULL !!!! ");
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <main+0x98>)
 8000d44:	f7ff fed8 	bl	8000af8 <debugPrintln>
	  debugPrintln( "--------------------------------");
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <main+0x94>)
 8000d4a:	f7ff fed5 	bl	8000af8 <debugPrintln>
  }
  /* init Freertos + TCP module */
  debugPrintln("IP Init");
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <main+0x9c>)
 8000d50:	f7ff fed2 	bl	8000af8 <debugPrintln>
  FreeRTOS_IPInit( ucIPAddress,
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <main+0xa0>)
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <main+0xa4>)
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <main+0xa8>)
 8000d5c:	490d      	ldr	r1, [pc, #52]	; (8000d94 <main+0xac>)
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <main+0xb0>)
 8000d60:	f008 fde4 	bl	800992c <FreeRTOS_IPInit>
                   ucNetMask,
                   ucGatewayAddress,
                   ucDNSServerAddress,
                   ucMACAddress );
  /* start the freertos scheduler */
  debugPrintln("Start Scheduler");
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <main+0xb4>)
 8000d66:	f7ff fec7 	bl	8000af8 <debugPrintln>
  vTaskStartScheduler();
 8000d6a:	f005 f8d9 	bl	8005f20 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <main+0x86>
 8000d70:	08015040 	.word	0x08015040
 8000d74:	20019338 	.word	0x20019338
 8000d78:	2001933c 	.word	0x2001933c
 8000d7c:	0801505c 	.word	0x0801505c
 8000d80:	08015080 	.word	0x08015080
 8000d84:	0801509c 	.word	0x0801509c
 8000d88:	08016be4 	.word	0x08016be4
 8000d8c:	08016bf8 	.word	0x08016bf8
 8000d90:	08016bf4 	.word	0x08016bf4
 8000d94:	08016bf0 	.word	0x08016bf0
 8000d98:	08016bec 	.word	0x08016bec
 8000d9c:	080150a4 	.word	0x080150a4

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0b8      	sub	sp, #224	; 0xe0
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000daa:	2234      	movs	r2, #52	; 0x34
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f012 f853 	bl	8012e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	2290      	movs	r2, #144	; 0x90
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f012 f844 	bl	8012e5a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <SystemClock_Config+0x11c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <SystemClock_Config+0x11c>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <SystemClock_Config+0x11c>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dea:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <SystemClock_Config+0x120>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a34      	ldr	r2, [pc, #208]	; (8000ec0 <SystemClock_Config+0x120>)
 8000df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <SystemClock_Config+0x120>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e1e:	2319      	movs	r3, #25
 8000e20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e24:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e32:	2309      	movs	r3, #9
 8000e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fea7 	bl	8001b90 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e48:	f000 f850 	bl	8000eec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e4c:	f000 fe50 	bl	8001af0 <HAL_PWREx_EnableOverDrive>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e56:	f000 f849 	bl	8000eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e80:	2107      	movs	r1, #7
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 f932 	bl	80020ec <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e8e:	f000 f82d 	bl	8000eec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <SystemClock_Config+0x124>)
 8000e94:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e96:	2300      	movs	r3, #0
 8000e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fb25 	bl	80024f4 <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000eb0:	f000 f81c 	bl	8000eec <Error_Handler>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	37e0      	adds	r7, #224	; 0xe0
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40007000 	.word	0x40007000
 8000ec4:	00200040 	.word	0x00200040

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 fb11 	bl	8001500 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40001000 	.word	0x40001000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <Error_Handler+0x6>

08000ef4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_RNG_Init+0x20>)
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <MX_RNG_Init+0x24>)
 8000efc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_RNG_Init+0x20>)
 8000f00:	f001 ff1e 	bl	8002d40 <HAL_RNG_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000f0a:	f7ff ffef 	bl	8000eec <Error_Handler>
  }

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20027034 	.word	0x20027034
 8000f18:	50060800 	.word	0x50060800

08000f1c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_RNG_MspInit+0x44>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d113      	bne.n	8000f56 <HAL_RNG_MspInit+0x3a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_RNG_MspInit+0x48>)
 8000f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f32:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <HAL_RNG_MspInit+0x48>)
 8000f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f38:	6353      	str	r3, [r2, #52]	; 0x34
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_RNG_MspInit+0x48>)
 8000f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2050      	movs	r0, #80	; 0x50
 8000f4c:	f000 fbb0 	bl	80016b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000f50:	2050      	movs	r0, #80	; 0x50
 8000f52:	f000 fbc9 	bl	80016e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	50060800 	.word	0x50060800
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_MspInit+0x44>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_MspInit+0x44>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_MspInit+0x44>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x44>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x44>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x44>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	; 0x30
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	2036      	movs	r0, #54	; 0x36
 8000fc6:	f000 fb73 	bl	80016b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fca:	2036      	movs	r0, #54	; 0x36
 8000fcc:	f000 fb8c 	bl	80016e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_InitTick+0xa0>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <HAL_InitTick+0xa0>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_InitTick+0xa0>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe8:	f107 0210 	add.w	r2, r7, #16
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fa4c 	bl	8002490 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ff8:	f001 fa22 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001004:	4a13      	ldr	r2, [pc, #76]	; (8001054 <HAL_InitTick+0xa4>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0c9b      	lsrs	r3, r3, #18
 800100c:	3b01      	subs	r3, #1
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_InitTick+0xa8>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <HAL_InitTick+0xac>)
 8001014:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_InitTick+0xa8>)
 8001018:	f240 32e7 	movw	r2, #999	; 0x3e7
 800101c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_InitTick+0xa8>)
 8001020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001022:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_InitTick+0xa8>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_InitTick+0xa8>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <HAL_InitTick+0xa8>)
 8001032:	f001 ff69 	bl	8002f08 <HAL_TIM_Base_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d104      	bne.n	8001046 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <HAL_InitTick+0xa8>)
 800103e:	f001 ff99 	bl	8002f74 <HAL_TIM_Base_Start_IT>
 8001042:	4603      	mov	r3, r0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3730      	adds	r7, #48	; 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	431bde83 	.word	0x431bde83
 8001058:	20027044 	.word	0x20027044
 800105c:	40001000 	.word	0x40001000

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>
	...

08001068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <HardFault_Handler+0x14>)
 8001074:	f000 fd08 	bl	8001a88 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <HardFault_Handler+0x10>
 800107a:	bf00      	nop
 800107c:	40022400 	.word	0x40022400

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM6_DAC_IRQHandler+0x10>)
 80010a6:	f001 ff8f 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20027044 	.word	0x20027044

080010b4 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <RNG_IRQHandler+0x10>)
 80010ba:	f001 feba 	bl	8002e32 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20027034 	.word	0x20027034

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f011 fe52 	bl	8012da0 <__errno>
 80010fc:	4602      	mov	r2, r0
 80010fe:	230c      	movs	r3, #12
 8001100:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20080000 	.word	0x20080000
 8001128:	00000400 	.word	0x00000400
 800112c:	20019340 	.word	0x20019340
 8001130:	20027178 	.word	0x20027178

08001134 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <SystemInit+0x28>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <SystemInit+0x28>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <SystemInit+0x28>)
 800114a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800114e:	609a      	str	r2, [r3, #8]
#endif
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <udpReceivingTask>:
static float32_t fftInputData[TOTAL_SAMPLE_SIZE];
static float32_t fftResults[FFT_SIZE];


void udpReceivingTask( void *pvParameters )
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08e      	sub	sp, #56	; 0x38
 8001164:	af02      	add	r7, sp, #8
 8001166:	6078      	str	r0, [r7, #4]
	int32_t lBytes;
	struct freertos_sockaddr xClient, xBindAddress;
	uint32_t xClientLength = sizeof( xClient );
 8001168:	2308      	movs	r3, #8
 800116a:	613b      	str	r3, [r7, #16]
	Socket_t xListeningSocket;
	unsigned char receivedPackets[EPOCHES] = {0};
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
	/* declare receivedQueue */
	extern QueueHandle_t receivedQueue;

   /* Attempt to open the socket. */
   xListeningSocket = FreeRTOS_socket( FREERTOS_AF_INET,
 8001170:	2211      	movs	r2, #17
 8001172:	2102      	movs	r1, #2
 8001174:	2002      	movs	r0, #2
 8001176:	f009 fac9 	bl	800a70c <FreeRTOS_socket>
 800117a:	62b8      	str	r0, [r7, #40]	; 0x28
									   FREERTOS_SOCK_DGRAM, /*FREERTOS_SOCK_DGRAM for UDP.*/
									   FREERTOS_IPPROTO_UDP );

   /* Check the socket was created. */
   configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001182:	d103      	bne.n	800118c <udpReceivingTask+0x2c>
 8001184:	4938      	ldr	r1, [pc, #224]	; (8001268 <udpReceivingTask+0x108>)
 8001186:	2023      	movs	r0, #35	; 0x23
 8001188:	f7ff fca1 	bl	8000ace <vAssertCalled>

   /* Bind to port 55556. */
   xBindAddress.sin_port = FreeRTOS_htons( 55556 );
 800118c:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001190:	82fb      	strh	r3, [r7, #22]
   FreeRTOS_bind( xListeningSocket, &xBindAddress, sizeof( xBindAddress ) );
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	2208      	movs	r2, #8
 8001198:	4619      	mov	r1, r3
 800119a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800119c:	f009 fca8 	bl	800aaf0 <FreeRTOS_bind>

   for( ;; )
   {
	   // Receive UDP Packet
       lBytes = FreeRTOS_recvfrom( xListeningSocket,
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	2200      	movs	r2, #0
 80011b0:	492e      	ldr	r1, [pc, #184]	; (800126c <udpReceivingTask+0x10c>)
 80011b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011b4:	f009 fb48 	bl	800a848 <FreeRTOS_recvfrom>
 80011b8:	6278      	str	r0, [r7, #36]	; 0x24
                                   0,
                                   FREERTOS_ZERO_COPY,
                                   &xClient,
                                   &xClientLength );

	   if( lBytes > 0 )
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	2b00      	cmp	r3, #0
 80011be:	dd49      	ble.n	8001254 <udpReceivingTask+0xf4>
	   {
			/* Data was received and can be processed here. */
			/* transform message array with SAMPLE_ARRAY_SIZE to array with size of (SAMPLE_ARRAY_SIZE * EPOCHES) */
			for (unsigned int sampleCounter = 0; sampleCounter < SAMPLE_ARRAY_SIZE; sampleCounter++ )
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c4:	e01e      	b.n	8001204 <udpReceivingTask+0xa4>
			{
				if (receivedPackets[receivedStructPtr->messageCounter] == 0)
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <udpReceivingTask+0x10c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011d0:	4413      	add	r3, r2
 80011d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d118      	bne.n	800120c <udpReceivingTask+0xac>
				{
					fftInputData[sampleCounter + receivedStructPtr->messageCounter * SAMPLE_ARRAY_SIZE] = receivedStructPtr->samples[sampleCounter];
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <udpReceivingTask+0x10c>)
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <udpReceivingTask+0x10c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	461a      	mov	r2, r3
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	4413      	add	r3, r2
 80011ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	440a      	add	r2, r1
 80011f2:	3204      	adds	r2, #4
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	491e      	ldr	r1, [pc, #120]	; (8001270 <udpReceivingTask+0x110>)
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	601a      	str	r2, [r3, #0]
			for (unsigned int sampleCounter = 0; sampleCounter < SAMPLE_ARRAY_SIZE; sampleCounter++ )
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	3301      	adds	r3, #1
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	2bff      	cmp	r3, #255	; 0xff
 8001208:	d9dd      	bls.n	80011c6 <udpReceivingTask+0x66>
 800120a:	e000      	b.n	800120e <udpReceivingTask+0xae>
				}
				else
				{
					break;
 800120c:	bf00      	nop
				}
			}
			receivedPackets[receivedStructPtr->messageCounter] = 1;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <udpReceivingTask+0x10c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001218:	4413      	add	r3, r2
 800121a:	2201      	movs	r2, #1
 800121c:	f803 2c24 	strb.w	r2, [r3, #-36]
			/* check for fftInputData is filled with (SAMPLE_ARRAY_SIZE * EPOCHES) of data */
			if ( checkBoolArrayTrue( receivedPackets) )
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fc85 	bl	8000b34 <checkBoolArrayTrue>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d011      	beq.n	8001254 <udpReceivingTask+0xf4>
			{
				/* Toggle LED for visualization */
				HAL_GPIO_TogglePin(LD_USER1_GPIO_Port, LD_USER1_Pin);
 8001230:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001234:	480f      	ldr	r0, [pc, #60]	; (8001274 <udpReceivingTask+0x114>)
 8001236:	f000 fc40 	bl	8001aba <HAL_GPIO_TogglePin>
				/* Put Received Data into the input_samples Queue */
				xQueueSend( receivedQueue,
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <udpReceivingTask+0x118>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	2300      	movs	r3, #0
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	490a      	ldr	r1, [pc, #40]	; (8001270 <udpReceivingTask+0x110>)
 8001246:	f003 ff25 	bl	8005094 <xQueueGenericSend>
						    ( void * ) &fftInputData,
							portMAX_DELAY );
				/* reset bool array */
				resetBoolArray( receivedPackets );
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fc94 	bl	8000b7c <resetBoolArray>
			}
	   }
       if( lBytes >= 0 )
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	2b00      	cmp	r3, #0
 8001258:	dba2      	blt.n	80011a0 <udpReceivingTask+0x40>
           /*
            * The data can be processed here.
            */

           /* Return the buffer to the TCP/IP stack. */
           FreeRTOS_ReleaseUDPPayloadBuffer( receivedStructPtr );
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <udpReceivingTask+0x10c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f008 fb54 	bl	800990c <FreeRTOS_ReleaseUDPPayloadBuffer>
       lBytes = FreeRTOS_recvfrom( xListeningSocket,
 8001264:	e79c      	b.n	80011a0 <udpReceivingTask+0x40>
 8001266:	bf00      	nop
 8001268:	080150b4 	.word	0x080150b4
 800126c:	20019344 	.word	0x20019344
 8001270:	20019348 	.word	0x20019348
 8001274:	40022400 	.word	0x40022400
 8001278:	20019338 	.word	0x20019338

0800127c <udpSendingTask>:
   }
}

/* Sending data from sendQueue over UDP to Computer */
void udpSendingTask( void *pvParameters )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8001282:	af02      	add	r7, sp, #8
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	6018      	str	r0, [r3, #0]
	struct freertos_sockaddr xDestinationAddress;
	/* declare sendQueue */
	extern QueueHandle_t sendQueue;

	/* Send strings to port 55555 on IP address 192.168.1.1. */
	xDestinationAddress.sin_addr = FreeRTOS_inet_addr( "192.168.1.1" );
 8001288:	4843      	ldr	r0, [pc, #268]	; (8001398 <udpSendingTask+0x11c>)
 800128a:	f00a f83c 	bl	800b306 <FreeRTOS_inet_addr>
 800128e:	4603      	mov	r3, r0
 8001290:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	xDestinationAddress.sin_port = FreeRTOS_htons( 55555 );
 8001294:	f240 33d9 	movw	r3, #985	; 0x3d9
 8001298:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e

	/* Create the socket. */
	xSocket = FreeRTOS_socket( FREERTOS_AF_INET,
 800129c:	2211      	movs	r2, #17
 800129e:	2102      	movs	r1, #2
 80012a0:	2002      	movs	r0, #2
 80012a2:	f009 fa33 	bl	800a70c <FreeRTOS_socket>
 80012a6:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
							  FREERTOS_SOCK_DGRAM,/*FREERTOS_SOCK_DGRAM for UDP.*/
							  FREERTOS_IPPROTO_UDP );

	/* Check the socket was created. */
	configASSERT( xSocket != FREERTOS_INVALID_SOCKET );
 80012aa:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80012ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b2:	d103      	bne.n	80012bc <udpSendingTask+0x40>
 80012b4:	4939      	ldr	r1, [pc, #228]	; (800139c <udpSendingTask+0x120>)
 80012b6:	2072      	movs	r0, #114	; 0x72
 80012b8:	f7ff fc09 	bl	8000ace <vAssertCalled>

	for( ;; )
	{
		/* get number of messages in sendQueue */
		int waitingMessages = 5;
 80012bc:	2305      	movs	r3, #5
 80012be:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
//		UBaseType_t waitingMessages = uxQueueMessagesWaiting(sendQueue);
		if (waitingMessages > 0)
 80012c2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	ddf8      	ble.n	80012bc <udpSendingTask+0x40>
		{
			/* iterate over sendQueue */
			for (int i = 0; i < waitingMessages; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80012d0:	e05a      	b.n	8001388 <udpSendingTask+0x10c>
			{
				/* get the next message from sendQueue */
				if (xQueueReceive( sendQueue,
 80012d2:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <udpSendingTask+0x124>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f04f 32ff 	mov.w	r2, #4294967295
 80012da:	4932      	ldr	r1, [pc, #200]	; (80013a4 <udpSendingTask+0x128>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 f889 	bl	80053f4 <xQueueReceive>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d14a      	bne.n	800137e <udpSendingTask+0x102>
					&fftResults,
					portMAX_DELAY ) == pdPASS )
				{
					/* toggle USER_LED 2 for visualization */
					HAL_GPIO_TogglePin(LD_USER2_GPIO_Port, LD_USER2_Pin);
 80012e8:	2120      	movs	r1, #32
 80012ea:	482f      	ldr	r0, [pc, #188]	; (80013a8 <udpSendingTask+0x12c>)
 80012ec:	f000 fbe5 	bl	8001aba <HAL_GPIO_TogglePin>
					/* assign packet number */
					for (unsigned int packetCounter = 0; packetCounter < (FFT_SIZE / SAMPLE_ARRAY_SIZE); packetCounter++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80012f6:	e03e      	b.n	8001376 <udpSendingTask+0xfa>
					{
						samples_output_struct outputDataStructPtr;
						outputDataStructPtr.messageCounter = (double) packetCounter;
 80012f8:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001304:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001308:	ee17 2a90 	vmov	r2, s15
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	601a      	str	r2, [r3, #0]
						for(unsigned int sampleCounter = 0; sampleCounter < SAMPLE_ARRAY_SIZE; sampleCounter++)
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001318:	e016      	b.n	8001348 <udpSendingTask+0xcc>
						{
							outputDataStructPtr.results[sampleCounter] = fftResults[sampleCounter + packetCounter * SAMPLE_ARRAY_SIZE];
 800131a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800131e:	021a      	lsls	r2, r3, #8
 8001320:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001324:	4413      	add	r3, r2
 8001326:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <udpSendingTask+0x128>)
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	f107 0108 	add.w	r1, r7, #8
 8001332:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	3304      	adds	r3, #4
 800133c:	601a      	str	r2, [r3, #0]
						for(unsigned int sampleCounter = 0; sampleCounter < SAMPLE_ARRAY_SIZE; sampleCounter++)
 800133e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001348:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800134c:	2bff      	cmp	r3, #255	; 0xff
 800134e:	d9e4      	bls.n	800131a <udpSendingTask+0x9e>
						}
						/* send outputData over UDP */
						FreeRTOS_sendto( xSocket,
 8001350:	f107 0108 	add.w	r1, r7, #8
 8001354:	2308      	movs	r3, #8
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	f240 4204 	movw	r2, #1028	; 0x404
 8001364:	f8d7 0418 	ldr.w	r0, [r7, #1048]	; 0x418
 8001368:	f009 fb1e 	bl	800a9a8 <FreeRTOS_sendto>
					for (unsigned int packetCounter = 0; packetCounter < (FFT_SIZE / SAMPLE_ARRAY_SIZE); packetCounter++)
 800136c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001370:	3301      	adds	r3, #1
 8001372:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8001376:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800137a:	2b01      	cmp	r3, #1
 800137c:	d9bc      	bls.n	80012f8 <udpSendingTask+0x7c>
			for (int i = 0; i < waitingMessages; i++)
 800137e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001382:	3301      	adds	r3, #1
 8001384:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8001388:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800138c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001390:	429a      	cmp	r2, r3
 8001392:	db9e      	blt.n	80012d2 <udpSendingTask+0x56>
	{
 8001394:	e792      	b.n	80012bc <udpSendingTask+0x40>
 8001396:	bf00      	nop
 8001398:	080150d4 	.word	0x080150d4
 800139c:	080150b4 	.word	0x080150b4
 80013a0:	2001933c 	.word	0x2001933c
 80013a4:	2001a348 	.word	0x2001a348
 80013a8:	40022400 	.word	0x40022400

080013ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <MX_USART1_UART_Init+0x5c>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART1_UART_Init+0x58>)
 80013f0:	f001 fff0 	bl	80033d4 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013fa:	f7ff fd77 	bl	8000eec <Error_Handler>
  }

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20027084 	.word	0x20027084
 8001408:	40011000 	.word	0x40011000

0800140c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a17      	ldr	r2, [pc, #92]	; (8001488 <HAL_UART_MspInit+0x7c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d128      	bne.n	8001480 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <HAL_UART_MspInit+0x80>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <HAL_UART_MspInit+0x80>)
 8001434:	f043 0310 	orr.w	r3, r3, #16
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <HAL_UART_MspInit+0x80>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_UART_MspInit+0x80>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <HAL_UART_MspInit+0x80>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_UART_MspInit+0x80>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800145e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001470:	2307      	movs	r3, #7
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <HAL_UART_MspInit+0x84>)
 800147c:	f000 f942 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40011000 	.word	0x40011000
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001498:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800149a:	e003      	b.n	80014a4 <LoopCopyDataInit>

0800149c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800149e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014a2:	3104      	adds	r1, #4

080014a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014ac:	d3f6      	bcc.n	800149c <CopyDataInit>
  ldr  r2, =_sbss
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014b0:	e002      	b.n	80014b8 <LoopFillZerobss>

080014b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014b4:	f842 3b04 	str.w	r3, [r2], #4

080014b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014bc:	d3f9      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014be:	f7ff fe39 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f011 fc73 	bl	8012dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff fc0f 	bl	8000ce8 <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80014d0:	0802a3c4 	.word	0x0802a3c4
  ldr  r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014d8:	20016b08 	.word	0x20016b08
  ldr  r2, =_sbss
 80014dc:	20016b08 	.word	0x20016b08
  ldr  r3, = _ebss
 80014e0:	20027174 	.word	0x20027174

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>

080014e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ea:	2003      	movs	r0, #3
 80014ec:	f000 f8d5 	bl	800169a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff fd5d 	bl	8000fb0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014f6:	f7ff fd37 	bl	8000f68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20016908 	.word	0x20016908
 8001524:	20027104 	.word	0x20027104

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20027104 	.word	0x20027104

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <__NVIC_SetPriorityGrouping+0x40>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	4313      	orrs	r3, r2
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x40>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00
 8001584:	05fa0000 	.word	0x05fa0000

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff4c 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c2:	f7ff ff61 	bl	8001588 <__NVIC_GetPriorityGrouping>
 80016c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	f7ff ffb1 	bl	8001634 <NVIC_EncodePriority>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff80 	bl	80015e0 <__NVIC_SetPriority>
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff54 	bl	80015a4 <__NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e175      	b.n	8001a10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 8164 	bne.w	8001a0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d00b      	beq.n	8001762 <HAL_GPIO_Init+0x5e>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d007      	beq.n	8001762 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001756:	2b11      	cmp	r3, #17
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b12      	cmp	r3, #18
 8001760:	d130      	bne.n	80017c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0201 	and.w	r2, r3, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x100>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b12      	cmp	r3, #18
 8001802:	d123      	bne.n	800184c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	69b9      	ldr	r1, [r7, #24]
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80be 	beq.w	8001a0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <HAL_GPIO_Init+0x320>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a64      	ldr	r2, [pc, #400]	; (8001a24 <HAL_GPIO_Init+0x320>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <HAL_GPIO_Init+0x320>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018a6:	4a60      	ldr	r2, [pc, #384]	; (8001a28 <HAL_GPIO_Init+0x324>)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a57      	ldr	r2, [pc, #348]	; (8001a2c <HAL_GPIO_Init+0x328>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d037      	beq.n	8001942 <HAL_GPIO_Init+0x23e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a56      	ldr	r2, [pc, #344]	; (8001a30 <HAL_GPIO_Init+0x32c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d031      	beq.n	800193e <HAL_GPIO_Init+0x23a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a55      	ldr	r2, [pc, #340]	; (8001a34 <HAL_GPIO_Init+0x330>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d02b      	beq.n	800193a <HAL_GPIO_Init+0x236>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a54      	ldr	r2, [pc, #336]	; (8001a38 <HAL_GPIO_Init+0x334>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d025      	beq.n	8001936 <HAL_GPIO_Init+0x232>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a53      	ldr	r2, [pc, #332]	; (8001a3c <HAL_GPIO_Init+0x338>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <HAL_GPIO_Init+0x22e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <HAL_GPIO_Init+0x33c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x22a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_GPIO_Init+0x340>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x226>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <HAL_GPIO_Init+0x344>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x222>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <HAL_GPIO_Init+0x348>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x21e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <HAL_GPIO_Init+0x34c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x21a>
 800191a:	2309      	movs	r3, #9
 800191c:	e012      	b.n	8001944 <HAL_GPIO_Init+0x240>
 800191e:	230a      	movs	r3, #10
 8001920:	e010      	b.n	8001944 <HAL_GPIO_Init+0x240>
 8001922:	2308      	movs	r3, #8
 8001924:	e00e      	b.n	8001944 <HAL_GPIO_Init+0x240>
 8001926:	2307      	movs	r3, #7
 8001928:	e00c      	b.n	8001944 <HAL_GPIO_Init+0x240>
 800192a:	2306      	movs	r3, #6
 800192c:	e00a      	b.n	8001944 <HAL_GPIO_Init+0x240>
 800192e:	2305      	movs	r3, #5
 8001930:	e008      	b.n	8001944 <HAL_GPIO_Init+0x240>
 8001932:	2304      	movs	r3, #4
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x240>
 8001936:	2303      	movs	r3, #3
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x240>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x240>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x240>
 8001942:	2300      	movs	r3, #0
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f002 0203 	and.w	r2, r2, #3
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001954:	4934      	ldr	r1, [pc, #208]	; (8001a28 <HAL_GPIO_Init+0x324>)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001962:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <HAL_GPIO_Init+0x350>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001986:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <HAL_GPIO_Init+0x350>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_GPIO_Init+0x350>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b0:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <HAL_GPIO_Init+0x350>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <HAL_GPIO_Init+0x350>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019da:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <HAL_GPIO_Init+0x350>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <HAL_GPIO_Init+0x350>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_GPIO_Init+0x350>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	f67f ae86 	bls.w	8001724 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3724      	adds	r7, #36	; 0x24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40021400 	.word	0x40021400
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40021c00 	.word	0x40021c00
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40022400 	.word	0x40022400
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001adc:	887a      	ldrh	r2, [r7, #2]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1e:	f7ff fd03 	bl	8001528 <HAL_GetTick>
 8001b22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b24:	e009      	b.n	8001b3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b26:	f7ff fcff 	bl	8001528 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b34:	d901      	bls.n	8001b3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e022      	b.n	8001b80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d1ee      	bne.n	8001b26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b54:	f7ff fce8 	bl	8001528 <HAL_GetTick>
 8001b58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b5a:	e009      	b.n	8001b70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b5c:	f7ff fce4 	bl	8001528 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b6a:	d901      	bls.n	8001b70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e007      	b.n	8001b80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b7c:	d1ee      	bne.n	8001b5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e29b      	b.n	80020de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8087 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb4:	4b96      	ldr	r3, [pc, #600]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d00c      	beq.n	8001bda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc0:	4b93      	ldr	r3, [pc, #588]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d112      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62>
 8001bcc:	4b90      	ldr	r3, [pc, #576]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bda:	4b8d      	ldr	r3, [pc, #564]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d06c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x130>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d168      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e275      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x7a>
 8001bfc:	4b84      	ldr	r3, [pc, #528]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a83      	ldr	r2, [pc, #524]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e02e      	b.n	8001c68 <HAL_RCC_OscConfig+0xd8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x9c>
 8001c12:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7e      	ldr	r2, [pc, #504]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b7c      	ldr	r3, [pc, #496]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7b      	ldr	r2, [pc, #492]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_RCC_OscConfig+0xd8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0xc0>
 8001c36:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b73      	ldr	r3, [pc, #460]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xd8>
 8001c50:	4b6f      	ldr	r3, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b6c      	ldr	r3, [pc, #432]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6b      	ldr	r2, [pc, #428]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fc5a 	bl	8001528 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fc56 	bl	8001528 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e229      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe8>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fc46 	bl	8001528 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fc42 	bl	8001528 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e215      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	4b57      	ldr	r3, [pc, #348]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x110>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d069      	beq.n	8001da2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cce:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d11c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x190>
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d116      	bne.n	8001d20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_RCC_OscConfig+0x17a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1e9      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	493d      	ldr	r1, [pc, #244]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	e040      	b.n	8001da2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d023      	beq.n	8001d70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d28:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fbf8 	bl	8001528 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fbf4 	bl	8001528 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1c7      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4929      	ldr	r1, [pc, #164]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
 8001d6e:	e018      	b.n	8001da2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d76:	f023 0301 	bic.w	r3, r3, #1
 8001d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fbd4 	bl	8001528 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff fbd0 	bl	8001528 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1a3      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d038      	beq.n	8001e20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d019      	beq.n	8001dea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dba:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fbb1 	bl	8001528 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff fbad 	bl	8001528 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e180      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x23a>
 8001de8:	e01a      	b.n	8001e20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff fb97 	bl	8001528 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fb93 	bl	8001528 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d903      	bls.n	8001e14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e166      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
 8001e10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ee      	bne.n	8001dfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a4 	beq.w	8001f76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b89      	ldr	r3, [pc, #548]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a88      	ldr	r2, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b86      	ldr	r3, [pc, #536]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e56:	4b83      	ldr	r3, [pc, #524]	; (8002064 <HAL_RCC_OscConfig+0x4d4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e62:	4b80      	ldr	r3, [pc, #512]	; (8002064 <HAL_RCC_OscConfig+0x4d4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7f      	ldr	r2, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x4d4>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fb5b 	bl	8001528 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff fb57 	bl	8001528 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b64      	cmp	r3, #100	; 0x64
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e12a      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e88:	4b76      	ldr	r3, [pc, #472]	; (8002064 <HAL_RCC_OscConfig+0x4d4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x31a>
 8001e9c:	4b70      	ldr	r3, [pc, #448]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a6f      	ldr	r2, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	e02d      	b.n	8001f06 <HAL_RCC_OscConfig+0x376>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x33c>
 8001eb2:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ebe:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a67      	ldr	r2, [pc, #412]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eca:	e01c      	b.n	8001f06 <HAL_RCC_OscConfig+0x376>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d10c      	bne.n	8001eee <HAL_RCC_OscConfig+0x35e>
 8001ed4:	4b62      	ldr	r3, [pc, #392]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	4a61      	ldr	r2, [pc, #388]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee0:	4b5f      	ldr	r3, [pc, #380]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a5e      	ldr	r2, [pc, #376]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
 8001eec:	e00b      	b.n	8001f06 <HAL_RCC_OscConfig+0x376>
 8001eee:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef2:	4a5b      	ldr	r2, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8001efa:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d015      	beq.n	8001f3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fb0b 	bl	8001528 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff fb07 	bl	8001528 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0d8      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ee      	beq.n	8001f16 <HAL_RCC_OscConfig+0x386>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7ff faf5 	bl	8001528 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff faf1 	bl	8001528 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0c2      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ee      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a3c      	ldr	r2, [pc, #240]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80ae 	beq.w	80020dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f80:	4b37      	ldr	r3, [pc, #220]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d06d      	beq.n	8002068 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d14b      	bne.n	800202c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b32      	ldr	r3, [pc, #200]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a31      	ldr	r2, [pc, #196]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fac2 	bl	8001528 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff fabe 	bl	8001528 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e091      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	041b      	lsls	r3, r3, #16
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	061b      	lsls	r3, r3, #24
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	071b      	lsls	r3, r3, #28
 8001ff2:	491b      	ldr	r1, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff fa90 	bl	8001528 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff fa8c 	bl	8001528 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e05f      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x47c>
 800202a:	e057      	b.n	80020dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8002032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fa76 	bl	8001528 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff fa72 	bl	8001528 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e045      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_RCC_OscConfig+0x4d0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x4b0>
 800205e:	e03d      	b.n	80020dc <HAL_RCC_OscConfig+0x54c>
 8002060:	40023800 	.word	0x40023800
 8002064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002068:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <HAL_RCC_OscConfig+0x558>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d030      	beq.n	80020d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d129      	bne.n	80020d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d122      	bne.n	80020d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800209e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d119      	bne.n	80020d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	3b01      	subs	r3, #1
 80020b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d10f      	bne.n	80020d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0d0      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002104:	4b6a      	ldr	r3, [pc, #424]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d910      	bls.n	8002134 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b67      	ldr	r3, [pc, #412]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	4965      	ldr	r1, [pc, #404]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b8      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002156:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002164:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800216a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	494d      	ldr	r1, [pc, #308]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d040      	beq.n	8002210 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d115      	bne.n	80021ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e07f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ae:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e073      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06b      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ce:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f023 0203 	bic.w	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4936      	ldr	r1, [pc, #216]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e0:	f7ff f9a2 	bl	8001528 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e8:	f7ff f99e 	bl	8001528 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e053      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 020c 	and.w	r2, r3, #12
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d1eb      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 030f 	and.w	r3, r3, #15
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d210      	bcs.n	8002240 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 020f 	bic.w	r2, r3, #15
 8002226:	4922      	ldr	r1, [pc, #136]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e032      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4916      	ldr	r1, [pc, #88]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227e:	f000 f821 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002282:	4601      	mov	r1, r0
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002290:	5cd3      	ldrb	r3, [r2, r3]
 8002292:	fa21 f303 	lsr.w	r3, r1, r3
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_ClockConfig+0x1d4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fe86 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00
 80022b4:	40023800 	.word	0x40023800
 80022b8:	08016bfc 	.word	0x08016bfc
 80022bc:	20016900 	.word	0x20016900
 80022c0:	20016904 	.word	0x20016904

080022c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	2300      	movs	r3, #0
 80022d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022da:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_GetSysClockFreq+0x158>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d007      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x32>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d008      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x38>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 808d 	bne.w	800240a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_RCC_GetSysClockFreq+0x15c>)
 80022f2:	60bb      	str	r3, [r7, #8]
      break;
 80022f4:	e08c      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f6:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <HAL_RCC_GetSysClockFreq+0x160>)
 80022f8:	60bb      	str	r3, [r7, #8]
      break;
 80022fa:	e089      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022fc:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_GetSysClockFreq+0x158>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002304:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002306:	4b45      	ldr	r3, [pc, #276]	; (800241c <HAL_RCC_GetSysClockFreq+0x158>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d023      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002312:	4b42      	ldr	r3, [pc, #264]	; (800241c <HAL_RCC_GetSysClockFreq+0x158>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	f04f 0400 	mov.w	r4, #0
 800231c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	ea03 0501 	and.w	r5, r3, r1
 8002328:	ea04 0602 	and.w	r6, r4, r2
 800232c:	4a3d      	ldr	r2, [pc, #244]	; (8002424 <HAL_RCC_GetSysClockFreq+0x160>)
 800232e:	fb02 f106 	mul.w	r1, r2, r6
 8002332:	2200      	movs	r2, #0
 8002334:	fb02 f205 	mul.w	r2, r2, r5
 8002338:	440a      	add	r2, r1
 800233a:	493a      	ldr	r1, [pc, #232]	; (8002424 <HAL_RCC_GetSysClockFreq+0x160>)
 800233c:	fba5 0101 	umull	r0, r1, r5, r1
 8002340:	1853      	adds	r3, r2, r1
 8002342:	4619      	mov	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f04f 0400 	mov.w	r4, #0
 800234a:	461a      	mov	r2, r3
 800234c:	4623      	mov	r3, r4
 800234e:	f7fe f83f 	bl	80003d0 <__aeabi_uldivmod>
 8002352:	4603      	mov	r3, r0
 8002354:	460c      	mov	r4, r1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e049      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_RCC_GetSysClockFreq+0x158>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	f04f 0400 	mov.w	r4, #0
 8002364:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	ea03 0501 	and.w	r5, r3, r1
 8002370:	ea04 0602 	and.w	r6, r4, r2
 8002374:	4629      	mov	r1, r5
 8002376:	4632      	mov	r2, r6
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	f04f 0400 	mov.w	r4, #0
 8002380:	0154      	lsls	r4, r2, #5
 8002382:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002386:	014b      	lsls	r3, r1, #5
 8002388:	4619      	mov	r1, r3
 800238a:	4622      	mov	r2, r4
 800238c:	1b49      	subs	r1, r1, r5
 800238e:	eb62 0206 	sbc.w	r2, r2, r6
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	f04f 0400 	mov.w	r4, #0
 800239a:	0194      	lsls	r4, r2, #6
 800239c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023a0:	018b      	lsls	r3, r1, #6
 80023a2:	1a5b      	subs	r3, r3, r1
 80023a4:	eb64 0402 	sbc.w	r4, r4, r2
 80023a8:	f04f 0100 	mov.w	r1, #0
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	00e2      	lsls	r2, r4, #3
 80023b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023b6:	00d9      	lsls	r1, r3, #3
 80023b8:	460b      	mov	r3, r1
 80023ba:	4614      	mov	r4, r2
 80023bc:	195b      	adds	r3, r3, r5
 80023be:	eb44 0406 	adc.w	r4, r4, r6
 80023c2:	f04f 0100 	mov.w	r1, #0
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	02a2      	lsls	r2, r4, #10
 80023cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023d0:	0299      	lsls	r1, r3, #10
 80023d2:	460b      	mov	r3, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	4621      	mov	r1, r4
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f04f 0400 	mov.w	r4, #0
 80023e0:	461a      	mov	r2, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	f7fd fff4 	bl	80003d0 <__aeabi_uldivmod>
 80023e8:	4603      	mov	r3, r0
 80023ea:	460c      	mov	r4, r1
 80023ec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_GetSysClockFreq+0x158>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0c1b      	lsrs	r3, r3, #16
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	3301      	adds	r3, #1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	60bb      	str	r3, [r7, #8]
      break;
 8002408:	e002      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetSysClockFreq+0x15c>)
 800240c:	60bb      	str	r3, [r7, #8]
      break;
 800240e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002410:	68bb      	ldr	r3, [r7, #8]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	00f42400 	.word	0x00f42400
 8002424:	017d7840 	.word	0x017d7840

08002428 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCC_GetHCLKFreq+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20016900 	.word	0x20016900

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002444:	f7ff fff0 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002448:	4601      	mov	r1, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0a9b      	lsrs	r3, r3, #10
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	08016c0c 	.word	0x08016c0c

08002468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800246c:	f7ff ffdc 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002470:	4601      	mov	r1, r0
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0b5b      	lsrs	r3, r3, #13
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4a03      	ldr	r2, [pc, #12]	; (800248c <HAL_RCC_GetPCLK2Freq+0x24>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	08016c0c 	.word	0x08016c0c

08002490 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	220f      	movs	r2, #15
 800249e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_RCC_GetClockConfig+0x5c>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0203 	and.w	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_RCC_GetClockConfig+0x5c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_RCC_GetClockConfig+0x5c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_GetClockConfig+0x5c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_RCC_GetClockConfig+0x60>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 020f 	and.w	r2, r3, #15
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	601a      	str	r2, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40023c00 	.word	0x40023c00

080024f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d012      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800251c:	4b69      	ldr	r3, [pc, #420]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a68      	ldr	r2, [pc, #416]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002522:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002526:	6093      	str	r3, [r2, #8]
 8002528:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002530:	4964      	ldr	r1, [pc, #400]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800253e:	2301      	movs	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d017      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800254e:	4b5d      	ldr	r3, [pc, #372]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002554:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	4959      	ldr	r1, [pc, #356]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256c:	d101      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800256e:	2301      	movs	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800257a:	2301      	movs	r3, #1
 800257c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d017      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800258a:	4b4e      	ldr	r3, [pc, #312]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002590:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	494a      	ldr	r1, [pc, #296]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a8:	d101      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 808b 	beq.w	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	4a39      	ldr	r2, [pc, #228]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6413      	str	r3, [r2, #64]	; 0x40
 80025e4:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025f0:	4b35      	ldr	r3, [pc, #212]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a34      	ldr	r2, [pc, #208]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fc:	f7fe ff94 	bl	8001528 <HAL_GetTick>
 8002600:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002604:	f7fe ff90 	bl	8001528 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e38d      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002622:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d035      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	429a      	cmp	r2, r3
 800263e:	d02e      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002640:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002648:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002660:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002662:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d114      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe ff58 	bl	8001528 <HAL_GetTick>
 8002678:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267a:	e00a      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267c:	f7fe ff54 	bl	8001528 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e34f      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0ee      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026aa:	d111      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	4901      	ldr	r1, [pc, #4]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
 80026c2:	e00b      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40007000 	.word	0x40007000
 80026cc:	0ffffcff 	.word	0x0ffffcff
 80026d0:	4bb3      	ldr	r3, [pc, #716]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4ab2      	ldr	r2, [pc, #712]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026da:	6093      	str	r3, [r2, #8]
 80026dc:	4bb0      	ldr	r3, [pc, #704]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	49ad      	ldr	r1, [pc, #692]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d010      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026fa:	4ba9      	ldr	r3, [pc, #676]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002700:	4aa7      	ldr	r2, [pc, #668]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002706:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800270a:	4ba5      	ldr	r3, [pc, #660]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	49a2      	ldr	r1, [pc, #648]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002728:	4b9d      	ldr	r3, [pc, #628]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002736:	499a      	ldr	r1, [pc, #616]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800274a:	4b95      	ldr	r3, [pc, #596]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002758:	4991      	ldr	r1, [pc, #580]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800276c:	4b8c      	ldr	r3, [pc, #560]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800277a:	4989      	ldr	r1, [pc, #548]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800278e:	4b84      	ldr	r3, [pc, #528]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4980      	ldr	r1, [pc, #512]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b0:	4b7b      	ldr	r3, [pc, #492]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4978      	ldr	r1, [pc, #480]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	f023 020c 	bic.w	r2, r3, #12
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	496f      	ldr	r1, [pc, #444]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	4967      	ldr	r1, [pc, #412]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002816:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002824:	495e      	ldr	r1, [pc, #376]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	4956      	ldr	r1, [pc, #344]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800285a:	4b51      	ldr	r3, [pc, #324]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	494d      	ldr	r1, [pc, #308]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800287c:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	4945      	ldr	r1, [pc, #276]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800289e:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ac:	493c      	ldr	r1, [pc, #240]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028c0:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ce:	4934      	ldr	r1, [pc, #208]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d011      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f0:	492b      	ldr	r1, [pc, #172]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002900:	d101      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002912:	2301      	movs	r3, #1
 8002914:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002922:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	491b      	ldr	r1, [pc, #108]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00b      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002954:	4912      	ldr	r1, [pc, #72]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002978:	4909      	ldr	r1, [pc, #36]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00f      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800298e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002992:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	e002      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	4985      	ldr	r1, [pc, #532]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029b8:	4b80      	ldr	r3, [pc, #512]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c8:	497c      	ldr	r1, [pc, #496]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d005      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029de:	f040 80d6 	bne.w	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029e2:	4b76      	ldr	r3, [pc, #472]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a75      	ldr	r2, [pc, #468]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ee:	f7fe fd9b 	bl	8001528 <HAL_GetTick>
 80029f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029f6:	f7fe fd97 	bl	8001528 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b64      	cmp	r3, #100	; 0x64
 8002a02:	d901      	bls.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e194      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a08:	4b6c      	ldr	r3, [pc, #432]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f0      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d021      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11d      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a28:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a36:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a3c:	0e1b      	lsrs	r3, r3, #24
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	019a      	lsls	r2, r3, #6
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	061b      	lsls	r3, r3, #24
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	071b      	lsls	r3, r3, #28
 8002a5c:	4957      	ldr	r1, [pc, #348]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d02e      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8e:	d129      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a90:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa4:	0f1b      	lsrs	r3, r3, #28
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	019a      	lsls	r2, r3, #6
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	071b      	lsls	r3, r3, #28
 8002ac4:	493d      	ldr	r1, [pc, #244]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002acc:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad2:	f023 021f 	bic.w	r2, r3, #31
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	3b01      	subs	r3, #1
 8002adc:	4937      	ldr	r1, [pc, #220]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01d      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af6:	0e1b      	lsrs	r3, r3, #24
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002afe:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b04:	0f1b      	lsrs	r3, r3, #28
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	019a      	lsls	r2, r3, #6
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	071b      	lsls	r3, r3, #28
 8002b24:	4925      	ldr	r1, [pc, #148]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d011      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	019a      	lsls	r2, r3, #6
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	061b      	lsls	r3, r3, #24
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	071b      	lsls	r3, r3, #28
 8002b54:	4919      	ldr	r1, [pc, #100]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b5c:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe fcde 	bl	8001528 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b70:	f7fe fcda 	bl	8001528 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0d7      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f040 80cd 	bne.w	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba2:	f7fe fcc1 	bl	8001528 <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002baa:	f7fe fcbd 	bl	8001528 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b64      	cmp	r3, #100	; 0x64
 8002bb6:	d903      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0ba      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002bbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bc0:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bcc:	d0ed      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d02e      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d12a      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bf6:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c04:	4b4d      	ldr	r3, [pc, #308]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	0f1b      	lsrs	r3, r3, #28
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	019a      	lsls	r2, r3, #6
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	071b      	lsls	r3, r3, #28
 8002c2a:	4944      	ldr	r1, [pc, #272]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	493d      	ldr	r1, [pc, #244]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d022      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c60:	d11d      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	0e1b      	lsrs	r3, r3, #24
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c70:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	0f1b      	lsrs	r3, r3, #28
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	019a      	lsls	r2, r3, #6
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	061b      	lsls	r3, r3, #24
 8002c90:	431a      	orrs	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	071b      	lsls	r3, r3, #28
 8002c96:	4929      	ldr	r1, [pc, #164]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d028      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb0:	0e1b      	lsrs	r3, r3, #24
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	0c1b      	lsrs	r3, r3, #16
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	019a      	lsls	r2, r3, #6
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	071b      	lsls	r3, r3, #28
 8002cde:	4917      	ldr	r1, [pc, #92]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	4911      	ldr	r1, [pc, #68]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe fc0e 	bl	8001528 <HAL_GetTick>
 8002d0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d10:	f7fe fc0a 	bl	8001528 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e007      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d2e:	d1ef      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800

08002d40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e01c      	b.n	8002d8c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	795b      	ldrb	r3, [r3, #5]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe f8da 	bl	8000f1c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0204 	orr.w	r2, r2, #4
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	791b      	ldrb	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_RNG_GenerateRandomNumber+0x1a>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e03d      	b.n	8002e2a <HAL_RNG_GenerateRandomNumber+0x96>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	795b      	ldrb	r3, [r3, #5]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d12c      	bne.n	8002e18 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fbb0 	bl	8001528 <HAL_GetTick>
 8002dc8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002dca:	e011      	b.n	8002df0 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002dcc:	f7fe fbac 	bl	8001528 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d90a      	bls.n	8002df0 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e01c      	b.n	8002e2a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d1e6      	bne.n	8002dcc <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	715a      	strb	r2, [r3, #5]
 8002e16:	e004      	b.n	8002e22 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	711a      	strb	r2, [r3, #4]

  return status;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d105      	bne.n	8002e58 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2210      	movs	r2, #16
 8002e50:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002e52:	2301      	movs	r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e00b      	b.n	8002e70 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b40      	cmp	r3, #64	; 0x40
 8002e64:	d104      	bne.n	8002e70 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2208      	movs	r2, #8
 8002e6a:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10a      	bne.n	8002e8c <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f839 	bl	8002ef4 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8002e8a:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d11d      	bne.n	8002ed6 <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0208 	bic.w	r2, r2, #8
 8002ea8:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	795b      	ldrb	r3, [r3, #5]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f804 	bl	8002ede <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e01d      	b.n	8002f56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f815 	bl	8002f5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f000 f986 	bl	8003258 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_TIM_Base_Start_IT+0x50>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_TIM_Base_Start_IT+0x42>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa4:	d007      	beq.n	8002fb6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	00010007 	.word	0x00010007

08002fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0202 	mvn.w	r2, #2
 8002ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f905 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8f7 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f908 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0204 	mvn.w	r2, #4
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8db 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8cd 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f8de 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b08      	cmp	r3, #8
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b08      	cmp	r3, #8
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0208 	mvn.w	r2, #8
 800309c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2204      	movs	r2, #4
 80030a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8b1 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8a3 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f8b4 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0210 	mvn.w	r2, #16
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2208      	movs	r2, #8
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f887 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f879 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f88a 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0201 	mvn.w	r2, #1
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd febe 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003164:	2b80      	cmp	r3, #128	; 0x80
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f91a 	bl	80033ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003186:	d10e      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800319e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f90d 	bl	80033c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d10e      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d107      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f838 	bl	8003242 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d10e      	bne.n	80031fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d107      	bne.n	80031fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0220 	mvn.w	r2, #32
 80031f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f8cd 	bl	8003398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a40      	ldr	r2, [pc, #256]	; (800336c <TIM_Base_SetConfig+0x114>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003276:	d00f      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a3d      	ldr	r2, [pc, #244]	; (8003370 <TIM_Base_SetConfig+0x118>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00b      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a3c      	ldr	r2, [pc, #240]	; (8003374 <TIM_Base_SetConfig+0x11c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a3b      	ldr	r2, [pc, #236]	; (8003378 <TIM_Base_SetConfig+0x120>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3a      	ldr	r2, [pc, #232]	; (800337c <TIM_Base_SetConfig+0x124>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2f      	ldr	r2, [pc, #188]	; (800336c <TIM_Base_SetConfig+0x114>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02b      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d027      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <TIM_Base_SetConfig+0x118>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d023      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <TIM_Base_SetConfig+0x11c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01f      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2a      	ldr	r2, [pc, #168]	; (8003378 <TIM_Base_SetConfig+0x120>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01b      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a29      	ldr	r2, [pc, #164]	; (800337c <TIM_Base_SetConfig+0x124>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d017      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a28      	ldr	r2, [pc, #160]	; (8003380 <TIM_Base_SetConfig+0x128>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a27      	ldr	r2, [pc, #156]	; (8003384 <TIM_Base_SetConfig+0x12c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a26      	ldr	r2, [pc, #152]	; (8003388 <TIM_Base_SetConfig+0x130>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a25      	ldr	r2, [pc, #148]	; (800338c <TIM_Base_SetConfig+0x134>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a24      	ldr	r2, [pc, #144]	; (8003390 <TIM_Base_SetConfig+0x138>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a23      	ldr	r2, [pc, #140]	; (8003394 <TIM_Base_SetConfig+0x13c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <TIM_Base_SetConfig+0x114>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <TIM_Base_SetConfig+0xf8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0c      	ldr	r2, [pc, #48]	; (800337c <TIM_Base_SetConfig+0x124>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d103      	bne.n	8003358 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	615a      	str	r2, [r3, #20]
}
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800
 8003378:	40000c00 	.word	0x40000c00
 800337c:	40010400 	.word	0x40010400
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800
 800338c:	40001800 	.word	0x40001800
 8003390:	40001c00 	.word	0x40001c00
 8003394:	40002000 	.word	0x40002000

08003398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e040      	b.n	8003468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe f808 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8be 	bl	8003594 <UART_SetConfig>
 8003418:	4603      	mov	r3, r0
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e022      	b.n	8003468 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fb5c 	bl	8003ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800344e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fbe3 	bl	8003c2c <UART_CheckIdleState>
 8003466:	4603      	mov	r3, r0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	2b20      	cmp	r3, #32
 8003486:	d17f      	bne.n	8003588 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_UART_Transmit+0x24>
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e078      	b.n	800358a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Transmit+0x36>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e071      	b.n	800358a <HAL_UART_Transmit+0x11a>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2221      	movs	r2, #33	; 0x21
 80034b8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80034ba:	f7fe f835 	bl	8001528 <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d108      	bne.n	80034ec <HAL_UART_Transmit+0x7c>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80034fc:	e02c      	b.n	8003558 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2200      	movs	r2, #0
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fbd4 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e038      	b.n	800358a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	3302      	adds	r3, #2
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e007      	b.n	8003546 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1cc      	bne.n	80034fe <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fba1 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e005      	b.n	800358a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	e000      	b.n	800358a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
  }
}
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800359c:	2300      	movs	r3, #0
 800359e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4bb1      	ldr	r3, [pc, #708]	; (8003888 <UART_SetConfig+0x2f4>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	6939      	ldr	r1, [r7, #16]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a9f      	ldr	r2, [pc, #636]	; (800388c <UART_SetConfig+0x2f8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d121      	bne.n	8003658 <UART_SetConfig+0xc4>
 8003614:	4b9e      	ldr	r3, [pc, #632]	; (8003890 <UART_SetConfig+0x2fc>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b03      	cmp	r3, #3
 8003620:	d816      	bhi.n	8003650 <UART_SetConfig+0xbc>
 8003622:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0x94>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	08003639 	.word	0x08003639
 800362c:	08003645 	.word	0x08003645
 8003630:	0800363f 	.word	0x0800363f
 8003634:	0800364b 	.word	0x0800364b
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e151      	b.n	80038e2 <UART_SetConfig+0x34e>
 800363e:	2302      	movs	r3, #2
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e14e      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003644:	2304      	movs	r3, #4
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e14b      	b.n	80038e2 <UART_SetConfig+0x34e>
 800364a:	2308      	movs	r3, #8
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e148      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003650:	2310      	movs	r3, #16
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	bf00      	nop
 8003656:	e144      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a8d      	ldr	r2, [pc, #564]	; (8003894 <UART_SetConfig+0x300>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d134      	bne.n	80036cc <UART_SetConfig+0x138>
 8003662:	4b8b      	ldr	r3, [pc, #556]	; (8003890 <UART_SetConfig+0x2fc>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b0c      	cmp	r3, #12
 800366e:	d829      	bhi.n	80036c4 <UART_SetConfig+0x130>
 8003670:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <UART_SetConfig+0xe4>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080036c5 	.word	0x080036c5
 8003680:	080036c5 	.word	0x080036c5
 8003684:	080036c5 	.word	0x080036c5
 8003688:	080036b9 	.word	0x080036b9
 800368c:	080036c5 	.word	0x080036c5
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080036c5 	.word	0x080036c5
 8003698:	080036b3 	.word	0x080036b3
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036c5 	.word	0x080036c5
 80036a8:	080036bf 	.word	0x080036bf
 80036ac:	2300      	movs	r3, #0
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e117      	b.n	80038e2 <UART_SetConfig+0x34e>
 80036b2:	2302      	movs	r3, #2
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e114      	b.n	80038e2 <UART_SetConfig+0x34e>
 80036b8:	2304      	movs	r3, #4
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e111      	b.n	80038e2 <UART_SetConfig+0x34e>
 80036be:	2308      	movs	r3, #8
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e10e      	b.n	80038e2 <UART_SetConfig+0x34e>
 80036c4:	2310      	movs	r3, #16
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	bf00      	nop
 80036ca:	e10a      	b.n	80038e2 <UART_SetConfig+0x34e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a71      	ldr	r2, [pc, #452]	; (8003898 <UART_SetConfig+0x304>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d120      	bne.n	8003718 <UART_SetConfig+0x184>
 80036d6:	4b6e      	ldr	r3, [pc, #440]	; (8003890 <UART_SetConfig+0x2fc>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d00f      	beq.n	8003704 <UART_SetConfig+0x170>
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d802      	bhi.n	80036ee <UART_SetConfig+0x15a>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <UART_SetConfig+0x164>
 80036ec:	e010      	b.n	8003710 <UART_SetConfig+0x17c>
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d005      	beq.n	80036fe <UART_SetConfig+0x16a>
 80036f2:	2b30      	cmp	r3, #48	; 0x30
 80036f4:	d009      	beq.n	800370a <UART_SetConfig+0x176>
 80036f6:	e00b      	b.n	8003710 <UART_SetConfig+0x17c>
 80036f8:	2300      	movs	r3, #0
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e0f1      	b.n	80038e2 <UART_SetConfig+0x34e>
 80036fe:	2302      	movs	r3, #2
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e0ee      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003704:	2304      	movs	r3, #4
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e0eb      	b.n	80038e2 <UART_SetConfig+0x34e>
 800370a:	2308      	movs	r3, #8
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e0e8      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003710:	2310      	movs	r3, #16
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	bf00      	nop
 8003716:	e0e4      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5f      	ldr	r2, [pc, #380]	; (800389c <UART_SetConfig+0x308>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d120      	bne.n	8003764 <UART_SetConfig+0x1d0>
 8003722:	4b5b      	ldr	r3, [pc, #364]	; (8003890 <UART_SetConfig+0x2fc>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d00f      	beq.n	8003750 <UART_SetConfig+0x1bc>
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d802      	bhi.n	800373a <UART_SetConfig+0x1a6>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <UART_SetConfig+0x1b0>
 8003738:	e010      	b.n	800375c <UART_SetConfig+0x1c8>
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d005      	beq.n	800374a <UART_SetConfig+0x1b6>
 800373e:	2bc0      	cmp	r3, #192	; 0xc0
 8003740:	d009      	beq.n	8003756 <UART_SetConfig+0x1c2>
 8003742:	e00b      	b.n	800375c <UART_SetConfig+0x1c8>
 8003744:	2300      	movs	r3, #0
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e0cb      	b.n	80038e2 <UART_SetConfig+0x34e>
 800374a:	2302      	movs	r3, #2
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e0c8      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003750:	2304      	movs	r3, #4
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e0c5      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003756:	2308      	movs	r3, #8
 8003758:	77fb      	strb	r3, [r7, #31]
 800375a:	e0c2      	b.n	80038e2 <UART_SetConfig+0x34e>
 800375c:	2310      	movs	r3, #16
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	bf00      	nop
 8003762:	e0be      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a4d      	ldr	r2, [pc, #308]	; (80038a0 <UART_SetConfig+0x30c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d124      	bne.n	80037b8 <UART_SetConfig+0x224>
 800376e:	4b48      	ldr	r3, [pc, #288]	; (8003890 <UART_SetConfig+0x2fc>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377c:	d012      	beq.n	80037a4 <UART_SetConfig+0x210>
 800377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003782:	d802      	bhi.n	800378a <UART_SetConfig+0x1f6>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <UART_SetConfig+0x204>
 8003788:	e012      	b.n	80037b0 <UART_SetConfig+0x21c>
 800378a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378e:	d006      	beq.n	800379e <UART_SetConfig+0x20a>
 8003790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003794:	d009      	beq.n	80037aa <UART_SetConfig+0x216>
 8003796:	e00b      	b.n	80037b0 <UART_SetConfig+0x21c>
 8003798:	2300      	movs	r3, #0
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e0a1      	b.n	80038e2 <UART_SetConfig+0x34e>
 800379e:	2302      	movs	r3, #2
 80037a0:	77fb      	strb	r3, [r7, #31]
 80037a2:	e09e      	b.n	80038e2 <UART_SetConfig+0x34e>
 80037a4:	2304      	movs	r3, #4
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e09b      	b.n	80038e2 <UART_SetConfig+0x34e>
 80037aa:	2308      	movs	r3, #8
 80037ac:	77fb      	strb	r3, [r7, #31]
 80037ae:	e098      	b.n	80038e2 <UART_SetConfig+0x34e>
 80037b0:	2310      	movs	r3, #16
 80037b2:	77fb      	strb	r3, [r7, #31]
 80037b4:	bf00      	nop
 80037b6:	e094      	b.n	80038e2 <UART_SetConfig+0x34e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a39      	ldr	r2, [pc, #228]	; (80038a4 <UART_SetConfig+0x310>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d124      	bne.n	800380c <UART_SetConfig+0x278>
 80037c2:	4b33      	ldr	r3, [pc, #204]	; (8003890 <UART_SetConfig+0x2fc>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d0:	d012      	beq.n	80037f8 <UART_SetConfig+0x264>
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d802      	bhi.n	80037de <UART_SetConfig+0x24a>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <UART_SetConfig+0x258>
 80037dc:	e012      	b.n	8003804 <UART_SetConfig+0x270>
 80037de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e2:	d006      	beq.n	80037f2 <UART_SetConfig+0x25e>
 80037e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e8:	d009      	beq.n	80037fe <UART_SetConfig+0x26a>
 80037ea:	e00b      	b.n	8003804 <UART_SetConfig+0x270>
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e077      	b.n	80038e2 <UART_SetConfig+0x34e>
 80037f2:	2302      	movs	r3, #2
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e074      	b.n	80038e2 <UART_SetConfig+0x34e>
 80037f8:	2304      	movs	r3, #4
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e071      	b.n	80038e2 <UART_SetConfig+0x34e>
 80037fe:	2308      	movs	r3, #8
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e06e      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003804:	2310      	movs	r3, #16
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	bf00      	nop
 800380a:	e06a      	b.n	80038e2 <UART_SetConfig+0x34e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a25      	ldr	r2, [pc, #148]	; (80038a8 <UART_SetConfig+0x314>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d124      	bne.n	8003860 <UART_SetConfig+0x2cc>
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <UART_SetConfig+0x2fc>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	d012      	beq.n	800384c <UART_SetConfig+0x2b8>
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	d802      	bhi.n	8003832 <UART_SetConfig+0x29e>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <UART_SetConfig+0x2ac>
 8003830:	e012      	b.n	8003858 <UART_SetConfig+0x2c4>
 8003832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003836:	d006      	beq.n	8003846 <UART_SetConfig+0x2b2>
 8003838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800383c:	d009      	beq.n	8003852 <UART_SetConfig+0x2be>
 800383e:	e00b      	b.n	8003858 <UART_SetConfig+0x2c4>
 8003840:	2300      	movs	r3, #0
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e04d      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003846:	2302      	movs	r3, #2
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e04a      	b.n	80038e2 <UART_SetConfig+0x34e>
 800384c:	2304      	movs	r3, #4
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e047      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003852:	2308      	movs	r3, #8
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e044      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003858:	2310      	movs	r3, #16
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	bf00      	nop
 800385e:	e040      	b.n	80038e2 <UART_SetConfig+0x34e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a11      	ldr	r2, [pc, #68]	; (80038ac <UART_SetConfig+0x318>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d139      	bne.n	80038de <UART_SetConfig+0x34a>
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <UART_SetConfig+0x2fc>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003878:	d027      	beq.n	80038ca <UART_SetConfig+0x336>
 800387a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800387e:	d817      	bhi.n	80038b0 <UART_SetConfig+0x31c>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01c      	beq.n	80038be <UART_SetConfig+0x32a>
 8003884:	e027      	b.n	80038d6 <UART_SetConfig+0x342>
 8003886:	bf00      	nop
 8003888:	efff69f3 	.word	0xefff69f3
 800388c:	40011000 	.word	0x40011000
 8003890:	40023800 	.word	0x40023800
 8003894:	40004400 	.word	0x40004400
 8003898:	40004800 	.word	0x40004800
 800389c:	40004c00 	.word	0x40004c00
 80038a0:	40005000 	.word	0x40005000
 80038a4:	40011400 	.word	0x40011400
 80038a8:	40007800 	.word	0x40007800
 80038ac:	40007c00 	.word	0x40007c00
 80038b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b4:	d006      	beq.n	80038c4 <UART_SetConfig+0x330>
 80038b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038ba:	d009      	beq.n	80038d0 <UART_SetConfig+0x33c>
 80038bc:	e00b      	b.n	80038d6 <UART_SetConfig+0x342>
 80038be:	2300      	movs	r3, #0
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e00e      	b.n	80038e2 <UART_SetConfig+0x34e>
 80038c4:	2302      	movs	r3, #2
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e00b      	b.n	80038e2 <UART_SetConfig+0x34e>
 80038ca:	2304      	movs	r3, #4
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e008      	b.n	80038e2 <UART_SetConfig+0x34e>
 80038d0:	2308      	movs	r3, #8
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e005      	b.n	80038e2 <UART_SetConfig+0x34e>
 80038d6:	2310      	movs	r3, #16
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	bf00      	nop
 80038dc:	e001      	b.n	80038e2 <UART_SetConfig+0x34e>
 80038de:	2310      	movs	r3, #16
 80038e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ea:	d17f      	bne.n	80039ec <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80038ec:	7ffb      	ldrb	r3, [r7, #31]
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d85c      	bhi.n	80039ac <UART_SetConfig+0x418>
 80038f2:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <UART_SetConfig+0x364>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	0800393d 	.word	0x0800393d
 8003900:	0800395d 	.word	0x0800395d
 8003904:	080039ad 	.word	0x080039ad
 8003908:	08003975 	.word	0x08003975
 800390c:	080039ad 	.word	0x080039ad
 8003910:	080039ad 	.word	0x080039ad
 8003914:	080039ad 	.word	0x080039ad
 8003918:	08003995 	.word	0x08003995
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391c:	f7fe fd90 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8003920:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	005a      	lsls	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	441a      	add	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	b29b      	uxth	r3, r3
 8003938:	61bb      	str	r3, [r7, #24]
        break;
 800393a:	e03a      	b.n	80039b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7fe fd94 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 8003940:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	005a      	lsls	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	441a      	add	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	b29b      	uxth	r3, r3
 8003958:	61bb      	str	r3, [r7, #24]
        break;
 800395a:	e02a      	b.n	80039b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	085a      	lsrs	r2, r3, #1
 8003962:	4b5f      	ldr	r3, [pc, #380]	; (8003ae0 <UART_SetConfig+0x54c>)
 8003964:	4413      	add	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6852      	ldr	r2, [r2, #4]
 800396a:	fbb3 f3f2 	udiv	r3, r3, r2
 800396e:	b29b      	uxth	r3, r3
 8003970:	61bb      	str	r3, [r7, #24]
        break;
 8003972:	e01e      	b.n	80039b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003974:	f7fe fca6 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8003978:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	005a      	lsls	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	b29b      	uxth	r3, r3
 8003990:	61bb      	str	r3, [r7, #24]
        break;
 8003992:	e00e      	b.n	80039b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	61bb      	str	r3, [r7, #24]
        break;
 80039aa:	e002      	b.n	80039b2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
        break;
 80039b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d916      	bls.n	80039e6 <UART_SetConfig+0x452>
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d212      	bcs.n	80039e6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	897b      	ldrh	r3, [r7, #10]
 80039d8:	4313      	orrs	r3, r2
 80039da:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	897a      	ldrh	r2, [r7, #10]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	e070      	b.n	8003ac8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
 80039ea:	e06d      	b.n	8003ac8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d859      	bhi.n	8003aa6 <UART_SetConfig+0x512>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x464>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a3b 	.word	0x08003a3b
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	08003aa7 	.word	0x08003aa7
 8003a08:	08003a71 	.word	0x08003a71
 8003a0c:	08003aa7 	.word	0x08003aa7
 8003a10:	08003aa7 	.word	0x08003aa7
 8003a14:	08003aa7 	.word	0x08003aa7
 8003a18:	08003a8f 	.word	0x08003a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7fe fd10 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8003a20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	085a      	lsrs	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	441a      	add	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	61bb      	str	r3, [r7, #24]
        break;
 8003a38:	e038      	b.n	8003aac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a3a:	f7fe fd15 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 8003a3e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	085a      	lsrs	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	61bb      	str	r3, [r7, #24]
        break;
 8003a56:	e029      	b.n	8003aac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	085a      	lsrs	r2, r3, #1
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <UART_SetConfig+0x550>)
 8003a60:	4413      	add	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6852      	ldr	r2, [r2, #4]
 8003a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	61bb      	str	r3, [r7, #24]
        break;
 8003a6e:	e01d      	b.n	8003aac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a70:	f7fe fc28 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8003a74:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	085a      	lsrs	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	441a      	add	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	61bb      	str	r3, [r7, #24]
        break;
 8003a8c:	e00e      	b.n	8003aac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	61bb      	str	r3, [r7, #24]
        break;
 8003aa4:	e002      	b.n	8003aac <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
        break;
 8003aaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	d908      	bls.n	8003ac4 <UART_SetConfig+0x530>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab8:	d204      	bcs.n	8003ac4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	e001      	b.n	8003ac8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	01e84800 	.word	0x01e84800
 8003ae4:	00f42400 	.word	0x00f42400

08003ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01a      	beq.n	8003bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be6:	d10a      	bne.n	8003bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  }
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c3a:	f7fd fc75 	bl	8001528 <HAL_GetTick>
 8003c3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d10e      	bne.n	8003c6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f82a 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e020      	b.n	8003cae <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d10e      	bne.n	8003c98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f814 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e00a      	b.n	8003cae <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	e05d      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d059      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	f7fd fc2a 	bl	8001528 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11b      	bne.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cf4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e042      	b.n	8003da4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d02b      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3a:	d123      	bne.n	8003d84 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d44:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e00f      	b.n	8003da4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d092      	beq.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = 0uL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
            uint32_t hclk = 60000000uL;
 8003db8:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <HAL_ETH_Init+0x134>)
 8003dba:	613b      	str	r3, [r7, #16]
            uint32_t err = ETH_SUCCESS;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]

            /* Check the ETH peripheral state */
            if( heth == NULL )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_ETH_Init+0x1e>
            {
                return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e086      	b.n	8003ed8 <HAL_ETH_Init+0x12c>
            assert_param( IS_ETH_AUTONEGOTIATION( heth->Init.AutoNegotiation ) );
            assert_param( IS_ETH_RX_MODE( heth->Init.RxMode ) );
            assert_param( IS_ETH_CHECKSUM_MODE( heth->Init.ChecksumMode ) );
            assert_param( IS_ETH_MEDIA_INTERFACE( heth->Init.MediaInterface ) );

            if( heth->State == HAL_ETH_STATE_RESET )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <HAL_ETH_Init+0x30>
            {
                /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                HAL_ETH_MspInit( heth );
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fc fc7a 	bl	80006d0 <HAL_ETH_MspInit>
            }

            /* Enable SYSCFG Clock */
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ddc:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_ETH_Init+0x138>)
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	4a40      	ldr	r2, [pc, #256]	; (8003ee4 <HAL_ETH_Init+0x138>)
 8003de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de6:	6453      	str	r3, [r2, #68]	; 0x44
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_ETH_Init+0x138>)
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]

            /* Select MII or RMII Mode*/
            SYSCFG->PMC &= ~( SYSCFG_PMC_MII_RMII_SEL );
 8003df4:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <HAL_ETH_Init+0x13c>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a3b      	ldr	r2, [pc, #236]	; (8003ee8 <HAL_ETH_Init+0x13c>)
 8003dfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dfe:	6053      	str	r3, [r2, #4]
            SYSCFG->PMC |= ( uint32_t ) heth->Init.MediaInterface;
 8003e00:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <HAL_ETH_Init+0x13c>)
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4937      	ldr	r1, [pc, #220]	; (8003ee8 <HAL_ETH_Init+0x13c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            /* Also enable EDFE: Enhanced descriptor format enable. */
            heth->Instance->DMABMR |= ETH_DMABMR_SR | ETH_DMABMR_EDE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 8003e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e24:	601a      	str	r2, [r3, #0]

            /* Wait for software reset */
            while( ( heth->Instance->DMABMR & ETH_DMABMR_SR ) != ( uint32_t ) RESET )
 8003e26:	bf00      	nop
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f6      	bne.n	8003e28 <HAL_ETH_Init+0x7c>
                /* If your program hangs here, please check the value of 'ipconfigUSE_RMII'. */
            }

            /*-------------------------------- MAC Initialization ----------------------*/
            /* Get the ETHERNET MACMIIAR value */
            tmpreg = heth->Instance->MACMIIAR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	617b      	str	r3, [r7, #20]
            /* Clear CSR Clock Range CR[2:0] bits */
            tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 031c 	bic.w	r3, r3, #28
 8003e48:	617b      	str	r3, [r7, #20]

            /* Get hclk frequency value (e.g. 168,000,000) */
            hclk = HAL_RCC_GetHCLKFreq();
 8003e4a:	f7fe faed 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8003e4e:	6138      	str	r0, [r7, #16]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000uL ) && ( hclk < 35000000uL ) )
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4a26      	ldr	r2, [pc, #152]	; (8003eec <HAL_ETH_Init+0x140>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d908      	bls.n	8003e6a <HAL_ETH_Init+0xbe>
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <HAL_ETH_Init+0x144>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d804      	bhi.n	8003e6a <HAL_ETH_Init+0xbe>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div16;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f043 0308 	orr.w	r3, r3, #8
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e027      	b.n	8003eba <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 35000000uL ) && ( hclk < 60000000uL ) )
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <HAL_ETH_Init+0x144>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d908      	bls.n	8003e84 <HAL_ETH_Init+0xd8>
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <HAL_ETH_Init+0x148>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d804      	bhi.n	8003e84 <HAL_ETH_Init+0xd8>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div26;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f043 030c 	orr.w	r3, r3, #12
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e01a      	b.n	8003eba <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 60000000uL ) && ( hclk < 100000000uL ) )
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <HAL_ETH_Init+0x148>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d903      	bls.n	8003e94 <HAL_ETH_Init+0xe8>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <HAL_ETH_Init+0x14c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d911      	bls.n	8003eb8 <HAL_ETH_Init+0x10c>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
            }
            else if( ( hclk >= 100000000uL ) && ( hclk < 150000000uL ) )
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_ETH_Init+0x14c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d908      	bls.n	8003eae <HAL_ETH_Init+0x102>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	; (8003efc <HAL_ETH_Init+0x150>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d804      	bhi.n	8003eae <HAL_ETH_Init+0x102>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div62;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	e005      	b.n	8003eba <HAL_ETH_Init+0x10e>
            }
            else /* ( ( hclk >= 150000000uL ) && ( hclk <= 183000000uL ) ) */
            {
                /* CSR Clock Range between 150-183 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div102;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f043 0310 	orr.w	r3, r3, #16
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	e000      	b.n	8003eba <HAL_ETH_Init+0x10e>
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
 8003eb8:	bf00      	nop
            }

            /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
            heth->Instance->MACMIIAR = ( uint32_t ) tmpreg;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	611a      	str	r2, [r3, #16]

            /* Initialise the MACB and set all PHY properties */
            vMACBProbePhy();
 8003ec2:	f00c ff5d 	bl	8010d80 <vMACBProbePhy>

            /* Config MAC and DMA */
            ETH_MACDMAConfig( heth, err );
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fadd 	bl	8004488 <ETH_MACDMAConfig>

            /* Set ETH HAL State to Ready */
            heth->State = HAL_ETH_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Return function status */
            return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
        }
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	03938700 	.word	0x03938700
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40013800 	.word	0x40013800
 8003eec:	01312cff 	.word	0x01312cff
 8003ef0:	02160ebf 	.word	0x02160ebf
 8003ef4:	039386ff 	.word	0x039386ff
 8003ef8:	05f5e0ff 	.word	0x05f5e0ff
 8003efc:	08f0d17f 	.word	0x08f0d17f

08003f00 <HAL_ETH_IRQHandler>:

/*#define ETH_DMA_ALL_INTS		ETH_DMA_IT_RBU | ETH_DMA_FLAG_T | ETH_DMA_FLAG_AIS */

        #define INT_MASK    ( ( uint32_t ) ~( ETH_DMA_IT_TBU ) )
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
            uint32_t dmasr;

            dmasr = heth->Instance->DMASR & ETH_DMA_ALL_INTS;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003f10:	4413      	add	r3, r2
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_ETH_IRQHandler+0x60>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
            heth->Instance->DMASR = dmasr;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	f241 0314 	movw	r3, #4116	; 0x1014
 8003f22:	4413      	add	r3, r2
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	601a      	str	r2, [r3, #0]

            /* Frame received */
            if( ( dmasr & ( ETH_DMA_FLAG_R | ETH_DMA_IT_RBU ) ) != 0 )
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_ETH_IRQHandler+0x38>
            {
                /* Receive complete callback */
                HAL_ETH_RxCpltCallback( heth );
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f00c fb2c 	bl	8010590 <HAL_ETH_RxCpltCallback>
            }

            /* Frame transmitted */
            if( ( dmasr & ( ETH_DMA_FLAG_T ) ) != 0 )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_ETH_IRQHandler+0x48>
            {
                /* Transfer complete callback */
                HAL_ETH_TxCpltCallback( heth );
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f00c fb52 	bl	80105ec <HAL_ETH_TxCpltCallback>
            }

            /* ETH DMA Error */
            if( ( dmasr & ( ETH_DMA_FLAG_AIS ) ) != 0 )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_ETH_IRQHandler+0x58>
            {
                /* Ethernet Error callback */
                HAL_ETH_ErrorCallback( heth );
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f806 	bl	8003f64 <HAL_ETH_ErrorCallback>
            }
        }
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	3801e7fb 	.word	0x3801e7fb

08003f64 <HAL_ETH_ErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * heth )
        {
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_TxCpltCallback could be implemented in the user file
             */
            ( void ) heth;
        }
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_ETH_ReadPHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint16_t PHYReg,
                                                   uint32_t * RegValue )
        {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	460b      	mov	r3, r1
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0uL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0uL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_RD )
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b82      	cmp	r3, #130	; 0x82
 8003f98:	d102      	bne.n	8003fa0 <HAL_ETH_ReadPHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	77fb      	strb	r3, [r7, #31]
 8003f9e:	e056      	b.n	800404e <HAL_ETH_ReadPHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_ETH_ReadPHYRegister+0x36>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e050      	b.n	8004050 <HAL_ETH_ReadPHYRegister+0xd8>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

                /* Set ETH HAL State to BUSY_RD */
                heth->State = HAL_ETH_STATE_BUSY_RD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2282      	movs	r2, #130	; 0x82
 8003fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f003 031c 	and.w	r3, r3, #28
 8003fcc:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII address register value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address   */
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8a1b      	ldrh	r3, [r3, #16]
 8003fd2:	02db      	lsls	r3, r3, #11
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 8003fdc:	897b      	ldrh	r3, [r7, #10]
 8003fde:	019b      	lsls	r3, r3, #6
 8003fe0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
                tmpreg &= ~ETH_MACMIIAR_MW;                                                   /* Set the read mode            */
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f023 0302 	bic.w	r3, r3, #2
 8003ff0:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit         */
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	61bb      	str	r3, [r7, #24]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 8004002:	f7fd fa91 	bl	8001528 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0uL )
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d107      	bne.n	800402a <HAL_ETH_ReadPHYRegister+0xb2>
                    {
                        /* Get MACMIIDR value */
                        *RegValue = ( uint32_t ) heth->Instance->MACMIIDR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]
                        xResult = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	77fb      	strb	r3, [r7, #31]
                        break;
 8004028:	e009      	b.n	800403e <HAL_ETH_ReadPHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_READ_TO )
 800402a:	f7fd fa7d 	bl	8001528 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d3e6      	bcc.n	8004008 <HAL_ETH_ReadPHYRegister+0x90>
                    {
                        xResult = HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            /* Return function status */
            return xResult;
 800404e:	7ffb      	ldrb	r3, [r7, #31]
        }
 8004050:	4618      	mov	r0, r3
 8004052:	3720      	adds	r7, #32
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_ETH_WritePHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint16_t PHYReg,
                                                    uint32_t RegValue )
        {
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	460b      	mov	r3, r1
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_WR )
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b42      	cmp	r3, #66	; 0x42
 8004078:	d102      	bne.n	8004080 <HAL_ETH_WritePHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e056      	b.n	800412e <HAL_ETH_WritePHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_ETH_WritePHYRegister+0x36>
 800408a:	2302      	movs	r3, #2
 800408c:	e050      	b.n	8004130 <HAL_ETH_WritePHYRegister+0xd8>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

                /* Set ETH HAL State to BUSY_WR */
                heth->State = HAL_ETH_STATE_BUSY_WR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2242      	movs	r2, #66	; 0x42
 800409a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f003 031c 	and.w	r3, r3, #28
 80040ac:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII register address value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address */
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8a1b      	ldrh	r3, [r3, #16]
 80040b2:	02db      	lsls	r3, r3, #11
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 80040bc:	897b      	ldrh	r3, [r7, #10]
 80040be:	019b      	lsls	r3, r3, #6
 80040c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MW;                                                    /* Set the write mode */
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit */
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	61bb      	str	r3, [r7, #24]

                /* Give the value to the MII data register */
                heth->Instance->MACMIIDR = ( uint16_t ) RegValue;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	615a      	str	r2, [r3, #20]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 80040ec:	f7fd fa1c 	bl	8001528 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0ul )
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <HAL_ETH_WritePHYRegister+0xb2>
                    {
                        xResult = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
                        break;
 8004108:	e009      	b.n	800411e <HAL_ETH_WritePHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_WRITE_TO )
 800410a:	f7fd fa0d 	bl	8001528 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d3eb      	bcc.n	80040f2 <HAL_ETH_WritePHYRegister+0x9a>
                    {
                        xResult = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            /* Return function status */
            return xResult;
 800412e:	7ffb      	ldrb	r3, [r7, #31]
        }
 8004130:	4618      	mov	r0, r3
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start( ETH_HandleTypeDef * heth )
        {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_ETH_Start+0x16>
 800414a:	2302      	movs	r3, #2
 800414c:	e01f      	b.n	800418e <HAL_ETH_Start+0x56>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Enable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionEnable( heth );
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fb62 	bl	8004828 <ETH_MACTransmissionEnable>

            /* Enable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionEnable( heth );
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fb83 	bl	8004870 <ETH_MACReceptionEnable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fbfe 	bl	800496c <ETH_FlushTransmitFIFO>

            /* Start DMA transmission */
            ETH_DMATransmissionEnable( heth );
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fba3 	bl	80048bc <ETH_DMATransmissionEnable>

            /* Start DMA reception */
            ETH_DMAReceptionEnable( heth );
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fbcc 	bl	8004914 <ETH_DMAReceptionEnable>

            /* Set the ETH state to READY*/
            heth->State = HAL_ETH_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 800418c:	2300      	movs	r3, #0
        }
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_ETH_Stop>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop( ETH_HandleTypeDef * heth )
        {
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_ETH_Stop+0x16>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e01f      	b.n	80041ec <HAL_ETH_Stop+0x56>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Stop DMA transmission */
            ETH_DMATransmissionDisable( heth );
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fb93 	bl	80048e8 <ETH_DMATransmissionDisable>

            /* Stop DMA reception */
            ETH_DMAReceptionDisable( heth );
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fbbc 	bl	8004940 <ETH_DMAReceptionDisable>

            /* Disable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionDisable( heth );
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fb64 	bl	8004896 <ETH_MACReceptionDisable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fbcc 	bl	800496c <ETH_FlushTransmitFIFO>

            /* Disable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionDisable( heth );
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb39 	bl	800484c <ETH_MACTransmissionDisable>

            /* Set the ETH state*/
            heth->State = HAL_ETH_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 80041ea:	2300      	movs	r3, #0
        }
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <vRegisterDelay>:

        static void vRegisterDelay()
        {
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
             * 100 Mhz = 160 loops
             *  84 Mhz = 134 loops
             */
        #define WAIT_TIME_NS    1600uL          /* 1.6 microseconds */
        #define CPU_MAX_FREQ    SystemCoreClock /* 84, 100, 168 or 180 MHz */
            uint32_t NOP_COUNT = ( WAIT_TIME_NS * ( CPU_MAX_FREQ / 1000uL ) ) / 1000000uL;
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <vRegisterDelay+0x44>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a0f      	ldr	r2, [pc, #60]	; (800423c <vRegisterDelay+0x48>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800420a:	fb02 f303 	mul.w	r3, r2, r3
 800420e:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <vRegisterDelay+0x4c>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	0c9b      	lsrs	r3, r3, #18
 8004216:	603b      	str	r3, [r7, #0]

            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	e003      	b.n	8004226 <vRegisterDelay+0x32>
            {
                __NOP();
 800421e:	bf00      	nop
            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3b01      	subs	r3, #1
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f8      	bne.n	800421e <vRegisterDelay+0x2a>
            }
        }
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20016900 	.word	0x20016900
 800423c:	10624dd3 	.word	0x10624dd3
 8004240:	431bde83 	.word	0x431bde83

08004244 <prvWriteMACFCR>:

        static void prvWriteMACFCR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACFCR = ulValue;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	619a      	str	r2, [r3, #24]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACFCR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]

            vRegisterDelay();
 800425c:	f7ff ffca 	bl	80041f4 <vRegisterDelay>

            heth->Instance->MACFCR = ulValue;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	619a      	str	r2, [r3, #24]
        }
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <prvWriteDMAOMR>:

        static void prvWriteDMAOMR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->DMAOMR = ulValue;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004282:	4413      	add	r3, r2
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	601a      	str	r2, [r3, #0]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->DMAOMR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004290:	4413      	add	r3, r2
 8004292:	681b      	ldr	r3, [r3, #0]

            vRegisterDelay();
 8004294:	f7ff ffae 	bl	80041f4 <vRegisterDelay>

            heth->Instance->DMAOMR = ulValue;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	f241 0318 	movw	r3, #4120	; 0x1018
 80042a0:	4413      	add	r3, r2
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	601a      	str	r2, [r3, #0]
        }
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <prvWriteMACCR>:

        static void prvWriteMACCR( ETH_HandleTypeDef * heth,
                                   uint32_t ulValue )
        {
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACCR = ulValue;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	601a      	str	r2, [r3, #0]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]

            vRegisterDelay();
 80042c6:	f7ff ff95 	bl	80041f4 <vRegisterDelay>

            heth->Instance->MACCR = ulValue;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	601a      	str	r2, [r3, #0]
        }
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_ETH_ConfigMAC>:
 * @param  macconf: MAC Configuration structure
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ConfigMAC( ETH_HandleTypeDef * heth,
                                             ETH_MACInitTypeDef * macconf )
        {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
            uint32_t tmpreg = 0uL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]

            /* Process Locked */
            __HAL_LOCK( heth );
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_ETH_ConfigMAC+0x1c>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0c1      	b.n	800447c <HAL_ETH_ConfigMAC+0x1a0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            assert_param( IS_ETH_SPEED( heth->Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( heth->Init.DuplexMode ) );

            if( macconf != NULL )
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8099 	beq.w	8004442 <HAL_ETH_ConfigMAC+0x166>
                assert_param( IS_ETH_VLAN_TAG_COMPARISON( macconf->VLANTagComparison ) );
                assert_param( IS_ETH_VLAN_TAG_IDENTIFIER( macconf->VLANTagIdentifier ) );

                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]
                /* Clear WD, PCE, PS, TE and RE bits */
                tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4b5a      	ldr	r3, [pc, #360]	; (8004484 <HAL_ETH_ConfigMAC+0x1a8>)
 800431c:	4013      	ands	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) (
                    macconf->Watchdog |
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
                    macconf->Jabber |
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
                    macconf->Watchdog |
 8004328:	431a      	orrs	r2, r3
                    macconf->InterFrameGap |
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
                    macconf->Jabber |
 800432e:	431a      	orrs	r2, r3
                    macconf->CarrierSense |
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
                    macconf->InterFrameGap |
 8004334:	431a      	orrs	r2, r3
                    heth->Init.Speed |
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
                    macconf->CarrierSense |
 800433a:	431a      	orrs	r2, r3
                    macconf->ReceiveOwn |
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
                    heth->Init.Speed |
 8004340:	431a      	orrs	r2, r3
                    macconf->LoopbackMode |
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
                    macconf->ReceiveOwn |
 8004346:	431a      	orrs	r2, r3
                    heth->Init.DuplexMode |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
                    macconf->LoopbackMode |
 800434c:	431a      	orrs	r2, r3
                    macconf->ChecksumOffload |
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
                    heth->Init.DuplexMode |
 8004352:	431a      	orrs	r2, r3
                    macconf->RetryTransmission |
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
                    macconf->ChecksumOffload |
 8004358:	431a      	orrs	r2, r3
                    macconf->AutomaticPadCRCStrip |
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6a1b      	ldr	r3, [r3, #32]
                    macconf->RetryTransmission |
 800435e:	431a      	orrs	r2, r3
                    macconf->BackOffLimit |
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    macconf->AutomaticPadCRCStrip |
 8004364:	431a      	orrs	r2, r3
                    macconf->DeferralCheck );
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    macconf->BackOffLimit |
 800436a:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) (
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 8004372:	68f9      	ldr	r1, [r7, #12]
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff9a 	bl	80042ae <prvWriteMACCR>

                /*----------------------- ETHERNET MACFFR Configuration --------------------*/
                /* Write to ETHERNET MACFFR */
                heth->Instance->MACFFR = ( uint32_t ) (
                    macconf->ReceiveAll |
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                    macconf->SourceAddrFilter |
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    macconf->ReceiveAll |
 8004382:	431a      	orrs	r2, r3
                    macconf->PassControlFrames |
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    macconf->SourceAddrFilter |
 8004388:	431a      	orrs	r2, r3
                    macconf->BroadcastFramesReception |
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    macconf->PassControlFrames |
 800438e:	431a      	orrs	r2, r3
                    macconf->DestinationAddrFilter |
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    macconf->BroadcastFramesReception |
 8004394:	431a      	orrs	r2, r3
                    macconf->PromiscuousMode |
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                    macconf->DestinationAddrFilter |
 800439a:	431a      	orrs	r2, r3
                    macconf->MulticastFramesFilter |
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    macconf->PromiscuousMode |
 80043a0:	ea42 0103 	orr.w	r1, r2, r3
                    macconf->UnicastFramesFilter );
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                heth->Instance->MACFFR = ( uint32_t ) (
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
                    macconf->MulticastFramesFilter |
 80043ac:	430a      	orrs	r2, r1
                heth->Instance->MACFFR = ( uint32_t ) (
 80043ae:	605a      	str	r2, [r3, #4]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACFFR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 80043b8:	f7ff ff1c 	bl	80041f4 <vRegisterDelay>
                heth->Instance->MACFFR = tmpreg;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	605a      	str	r2, [r3, #4]

                /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
                /* Write to ETHERNET MACHTHR */
                heth->Instance->MACHTHR = ( uint32_t ) macconf->HashTableHigh;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043cc:	609a      	str	r2, [r3, #8]

                /* Write to ETHERNET MACHTLR */
                heth->Instance->MACHTLR = ( uint32_t ) macconf->HashTableLow;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043d6:	60da      	str	r2, [r3, #12]
                /*----------------------- ETHERNET MACFCR Configuration --------------------*/

                /* Get the ETHERNET MACFCR value */
                tmpreg = heth->Instance->MACFCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	60fb      	str	r3, [r7, #12]
                /* Clear xx bits */
                tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80043e6:	4013      	ands	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( (
                                             macconf->PauseTime << 16 ) |
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	041a      	lsls	r2, r3, #16
                                         macconf->ZeroQuantaPause |
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                                             macconf->PauseTime << 16 ) |
 80043f4:	431a      	orrs	r2, r3
                                         macconf->PauseLowThreshold |
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                                         macconf->ZeroQuantaPause |
 80043fa:	431a      	orrs	r2, r3
                                         macconf->UnicastPauseFrameDetect |
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                                         macconf->PauseLowThreshold |
 8004400:	431a      	orrs	r2, r3
                                         macconf->ReceiveFlowControl |
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                                         macconf->UnicastPauseFrameDetect |
 8004406:	431a      	orrs	r2, r3
                                         macconf->TransmitFlowControl );
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                         macconf->ReceiveFlowControl |
 800440c:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) ( (
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACFCR */
                prvWriteMACFCR( heth, tmpreg );
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff ff14 	bl	8004244 <prvWriteMACFCR>

                /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                                           macconf->VLANTagIdentifier );
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	61da      	str	r2, [r3, #28]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACVLANTR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 8004434:	f7ff fede 	bl	80041f4 <vRegisterDelay>
                heth->Instance->MACVLANTR = tmpreg;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	61da      	str	r2, [r3, #28]
 8004440:	e013      	b.n	800446a <HAL_ETH_ConfigMAC+0x18e>
            }
            else /* macconf == NULL : here we just configure Speed and Duplex mode */
            {
                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]

                /* Clear FES and DM bits */
                tmpreg &= ~( ( uint32_t ) 0x00004800uL );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004450:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( heth->Init.Speed | heth->Init.DuplexMode );
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 8004462:	68f9      	ldr	r1, [r7, #12]
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff ff22 	bl	80042ae <prvWriteMACCR>
            }

            /* Set the ETH state to Ready */
            heth->State = HAL_ETH_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Return function status */
            return HAL_OK;
 800447a:	2300      	movs	r3, #0
        }
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	ff20810f 	.word	0xff20810f

08004488 <ETH_MACDMAConfig>:
 * @param  err: Ethernet Init error
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth,
                                      uint32_t err )
        {
 8004488:	b580      	push	{r7, lr}
 800448a:	b0b0      	sub	sp, #192	; 0xc0
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
            ETH_MACInitTypeDef macinit;
            ETH_DMAInitTypeDef dmainit;
            uint32_t tmpreg = 0uL;
 8004492:	2300      	movs	r3, #0
 8004494:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            if( err != ETH_SUCCESS ) /* Auto-negotiation failed */
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <ETH_MACDMAConfig+0x26>
            {
                /* Set Ethernet duplex mode to Full-duplex */
                heth->Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a4:	60da      	str	r2, [r3, #12]

                /* Set Ethernet speed to 100M */
                heth->Init.Speed = ETH_SPEED_100M;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044ac:	609a      	str	r2, [r3, #8]
            }

            /* Ethernet MAC default initialization **************************************/
            macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	64bb      	str	r3, [r7, #72]	; 0x48
            macinit.Jabber = ETH_JABBER_ENABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	64fb      	str	r3, [r7, #76]	; 0x4c
            macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80044b6:	2300      	movs	r3, #0
 80044b8:	653b      	str	r3, [r7, #80]	; 0x50
            macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	657b      	str	r3, [r7, #84]	; 0x54
            macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80044be:	2300      	movs	r3, #0
 80044c0:	65bb      	str	r3, [r7, #88]	; 0x58
            macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	65fb      	str	r3, [r7, #92]	; 0x5c

            if( heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <ETH_MACDMAConfig+0x4e>
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80044ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d2:	663b      	str	r3, [r7, #96]	; 0x60
 80044d4:	e001      	b.n	80044da <ETH_MACDMAConfig+0x52>
            }
            else
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	663b      	str	r3, [r7, #96]	; 0x60
            }

            macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80044da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044de:	667b      	str	r3, [r7, #100]	; 0x64
            macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	66bb      	str	r3, [r7, #104]	; 0x68
            macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80044e4:	2300      	movs	r3, #0
 80044e6:	66fb      	str	r3, [r7, #108]	; 0x6c
            macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	673b      	str	r3, [r7, #112]	; 0x70
            macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	677b      	str	r3, [r7, #116]	; 0x74
            macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	67bb      	str	r3, [r7, #120]	; 0x78
            macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80044f4:	2340      	movs	r3, #64	; 0x40
 80044f6:	67fb      	str	r3, [r7, #124]	; 0x7c
            macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80044fe:	2300      	movs	r3, #0
 8004500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004504:	2300      	movs	r3, #0
 8004506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800450a:	2300      	movs	r3, #0
 800450c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            macinit.HashTableHigh = 0x0uL;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            macinit.HashTableLow = 0x0uL;
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            macinit.PauseTime = 0x0uL;
 8004522:	2300      	movs	r3, #0
 8004524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800453a:	2300      	movs	r3, #0
 800453c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004540:	2300      	movs	r3, #0
 8004542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004546:	2300      	movs	r3, #0
 8004548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            macinit.VLANTagIdentifier = 0x0uL;
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

            /*------------------------ ETHERNET MACCR Configuration --------------------*/
            /* Get the ETHERNET MACCR value */
            tmpreg = heth->Instance->MACCR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear WD, PCE, PS, TE and RE bits */
            tmpreg &= ETH_MACCR_CLEAR_MASK;
 800455c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004560:	4b91      	ldr	r3, [pc, #580]	; (80047a8 <ETH_MACDMAConfig+0x320>)
 8004562:	4013      	ands	r3, r2
 8004564:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the IPCO bit according to ETH ChecksumOffload value */
            /* Set the DR bit according to ETH RetryTransmission value */
            /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
            /* Set the BL bit according to ETH BackOffLimit value */
            /* Set the DC bit according to ETH DeferralCheck value */
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 8004568:	6cba      	ldr	r2, [r7, #72]	; 0x48
                                     macinit.Jabber |
 800456a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 800456c:	431a      	orrs	r2, r3
                                     macinit.InterFrameGap |
 800456e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                                     macinit.Jabber |
 8004570:	431a      	orrs	r2, r3
                                     macinit.CarrierSense |
 8004572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                                     macinit.InterFrameGap |
 8004574:	431a      	orrs	r2, r3
                                     heth->Init.Speed |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
                                     macinit.CarrierSense |
 800457a:	431a      	orrs	r2, r3
                                     macinit.ReceiveOwn |
 800457c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                                     heth->Init.Speed |
 800457e:	431a      	orrs	r2, r3
                                     macinit.LoopbackMode |
 8004580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                                     macinit.ReceiveOwn |
 8004582:	431a      	orrs	r2, r3
                                     heth->Init.DuplexMode |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
                                     macinit.LoopbackMode |
 8004588:	431a      	orrs	r2, r3
                                     macinit.ChecksumOffload |
 800458a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                                     heth->Init.DuplexMode |
 800458c:	431a      	orrs	r2, r3
                                     macinit.RetryTransmission |
 800458e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                                     macinit.ChecksumOffload |
 8004590:	431a      	orrs	r2, r3
                                     macinit.AutomaticPadCRCStrip |
 8004592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                                     macinit.RetryTransmission |
 8004594:	431a      	orrs	r2, r3
                                     macinit.BackOffLimit |
 8004596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                                     macinit.AutomaticPadCRCStrip |
 8004598:	431a      	orrs	r2, r3
                                     macinit.DeferralCheck );
 800459a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                                     macinit.BackOffLimit |
 800459c:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 800459e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET MACCR */
            prvWriteMACCR( heth, tmpreg );
 80045a8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fe7e 	bl	80042ae <prvWriteMACCR>
            /* Set the DAIF bit according to ETH DestinationAddrFilter value */
            /* Set the PR bit according to ETH PromiscuousMode value */
            /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
            /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
            /* Write to ETHERNET MACFFR */
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 80045b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                                    macinit.SourceAddrFilter |
 80045b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 80045b6:	431a      	orrs	r2, r3
                                                    macinit.PassControlFrames |
 80045b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                                    macinit.SourceAddrFilter |
 80045ba:	431a      	orrs	r2, r3
                                                    macinit.BroadcastFramesReception |
 80045bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                                    macinit.PassControlFrames |
 80045c0:	431a      	orrs	r2, r3
                                                    macinit.DestinationAddrFilter |
 80045c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                                    macinit.BroadcastFramesReception |
 80045c6:	431a      	orrs	r2, r3
                                                    macinit.PromiscuousMode |
 80045c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                                    macinit.DestinationAddrFilter |
 80045cc:	431a      	orrs	r2, r3
                                                    macinit.MulticastFramesFilter |
 80045ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                                    macinit.PromiscuousMode |
 80045d2:	ea42 0103 	orr.w	r1, r2, r3
                                                    macinit.UnicastFramesFilter );
 80045d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
                                                    macinit.MulticastFramesFilter |
 80045de:	430a      	orrs	r2, r1
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 80045e0:	605a      	str	r2, [r3, #4]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACFFR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 80045ec:	f7ff fe02 	bl	80041f4 <vRegisterDelay>
            heth->Instance->MACFFR = tmpreg;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045f8:	605a      	str	r2, [r3, #4]

            /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
            /* Write to ETHERNET MACHTHR */
            heth->Instance->MACHTHR = ( uint32_t ) macinit.HashTableHigh;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004602:	609a      	str	r2, [r3, #8]

            /* Write to ETHERNET MACHTLR */
            heth->Instance->MACHTLR = ( uint32_t ) macinit.HashTableLow;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800460c:	60da      	str	r2, [r3, #12]
            /*----------------------- ETHERNET MACFCR Configuration -------------------*/

            /* Get the ETHERNET MACFCR value */
            tmpreg = heth->Instance->MACFCR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004618:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800461c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004620:	4013      	ands	r3, r2
 8004622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
            /* Set the PLT bit according to ETH PauseLowThreshold value */
            /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
            /* Set the RFE bit according to ETH ReceiveFlowControl value */
            /* Set the TFE bit according to ETH TransmitFlowControl value */
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 8004626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800462a:	041a      	lsls	r2, r3, #16
                                     macinit.ZeroQuantaPause |
 800462c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 8004630:	431a      	orrs	r2, r3
                                     macinit.PauseLowThreshold |
 8004632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                                     macinit.ZeroQuantaPause |
 8004636:	431a      	orrs	r2, r3
                                     macinit.UnicastPauseFrameDetect |
 8004638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                                     macinit.PauseLowThreshold |
 800463c:	431a      	orrs	r2, r3
                                     macinit.ReceiveFlowControl |
 800463e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                                     macinit.UnicastPauseFrameDetect |
 8004642:	431a      	orrs	r2, r3
                                     macinit.TransmitFlowControl );
 8004644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                                     macinit.ReceiveFlowControl |
 8004648:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 800464a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET MACFCR */
            prvWriteMACFCR( heth, tmpreg );
 8004654:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff fdf3 	bl	8004244 <prvWriteMACFCR>

            /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
            /* Set the ETV bit according to ETH VLANTagComparison value */
            /* Set the VL bit according to ETH VLANTagIdentifier value */
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 800465e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                                       macinit.VLANTagIdentifier );
 8004662:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	61da      	str	r2, [r3, #28]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACVLANTR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 8004678:	f7ff fdbc 	bl	80041f4 <vRegisterDelay>
            heth->Instance->MACVLANTR = tmpreg;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004684:	61da      	str	r2, [r3, #28]

            /* Ethernet DMA default initialization ************************************/
            dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
            dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800468a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800468e:	60fb      	str	r3, [r7, #12]
            dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
            dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8004694:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004698:	617b      	str	r3, [r7, #20]
            dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800469a:	2300      	movs	r3, #0
 800469c:	61bb      	str	r3, [r7, #24]
            dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
            dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	623b      	str	r3, [r7, #32]
            dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
            dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80046aa:	2304      	movs	r3, #4
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
            dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80046ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80046b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046b8:	633b      	str	r3, [r7, #48]	; 0x30
            dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80046ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
            dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80046c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046c4:	63bb      	str	r3, [r7, #56]	; 0x38
            dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            dmainit.DescriptorSkipLength = 0x0uL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	643b      	str	r3, [r7, #64]	; 0x40
            dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80046ce:	2300      	movs	r3, #0
 80046d0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Get the ETHERNET DMAOMR value */
            tmpreg = heth->Instance->DMAOMR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	f241 0318 	movw	r3, #4120	; 0x1018
 80046da:	4413      	add	r3, r2
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80046e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046e6:	4b31      	ldr	r3, [pc, #196]	; (80047ac <ETH_MACDMAConfig+0x324>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            /* Set the TTC bit according to ETH TransmitThresholdControl value */
            /* Set the FEF bit according to ETH ForwardErrorFrames value */
            /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
            /* Set the RTC bit according to ETH ReceiveThresholdControl value */
            /* Set the OSF bit according to ETH SecondFrameOperate value */
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80046ee:	68ba      	ldr	r2, [r7, #8]
                                     dmainit.ReceiveStoreForward |
 80046f0:	68fb      	ldr	r3, [r7, #12]
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80046f2:	431a      	orrs	r2, r3
                                     dmainit.FlushReceivedFrame |
 80046f4:	693b      	ldr	r3, [r7, #16]
                                     dmainit.ReceiveStoreForward |
 80046f6:	431a      	orrs	r2, r3
                                     dmainit.TransmitStoreForward |
 80046f8:	697b      	ldr	r3, [r7, #20]
                                     dmainit.FlushReceivedFrame |
 80046fa:	431a      	orrs	r2, r3
                                     dmainit.TransmitThresholdControl |
 80046fc:	69bb      	ldr	r3, [r7, #24]
                                     dmainit.TransmitStoreForward |
 80046fe:	431a      	orrs	r2, r3
                                     dmainit.ForwardErrorFrames |
 8004700:	69fb      	ldr	r3, [r7, #28]
                                     dmainit.TransmitThresholdControl |
 8004702:	431a      	orrs	r2, r3
                                     dmainit.ForwardUndersizedGoodFrames |
 8004704:	6a3b      	ldr	r3, [r7, #32]
                                     dmainit.ForwardErrorFrames |
 8004706:	431a      	orrs	r2, r3
                                     dmainit.ReceiveThresholdControl |
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                                     dmainit.ForwardUndersizedGoodFrames |
 800470a:	431a      	orrs	r2, r3
                                     dmainit.SecondFrameOperate );
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                     dmainit.ReceiveThresholdControl |
 800470e:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 8004710:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

            /* Write to ETHERNET DMAOMR */
            prvWriteDMAOMR( heth, tmpreg );
 800471a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff fda6 	bl	8004270 <prvWriteDMAOMR>
            /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
            /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
            /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
            /* Set the DSL bit according to ETH DesciptorSkipLength value */
            /* Set the PR and DA bits according to ETH DMAArbitration value */
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 8004724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                                    dmainit.FixedBurst |
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 8004728:	431a      	orrs	r2, r3
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                    dmainit.FixedBurst |
 800472c:	431a      	orrs	r2, r3
                                                    dmainit.TxDMABurstLength |
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004730:	431a      	orrs	r2, r3
                                                    dmainit.EnhancedDescriptorFormat |
 8004732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                                    dmainit.TxDMABurstLength |
 8004734:	431a      	orrs	r2, r3
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	009b      	lsls	r3, r3, #2
                                                    dmainit.EnhancedDescriptorFormat |
 800473a:	431a      	orrs	r2, r3
                                                    dmainit.DMAArbitration |
 800473c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 800473e:	431a      	orrs	r2, r3
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474c:	601a      	str	r2, [r3, #0]
                                                    ETH_DMABMR_USP ); /* Enable use of separate PBL for Rx and Tx */

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->DMABMR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            vRegisterDelay();
 800475c:	f7ff fd4a 	bl	80041f4 <vRegisterDelay>
            heth->Instance->DMABMR = tmpreg;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004768:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800476c:	601a      	str	r2, [r3, #0]

            if( heth->Init.RxMode == ETH_RXINTERRUPT_MODE )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10d      	bne.n	8004792 <ETH_MACDMAConfig+0x30a>
            {
                /* Enable the Ethernet Rx Interrupt */
                __HAL_ETH_DMA_ENABLE_IT( ( heth ), ETH_DMA_IT_NIS | ETH_DMA_IT_R );
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f241 031c 	movw	r3, #4124	; 0x101c
 800477e:	4413      	add	r3, r2
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6811      	ldr	r1, [r2, #0]
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <ETH_MACDMAConfig+0x328>)
 8004788:	431a      	orrs	r2, r3
 800478a:	f241 031c 	movw	r3, #4124	; 0x101c
 800478e:	440b      	add	r3, r1
 8004790:	601a      	str	r2, [r3, #0]
            }

            /* Initialize MAC address in ethernet MAC */
            ETH_MACAddressConfig( heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr );
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	461a      	mov	r2, r3
 8004798:	2100      	movs	r1, #0
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f80a 	bl	80047b4 <ETH_MACAddressConfig>
        }
 80047a0:	bf00      	nop
 80047a2:	37c0      	adds	r7, #192	; 0xc0
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	ff20810f 	.word	0xff20810f
 80047ac:	f8de3f23 	.word	0xf8de3f23
 80047b0:	00010040 	.word	0x00010040

080047b4 <ETH_MACAddressConfig>:
 * @retval HAL status
 */
        static void ETH_MACAddressConfig( ETH_HandleTypeDef * heth,
                                          uint32_t MacAddr,
                                          uint8_t * Addr )
        {
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
            /* Check the parameters */
            assert_param( IS_ETH_MAC_ADDRESS0123( MacAddr ) );

            /* Calculate the selected MAC address high register */
            /* Register ETH_MACA0HR: Bit 31 MO: Always 1. */
            tmpreg = 0x80000000uL | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3305      	adds	r3, #5
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	3204      	adds	r2, #4
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047d4:	617b      	str	r3, [r7, #20]
            /* Load the selected MAC address high register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + MacAddr ) ) ) = tmpreg;
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <ETH_MACAddressConfig+0x6c>)
 80047da:	4413      	add	r3, r2
 80047dc:	461a      	mov	r2, r3
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	6013      	str	r3, [r2, #0]
            /* Calculate the selected MAC address low register */
            tmpreg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) Addr[ 1 ] << 8 ) | Addr[ 0 ];
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3303      	adds	r3, #3
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	061a      	lsls	r2, r3, #24
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3302      	adds	r3, #2
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3301      	adds	r3, #1
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	4313      	orrs	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	7812      	ldrb	r2, [r2, #0]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]

            /* Load the selected MAC address low register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + MacAddr ) ) ) = tmpreg;
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <ETH_MACAddressConfig+0x70>)
 800480a:	4413      	add	r3, r2
 800480c:	461a      	mov	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	6013      	str	r3, [r2, #0]
        }
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40028040 	.word	0x40028040
 8004824:	40028044 	.word	0x40028044

08004828 <ETH_MACTransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionEnable( ETH_HandleTypeDef * heth )
        {
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_TE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f043 0308 	orr.w	r3, r3, #8
 800483a:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 800483c:	68f9      	ldr	r1, [r7, #12]
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff fd35 	bl	80042ae <prvWriteMACCR>
        }
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <ETH_MACTransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionDisable( ETH_HandleTypeDef * heth )
        {
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_TE );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 0308 	bic.w	r3, r3, #8
 800485e:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8004860:	68f9      	ldr	r1, [r7, #12]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fd23 	bl	80042ae <prvWriteMACCR>
        }
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <ETH_MACReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionEnable( ETH_HandleTypeDef * heth )
        {
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_RE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f043 0304 	orr.w	r3, r3, #4
 8004882:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fd10 	bl	80042ae <prvWriteMACCR>
        }
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <ETH_MACReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionDisable( ETH_HandleTypeDef * heth )
        {
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_RE );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fcfd 	bl	80042ae <prvWriteMACCR>
        }
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <ETH_DMATransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionEnable( ETH_HandleTypeDef * heth )
        {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
            /* Enable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_ST;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80048cc:	4413      	add	r3, r2
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048d4:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff fcc8 	bl	8004270 <prvWriteDMAOMR>
        }
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <ETH_DMATransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionDisable( ETH_HandleTypeDef * heth )
        {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
            /* Disable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_ST );
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80048f8:	4413      	add	r3, r2
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004900:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff fcb2 	bl	8004270 <prvWriteDMAOMR>
        }
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <ETH_DMAReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionEnable( ETH_HandleTypeDef * heth )
        {
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
            /* Enable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_SR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	f241 0318 	movw	r3, #4120	; 0x1018
 8004924:	4413      	add	r3, r2
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff fc9c 	bl	8004270 <prvWriteDMAOMR>
        }
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <ETH_DMAReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionDisable( ETH_HandleTypeDef * heth )
        {
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
            /* Disable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_SR );
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004950:	4413      	add	r3, r2
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 0302 	bic.w	r3, r3, #2
 8004958:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff fc86 	bl	8004270 <prvWriteDMAOMR>
        }
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <ETH_FlushTransmitFIFO>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_FlushTransmitFIFO( ETH_HandleTypeDef * heth )
        {
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
            /* Set the Flush Transmit FIFO bit */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_FTF;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	f241 0318 	movw	r3, #4120	; 0x1018
 800497c:	4413      	add	r3, r2
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004984:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fc70 	bl	8004270 <prvWriteDMAOMR>
        }
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800499e:	201c      	movs	r0, #28
 80049a0:	f002 fd9c 	bl	80074dc <pvPortMalloc>
 80049a4:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f9be 	bl	8004d38 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80049bc:	687b      	ldr	r3, [r7, #4]
    }
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08c      	sub	sp, #48	; 0x30
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
    EventBits_t uxReturn, uxControlBits = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	623b      	str	r3, [r7, #32]

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <xEventGroupWaitBits+0x2a>
 80049e8:	4951      	ldr	r1, [pc, #324]	; (8004b30 <xEventGroupWaitBits+0x168>)
 80049ea:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80049ee:	f7fc f86e 	bl	8000ace <vAssertCalled>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <xEventGroupWaitBits+0x3e>
 80049fc:	494c      	ldr	r1, [pc, #304]	; (8004b30 <xEventGroupWaitBits+0x168>)
 80049fe:	f240 1049 	movw	r0, #329	; 0x149
 8004a02:	f7fc f864 	bl	8000ace <vAssertCalled>
    configASSERT( uxBitsToWaitFor != 0 );
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <xEventGroupWaitBits+0x4e>
 8004a0c:	4948      	ldr	r1, [pc, #288]	; (8004b30 <xEventGroupWaitBits+0x168>)
 8004a0e:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8004a12:	f7fc f85c 	bl	8000ace <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a16:	f001 ff37 	bl	8006888 <xTaskGetSchedulerState>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <xEventGroupWaitBits+0x5e>
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <xEventGroupWaitBits+0x62>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <xEventGroupWaitBits+0x64>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <xEventGroupWaitBits+0x72>
 8004a30:	493f      	ldr	r1, [pc, #252]	; (8004b30 <xEventGroupWaitBits+0x168>)
 8004a32:	f240 104d 	movw	r0, #333	; 0x14d
 8004a36:	f7fc f84a 	bl	8000ace <vAssertCalled>
        }
    #endif

    vTaskSuspendAll();
 8004a3a:	f001 fac9 	bl	8005fd0 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	61fb      	str	r3, [r7, #28]

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	69f8      	ldr	r0, [r7, #28]
 8004a4a:	f000 f953 	bl	8004cf4 <prvTestWaitCondition>
 8004a4e:	61b8      	str	r0, [r7, #24]

        if( xWaitConditionMet != pdFALSE )
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00e      	beq.n	8004a74 <xEventGroupWaitBits+0xac>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTicksToWait = ( TickType_t ) 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d028      	beq.n	8004ab6 <xEventGroupWaitBits+0xee>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e020      	b.n	8004ab6 <xEventGroupWaitBits+0xee>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <xEventGroupWaitBits+0xbc>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTimeoutOccurred = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	623b      	str	r3, [r7, #32]
 8004a82:	e018      	b.n	8004ab6 <xEventGroupWaitBits+0xee>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <xEventGroupWaitBits+0xca>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <xEventGroupWaitBits+0xd8>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	1d18      	adds	r0, r3, #4
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aac:	4619      	mov	r1, r3
 8004aae:	f001 fc75 	bl	800639c <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8004ab6:	f001 fa99 	bl	8005fec <xTaskResumeAll>
 8004aba:	6178      	str	r0, [r7, #20]

    if( xTicksToWait != ( TickType_t ) 0 )
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d031      	beq.n	8004b26 <xEventGroupWaitBits+0x15e>
    {
        if( xAlreadyYielded == pdFALSE )
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <xEventGroupWaitBits+0x110>
        {
            portYIELD_WITHIN_API();
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <xEventGroupWaitBits+0x16c>)
 8004aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8004ad8:	f002 f85e 	bl	8006b98 <uxTaskResetEventItemValue>
 8004adc:	62f8      	str	r0, [r7, #44]	; 0x2c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11a      	bne.n	8004b1e <xEventGroupWaitBits+0x156>
        {
            taskENTER_CRITICAL();
 8004ae8:	f002 ffd6 	bl	8007a98 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004af8:	f000 f8fc 	bl	8004cf4 <prvTestWaitCondition>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <xEventGroupWaitBits+0x14e>
                {
                    if( xClearOnExit != pdFALSE )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d006      	beq.n	8004b16 <xEventGroupWaitBits+0x14e>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	401a      	ands	r2, r3
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8004b16:	2301      	movs	r3, #1
 8004b18:	623b      	str	r3, [r7, #32]
            }
            taskEXIT_CRITICAL();
 8004b1a:	f002 ffe9 	bl	8007af0 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3730      	adds	r7, #48	; 0x30
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	080150e0 	.word	0x080150e0
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <xEventGroupClearBits+0x1e>
 8004b4c:	4910      	ldr	r1, [pc, #64]	; (8004b90 <xEventGroupClearBits+0x58>)
 8004b4e:	f240 10df 	movw	r0, #479	; 0x1df
 8004b52:	f7fb ffbc 	bl	8000ace <vAssertCalled>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <xEventGroupClearBits+0x32>
 8004b60:	490b      	ldr	r1, [pc, #44]	; (8004b90 <xEventGroupClearBits+0x58>)
 8004b62:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004b66:	f7fb ffb2 	bl	8000ace <vAssertCalled>

    taskENTER_CRITICAL();
 8004b6a:	f002 ff95 	bl	8007a98 <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60bb      	str	r3, [r7, #8]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	401a      	ands	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 8004b82:	f002 ffb5 	bl	8007af0 <vPortExitCritical>

    return uxReturn;
 8004b86:	68bb      	ldr	r3, [r7, #8]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	080150e0 	.word	0x080150e0

08004b94 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	; 0x30
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d104      	bne.n	8004bba <xEventGroupSetBits+0x26>
 8004bb0:	4938      	ldr	r1, [pc, #224]	; (8004c94 <xEventGroupSetBits+0x100>)
 8004bb2:	f240 201f 	movw	r0, #543	; 0x21f
 8004bb6:	f7fb ff8a 	bl	8000ace <vAssertCalled>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <xEventGroupSetBits+0x3a>
 8004bc4:	4933      	ldr	r1, [pc, #204]	; (8004c94 <xEventGroupSetBits+0x100>)
 8004bc6:	f44f 7008 	mov.w	r0, #544	; 0x220
 8004bca:	f7fb ff80 	bl	8000ace <vAssertCalled>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 8004bda:	f001 f9f9 	bl	8005fd0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8004bf0:	e03c      	b.n	8004c6c <xEventGroupSetBits+0xd8>
        {
            pxNext = listGET_NEXT( pxListItem );
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c08:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c10:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d108      	bne.n	8004c2e <xEventGroupSetBits+0x9a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <xEventGroupSetBits+0xac>
                {
                    xMatchFound = pdTRUE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2c:	e008      	b.n	8004c40 <xEventGroupSetBits+0xac>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4013      	ands	r3, r2
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d101      	bne.n	8004c40 <xEventGroupSetBits+0xac>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d010      	beq.n	8004c68 <xEventGroupSetBits+0xd4>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <xEventGroupSetBits+0xc4>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8004c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c60:	4619      	mov	r1, r3
 8004c62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c64:	f001 fc52 	bl	800650c <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while( pxListItem != pxListEnd )
 8004c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1be      	bne.n	8004bf2 <xEventGroupSetBits+0x5e>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8004c82:	f001 f9b3 	bl	8005fec <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	681b      	ldr	r3, [r3, #0]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3730      	adds	r7, #48	; 0x30
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	080150e0 	.word	0x080150e0

08004c98 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
    EventGroup_t * pxEventBits = xEventGroup;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]
    const List_t * pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	60bb      	str	r3, [r7, #8]

    vTaskSuspendAll();
 8004caa:	f001 f991 	bl	8005fd0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8004cae:	e011      	b.n	8004cd4 <vEventGroupDelete+0x3c>
        {
            /* Unblock the task, returning 0 as the event list is being deleted
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d104      	bne.n	8004cc6 <vEventGroupDelete+0x2e>
 8004cbc:	490c      	ldr	r1, [pc, #48]	; (8004cf0 <vEventGroupDelete+0x58>)
 8004cbe:	f240 207f 	movw	r0, #639	; 0x27f
 8004cc2:	f7fb ff04 	bl	8000ace <vAssertCalled>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 fc1c 	bl	800650c <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e9      	bne.n	8004cb0 <vEventGroupDelete+0x18>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
            {
                /* The event group can only have been allocated dynamically - free
                 * it again. */
                vPortFree( pxEventBits );
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f002 fcbb 	bl	8007658 <vPortFree>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
    ( void ) xTaskResumeAll();
 8004ce2:	f001 f983 	bl	8005fec <xTaskResumeAll>
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	080150e0 	.word	0x080150e0

08004cf4 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d107      	bne.n	8004d1a <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	e007      	b.n	8004d2a <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d101      	bne.n	8004d2a <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8004d26:	2301      	movs	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f103 0208 	add.w	r2, r3, #8
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d50:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f103 0208 	add.w	r2, r3, #8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f103 0208 	add.w	r2, r3, #8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d103      	bne.n	8004dfa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e00c      	b.n	8004e14 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e002      	b.n	8004e08 <vListInsert+0x2e>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d2f6      	bcs.n	8004e02 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	601a      	str	r2, [r3, #0]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6852      	ldr	r2, [r2, #4]
 8004e6c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d103      	bne.n	8004e80 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	1e5a      	subs	r2, r3, #1
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <xQueueGenericReset+0x1e>
 8004eb4:	492a      	ldr	r1, [pc, #168]	; (8004f60 <xQueueGenericReset+0xc0>)
 8004eb6:	f240 100d 	movw	r0, #269	; 0x10d
 8004eba:	f7fb fe08 	bl	8000ace <vAssertCalled>

    taskENTER_CRITICAL();
 8004ebe:	f002 fdeb 	bl	8007a98 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	441a      	add	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	68f9      	ldr	r1, [r7, #12]
 8004ef2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	441a      	add	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	22ff      	movs	r2, #255	; 0xff
 8004f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	22ff      	movs	r2, #255	; 0xff
 8004f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d114      	bne.n	8004f3e <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01a      	beq.n	8004f52 <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3310      	adds	r3, #16
 8004f20:	4618      	mov	r0, r3
 8004f22:	f001 fa95 	bl	8006450 <xTaskRemoveFromEventList>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d012      	beq.n	8004f52 <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004f2c:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <xQueueGenericReset+0xc4>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	e009      	b.n	8004f52 <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3310      	adds	r3, #16
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fef8 	bl	8004d38 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3324      	adds	r3, #36	; 0x24
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fef3 	bl	8004d38 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004f52:	f002 fdcd 	bl	8007af0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004f56:	2301      	movs	r3, #1
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	0801510c 	.word	0x0801510c
 8004f64:	e000ed04 	.word	0xe000ed04

08004f68 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <xQueueGenericCreate+0x1e>
 8004f7c:	491c      	ldr	r1, [pc, #112]	; (8004ff0 <xQueueGenericCreate+0x88>)
 8004f7e:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8004f82:	f7fb fda4 	bl	8000ace <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	fb02 f303 	mul.w	r3, r2, r3
 8004f8e:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d006      	beq.n	8004fa4 <xQueueGenericCreate+0x3c>
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d101      	bne.n	8004fa8 <xQueueGenericCreate+0x40>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <xQueueGenericCreate+0x42>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <xQueueGenericCreate+0x50>
 8004fae:	4910      	ldr	r1, [pc, #64]	; (8004ff0 <xQueueGenericCreate+0x88>)
 8004fb0:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8004fb4:	f7fb fd8b 	bl	8000ace <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	3354      	adds	r3, #84	; 0x54
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f002 fa8d 	bl	80074dc <pvPortMalloc>
 8004fc2:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <xQueueGenericCreate+0x7e>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	3354      	adds	r3, #84	; 0x54
 8004fd2:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fd4:	79fa      	ldrb	r2, [r7, #7]
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f807 	bl	8004ff4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
    }
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	0801510c 	.word	0x0801510c

08004ff4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e002      	b.n	8005016 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005022:	2101      	movs	r1, #1
 8005024:	69b8      	ldr	r0, [r7, #24]
 8005026:	f7ff ff3b 	bl	8004ea0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2200      	movs	r2, #0
 8005036:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <xQueueCreateCountingSemaphore+0x1a>
 8005050:	490f      	ldr	r1, [pc, #60]	; (8005090 <xQueueCreateCountingSemaphore+0x50>)
 8005052:	f240 20ea 	movw	r0, #746	; 0x2ea
 8005056:	f7fb fd3a 	bl	8000ace <vAssertCalled>
        configASSERT( uxInitialCount <= uxMaxCount );
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	429a      	cmp	r2, r3
 8005060:	d904      	bls.n	800506c <xQueueCreateCountingSemaphore+0x2c>
 8005062:	490b      	ldr	r1, [pc, #44]	; (8005090 <xQueueCreateCountingSemaphore+0x50>)
 8005064:	f240 20eb 	movw	r0, #747	; 0x2eb
 8005068:	f7fb fd31 	bl	8000ace <vAssertCalled>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800506c:	2202      	movs	r2, #2
 800506e:	2100      	movs	r1, #0
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff79 	bl	8004f68 <xQueueGenericCreate>
 8005076:	60f8      	str	r0, [r7, #12]

        if( xHandle != NULL )
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <xQueueCreateCountingSemaphore+0x44>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8005084:	68fb      	ldr	r3, [r7, #12]
    }
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	0801510c 	.word	0x0801510c

08005094 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <xQueueGenericSend+0x26>
 80050b0:	4978      	ldr	r1, [pc, #480]	; (8005294 <xQueueGenericSend+0x200>)
 80050b2:	f240 3009 	movw	r0, #777	; 0x309
 80050b6:	f7fb fd0a 	bl	8000ace <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <xQueueGenericSend+0x34>
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <xQueueGenericSend+0x38>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <xQueueGenericSend+0x3a>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <xQueueGenericSend+0x48>
 80050d2:	4970      	ldr	r1, [pc, #448]	; (8005294 <xQueueGenericSend+0x200>)
 80050d4:	f240 300a 	movw	r0, #778	; 0x30a
 80050d8:	f7fb fcf9 	bl	8000ace <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d103      	bne.n	80050ea <xQueueGenericSend+0x56>
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <xQueueGenericSend+0x5a>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <xQueueGenericSend+0x5c>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <xQueueGenericSend+0x6a>
 80050f4:	4967      	ldr	r1, [pc, #412]	; (8005294 <xQueueGenericSend+0x200>)
 80050f6:	f240 300b 	movw	r0, #779	; 0x30b
 80050fa:	f7fb fce8 	bl	8000ace <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050fe:	f001 fbc3 	bl	8006888 <xTaskGetSchedulerState>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <xQueueGenericSend+0x7a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <xQueueGenericSend+0x7e>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <xQueueGenericSend+0x80>
 8005112:	2300      	movs	r3, #0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <xQueueGenericSend+0x8e>
 8005118:	495e      	ldr	r1, [pc, #376]	; (8005294 <xQueueGenericSend+0x200>)
 800511a:	f240 300e 	movw	r0, #782	; 0x30e
 800511e:	f7fb fcd6 	bl	8000ace <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005122:	f002 fcb9 	bl	8007a98 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <xQueueGenericSend+0xa4>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d145      	bne.n	80051c4 <xQueueGenericSend+0x130>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	61fb      	str	r3, [r7, #28]

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	6a38      	ldr	r0, [r7, #32]
 8005144:	f000 fb68 	bl	8005818 <prvCopyDataToQueue>
 8005148:	61b8      	str	r0, [r7, #24]

                        if( pxQueue->pxQueueSetContainer != NULL )
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d014      	beq.n	800517c <xQueueGenericSend+0xe8>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d102      	bne.n	800515e <xQueueGenericSend+0xca>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d12e      	bne.n	80051bc <xQueueGenericSend+0x128>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800515e:	6a38      	ldr	r0, [r7, #32]
 8005160:	f000 fcfe 	bl	8005b60 <prvNotifyQueueSetContainer>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d028      	beq.n	80051bc <xQueueGenericSend+0x128>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 800516a:	4b4b      	ldr	r3, [pc, #300]	; (8005298 <xQueueGenericSend+0x204>)
 800516c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	e01f      	b.n	80051bc <xQueueGenericSend+0x128>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <xQueueGenericSend+0x112>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	3324      	adds	r3, #36	; 0x24
 8005188:	4618      	mov	r0, r3
 800518a:	f001 f961 	bl	8006450 <xTaskRemoveFromEventList>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <xQueueGenericSend+0x128>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8005194:	4b40      	ldr	r3, [pc, #256]	; (8005298 <xQueueGenericSend+0x204>)
 8005196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	e00a      	b.n	80051bc <xQueueGenericSend+0x128>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <xQueueGenericSend+0x128>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 80051ac:	4b3a      	ldr	r3, [pc, #232]	; (8005298 <xQueueGenericSend+0x204>)
 80051ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80051bc:	f002 fc98 	bl	8007af0 <vPortExitCritical>
                return pdPASS;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e063      	b.n	800528c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80051ca:	f002 fc91 	bl	8007af0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e05c      	b.n	800528c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80051d8:	f107 0310 	add.w	r3, r7, #16
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 fa0f 	bl	8006600 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80051e6:	f002 fc83 	bl	8007af0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80051ea:	f000 fef1 	bl	8005fd0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80051ee:	f002 fc53 	bl	8007a98 <vPortEnterCritical>
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f8:	b25b      	sxtb	r3, r3
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d103      	bne.n	8005208 <xQueueGenericSend+0x174>
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800520e:	b25b      	sxtb	r3, r3
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d103      	bne.n	800521e <xQueueGenericSend+0x18a>
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521e:	f002 fc67 	bl	8007af0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005222:	1d3a      	adds	r2, r7, #4
 8005224:	f107 0310 	add.w	r3, r7, #16
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f001 f9fe 	bl	800662c <xTaskCheckForTimeOut>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d124      	bne.n	8005280 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005236:	6a38      	ldr	r0, [r7, #32]
 8005238:	f000 fbf3 	bl	8005a22 <prvIsQueueFull>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	3310      	adds	r3, #16
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f001 f886 	bl	800635c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005250:	6a38      	ldr	r0, [r7, #32]
 8005252:	f000 fb71 	bl	8005938 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005256:	f000 fec9 	bl	8005fec <xTaskResumeAll>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	f47f af60 	bne.w	8005122 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <xQueueGenericSend+0x204>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	e756      	b.n	8005122 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005274:	6a38      	ldr	r0, [r7, #32]
 8005276:	f000 fb5f 	bl	8005938 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800527a:	f000 feb7 	bl	8005fec <xTaskResumeAll>
 800527e:	e750      	b.n	8005122 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005280:	6a38      	ldr	r0, [r7, #32]
 8005282:	f000 fb59 	bl	8005938 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005286:	f000 feb1 	bl	8005fec <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800528a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800528c:	4618      	mov	r0, r3
 800528e:	3728      	adds	r7, #40	; 0x28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	0801510c 	.word	0x0801510c
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	; 0x30
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <xQueueGenericSendFromISR+0x22>
 80052b4:	494e      	ldr	r1, [pc, #312]	; (80053f0 <xQueueGenericSendFromISR+0x154>)
 80052b6:	f240 30dd 	movw	r0, #989	; 0x3dd
 80052ba:	f7fb fc08 	bl	8000ace <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d103      	bne.n	80052cc <xQueueGenericSendFromISR+0x30>
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <xQueueGenericSendFromISR+0x34>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <xQueueGenericSendFromISR+0x36>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d104      	bne.n	80052e0 <xQueueGenericSendFromISR+0x44>
 80052d6:	4946      	ldr	r1, [pc, #280]	; (80053f0 <xQueueGenericSendFromISR+0x154>)
 80052d8:	f240 30de 	movw	r0, #990	; 0x3de
 80052dc:	f7fb fbf7 	bl	8000ace <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d103      	bne.n	80052ee <xQueueGenericSendFromISR+0x52>
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <xQueueGenericSendFromISR+0x56>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <xQueueGenericSendFromISR+0x58>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <xQueueGenericSendFromISR+0x66>
 80052f8:	493d      	ldr	r1, [pc, #244]	; (80053f0 <xQueueGenericSendFromISR+0x154>)
 80052fa:	f240 30df 	movw	r0, #991	; 0x3df
 80052fe:	f7fb fbe6 	bl	8000ace <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005302:	f002 fca3 	bl	8007c4c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005306:	f3ef 8211 	mrs	r2, BASEPRI
 800530a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800530e:	b672      	cpsid	i
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	b662      	cpsie	i
 800531e:	61ba      	str	r2, [r7, #24]
 8005320:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005322:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <xQueueGenericSendFromISR+0x9c>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d14f      	bne.n	80053d8 <xQueueGenericSendFromISR+0x13c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534e:	f000 fa63 	bl	8005818 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005352:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d129      	bne.n	80053b0 <xQueueGenericSendFromISR+0x114>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <xQueueGenericSendFromISR+0xee>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d102      	bne.n	8005370 <xQueueGenericSendFromISR+0xd4>
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d130      	bne.n	80053d2 <xQueueGenericSendFromISR+0x136>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005372:	f000 fbf5 	bl	8005b60 <prvNotifyQueueSetContainer>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d02a      	beq.n	80053d2 <xQueueGenericSendFromISR+0x136>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d027      	beq.n	80053d2 <xQueueGenericSendFromISR+0x136>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e023      	b.n	80053d2 <xQueueGenericSendFromISR+0x136>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01f      	beq.n	80053d2 <xQueueGenericSendFromISR+0x136>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	3324      	adds	r3, #36	; 0x24
 8005396:	4618      	mov	r0, r3
 8005398:	f001 f85a 	bl	8006450 <xTaskRemoveFromEventList>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d017      	beq.n	80053d2 <xQueueGenericSendFromISR+0x136>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d014      	beq.n	80053d2 <xQueueGenericSendFromISR+0x136>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e010      	b.n	80053d2 <xQueueGenericSendFromISR+0x136>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80053b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80053b4:	2b7f      	cmp	r3, #127	; 0x7f
 80053b6:	d104      	bne.n	80053c2 <xQueueGenericSendFromISR+0x126>
 80053b8:	490d      	ldr	r1, [pc, #52]	; (80053f0 <xQueueGenericSendFromISR+0x154>)
 80053ba:	f44f 608d 	mov.w	r0, #1128	; 0x468
 80053be:	f7fb fb86 	bl	8000ace <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053c6:	3301      	adds	r3, #1
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	b25a      	sxtb	r2, r3
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80053d2:	2301      	movs	r3, #1
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 80053d6:	e001      	b.n	80053dc <xQueueGenericSendFromISR+0x140>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3730      	adds	r7, #48	; 0x30
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	0801510c 	.word	0x0801510c

080053f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005400:	2300      	movs	r3, #0
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <xQueueReceive+0x24>
 800540e:	495f      	ldr	r1, [pc, #380]	; (800558c <xQueueReceive+0x198>)
 8005410:	f240 502c 	movw	r0, #1324	; 0x52c
 8005414:	f7fb fb5b 	bl	8000ace <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <xQueueReceive+0x32>
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xQueueReceive+0x36>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueReceive+0x38>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <xQueueReceive+0x46>
 8005430:	4956      	ldr	r1, [pc, #344]	; (800558c <xQueueReceive+0x198>)
 8005432:	f44f 60a6 	mov.w	r0, #1328	; 0x530
 8005436:	f7fb fb4a 	bl	8000ace <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800543a:	f001 fa25 	bl	8006888 <xTaskGetSchedulerState>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <xQueueReceive+0x56>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <xQueueReceive+0x5a>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <xQueueReceive+0x5c>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d104      	bne.n	800545e <xQueueReceive+0x6a>
 8005454:	494d      	ldr	r1, [pc, #308]	; (800558c <xQueueReceive+0x198>)
 8005456:	f240 5035 	movw	r0, #1333	; 0x535
 800545a:	f7fb fb38 	bl	8000ace <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800545e:	f002 fb1b 	bl	8007a98 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01f      	beq.n	80054ae <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	6a38      	ldr	r0, [r7, #32]
 8005472:	f000 fa3b 	bl	80058ec <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	1e5a      	subs	r2, r3, #1
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	3310      	adds	r3, #16
 800548a:	4618      	mov	r0, r3
 800548c:	f000 ffe0 	bl	8006450 <xTaskRemoveFromEventList>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005496:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <xQueueReceive+0x19c>)
 8005498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80054a6:	f002 fb23 	bl	8007af0 <vPortExitCritical>
                return pdPASS;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e069      	b.n	8005582 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80054b4:	f002 fb1c 	bl	8007af0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e062      	b.n	8005582 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80054c2:	f107 0314 	add.w	r3, r7, #20
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 f89a 	bl	8006600 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80054d0:	f002 fb0e 	bl	8007af0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80054d4:	f000 fd7c 	bl	8005fd0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80054d8:	f002 fade 	bl	8007a98 <vPortEnterCritical>
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueReceive+0xfe>
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d103      	bne.n	8005508 <xQueueReceive+0x114>
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005508:	f002 faf2 	bl	8007af0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800550c:	1d3a      	adds	r2, r7, #4
 800550e:	f107 0314 	add.w	r3, r7, #20
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f001 f889 	bl	800662c <xTaskCheckForTimeOut>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d123      	bne.n	8005568 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005520:	6a38      	ldr	r0, [r7, #32]
 8005522:	f000 fa68 	bl	80059f6 <prvIsQueueEmpty>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d017      	beq.n	800555c <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	3324      	adds	r3, #36	; 0x24
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f000 ff11 	bl	800635c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800553a:	6a38      	ldr	r0, [r7, #32]
 800553c:	f000 f9fc 	bl	8005938 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005540:	f000 fd54 	bl	8005fec <xTaskResumeAll>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d189      	bne.n	800545e <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 800554a:	4b11      	ldr	r3, [pc, #68]	; (8005590 <xQueueReceive+0x19c>)
 800554c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	e780      	b.n	800545e <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800555c:	6a38      	ldr	r0, [r7, #32]
 800555e:	f000 f9eb 	bl	8005938 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005562:	f000 fd43 	bl	8005fec <xTaskResumeAll>
 8005566:	e77a      	b.n	800545e <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005568:	6a38      	ldr	r0, [r7, #32]
 800556a:	f000 f9e5 	bl	8005938 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800556e:	f000 fd3d 	bl	8005fec <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005572:	6a38      	ldr	r0, [r7, #32]
 8005574:	f000 fa3f 	bl	80059f6 <prvIsQueueEmpty>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	f43f af6f 	beq.w	800545e <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005580:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005582:	4618      	mov	r0, r3
 8005584:	3728      	adds	r7, #40	; 0x28
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	0801510c 	.word	0x0801510c
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800559e:	2300      	movs	r3, #0
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <xQueueSemaphoreTake+0x26>
 80055b0:	4971      	ldr	r1, [pc, #452]	; (8005778 <xQueueSemaphoreTake+0x1e4>)
 80055b2:	f240 50be 	movw	r0, #1470	; 0x5be
 80055b6:	f7fb fa8a 	bl	8000ace <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <xQueueSemaphoreTake+0x38>
 80055c2:	496d      	ldr	r1, [pc, #436]	; (8005778 <xQueueSemaphoreTake+0x1e4>)
 80055c4:	f240 50c2 	movw	r0, #1474	; 0x5c2
 80055c8:	f7fb fa81 	bl	8000ace <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055cc:	f001 f95c 	bl	8006888 <xTaskGetSchedulerState>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <xQueueSemaphoreTake+0x48>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <xQueueSemaphoreTake+0x4c>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <xQueueSemaphoreTake+0x4e>
 80055e0:	2300      	movs	r3, #0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <xQueueSemaphoreTake+0x5c>
 80055e6:	4964      	ldr	r1, [pc, #400]	; (8005778 <xQueueSemaphoreTake+0x1e4>)
 80055e8:	f240 50c7 	movw	r0, #1479	; 0x5c7
 80055ec:	f7fb fa6f 	bl	8000ace <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80055f0:	f002 fa52 	bl	8007a98 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d024      	beq.n	800564a <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	1e5a      	subs	r2, r3, #1
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <xQueueSemaphoreTake+0x86>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005610:	f001 fada 	bl	8006bc8 <pvTaskIncrementMutexHeldCount>
 8005614:	4602      	mov	r2, r0
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00f      	beq.n	8005642 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	3310      	adds	r3, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f000 ff12 	bl	8006450 <xTaskRemoveFromEventList>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005632:	4b52      	ldr	r3, [pc, #328]	; (800577c <xQueueSemaphoreTake+0x1e8>)
 8005634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005642:	f002 fa55 	bl	8007af0 <vPortExitCritical>
                return pdPASS;
 8005646:	2301      	movs	r3, #1
 8005648:	e091      	b.n	800576e <xQueueSemaphoreTake+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10b      	bne.n	8005668 <xQueueSemaphoreTake+0xd4>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <xQueueSemaphoreTake+0xcc>
 8005656:	4948      	ldr	r1, [pc, #288]	; (8005778 <xQueueSemaphoreTake+0x1e4>)
 8005658:	f240 600d 	movw	r0, #1549	; 0x60d
 800565c:	f7fb fa37 	bl	8000ace <vAssertCalled>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8005660:	f002 fa46 	bl	8007af0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005664:	2300      	movs	r3, #0
 8005666:	e082      	b.n	800576e <xQueueSemaphoreTake+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800566e:	f107 030c 	add.w	r3, r7, #12
 8005672:	4618      	mov	r0, r3
 8005674:	f000 ffc4 	bl	8006600 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005678:	2301      	movs	r3, #1
 800567a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800567c:	f002 fa38 	bl	8007af0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005680:	f000 fca6 	bl	8005fd0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005684:	f002 fa08 	bl	8007a98 <vPortEnterCritical>
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800568e:	b25b      	sxtb	r3, r3
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d103      	bne.n	800569e <xQueueSemaphoreTake+0x10a>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056a4:	b25b      	sxtb	r3, r3
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d103      	bne.n	80056b4 <xQueueSemaphoreTake+0x120>
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b4:	f002 fa1c 	bl	8007af0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056b8:	463a      	mov	r2, r7
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 ffb3 	bl	800662c <xTaskCheckForTimeOut>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d132      	bne.n	8005732 <xQueueSemaphoreTake+0x19e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056cc:	69f8      	ldr	r0, [r7, #28]
 80056ce:	f000 f992 	bl	80059f6 <prvIsQueueEmpty>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d026      	beq.n	8005726 <xQueueSemaphoreTake+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d109      	bne.n	80056f4 <xQueueSemaphoreTake+0x160>
                        {
                            taskENTER_CRITICAL();
 80056e0:	f002 f9da 	bl	8007a98 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 f8eb 	bl	80068c4 <xTaskPriorityInherit>
 80056ee:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 80056f0:	f002 f9fe 	bl	8007af0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	3324      	adds	r3, #36	; 0x24
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fe2d 	bl	800635c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005702:	69f8      	ldr	r0, [r7, #28]
 8005704:	f000 f918 	bl	8005938 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005708:	f000 fc70 	bl	8005fec <xTaskResumeAll>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	f47f af6e 	bne.w	80055f0 <xQueueSemaphoreTake+0x5c>
                {
                    portYIELD_WITHIN_API();
 8005714:	4b19      	ldr	r3, [pc, #100]	; (800577c <xQueueSemaphoreTake+0x1e8>)
 8005716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	e764      	b.n	80055f0 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8005726:	69f8      	ldr	r0, [r7, #28]
 8005728:	f000 f906 	bl	8005938 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800572c:	f000 fc5e 	bl	8005fec <xTaskResumeAll>
 8005730:	e75e      	b.n	80055f0 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8005732:	69f8      	ldr	r0, [r7, #28]
 8005734:	f000 f900 	bl	8005938 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005738:	f000 fc58 	bl	8005fec <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800573c:	69f8      	ldr	r0, [r7, #28]
 800573e:	f000 f95a 	bl	80059f6 <prvIsQueueEmpty>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	f43f af53 	beq.w	80055f0 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00d      	beq.n	800576c <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 8005750:	f002 f9a2 	bl	8007a98 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005754:	69f8      	ldr	r0, [r7, #28]
 8005756:	f000 f847 	bl	80057e8 <prvGetDisinheritPriorityAfterTimeout>
 800575a:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	6979      	ldr	r1, [r7, #20]
 8005762:	4618      	mov	r0, r3
 8005764:	f001 f994 	bl	8006a90 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8005768:	f002 f9c2 	bl	8007af0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800576c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800576e:	4618      	mov	r0, r3
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	0801510c 	.word	0x0801510c
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <uxQueueMessagesWaiting+0x18>
 800578e:	4908      	ldr	r1, [pc, #32]	; (80057b0 <uxQueueMessagesWaiting+0x30>)
 8005790:	f240 70be 	movw	r0, #1982	; 0x7be
 8005794:	f7fb f99b 	bl	8000ace <vAssertCalled>

    taskENTER_CRITICAL();
 8005798:	f002 f97e 	bl	8007a98 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80057a2:	f002 f9a5 	bl	8007af0 <vPortExitCritical>

    return uxReturn;
 80057a6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	0801510c 	.word	0x0801510c

080057b4 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <vQueueDelete+0x1c>
 80057c6:	4907      	ldr	r1, [pc, #28]	; (80057e4 <vQueueDelete+0x30>)
 80057c8:	f240 70eb 	movw	r0, #2027	; 0x7eb
 80057cc:	f7fb f97f 	bl	8000ace <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f967 	bl	8005aa4 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The queue can only have been allocated dynamically - free it
             * again. */
            vPortFree( pxQueue );
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f001 ff3e 	bl	8007658 <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	0801510c 	.word	0x0801510c

080057e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d006      	beq.n	8005806 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f1c3 0305 	rsb	r3, r3, #5
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e001      	b.n	800580a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800580a:	68fb      	ldr	r3, [r7, #12]
    }
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10d      	bne.n	8005852 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d14d      	bne.n	80058da <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f001 f8b4 	bl	80069b0 <xTaskPriorityDisinherit>
 8005848:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	609a      	str	r2, [r3, #8]
 8005850:	e043      	b.n	80058da <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d119      	bne.n	800588c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6858      	ldr	r0, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	461a      	mov	r2, r3
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	f00d fad5 	bl	8012e12 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	441a      	add	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	d32b      	bcc.n	80058da <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	e026      	b.n	80058da <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	68d8      	ldr	r0, [r3, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	461a      	mov	r2, r3
 8005896:	68b9      	ldr	r1, [r7, #8]
 8005898:	f00d fabb 	bl	8012e12 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	425b      	negs	r3, r3
 80058a6:	441a      	add	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d207      	bcs.n	80058c8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	425b      	negs	r3, r3
 80058c2:	441a      	add	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d105      	bne.n	80058da <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80058e2:	697b      	ldr	r3, [r7, #20]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d018      	beq.n	8005930 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	441a      	add	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	d303      	bcc.n	8005920 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68d9      	ldr	r1, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	461a      	mov	r2, r3
 800592a:	6838      	ldr	r0, [r7, #0]
 800592c:	f00d fa71 	bl	8012e12 <memcpy>
    }
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005940:	f002 f8aa 	bl	8007a98 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800594a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800594c:	e01e      	b.n	800598c <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f902 	bl	8005b60 <prvNotifyQueueSetContainer>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d010      	beq.n	8005984 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 8005962:	f000 febf 	bl	80066e4 <vTaskMissedYield>
 8005966:	e00d      	b.n	8005984 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	d012      	beq.n	8005996 <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3324      	adds	r3, #36	; 0x24
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fd6b 	bl	8006450 <xTaskRemoveFromEventList>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 8005980:	f000 feb0 	bl	80066e4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	3b01      	subs	r3, #1
 8005988:	b2db      	uxtb	r3, r3
 800598a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800598c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005990:	2b00      	cmp	r3, #0
 8005992:	dcdc      	bgt.n	800594e <prvUnlockQueue+0x16>
 8005994:	e000      	b.n	8005998 <prvUnlockQueue+0x60>
                            break;
 8005996:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	22ff      	movs	r2, #255	; 0xff
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80059a0:	f002 f8a6 	bl	8007af0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80059a4:	f002 f878 	bl	8007a98 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ae:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80059b0:	e011      	b.n	80059d6 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d012      	beq.n	80059e0 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3310      	adds	r3, #16
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fd46 	bl	8006450 <xTaskRemoveFromEventList>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 80059ca:	f000 fe8b 	bl	80066e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80059d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	dce9      	bgt.n	80059b2 <prvUnlockQueue+0x7a>
 80059de:	e000      	b.n	80059e2 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 80059e0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	22ff      	movs	r2, #255	; 0xff
 80059e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80059ea:	f002 f881 	bl	8007af0 <vPortExitCritical>
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80059fe:	f002 f84b 	bl	8007a98 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e001      	b.n	8005a14 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005a14:	f002 f86c 	bl	8007af0 <vPortExitCritical>

    return xReturn;
 8005a18:	68fb      	ldr	r3, [r7, #12]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005a2a:	f002 f835 	bl	8007a98 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d102      	bne.n	8005a40 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	e001      	b.n	8005a44 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005a44:	f002 f854 	bl	8007af0 <vPortExitCritical>

    return xReturn;
 8005a48:	68fb      	ldr	r3, [r7, #12]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e014      	b.n	8005a8e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a64:	4a0e      	ldr	r2, [pc, #56]	; (8005aa0 <vQueueAddToRegistry+0x4c>)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a70:	490b      	ldr	r1, [pc, #44]	; (8005aa0 <vQueueAddToRegistry+0x4c>)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <vQueueAddToRegistry+0x4c>)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005a86:	e005      	b.n	8005a94 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b07      	cmp	r3, #7
 8005a92:	d9e7      	bls.n	8005a64 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	20027108 	.word	0x20027108

08005aa4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	e016      	b.n	8005ae0 <vQueueUnregisterQueue+0x3c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005ab2:	4a10      	ldr	r2, [pc, #64]	; (8005af4 <vQueueUnregisterQueue+0x50>)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4413      	add	r3, r2
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d10b      	bne.n	8005ada <vQueueUnregisterQueue+0x36>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8005ac2:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <vQueueUnregisterQueue+0x50>)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005acc:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <vQueueUnregisterQueue+0x50>)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	605a      	str	r2, [r3, #4]
                break;
 8005ad8:	e005      	b.n	8005ae6 <vQueueUnregisterQueue+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b07      	cmp	r3, #7
 8005ae4:	d9e5      	bls.n	8005ab2 <vQueueUnregisterQueue+0xe>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20027108 	.word	0x20027108

08005af8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005b08:	f001 ffc6 	bl	8007a98 <vPortEnterCritical>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d103      	bne.n	8005b22 <vQueueWaitForMessageRestricted+0x2a>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b28:	b25b      	sxtb	r3, r3
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d103      	bne.n	8005b38 <vQueueWaitForMessageRestricted+0x40>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b38:	f001 ffda 	bl	8007af0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	3324      	adds	r3, #36	; 0x24
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fc57 	bl	8006400 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005b52:	6978      	ldr	r0, [r7, #20]
 8005b54:	f7ff fef0 	bl	8005938 <prvUnlockQueue>
    }
 8005b58:	bf00      	nop
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6c:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d104      	bne.n	8005b82 <prvNotifyQueueSetContainer+0x22>
 8005b78:	4924      	ldr	r1, [pc, #144]	; (8005c0c <prvNotifyQueueSetContainer+0xac>)
 8005b7a:	f640 3097 	movw	r0, #2967	; 0xb97
 8005b7e:	f7fa ffa6 	bl	8000ace <vAssertCalled>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d304      	bcc.n	8005b98 <prvNotifyQueueSetContainer+0x38>
 8005b8e:	491f      	ldr	r1, [pc, #124]	; (8005c0c <prvNotifyQueueSetContainer+0xac>)
 8005b90:	f640 3098 	movw	r0, #2968	; 0xb98
 8005b94:	f7fa ff9b 	bl	8000ace <vAssertCalled>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d22e      	bcs.n	8005c02 <prvNotifyQueueSetContainer+0xa2>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005baa:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8005bac:	1d3b      	adds	r3, r7, #4
 8005bae:	2200      	movs	r2, #0
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6938      	ldr	r0, [r7, #16]
 8005bb4:	f7ff fe30 	bl	8005818 <prvCopyDataToQueue>
 8005bb8:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 8005bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d10e      	bne.n	8005be2 <prvNotifyQueueSetContainer+0x82>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01a      	beq.n	8005c02 <prvNotifyQueueSetContainer+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	3324      	adds	r3, #36	; 0x24
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fc3d 	bl	8006450 <xTaskRemoveFromEventList>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d012      	beq.n	8005c02 <prvNotifyQueueSetContainer+0xa2>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	e00f      	b.n	8005c02 <prvNotifyQueueSetContainer+0xa2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	2b7f      	cmp	r3, #127	; 0x7f
 8005be8:	d104      	bne.n	8005bf4 <prvNotifyQueueSetContainer+0x94>
 8005bea:	4908      	ldr	r1, [pc, #32]	; (8005c0c <prvNotifyQueueSetContainer+0xac>)
 8005bec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005bf0:	f7fa ff6d 	bl	8000ace <vAssertCalled>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	b25a      	sxtb	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005c02:	697b      	ldr	r3, [r7, #20]
    }
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	0801510c 	.word	0x0801510c

08005c10 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08c      	sub	sp, #48	; 0x30
 8005c14:	af04      	add	r7, sp, #16
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 fc59 	bl	80074dc <pvPortMalloc>
 8005c2a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00e      	beq.n	8005c50 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c32:	20b8      	movs	r0, #184	; 0xb8
 8005c34:	f001 fc52 	bl	80074dc <pvPortMalloc>
 8005c38:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30
 8005c46:	e005      	b.n	8005c54 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005c48:	6978      	ldr	r0, [r7, #20]
 8005c4a:	f001 fd05 	bl	8007658 <vPortFree>
 8005c4e:	e001      	b.n	8005c54 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d013      	beq.n	8005c82 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	9303      	str	r3, [sp, #12]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	9302      	str	r3, [sp, #8]
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f80f 	bl	8005c94 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005c76:	69f8      	ldr	r0, [r7, #28]
 8005c78:	f000 f8b4 	bl	8005de4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e002      	b.n	8005c88 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295
 8005c86:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005c88:	69bb      	ldr	r3, [r7, #24]
    }
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	461a      	mov	r2, r3
 8005cac:	21a5      	movs	r1, #165	; 0xa5
 8005cae:	f00d f8d4 	bl	8012e5a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005cbc:	440b      	add	r3, r1
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f023 0307 	bic.w	r3, r3, #7
 8005cca:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <prvInitialiseNewTask+0x4c>
 8005cd6:	493f      	ldr	r1, [pc, #252]	; (8005dd4 <prvInitialiseNewTask+0x140>)
 8005cd8:	f240 305e 	movw	r0, #862	; 0x35e
 8005cdc:	f7fa fef7 	bl	8000ace <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01f      	beq.n	8005d26 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	e012      	b.n	8005d12 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	7819      	ldrb	r1, [r3, #0]
 8005cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3334      	adds	r3, #52	; 0x34
 8005cfc:	460a      	mov	r2, r1
 8005cfe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d006      	beq.n	8005d1a <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b09      	cmp	r3, #9
 8005d16:	d9e9      	bls.n	8005cec <prvInitialiseNewTask+0x58>
 8005d18:	e000      	b.n	8005d1c <prvInitialiseNewTask+0x88>
            {
                break;
 8005d1a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d24:	e003      	b.n	8005d2e <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d901      	bls.n	8005d38 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d34:	2304      	movs	r3, #4
 8005d36:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	6a3a      	ldr	r2, [r7, #32]
 8005d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	2200      	movs	r2, #0
 8005d48:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff f812 	bl	8004d78 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	3318      	adds	r3, #24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff f80d 	bl	8004d78 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d62:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	f1c3 0205 	rsb	r2, r3, #5
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d72:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	33b0      	adds	r3, #176	; 0xb0
 8005d78:	2204      	movs	r2, #4
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f00d f86c 	bl	8012e5a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	33b4      	adds	r3, #180	; 0xb4
 8005d86:	2201      	movs	r2, #1
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f00d f865 	bl	8012e5a <memset>
    #if ( configUSE_NEWLIB_REENTRANT == 1 )
        {
            /* Initialise this task's Newlib reent structure.
             * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
             * for additional information. */
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	3350      	adds	r3, #80	; 0x50
 8005d94:	2260      	movs	r2, #96	; 0x60
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f00d f85e 	bl	8012e5a <memset>
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	4a0d      	ldr	r2, [pc, #52]	; (8005dd8 <prvInitialiseNewTask+0x144>)
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <prvInitialiseNewTask+0x148>)
 8005da8:	659a      	str	r2, [r3, #88]	; 0x58
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <prvInitialiseNewTask+0x14c>)
 8005dae:	65da      	str	r2, [r3, #92]	; 0x5c
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	68f9      	ldr	r1, [r7, #12]
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f001 fd63 	bl	8007880 <pxPortInitialiseStack>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005dcc:	bf00      	nop
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	08015130 	.word	0x08015130
 8005dd8:	0802a110 	.word	0x0802a110
 8005ddc:	0802a130 	.word	0x0802a130
 8005de0:	0802a0f0 	.word	0x0802a0f0

08005de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005dec:	f001 fe54 	bl	8007a98 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005df0:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <prvAddNewTaskToReadyList+0xc0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	4a2b      	ldr	r2, [pc, #172]	; (8005ea4 <prvAddNewTaskToReadyList+0xc0>)
 8005df8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005dfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005e02:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e08:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <prvAddNewTaskToReadyList+0xc0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d110      	bne.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005e10:	f000 fc8c 	bl	800672c <prvInitialiseTaskLists>
 8005e14:	e00d      	b.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005e16:	4b25      	ldr	r3, [pc, #148]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e1e:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d802      	bhi.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005e2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005e32:	4b1f      	ldr	r3, [pc, #124]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3301      	adds	r3, #1
 8005e38:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e3a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e3c:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	2201      	movs	r2, #1
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <prvAddNewTaskToReadyList+0xd4>)
 8005e64:	441a      	add	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f7fe ff90 	bl	8004d92 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005e72:	f001 fe3d 	bl	8007af0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005e76:	4b0d      	ldr	r3, [pc, #52]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d207      	bcs.n	8005e9c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <prvAddNewTaskToReadyList+0xd8>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	2001ac20 	.word	0x2001ac20
 8005ea8:	2001ab48 	.word	0x2001ab48
 8005eac:	2001ac2c 	.word	0x2001ac2c
 8005eb0:	2001ac3c 	.word	0x2001ac3c
 8005eb4:	2001ac28 	.word	0x2001ac28
 8005eb8:	2001ab4c 	.word	0x2001ab4c
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d011      	beq.n	8005ef6 <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8005ed2:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <vTaskDelay+0x54>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <vTaskDelay+0x24>
 8005eda:	490f      	ldr	r1, [pc, #60]	; (8005f18 <vTaskDelay+0x58>)
 8005edc:	f240 503f 	movw	r0, #1343	; 0x53f
 8005ee0:	f7fa fdf5 	bl	8000ace <vAssertCalled>
            vTaskSuspendAll();
 8005ee4:	f000 f874 	bl	8005fd0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ee8:	2100      	movs	r1, #0
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 ff80 	bl	8006df0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005ef0:	f000 f87c 	bl	8005fec <xTaskResumeAll>
 8005ef4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d107      	bne.n	8005f0c <vTaskDelay+0x4c>
        {
            portYIELD_WITHIN_API();
 8005efc:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <vTaskDelay+0x5c>)
 8005efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	2001ac48 	.word	0x2001ac48
 8005f18:	08015130 	.word	0x08015130
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005f26:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <vTaskStartScheduler+0x88>)
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2282      	movs	r2, #130	; 0x82
 8005f32:	491e      	ldr	r1, [pc, #120]	; (8005fac <vTaskStartScheduler+0x8c>)
 8005f34:	481e      	ldr	r0, [pc, #120]	; (8005fb0 <vTaskStartScheduler+0x90>)
 8005f36:	f7ff fe6b 	bl	8005c10 <xTaskCreate>
 8005f3a:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d102      	bne.n	8005f48 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005f42:	f000 ffbb 	bl	8006ebc <xTimerCreateTimerTask>
 8005f46:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d11c      	bne.n	8005f88 <vTaskStartScheduler+0x68>
        __asm volatile
 8005f4e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005f52:	b672      	cpsid	i
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	b662      	cpsie	i
 8005f62:	603b      	str	r3, [r7, #0]
            {
                /* Switch Newlib's _impure_ptr variable to point to the _reent
                 * structure specific to the task that will run first.
                 * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <vTaskStartScheduler+0x94>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3350      	adds	r3, #80	; 0x50
 8005f6a:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <vTaskStartScheduler+0x98>)
 8005f6c:	6013      	str	r3, [r2, #0]
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005f6e:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <vTaskStartScheduler+0x9c>)
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005f76:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <vTaskStartScheduler+0xa0>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <vTaskStartScheduler+0xa4>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005f82:	f001 fd07 	bl	8007994 <xPortStartScheduler>
 8005f86:	e008      	b.n	8005f9a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d104      	bne.n	8005f9a <vTaskStartScheduler+0x7a>
 8005f90:	490d      	ldr	r1, [pc, #52]	; (8005fc8 <vTaskStartScheduler+0xa8>)
 8005f92:	f640 0036 	movw	r0, #2102	; 0x836
 8005f96:	f7fa fd9a 	bl	8000ace <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <vTaskStartScheduler+0xac>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	2001ac44 	.word	0x2001ac44
 8005fac:	08015154 	.word	0x08015154
 8005fb0:	080066fd 	.word	0x080066fd
 8005fb4:	2001ab48 	.word	0x2001ab48
 8005fb8:	20016934 	.word	0x20016934
 8005fbc:	2001ac40 	.word	0x2001ac40
 8005fc0:	2001ac2c 	.word	0x2001ac2c
 8005fc4:	2001ac24 	.word	0x2001ac24
 8005fc8:	08015130 	.word	0x08015130
 8005fcc:	2001690c 	.word	0x2001690c

08005fd0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005fd4:	4b04      	ldr	r3, [pc, #16]	; (8005fe8 <vTaskSuspendAll+0x18>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	4a03      	ldr	r2, [pc, #12]	; (8005fe8 <vTaskSuspendAll+0x18>)
 8005fdc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005fde:	bf00      	nop
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	2001ac48 	.word	0x2001ac48

08005fec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005ffa:	4b3e      	ldr	r3, [pc, #248]	; (80060f4 <xTaskResumeAll+0x108>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <xTaskResumeAll+0x20>
 8006002:	493d      	ldr	r1, [pc, #244]	; (80060f8 <xTaskResumeAll+0x10c>)
 8006004:	f640 00a9 	movw	r0, #2217	; 0x8a9
 8006008:	f7fa fd61 	bl	8000ace <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800600c:	f001 fd44 	bl	8007a98 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006010:	4b38      	ldr	r3, [pc, #224]	; (80060f4 <xTaskResumeAll+0x108>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3b01      	subs	r3, #1
 8006016:	4a37      	ldr	r2, [pc, #220]	; (80060f4 <xTaskResumeAll+0x108>)
 8006018:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800601a:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <xTaskResumeAll+0x108>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d161      	bne.n	80060e6 <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006022:	4b36      	ldr	r3, [pc, #216]	; (80060fc <xTaskResumeAll+0x110>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d05d      	beq.n	80060e6 <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800602a:	e02e      	b.n	800608a <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602c:	4b34      	ldr	r3, [pc, #208]	; (8006100 <xTaskResumeAll+0x114>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3318      	adds	r3, #24
 8006038:	4618      	mov	r0, r3
 800603a:	f7fe ff07 	bl	8004e4c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3304      	adds	r3, #4
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe ff02 	bl	8004e4c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	2201      	movs	r2, #1
 800604e:	409a      	lsls	r2, r3
 8006050:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <xTaskResumeAll+0x118>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4313      	orrs	r3, r2
 8006056:	4a2b      	ldr	r2, [pc, #172]	; (8006104 <xTaskResumeAll+0x118>)
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4a28      	ldr	r2, [pc, #160]	; (8006108 <xTaskResumeAll+0x11c>)
 8006068:	441a      	add	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3304      	adds	r3, #4
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f7fe fe8e 	bl	8004d92 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607a:	4b24      	ldr	r3, [pc, #144]	; (800610c <xTaskResumeAll+0x120>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	429a      	cmp	r2, r3
 8006082:	d302      	bcc.n	800608a <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 8006084:	4b22      	ldr	r3, [pc, #136]	; (8006110 <xTaskResumeAll+0x124>)
 8006086:	2201      	movs	r2, #1
 8006088:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800608a:	4b1d      	ldr	r3, [pc, #116]	; (8006100 <xTaskResumeAll+0x114>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1cc      	bne.n	800602c <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006098:	f000 fbca 	bl	8006830 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800609c:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <xTaskResumeAll+0x128>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d010      	beq.n	80060ca <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80060a8:	f000 f848 	bl	800613c <xTaskIncrementTick>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 80060b2:	4b17      	ldr	r3, [pc, #92]	; (8006110 <xTaskResumeAll+0x124>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f1      	bne.n	80060a8 <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 80060c4:	4b13      	ldr	r3, [pc, #76]	; (8006114 <xTaskResumeAll+0x128>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80060ca:	4b11      	ldr	r3, [pc, #68]	; (8006110 <xTaskResumeAll+0x124>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80060d2:	2301      	movs	r3, #1
 80060d4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <xTaskResumeAll+0x12c>)
 80060d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80060e6:	f001 fd03 	bl	8007af0 <vPortExitCritical>

    return xAlreadyYielded;
 80060ea:	68bb      	ldr	r3, [r7, #8]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	2001ac48 	.word	0x2001ac48
 80060f8:	08015130 	.word	0x08015130
 80060fc:	2001ac20 	.word	0x2001ac20
 8006100:	2001abe0 	.word	0x2001abe0
 8006104:	2001ac28 	.word	0x2001ac28
 8006108:	2001ab4c 	.word	0x2001ab4c
 800610c:	2001ab48 	.word	0x2001ab48
 8006110:	2001ac34 	.word	0x2001ac34
 8006114:	2001ac30 	.word	0x2001ac30
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006122:	4b05      	ldr	r3, [pc, #20]	; (8006138 <xTaskGetTickCount+0x1c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006128:	687b      	ldr	r3, [r7, #4]
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	2001ac24 	.word	0x2001ac24

0800613c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006146:	4b4b      	ldr	r3, [pc, #300]	; (8006274 <xTaskIncrementTick+0x138>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f040 8088 	bne.w	8006260 <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006150:	4b49      	ldr	r3, [pc, #292]	; (8006278 <xTaskIncrementTick+0x13c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006158:	4a47      	ldr	r2, [pc, #284]	; (8006278 <xTaskIncrementTick+0x13c>)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d11a      	bne.n	800619a <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8006164:	4b45      	ldr	r3, [pc, #276]	; (800627c <xTaskIncrementTick+0x140>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <xTaskIncrementTick+0x3c>
 800616e:	4944      	ldr	r1, [pc, #272]	; (8006280 <xTaskIncrementTick+0x144>)
 8006170:	f640 20bc 	movw	r0, #2748	; 0xabc
 8006174:	f7fa fcab 	bl	8000ace <vAssertCalled>
 8006178:	4b40      	ldr	r3, [pc, #256]	; (800627c <xTaskIncrementTick+0x140>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	4b41      	ldr	r3, [pc, #260]	; (8006284 <xTaskIncrementTick+0x148>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a3e      	ldr	r2, [pc, #248]	; (800627c <xTaskIncrementTick+0x140>)
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	4a3f      	ldr	r2, [pc, #252]	; (8006284 <xTaskIncrementTick+0x148>)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	4b3e      	ldr	r3, [pc, #248]	; (8006288 <xTaskIncrementTick+0x14c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3301      	adds	r3, #1
 8006192:	4a3d      	ldr	r2, [pc, #244]	; (8006288 <xTaskIncrementTick+0x14c>)
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	f000 fb4b 	bl	8006830 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800619a:	4b3c      	ldr	r3, [pc, #240]	; (800628c <xTaskIncrementTick+0x150>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d348      	bcc.n	8006236 <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a4:	4b35      	ldr	r3, [pc, #212]	; (800627c <xTaskIncrementTick+0x140>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ae:	4b37      	ldr	r3, [pc, #220]	; (800628c <xTaskIncrementTick+0x150>)
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295
 80061b4:	601a      	str	r2, [r3, #0]
                    break;
 80061b6:	e03e      	b.n	8006236 <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b8:	4b30      	ldr	r3, [pc, #192]	; (800627c <xTaskIncrementTick+0x140>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d203      	bcs.n	80061d8 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80061d0:	4a2e      	ldr	r2, [pc, #184]	; (800628c <xTaskIncrementTick+0x150>)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061d6:	e02e      	b.n	8006236 <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	3304      	adds	r3, #4
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe fe35 	bl	8004e4c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	3318      	adds	r3, #24
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fe2c 	bl	8004e4c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	2201      	movs	r2, #1
 80061fa:	409a      	lsls	r2, r3
 80061fc:	4b24      	ldr	r3, [pc, #144]	; (8006290 <xTaskIncrementTick+0x154>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4313      	orrs	r3, r2
 8006202:	4a23      	ldr	r2, [pc, #140]	; (8006290 <xTaskIncrementTick+0x154>)
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4a20      	ldr	r2, [pc, #128]	; (8006294 <xTaskIncrementTick+0x158>)
 8006214:	441a      	add	r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	3304      	adds	r3, #4
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f7fe fdb8 	bl	8004d92 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006226:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <xTaskIncrementTick+0x15c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	429a      	cmp	r2, r3
 800622e:	d3b9      	bcc.n	80061a4 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8006230:	2301      	movs	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006234:	e7b6      	b.n	80061a4 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006236:	4b18      	ldr	r3, [pc, #96]	; (8006298 <xTaskIncrementTick+0x15c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4915      	ldr	r1, [pc, #84]	; (8006294 <xTaskIncrementTick+0x158>)
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d901      	bls.n	8006252 <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 800624e:	2301      	movs	r3, #1
 8006250:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006252:	4b12      	ldr	r3, [pc, #72]	; (800629c <xTaskIncrementTick+0x160>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 800625a:	2301      	movs	r3, #1
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e004      	b.n	800626a <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006260:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <xTaskIncrementTick+0x164>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3301      	adds	r3, #1
 8006266:	4a0e      	ldr	r2, [pc, #56]	; (80062a0 <xTaskIncrementTick+0x164>)
 8006268:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800626a:	697b      	ldr	r3, [r7, #20]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	2001ac48 	.word	0x2001ac48
 8006278:	2001ac24 	.word	0x2001ac24
 800627c:	2001abd8 	.word	0x2001abd8
 8006280:	08015130 	.word	0x08015130
 8006284:	2001abdc 	.word	0x2001abdc
 8006288:	2001ac38 	.word	0x2001ac38
 800628c:	2001ac40 	.word	0x2001ac40
 8006290:	2001ac28 	.word	0x2001ac28
 8006294:	2001ab4c 	.word	0x2001ab4c
 8006298:	2001ab48 	.word	0x2001ab48
 800629c:	2001ac34 	.word	0x2001ac34
 80062a0:	2001ac30 	.word	0x2001ac30

080062a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062aa:	4b25      	ldr	r3, [pc, #148]	; (8006340 <vTaskSwitchContext+0x9c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <vTaskSwitchContext+0xa0>)
 80062b4:	2201      	movs	r2, #1
 80062b6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80062b8:	e03e      	b.n	8006338 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80062ba:	4b22      	ldr	r3, [pc, #136]	; (8006344 <vTaskSwitchContext+0xa0>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c0:	4b21      	ldr	r3, [pc, #132]	; (8006348 <vTaskSwitchContext+0xa4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	fab3 f383 	clz	r3, r3
 80062cc:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	f1c3 031f 	rsb	r3, r3, #31
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	491d      	ldr	r1, [pc, #116]	; (800634c <vTaskSwitchContext+0xa8>)
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d104      	bne.n	80062f4 <vTaskSwitchContext+0x50>
 80062ea:	4919      	ldr	r1, [pc, #100]	; (8006350 <vTaskSwitchContext+0xac>)
 80062ec:	f640 30f7 	movw	r0, #3063	; 0xbf7
 80062f0:	f7fa fbed 	bl	8000ace <vAssertCalled>
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4a13      	ldr	r2, [pc, #76]	; (800634c <vTaskSwitchContext+0xa8>)
 8006300:	4413      	add	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	3308      	adds	r3, #8
 8006316:	429a      	cmp	r2, r3
 8006318:	d104      	bne.n	8006324 <vTaskSwitchContext+0x80>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	605a      	str	r2, [r3, #4]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <vTaskSwitchContext+0xb0>)
 800632c:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <vTaskSwitchContext+0xb0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3350      	adds	r3, #80	; 0x50
 8006334:	4a08      	ldr	r2, [pc, #32]	; (8006358 <vTaskSwitchContext+0xb4>)
 8006336:	6013      	str	r3, [r2, #0]
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	2001ac48 	.word	0x2001ac48
 8006344:	2001ac34 	.word	0x2001ac34
 8006348:	2001ac28 	.word	0x2001ac28
 800634c:	2001ab4c 	.word	0x2001ab4c
 8006350:	08015130 	.word	0x08015130
 8006354:	2001ab48 	.word	0x2001ab48
 8006358:	20016934 	.word	0x20016934

0800635c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <vTaskPlaceOnEventList+0x1a>
 800636c:	4909      	ldr	r1, [pc, #36]	; (8006394 <vTaskPlaceOnEventList+0x38>)
 800636e:	f640 4011 	movw	r0, #3089	; 0xc11
 8006372:	f7fa fbac 	bl	8000ace <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <vTaskPlaceOnEventList+0x3c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3318      	adds	r3, #24
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fe fd2b 	bl	8004dda <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006384:	2101      	movs	r1, #1
 8006386:	6838      	ldr	r0, [r7, #0]
 8006388:	f000 fd32 	bl	8006df0 <prvAddCurrentTaskToDelayedList>
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	08015130 	.word	0x08015130
 8006398:	2001ab48 	.word	0x2001ab48

0800639c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d104      	bne.n	80063b8 <vTaskPlaceOnUnorderedEventList+0x1c>
 80063ae:	4911      	ldr	r1, [pc, #68]	; (80063f4 <vTaskPlaceOnUnorderedEventList+0x58>)
 80063b0:	f640 4024 	movw	r0, #3108	; 0xc24
 80063b4:	f7fa fb8b 	bl	8000ace <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 80063b8:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <vTaskPlaceOnUnorderedEventList+0x5c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <vTaskPlaceOnUnorderedEventList+0x2e>
 80063c0:	490c      	ldr	r1, [pc, #48]	; (80063f4 <vTaskPlaceOnUnorderedEventList+0x58>)
 80063c2:	f640 4028 	movw	r0, #3112	; 0xc28
 80063c6:	f7fa fb82 	bl	8000ace <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <vTaskPlaceOnUnorderedEventList+0x60>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80063d4:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <vTaskPlaceOnUnorderedEventList+0x60>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3318      	adds	r3, #24
 80063dc:	4619      	mov	r1, r3
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7fe fcd7 	bl	8004d92 <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063e4:	2101      	movs	r1, #1
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fd02 	bl	8006df0 <prvAddCurrentTaskToDelayedList>
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	08015130 	.word	0x08015130
 80063f8:	2001ac48 	.word	0x2001ac48
 80063fc:	2001ab48 	.word	0x2001ab48

08006400 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <vTaskPlaceOnEventListRestricted+0x1c>
 8006412:	490d      	ldr	r1, [pc, #52]	; (8006448 <vTaskPlaceOnEventListRestricted+0x48>)
 8006414:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 8006418:	f7fa fb59 	bl	8000ace <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800641c:	4b0b      	ldr	r3, [pc, #44]	; (800644c <vTaskPlaceOnEventListRestricted+0x4c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3318      	adds	r3, #24
 8006422:	4619      	mov	r1, r3
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f7fe fcb4 	bl	8004d92 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 8006430:	f04f 33ff 	mov.w	r3, #4294967295
 8006434:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	68b8      	ldr	r0, [r7, #8]
 800643a:	f000 fcd9 	bl	8006df0 <prvAddCurrentTaskToDelayedList>
    }
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	08015130 	.word	0x08015130
 800644c:	2001ab48 	.word	0x2001ab48

08006450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <xTaskRemoveFromEventList+0x20>
 8006466:	4922      	ldr	r1, [pc, #136]	; (80064f0 <xTaskRemoveFromEventList+0xa0>)
 8006468:	f44f 6047 	mov.w	r0, #3184	; 0xc70
 800646c:	f7fa fb2f 	bl	8000ace <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	3318      	adds	r3, #24
 8006474:	4618      	mov	r0, r3
 8006476:	f7fe fce9 	bl	8004e4c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800647a:	4b1e      	ldr	r3, [pc, #120]	; (80064f4 <xTaskRemoveFromEventList+0xa4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d11c      	bne.n	80064bc <xTaskRemoveFromEventList+0x6c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	3304      	adds	r3, #4
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe fce0 	bl	8004e4c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	2201      	movs	r2, #1
 8006492:	409a      	lsls	r2, r3
 8006494:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <xTaskRemoveFromEventList+0xa8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4313      	orrs	r3, r2
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <xTaskRemoveFromEventList+0xa8>)
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4a14      	ldr	r2, [pc, #80]	; (80064fc <xTaskRemoveFromEventList+0xac>)
 80064ac:	441a      	add	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	3304      	adds	r3, #4
 80064b2:	4619      	mov	r1, r3
 80064b4:	4610      	mov	r0, r2
 80064b6:	f7fe fc6c 	bl	8004d92 <vListInsertEnd>
 80064ba:	e005      	b.n	80064c8 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	3318      	adds	r3, #24
 80064c0:	4619      	mov	r1, r3
 80064c2:	480f      	ldr	r0, [pc, #60]	; (8006500 <xTaskRemoveFromEventList+0xb0>)
 80064c4:	f7fe fc65 	bl	8004d92 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <xTaskRemoveFromEventList+0xb4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d905      	bls.n	80064e2 <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80064d6:	2301      	movs	r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80064da:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <xTaskRemoveFromEventList+0xb8>)
 80064dc:	2201      	movs	r2, #1
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e001      	b.n	80064e6 <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80064e6:	68fb      	ldr	r3, [r7, #12]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	08015130 	.word	0x08015130
 80064f4:	2001ac48 	.word	0x2001ac48
 80064f8:	2001ac28 	.word	0x2001ac28
 80064fc:	2001ab4c 	.word	0x2001ab4c
 8006500:	2001abe0 	.word	0x2001abe0
 8006504:	2001ab48 	.word	0x2001ab48
 8006508:	2001ac34 	.word	0x2001ac34

0800650c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 8006516:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <vTaskRemoveFromUnorderedEventList+0x98>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <vTaskRemoveFromUnorderedEventList+0x1c>
 800651e:	4922      	ldr	r1, [pc, #136]	; (80065a8 <vTaskRemoveFromUnorderedEventList+0x9c>)
 8006520:	f640 40a8 	movw	r0, #3240	; 0xca8
 8006524:	f7fa fad3 	bl	8000ace <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	60fb      	str	r3, [r7, #12]
    configASSERT( pxUnblockedTCB );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <vTaskRemoveFromUnorderedEventList+0x3c>
 800653e:	491a      	ldr	r1, [pc, #104]	; (80065a8 <vTaskRemoveFromUnorderedEventList+0x9c>)
 8006540:	f44f 604b 	mov.w	r0, #3248	; 0xcb0
 8006544:	f7fa fac3 	bl	8000ace <vAssertCalled>
    ( void ) uxListRemove( pxEventListItem );
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7fe fc7f 	bl	8004e4c <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3304      	adds	r3, #4
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fc7a 	bl	8004e4c <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	2201      	movs	r2, #1
 800655e:	409a      	lsls	r2, r3
 8006560:	4b12      	ldr	r3, [pc, #72]	; (80065ac <vTaskRemoveFromUnorderedEventList+0xa0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4313      	orrs	r3, r2
 8006566:	4a11      	ldr	r2, [pc, #68]	; (80065ac <vTaskRemoveFromUnorderedEventList+0xa0>)
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a0e      	ldr	r2, [pc, #56]	; (80065b0 <vTaskRemoveFromUnorderedEventList+0xa4>)
 8006578:	441a      	add	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fe fc06 	bl	8004d92 <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <vTaskRemoveFromUnorderedEventList+0xa8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	429a      	cmp	r2, r3
 8006592:	d902      	bls.n	800659a <vTaskRemoveFromUnorderedEventList+0x8e>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8006594:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <vTaskRemoveFromUnorderedEventList+0xac>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]
    }
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	2001ac48 	.word	0x2001ac48
 80065a8:	08015130 	.word	0x08015130
 80065ac:	2001ac28 	.word	0x2001ac28
 80065b0:	2001ab4c 	.word	0x2001ab4c
 80065b4:	2001ab48 	.word	0x2001ab48
 80065b8:	2001ac34 	.word	0x2001ac34

080065bc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <vTaskSetTimeOutState+0x18>
 80065ca:	490a      	ldr	r1, [pc, #40]	; (80065f4 <vTaskSetTimeOutState+0x38>)
 80065cc:	f640 40d4 	movw	r0, #3284	; 0xcd4
 80065d0:	f7fa fa7d 	bl	8000ace <vAssertCalled>
    taskENTER_CRITICAL();
 80065d4:	f001 fa60 	bl	8007a98 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065d8:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <vTaskSetTimeOutState+0x3c>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <vTaskSetTimeOutState+0x40>)
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 80065e8:	f001 fa82 	bl	8007af0 <vPortExitCritical>
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	08015130 	.word	0x08015130
 80065f8:	2001ac38 	.word	0x2001ac38
 80065fc:	2001ac24 	.word	0x2001ac24

08006600 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <vTaskInternalSetTimeOutState+0x24>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <vTaskInternalSetTimeOutState+0x28>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	605a      	str	r2, [r3, #4]
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	2001ac38 	.word	0x2001ac38
 8006628:	2001ac24 	.word	0x2001ac24

0800662c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <xTaskCheckForTimeOut+0x1a>
 800663c:	4926      	ldr	r1, [pc, #152]	; (80066d8 <xTaskCheckForTimeOut+0xac>)
 800663e:	f640 40eb 	movw	r0, #3307	; 0xceb
 8006642:	f7fa fa44 	bl	8000ace <vAssertCalled>
    configASSERT( pxTicksToWait );
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <xTaskCheckForTimeOut+0x2a>
 800664c:	4922      	ldr	r1, [pc, #136]	; (80066d8 <xTaskCheckForTimeOut+0xac>)
 800664e:	f640 40ec 	movw	r0, #3308	; 0xcec
 8006652:	f7fa fa3c 	bl	8000ace <vAssertCalled>

    taskENTER_CRITICAL();
 8006656:	f001 fa1f 	bl	8007a98 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800665a:	4b20      	ldr	r3, [pc, #128]	; (80066dc <xTaskCheckForTimeOut+0xb0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d102      	bne.n	800667a <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e026      	b.n	80066c8 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4b18      	ldr	r3, [pc, #96]	; (80066e0 <xTaskCheckForTimeOut+0xb4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d00a      	beq.n	800669c <xTaskCheckForTimeOut+0x70>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	429a      	cmp	r2, r3
 800668e:	d305      	bcc.n	800669c <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006690:	2301      	movs	r3, #1
 8006692:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	e015      	b.n	80066c8 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d20b      	bcs.n	80066be <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1ad2      	subs	r2, r2, r3
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff ffa4 	bl	8006600 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e004      	b.n	80066c8 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80066c4:	2301      	movs	r3, #1
 80066c6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80066c8:	f001 fa12 	bl	8007af0 <vPortExitCritical>

    return xReturn;
 80066cc:	697b      	ldr	r3, [r7, #20]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	08015130 	.word	0x08015130
 80066dc:	2001ac24 	.word	0x2001ac24
 80066e0:	2001ac38 	.word	0x2001ac38

080066e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80066e8:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <vTaskMissedYield+0x14>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
}
 80066ee:	bf00      	nop
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	2001ac34 	.word	0x2001ac34

080066fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006704:	f000 f852 	bl	80067ac <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006708:	4b06      	ldr	r3, [pc, #24]	; (8006724 <prvIdleTask+0x28>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d9f9      	bls.n	8006704 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <prvIdleTask+0x2c>)
 8006712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006720:	e7f0      	b.n	8006704 <prvIdleTask+0x8>
 8006722:	bf00      	nop
 8006724:	2001ab4c 	.word	0x2001ab4c
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006732:	2300      	movs	r3, #0
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	e00c      	b.n	8006752 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4a12      	ldr	r2, [pc, #72]	; (800678c <prvInitialiseTaskLists+0x60>)
 8006744:	4413      	add	r3, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe faf6 	bl	8004d38 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3301      	adds	r3, #1
 8006750:	607b      	str	r3, [r7, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d9ef      	bls.n	8006738 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006758:	480d      	ldr	r0, [pc, #52]	; (8006790 <prvInitialiseTaskLists+0x64>)
 800675a:	f7fe faed 	bl	8004d38 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800675e:	480d      	ldr	r0, [pc, #52]	; (8006794 <prvInitialiseTaskLists+0x68>)
 8006760:	f7fe faea 	bl	8004d38 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006764:	480c      	ldr	r0, [pc, #48]	; (8006798 <prvInitialiseTaskLists+0x6c>)
 8006766:	f7fe fae7 	bl	8004d38 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800676a:	480c      	ldr	r0, [pc, #48]	; (800679c <prvInitialiseTaskLists+0x70>)
 800676c:	f7fe fae4 	bl	8004d38 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006770:	480b      	ldr	r0, [pc, #44]	; (80067a0 <prvInitialiseTaskLists+0x74>)
 8006772:	f7fe fae1 	bl	8004d38 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006776:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <prvInitialiseTaskLists+0x78>)
 8006778:	4a05      	ldr	r2, [pc, #20]	; (8006790 <prvInitialiseTaskLists+0x64>)
 800677a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <prvInitialiseTaskLists+0x7c>)
 800677e:	4a05      	ldr	r2, [pc, #20]	; (8006794 <prvInitialiseTaskLists+0x68>)
 8006780:	601a      	str	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	2001ab4c 	.word	0x2001ab4c
 8006790:	2001abb0 	.word	0x2001abb0
 8006794:	2001abc4 	.word	0x2001abc4
 8006798:	2001abe0 	.word	0x2001abe0
 800679c:	2001abf4 	.word	0x2001abf4
 80067a0:	2001ac0c 	.word	0x2001ac0c
 80067a4:	2001abd8 	.word	0x2001abd8
 80067a8:	2001abdc 	.word	0x2001abdc

080067ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b2:	e019      	b.n	80067e8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80067b4:	f001 f970 	bl	8007a98 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b8:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <prvCheckTasksWaitingTermination+0x4c>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fb41 	bl	8004e4c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80067ca:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <prvCheckTasksWaitingTermination+0x50>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <prvCheckTasksWaitingTermination+0x50>)
 80067d2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <prvCheckTasksWaitingTermination+0x54>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3b01      	subs	r3, #1
 80067da:	4a09      	ldr	r2, [pc, #36]	; (8006800 <prvCheckTasksWaitingTermination+0x54>)
 80067dc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80067de:	f001 f987 	bl	8007af0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f80e 	bl	8006804 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <prvCheckTasksWaitingTermination+0x54>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e1      	bne.n	80067b4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	2001abf4 	.word	0x2001abf4
 80067fc:	2001ac20 	.word	0x2001ac20
 8006800:	2001ac08 	.word	0x2001ac08

08006804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
         * to the task to free any memory allocated at the application level.
         * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
         * for additional information. */
        #if ( configUSE_NEWLIB_REENTRANT == 1 )
            {
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3350      	adds	r3, #80	; 0x50
 8006810:	4618      	mov	r0, r3
 8006812:	f00c ffcf 	bl	80137b4 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	4618      	mov	r0, r3
 800681c:	f000 ff1c 	bl	8007658 <vPortFree>
                vPortFree( pxTCB );
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 ff19 	bl	8007658 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <prvResetNextTaskUnblockTime+0x30>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d104      	bne.n	8006848 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <prvResetNextTaskUnblockTime+0x34>)
 8006840:	f04f 32ff 	mov.w	r2, #4294967295
 8006844:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006846:	e005      	b.n	8006854 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <prvResetNextTaskUnblockTime+0x30>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a04      	ldr	r2, [pc, #16]	; (8006864 <prvResetNextTaskUnblockTime+0x34>)
 8006852:	6013      	str	r3, [r2, #0]
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	2001abd8 	.word	0x2001abd8
 8006864:	2001ac40 	.word	0x2001ac40

08006868 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800686e:	4b05      	ldr	r3, [pc, #20]	; (8006884 <xTaskGetCurrentTaskHandle+0x1c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	607b      	str	r3, [r7, #4]

        return xReturn;
 8006874:	687b      	ldr	r3, [r7, #4]
    }
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	2001ab48 	.word	0x2001ab48

08006888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800688e:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <xTaskGetSchedulerState+0x34>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d102      	bne.n	800689c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006896:	2301      	movs	r3, #1
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	e008      	b.n	80068ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800689c:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <xTaskGetSchedulerState+0x38>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d102      	bne.n	80068aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80068a4:	2302      	movs	r3, #2
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	e001      	b.n	80068ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80068aa:	2300      	movs	r3, #0
 80068ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80068ae:	687b      	ldr	r3, [r7, #4]
    }
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	2001ac2c 	.word	0x2001ac2c
 80068c0:	2001ac48 	.word	0x2001ac48

080068c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d05e      	beq.n	8006998 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068de:	4b31      	ldr	r3, [pc, #196]	; (80069a4 <xTaskPriorityInherit+0xe0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d24e      	bcs.n	8006986 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	db06      	blt.n	80068fe <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f0:	4b2c      	ldr	r3, [pc, #176]	; (80069a4 <xTaskPriorityInherit+0xe0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	f1c3 0205 	rsb	r2, r3, #5
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	6959      	ldr	r1, [r3, #20]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4a26      	ldr	r2, [pc, #152]	; (80069a8 <xTaskPriorityInherit+0xe4>)
 8006910:	4413      	add	r3, r2
 8006912:	4299      	cmp	r1, r3
 8006914:	d12f      	bne.n	8006976 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	3304      	adds	r3, #4
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe fa96 	bl	8004e4c <uxListRemove>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	2201      	movs	r2, #1
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	43da      	mvns	r2, r3
 8006932:	4b1e      	ldr	r3, [pc, #120]	; (80069ac <xTaskPriorityInherit+0xe8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4013      	ands	r3, r2
 8006938:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <xTaskPriorityInherit+0xe8>)
 800693a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800693c:	4b19      	ldr	r3, [pc, #100]	; (80069a4 <xTaskPriorityInherit+0xe0>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	2201      	movs	r2, #1
 800694c:	409a      	lsls	r2, r3
 800694e:	4b17      	ldr	r3, [pc, #92]	; (80069ac <xTaskPriorityInherit+0xe8>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4313      	orrs	r3, r2
 8006954:	4a15      	ldr	r2, [pc, #84]	; (80069ac <xTaskPriorityInherit+0xe8>)
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4a10      	ldr	r2, [pc, #64]	; (80069a8 <xTaskPriorityInherit+0xe4>)
 8006966:	441a      	add	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f7fe fa0f 	bl	8004d92 <vListInsertEnd>
 8006974:	e004      	b.n	8006980 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006976:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <xTaskPriorityInherit+0xe0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e008      	b.n	8006998 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800698a:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <xTaskPriorityInherit+0xe0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	429a      	cmp	r2, r3
 8006992:	d201      	bcs.n	8006998 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006998:	68fb      	ldr	r3, [r7, #12]
    }
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	2001ab48 	.word	0x2001ab48
 80069a8:	2001ab4c 	.word	0x2001ab4c
 80069ac:	2001ac28 	.word	0x2001ac28

080069b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d057      	beq.n	8006a76 <xTaskPriorityDisinherit+0xc6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80069c6:	4b2e      	ldr	r3, [pc, #184]	; (8006a80 <xTaskPriorityDisinherit+0xd0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d004      	beq.n	80069da <xTaskPriorityDisinherit+0x2a>
 80069d0:	492c      	ldr	r1, [pc, #176]	; (8006a84 <xTaskPriorityDisinherit+0xd4>)
 80069d2:	f241 003d 	movw	r0, #4157	; 0x103d
 80069d6:	f7fa f87a 	bl	8000ace <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <xTaskPriorityDisinherit+0x3c>
 80069e2:	4928      	ldr	r1, [pc, #160]	; (8006a84 <xTaskPriorityDisinherit+0xd4>)
 80069e4:	f241 003e 	movw	r0, #4158	; 0x103e
 80069e8:	f7fa f871 	bl	8000ace <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f0:	1e5a      	subs	r2, r3, #1
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d039      	beq.n	8006a76 <xTaskPriorityDisinherit+0xc6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d135      	bne.n	8006a76 <xTaskPriorityDisinherit+0xc6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fa1c 	bl	8004e4c <uxListRemove>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	2201      	movs	r2, #1
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	43da      	mvns	r2, r3
 8006a26:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <xTaskPriorityDisinherit+0xd8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	4a16      	ldr	r2, [pc, #88]	; (8006a88 <xTaskPriorityDisinherit+0xd8>)
 8006a2e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	f1c3 0205 	rsb	r2, r3, #5
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	2201      	movs	r2, #1
 8006a4a:	409a      	lsls	r2, r3
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <xTaskPriorityDisinherit+0xd8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	4a0d      	ldr	r2, [pc, #52]	; (8006a88 <xTaskPriorityDisinherit+0xd8>)
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <xTaskPriorityDisinherit+0xdc>)
 8006a64:	441a      	add	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	f7fe f990 	bl	8004d92 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006a72:	2301      	movs	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006a76:	68fb      	ldr	r3, [r7, #12]
    }
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	2001ab48 	.word	0x2001ab48
 8006a84:	08015130 	.word	0x08015130
 8006a88:	2001ac28 	.word	0x2001ac28
 8006a8c:	2001ab4c 	.word	0x2001ab4c

08006a90 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d06b      	beq.n	8006b80 <vTaskPriorityDisinheritAfterTimeout+0xf0>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d104      	bne.n	8006aba <vTaskPriorityDisinheritAfterTimeout+0x2a>
 8006ab0:	4935      	ldr	r1, [pc, #212]	; (8006b88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006ab2:	f241 008d 	movw	r0, #4237	; 0x108d
 8006ab6:	f7fa f80a 	bl	8000ace <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d902      	bls.n	8006aca <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e002      	b.n	8006ad0 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ace:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d052      	beq.n	8006b80 <vTaskPriorityDisinheritAfterTimeout+0xf0>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d14d      	bne.n	8006b80 <vTaskPriorityDisinheritAfterTimeout+0xf0>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8006ae4:	4b29      	ldr	r3, [pc, #164]	; (8006b8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d104      	bne.n	8006af8 <vTaskPriorityDisinheritAfterTimeout+0x68>
 8006aee:	4926      	ldr	r1, [pc, #152]	; (8006b88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006af0:	f241 00a8 	movw	r0, #4264	; 0x10a8
 8006af4:	f7f9 ffeb 	bl	8000ace <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	db04      	blt.n	8006b16 <vTaskPriorityDisinheritAfterTimeout+0x86>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f1c3 0205 	rsb	r2, r3, #5
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	6959      	ldr	r1, [r3, #20]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4a1a      	ldr	r2, [pc, #104]	; (8006b90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006b26:	4413      	add	r3, r2
 8006b28:	4299      	cmp	r1, r3
 8006b2a:	d129      	bne.n	8006b80 <vTaskPriorityDisinheritAfterTimeout+0xf0>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe f98b 	bl	8004e4c <uxListRemove>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <vTaskPriorityDisinheritAfterTimeout+0xc2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	2201      	movs	r2, #1
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	43da      	mvns	r2, r3
 8006b48:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	4a11      	ldr	r2, [pc, #68]	; (8006b94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b50:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	2201      	movs	r2, #1
 8006b58:	409a      	lsls	r2, r3
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	4a0c      	ldr	r2, [pc, #48]	; (8006b94 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006b72:	441a      	add	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	f7fe f909 	bl	8004d92 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006b80:	bf00      	nop
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	08015130 	.word	0x08015130
 8006b8c:	2001ab48 	.word	0x2001ab48
 8006b90:	2001ab4c 	.word	0x2001ab4c
 8006b94:	2001ac28 	.word	0x2001ac28

08006b98 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006b9e:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <uxTaskResetEventItemValue+0x2c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba6:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <uxTaskResetEventItemValue+0x2c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <uxTaskResetEventItemValue+0x2c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f1c2 0205 	rsb	r2, r2, #5
 8006bb4:	619a      	str	r2, [r3, #24]

    return uxReturn;
 8006bb6:	687b      	ldr	r3, [r7, #4]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	2001ab48 	.word	0x2001ab48

08006bc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8006bcc:	4b07      	ldr	r3, [pc, #28]	; (8006bec <pvTaskIncrementMutexHeldCount+0x24>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d004      	beq.n	8006bde <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <pvTaskIncrementMutexHeldCount+0x24>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bda:	3201      	adds	r2, #1
 8006bdc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8006bde:	4b03      	ldr	r3, [pc, #12]	; (8006bec <pvTaskIncrementMutexHeldCount+0x24>)
 8006be0:	681b      	ldr	r3, [r3, #0]
    }
 8006be2:	4618      	mov	r0, r3
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	2001ab48 	.word	0x2001ab48

08006bf0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <ulTaskGenericNotifyTake+0x1c>
 8006c02:	492a      	ldr	r1, [pc, #168]	; (8006cac <ulTaskGenericNotifyTake+0xbc>)
 8006c04:	f241 2052 	movw	r0, #4690	; 0x1252
 8006c08:	f7f9 ff61 	bl	8000ace <vAssertCalled>

        taskENTER_CRITICAL();
 8006c0c:	f000 ff44 	bl	8007a98 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8006c10:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <ulTaskGenericNotifyTake+0xc0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	322c      	adds	r2, #44	; 0x2c
 8006c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d115      	bne.n	8006c4c <ulTaskGenericNotifyTake+0x5c>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006c20:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <ulTaskGenericNotifyTake+0xc0>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	33b4      	adds	r3, #180	; 0xb4
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <ulTaskGenericNotifyTake+0x5c>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c34:	2101      	movs	r1, #1
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f8da 	bl	8006df0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <ulTaskGenericNotifyTake+0xc4>)
 8006c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006c4c:	f000 ff50 	bl	8007af0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006c50:	f000 ff22 	bl	8007a98 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006c54:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <ulTaskGenericNotifyTake+0xc0>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	322c      	adds	r2, #44	; 0x2c
 8006c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c60:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d012      	beq.n	8006c8e <ulTaskGenericNotifyTake+0x9e>
            {
                if( xClearCountOnExit != pdFALSE )
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d007      	beq.n	8006c7e <ulTaskGenericNotifyTake+0x8e>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8006c6e:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <ulTaskGenericNotifyTake+0xc0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	322c      	adds	r2, #44	; 0x2c
 8006c76:	2100      	movs	r1, #0
 8006c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006c7c:	e007      	b.n	8006c8e <ulTaskGenericNotifyTake+0x9e>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <ulTaskGenericNotifyTake+0xc0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	1e51      	subs	r1, r2, #1
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	322c      	adds	r2, #44	; 0x2c
 8006c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006c8e:	4b08      	ldr	r3, [pc, #32]	; (8006cb0 <ulTaskGenericNotifyTake+0xc0>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	33b4      	adds	r3, #180	; 0xb4
 8006c98:	2200      	movs	r2, #0
 8006c9a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006c9c:	f000 ff28 	bl	8007af0 <vPortExitCritical>

        return ulReturn;
 8006ca0:	697b      	ldr	r3, [r7, #20]
    }
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	08015130 	.word	0x08015130
 8006cb0:	2001ab48 	.word	0x2001ab48
 8006cb4:	e000ed04 	.word	0xe000ed04

08006cb8 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <vTaskGenericNotifyGiveFromISR+0x1c>
 8006cca:	4942      	ldr	r1, [pc, #264]	; (8006dd4 <vTaskGenericNotifyGiveFromISR+0x11c>)
 8006ccc:	f241 30f8 	movw	r0, #5112	; 0x13f8
 8006cd0:	f7f9 fefd 	bl	8000ace <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <vTaskGenericNotifyGiveFromISR+0x2c>
 8006cda:	493e      	ldr	r1, [pc, #248]	; (8006dd4 <vTaskGenericNotifyGiveFromISR+0x11c>)
 8006cdc:	f241 30f9 	movw	r0, #5113	; 0x13f9
 8006ce0:	f7f9 fef5 	bl	8000ace <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ce4:	f000 ffb2 	bl	8007c4c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 8006cec:	f3ef 8211 	mrs	r2, BASEPRI
 8006cf0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006cf4:	b672      	cpsid	i
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	b662      	cpsie	i
 8006d04:	61ba      	str	r2, [r7, #24]
 8006d06:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8006d08:	69bb      	ldr	r3, [r7, #24]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d0a:	623b      	str	r3, [r7, #32]
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	33b4      	adds	r3, #180	; 0xb4
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	77fb      	strb	r3, [r7, #31]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	33b4      	adds	r3, #180	; 0xb4
 8006d20:	2202      	movs	r2, #2
 8006d22:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	322c      	adds	r2, #44	; 0x2c
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	1c59      	adds	r1, r3, #1
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	322c      	adds	r2, #44	; 0x2c
 8006d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006d3a:	7ffb      	ldrb	r3, [r7, #31]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d13f      	bne.n	8006dc0 <vTaskGenericNotifyGiveFromISR+0x108>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <vTaskGenericNotifyGiveFromISR+0x9a>
 8006d48:	4922      	ldr	r1, [pc, #136]	; (8006dd4 <vTaskGenericNotifyGiveFromISR+0x11c>)
 8006d4a:	f241 401f 	movw	r0, #5151	; 0x141f
 8006d4e:	f7f9 febe 	bl	8000ace <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d52:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <vTaskGenericNotifyGiveFromISR+0x120>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d11c      	bne.n	8006d94 <vTaskGenericNotifyGiveFromISR+0xdc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe f874 	bl	8004e4c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	2201      	movs	r2, #1
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <vTaskGenericNotifyGiveFromISR+0x124>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	4a1a      	ldr	r2, [pc, #104]	; (8006ddc <vTaskGenericNotifyGiveFromISR+0x124>)
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <vTaskGenericNotifyGiveFromISR+0x128>)
 8006d84:	441a      	add	r2, r3
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7fe f800 	bl	8004d92 <vListInsertEnd>
 8006d92:	e005      	b.n	8006da0 <vTaskGenericNotifyGiveFromISR+0xe8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	3318      	adds	r3, #24
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4812      	ldr	r0, [pc, #72]	; (8006de4 <vTaskGenericNotifyGiveFromISR+0x12c>)
 8006d9c:	f7fd fff9 	bl	8004d92 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <vTaskGenericNotifyGiveFromISR+0x130>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d908      	bls.n	8006dc0 <vTaskGenericNotifyGiveFromISR+0x108>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <vTaskGenericNotifyGiveFromISR+0x102>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006dba:	4b0c      	ldr	r3, [pc, #48]	; (8006dec <vTaskGenericNotifyGiveFromISR+0x134>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f383 8811 	msr	BASEPRI, r3
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8006dca:	bf00      	nop
 8006dcc:	3728      	adds	r7, #40	; 0x28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08015130 	.word	0x08015130
 8006dd8:	2001ac48 	.word	0x2001ac48
 8006ddc:	2001ac28 	.word	0x2001ac28
 8006de0:	2001ab4c 	.word	0x2001ab4c
 8006de4:	2001abe0 	.word	0x2001abe0
 8006de8:	2001ab48 	.word	0x2001ab48
 8006dec:	2001ac34 	.word	0x2001ac34

08006df0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006dfa:	4b29      	ldr	r3, [pc, #164]	; (8006ea0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e00:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe f820 	bl	8004e4c <uxListRemove>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10b      	bne.n	8006e2a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e12:	4b24      	ldr	r3, [pc, #144]	; (8006ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	2201      	movs	r2, #1
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	43da      	mvns	r2, r3
 8006e20:	4b21      	ldr	r3, [pc, #132]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4013      	ands	r3, r2
 8006e26:	4a20      	ldr	r2, [pc, #128]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e28:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d10a      	bne.n	8006e48 <prvAddCurrentTaskToDelayedList+0x58>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e38:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4619      	mov	r1, r3
 8006e40:	481a      	ldr	r0, [pc, #104]	; (8006eac <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e42:	f7fd ffa6 	bl	8004d92 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006e46:	e026      	b.n	8006e96 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e50:	4b14      	ldr	r3, [pc, #80]	; (8006ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d209      	bcs.n	8006e74 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e60:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7fd ffb4 	bl	8004dda <vListInsert>
}
 8006e72:	e010      	b.n	8006e96 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f7fd ffaa 	bl	8004dda <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d202      	bcs.n	8006e96 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006e90:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6013      	str	r3, [r2, #0]
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	2001ac24 	.word	0x2001ac24
 8006ea4:	2001ab48 	.word	0x2001ab48
 8006ea8:	2001ac28 	.word	0x2001ac28
 8006eac:	2001ac0c 	.word	0x2001ac0c
 8006eb0:	2001abdc 	.word	0x2001abdc
 8006eb4:	2001abd8 	.word	0x2001abd8
 8006eb8:	2001ac40 	.word	0x2001ac40

08006ebc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006ec6:	f000 fad3 	bl	8007470 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006eca:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <xTimerCreateTimerTask+0x48>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00b      	beq.n	8006eea <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <xTimerCreateTimerTask+0x4c>)
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	2300      	movs	r3, #0
 8006edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006ee0:	490a      	ldr	r1, [pc, #40]	; (8006f0c <xTimerCreateTimerTask+0x50>)
 8006ee2:	480b      	ldr	r0, [pc, #44]	; (8006f10 <xTimerCreateTimerTask+0x54>)
 8006ee4:	f7fe fe94 	bl	8005c10 <xTaskCreate>
 8006ee8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <xTimerCreateTimerTask+0x3e>
 8006ef0:	4908      	ldr	r1, [pc, #32]	; (8006f14 <xTimerCreateTimerTask+0x58>)
 8006ef2:	f240 100d 	movw	r0, #269	; 0x10d
 8006ef6:	f7f9 fdea 	bl	8000ace <vAssertCalled>
        return xReturn;
 8006efa:	687b      	ldr	r3, [r7, #4]
    }
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	2001ac7c 	.word	0x2001ac7c
 8006f08:	2001ac80 	.word	0x2001ac80
 8006f0c:	0801516c 	.word	0x0801516c
 8006f10:	08007041 	.word	0x08007041
 8006f14:	08015174 	.word	0x08015174

08006f18 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <xTimerGenericCommand+0x22>
 8006f30:	491c      	ldr	r1, [pc, #112]	; (8006fa4 <xTimerGenericCommand+0x8c>)
 8006f32:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8006f36:	f7f9 fdca 	bl	8000ace <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006f3a:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <xTimerGenericCommand+0x90>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d02a      	beq.n	8006f98 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b05      	cmp	r3, #5
 8006f52:	dc18      	bgt.n	8006f86 <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f54:	f7ff fc98 	bl	8006888 <xTaskGetSchedulerState>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d109      	bne.n	8006f72 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <xTimerGenericCommand+0x90>)
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	f107 0114 	add.w	r1, r7, #20
 8006f66:	2300      	movs	r3, #0
 8006f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6a:	f7fe f893 	bl	8005094 <xQueueGenericSend>
 8006f6e:	6278      	str	r0, [r7, #36]	; 0x24
 8006f70:	e012      	b.n	8006f98 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f72:	4b0d      	ldr	r3, [pc, #52]	; (8006fa8 <xTimerGenericCommand+0x90>)
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	f107 0114 	add.w	r1, r7, #20
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f7fe f889 	bl	8005094 <xQueueGenericSend>
 8006f82:	6278      	str	r0, [r7, #36]	; 0x24
 8006f84:	e008      	b.n	8006f98 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f86:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <xTimerGenericCommand+0x90>)
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f107 0114 	add.w	r1, r7, #20
 8006f8e:	2300      	movs	r3, #0
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	f7fe f983 	bl	800529c <xQueueGenericSendFromISR>
 8006f96:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3728      	adds	r7, #40	; 0x28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	08015174 	.word	0x08015174
 8006fa8:	2001ac7c 	.word	0x2001ac7c

08006fac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb6:	4b20      	ldr	r3, [pc, #128]	; (8007038 <prvProcessExpiredTimer+0x8c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fd ff41 	bl	8004e4c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01d      	beq.n	8007014 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	699a      	ldr	r2, [r3, #24]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	18d1      	adds	r1, r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f8cf 	bl	8007188 <prvInsertTimerInActiveList>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01a      	beq.n	8007026 <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff ff8c 	bl	8006f18 <xTimerGenericCommand>
 8007000:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10e      	bne.n	8007026 <prvProcessExpiredTimer+0x7a>
 8007008:	490c      	ldr	r1, [pc, #48]	; (800703c <prvProcessExpiredTimer+0x90>)
 800700a:	f44f 7005 	mov.w	r0, #532	; 0x214
 800700e:	f7f9 fd5e 	bl	8000ace <vAssertCalled>
 8007012:	e008      	b.n	8007026 <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	b2da      	uxtb	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	4798      	blx	r3
    }
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	2001ac74 	.word	0x2001ac74
 800703c:	08015174 	.word	0x08015174

08007040 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007048:	f107 0308 	add.w	r3, r7, #8
 800704c:	4618      	mov	r0, r3
 800704e:	f000 f857 	bl	8007100 <prvGetNextExpireTime>
 8007052:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	4619      	mov	r1, r3
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f803 	bl	8007064 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800705e:	f000 f8d5 	bl	800720c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007062:	e7f1      	b.n	8007048 <prvTimerTask+0x8>

08007064 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800706e:	f7fe ffaf 	bl	8005fd0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007072:	f107 0308 	add.w	r3, r7, #8
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f866 	bl	8007148 <prvSampleTimeNow>
 800707c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d130      	bne.n	80070e6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <prvProcessTimerOrBlockTask+0x3c>
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	429a      	cmp	r2, r3
 8007090:	d806      	bhi.n	80070a0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007092:	f7fe ffab 	bl	8005fec <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff ff87 	bl	8006fac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800709e:	e024      	b.n	80070ea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070a6:	4b13      	ldr	r3, [pc, #76]	; (80070f4 <prvProcessTimerOrBlockTask+0x90>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <prvProcessTimerOrBlockTask+0x50>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <prvProcessTimerOrBlockTask+0x52>
 80070b4:	2300      	movs	r3, #0
 80070b6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070b8:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <prvProcessTimerOrBlockTask+0x94>)
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	4619      	mov	r1, r3
 80070c6:	f7fe fd17 	bl	8005af8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80070ca:	f7fe ff8f 	bl	8005fec <xTaskResumeAll>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80070d4:	4b09      	ldr	r3, [pc, #36]	; (80070fc <prvProcessTimerOrBlockTask+0x98>)
 80070d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	f3bf 8f6f 	isb	sy
    }
 80070e4:	e001      	b.n	80070ea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80070e6:	f7fe ff81 	bl	8005fec <xTaskResumeAll>
    }
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	2001ac78 	.word	0x2001ac78
 80070f8:	2001ac7c 	.word	0x2001ac7c
 80070fc:	e000ed04 	.word	0xe000ed04

08007100 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007108:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <prvGetNextExpireTime+0x44>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <prvGetNextExpireTime+0x16>
 8007112:	2201      	movs	r2, #1
 8007114:	e000      	b.n	8007118 <prvGetNextExpireTime+0x18>
 8007116:	2200      	movs	r2, #0
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d105      	bne.n	8007130 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007124:	4b07      	ldr	r3, [pc, #28]	; (8007144 <prvGetNextExpireTime+0x44>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	e001      	b.n	8007134 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007134:	68fb      	ldr	r3, [r7, #12]
    }
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2001ac74 	.word	0x2001ac74

08007148 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007150:	f7fe ffe4 	bl	800611c <xTaskGetTickCount>
 8007154:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007156:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <prvSampleTimeNow+0x3c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	429a      	cmp	r2, r3
 800715e:	d205      	bcs.n	800716c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007160:	f000 f926 	bl	80073b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	e002      	b.n	8007172 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007172:	4a04      	ldr	r2, [pc, #16]	; (8007184 <prvSampleTimeNow+0x3c>)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007178:	68fb      	ldr	r3, [r7, #12]
    }
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	2001ac84 	.word	0x2001ac84

08007188 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007196:	2300      	movs	r3, #0
 8007198:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d812      	bhi.n	80071d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	1ad2      	subs	r2, r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d302      	bcc.n	80071c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	e01b      	b.n	80071fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071c2:	4b10      	ldr	r3, [pc, #64]	; (8007204 <prvInsertTimerInActiveList+0x7c>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7fd fe04 	bl	8004dda <vListInsert>
 80071d2:	e012      	b.n	80071fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d206      	bcs.n	80071ea <prvInsertTimerInActiveList+0x62>
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d302      	bcc.n	80071ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80071e4:	2301      	movs	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	e007      	b.n	80071fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ea:	4b07      	ldr	r3, [pc, #28]	; (8007208 <prvInsertTimerInActiveList+0x80>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f7fd fdf0 	bl	8004dda <vListInsert>
            }
        }

        return xProcessTimerNow;
 80071fa:	697b      	ldr	r3, [r7, #20]
    }
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	2001ac78 	.word	0x2001ac78
 8007208:	2001ac74 	.word	0x2001ac74

0800720c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800720c:	b580      	push	{r7, lr}
 800720e:	b08c      	sub	sp, #48	; 0x30
 8007210:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007212:	e0b9      	b.n	8007388 <prvProcessReceivedCommands+0x17c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	da13      	bge.n	8007242 <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800721a:	f107 0308 	add.w	r3, r7, #8
 800721e:	3304      	adds	r3, #4
 8007220:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <prvProcessReceivedCommands+0x26>
 8007228:	495f      	ldr	r1, [pc, #380]	; (80073a8 <prvProcessReceivedCommands+0x19c>)
 800722a:	f240 20fa 	movw	r0, #762	; 0x2fa
 800722e:	f7f9 fc4e 	bl	8000ace <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007238:	6850      	ldr	r0, [r2, #4]
 800723a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723c:	6892      	ldr	r2, [r2, #8]
 800723e:	4611      	mov	r1, r2
 8007240:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f2c0 809e 	blt.w	8007386 <prvProcessReceivedCommands+0x17a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	3304      	adds	r3, #4
 800725a:	4618      	mov	r0, r3
 800725c:	f7fd fdf6 	bl	8004e4c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007260:	1d3b      	adds	r3, r7, #4
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ff70 	bl	8007148 <prvSampleTimeNow>
 8007268:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b09      	cmp	r3, #9
 800726e:	f200 808b 	bhi.w	8007388 <prvProcessReceivedCommands+0x17c>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <prvProcessReceivedCommands+0x6c>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080072a1 	.word	0x080072a1
 8007284:	0800730b 	.word	0x0800730b
 8007288:	0800731f 	.word	0x0800731f
 800728c:	0800735d 	.word	0x0800735d
 8007290:	080072a1 	.word	0x080072a1
 8007294:	080072a1 	.word	0x080072a1
 8007298:	0800730b 	.word	0x0800730b
 800729c:	0800731f 	.word	0x0800731f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072a6:	f043 0301 	orr.w	r3, r3, #1
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	18d1      	adds	r1, r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	69fa      	ldr	r2, [r7, #28]
 80072be:	6a38      	ldr	r0, [r7, #32]
 80072c0:	f7ff ff62 	bl	8007188 <prvInsertTimerInActiveList>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d05e      	beq.n	8007388 <prvProcessReceivedCommands+0x17c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	6a38      	ldr	r0, [r7, #32]
 80072d0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d053      	beq.n	8007388 <prvProcessReceivedCommands+0x17c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	441a      	add	r2, r3
 80072e8:	2300      	movs	r3, #0
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	2300      	movs	r3, #0
 80072ee:	2100      	movs	r1, #0
 80072f0:	6a38      	ldr	r0, [r7, #32]
 80072f2:	f7ff fe11 	bl	8006f18 <xTimerGenericCommand>
 80072f6:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d144      	bne.n	8007388 <prvProcessReceivedCommands+0x17c>
 80072fe:	492a      	ldr	r1, [pc, #168]	; (80073a8 <prvProcessReceivedCommands+0x19c>)
 8007300:	f240 3036 	movw	r0, #822	; 0x336
 8007304:	f7f9 fbe3 	bl	8000ace <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007308:	e03e      	b.n	8007388 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	b2da      	uxtb	r2, r3
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800731c:	e034      	b.n	8007388 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007324:	f043 0301 	orr.w	r3, r3, #1
 8007328:	b2da      	uxtb	r2, r3
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <prvProcessReceivedCommands+0x13c>
 800733e:	491a      	ldr	r1, [pc, #104]	; (80073a8 <prvProcessReceivedCommands+0x19c>)
 8007340:	f240 304f 	movw	r0, #847	; 0x34f
 8007344:	f7f9 fbc3 	bl	8000ace <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	699a      	ldr	r2, [r3, #24]
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	18d1      	adds	r1, r2, r3
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	6a38      	ldr	r0, [r7, #32]
 8007356:	f7ff ff17 	bl	8007188 <prvInsertTimerInActiveList>
                        break;
 800735a:	e015      	b.n	8007388 <prvProcessReceivedCommands+0x17c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d103      	bne.n	8007372 <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 800736a:	6a38      	ldr	r0, [r7, #32]
 800736c:	f000 f974 	bl	8007658 <vPortFree>
 8007370:	e00a      	b.n	8007388 <prvProcessReceivedCommands+0x17c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007378:	f023 0301 	bic.w	r3, r3, #1
 800737c:	b2da      	uxtb	r2, r3
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007384:	e000      	b.n	8007388 <prvProcessReceivedCommands+0x17c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007386:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007388:	4b08      	ldr	r3, [pc, #32]	; (80073ac <prvProcessReceivedCommands+0x1a0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	2200      	movs	r2, #0
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe f82e 	bl	80053f4 <xQueueReceive>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	f47f af3a 	bne.w	8007214 <prvProcessReceivedCommands+0x8>
        }
    }
 80073a0:	bf00      	nop
 80073a2:	3728      	adds	r7, #40	; 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	08015174 	.word	0x08015174
 80073ac:	2001ac7c 	.word	0x2001ac7c

080073b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073b6:	e042      	b.n	800743e <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073b8:	4b2a      	ldr	r3, [pc, #168]	; (8007464 <prvSwitchTimerLists+0xb4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073c2:	4b28      	ldr	r3, [pc, #160]	; (8007464 <prvSwitchTimerLists+0xb4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3304      	adds	r3, #4
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fd fd3b 	bl	8004e4c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d028      	beq.n	800743e <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4413      	add	r3, r2
 80073f4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d90e      	bls.n	800741c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800740a:	4b16      	ldr	r3, [pc, #88]	; (8007464 <prvSwitchTimerLists+0xb4>)
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3304      	adds	r3, #4
 8007412:	4619      	mov	r1, r3
 8007414:	4610      	mov	r0, r2
 8007416:	f7fd fce0 	bl	8004dda <vListInsert>
 800741a:	e010      	b.n	800743e <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800741c:	2300      	movs	r3, #0
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	2300      	movs	r3, #0
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	2100      	movs	r1, #0
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fd76 	bl	8006f18 <xTimerGenericCommand>
 800742c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <prvSwitchTimerLists+0x8e>
 8007434:	490c      	ldr	r1, [pc, #48]	; (8007468 <prvSwitchTimerLists+0xb8>)
 8007436:	f240 30a9 	movw	r0, #937	; 0x3a9
 800743a:	f7f9 fb48 	bl	8000ace <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <prvSwitchTimerLists+0xb4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1b7      	bne.n	80073b8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007448:	4b06      	ldr	r3, [pc, #24]	; (8007464 <prvSwitchTimerLists+0xb4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800744e:	4b07      	ldr	r3, [pc, #28]	; (800746c <prvSwitchTimerLists+0xbc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a04      	ldr	r2, [pc, #16]	; (8007464 <prvSwitchTimerLists+0xb4>)
 8007454:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007456:	4a05      	ldr	r2, [pc, #20]	; (800746c <prvSwitchTimerLists+0xbc>)
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	6013      	str	r3, [r2, #0]
    }
 800745c:	bf00      	nop
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	2001ac74 	.word	0x2001ac74
 8007468:	08015174 	.word	0x08015174
 800746c:	2001ac78 	.word	0x2001ac78

08007470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007474:	f000 fb10 	bl	8007a98 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007478:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <prvCheckForValidListAndQueue+0x54>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d11d      	bne.n	80074bc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007480:	4811      	ldr	r0, [pc, #68]	; (80074c8 <prvCheckForValidListAndQueue+0x58>)
 8007482:	f7fd fc59 	bl	8004d38 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007486:	4811      	ldr	r0, [pc, #68]	; (80074cc <prvCheckForValidListAndQueue+0x5c>)
 8007488:	f7fd fc56 	bl	8004d38 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800748c:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <prvCheckForValidListAndQueue+0x60>)
 800748e:	4a0e      	ldr	r2, [pc, #56]	; (80074c8 <prvCheckForValidListAndQueue+0x58>)
 8007490:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007492:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <prvCheckForValidListAndQueue+0x64>)
 8007494:	4a0d      	ldr	r2, [pc, #52]	; (80074cc <prvCheckForValidListAndQueue+0x5c>)
 8007496:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007498:	2200      	movs	r2, #0
 800749a:	2110      	movs	r1, #16
 800749c:	2005      	movs	r0, #5
 800749e:	f7fd fd63 	bl	8004f68 <xQueueGenericCreate>
 80074a2:	4602      	mov	r2, r0
 80074a4:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <prvCheckForValidListAndQueue+0x54>)
 80074a6:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <prvCheckForValidListAndQueue+0x54>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074b0:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <prvCheckForValidListAndQueue+0x54>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4908      	ldr	r1, [pc, #32]	; (80074d8 <prvCheckForValidListAndQueue+0x68>)
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe facc 	bl	8005a54 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80074bc:	f000 fb18 	bl	8007af0 <vPortExitCritical>
    }
 80074c0:	bf00      	nop
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	2001ac7c 	.word	0x2001ac7c
 80074c8:	2001ac4c 	.word	0x2001ac4c
 80074cc:	2001ac60 	.word	0x2001ac60
 80074d0:	2001ac74 	.word	0x2001ac74
 80074d4:	2001ac78 	.word	0x2001ac78
 80074d8:	0801519c 	.word	0x0801519c

080074dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80074e8:	f7fe fd72 	bl	8005fd0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80074ec:	4b53      	ldr	r3, [pc, #332]	; (800763c <pvPortMalloc+0x160>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80074f4:	f000 f908 	bl	8007708 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074f8:	4b51      	ldr	r3, [pc, #324]	; (8007640 <pvPortMalloc+0x164>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4013      	ands	r3, r2
 8007500:	2b00      	cmp	r3, #0
 8007502:	f040 8085 	bne.w	8007610 <pvPortMalloc+0x134>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d016      	beq.n	800753a <pvPortMalloc+0x5e>
            {
                xWantedSize += xHeapStructSize;
 800750c:	2208      	movs	r2, #8
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4413      	add	r3, r2
 8007512:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00d      	beq.n	800753a <pvPortMalloc+0x5e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f023 0307 	bic.w	r3, r3, #7
 8007524:	3308      	adds	r3, #8
 8007526:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <pvPortMalloc+0x5e>
 8007532:	4944      	ldr	r1, [pc, #272]	; (8007644 <pvPortMalloc+0x168>)
 8007534:	2097      	movs	r0, #151	; 0x97
 8007536:	f7f9 faca 	bl	8000ace <vAssertCalled>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d067      	beq.n	8007610 <pvPortMalloc+0x134>
 8007540:	4b41      	ldr	r3, [pc, #260]	; (8007648 <pvPortMalloc+0x16c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d862      	bhi.n	8007610 <pvPortMalloc+0x134>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 800754a:	4b40      	ldr	r3, [pc, #256]	; (800764c <pvPortMalloc+0x170>)
 800754c:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 800754e:	4b3f      	ldr	r3, [pc, #252]	; (800764c <pvPortMalloc+0x170>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007554:	e004      	b.n	8007560 <pvPortMalloc+0x84>
                {
                    pxPreviousBlock = pxBlock;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	429a      	cmp	r2, r3
 8007568:	d903      	bls.n	8007572 <pvPortMalloc+0x96>
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f1      	bne.n	8007556 <pvPortMalloc+0x7a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8007572:	4b32      	ldr	r3, [pc, #200]	; (800763c <pvPortMalloc+0x160>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	429a      	cmp	r2, r3
 800757a:	d049      	beq.n	8007610 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2208      	movs	r2, #8
 8007582:	4413      	add	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	1ad2      	subs	r2, r2, r3
 8007596:	2308      	movs	r3, #8
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	429a      	cmp	r2, r3
 800759c:	d918      	bls.n	80075d0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4413      	add	r3, r2
 80075a4:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <pvPortMalloc+0xdc>
 80075b0:	4924      	ldr	r1, [pc, #144]	; (8007644 <pvPortMalloc+0x168>)
 80075b2:	20c5      	movs	r0, #197	; 0xc5
 80075b4:	f7f9 fa8b 	bl	8000ace <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075ca:	68b8      	ldr	r0, [r7, #8]
 80075cc:	f000 f8fe 	bl	80077cc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075d0:	4b1d      	ldr	r3, [pc, #116]	; (8007648 <pvPortMalloc+0x16c>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	4a1b      	ldr	r2, [pc, #108]	; (8007648 <pvPortMalloc+0x16c>)
 80075dc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075de:	4b1a      	ldr	r3, [pc, #104]	; (8007648 <pvPortMalloc+0x16c>)
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b1b      	ldr	r3, [pc, #108]	; (8007650 <pvPortMalloc+0x174>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d203      	bcs.n	80075f2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075ea:	4b17      	ldr	r3, [pc, #92]	; (8007648 <pvPortMalloc+0x16c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a18      	ldr	r2, [pc, #96]	; (8007650 <pvPortMalloc+0x174>)
 80075f0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	4b12      	ldr	r3, [pc, #72]	; (8007640 <pvPortMalloc+0x164>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007606:	4b13      	ldr	r3, [pc, #76]	; (8007654 <pvPortMalloc+0x178>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3301      	adds	r3, #1
 800760c:	4a11      	ldr	r2, [pc, #68]	; (8007654 <pvPortMalloc+0x178>)
 800760e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007610:	f7fe fcec 	bl	8005fec <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 800761a:	f7f9 fb5b 	bl	8000cd4 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <pvPortMalloc+0x156>
 8007628:	4906      	ldr	r1, [pc, #24]	; (8007644 <pvPortMalloc+0x168>)
 800762a:	f44f 7083 	mov.w	r0, #262	; 0x106
 800762e:	f7f9 fa4e 	bl	8000ace <vAssertCalled>
    return pvReturn;
 8007632:	68fb      	ldr	r3, [r7, #12]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20026490 	.word	0x20026490
 8007640:	200264a4 	.word	0x200264a4
 8007644:	080151a4 	.word	0x080151a4
 8007648:	20026494 	.word	0x20026494
 800764c:	20026488 	.word	0x20026488
 8007650:	20026498 	.word	0x20026498
 8007654:	2002649c 	.word	0x2002649c

08007658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d041      	beq.n	80076ee <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800766a:	2308      	movs	r3, #8
 800766c:	425b      	negs	r3, r3
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	4b1e      	ldr	r3, [pc, #120]	; (80076f8 <vPortFree+0xa0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4013      	ands	r3, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <vPortFree+0x38>
 8007686:	491d      	ldr	r1, [pc, #116]	; (80076fc <vPortFree+0xa4>)
 8007688:	f44f 708d 	mov.w	r0, #282	; 0x11a
 800768c:	f7f9 fa1f 	bl	8000ace <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <vPortFree+0x4a>
 8007698:	4918      	ldr	r1, [pc, #96]	; (80076fc <vPortFree+0xa4>)
 800769a:	f240 101b 	movw	r0, #283	; 0x11b
 800769e:	f7f9 fa16 	bl	8000ace <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <vPortFree+0xa0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01e      	beq.n	80076ee <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d11a      	bne.n	80076ee <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <vPortFree+0xa0>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	43db      	mvns	r3, r3
 80076c2:	401a      	ands	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80076c8:	f7fe fc82 	bl	8005fd0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <vPortFree+0xa8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4413      	add	r3, r2
 80076d6:	4a0a      	ldr	r2, [pc, #40]	; (8007700 <vPortFree+0xa8>)
 80076d8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076da:	68b8      	ldr	r0, [r7, #8]
 80076dc:	f000 f876 	bl	80077cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80076e0:	4b08      	ldr	r3, [pc, #32]	; (8007704 <vPortFree+0xac>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3301      	adds	r3, #1
 80076e6:	4a07      	ldr	r2, [pc, #28]	; (8007704 <vPortFree+0xac>)
 80076e8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80076ea:	f7fe fc7f 	bl	8005fec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	200264a4 	.word	0x200264a4
 80076fc:	080151a4 	.word	0x080151a4
 8007700:	20026494 	.word	0x20026494
 8007704:	200264a0 	.word	0x200264a0

08007708 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800770e:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8007712:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007714:	4b27      	ldr	r3, [pc, #156]	; (80077b4 <prvHeapInit+0xac>)
 8007716:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00c      	beq.n	800773c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3307      	adds	r3, #7
 8007726:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	4a1f      	ldr	r2, [pc, #124]	; (80077b4 <prvHeapInit+0xac>)
 8007738:	4413      	add	r3, r2
 800773a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007740:	4a1d      	ldr	r2, [pc, #116]	; (80077b8 <prvHeapInit+0xb0>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007746:	4b1c      	ldr	r3, [pc, #112]	; (80077b8 <prvHeapInit+0xb0>)
 8007748:	2200      	movs	r2, #0
 800774a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4413      	add	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007754:	2208      	movs	r2, #8
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0307 	bic.w	r3, r3, #7
 8007762:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4a15      	ldr	r2, [pc, #84]	; (80077bc <prvHeapInit+0xb4>)
 8007768:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800776a:	4b14      	ldr	r3, [pc, #80]	; (80077bc <prvHeapInit+0xb4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2200      	movs	r2, #0
 8007770:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007772:	4b12      	ldr	r3, [pc, #72]	; (80077bc <prvHeapInit+0xb4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007788:	4b0c      	ldr	r3, [pc, #48]	; (80077bc <prvHeapInit+0xb4>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4a0a      	ldr	r2, [pc, #40]	; (80077c0 <prvHeapInit+0xb8>)
 8007796:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4a09      	ldr	r2, [pc, #36]	; (80077c4 <prvHeapInit+0xbc>)
 800779e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077a0:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <prvHeapInit+0xc0>)
 80077a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077a6:	601a      	str	r2, [r3, #0]
}
 80077a8:	bf00      	nop
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	2001ac88 	.word	0x2001ac88
 80077b8:	20026488 	.word	0x20026488
 80077bc:	20026490 	.word	0x20026490
 80077c0:	20026498 	.word	0x20026498
 80077c4:	20026494 	.word	0x20026494
 80077c8:	200264a4 	.word	0x200264a4

080077cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077d4:	4b28      	ldr	r3, [pc, #160]	; (8007878 <prvInsertBlockIntoFreeList+0xac>)
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	e002      	b.n	80077e0 <prvInsertBlockIntoFreeList+0x14>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d8f7      	bhi.n	80077da <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4413      	add	r3, r2
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d108      	bne.n	800780e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	441a      	add	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	441a      	add	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d118      	bne.n	8007854 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b15      	ldr	r3, [pc, #84]	; (800787c <prvInsertBlockIntoFreeList+0xb0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	429a      	cmp	r2, r3
 800782c:	d00d      	beq.n	800784a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	441a      	add	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e008      	b.n	800785c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800784a:	4b0c      	ldr	r3, [pc, #48]	; (800787c <prvInsertBlockIntoFreeList+0xb0>)
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	e003      	b.n	800785c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d002      	beq.n	800786a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800786a:	bf00      	nop
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20026488 	.word	0x20026488
 800787c:	20026490 	.word	0x20026490

08007880 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3b04      	subs	r3, #4
 8007890:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007898:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3b04      	subs	r3, #4
 800789e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f023 0201 	bic.w	r2, r3, #1
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3b04      	subs	r3, #4
 80078ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80078b0:	4a0c      	ldr	r2, [pc, #48]	; (80078e4 <pxPortInitialiseStack+0x64>)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3b14      	subs	r3, #20
 80078ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3b04      	subs	r3, #4
 80078c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f06f 0202 	mvn.w	r2, #2
 80078ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3b20      	subs	r3, #32
 80078d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80078d6:	68fb      	ldr	r3, [r7, #12]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	080078e9 	.word	0x080078e9

080078e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80078f2:	4b0e      	ldr	r3, [pc, #56]	; (800792c <prvTaskExitError+0x44>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d003      	beq.n	8007904 <prvTaskExitError+0x1c>
 80078fc:	490c      	ldr	r1, [pc, #48]	; (8007930 <prvTaskExitError+0x48>)
 80078fe:	20df      	movs	r0, #223	; 0xdf
 8007900:	f7f9 f8e5 	bl	8000ace <vAssertCalled>
        __asm volatile
 8007904:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007908:	b672      	cpsid	i
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	b662      	cpsie	i
 8007918:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800791a:	bf00      	nop
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0fc      	beq.n	800791c <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20016910 	.word	0x20016910
 8007930:	080151dc 	.word	0x080151dc
	...

08007940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007940:	4b07      	ldr	r3, [pc, #28]	; (8007960 <pxCurrentTCBConst2>)
 8007942:	6819      	ldr	r1, [r3, #0]
 8007944:	6808      	ldr	r0, [r1, #0]
 8007946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794a:	f380 8809 	msr	PSP, r0
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f04f 0000 	mov.w	r0, #0
 8007956:	f380 8811 	msr	BASEPRI, r0
 800795a:	4770      	bx	lr
 800795c:	f3af 8000 	nop.w

08007960 <pxCurrentTCBConst2>:
 8007960:	2001ab48 	.word	0x2001ab48
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007968:	4808      	ldr	r0, [pc, #32]	; (800798c <prvPortStartFirstTask+0x24>)
 800796a:	6800      	ldr	r0, [r0, #0]
 800796c:	6800      	ldr	r0, [r0, #0]
 800796e:	f380 8808 	msr	MSP, r0
 8007972:	f04f 0000 	mov.w	r0, #0
 8007976:	f380 8814 	msr	CONTROL, r0
 800797a:	b662      	cpsie	i
 800797c:	b661      	cpsie	f
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	df00      	svc	0
 8007988:	bf00      	nop
 800798a:	0000      	.short	0x0000
 800798c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop

08007994 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800799a:	4b38      	ldr	r3, [pc, #224]	; (8007a7c <xPortStartScheduler+0xe8>)
 800799c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	22ff      	movs	r2, #255	; 0xff
 80079aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	4b30      	ldr	r3, [pc, #192]	; (8007a80 <xPortStartScheduler+0xec>)
 80079c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079c2:	4b30      	ldr	r3, [pc, #192]	; (8007a84 <xPortStartScheduler+0xf0>)
 80079c4:	2207      	movs	r2, #7
 80079c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079c8:	e009      	b.n	80079de <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80079ca:	4b2e      	ldr	r3, [pc, #184]	; (8007a84 <xPortStartScheduler+0xf0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	4a2c      	ldr	r2, [pc, #176]	; (8007a84 <xPortStartScheduler+0xf0>)
 80079d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e6:	2b80      	cmp	r3, #128	; 0x80
 80079e8:	d0ef      	beq.n	80079ca <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80079ea:	4b26      	ldr	r3, [pc, #152]	; (8007a84 <xPortStartScheduler+0xf0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f1c3 0307 	rsb	r3, r3, #7
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d004      	beq.n	8007a00 <xPortStartScheduler+0x6c>
 80079f6:	4924      	ldr	r1, [pc, #144]	; (8007a88 <xPortStartScheduler+0xf4>)
 80079f8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80079fc:	f7f9 f867 	bl	8000ace <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a00:	4b20      	ldr	r3, [pc, #128]	; (8007a84 <xPortStartScheduler+0xf0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f1c3 0307 	rsb	r3, r3, #7
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d004      	beq.n	8007a16 <xPortStartScheduler+0x82>
 8007a0c:	491e      	ldr	r1, [pc, #120]	; (8007a88 <xPortStartScheduler+0xf4>)
 8007a0e:	f240 1053 	movw	r0, #339	; 0x153
 8007a12:	f7f9 f85c 	bl	8000ace <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a16:	4b1b      	ldr	r3, [pc, #108]	; (8007a84 <xPortStartScheduler+0xf0>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	021b      	lsls	r3, r3, #8
 8007a1c:	4a19      	ldr	r2, [pc, #100]	; (8007a84 <xPortStartScheduler+0xf0>)
 8007a1e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a20:	4b18      	ldr	r3, [pc, #96]	; (8007a84 <xPortStartScheduler+0xf0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a28:	4a16      	ldr	r2, [pc, #88]	; (8007a84 <xPortStartScheduler+0xf0>)
 8007a2a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007a34:	4b15      	ldr	r3, [pc, #84]	; (8007a8c <xPortStartScheduler+0xf8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a14      	ldr	r2, [pc, #80]	; (8007a8c <xPortStartScheduler+0xf8>)
 8007a3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a3e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007a40:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <xPortStartScheduler+0xf8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a11      	ldr	r2, [pc, #68]	; (8007a8c <xPortStartScheduler+0xf8>)
 8007a46:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a4a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007a4c:	f000 f8ce 	bl	8007bec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007a50:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <xPortStartScheduler+0xfc>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007a56:	f000 f8ed 	bl	8007c34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a5a:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <xPortStartScheduler+0x100>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a0d      	ldr	r2, [pc, #52]	; (8007a94 <xPortStartScheduler+0x100>)
 8007a60:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a64:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007a66:	f7ff ff7f 	bl	8007968 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007a6a:	f7fe fc1b 	bl	80062a4 <vTaskSwitchContext>
    prvTaskExitError();
 8007a6e:	f7ff ff3b 	bl	80078e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	e000e400 	.word	0xe000e400
 8007a80:	200264a8 	.word	0x200264a8
 8007a84:	200264ac 	.word	0x200264ac
 8007a88:	080151dc 	.word	0x080151dc
 8007a8c:	e000ed20 	.word	0xe000ed20
 8007a90:	20016910 	.word	0x20016910
 8007a94:	e000ef34 	.word	0xe000ef34

08007a98 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007aa2:	b672      	cpsid	i
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	b662      	cpsie	i
 8007ab2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <vPortEnterCritical+0x4c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	4a0a      	ldr	r2, [pc, #40]	; (8007ae4 <vPortEnterCritical+0x4c>)
 8007abc:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <vPortEnterCritical+0x4c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d109      	bne.n	8007ada <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ac6:	4b08      	ldr	r3, [pc, #32]	; (8007ae8 <vPortEnterCritical+0x50>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <vPortEnterCritical+0x42>
 8007ad0:	4906      	ldr	r1, [pc, #24]	; (8007aec <vPortEnterCritical+0x54>)
 8007ad2:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8007ad6:	f7f8 fffa 	bl	8000ace <vAssertCalled>
    }
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20016910 	.word	0x20016910
 8007ae8:	e000ed04 	.word	0xe000ed04
 8007aec:	080151dc 	.word	0x080151dc

08007af0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007af6:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <vPortExitCritical+0x3c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d104      	bne.n	8007b08 <vPortExitCritical+0x18>
 8007afe:	490c      	ldr	r1, [pc, #48]	; (8007b30 <vPortExitCritical+0x40>)
 8007b00:	f240 109f 	movw	r0, #415	; 0x19f
 8007b04:	f7f8 ffe3 	bl	8000ace <vAssertCalled>
    uxCriticalNesting--;
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <vPortExitCritical+0x3c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	4a07      	ldr	r2, [pc, #28]	; (8007b2c <vPortExitCritical+0x3c>)
 8007b10:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007b12:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <vPortExitCritical+0x3c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d104      	bne.n	8007b24 <vPortExitCritical+0x34>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	607b      	str	r3, [r7, #4]
        __asm volatile
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20016910 	.word	0x20016910
 8007b30:	080151dc 	.word	0x080151dc
	...

08007b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007b40:	f3ef 8009 	mrs	r0, PSP
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <pxCurrentTCBConst>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	f01e 0f10 	tst.w	lr, #16
 8007b50:	bf08      	it	eq
 8007b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	6010      	str	r0, [r2, #0]
 8007b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b60:	f04f 0040 	mov.w	r0, #64	; 0x40
 8007b64:	b672      	cpsid	i
 8007b66:	f380 8811 	msr	BASEPRI, r0
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	b662      	cpsie	i
 8007b74:	f7fe fb96 	bl	80062a4 <vTaskSwitchContext>
 8007b78:	f04f 0000 	mov.w	r0, #0
 8007b7c:	f380 8811 	msr	BASEPRI, r0
 8007b80:	bc09      	pop	{r0, r3}
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	6808      	ldr	r0, [r1, #0]
 8007b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	f01e 0f10 	tst.w	lr, #16
 8007b8e:	bf08      	it	eq
 8007b90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b94:	f380 8809 	msr	PSP, r0
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop

08007ba0 <pxCurrentTCBConst>:
 8007ba0:	2001ab48 	.word	0x2001ab48
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
        __asm volatile
 8007bae:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007bb2:	b672      	cpsid	i
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	b662      	cpsie	i
 8007bc2:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007bc4:	f7fe faba 	bl	800613c <xTaskIncrementTick>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <SysTick_Handler+0x2e>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bce:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <SysTick_Handler+0x40>)
 8007bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <vPortSetupTimerInterrupt+0x38>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <vPortSetupTimerInterrupt+0x3c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <vPortSetupTimerInterrupt+0x40>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	099b      	lsrs	r3, r3, #6
 8007c08:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <vPortSetupTimerInterrupt+0x44>)
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007c10:	2207      	movs	r2, #7
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	e000e010 	.word	0xe000e010
 8007c24:	e000e018 	.word	0xe000e018
 8007c28:	20016900 	.word	0x20016900
 8007c2c:	10624dd3 	.word	0x10624dd3
 8007c30:	e000e014 	.word	0xe000e014

08007c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c44 <vPortEnableVFP+0x10>
 8007c38:	6801      	ldr	r1, [r0, #0]
 8007c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c3e:	6001      	str	r1, [r0, #0]
 8007c40:	4770      	bx	lr
 8007c42:	0000      	.short	0x0000
 8007c44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop

08007c4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007c52:	f3ef 8305 	mrs	r3, IPSR
 8007c56:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b0f      	cmp	r3, #15
 8007c5c:	d90e      	bls.n	8007c7c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c5e:	4a10      	ldr	r2, [pc, #64]	; (8007ca0 <vPortValidateInterruptPriority+0x54>)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4413      	add	r3, r2
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c68:	4b0e      	ldr	r3, [pc, #56]	; (8007ca4 <vPortValidateInterruptPriority+0x58>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d204      	bcs.n	8007c7c <vPortValidateInterruptPriority+0x30>
 8007c72:	490d      	ldr	r1, [pc, #52]	; (8007ca8 <vPortValidateInterruptPriority+0x5c>)
 8007c74:	f240 20f2 	movw	r0, #754	; 0x2f2
 8007c78:	f7f8 ff29 	bl	8000ace <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c7c:	4b0b      	ldr	r3, [pc, #44]	; (8007cac <vPortValidateInterruptPriority+0x60>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <vPortValidateInterruptPriority+0x64>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d904      	bls.n	8007c96 <vPortValidateInterruptPriority+0x4a>
 8007c8c:	4906      	ldr	r1, [pc, #24]	; (8007ca8 <vPortValidateInterruptPriority+0x5c>)
 8007c8e:	f240 3002 	movw	r0, #770	; 0x302
 8007c92:	f7f8 ff1c 	bl	8000ace <vAssertCalled>
    }
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	e000e3f0 	.word	0xe000e3f0
 8007ca4:	200264a8 	.word	0x200264a8
 8007ca8:	080151dc 	.word	0x080151dc
 8007cac:	e000ed0c 	.word	0xe000ed0c
 8007cb0:	200264ac 	.word	0x200264ac

08007cb4 <vCastPointerTo_ARPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xARP_PACKET ARPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ARPPacket_t )
    {
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 8007cbc:	687b      	ldr	r3, [r7, #4]
    }
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <eARPProcessPacket>:
 * @param[in] pxARPFrame: The ARP Frame (the ARP packet).
 *
 * @return An enum which says whether to return the frame or to release it.
 */
eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b088      	sub	sp, #32
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	77fb      	strb	r3, [r7, #31]
    uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;
/* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    pxARPHeader = &( pxARPFrame->xARPHeader );
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	330e      	adds	r3, #14
 8007cdc:	61bb      	str	r3, [r7, #24]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	330e      	adds	r3, #14
 8007ce2:	617b      	str	r3, [r7, #20]
    pvCopyDest = &ulSenderProtocolAddress;
 8007ce4:	f107 0308 	add.w	r3, r7, #8
 8007ce8:	613b      	str	r3, [r7, #16]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	601a      	str	r2, [r3, #0]
    /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
    ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	60fb      	str	r3, [r7, #12]

    traceARP_PACKET_RECEIVED();

    /* Don't do anything if the local IP address is zero because
     * that means a DHCP request has not completed. */
    if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 8007cfa:	4b3a      	ldr	r3, [pc, #232]	; (8007de4 <eARPProcessPacket+0x118>)
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d068      	beq.n	8007dd4 <eARPProcessPacket+0x108>
    {
        switch( pxARPHeader->usOperation )
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	88db      	ldrh	r3, [r3, #6]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d0c:	d003      	beq.n	8007d16 <eARPProcessPacket+0x4a>
 8007d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d12:	d057      	beq.n	8007dc4 <eARPProcessPacket+0xf8>
                #endif /* ipconfigARP_USE_CLASH_DETECTION */
                break;

            default:
                /* Invalid. */
                break;
 8007d14:	e061      	b.n	8007dda <eARPProcessPacket+0x10e>
                if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 8007d16:	4b33      	ldr	r3, [pc, #204]	; (8007de4 <eARPProcessPacket+0x118>)
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d15b      	bne.n	8007dd8 <eARPProcessPacket+0x10c>
                    vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	3308      	adds	r3, #8
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	4611      	mov	r1, r2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 f861 	bl	8007df0 <vARPRefreshCacheEntry>
                    pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	2200      	movs	r2, #0
 8007d32:	719a      	strb	r2, [r3, #6]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f042 0202 	orr.w	r2, r2, #2
 8007d3a:	71da      	strb	r2, [r3, #7]
                    if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d11a      	bne.n	8007d7a <eARPProcessPacket+0xae>
                        pvCopySource = xBroadcastMACAddress.ucBytes;
 8007d44:	4b28      	ldr	r3, [pc, #160]	; (8007de8 <eARPProcessPacket+0x11c>)
 8007d46:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3306      	adds	r3, #6
 8007d4c:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 8007d4e:	2206      	movs	r2, #6
 8007d50:	6979      	ldr	r1, [r7, #20]
 8007d52:	6938      	ldr	r0, [r7, #16]
 8007d54:	f00b f85d 	bl	8012e12 <memcpy>
                        ( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	3312      	adds	r3, #18
 8007d5c:	2206      	movs	r2, #6
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f00b f87a 	bl	8012e5a <memset>
                        pxARPHeader->ulTargetProtocolAddress = 0UL;
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	761a      	strb	r2, [r3, #24]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	765a      	strb	r2, [r3, #25]
 8007d70:	2200      	movs	r2, #0
 8007d72:	769a      	strb	r2, [r3, #26]
 8007d74:	2200      	movs	r2, #0
 8007d76:	76da      	strb	r2, [r3, #27]
 8007d78:	e00d      	b.n	8007d96 <eARPProcessPacket+0xca>
                        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	3312      	adds	r3, #18
 8007d84:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8007d86:	2206      	movs	r2, #6
 8007d88:	6979      	ldr	r1, [r7, #20]
 8007d8a:	6938      	ldr	r0, [r7, #16]
 8007d8c:	f00b f841 	bl	8012e12 <memcpy>
                        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	619a      	str	r2, [r3, #24]
                    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8007d96:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <eARPProcessPacket+0x118>)
 8007d98:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8007da0:	2206      	movs	r2, #6
 8007da2:	6979      	ldr	r1, [r7, #20]
 8007da4:	6938      	ldr	r0, [r7, #16]
 8007da6:	f00b f834 	bl	8012e12 <memcpy>
                    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 8007daa:	4b10      	ldr	r3, [pc, #64]	; (8007dec <eARPProcessPacket+0x120>)
 8007dac:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	330e      	adds	r3, #14
 8007db2:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	601a      	str	r2, [r3, #0]
                    eReturn = eReturnEthernetFrame;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	77fb      	strb	r3, [r7, #31]
                break;
 8007dc2:	e009      	b.n	8007dd8 <eARPProcessPacket+0x10c>
                vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f80f 	bl	8007df0 <vARPRefreshCacheEntry>
                break;
 8007dd2:	e002      	b.n	8007dda <eARPProcessPacket+0x10e>
        }
    }
 8007dd4:	bf00      	nop
 8007dd6:	e000      	b.n	8007dda <eARPProcessPacket+0x10e>
                break;
 8007dd8:	bf00      	nop

    return eReturn;
 8007dda:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3720      	adds	r7, #32
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20016918 	.word	0x20016918
 8007de8:	08016c44 	.word	0x08016c44
 8007dec:	2001692c 	.word	0x2001692c

08007df0 <vARPRefreshCacheEntry>:
 * @param[in] ulIPAddress: 32-bit representation of the IP-address whose mapping
 *                         is being updated.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
    BaseType_t x = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]
    BaseType_t xIpEntry = -1;
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007e02:	61bb      	str	r3, [r7, #24]
    BaseType_t xMacEntry = -1;
 8007e04:	f04f 33ff 	mov.w	r3, #4294967295
 8007e08:	617b      	str	r3, [r7, #20]
    BaseType_t xUseEntry = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	613b      	str	r3, [r7, #16]
    uint8_t ucMinAgeFound = 0U;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]
    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )

        /* Only process the IP address if it is on the local network.
         * Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
         * and netmask are still unknown. */
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8007e12:	4b70      	ldr	r3, [pc, #448]	; (8007fd4 <vARPRefreshCacheEntry+0x1e4>)
 8007e14:	695a      	ldr	r2, [r3, #20]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	405a      	eors	r2, r3
 8007e1a:	4b6f      	ldr	r3, [pc, #444]	; (8007fd8 <vARPRefreshCacheEntry+0x1e8>)
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <vARPRefreshCacheEntry+0x3e>
            ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 8007e24:	4b6b      	ldr	r3, [pc, #428]	; (8007fd4 <vARPRefreshCacheEntry+0x1e4>)
 8007e26:	695b      	ldr	r3, [r3, #20]
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f040 80d0 	bne.w	8007fce <vARPRefreshCacheEntry+0x1de>

        if( pdTRUE )
    #endif
    {
        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	73fb      	strb	r3, [r7, #15]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]
 8007e38:	e067      	b.n	8007f0a <vARPRefreshCacheEntry+0x11a>
        {
            BaseType_t xMatchingMAC;

            if( pxMACAddress != NULL )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d015      	beq.n	8007e6c <vARPRefreshCacheEntry+0x7c>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	4613      	mov	r3, r2
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4a64      	ldr	r2, [pc, #400]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007e4c:	4413      	add	r3, r2
 8007e4e:	3304      	adds	r3, #4
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	2206      	movs	r2, #6
 8007e54:	4618      	mov	r0, r3
 8007e56:	f00a ffcd 	bl	8012df4 <memcmp>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d102      	bne.n	8007e66 <vARPRefreshCacheEntry+0x76>
                {
                    xMatchingMAC = pdTRUE;
 8007e60:	2301      	movs	r3, #1
 8007e62:	60bb      	str	r3, [r7, #8]
 8007e64:	e004      	b.n	8007e70 <vARPRefreshCacheEntry+0x80>
                }
                else
                {
                    xMatchingMAC = pdFALSE;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60bb      	str	r3, [r7, #8]
 8007e6a:	e001      	b.n	8007e70 <vARPRefreshCacheEntry+0x80>
                }
            }
            else
            {
                xMatchingMAC = pdFALSE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60bb      	str	r3, [r7, #8]
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007e70:	495a      	ldr	r1, [pc, #360]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	4613      	mov	r3, r2
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d120      	bne.n	8007ec8 <vARPRefreshCacheEntry+0xd8>
            {
                if( pxMACAddress == NULL )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <vARPRefreshCacheEntry+0xa2>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    xIpEntry = x;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	61bb      	str	r3, [r7, #24]
                    break;
 8007e90:	e03e      	b.n	8007f10 <vARPRefreshCacheEntry+0x120>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d014      	beq.n	8007ec2 <vARPRefreshCacheEntry+0xd2>
                {
                    /* This function will be called for each received packet
                     * As this is by far the most common path the coding standard
                     * is relaxed in this case and a return is permitted as an
                     * optimisation. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007e98:	4950      	ldr	r1, [pc, #320]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	330a      	adds	r3, #10
 8007ea8:	2296      	movs	r2, #150	; 0x96
 8007eaa:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8007eac:	494b      	ldr	r1, [pc, #300]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	440b      	add	r3, r1
 8007eba:	330b      	adds	r3, #11
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	701a      	strb	r2, [r3, #0]
                    return;
 8007ec0:	e085      	b.n	8007fce <vARPRefreshCacheEntry+0x1de>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                xIpEntry = x;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	61bb      	str	r3, [r7, #24]
 8007ec6:	e01d      	b.n	8007f04 <vARPRefreshCacheEntry+0x114>
            }
            else if( xMatchingMAC != pdFALSE )
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <vARPRefreshCacheEntry+0xe4>
                    if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
                    {
                        xMacEntry = x;
                    }
                #else /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
                    xMacEntry = x;
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	e017      	b.n	8007f04 <vARPRefreshCacheEntry+0x114>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8007ed4:	4941      	ldr	r1, [pc, #260]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	330a      	adds	r3, #10
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	7bfa      	ldrb	r2, [r7, #15]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d90b      	bls.n	8007f04 <vARPRefreshCacheEntry+0x114>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 8007eec:	493b      	ldr	r1, [pc, #236]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	4413      	add	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	440b      	add	r3, r1
 8007efa:	330a      	adds	r3, #10
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	73fb      	strb	r3, [r7, #15]
                xUseEntry = x;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	613b      	str	r3, [r7, #16]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	3301      	adds	r3, #1
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	2b05      	cmp	r3, #5
 8007f0e:	dd94      	ble.n	8007e3a <vARPRefreshCacheEntry+0x4a>
            {
                /* Nothing happens to this cache entry for now. */
            }
        }

        if( xMacEntry >= 0 )
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	db11      	blt.n	8007f3a <vARPRefreshCacheEntry+0x14a>
        {
            xUseEntry = xMacEntry;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	613b      	str	r3, [r7, #16]

            if( xIpEntry >= 0 )
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	db11      	blt.n	8007f44 <vARPRefreshCacheEntry+0x154>
            {
                /* Both the MAC address as well as the IP address were found in
                 * different locations: clear the entry which matches the
                 * IP-address */
                ( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	4613      	mov	r3, r2
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4a2c      	ldr	r2, [pc, #176]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007f2c:	4413      	add	r3, r2
 8007f2e:	220c      	movs	r2, #12
 8007f30:	2100      	movs	r1, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f00a ff91 	bl	8012e5a <memset>
 8007f38:	e004      	b.n	8007f44 <vARPRefreshCacheEntry+0x154>
            }
        }
        else if( xIpEntry >= 0 )
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	db01      	blt.n	8007f44 <vARPRefreshCacheEntry+0x154>
        {
            /* An entry containing the IP-address was found, but it had a different MAC address */
            xUseEntry = xIpEntry;
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	613b      	str	r3, [r7, #16]
        {
            /* No matching entry found. */
        }

        /* If the entry was not found, we use the oldest entry and set the IPaddress */
        xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 8007f44:	4925      	ldr	r1, [pc, #148]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	005b      	lsls	r3, r3, #1
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	440b      	add	r3, r1
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	601a      	str	r2, [r3, #0]

        if( pxMACAddress != NULL )
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d021      	beq.n	8007fa0 <vARPRefreshCacheEntry+0x1b0>
        {
            ( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4a1d      	ldr	r2, [pc, #116]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007f68:	4413      	add	r3, r2
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	2206      	movs	r2, #6
 8007f70:	4618      	mov	r0, r3
 8007f72:	f00a ff4e 	bl	8012e12 <memcpy>

            iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
            /* And this entry does not need immediate attention */
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007f76:	4919      	ldr	r1, [pc, #100]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	330a      	adds	r3, #10
 8007f86:	2296      	movs	r2, #150	; 0x96
 8007f88:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007f8a:	4914      	ldr	r1, [pc, #80]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	4413      	add	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	330b      	adds	r3, #11
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e016      	b.n	8007fce <vARPRefreshCacheEntry+0x1de>
        }
        else if( xIpEntry < 0 )
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	da13      	bge.n	8007fce <vARPRefreshCacheEntry+0x1de>
        {
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007fa6:	490d      	ldr	r1, [pc, #52]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4613      	mov	r3, r2
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	330a      	adds	r3, #10
 8007fb6:	2205      	movs	r2, #5
 8007fb8:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007fba:	4908      	ldr	r1, [pc, #32]	; (8007fdc <vARPRefreshCacheEntry+0x1ec>)
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	330b      	adds	r3, #11
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
        else
        {
            /* Nothing will be stored. */
        }
    }
}
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20016918 	.word	0x20016918
 8007fd8:	20026578 	.word	0x20026578
 8007fdc:	200264b0 	.word	0x200264b0

08007fe0 <eARPGetCacheEntry>:
 *         addressing needs a gateway but there isn't a gateway defined) then return
 *         eCantSendPacket.
 */
eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                      MACAddress_t * const pxMACAddress )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturn;
    uint32_t ulAddressToLookup;

    ulAddressToLookup = *pulIPAddress;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60bb      	str	r3, [r7, #8]

    #if ( ipconfigUSE_LLMNR == 1 )
        if( ulAddressToLookup == ipLLMNR_IP_ADDR ) /* Is in network byte order. */
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	4a33      	ldr	r2, [pc, #204]	; (80080c0 <eARPGetCacheEntry+0xe0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d108      	bne.n	800800a <eARPGetCacheEntry+0x2a>
        {
            /* The LLMNR IP-address has a fixed virtual MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xLLMNR_MacAdress.ucBytes, sizeof( MACAddress_t ) );
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	4a32      	ldr	r2, [pc, #200]	; (80080c4 <eARPGetCacheEntry+0xe4>)
 8007ffc:	6811      	ldr	r1, [r2, #0]
 8007ffe:	6019      	str	r1, [r3, #0]
 8008000:	8892      	ldrh	r2, [r2, #4]
 8008002:	809a      	strh	r2, [r3, #4]
            eReturn = eARPCacheHit;
 8008004:	2301      	movs	r3, #1
 8008006:	73fb      	strb	r3, [r7, #15]
 8008008:	e054      	b.n	80080b4 <eARPGetCacheEntry+0xd4>
        }
        else
    #endif

    if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 800800a:	68b8      	ldr	r0, [r7, #8]
 800800c:	f001 fe94 	bl	8009d38 <xIsIPv4Multicast>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d006      	beq.n	8008024 <eARPGetCacheEntry+0x44>
    {
        /* Get the lowest 23 bits of the IP-address. */
        vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	68b8      	ldr	r0, [r7, #8]
 800801a:	f001 feb5 	bl	8009d88 <vSetMultiCastIPv4MacAddress>

        eReturn = eARPCacheHit;
 800801e:	2301      	movs	r3, #1
 8008020:	73fb      	strb	r3, [r7, #15]
 8008022:	e047      	b.n	80080b4 <eARPGetCacheEntry+0xd4>
    }
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802c:	d005      	beq.n	800803a <eARPGetCacheEntry+0x5a>
             ( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) ) /* Or a local broadcast address, eg 192.168.1.255? */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	4b25      	ldr	r3, [pc, #148]	; (80080c8 <eARPGetCacheEntry+0xe8>)
 8008034:	691b      	ldr	r3, [r3, #16]
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 8008036:	429a      	cmp	r2, r3
 8008038:	d108      	bne.n	800804c <eARPGetCacheEntry+0x6c>
    {
        /* This is a broadcast so it uses the broadcast MAC address. */
        ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	4a23      	ldr	r2, [pc, #140]	; (80080cc <eARPGetCacheEntry+0xec>)
 800803e:	6811      	ldr	r1, [r2, #0]
 8008040:	6019      	str	r1, [r3, #0]
 8008042:	8892      	ldrh	r2, [r2, #4]
 8008044:	809a      	strh	r2, [r3, #4]
        eReturn = eARPCacheHit;
 8008046:	2301      	movs	r3, #1
 8008048:	73fb      	strb	r3, [r7, #15]
 800804a:	e033      	b.n	80080b4 <eARPGetCacheEntry+0xd4>
    }
    else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 800804c:	4b20      	ldr	r3, [pc, #128]	; (80080d0 <eARPGetCacheEntry+0xf0>)
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d102      	bne.n	800805a <eARPGetCacheEntry+0x7a>
    {
        /* The IP address has not yet been assigned, so there is nothing that
         * can be done. */
        eReturn = eCantSendPacket;
 8008054:	2302      	movs	r3, #2
 8008056:	73fb      	strb	r3, [r7, #15]
 8008058:	e02c      	b.n	80080b4 <eARPGetCacheEntry+0xd4>
    }
    else
    {
        eReturn = eARPCacheMiss;
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]

        if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <eARPGetCacheEntry+0xf0>)
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	405a      	eors	r2, r3
 8008068:	4b17      	ldr	r3, [pc, #92]	; (80080c8 <eARPGetCacheEntry+0xe8>)
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	4013      	ands	r3, r2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <eARPGetCacheEntry+0xaa>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <eARPGetCacheEntry+0xe8>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <eARPGetCacheEntry+0xa2>
                {
                    ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 800807a:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <eARPGetCacheEntry+0xe8>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	60bb      	str	r3, [r7, #8]
 8008080:	e006      	b.n	8008090 <eARPGetCacheEntry+0xb0>
                }
                else
                {
                    ulAddressToLookup = *pulIPAddress;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60bb      	str	r3, [r7, #8]
 8008088:	e002      	b.n	8008090 <eARPGetCacheEntry+0xb0>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60bb      	str	r3, [r7, #8]
            if( eReturn == eARPCacheMiss ) /*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */
        #else
            /* No cache look-up was done, so the result is still 'eARPCacheMiss'. */
        #endif
        {
            if( ulAddressToLookup == 0UL )
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <eARPGetCacheEntry+0xbc>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8008096:	2302      	movs	r3, #2
 8008098:	73fb      	strb	r3, [r7, #15]
 800809a:	e00b      	b.n	80080b4 <eARPGetCacheEntry+0xd4>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	68b8      	ldr	r0, [r7, #8]
 80080a0:	f000 f818 	bl	80080d4 <prvCacheLookup>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]

                if( eReturn == eARPCacheMiss )
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d102      	bne.n	80080b4 <eARPGetCacheEntry+0xd4>
                {
                    /* It might be that the ARP has to go to the gateway. */
                    *pulIPAddress = ulAddressToLookup;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }

    return eReturn;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	fc0000e0 	.word	0xfc0000e0
 80080c4:	08016c3c 	.word	0x08016c3c
 80080c8:	20026578 	.word	0x20026578
 80080cc:	08016c44 	.word	0x08016c44
 80080d0:	20016918 	.word	0x20016918

080080d4 <prvCacheLookup>:
 * @return When the IP-address is found: eARPCacheHit, when not found: eARPCacheMiss,
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                          MACAddress_t * const pxMACAddress )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
    BaseType_t x;
    eARPLookupResult_t eReturn = eARPCacheMiss;
 80080de:	2300      	movs	r3, #0
 80080e0:	72fb      	strb	r3, [r7, #11]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	e02b      	b.n	8008140 <prvCacheLookup+0x6c>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80080e8:	4919      	ldr	r1, [pc, #100]	; (8008150 <prvCacheLookup+0x7c>)
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4613      	mov	r3, r2
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d11d      	bne.n	800813a <prvCacheLookup+0x66>
        {
            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80080fe:	4914      	ldr	r1, [pc, #80]	; (8008150 <prvCacheLookup+0x7c>)
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4613      	mov	r3, r2
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	330b      	adds	r3, #11
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d102      	bne.n	800811a <prvCacheLookup+0x46>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                eReturn = eCantSendPacket;
 8008114:	2302      	movs	r3, #2
 8008116:	72fb      	strb	r3, [r7, #11]
                /* A valid entry was found. */
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
                eReturn = eARPCacheHit;
            }

            break;
 8008118:	e015      	b.n	8008146 <prvCacheLookup+0x72>
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800811a:	6838      	ldr	r0, [r7, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4613      	mov	r3, r2
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4a0a      	ldr	r2, [pc, #40]	; (8008150 <prvCacheLookup+0x7c>)
 8008128:	4413      	add	r3, r2
 800812a:	3304      	adds	r3, #4
 800812c:	2206      	movs	r2, #6
 800812e:	4619      	mov	r1, r3
 8008130:	f00a fe6f 	bl	8012e12 <memcpy>
                eReturn = eARPCacheHit;
 8008134:	2301      	movs	r3, #1
 8008136:	72fb      	strb	r3, [r7, #11]
            break;
 8008138:	e005      	b.n	8008146 <prvCacheLookup+0x72>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b05      	cmp	r3, #5
 8008144:	ddd0      	ble.n	80080e8 <prvCacheLookup+0x14>
        }
    }

    return eReturn;
 8008146:	7afb      	ldrb	r3, [r7, #11]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	200264b0 	.word	0x200264b0

08008154 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
void vARPAgeCache( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
    BaseType_t x;
    TickType_t xTimeNow;

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800815a:	2300      	movs	r3, #0
 800815c:	607b      	str	r3, [r7, #4]
 800815e:	e063      	b.n	8008228 <vARPAgeCache+0xd4>
    {
        /* If the entry is valid (its age is greater than zero). */
        if( xARPCache[ x ].ucAge > 0U )
 8008160:	4940      	ldr	r1, [pc, #256]	; (8008264 <vARPAgeCache+0x110>)
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	330a      	adds	r3, #10
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d055      	beq.n	8008222 <vARPAgeCache+0xce>
        {
            /* Decrement the age value of the entry in this ARP cache table row.
             * When the age reaches zero it is no longer considered valid. */
            ( xARPCache[ x ].ucAge )--;
 8008176:	493b      	ldr	r1, [pc, #236]	; (8008264 <vARPAgeCache+0x110>)
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	4613      	mov	r3, r2
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	330a      	adds	r3, #10
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	3b01      	subs	r3, #1
 800818a:	b2d8      	uxtb	r0, r3
 800818c:	4935      	ldr	r1, [pc, #212]	; (8008264 <vARPAgeCache+0x110>)
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4613      	mov	r3, r2
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	440b      	add	r3, r1
 800819a:	330a      	adds	r3, #10
 800819c:	4602      	mov	r2, r0
 800819e:	701a      	strb	r2, [r3, #0]

            /* If the entry is not yet valid, then it is waiting an ARP
             * reply, and the ARP request should be retransmitted. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80081a0:	4930      	ldr	r1, [pc, #192]	; (8008264 <vARPAgeCache+0x110>)
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	330b      	adds	r3, #11
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10b      	bne.n	80081ce <vARPAgeCache+0x7a>
            {
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 80081b6:	492b      	ldr	r1, [pc, #172]	; (8008264 <vARPAgeCache+0x110>)
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 f852 	bl	8008270 <FreeRTOS_OutputARPRequest>
 80081cc:	e015      	b.n	80081fa <vARPAgeCache+0xa6>
            }
            else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 80081ce:	4925      	ldr	r1, [pc, #148]	; (8008264 <vARPAgeCache+0x110>)
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	330a      	adds	r3, #10
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d80a      	bhi.n	80081fa <vARPAgeCache+0xa6>
            {
                /* This entry will get removed soon.  See if the MAC address is
                 * still valid to prevent this happening. */
                iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 80081e4:	491f      	ldr	r1, [pc, #124]	; (8008264 <vARPAgeCache+0x110>)
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f83b 	bl	8008270 <FreeRTOS_OutputARPRequest>
            else
            {
                /* The age has just ticked down, with nothing to do. */
            }

            if( xARPCache[ x ].ucAge == 0U )
 80081fa:	491a      	ldr	r1, [pc, #104]	; (8008264 <vARPAgeCache+0x110>)
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4613      	mov	r3, r2
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	440b      	add	r3, r1
 8008208:	330a      	adds	r3, #10
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d108      	bne.n	8008222 <vARPAgeCache+0xce>
            {
                /* The entry is no longer valid.  Wipe it out. */
                iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                xARPCache[ x ].ulIPAddress = 0UL;
 8008210:	4914      	ldr	r1, [pc, #80]	; (8008264 <vARPAgeCache+0x110>)
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4613      	mov	r3, r2
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3301      	adds	r3, #1
 8008226:	607b      	str	r3, [r7, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b05      	cmp	r3, #5
 800822c:	dd98      	ble.n	8008160 <vARPAgeCache+0xc>
            }
        }
    }

    xTimeNow = xTaskGetTickCount();
 800822e:	f7fd ff75 	bl	800611c <xTaskGetTickCount>
 8008232:	6038      	str	r0, [r7, #0]

    if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8008234:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <vARPAgeCache+0x114>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <vARPAgeCache+0xf8>
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <vARPAgeCache+0x114>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008248:	4293      	cmp	r3, r2
 800824a:	d907      	bls.n	800825c <vARPAgeCache+0x108>
    {
        FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 800824c:	4b07      	ldr	r3, [pc, #28]	; (800826c <vARPAgeCache+0x118>)
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 f80d 	bl	8008270 <FreeRTOS_OutputARPRequest>
        xLastGratuitousARPTime = xTimeNow;
 8008256:	4a04      	ldr	r2, [pc, #16]	; (8008268 <vARPAgeCache+0x114>)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	6013      	str	r3, [r2, #0]
    }
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	200264b0 	.word	0x200264b0
 8008268:	200264f8 	.word	0x200264f8
 800826c:	20016918 	.word	0x20016918

08008270 <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress: A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    /* This is called from the context of the IP event task, so a block time
     * must not be used. */
    pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8008278:	2100      	movs	r1, #0
 800827a:	202a      	movs	r0, #42	; 0x2a
 800827c:	f009 fbea 	bl	8011a54 <pxGetNetworkBufferWithDescriptor>
 8008280:	6138      	str	r0, [r7, #16]

    if( pxNetworkBuffer != NULL )
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d037      	beq.n	80082f8 <FreeRTOS_OutputARPRequest+0x88>
    {
        pxNetworkBuffer->ulIPAddress = ulIPAddress;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	615a      	str	r2, [r3, #20]
        vARPGenerateRequestPacket( pxNetworkBuffer );
 800828e:	6938      	ldr	r0, [r7, #16]
 8008290:	f000 f836 	bl	8008300 <vARPGenerateRequestPacket>

        #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	2b3b      	cmp	r3, #59	; 0x3b
 800829a:	d812      	bhi.n	80082c2 <FreeRTOS_OutputARPRequest+0x52>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	617b      	str	r3, [r7, #20]
 80082a2:	e008      	b.n	80082b6 <FreeRTOS_OutputARPRequest+0x46>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	4413      	add	r3, r2
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	3301      	adds	r3, #1
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b3b      	cmp	r3, #59	; 0x3b
 80082ba:	ddf3      	ble.n	80082a4 <FreeRTOS_OutputARPRequest+0x34>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	223c      	movs	r2, #60	; 0x3c
 80082c0:	61da      	str	r2, [r3, #28]
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

        if( xIsCallingFromIPTask() != 0 )
 80082c2:	f001 f99b 	bl	80095fc <xIsCallingFromIPTask>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d004      	beq.n	80082d6 <FreeRTOS_OutputARPRequest+0x66>
        {
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            /* Only the IP-task is allowed to call this function directly. */
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 80082cc:	2101      	movs	r1, #1
 80082ce:	6938      	ldr	r0, [r7, #16]
 80082d0:	f008 fb88 	bl	80109e4 <xNetworkInterfaceOutput>
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
            }
        }
    }
}
 80082d4:	e010      	b.n	80082f8 <FreeRTOS_OutputARPRequest+0x88>
            xSendEvent.eEventType = eNetworkTxEvent;
 80082d6:	2302      	movs	r3, #2
 80082d8:	723b      	strb	r3, [r7, #8]
            xSendEvent.pvData = pxNetworkBuffer;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	60fb      	str	r3, [r7, #12]
            if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80082de:	f107 0308 	add.w	r3, r7, #8
 80082e2:	f04f 31ff 	mov.w	r1, #4294967295
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 fc2e 	bl	8009b48 <xSendEventStructToIPTask>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <FreeRTOS_OutputARPRequest+0x88>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80082f2:	6938      	ldr	r0, [r7, #16]
 80082f4:	f009 fc28 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
}
 80082f8:	bf00      	nop
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer: Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
    void * pvCopyDest;

    /* Buffer allocation ensures that buffers always have space
     * for an ARP packet. See buffer allocation implementations 1
     * and 2 under portable/BufferManagement. */
    configASSERT( pxNetworkBuffer != NULL );
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d104      	bne.n	8008318 <vARPGenerateRequestPacket+0x18>
 800830e:	4923      	ldr	r1, [pc, #140]	; (800839c <vARPGenerateRequestPacket+0x9c>)
 8008310:	f240 302a 	movw	r0, #810	; 0x32a
 8008314:	f7f8 fbdb 	bl	8000ace <vAssertCalled>
    configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	2b29      	cmp	r3, #41	; 0x29
 800831e:	d804      	bhi.n	800832a <vARPGenerateRequestPacket+0x2a>
 8008320:	491e      	ldr	r1, [pc, #120]	; (800839c <vARPGenerateRequestPacket+0x9c>)
 8008322:	f240 302b 	movw	r0, #811	; 0x32b
 8008326:	f7f8 fbd2 	bl	8000ace <vAssertCalled>

    pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff fcc0 	bl	8007cb4 <vCastPointerTo_ARPPacket_t>
 8008334:	6178      	str	r0, [r7, #20]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = xDefaultPartARPPacketHeader;
 8008336:	4b1a      	ldr	r3, [pc, #104]	; (80083a0 <vARPGenerateRequestPacket+0xa0>)
 8008338:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800833e:	2226      	movs	r2, #38	; 0x26
 8008340:	6939      	ldr	r1, [r7, #16]
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f00a fd65 	bl	8012e12 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 8008348:	4b16      	ldr	r3, [pc, #88]	; (80083a4 <vARPGenerateRequestPacket+0xa4>)
 800834a:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	3306      	adds	r3, #6
 8008350:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8008352:	2206      	movs	r2, #6
 8008354:	6939      	ldr	r1, [r7, #16]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f00a fd5b 	bl	8012e12 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 800835c:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <vARPGenerateRequestPacket+0xa4>)
 800835e:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	3316      	adds	r3, #22
 8008364:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8008366:	2206      	movs	r2, #6
 8008368:	6939      	ldr	r1, [r7, #16]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f00a fd51 	bl	8012e12 <memcpy>

    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 8008370:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <vARPGenerateRequestPacket+0xa8>)
 8008372:	613b      	str	r3, [r7, #16]
    pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	331c      	adds	r3, #28
 8008378:	60fb      	str	r3, [r7, #12]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	601a      	str	r2, [r3, #0]
    pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	695a      	ldr	r2, [r3, #20]
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

    pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	222a      	movs	r2, #42	; 0x2a
 8008392:	61da      	str	r2, [r3, #28]

    iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 8008394:	bf00      	nop
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	08015210 	.word	0x08015210
 80083a0:	08016c14 	.word	0x08016c14
 80083a4:	20016918 	.word	0x20016918
 80083a8:	2001692c 	.word	0x2001692c

080083ac <FreeRTOS_ClearARP>:

/**
 * @brief A call to this function will clear the ARP cache.
 */
void FreeRTOS_ClearARP( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
    ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 80083b0:	2248      	movs	r2, #72	; 0x48
 80083b2:	2100      	movs	r1, #0
 80083b4:	4802      	ldr	r0, [pc, #8]	; (80083c0 <FreeRTOS_ClearARP+0x14>)
 80083b6:	f00a fd50 	bl	8012e5a <memset>
}
 80083ba:	bf00      	nop
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	200264b0 	.word	0x200264b0

080083c4 <vCastPointerTo_UDPPacket_t>:
    }
    #include "pack_struct_end.h"
    typedef struct xUDP_PACKET UDPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
    {
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 80083cc:	687b      	ldr	r3, [r7, #4]
    }
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <usChar2u16>:
               ( ( ( uint32_t ) apChr[ 3 ] ) );
    }

    static portINLINE uint16_t usChar2u16( const uint8_t * apChr );
    static portINLINE uint16_t usChar2u16( const uint8_t * apChr )
    {
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
        return ( uint16_t )
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	b29a      	uxth	r2, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3301      	adds	r3, #1
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
        return ( uint16_t )
 80083f4:	4313      	orrs	r3, r2
 80083f6:	b29b      	uxth	r3, r3
    }
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <vCastPointerTo_DNSMessage_t>:
 * @brief Utility function to cast pointer of a type to pointer of type DNSMessage_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DNSMessage_t )
    {
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
        return ( DNSMessage_t * ) pvArgument;
 800840c:	687b      	ldr	r3, [r7, #4]
    }
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <vCastPointerTo_DNSAnswerRecord_t>:
 * @brief Utility function to cast pointer of a type to pointer of type DNSAnswerRecord_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DNSAnswerRecord_t )
    {
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
        return ( DNSAnswerRecord_t * ) pvArgument;
 8008422:	687b      	ldr	r3, [r7, #4]
    }
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <vCastPointerTo_LLMNRAnswer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type LLMNRAnswer_t.
 *
 * @return The casted pointer.
 */
        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( LLMNRAnswer_t )
        {
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
            return ( LLMNRAnswer_t * ) pvArgument;
 8008438:	687b      	ldr	r3, [r7, #4]
        }
 800843a:	4618      	mov	r0, r3
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <vCastPointerTo_NBNSAnswer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NBNSAnswer_t.
 *
 * @return The casted pointer.
 */
        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NBNSAnswer_t )
        {
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
            return ( NBNSAnswer_t * ) pvArgument;
 800844e:	687b      	ldr	r3, [r7, #4]
        }
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <prvReadNameField>:
 */
        _static size_t prvReadNameField( const uint8_t * pucByte,
                                         size_t uxRemainingBytes,
                                         char * pcName,
                                         size_t uxDestLen )
        {
 800845c:	b480      	push	{r7}
 800845e:	b089      	sub	sp, #36	; 0x24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
            size_t uxNameLen = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	61fb      	str	r3, [r7, #28]
            size_t uxIndex = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	61bb      	str	r3, [r7, #24]
            size_t uxSourceLen = uxRemainingBytes;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	613b      	str	r3, [r7, #16]

            /* uxCount gets the values from pucByte and counts down to 0.
             * No need to have a different type than that of pucByte */
            size_t uxCount;

            if( uxSourceLen == ( size_t ) 0U )
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <prvReadNameField+0x26>
            {
                /* Return 0 value in case of error. */
                uxIndex = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	e078      	b.n	8008574 <prvReadNameField+0x118>
            }

            /* Determine if the name is the fully coded name, or an offset to the name
             * elsewhere in the message. */
            else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	4413      	add	r3, r2
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800848e:	2bc0      	cmp	r3, #192	; 0xc0
 8008490:	d14a      	bne.n	8008528 <prvReadNameField+0xcc>
            {
                /* Jump over the two byte offset. */
                if( uxSourceLen > sizeof( uint16_t ) )
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2b02      	cmp	r3, #2
 8008496:	d903      	bls.n	80084a0 <prvReadNameField+0x44>
                {
                    uxIndex += sizeof( uint16_t );
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	3302      	adds	r3, #2
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	e069      	b.n	8008574 <prvReadNameField+0x118>
                }
                else
                {
                    uxIndex = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	e066      	b.n	8008574 <prvReadNameField+0x118>
                /* 'uxIndex' points to the full name. Walk over the string. */
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
                {
                    /* If this is not the first time through the loop, then add a
                     * separator in the output. */
                    if( ( uxNameLen > 0U ) )
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00e      	beq.n	80084ca <prvReadNameField+0x6e>
                    {
                        if( uxNameLen >= uxDestLen )
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d302      	bcc.n	80084ba <prvReadNameField+0x5e>
                        {
                            uxIndex = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61bb      	str	r3, [r7, #24]
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
 80084b8:	e040      	b.n	800853c <prvReadNameField+0xe0>
                        }

                        pcName[ uxNameLen ] = '.';
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	4413      	add	r3, r2
 80084c0:	222e      	movs	r2, #46	; 0x2e
 80084c2:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	3301      	adds	r3, #1
 80084c8:	61fb      	str	r3, [r7, #28]
                    }

                    /* Process the first/next sub-string. */
                    uxCount = ( size_t ) pucByte[ uxIndex ];
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	4413      	add	r3, r2
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	617b      	str	r3, [r7, #20]
                    uxIndex++;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	3301      	adds	r3, #1
 80084d8:	61bb      	str	r3, [r7, #24]

                    if( ( uxIndex + uxCount ) > uxSourceLen )
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	4413      	add	r3, r2
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d217      	bcs.n	8008516 <prvReadNameField+0xba>
                    {
                        uxIndex = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	61bb      	str	r3, [r7, #24]
                        break;
 80084ea:	e027      	b.n	800853c <prvReadNameField+0xe0>
                    }

                    while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
                    {
                        if( uxNameLen >= uxDestLen )
 80084ec:	69fa      	ldr	r2, [r7, #28]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d302      	bcc.n	80084fa <prvReadNameField+0x9e>
                        {
                            uxIndex = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61bb      	str	r3, [r7, #24]
                            break;
 80084f8:	e016      	b.n	8008528 <prvReadNameField+0xcc>

                            /* break out of inner loop here
                             * break out of outer loop at the test uxNameLen >= uxDestLen. */
                        }

                        pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	441a      	add	r2, r3
 8008500:	6879      	ldr	r1, [r7, #4]
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	440b      	add	r3, r1
 8008506:	7812      	ldrb	r2, [r2, #0]
 8008508:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	3301      	adds	r3, #1
 800850e:	61fb      	str	r3, [r7, #28]
                        uxIndex++;
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	3301      	adds	r3, #1
 8008514:	61bb      	str	r3, [r7, #24]
                    while( ( uxCount-- != 0U ) && ( uxIndex < uxSourceLen ) )
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	1e5a      	subs	r2, r3, #1
 800851a:	617a      	str	r2, [r7, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d003      	beq.n	8008528 <prvReadNameField+0xcc>
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	429a      	cmp	r2, r3
 8008526:	d3e1      	bcc.n	80084ec <prvReadNameField+0x90>
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	429a      	cmp	r2, r3
 800852e:	d205      	bcs.n	800853c <prvReadNameField+0xe0>
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	4413      	add	r3, r2
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1b4      	bne.n	80084a6 <prvReadNameField+0x4a>
                    }
                }

                /* Confirm that a fully formed name was found. */
                if( uxIndex > 0U )
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d018      	beq.n	8008574 <prvReadNameField+0x118>
                {
                    if( ( uxNameLen < uxDestLen ) && ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] == 0U ) )
 8008542:	69fa      	ldr	r2, [r7, #28]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d212      	bcs.n	8008570 <prvReadNameField+0x114>
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	429a      	cmp	r2, r3
 8008550:	d20e      	bcs.n	8008570 <prvReadNameField+0x114>
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	4413      	add	r3, r2
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d108      	bne.n	8008570 <prvReadNameField+0x114>
                    {
                        pcName[ uxNameLen ] = '\0';
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	2200      	movs	r2, #0
 8008566:	701a      	strb	r2, [r3, #0]
                        uxIndex++;
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	3301      	adds	r3, #1
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	e001      	b.n	8008574 <prvReadNameField+0x118>
                    }
                    else
                    {
                        uxIndex = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	61bb      	str	r3, [r7, #24]
                    }
                }
            }

            return uxIndex;
 8008574:	69bb      	ldr	r3, [r7, #24]
        }
 8008576:	4618      	mov	r0, r3
 8008578:	3724      	adds	r7, #36	; 0x24
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <prvSkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    _static size_t prvSkipNameField( const uint8_t * pucByte,
                                     size_t uxLength )
    {
 8008582:	b480      	push	{r7}
 8008584:	b087      	sub	sp, #28
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d102      	bne.n	80085a0 <prvSkipNameField+0x1e>
        {
            uxIndex = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	613b      	str	r3, [r7, #16]
 800859e:	e03f      	b.n	8008620 <prvSkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	4413      	add	r3, r2
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085ac:	2bc0      	cmp	r3, #192	; 0xc0
 80085ae:	d11f      	bne.n	80085f0 <prvSkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d903      	bls.n	80085be <prvSkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	3302      	adds	r3, #2
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	e030      	b.n	8008620 <prvSkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	e02d      	b.n	8008620 <prvSkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	4413      	add	r3, r2
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	3301      	adds	r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d908      	bls.n	80085ea <prvSkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4413      	add	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]
 80085e8:	e002      	b.n	80085f0 <prvSkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	613b      	str	r3, [r7, #16]
                    break;
 80085ee:	e008      	b.n	8008602 <prvSkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	4413      	add	r3, r2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <prvSkipNameField+0x80>
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d8e0      	bhi.n	80085c4 <prvSkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <prvSkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	4413      	add	r3, r2
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <prvSkipNameField+0x9a>
                {
                    uxIndex++;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	3301      	adds	r3, #1
 8008618:	613b      	str	r3, [r7, #16]
 800861a:	e001      	b.n	8008620 <prvSkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008620:	693b      	ldr	r3, [r7, #16]
    }
 8008622:	4618      	mov	r0, r3
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <ulDNSHandlePacket>:
 *
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	2b29      	cmp	r3, #41	; 0x29
 800863c:	d90f      	bls.n	800865e <ulDNSHandlePacket+0x30>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	3b2a      	subs	r3, #42	; 0x2a
 8008644:	60fb      	str	r3, [r7, #12]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b0b      	cmp	r3, #11
 800864a:	d908      	bls.n	800865e <ulDNSHandlePacket+0x30>
            {
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	332a      	adds	r3, #42	; 0x2a
 8008652:	60bb      	str	r3, [r7, #8]

                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) prvParseDNSReply( pucPayLoadBuffer,
 8008654:	2200      	movs	r2, #0
 8008656:	68f9      	ldr	r1, [r7, #12]
 8008658:	68b8      	ldr	r0, [r7, #8]
 800865a:	f000 f821 	bl	80086a0 <prvParseDNSReply>
                                           pdFALSE );
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 800865e:	2300      	movs	r3, #0
    }
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <ulNBNSHandlePacket>:
 * @param[in] pxNetworkBuffer: The network buffer holding the NBNS packet.
 *
 * @return pdFAIL to show that the packet was not consumed.
 */
        uint32_t ulNBNSHandlePacket( NetworkBufferDescriptor_t * pxNetworkBuffer )
        {
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
            UDPPacket_t * pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fea5 	bl	80083c4 <vCastPointerTo_UDPPacket_t>
 800867a:	60f8      	str	r0, [r7, #12]
            uint8_t * pucUDPPayloadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( *pxUDPPacket ) ] );
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	332a      	adds	r3, #42	; 0x2a
 8008682:	60bb      	str	r3, [r7, #8]

            prvTreatNBNS( pucUDPPayloadBuffer,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	69d9      	ldr	r1, [r3, #28]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800868e:	461a      	mov	r2, r3
 8008690:	68b8      	ldr	r0, [r7, #8]
 8008692:	f000 fb3d 	bl	8008d10 <prvTreatNBNS>
                          pxNetworkBuffer->xDataLength,
                          pxUDPPacket->xIPHeader.ulSourceIPAddress );

            /* The packet was not consumed. */
            return pdFAIL;
 8008696:	2300      	movs	r3, #0
        }
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <prvParseDNSReply>:
 *         0 if xExpected set to pdFALSE.
 */
    _static uint32_t prvParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                       size_t uxBufferLength,
                                       BaseType_t xExpected )
    {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b0aa      	sub	sp, #168	; 0xa8
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
        DNSMessage_t * pxDNSMessageHeader;
        /* This pointer is not used to modify anything */
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        uint32_t ulIPAddress = 0UL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34

        #if ( ipconfigUSE_LLMNR == 1 )
            char * pcRequestedName = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        #endif
        uint8_t * pucByte;
        size_t uxSourceBytesRemaining;
        uint16_t x, usDataLength, usQuestions;
        uint16_t usType = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        BaseType_t xReturn = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_LLMNR == 1 )
            uint16_t usClass = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        #endif
        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            BaseType_t xDoStore = xExpected;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	66bb      	str	r3, [r7, #104]	; 0x68
            char pcName[ ipconfigDNS_CACHE_NAME_LENGTH ] = "";
 80086cc:	2300      	movs	r3, #0
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
 80086d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	605a      	str	r2, [r3, #4]
 80086da:	609a      	str	r2, [r3, #8]
        #endif
        const size_t uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 80086dc:	2304      	movs	r3, #4
 80086de:	667b      	str	r3, [r7, #100]	; 0x64

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b0b      	cmp	r3, #11
 80086e4:	d803      	bhi.n	80086ee <prvParseDNSReply+0x4e>
        {
            xReturn = pdFALSE;
 80086e6:	2300      	movs	r3, #0
 80086e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086ec:	e2fd      	b.n	8008cea <prvParseDNSReply+0x64a>
        }
        else
        {
            uxSourceBytesRemaining = uxBufferLength;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

            /* Parse the DNS message header. Map the byte stream onto a structure
             * for easier access. */
            pxDNSMessageHeader = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucUDPPayloadBuffer );
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7ff fe85 	bl	8008404 <vCastPointerTo_DNSMessage_t>
 80086fa:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                size_t uxResult;

                /* Start at the first byte after the header. */
                pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	330c      	adds	r3, #12
 8008708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 800870c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008710:	3b0c      	subs	r3, #12
 8008712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Skip any question records. */
                usQuestions = FreeRTOS_ntohs( pxDNSMessageHeader->usQuestions );
 8008716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800871a:	889b      	ldrh	r3, [r3, #4]
 800871c:	b29b      	uxth	r3, r3
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	b21a      	sxth	r2, r3
 8008722:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008726:	889b      	ldrh	r3, [r3, #4]
 8008728:	b29b      	uxth	r3, r3
 800872a:	0a1b      	lsrs	r3, r3, #8
 800872c:	b29b      	uxth	r3, r3
 800872e:	b21b      	sxth	r3, r3
 8008730:	4313      	orrs	r3, r2
 8008732:	b21b      	sxth	r3, r3
 8008734:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

                for( x = 0U; x < usQuestions; x++ )
 8008738:	2300      	movs	r3, #0
 800873a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800873e:	e077      	b.n	8008830 <prvParseDNSReply+0x190>
                {
                    #if ( ipconfigUSE_LLMNR == 1 )
                        {
                            if( x == 0U )
 8008740:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008744:	2b00      	cmp	r3, #0
 8008746:	d103      	bne.n	8008750 <prvParseDNSReply+0xb0>
                            {
                                pcRequestedName = ( char * ) pucByte;
 8008748:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800874c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                            }
                        }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8008750:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008754:	2b00      	cmp	r3, #0
 8008756:	d123      	bne.n	80087a0 <prvParseDNSReply+0x100>
                        {
                            uxResult = prvReadNameField( pucByte,
 8008758:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800875c:	2310      	movs	r3, #16
 800875e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008762:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008766:	f7ff fe79 	bl	800845c <prvReadNameField>
 800876a:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                         uxSourceBytesRemaining,
                                                         pcName,
                                                         sizeof( pcName ) );

                            /* Check for a malformed response. */
                            if( uxResult == 0U )
 800876c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d103      	bne.n	800877a <prvParseDNSReply+0xda>
                            {
                                xReturn = pdFALSE;
 8008772:	2300      	movs	r3, #0
 8008774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                break;
 8008778:	e060      	b.n	800883c <prvParseDNSReply+0x19c>
                            }

                            uxBytesRead += uxResult;
 800877a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800877e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008780:	4413      	add	r3, r2
 8008782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            pucByte = &( pucByte[ uxResult ] );
 8008786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800878a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800878c:	4413      	add	r3, r2
 800878e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= uxResult;
 8008792:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800879e:	e01f      	b.n	80087e0 <prvParseDNSReply+0x140>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = prvSkipNameField( pucByte,
 80087a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087a4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80087a8:	f7ff feeb 	bl	8008582 <prvSkipNameField>
 80087ac:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                     uxSourceBytesRemaining );

                        /* Check for a malformed response. */
                        if( uxResult == 0U )
 80087ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d103      	bne.n	80087bc <prvParseDNSReply+0x11c>
                        {
                            xReturn = pdFALSE;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 80087ba:	e03f      	b.n	800883c <prvParseDNSReply+0x19c>
                        }

                        uxBytesRead += uxResult;
 80087bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087c2:	4413      	add	r3, r2
 80087c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        pucByte = &( pucByte[ uxResult ] );
 80087c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ce:	4413      	add	r3, r2
 80087d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= uxResult;
 80087d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80087d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    }

                    /* Check the remaining buffer size. */
                    if( uxSourceBytesRemaining >= sizeof( uint32_t ) )
 80087e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d91a      	bls.n	800881e <prvParseDNSReply+0x17e>
                    {
                        #if ( ipconfigUSE_LLMNR == 1 )
                            {
                                /* usChar2u16 returns value in host endianness. */
                                usType = usChar2u16( pucByte );
 80087e8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80087ec:	f7ff fdf5 	bl	80083da <usChar2u16>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                                usClass = usChar2u16( &( pucByte[ 2 ] ) );
 80087f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087fa:	3302      	adds	r3, #2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fdec 	bl	80083da <usChar2u16>
 8008802:	4603      	mov	r3, r0
 8008804:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                            }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        pucByte = &( pucByte[ sizeof( uint32_t ) ] );
 8008808:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800880c:	3304      	adds	r3, #4
 800880e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= sizeof( uint32_t );
 8008812:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008816:	3b04      	subs	r3, #4
 8008818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800881c:	e003      	b.n	8008826 <prvParseDNSReply+0x186>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 800881e:	2300      	movs	r3, #0
 8008820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        break;
 8008824:	e00a      	b.n	800883c <prvParseDNSReply+0x19c>
                for( x = 0U; x < usQuestions; x++ )
 8008826:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800882a:	3301      	adds	r3, #1
 800882c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008830:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008834:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008838:	429a      	cmp	r2, r3
 800883a:	d381      	bcc.n	8008740 <prvParseDNSReply+0xa0>
                    }
                }

                if( xReturn == pdFALSE )
 800883c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 824f 	beq.w	8008ce4 <prvParseDNSReply+0x644>
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                /* Search through the answer records. */
                pxDNSMessageHeader->usAnswers = FreeRTOS_ntohs( pxDNSMessageHeader->usAnswers );
 8008846:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800884a:	88db      	ldrh	r3, [r3, #6]
 800884c:	b29b      	uxth	r3, r3
 800884e:	021b      	lsls	r3, r3, #8
 8008850:	b21a      	sxth	r2, r3
 8008852:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008856:	88db      	ldrh	r3, [r3, #6]
 8008858:	b29b      	uxth	r3, r3
 800885a:	0a1b      	lsrs	r3, r3, #8
 800885c:	b29b      	uxth	r3, r3
 800885e:	b21b      	sxth	r3, r3
 8008860:	4313      	orrs	r3, r2
 8008862:	b21b      	sxth	r3, r3
 8008864:	b29a      	uxth	r2, r3
 8008866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800886a:	80da      	strh	r2, [r3, #6]

                if( ( pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 800886c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008870:	885b      	ldrh	r3, [r3, #2]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 8008878:	2b80      	cmp	r3, #128	; 0x80
 800887a:	f040 80ff 	bne.w	8008a7c <prvParseDNSReply+0x3dc>
                {
                    const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 800887e:	2301      	movs	r3, #1
 8008880:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                    uint16_t usNumARecordsStored = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 800888a:	2300      	movs	r3, #0
 800888c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008890:	e0ea      	b.n	8008a68 <prvParseDNSReply+0x3c8>
                    {
                        BaseType_t xDoAccept;

                        if( usNumARecordsStored >= usCount )
 8008892:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008896:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800889a:	429a      	cmp	r2, r3
 800889c:	f080 8224 	bcs.w	8008ce8 <prvParseDNSReply+0x648>
                        {
                            /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                            break;
                        }

                        uxResult = prvSkipNameField( pucByte,
 80088a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088a4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80088a8:	f7ff fe6b 	bl	8008582 <prvSkipNameField>
 80088ac:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                     uxSourceBytesRemaining );

                        /* Check for a malformed response. */
                        if( uxResult == 0U )
 80088ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d103      	bne.n	80088bc <prvParseDNSReply+0x21c>
                        {
                            xReturn = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 80088ba:	e216      	b.n	8008cea <prvParseDNSReply+0x64a>
                        }

                        uxBytesRead += uxResult;
 80088bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c2:	4413      	add	r3, r2
 80088c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        pucByte = &( pucByte[ uxResult ] );
 80088c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ce:	4413      	add	r3, r2
 80088d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        uxSourceBytesRemaining -= uxResult;
 80088d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80088d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Is there enough data for an IPv4 A record answer and, if so,
                         * is this an A record? */
                        if( uxSourceBytesRemaining < sizeof( uint16_t ) )
 80088e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d803      	bhi.n	80088f0 <prvParseDNSReply+0x250>
                        {
                            xReturn = pdFALSE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 80088ee:	e1fc      	b.n	8008cea <prvParseDNSReply+0x64a>
                        }

                        usType = usChar2u16( pucByte );
 80088f0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80088f4:	f7ff fd71 	bl	80083da <usChar2u16>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

                        if( usType == ( uint16_t ) dnsTYPE_A_HOST )
 80088fe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8008902:	2b01      	cmp	r3, #1
 8008904:	d10b      	bne.n	800891e <prvParseDNSReply+0x27e>
                        {
                            if( uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength ) )
 8008906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008908:	330a      	adds	r3, #10
 800890a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800890e:	429a      	cmp	r2, r3
 8008910:	d302      	bcc.n	8008918 <prvParseDNSReply+0x278>
                            {
                                xDoAccept = pdTRUE;
 8008912:	2301      	movs	r3, #1
 8008914:	67bb      	str	r3, [r7, #120]	; 0x78
 8008916:	e004      	b.n	8008922 <prvParseDNSReply+0x282>
                            }
                            else
                            {
                                xDoAccept = pdFALSE;
 8008918:	2300      	movs	r3, #0
 800891a:	67bb      	str	r3, [r7, #120]	; 0x78
 800891c:	e001      	b.n	8008922 <prvParseDNSReply+0x282>
                            }
                        }
                        else
                        {
                            /* Unknown host type. */
                            xDoAccept = pdFALSE;
 800891e:	2300      	movs	r3, #0
 8008920:	67bb      	str	r3, [r7, #120]	; 0x78
                        }

                        if( xDoAccept != pdFALSE )
 8008922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008924:	2b00      	cmp	r3, #0
 8008926:	d05f      	beq.n	80089e8 <prvParseDNSReply+0x348>
                        {
                            /* This is the required record type and is of sufficient size. */

                            /* Mapping pucByte to a DNSAnswerRecord allows easy access of the
                             * fields of the structure. */
                            pxDNSAnswerRecord = ipCAST_PTR_TO_TYPE_PTR( DNSAnswerRecord_t, pucByte );
 8008928:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800892c:	f7ff fd75 	bl	800841a <vCastPointerTo_DNSAnswerRecord_t>
 8008930:	6478      	str	r0, [r7, #68]	; 0x44

                            /* Sanity check the data length of an IPv4 answer. */
                            if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) == ( uint16_t ) uxAddressLength )
 8008932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008934:	891b      	ldrh	r3, [r3, #8]
 8008936:	b29b      	uxth	r3, r3
 8008938:	021b      	lsls	r3, r3, #8
 800893a:	b21a      	sxth	r2, r3
 800893c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800893e:	891b      	ldrh	r3, [r3, #8]
 8008940:	b29b      	uxth	r3, r3
 8008942:	0a1b      	lsrs	r3, r3, #8
 8008944:	b29b      	uxth	r3, r3
 8008946:	b21b      	sxth	r3, r3
 8008948:	4313      	orrs	r3, r2
 800894a:	b21b      	sxth	r3, r3
 800894c:	b29a      	uxth	r2, r3
 800894e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008950:	b29b      	uxth	r3, r3
 8008952:	429a      	cmp	r2, r3
 8008954:	d139      	bne.n	80089ca <prvParseDNSReply+0x32a>
                                /*
                                 * Use helper variables for memcpy() to remain
                                 * compliant with MISRA Rule 21.15.  These should be
                                 * optimized away.
                                 */
                                pvCopySource = &pucByte[ sizeof( DNSAnswerRecord_t ) ];
 8008956:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800895a:	330a      	adds	r3, #10
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                pvCopyDest = &ulIPAddress;
 800895e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008962:	63bb      	str	r3, [r7, #56]	; 0x38
                                ( void ) memcpy( pvCopyDest, pvCopySource, uxAddressLength );
 8008964:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008968:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800896a:	f00a fa52 	bl	8012e12 <memcpy>
                                    {
                                        char cBuffer[ 16 ];

                                        /* The reply will only be stored in the DNS cache when the
                                         * request was issued by this device. */
                                        if( xDoStore != pdFALSE )
 800896e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00d      	beq.n	8008990 <prvParseDNSReply+0x2f0>
                                        {
                                            ( void ) prvProcessDNSCache( pcName, &ulIPAddress, pxDNSAnswerRecord->ulTTL, pdFALSE );
 8008974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800897c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008980:	2300      	movs	r3, #0
 8008982:	f000 fba1 	bl	80090c8 <prvProcessDNSCache>
                                            usNumARecordsStored++; /* Track # of A records stored */
 8008986:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800898a:	3301      	adds	r3, #1
 800898c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                                        }

                                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET, ( const void * ) &( ulIPAddress ), cBuffer, sizeof( cBuffer ) );
 8008990:	f107 0214 	add.w	r2, r7, #20
 8008994:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8008998:	2310      	movs	r3, #16
 800899a:	2002      	movs	r0, #2
 800899c:	f002 fbf6 	bl	800b18c <FreeRTOS_inet_ntop>
                                        /* Show what has happened. */
                                        FreeRTOS_printf( ( "DNS[0x%04lX]: The answer to '%s' (%s) will%s be stored\n",
 80089a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	4618      	mov	r0, r3
 80089aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <prvParseDNSReply+0x314>
 80089b0:	4b61      	ldr	r3, [pc, #388]	; (8008b38 <prvParseDNSReply+0x498>)
 80089b2:	e000      	b.n	80089b6 <prvParseDNSReply+0x316>
 80089b4:	4b61      	ldr	r3, [pc, #388]	; (8008b3c <prvParseDNSReply+0x49c>)
 80089b6:	f107 0114 	add.w	r1, r7, #20
 80089ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	460b      	mov	r3, r1
 80089c2:	4601      	mov	r1, r0
 80089c4:	485e      	ldr	r0, [pc, #376]	; (8008b40 <prvParseDNSReply+0x4a0>)
 80089c6:	f7f8 f859 	bl	8000a7c <vLoggingPrintf>
                                                           ( xDoStore != 0 ) ? "" : " NOT" ) );
                                    }
                                #endif /* ipconfigUSE_DNS_CACHE */
                            }

                            pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) + uxAddressLength ] );
 80089ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089cc:	330a      	adds	r3, #10
 80089ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089d2:	4413      	add	r3, r2
 80089d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + uxAddressLength );
 80089d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80089dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	3b0a      	subs	r3, #10
 80089e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089e6:	e03a      	b.n	8008a5e <prvParseDNSReply+0x3be>
                        }
                        else if( uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 80089e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d936      	bls.n	8008a5e <prvParseDNSReply+0x3be>
                        {
                            /* It's not an A record, so skip it. Get the header location
                             * and then jump over the header. */
                            /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */
                            pxDNSAnswerRecord = ipCAST_PTR_TO_TYPE_PTR( DNSAnswerRecord_t, pucByte );
 80089f0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80089f4:	f7ff fd11 	bl	800841a <vCastPointerTo_DNSAnswerRecord_t>
 80089f8:	6478      	str	r0, [r7, #68]	; 0x44

                            pucByte = &( pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80089fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089fe:	330a      	adds	r3, #10
 8008a00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8008a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a08:	3b0a      	subs	r3, #10
 8008a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                            /* Determine the length of the answer data from the header. */
                            usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8008a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a10:	891b      	ldrh	r3, [r3, #8]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	b21a      	sxth	r2, r3
 8008a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a1a:	891b      	ldrh	r3, [r3, #8]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	b21b      	sxth	r3, r3
 8008a24:	4313      	orrs	r3, r2
 8008a26:	b21b      	sxth	r3, r3
 8008a28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                            /* Jump over the answer. */
                            if( uxSourceBytesRemaining >= usDataLength )
 8008a2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d30e      	bcc.n	8008a56 <prvParseDNSReply+0x3b6>
                            {
                                pucByte = &( pucByte[ usDataLength ] );
 8008a38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a40:	4413      	add	r3, r2
 8008a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                                uxSourceBytesRemaining -= usDataLength;
 8008a46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a4a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a54:	e003      	b.n	8008a5e <prvParseDNSReply+0x3be>
                            }
                            else
                            {
                                /* Malformed response. */
                                xReturn = pdFALSE;
 8008a56:	2300      	movs	r3, #0
 8008a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                break;
 8008a5c:	e145      	b.n	8008cea <prvParseDNSReply+0x64a>
                    for( x = 0U; x < pxDNSMessageHeader->usAnswers; x++ )
 8008a5e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008a62:	3301      	adds	r3, #1
 8008a64:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a6c:	88db      	ldrh	r3, [r3, #6]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008a74:	429a      	cmp	r2, r3
 8008a76:	f4ff af0c 	bcc.w	8008892 <prvParseDNSReply+0x1f2>
 8008a7a:	e136      	b.n	8008cea <prvParseDNSReply+0x64a>
                        }
                    }
                }

                #if ( ipconfigUSE_LLMNR == 1 )
                    else if( ( usQuestions != ( uint16_t ) 0U ) && ( usType == dnsTYPE_A_HOST ) && ( usClass == dnsCLASS_IN ) && ( pcRequestedName != NULL ) )
 8008a7c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8132 	beq.w	8008cea <prvParseDNSReply+0x64a>
 8008a86:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	f040 812d 	bne.w	8008cea <prvParseDNSReply+0x64a>
 8008a90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	f040 8128 	bne.w	8008cea <prvParseDNSReply+0x64a>
 8008a9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 8123 	beq.w	8008cea <prvParseDNSReply+0x64a>
                    {
                        /* If this is not a reply to our DNS request, it might an LLMNR
                         * request. */
                        if( xApplicationDNSQueryHook( &( pcRequestedName[ 1 ] ) ) != pdFALSE )
 8008aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7f8 f888 	bl	8000bc0 <xApplicationDNSQueryHook>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 8119 	beq.w	8008cea <prvParseDNSReply+0x64a>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	677b      	str	r3, [r7, #116]	; 0x74
                            NetworkBufferDescriptor_t * pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 ff18 	bl	80098f2 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008ac2:	6738      	str	r0, [r7, #112]	; 0x70
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	66fb      	str	r3, [r7, #108]	; 0x6c

                            if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8008ac8:	4b1e      	ldr	r3, [pc, #120]	; (8008b44 <prvParseDNSReply+0x4a4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d13d      	bne.n	8008b4c <prvParseDNSReply+0x4ac>
 8008ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d03a      	beq.n	8008b4c <prvParseDNSReply+0x4ac>
                            {
                                size_t uxDataLength = uxBufferLength + sizeof( UDPHeader_t ) + sizeof( EthernetHeader_t ) + sizeof( IPHeader_t );
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	332a      	adds	r3, #42	; 0x2a
 8008ada:	65bb      	str	r3, [r7, #88]	; 0x58

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8008adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ade:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ae0:	61da      	str	r2, [r3, #28]
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, uxDataLength + sizeof( LLMNRAnswer_t ) );
 8008ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ae4:	3310      	adds	r3, #16
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008aea:	f000 fea7 	bl	800983c <pxDuplicateNetworkBufferWithDescriptor>
 8008aee:	6778      	str	r0, [r7, #116]	; 0x74

                                if( pxNewBuffer != NULL )
 8008af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d028      	beq.n	8008b48 <prvParseDNSReply+0x4a8>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( pucByte - pucUDPPayloadBuffer );
 8008af6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	657b      	str	r3, [r7, #84]	; 0x54
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) pcRequestedName ) - pucUDPPayloadBuffer );
 8008b00:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	653b      	str	r3, [r7, #80]	; 0x50

                                    pxNetworkBuffer = pxNewBuffer;
 8008b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b0c:	673b      	str	r3, [r7, #112]	; 0x70
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8008b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	332a      	adds	r3, #42	; 0x2a
 8008b14:	66fb      	str	r3, [r7, #108]	; 0x6c

                                    pucByte = &( pucNewBuffer[ xOffset1 ] );
 8008b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                                    pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 8008b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b24:	4413      	add	r3, r2
 8008b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                                    pxDNSMessageHeader = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucNewBuffer );
 8008b2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b2c:	f7ff fc6a 	bl	8008404 <vCastPointerTo_DNSMessage_t>
 8008b30:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8008b34:	e00a      	b.n	8008b4c <prvParseDNSReply+0x4ac>
 8008b36:	bf00      	nop
 8008b38:	0801532c 	.word	0x0801532c
 8008b3c:	08015330 	.word	0x08015330
 8008b40:	08015338 	.word	0x08015338
 8008b44:	08016c94 	.word	0x08016c94
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	673b      	str	r3, [r7, #112]	; 0x70
                                }
                            }

                            /* The test on 'pucNewBuffer' is only to satisfy lint. */
                            if( ( pxNetworkBuffer != NULL ) && ( pucNewBuffer != NULL ) )
 8008b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f000 80cb 	beq.w	8008cea <prvParseDNSReply+0x64a>
 8008b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 80c7 	beq.w	8008cea <prvParseDNSReply+0x64a>
                            {
                                pxAnswer = ipCAST_PTR_TO_TYPE_PTR( LLMNRAnswer_t, pucByte );
 8008b5c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008b60:	f7ff fc66 	bl	8008430 <vCastPointerTo_LLMNRAnswer_t>
 8008b64:	64f8      	str	r0, [r7, #76]	; 0x4c

                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                #ifndef _lint
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_REPONSE ); /* Set the response flag */
 8008b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b6a:	3302      	adds	r3, #2
 8008b6c:	2280      	movs	r2, #128	; 0x80
 8008b6e:	701a      	strb	r2, [r3, #0]
 8008b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b74:	3303      	adds	r3, #3
 8008b76:	2200      	movs	r2, #0
 8008b78:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                       /* Provide a single answer */
 8008b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b7e:	3306      	adds	r3, #6
 8008b80:	2200      	movs	r2, #0
 8008b82:	701a      	strb	r2, [r3, #0]
 8008b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b88:	3307      	adds	r3, #7
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                  /* No authority */
 8008b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b92:	3308      	adds	r3, #8
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b9c:	3309      	adds	r3, #9
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                 /* No additional info */
 8008ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ba6:	330a      	adds	r3, #10
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bb0:	330b      	adds	r3, #11
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	701a      	strb	r2, [r3, #0]
                                #endif /* lint */

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8008bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb8:	22c0      	movs	r2, #192	; 0xc0
 8008bba:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( pcRequestedName - ( char * ) pucNewBuffer );
 8008bbc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc8:	705a      	strb	r2, [r3, #1]

                                #ifndef _lint
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usType, dnsTYPE_A_HOST ); /* Type A: host */
 8008bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bcc:	3302      	adds	r3, #2
 8008bce:	2200      	movs	r2, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bd4:	3303      	adds	r3, #3
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN );   /* 1: Class IN */
 8008bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bdc:	3304      	adds	r3, #4
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be4:	3305      	adds	r3, #5
 8008be6:	2201      	movs	r2, #1
 8008be8:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8008bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bec:	3306      	adds	r3, #6
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf4:	3307      	adds	r3, #7
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	2293      	movs	r2, #147	; 0x93
 8008c00:	701a      	strb	r2, [r3, #0]
 8008c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c04:	3309      	adds	r3, #9
 8008c06:	22e0      	movs	r2, #224	; 0xe0
 8008c08:	701a      	strb	r2, [r3, #0]
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, 4 );
 8008c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0c:	330a      	adds	r3, #10
 8008c0e:	2200      	movs	r2, #0
 8008c10:	701a      	strb	r2, [r3, #0]
 8008c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c14:	330b      	adds	r3, #11
 8008c16:	2204      	movs	r2, #4
 8008c18:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8008c1a:	4b3c      	ldr	r3, [pc, #240]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	061a      	lsls	r2, r3, #24
 8008c20:	4b3a      	ldr	r3, [pc, #232]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	021b      	lsls	r3, r3, #8
 8008c26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	4b37      	ldr	r3, [pc, #220]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	0a1b      	lsrs	r3, r3, #8
 8008c32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c36:	431a      	orrs	r2, r3
 8008c38:	4b34      	ldr	r3, [pc, #208]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	0e1b      	lsrs	r3, r3, #24
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	0e1a      	lsrs	r2, r3, #24
 8008c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c44:	330c      	adds	r3, #12
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	4b30      	ldr	r3, [pc, #192]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	061a      	lsls	r2, r3, #24
 8008c50:	4b2e      	ldr	r3, [pc, #184]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	021b      	lsls	r3, r3, #8
 8008c56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	4b2b      	ldr	r3, [pc, #172]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	0a1b      	lsrs	r3, r3, #8
 8008c62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c66:	431a      	orrs	r2, r3
 8008c68:	4b28      	ldr	r3, [pc, #160]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	0e1b      	lsrs	r3, r3, #24
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	0c1a      	lsrs	r2, r3, #16
 8008c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c74:	330d      	adds	r3, #13
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	4b24      	ldr	r3, [pc, #144]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	061a      	lsls	r2, r3, #24
 8008c80:	4b22      	ldr	r3, [pc, #136]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	4b1f      	ldr	r3, [pc, #124]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	0a1b      	lsrs	r3, r3, #8
 8008c92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c96:	431a      	orrs	r2, r3
 8008c98:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	0e1b      	lsrs	r3, r3, #24
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	0a1a      	lsrs	r2, r3, #8
 8008ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca4:	330e      	adds	r3, #14
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	4b18      	ldr	r3, [pc, #96]	; (8008d0c <prvParseDNSReply+0x66c>)
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	0e1a      	lsrs	r2, r3, #24
 8008cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb2:	330f      	adds	r3, #15
 8008cb4:	b2d2      	uxtb	r2, r2
 8008cb6:	701a      	strb	r2, [r3, #0]
                                #endif /* lint */
                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( pucByte - pucNewBuffer ) );
 8008cb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	3310      	adds	r3, #16
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

                                prvReplyDNSMessage( pxNetworkBuffer, usLength );
 8008cca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008cd2:	f000 f98b 	bl	8008fec <prvReplyDNSMessage>

                                if( pxNewBuffer != NULL )
 8008cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d006      	beq.n	8008cea <prvParseDNSReply+0x64a>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8008cdc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8008cde:	f008 ff33 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
 8008ce2:	e002      	b.n	8008cea <prvParseDNSReply+0x64a>
                    break;
 8008ce4:	bf00      	nop
 8008ce6:	e000      	b.n	8008cea <prvParseDNSReply+0x64a>
                            break;
 8008ce8:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <prvParseDNSReply+0x658>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = dnsPARSE_ERROR;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf6:	e004      	b.n	8008d02 <prvParseDNSReply+0x662>
        }
        else if( xExpected == pdFALSE )
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <prvParseDNSReply+0x662>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0UL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            ( void ) xDoStore;
        #endif

        return ulIPAddress;
 8008d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8008d04:	4618      	mov	r0, r3
 8008d06:	37a0      	adds	r7, #160	; 0xa0
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20016918 	.word	0x20016918

08008d10 <prvTreatNBNS>:
 * @param[in] ulIPAddress: IP address of the sender.
 */
        static void prvTreatNBNS( uint8_t * pucPayload,
                                  size_t uxBufferLength,
                                  uint32_t ulIPAddress )
        {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b094      	sub	sp, #80	; 0x50
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
            uint16_t usFlags, usType, usClass;
            uint8_t * pucSource, * pucTarget;
            uint8_t ucByte;
            uint8_t ucNBNSName[ 17 ];
            uint8_t * pucUDPPayloadBuffer = pucPayload;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	643b      	str	r3, [r7, #64]	; 0x40
            NetworkBufferDescriptor_t * pxNetworkBuffer;
            size_t uxBytesNeeded = sizeof( UDPPacket_t ) + sizeof( NBNSRequest_t );
 8008d20:	235c      	movs	r3, #92	; 0x5c
 8008d22:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Check for minimum buffer size. */
            if( uxBufferLength < uxBytesNeeded )
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	f0c0 8157 	bcc.w	8008fdc <prvTreatNBNS+0x2cc>
            {
                return;
            }

            /* Read the request flags in host endianness. */
            usFlags = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usFlags ) ] ) );
 8008d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d30:	3302      	adds	r3, #2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fb51 	bl	80083da <usChar2u16>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	86fb      	strh	r3, [r7, #54]	; 0x36

            if( ( usFlags & dnsNBNS_FLAGS_OPCODE_MASK ) == dnsNBNS_FLAGS_OPCODE_QUERY )
 8008d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d3e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f040 814b 	bne.w	8008fde <prvTreatNBNS+0x2ce>
            {
                usType = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usType ) ] ) );
 8008d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d4a:	332e      	adds	r3, #46	; 0x2e
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff fb44 	bl	80083da <usChar2u16>
 8008d52:	4603      	mov	r3, r0
 8008d54:	86bb      	strh	r3, [r7, #52]	; 0x34
                usClass = usChar2u16( &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usClass ) ] ) );
 8008d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d58:	3330      	adds	r3, #48	; 0x30
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff fb3d 	bl	80083da <usChar2u16>
 8008d60:	4603      	mov	r3, r0
 8008d62:	867b      	strh	r3, [r7, #50]	; 0x32
                /* Not used for now */
                ( void ) usClass;

                /* For NBNS a name is 16 bytes long, written with capitals only.
                 * Make sure that the copy is terminated with a zero. */
                pucTarget = &( ucNBNSName[ sizeof( ucNBNSName ) - 2U ] );
 8008d64:	f107 0310 	add.w	r3, r7, #16
 8008d68:	330f      	adds	r3, #15
 8008d6a:	64bb      	str	r3, [r7, #72]	; 0x48
                pucTarget[ 1 ] = ( uint8_t ) 0U;
 8008d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6e:	3301      	adds	r3, #1
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]

                /* Start with decoding the last 2 bytes. */
                pucSource = &( pucUDPPayloadBuffer[ ( dnsNBNS_ENCODED_NAME_LENGTH - 2 ) + offsetof( NBNSRequest_t, ucName ) ] );
 8008d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d76:	332b      	adds	r3, #43	; 0x2b
 8008d78:	64fb      	str	r3, [r7, #76]	; 0x4c

                for( ; ; )
                {
                    const uint8_t ucCharA = ( uint8_t ) 0x41U;
 8008d7a:	2341      	movs	r3, #65	; 0x41
 8008d7c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                    ucByte = ( ( uint8_t ) ( ( pucSource[ 0 ] - ucCharA ) << 4 ) ) | ( pucSource[ 1 ] - ucCharA );
 8008d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	011b      	lsls	r3, r3, #4
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	b25a      	sxtb	r2, r3
 8008d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d94:	3301      	adds	r3, #1
 8008d96:	7819      	ldrb	r1, [r3, #0]
 8008d98:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008d9c:	1acb      	subs	r3, r1, r3
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	b25b      	sxtb	r3, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	b25b      	sxtb	r3, r3
 8008da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

                    /* Make sure there are no trailing spaces in the name. */
                    if( ( ucByte == ( uint8_t ) ' ' ) && ( pucTarget[ 1 ] == 0U ) )
 8008daa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	d107      	bne.n	8008dc2 <prvTreatNBNS+0xb2>
 8008db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db4:	3301      	adds	r3, #1
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <prvTreatNBNS+0xb2>
                    {
                        ucByte = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    }

                    *pucTarget = ucByte;
 8008dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008dc8:	701a      	strb	r2, [r3, #0]

                    if( pucTarget == ucNBNSName )
 8008dca:	f107 0310 	add.w	r3, r7, #16
 8008dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d006      	beq.n	8008de2 <prvTreatNBNS+0xd2>
                    {
                        break;
                    }

                    pucTarget -= 1;
 8008dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	64bb      	str	r3, [r7, #72]	; 0x48
                    pucSource -= 2;
 8008dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ddc:	3b02      	subs	r3, #2
 8008dde:	64fb      	str	r3, [r7, #76]	; 0x4c
                {
 8008de0:	e7cb      	b.n	8008d7a <prvTreatNBNS+0x6a>
                        break;
 8008de2:	bf00      	nop
                }

                #if ( ipconfigUSE_DNS_CACHE == 1 )
                    {
                        if( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) != 0U )
 8008de4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da06      	bge.n	8008dfa <prvTreatNBNS+0xea>
                        {
                            /* If this is a response from another device,
                             * add the name to the DNS cache */
                            ( void ) prvProcessDNSCache( ( char * ) ucNBNSName, &( ulIPAddress ), 0, pdFALSE );
 8008dec:	1d39      	adds	r1, r7, #4
 8008dee:	f107 0010 	add.w	r0, r7, #16
 8008df2:	2300      	movs	r3, #0
 8008df4:	2200      	movs	r2, #0
 8008df6:	f000 f967 	bl	80090c8 <prvProcessDNSCache>
                        /* Avoid compiler warnings. */
                        ( void ) ulIPAddress;
                    }
                #endif /* ipconfigUSE_DNS_CACHE */

                if( ( ( usFlags & dnsNBNS_FLAGS_RESPONSE ) == 0U ) &&
 8008dfa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f2c0 80ed 	blt.w	8008fde <prvTreatNBNS+0x2ce>
 8008e04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	f040 80e9 	bne.w	8008fde <prvTreatNBNS+0x2ce>
                    ( usType == dnsNBNS_TYPE_NET_BIOS ) &&
                    ( xApplicationDNSQueryHook( ( const char * ) ucNBNSName ) != pdFALSE ) )
 8008e0c:	f107 0310 	add.w	r3, r7, #16
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7f7 fed5 	bl	8000bc0 <xApplicationDNSQueryHook>
 8008e16:	4603      	mov	r3, r0
                    ( usType == dnsNBNS_TYPE_NET_BIOS ) &&
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 80e0 	beq.w	8008fde <prvTreatNBNS+0x2ce>
                    DNSMessage_t * pxMessage;
                    NBNSAnswer_t * pxAnswer;

                    /* Someone is looking for a device with ucNBNSName,
                     * prepare a positive reply. */
                    pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8008e1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008e20:	f000 fd67 	bl	80098f2 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008e24:	63f8      	str	r0, [r7, #60]	; 0x3c

                    if( ( xBufferAllocFixedSize == pdFALSE ) && ( pxNetworkBuffer != NULL ) )
 8008e26:	4b6f      	ldr	r3, [pc, #444]	; (8008fe4 <prvTreatNBNS+0x2d4>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d116      	bne.n	8008e5c <prvTreatNBNS+0x14c>
 8008e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d013      	beq.n	8008e5c <prvTreatNBNS+0x14c>
                    {
                        NetworkBufferDescriptor_t * pxNewBuffer;

                        /* The field xDataLength was set to the total length of the UDP packet,
                         * i.e. the payload size plus sizeof( UDPPacket_t ). */
                        pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength + sizeof( NBNSAnswer_t ) );
 8008e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	3310      	adds	r3, #16
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e3e:	f000 fcfd 	bl	800983c <pxDuplicateNetworkBufferWithDescriptor>
 8008e42:	62f8      	str	r0, [r7, #44]	; 0x2c

                        if( pxNewBuffer != NULL )
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <prvTreatNBNS+0x148>
                        {
                            pucUDPPayloadBuffer = &( pxNewBuffer->pucEthernetBuffer[ sizeof( UDPPacket_t ) ] );
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	332a      	adds	r3, #42	; 0x2a
 8008e50:	643b      	str	r3, [r7, #64]	; 0x40
                            pxNetworkBuffer = pxNewBuffer;
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e56:	e001      	b.n	8008e5c <prvTreatNBNS+0x14c>
                        }
                        else
                        {
                            /* Just prevent that a reply will be sent */
                            pxNetworkBuffer = NULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Should not occur: pucUDPPayloadBuffer is part of a xNetworkBufferDescriptor */
                    if( pxNetworkBuffer != NULL )
 8008e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 80bd 	beq.w	8008fde <prvTreatNBNS+0x2ce>
                    {
                        pxMessage = ipCAST_PTR_TO_TYPE_PTR( DNSMessage_t, pucUDPPayloadBuffer );
 8008e64:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008e66:	f7ff facd 	bl	8008404 <vCastPointerTo_DNSMessage_t>
 8008e6a:	62b8      	str	r0, [r7, #40]	; 0x28

                        /* As the fields in the structures are not word-aligned, we have to
                         * copy the values byte-by-byte using macro's vSetField16() and vSetField32() */
                        #ifndef _lint
                            vSetField16( pxMessage, DNSMessage_t, usFlags, dnsNBNS_QUERY_RESPONSE_FLAGS ); /* 0x8500 */
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	3302      	adds	r3, #2
 8008e70:	2285      	movs	r2, #133	; 0x85
 8008e72:	701a      	strb	r2, [r3, #0]
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	3303      	adds	r3, #3
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usQuestions, 0 );
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	3304      	adds	r3, #4
 8008e80:	2200      	movs	r2, #0
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	3305      	adds	r3, #5
 8008e88:	2200      	movs	r2, #0
 8008e8a:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAnswers, 1 );
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	3306      	adds	r3, #6
 8008e90:	2200      	movs	r2, #0
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	3307      	adds	r3, #7
 8008e98:	2201      	movs	r2, #1
 8008e9a:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAuthorityRRs, 0 );
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	3308      	adds	r3, #8
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	3309      	adds	r3, #9
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxMessage, DNSMessage_t, usAdditionalRRs, 0 );
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	330a      	adds	r3, #10
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	701a      	strb	r2, [r3, #0]
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	330b      	adds	r3, #11
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
                        #else
                            ( void ) pxMessage;
                        #endif

                        pxAnswer = ipCAST_PTR_TO_TYPE_PTR( NBNSAnswer_t, &( pucUDPPayloadBuffer[ offsetof( NBNSRequest_t, usType ) ] ) );
 8008ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ebe:	332e      	adds	r3, #46	; 0x2e
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7ff fac0 	bl	8008446 <vCastPointerTo_NBNSAnswer_t>
 8008ec6:	6278      	str	r0, [r7, #36]	; 0x24

                        #ifndef _lint
                            vSetField16( pxAnswer, NBNSAnswer_t, usType, usType );            /* Type */
 8008ec8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008eca:	0a1b      	lsrs	r3, r3, #8
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	701a      	strb	r2, [r3, #0]
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usClass, dnsNBNS_CLASS_IN ); /* Class */
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	3302      	adds	r3, #2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	701a      	strb	r2, [r3, #0]
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	3303      	adds	r3, #3
 8008eea:	2201      	movs	r2, #1
 8008eec:	701a      	strb	r2, [r3, #0]
                            vSetField32( pxAnswer, NBNSAnswer_t, ulTTL, dnsNBNS_TTL_VALUE );
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	3305      	adds	r3, #5
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	3306      	adds	r3, #6
 8008f02:	220e      	movs	r2, #14
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	3307      	adds	r3, #7
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usDataLength, 6 );           /* 6 bytes including the length field */
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	3308      	adds	r3, #8
 8008f12:	2200      	movs	r2, #0
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	3309      	adds	r3, #9
 8008f1a:	2206      	movs	r2, #6
 8008f1c:	701a      	strb	r2, [r3, #0]
                            vSetField16( pxAnswer, NBNSAnswer_t, usNbFlags, dnsNBNS_NAME_FLAGS );
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	330a      	adds	r3, #10
 8008f22:	2260      	movs	r2, #96	; 0x60
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	330b      	adds	r3, #11
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	701a      	strb	r2, [r3, #0]
                            vSetField32( pxAnswer, NBNSAnswer_t, ulIPAddress, FreeRTOS_ntohl( *ipLOCAL_IP_ADDRESS_POINTER ) );
 8008f2e:	4b2e      	ldr	r3, [pc, #184]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	061a      	lsls	r2, r3, #24
 8008f34:	4b2c      	ldr	r3, [pc, #176]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	4b29      	ldr	r3, [pc, #164]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	0a1b      	lsrs	r3, r3, #8
 8008f46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	4b26      	ldr	r3, [pc, #152]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	0e1b      	lsrs	r3, r3, #24
 8008f52:	4313      	orrs	r3, r2
 8008f54:	0e1a      	lsrs	r2, r3, #24
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	330c      	adds	r3, #12
 8008f5a:	b2d2      	uxtb	r2, r2
 8008f5c:	701a      	strb	r2, [r3, #0]
 8008f5e:	4b22      	ldr	r3, [pc, #136]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	061a      	lsls	r2, r3, #24
 8008f64:	4b20      	ldr	r3, [pc, #128]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	021b      	lsls	r3, r3, #8
 8008f6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	0a1b      	lsrs	r3, r3, #8
 8008f76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	4b1a      	ldr	r3, [pc, #104]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	0e1b      	lsrs	r3, r3, #24
 8008f82:	4313      	orrs	r3, r2
 8008f84:	0c1a      	lsrs	r2, r3, #16
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	330d      	adds	r3, #13
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	4b16      	ldr	r3, [pc, #88]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	061a      	lsls	r2, r3, #24
 8008f94:	4b14      	ldr	r3, [pc, #80]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	021b      	lsls	r3, r3, #8
 8008f9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008fa2:	695b      	ldr	r3, [r3, #20]
 8008fa4:	0a1b      	lsrs	r3, r3, #8
 8008fa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008faa:	431a      	orrs	r2, r3
 8008fac:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	0e1b      	lsrs	r3, r3, #24
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	0a1a      	lsrs	r2, r3, #8
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	330e      	adds	r3, #14
 8008fba:	b2d2      	uxtb	r2, r2
 8008fbc:	701a      	strb	r2, [r3, #0]
 8008fbe:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <prvTreatNBNS+0x2d8>)
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	0e1a      	lsrs	r2, r3, #24
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	330f      	adds	r3, #15
 8008fc8:	b2d2      	uxtb	r2, r2
 8008fca:	701a      	strb	r2, [r3, #0]
                        #else
                            ( void ) pxAnswer;
                        #endif

                        usLength = ( uint16_t ) ( sizeof( NBNSAnswer_t ) + ( size_t ) offsetof( NBNSRequest_t, usType ) );
 8008fcc:	233e      	movs	r3, #62	; 0x3e
 8008fce:	847b      	strh	r3, [r7, #34]	; 0x22

                        prvReplyDNSMessage( pxNetworkBuffer, ( BaseType_t ) usLength );
 8008fd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008fd6:	f000 f809 	bl	8008fec <prvReplyDNSMessage>
 8008fda:	e000      	b.n	8008fde <prvTreatNBNS+0x2ce>
                return;
 8008fdc:	bf00      	nop
                    }
                }
            }
        }
 8008fde:	3750      	adds	r7, #80	; 0x50
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	08016c94 	.word	0x08016c94
 8008fe8:	20016918 	.word	0x20016918

08008fec <prvReplyDNSMessage>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the DNS message.
 * @param[in] lNetLength: The length of the DNS message.
 */
        static void prvReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                        BaseType_t lNetLength )
        {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;

            pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7ff f9e2 	bl	80083c4 <vCastPointerTo_UDPPacket_t>
 8009000:	61f8      	str	r0, [r7, #28]
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	330e      	adds	r3, #14
 8009006:	61bb      	str	r3, [r7, #24]
            pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	3322      	adds	r3, #34	; 0x22
 800900c:	617b      	str	r3, [r7, #20]
            /* HT: started using defines like 'ipSIZE_OF_xxx' */
            pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	331c      	adds	r3, #28
 8009014:	b29b      	uxth	r3, r3
 8009016:	021b      	lsls	r3, r3, #8
 8009018:	b29a      	uxth	r2, r3
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	331c      	adds	r3, #28
 8009020:	0a1b      	lsrs	r3, r3, #8
 8009022:	b29b      	uxth	r3, r3
 8009024:	4313      	orrs	r3, r2
 8009026:	b29a      	uxth	r2, r3
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	805a      	strh	r2, [r3, #2]
            /* HT:endian: should not be translated, copying from packet to packet */
            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8009034:	4b22      	ldr	r3, [pc, #136]	; (80090c0 <prvReplyDNSMessage+0xd4>)
 8009036:	695a      	ldr	r2, [r3, #20]
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	60da      	str	r2, [r3, #12]
            pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	2280      	movs	r2, #128	; 0x80
 8009040:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8009042:	4b20      	ldr	r3, [pc, #128]	; (80090c4 <prvReplyDNSMessage+0xd8>)
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	b21a      	sxth	r2, r3
 800904a:	4b1e      	ldr	r3, [pc, #120]	; (80090c4 <prvReplyDNSMessage+0xd8>)
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	0a1b      	lsrs	r3, r3, #8
 8009050:	b29b      	uxth	r3, r3
 8009052:	b21b      	sxth	r3, r3
 8009054:	4313      	orrs	r3, r2
 8009056:	b21b      	sxth	r3, r3
 8009058:	b29a      	uxth	r2, r3
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800905e:	4b19      	ldr	r3, [pc, #100]	; (80090c4 <prvReplyDNSMessage+0xd8>)
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	4b17      	ldr	r3, [pc, #92]	; (80090c4 <prvReplyDNSMessage+0xd8>)
 8009068:	801a      	strh	r2, [r3, #0]
            pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	b29b      	uxth	r3, r3
 800906e:	3308      	adds	r3, #8
 8009070:	b29b      	uxth	r3, r3
 8009072:	021b      	lsls	r3, r3, #8
 8009074:	b29a      	uxth	r2, r3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	3308      	adds	r3, #8
 800907a:	0a1b      	lsrs	r3, r3, #8
 800907c:	b29b      	uxth	r3, r3
 800907e:	4313      	orrs	r3, r2
 8009080:	b29a      	uxth	r2, r3
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	809a      	strh	r2, [r3, #4]
            vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	4313      	orrs	r3, r2
 8009090:	827b      	strh	r3, [r7, #18]
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	885b      	ldrh	r3, [r3, #2]
 8009096:	b29a      	uxth	r2, r3
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	801a      	strh	r2, [r3, #0]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	8a7a      	ldrh	r2, [r7, #18]
 80090a0:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent */
            uxDataLength = ( ( size_t ) lNetLength ) + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	332a      	adds	r3, #42	; 0x2a
 80090a6:	60fb      	str	r3, [r7, #12]
                    ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
                }
            #endif

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	61da      	str	r2, [r3, #28]

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 80090ae:	2100      	movs	r1, #0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 f941 	bl	800a338 <vReturnEthernetFrame>
        }
 80090b6:	bf00      	nop
 80090b8:	3720      	adds	r7, #32
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20016918 	.word	0x20016918
 80090c4:	20026574 	.word	0x20026574

080090c8 <prvProcessDNSCache>:
 */
        static BaseType_t prvProcessDNSCache( const char * pcName,
                                              uint32_t * pulIP,
                                              uint32_t ulTTL,
                                              BaseType_t xLookUp )
        {
 80090c8:	b590      	push	{r4, r7, lr}
 80090ca:	b089      	sub	sp, #36	; 0x24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
            BaseType_t x;
            BaseType_t xFound = pdFALSE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	61bb      	str	r3, [r7, #24]
            uint32_t ulCurrentTimeSeconds = ( xTaskGetTickCount() / portTICK_PERIOD_MS ) / 1000UL;
 80090da:	f7fd f81f 	bl	800611c <xTaskGetTickCount>
 80090de:	4602      	mov	r2, r0
 80090e0:	4b8f      	ldr	r3, [pc, #572]	; (8009320 <prvProcessDNSCache+0x258>)
 80090e2:	fba3 2302 	umull	r2, r3, r3, r2
 80090e6:	099b      	lsrs	r3, r3, #6
 80090e8:	617b      	str	r3, [r7, #20]
            uint32_t ulIPAddressIndex = 0;
 80090ea:	2300      	movs	r3, #0
 80090ec:	613b      	str	r3, [r7, #16]
            static BaseType_t xFreeEntry = 0;

            configASSERT( ( pcName != NULL ) );
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d104      	bne.n	80090fe <prvProcessDNSCache+0x36>
 80090f4:	498b      	ldr	r1, [pc, #556]	; (8009324 <prvProcessDNSCache+0x25c>)
 80090f6:	f240 70d5 	movw	r0, #2005	; 0x7d5
 80090fa:	f7f7 fce8 	bl	8000ace <vAssertCalled>

            /* For each entry in the DNS cache table. */
            for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 80090fe:	2300      	movs	r3, #0
 8009100:	61fb      	str	r3, [r7, #28]
 8009102:	e096      	b.n	8009232 <prvProcessDNSCache+0x16a>
            {
                if( xDNSCache[ x ].pcName[ 0 ] == ( char ) 0 )
 8009104:	4988      	ldr	r1, [pc, #544]	; (8009328 <prvProcessDNSCache+0x260>)
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	4613      	mov	r3, r2
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	3304      	adds	r3, #4
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 8087 	beq.w	800922a <prvProcessDNSCache+0x162>
                {
                    continue;
                }

                if( strcmp( xDNSCache[ x ].pcName, pcName ) == 0 )
 800911c:	69fa      	ldr	r2, [r7, #28]
 800911e:	4613      	mov	r3, r2
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	1a9b      	subs	r3, r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4a80      	ldr	r2, [pc, #512]	; (8009328 <prvProcessDNSCache+0x260>)
 8009128:	4413      	add	r3, r2
 800912a:	3304      	adds	r3, #4
 800912c:	68f9      	ldr	r1, [r7, #12]
 800912e:	4618      	mov	r0, r3
 8009130:	f7f7 f8e6 	bl	8000300 <strcmp>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d178      	bne.n	800922c <prvProcessDNSCache+0x164>
                {
                    /* Is this function called for a lookup or to add/update an IP address? */
                    if( xLookUp != pdFALSE )
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d052      	beq.n	80091e6 <prvProcessDNSCache+0x11e>
                    {
                        /* Confirm that the record is still fresh. */
                        if( ulCurrentTimeSeconds < ( xDNSCache[ x ].ulTimeWhenAddedInSeconds + FreeRTOS_ntohl( xDNSCache[ x ].ulTTL ) ) )
 8009140:	4979      	ldr	r1, [pc, #484]	; (8009328 <prvProcessDNSCache+0x260>)
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	4613      	mov	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	3318      	adds	r3, #24
 8009150:	6819      	ldr	r1, [r3, #0]
 8009152:	4875      	ldr	r0, [pc, #468]	; (8009328 <prvProcessDNSCache+0x260>)
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	4613      	mov	r3, r2
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	1a9b      	subs	r3, r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4403      	add	r3, r0
 8009160:	3314      	adds	r3, #20
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	0618      	lsls	r0, r3, #24
 8009166:	4c70      	ldr	r4, [pc, #448]	; (8009328 <prvProcessDNSCache+0x260>)
 8009168:	69fa      	ldr	r2, [r7, #28]
 800916a:	4613      	mov	r3, r2
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4423      	add	r3, r4
 8009174:	3314      	adds	r3, #20
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	021b      	lsls	r3, r3, #8
 800917a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800917e:	4318      	orrs	r0, r3
 8009180:	4c69      	ldr	r4, [pc, #420]	; (8009328 <prvProcessDNSCache+0x260>)
 8009182:	69fa      	ldr	r2, [r7, #28]
 8009184:	4613      	mov	r3, r2
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	1a9b      	subs	r3, r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4423      	add	r3, r4
 800918e:	3314      	adds	r3, #20
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	0a1b      	lsrs	r3, r3, #8
 8009194:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009198:	4318      	orrs	r0, r3
 800919a:	4c63      	ldr	r4, [pc, #396]	; (8009328 <prvProcessDNSCache+0x260>)
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	4613      	mov	r3, r2
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	1a9b      	subs	r3, r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4423      	add	r3, r4
 80091a8:	3314      	adds	r3, #20
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	0e1b      	lsrs	r3, r3, #24
 80091ae:	4303      	orrs	r3, r0
 80091b0:	440b      	add	r3, r1
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d20b      	bcs.n	80091d0 <prvProcessDNSCache+0x108>
                                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
                                ulIPAddressIndex = ucIndex;

                                xDNSCache[ x ].ucCurrentIPAddress++;
                            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */
                            *pulIP = xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ];
 80091b8:	495b      	ldr	r1, [pc, #364]	; (8009328 <prvProcessDNSCache+0x260>)
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	4613      	mov	r3, r2
 80091be:	00db      	lsls	r3, r3, #3
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	4413      	add	r3, r2
 80091c6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e029      	b.n	8009224 <prvProcessDNSCache+0x15c>
                        }
                        else
                        {
                            /* Age out the old cached record. */
                            xDNSCache[ x ].pcName[ 0 ] = ( char ) 0;
 80091d0:	4955      	ldr	r1, [pc, #340]	; (8009328 <prvProcessDNSCache+0x260>)
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	4613      	mov	r3, r2
 80091d6:	00db      	lsls	r3, r3, #3
 80091d8:	1a9b      	subs	r3, r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	440b      	add	r3, r1
 80091de:	3304      	adds	r3, #4
 80091e0:	2200      	movs	r2, #0
 80091e2:	701a      	strb	r2, [r3, #0]
 80091e4:	e01e      	b.n	8009224 <prvProcessDNSCache+0x15c>

                                ulIPAddressIndex = xDNSCache[ x ].ucNumIPAddresses;
                                xDNSCache[ x ].ucNumIPAddresses++;
                            }
                        #endif
                        xDNSCache[ x ].ulIPAddresses[ ulIPAddressIndex ] = *pulIP;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	6819      	ldr	r1, [r3, #0]
 80091ea:	484f      	ldr	r0, [pc, #316]	; (8009328 <prvProcessDNSCache+0x260>)
 80091ec:	69fa      	ldr	r2, [r7, #28]
 80091ee:	4613      	mov	r3, r2
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	1a9b      	subs	r3, r3, r2
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4413      	add	r3, r2
 80091f8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                        xDNSCache[ x ].ulTTL = ulTTL;
 80091fc:	494a      	ldr	r1, [pc, #296]	; (8009328 <prvProcessDNSCache+0x260>)
 80091fe:	69fa      	ldr	r2, [r7, #28]
 8009200:	4613      	mov	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	1a9b      	subs	r3, r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	440b      	add	r3, r1
 800920a:	3314      	adds	r3, #20
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	601a      	str	r2, [r3, #0]
                        xDNSCache[ x ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8009210:	4945      	ldr	r1, [pc, #276]	; (8009328 <prvProcessDNSCache+0x260>)
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	4613      	mov	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	1a9b      	subs	r3, r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	440b      	add	r3, r1
 800921e:	3318      	adds	r3, #24
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	601a      	str	r2, [r3, #0]
                    }

                    xFound = pdTRUE;
 8009224:	2301      	movs	r3, #1
 8009226:	61bb      	str	r3, [r7, #24]
                    break;
 8009228:	e007      	b.n	800923a <prvProcessDNSCache+0x172>
                    continue;
 800922a:	bf00      	nop
            for( x = 0; x < ipconfigDNS_CACHE_ENTRIES; x++ )
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	3301      	adds	r3, #1
 8009230:	61fb      	str	r3, [r7, #28]
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b03      	cmp	r3, #3
 8009236:	f77f af65 	ble.w	8009104 <prvProcessDNSCache+0x3c>
                }
            }

            if( xFound == pdFALSE )
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d146      	bne.n	80092ce <prvProcessDNSCache+0x206>
            {
                if( xLookUp != pdFALSE )
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <prvProcessDNSCache+0x186>
                {
                    *pulIP = 0UL;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
 800924c:	e03f      	b.n	80092ce <prvProcessDNSCache+0x206>
                }
                else
                {
                    /* Add or update the item. */
                    if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f7f7 f860 	bl	8000314 <strlen>
 8009254:	4603      	mov	r3, r0
 8009256:	2b0f      	cmp	r3, #15
 8009258:	d839      	bhi.n	80092ce <prvProcessDNSCache+0x206>
                    {
                        ( void ) strcpy( xDNSCache[ xFreeEntry ].pcName, pcName );
 800925a:	4b34      	ldr	r3, [pc, #208]	; (800932c <prvProcessDNSCache+0x264>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	4613      	mov	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4a30      	ldr	r2, [pc, #192]	; (8009328 <prvProcessDNSCache+0x260>)
 8009268:	4413      	add	r3, r2
 800926a:	3304      	adds	r3, #4
 800926c:	68f9      	ldr	r1, [r7, #12]
 800926e:	4618      	mov	r0, r3
 8009270:	f00a fb5e 	bl	8013930 <strcpy>

                        xDNSCache[ xFreeEntry ].ulIPAddresses[ 0 ] = *pulIP;
 8009274:	4b2d      	ldr	r3, [pc, #180]	; (800932c <prvProcessDNSCache+0x264>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	6819      	ldr	r1, [r3, #0]
 800927c:	482a      	ldr	r0, [pc, #168]	; (8009328 <prvProcessDNSCache+0x260>)
 800927e:	4613      	mov	r3, r2
 8009280:	00db      	lsls	r3, r3, #3
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4403      	add	r3, r0
 8009288:	6019      	str	r1, [r3, #0]
                        xDNSCache[ xFreeEntry ].ulTTL = ulTTL;
 800928a:	4b28      	ldr	r3, [pc, #160]	; (800932c <prvProcessDNSCache+0x264>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4926      	ldr	r1, [pc, #152]	; (8009328 <prvProcessDNSCache+0x260>)
 8009290:	4613      	mov	r3, r2
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	3314      	adds	r3, #20
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	601a      	str	r2, [r3, #0]
                        xDNSCache[ xFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80092a0:	4b22      	ldr	r3, [pc, #136]	; (800932c <prvProcessDNSCache+0x264>)
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	4920      	ldr	r1, [pc, #128]	; (8009328 <prvProcessDNSCache+0x260>)
 80092a6:	4613      	mov	r3, r2
 80092a8:	00db      	lsls	r3, r3, #3
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	440b      	add	r3, r1
 80092b0:	3318      	adds	r3, #24
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	601a      	str	r2, [r3, #0]
                                             0,
                                             sizeof( xDNSCache[ xFreeEntry ].ulIPAddresses[ 1 ] ) *
                                             ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
                        #endif

                        xFreeEntry++;
 80092b6:	4b1d      	ldr	r3, [pc, #116]	; (800932c <prvProcessDNSCache+0x264>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3301      	adds	r3, #1
 80092bc:	4a1b      	ldr	r2, [pc, #108]	; (800932c <prvProcessDNSCache+0x264>)
 80092be:	6013      	str	r3, [r2, #0]

                        if( xFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 80092c0:	4b1a      	ldr	r3, [pc, #104]	; (800932c <prvProcessDNSCache+0x264>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d102      	bne.n	80092ce <prvProcessDNSCache+0x206>
                        {
                            xFreeEntry = 0;
 80092c8:	4b18      	ldr	r3, [pc, #96]	; (800932c <prvProcessDNSCache+0x264>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]
                        }
                    }
                }
            }

            if( ( xLookUp == 0 ) || ( *pulIP != 0UL ) )
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d003      	beq.n	80092dc <prvProcessDNSCache+0x214>
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01c      	beq.n	8009316 <prvProcessDNSCache+0x24e>
            {
                FreeRTOS_debug_printf( ( "prvProcessDNSCache: %s: '%s' @ %lxip\n", ( xLookUp != 0 ) ? "look-up" : "add", pcName, FreeRTOS_ntohl( *pulIP ) ) );
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <prvProcessDNSCache+0x21e>
 80092e2:	4913      	ldr	r1, [pc, #76]	; (8009330 <prvProcessDNSCache+0x268>)
 80092e4:	e000      	b.n	80092e8 <prvProcessDNSCache+0x220>
 80092e6:	4913      	ldr	r1, [pc, #76]	; (8009334 <prvProcessDNSCache+0x26c>)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	061a      	lsls	r2, r3, #24
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092f8:	431a      	orrs	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	0a1b      	lsrs	r3, r3, #8
 8009300:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009304:	431a      	orrs	r2, r3
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	0e1b      	lsrs	r3, r3, #24
 800930c:	4313      	orrs	r3, r2
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4809      	ldr	r0, [pc, #36]	; (8009338 <prvProcessDNSCache+0x270>)
 8009312:	f7f7 fbb3 	bl	8000a7c <vLoggingPrintf>
            }

            return xFound;
 8009316:	69bb      	ldr	r3, [r7, #24]
        }
 8009318:	4618      	mov	r0, r3
 800931a:	3724      	adds	r7, #36	; 0x24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd90      	pop	{r4, r7, pc}
 8009320:	10624dd3 	.word	0x10624dd3
 8009324:	08015370 	.word	0x08015370
 8009328:	200264fc 	.word	0x200264fc
 800932c:	2002656c 	.word	0x2002656c
 8009330:	080153a0 	.word	0x080153a0
 8009334:	080153a8 	.word	0x080153a8
 8009338:	080153ac 	.word	0x080153ac

0800933c <vCastPointerTo_EthernetHeader_t>:
    {
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
        return ( EthernetHeader_t * ) pvArgument;
 8009344:	687b      	ldr	r3, [r7, #4]
    }
 8009346:	4618      	mov	r0, r3
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <vCastConstPointerTo_EthernetHeader_t>:
    {
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
        return ( const EthernetHeader_t * ) pvArgument;
 800935a:	687b      	ldr	r3, [r7, #4]
    }
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <vCastPointerTo_ARPPacket_t>:
    {
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 8009370:	687b      	ldr	r3, [r7, #4]
    }
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <vCastPointerTo_IPPacket_t>:
    {
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
        return ( IPPacket_t * ) pvArgument;
 8009386:	687b      	ldr	r3, [r7, #4]
    }
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <vCastConstPointerTo_IPPacket_t>:
    {
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
        return ( const IPPacket_t * ) pvArgument;
 800939c:	687b      	ldr	r3, [r7, #4]
    }
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <vCastPointerTo_ICMPPacket_t>:
    {
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
        return ( ICMPPacket_t * ) pvArgument;
 80093b2:	687b      	ldr	r3, [r7, #4]
    }
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <vCastConstPointerTo_UDPPacket_t>:
    {
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 80093c8:	687b      	ldr	r3, [r7, #4]
    }
 80093ca:	4618      	mov	r0, r3
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <vCastPointerTo_ProtocolPacket_t>:
    {
 80093d6:	b480      	push	{r7}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
        return ( ProtocolPacket_t * ) pvArgument;
 80093de:	687b      	ldr	r3, [r7, #4]
    }
 80093e0:	4618      	mov	r0, r3
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <vCastConstPointerTo_ProtocolPacket_t>:
    {
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
        return ( const ProtocolPacket_t * ) pvArgument;
 80093f4:	687b      	ldr	r3, [r7, #4]
    }
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800940a:	687b      	ldr	r3, [r7, #4]
    }
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <vCastPointerTo_SocketSelect_t>:
             */
            EventGroupHandle_t xSelectGroup;
        } SocketSelect_t;

        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( SocketSelect_t )
        {
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
            return ( SocketSelect_t * ) pvArgument;
 8009420:	687b      	ldr	r3, [r7, #4]
        }
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 8009436:	687b      	ldr	r3, [r7, #4]
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <prvIPTask>:
 *        the data of the IP-stack, and so it has no need of using mutexes.
 *
 * @param[in] pvParameters: Not used.
 */
static void prvIPTask( void * pvParameters )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08a      	sub	sp, #40	; 0x28
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]

    /* Generate a dummy message to say that the network connection has gone
     *  down.  This will cause this task to initialise the network interface.  After
     *  this it is the responsibility of the network interface hardware driver to
     *  send this message if a previously connected network is disconnected. */
    FreeRTOS_NetworkDown();
 800944c:	f000 f9da 	bl	8009804 <FreeRTOS_NetworkDown>

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* Initialise the TCP timer. */
            prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009450:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009454:	4863      	ldr	r0, [pc, #396]	; (80095e4 <prvIPTask+0x1a0>)
 8009456:	f000 f989 	bl	800976c <prvIPTimerReload>
        }
    #endif

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800945a:	4b63      	ldr	r3, [pc, #396]	; (80095e8 <prvIPTask+0x1a4>)
 800945c:	2201      	movs	r2, #1
 800945e:	601a      	str	r2, [r3, #0]

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8009460:	4862      	ldr	r0, [pc, #392]	; (80095ec <prvIPTask+0x1a8>)
 8009462:	f7f7 fb0b 	bl	8000a7c <vLoggingPrintf>
    {
        ipconfigWATCHDOG_TIMER();

        /* Check the ARP, DHCP and TCP timers to see if there is any periodic
         * or timeout processing to perform. */
        prvCheckNetworkTimers();
 8009466:	f000 f91d 	bl	80096a4 <prvCheckNetworkTimers>

        /* Calculate the acceptable maximum sleep time. */
        xNextIPSleep = prvCalculateSleepTime();
 800946a:	f000 f8f3 	bl	8009654 <prvCalculateSleepTime>
 800946e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait until there is something to do. If the following call exits
         * due to a time out rather than a message being received, set a
         * 'NoEvent' value. */
        if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8009470:	4b5f      	ldr	r3, [pc, #380]	; (80095f0 <prvIPTask+0x1ac>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f107 0114 	add.w	r1, r7, #20
 8009478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800947a:	4618      	mov	r0, r3
 800947c:	f7fb ffba 	bl	80053f4 <xQueueReceive>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <prvIPTask+0x46>
        {
            xReceivedEvent.eEventType = eNoEvent;
 8009486:	23ff      	movs	r3, #255	; 0xff
 8009488:	753b      	strb	r3, [r7, #20]
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

        switch( xReceivedEvent.eEventType )
 800948a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800948e:	3301      	adds	r3, #1
 8009490:	2b0d      	cmp	r3, #13
 8009492:	f200 809c 	bhi.w	80095ce <prvIPTask+0x18a>
 8009496:	a201      	add	r2, pc, #4	; (adr r2, 800949c <prvIPTask+0x58>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	080095cf 	.word	0x080095cf
 80094a0:	080094d5 	.word	0x080094d5
 80094a4:	080094e1 	.word	0x080094e1
 80094a8:	080094f3 	.word	0x080094f3
 80094ac:	08009507 	.word	0x08009507
 80094b0:	0800956f 	.word	0x0800956f
 80094b4:	080095cf 	.word	0x080095cf
 80094b8:	08009593 	.word	0x08009593
 80094bc:	0800959f 	.word	0x0800959f
 80094c0:	080095c9 	.word	0x080095c9
 80094c4:	0800950d 	.word	0x0800950d
 80094c8:	0800955d 	.word	0x0800955d
 80094cc:	08009581 	.word	0x08009581
 80094d0:	080095cf 	.word	0x080095cf
        {
            case eNetworkDownEvent:
                /* Attempt to establish a connection. */
                xNetworkUp = pdFALSE;
 80094d4:	4b47      	ldr	r3, [pc, #284]	; (80095f4 <prvIPTask+0x1b0>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
                prvProcessNetworkDownEvent();
 80094da:	f000 fb8d 	bl	8009bf8 <prvProcessNetworkDownEvent>
                break;
 80094de:	e079      	b.n	80095d4 <prvIPTask+0x190>
            case eNetworkRxEvent:

                /* The network hardware driver has received a new packet.  A
                 * pointer to the received buffer is located in the pvData member
                 * of the received event structure. */
                prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff ffa3 	bl	800942e <vCastPointerTo_NetworkBufferDescriptor_t>
 80094e8:	4603      	mov	r3, r0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 f89c 	bl	8009628 <prvHandleEthernetPacket>
                break;
 80094f0:	e070      	b.n	80095d4 <prvIPTask+0x190>

            case eNetworkTxEvent:

               {
                   NetworkBufferDescriptor_t * pxDescriptor = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData );
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff ff9a 	bl	800942e <vCastPointerTo_NetworkBufferDescriptor_t>
 80094fa:	61f8      	str	r0, [r7, #28]

                   /* Send a network packet. The ownership will  be transferred to
                    * the driver, which will release it after delivery. */
                   iptraceNETWORK_INTERFACE_OUTPUT( pxDescriptor->xDataLength, pxDescriptor->pucEthernetBuffer );
                   ( void ) xNetworkInterfaceOutput( pxDescriptor, pdTRUE );
 80094fc:	2101      	movs	r1, #1
 80094fe:	69f8      	ldr	r0, [r7, #28]
 8009500:	f007 fa70 	bl	80109e4 <xNetworkInterfaceOutput>
               }

               break;
 8009504:	e066      	b.n	80095d4 <prvIPTask+0x190>

            case eARPTimerEvent:
                /* The ARP timer has expired, process the ARP cache. */
                vARPAgeCache();
 8009506:	f7fe fe25 	bl	8008154 <vARPAgeCache>
                break;
 800950a:	e063      	b.n	80095d4 <prvIPTask+0x190>
                /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
                 * to a port. The port number is communicated in the socket field
                 * usLocalPort. vSocketBind() will actually bind the socket and the
                 * API will unblock as soon as the eSOCKET_BOUND event is
                 * triggered. */
                pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff ff77 	bl	8009402 <vCastPointerTo_FreeRTOS_Socket_t>
 8009514:	6238      	str	r0, [r7, #32]
                xAddress.sin_addr = 0U; /* For the moment. */
 8009516:	2300      	movs	r3, #0
 8009518:	613b      	str	r3, [r7, #16]
                xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800951e:	021b      	lsls	r3, r3, #8
 8009520:	b21a      	sxth	r2, r3
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009526:	0a1b      	lsrs	r3, r3, #8
 8009528:	b29b      	uxth	r3, r3
 800952a:	b21b      	sxth	r3, r3
 800952c:	4313      	orrs	r3, r2
 800952e:	b21b      	sxth	r3, r3
 8009530:	b29b      	uxth	r3, r3
 8009532:	81fb      	strh	r3, [r7, #14]
                pxSocket->usLocalPort = 0U;
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	2200      	movs	r2, #0
 8009538:	849a      	strh	r2, [r3, #36]	; 0x24
                ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800953a:	f107 010c 	add.w	r1, r7, #12
 800953e:	2300      	movs	r3, #0
 8009540:	2208      	movs	r2, #8
 8009542:	6a38      	ldr	r0, [r7, #32]
 8009544:	f001 fb48 	bl	800abd8 <vSocketBind>

                /* Before 'eSocketBindEvent' was sent it was tested that
                 * ( xEventGroup != NULL ) so it can be used now to wake up the
                 * user. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f043 0210 	orr.w	r2, r3, #16
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	601a      	str	r2, [r3, #0]
                vSocketWakeUpUser( pxSocket );
 8009554:	6a38      	ldr	r0, [r7, #32]
 8009556:	f001 fee7 	bl	800b328 <vSocketWakeUpUser>
                break;
 800955a:	e03b      	b.n	80095d4 <prvIPTask+0x190>

                /* The user API FreeRTOS_closesocket() has sent a message to the
                 * IP-task to actually close a socket. This is handled in
                 * vSocketClose().  As the socket gets closed, there is no way to
                 * report back to the API, so the API won't wait for the result */
                ( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	4618      	mov	r0, r3
 8009560:	f7ff ff4f 	bl	8009402 <vCastPointerTo_FreeRTOS_Socket_t>
 8009564:	4603      	mov	r3, r0
 8009566:	4618      	mov	r0, r3
 8009568:	f001 fc06 	bl	800ad78 <vSocketClose>
                break;
 800956c:	e032      	b.n	80095d4 <prvIPTask+0x190>
            case eStackTxEvent:

                /* The network stack has generated a packet to send.  A
                 * pointer to the generated buffer is located in the pvData
                 * member of the received event structure. */
                vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	4618      	mov	r0, r3
 8009572:	f7ff ff5c 	bl	800942e <vCastPointerTo_NetworkBufferDescriptor_t>
 8009576:	4603      	mov	r3, r0
 8009578:	4618      	mov	r0, r3
 800957a:	f006 feb9 	bl	80102f0 <vProcessGeneratedUDPPacket>
                break;
 800957e:	e029      	b.n	80095d4 <prvIPTask+0x190>
                            vSocketSelect( pxMessage->pxSocketSet );
                            ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                        }
                    #else
                        {
                            vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff ff48 	bl	8009418 <vCastPointerTo_SocketSelect_t>
 8009588:	4603      	mov	r3, r0
 800958a:	4618      	mov	r0, r3
 800958c:	f002 f9ea 	bl	800b964 <vSocketSelect>
                        }
                    #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
                #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
                break;
 8009590:	e020      	b.n	80095d4 <prvIPTask+0x190>
            case eTCPTimerEvent:
                #if ( ipconfigUSE_TCP == 1 )

                    /* Simply mark the TCP timer as expired so it gets processed
                     * the next time prvCheckNetworkTimers() is called. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009592:	4a14      	ldr	r2, [pc, #80]	; (80095e4 <prvIPTask+0x1a0>)
 8009594:	7813      	ldrb	r3, [r2, #0]
 8009596:	f043 0302 	orr.w	r3, r3, #2
 800959a:	7013      	strb	r3, [r2, #0]
                #endif /* ipconfigUSE_TCP */
                break;
 800959c:	e01a      	b.n	80095d4 <prvIPTask+0x190>

                /* The API FreeRTOS_accept() was called, the IP-task will now
                 * check if the listening socket (communicated in pvData) actually
                 * received a new connection. */
                #if ( ipconfigUSE_TCP == 1 )
                    pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff ff2e 	bl	8009402 <vCastPointerTo_FreeRTOS_Socket_t>
 80095a6:	6238      	str	r0, [r7, #32]

                    if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 80095a8:	6a38      	ldr	r0, [r7, #32]
 80095aa:	f005 fc4d 	bl	800ee48 <xTCPCheckNewClient>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00e      	beq.n	80095d2 <prvIPTask+0x18e>
                    {
                        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f043 0204 	orr.w	r2, r3, #4
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	601a      	str	r2, [r3, #0]
                        vSocketWakeUpUser( pxSocket );
 80095c0:	6a38      	ldr	r0, [r7, #32]
 80095c2:	f001 feb1 	bl	800b328 <vSocketWakeUpUser>
                    }
                #endif /* ipconfigUSE_TCP */
                break;
 80095c6:	e004      	b.n	80095d2 <prvIPTask+0x18e>
            case eTCPNetStat:

                /* FreeRTOS_netstat() was called to have the IP-task print an
                 * overview of all sockets and their connections */
                #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                    vTCPNetStat();
 80095c8:	f002 f8f2 	bl	800b7b0 <vTCPNetStat>
                #endif /* ipconfigUSE_TCP */
                break;
 80095cc:	e002      	b.n	80095d4 <prvIPTask+0x190>
                /* xQueueReceive() returned because of a normal time-out. */
                break;

            default:
                /* Should not get here. */
                break;
 80095ce:	bf00      	nop
 80095d0:	e000      	b.n	80095d4 <prvIPTask+0x190>
                break;
 80095d2:	bf00      	nop
        }

        if( xNetworkDownEventPending != pdFALSE )
 80095d4:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <prvIPTask+0x1b4>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f43f af44 	beq.w	8009466 <prvIPTask+0x22>
        {
            /* A network down event could not be posted to the network event
             * queue because the queue was full.
             * As this code runs in the IP-task, it can be done directly by
             * calling prvProcessNetworkDownEvent(). */
            prvProcessNetworkDownEvent();
 80095de:	f000 fb0b 	bl	8009bf8 <prvProcessNetworkDownEvent>
        prvCheckNetworkTimers();
 80095e2:	e740      	b.n	8009466 <prvIPTask+0x22>
 80095e4:	200265c4 	.word	0x200265c4
 80095e8:	200265d8 	.word	0x200265d8
 80095ec:	080153d4 	.word	0x080153d4
 80095f0:	20026570 	.word	0x20026570
 80095f4:	200265ac 	.word	0x200265ac
 80095f8:	200265a0 	.word	0x200265a0

080095fc <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 8009602:	f7fd f931 	bl	8006868 <xTaskGetCurrentTaskHandle>
 8009606:	4602      	mov	r2, r0
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <xIsCallingFromIPTask+0x28>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d102      	bne.n	8009616 <xIsCallingFromIPTask+0x1a>
    {
        xReturn = pdTRUE;
 8009610:	2301      	movs	r3, #1
 8009612:	607b      	str	r3, [r7, #4]
 8009614:	e001      	b.n	800961a <xIsCallingFromIPTask+0x1e>
    }
    else
    {
        xReturn = pdFALSE;
 8009616:	2300      	movs	r3, #0
 8009618:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 800961a:	687b      	ldr	r3, [r7, #4]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	200265a4 	.word	0x200265a4

08009628 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer: Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
             * member.  The loop below walks through the chain processing each packet
             * in the chain in turn. */
            do
            {
                /* Store a pointer to the buffer after pxBuffer for use later on. */
                pxNextBuffer = pxBuffer->pxNextBuffer;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	60fb      	str	r3, [r7, #12]

                /* Make it NULL to avoid using it later on. */
                pxBuffer->pxNextBuffer = NULL;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	625a      	str	r2, [r3, #36]	; 0x24

                prvProcessEthernetPacket( pxBuffer );
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fb17 	bl	8009c70 <prvProcessEthernetPacket>
                pxBuffer = pxNextBuffer;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	607b      	str	r3, [r7, #4]

                /* While there is another packet in the chain. */
            } while( pxBuffer != NULL );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1f1      	bne.n	8009630 <prvHandleEthernetPacket+0x8>
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <prvCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
static TickType_t prvCalculateSleepTime( void )
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
    TickType_t xMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800965a:	f242 7310 	movw	r3, #10000	; 0x2710
 800965e:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009660:	4b0e      	ldr	r3, [pc, #56]	; (800969c <prvCalculateSleepTime+0x48>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d007      	beq.n	800967e <prvCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 800966e:	4b0b      	ldr	r3, [pc, #44]	; (800969c <prvCalculateSleepTime+0x48>)
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	429a      	cmp	r2, r3
 8009676:	d902      	bls.n	800967e <prvCalculateSleepTime+0x2a>
        {
            xMaximumSleepTime = xARPTimer.ulReloadTime;
 8009678:	4b08      	ldr	r3, [pc, #32]	; (800969c <prvCalculateSleepTime+0x48>)
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	607b      	str	r3, [r7, #4]
        }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
        {
            if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 800967e:	4b08      	ldr	r3, [pc, #32]	; (80096a0 <prvCalculateSleepTime+0x4c>)
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d902      	bls.n	800968e <prvCalculateSleepTime+0x3a>
            {
                xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <prvCalculateSleepTime+0x4c>)
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    return xMaximumSleepTime;
 800968e:	687b      	ldr	r3, [r7, #4]
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	200265b0 	.word	0x200265b0
 80096a0:	200265c4 	.word	0x200265c4

080096a4 <prvCheckNetworkTimers>:
/**
 * @brief Check the network timers (ARP/DHCP/DNS/TCP) and if they are
 *        expired, send an event to the IP-Task.
 */
static void prvCheckNetworkTimers( void )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 80096aa:	481a      	ldr	r0, [pc, #104]	; (8009714 <prvCheckNetworkTimers+0x70>)
 80096ac:	f000 f86e 	bl	800978c <prvIPTimerCheck>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <prvCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 80096b6:	2003      	movs	r0, #3
 80096b8:	f000 fa30 	bl	8009b1c <xSendEventToIPTask>
            TickType_t xNextTime;
            BaseType_t xCheckTCPSockets;

            /* If the IP task has messages waiting to be processed then
             * it will not sleep in any case. */
            if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 80096bc:	4b16      	ldr	r3, [pc, #88]	; (8009718 <prvCheckNetworkTimers+0x74>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fc f85d 	bl	8005780 <uxQueueMessagesWaiting>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <prvCheckNetworkTimers+0x2e>
            {
                xWillSleep = pdTRUE;
 80096cc:	2301      	movs	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e001      	b.n	80096d6 <prvCheckNetworkTimers+0x32>
            }
            else
            {
                xWillSleep = pdFALSE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
            }

            /* Sockets need to be checked if the TCP timer has expired. */
            xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 80096d6:	4811      	ldr	r0, [pc, #68]	; (800971c <prvCheckNetworkTimers+0x78>)
 80096d8:	f000 f858 	bl	800978c <prvIPTimerCheck>
 80096dc:	60b8      	str	r0, [r7, #8]

            /* Sockets will also be checked if there are TCP messages but the
            * message queue is empty (indicated by xWillSleep being true). */
            if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 80096de:	4b10      	ldr	r3, [pc, #64]	; (8009720 <prvCheckNetworkTimers+0x7c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d004      	beq.n	80096f0 <prvCheckNetworkTimers+0x4c>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <prvCheckNetworkTimers+0x4c>
            {
                xCheckTCPSockets = pdTRUE;
 80096ec:	2301      	movs	r3, #1
 80096ee:	60bb      	str	r3, [r7, #8]
            }

            if( xCheckTCPSockets != pdFALSE )
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00a      	beq.n	800970c <prvCheckNetworkTimers+0x68>
            {
                /* Attend to the sockets, returning the period after which the
                 * check must be repeated. */
                xNextTime = xTCPTimerCheck( xWillSleep );
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f001 fe52 	bl	800b3a0 <xTCPTimerCheck>
 80096fc:	6078      	str	r0, [r7, #4]
                prvIPTimerStart( &xTCPTimer, xNextTime );
 80096fe:	6879      	ldr	r1, [r7, #4]
 8009700:	4806      	ldr	r0, [pc, #24]	; (800971c <prvCheckNetworkTimers+0x78>)
 8009702:	f000 f80f 	bl	8009724 <prvIPTimerStart>
                xProcessedTCPMessage = 0;
 8009706:	4b06      	ldr	r3, [pc, #24]	; (8009720 <prvCheckNetworkTimers+0x7c>)
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]
            }
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	200265b0 	.word	0x200265b0
 8009718:	20026570 	.word	0x20026570
 800971c:	200265c4 	.word	0x200265c4
 8009720:	200265a8 	.word	0x200265a8

08009724 <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime: Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3304      	adds	r3, #4
 8009732:	4618      	mov	r0, r3
 8009734:	f7fc ff42 	bl	80065bc <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d105      	bne.n	8009750 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	7813      	ldrb	r3, [r2, #0]
 8009748:	f043 0302 	orr.w	r3, r3, #2
 800974c:	7013      	strb	r3, [r2, #0]
 800974e:	e004      	b.n	800975a <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	7813      	ldrb	r3, [r2, #0]
 8009754:	f36f 0341 	bfc	r3, #1, #1
 8009758:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	7813      	ldrb	r3, [r2, #0]
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	7013      	strb	r3, [r2, #0]
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <prvIPTimerReload>:
 * @param[in] pxTimer: Pointer to the IP timer.
 * @param[in] xTime: Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff ffd0 	bl	8009724 <prvIPTimerStart>
}
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <prvIPTimerCheck>:
 * @param[in] pxTimer: Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d102      	bne.n	80097a8 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 80097a2:	2300      	movs	r3, #0
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	e028      	b.n	80097fa <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	f003 0302 	and.w	r3, r3, #2
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10f      	bne.n	80097d6 <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	1d1a      	adds	r2, r3, #4
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	330c      	adds	r3, #12
 80097be:	4619      	mov	r1, r3
 80097c0:	4610      	mov	r0, r2
 80097c2:	f7fc ff33 	bl	800662c <xTaskCheckForTimeOut>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7813      	ldrb	r3, [r2, #0]
 80097d0:	f043 0302 	orr.w	r3, r3, #2
 80097d4:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d008      	beq.n	80097f6 <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff ff9a 	bl	8009724 <prvIPTimerStart>
            xReturn = pdTRUE;
 80097f0:	2301      	movs	r3, #1
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e001      	b.n	80097fa <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 80097f6:	2300      	movs	r3, #0
 80097f8:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 80097fa:	68fb      	ldr	r3, [r7, #12]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <FreeRTOS_NetworkDown>:
 * @brief Send a network down event to the IP-task. If it fails to post a message,
 *         the failure will be noted in the variable 'xNetworkDownEventPending'
 *         and later on a 'network-down' event, it will be executed.
 */
void FreeRTOS_NetworkDown( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
    static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800980a:	2300      	movs	r3, #0
 800980c:	607b      	str	r3, [r7, #4]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	4808      	ldr	r0, [pc, #32]	; (8009834 <FreeRTOS_NetworkDown+0x30>)
 8009812:	f000 f999 	bl	8009b48 <xSendEventStructToIPTask>
 8009816:	4603      	mov	r3, r0
 8009818:	2b01      	cmp	r3, #1
 800981a:	d003      	beq.n	8009824 <FreeRTOS_NetworkDown+0x20>
    {
        /* Could not send the message, so it is still pending. */
        xNetworkDownEventPending = pdTRUE;
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <FreeRTOS_NetworkDown+0x34>)
 800981e:	2201      	movs	r2, #1
 8009820:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        xNetworkDownEventPending = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009822:	e002      	b.n	800982a <FreeRTOS_NetworkDown+0x26>
        xNetworkDownEventPending = pdFALSE;
 8009824:	4b04      	ldr	r3, [pc, #16]	; (8009838 <FreeRTOS_NetworkDown+0x34>)
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	08016c4c 	.word	0x08016c4c
 8009838:	200265a0 	.word	0x200265a0

0800983c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8009846:	2100      	movs	r1, #0
 8009848:	6838      	ldr	r0, [r7, #0]
 800984a:	f008 f903 	bl	8011a54 <pxGetNetworkBufferWithDescriptor>
 800984e:	60f8      	str	r0, [r7, #12]

    if( pxNewBuffer != NULL )
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d017      	beq.n	8009886 <pxDuplicateNetworkBufferWithDescriptor+0x4a>
    {
        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	61da      	str	r2, [r3, #28]

        /* Copy the original packet information. */
        pxNewBuffer->ulIPAddress = pxNetworkBuffer->ulIPAddress;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695a      	ldr	r2, [r3, #20]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	8c1a      	ldrh	r2, [r3, #32]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	841a      	strh	r2, [r3, #32]
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	845a      	strh	r2, [r3, #34]	; 0x22
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6998      	ldr	r0, [r3, #24]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6999      	ldr	r1, [r3, #24]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	461a      	mov	r2, r3
 8009882:	f009 fac6 	bl	8012e12 <memcpy>
    }

    return pxNewBuffer;
 8009886:	68fb      	ldr	r3, [r7, #12]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	e011      	b.n	80098ca <prvPacketBuffer_to_NetworkBuffer+0x3a>
    }
    else
    {
        /* Obtain the network buffer from the zero copy pointer. */
        uxBuffer = ipPOINTER_CAST( uintptr_t, pvBuffer );
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60bb      	str	r3, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	3b0a      	subs	r3, #10
 80098b2:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f003 0303 	and.w	r3, r3, #3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <prvPacketBuffer_to_NetworkBuffer+0x36>
        {
            /* The following statement may trigger a:
             * warning: cast increases required alignment of target type [-Wcast-align].
             * It has been confirmed though that the alignment is suitable. */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	e001      	b.n	80098ca <prvPacketBuffer_to_NetworkBuffer+0x3a>
        }
        else
        {
            pxResult = NULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 80098ca:	68fb      	ldr	r3, [r7, #12]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 80098e0:	2100      	movs	r1, #0
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff ffd4 	bl	8009890 <prvPacketBuffer_to_NetworkBuffer>
 80098e8:	4603      	mov	r3, r0
    }
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
    return prvPacketBuffer_to_NetworkBuffer( pvBuffer, sizeof( UDPPacket_t ) );
 80098fa:	212a      	movs	r1, #42	; 0x2a
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff ffc7 	bl	8009890 <prvPacketBuffer_to_NetworkBuffer>
 8009902:	4603      	mov	r3, r0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <FreeRTOS_ReleaseUDPPayloadBuffer>:
 * @brief Release the UDP payload buffer.
 *
 * @param[in] pvBuffer: Pointer to the UDP buffer that is to be released.
 */
void FreeRTOS_ReleaseUDPPayloadBuffer( void const * pvBuffer )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
    vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff ffec 	bl	80098f2 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800991a:	4603      	mov	r3, r0
 800991c:	4618      	mov	r0, r3
 800991e:	f008 f913 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
}
 8009922:	bf00      	nop
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <FreeRTOS_IPInit>:
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800992c:	b5b0      	push	{r4, r5, r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af02      	add	r7, sp, #8
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFALSE;
 800993a:	2300      	movs	r3, #0
 800993c:	617b      	str	r3, [r7, #20]

    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800993e:	f000 fd65 	bl	800a40c <xIPIsNetworkTaskReady>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d004      	beq.n	8009952 <FreeRTOS_IPInit+0x26>
 8009948:	4969      	ldr	r1, [pc, #420]	; (8009af0 <FreeRTOS_IPInit+0x1c4>)
 800994a:	f44f 608e 	mov.w	r0, #1136	; 0x470
 800994e:	f7f7 f8be 	bl	8000ace <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 8009952:	4b68      	ldr	r3, [pc, #416]	; (8009af4 <FreeRTOS_IPInit+0x1c8>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d004      	beq.n	8009964 <FreeRTOS_IPInit+0x38>
 800995a:	4965      	ldr	r1, [pc, #404]	; (8009af0 <FreeRTOS_IPInit+0x1c4>)
 800995c:	f240 4071 	movw	r0, #1137	; 0x471
 8009960:	f7f7 f8b5 	bl	8000ace <vAssertCalled>
    configASSERT( xIPTaskHandle == NULL );
 8009964:	4b64      	ldr	r3, [pc, #400]	; (8009af8 <FreeRTOS_IPInit+0x1cc>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <FreeRTOS_IPInit+0x4a>
 800996c:	4960      	ldr	r1, [pc, #384]	; (8009af0 <FreeRTOS_IPInit+0x1c4>)
 800996e:	f240 4072 	movw	r0, #1138	; 0x472
 8009972:	f7f7 f8ac 	bl	8000ace <vAssertCalled>
            configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
            configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
        }
    #endif /* ifndef _lint */
    /* Attempt to create the queue used to communicate with the IP task. */
    xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8009976:	2200      	movs	r2, #0
 8009978:	2108      	movs	r1, #8
 800997a:	2041      	movs	r0, #65	; 0x41
 800997c:	f7fb faf4 	bl	8004f68 <xQueueGenericCreate>
 8009980:	4602      	mov	r2, r0
 8009982:	4b5c      	ldr	r3, [pc, #368]	; (8009af4 <FreeRTOS_IPInit+0x1c8>)
 8009984:	601a      	str	r2, [r3, #0]
    configASSERT( xNetworkEventQueue != NULL );
 8009986:	4b5b      	ldr	r3, [pc, #364]	; (8009af4 <FreeRTOS_IPInit+0x1c8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d104      	bne.n	8009998 <FreeRTOS_IPInit+0x6c>
 800998e:	4958      	ldr	r1, [pc, #352]	; (8009af0 <FreeRTOS_IPInit+0x1c4>)
 8009990:	f240 4089 	movw	r0, #1161	; 0x489
 8009994:	f7f7 f89b 	bl	8000ace <vAssertCalled>

    if( xNetworkEventQueue != NULL )
 8009998:	4b56      	ldr	r3, [pc, #344]	; (8009af4 <FreeRTOS_IPInit+0x1c8>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 809f 	beq.w	8009ae0 <FreeRTOS_IPInit+0x1b4>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                /* A queue registry is normally used to assist a kernel aware
                 * debugger.  If one is in use then it will be helpful for the debugger
                 * to show information about the network event queue. */
                vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 80099a2:	4b54      	ldr	r3, [pc, #336]	; (8009af4 <FreeRTOS_IPInit+0x1c8>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4955      	ldr	r1, [pc, #340]	; (8009afc <FreeRTOS_IPInit+0x1d0>)
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fc f853 	bl	8005a54 <vQueueAddToRegistry>
            }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 80099ae:	f007 ffc7 	bl	8011940 <xNetworkBuffersInitialise>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	f040 8087 	bne.w	8009ac8 <FreeRTOS_IPInit+0x19c>
        {
            /* Store the local IP and MAC address. */
            xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3303      	adds	r3, #3
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	061a      	lsls	r2, r3, #24
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	3302      	adds	r3, #2
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	041b      	lsls	r3, r3, #16
 80099ca:	431a      	orrs	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3301      	adds	r3, #1
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	021b      	lsls	r3, r3, #8
 80099d4:	4313      	orrs	r3, r2
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	7812      	ldrb	r2, [r2, #0]
 80099da:	4313      	orrs	r3, r2
 80099dc:	4a48      	ldr	r2, [pc, #288]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 80099de:	6013      	str	r3, [r2, #0]
            xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	3303      	adds	r3, #3
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	061a      	lsls	r2, r3, #24
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	3302      	adds	r3, #2
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	041b      	lsls	r3, r3, #16
 80099f0:	431a      	orrs	r2, r3
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	3301      	adds	r3, #1
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	4313      	orrs	r3, r2
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	7812      	ldrb	r2, [r2, #0]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	4a3f      	ldr	r2, [pc, #252]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a04:	6053      	str	r3, [r2, #4]
            xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3303      	adds	r3, #3
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	061a      	lsls	r2, r3, #24
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3302      	adds	r3, #2
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	041b      	lsls	r3, r3, #16
 8009a16:	431a      	orrs	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	021b      	lsls	r3, r3, #8
 8009a20:	4313      	orrs	r3, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	4a35      	ldr	r2, [pc, #212]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a2a:	6093      	str	r3, [r2, #8]
            xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	3303      	adds	r3, #3
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	061a      	lsls	r2, r3, #24
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	3302      	adds	r3, #2
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	041b      	lsls	r3, r3, #16
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	3301      	adds	r3, #1
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	4313      	orrs	r3, r2
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	7812      	ldrb	r2, [r2, #0]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	4a2c      	ldr	r2, [pc, #176]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a50:	60d3      	str	r3, [r2, #12]
            xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 8009a52:	4b2b      	ldr	r3, [pc, #172]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	4b2a      	ldr	r3, [pc, #168]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	43db      	mvns	r3, r3
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	4a28      	ldr	r2, [pc, #160]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a60:	6113      	str	r3, [r2, #16]

            ( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 8009a62:	4a28      	ldr	r2, [pc, #160]	; (8009b04 <FreeRTOS_IPInit+0x1d8>)
 8009a64:	4b26      	ldr	r3, [pc, #152]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a66:	4614      	mov	r4, r2
 8009a68:	461d      	mov	r5, r3
 8009a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	6023      	str	r3, [r4, #0]
                    *ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
                }
            #else
                {
                    /* The IP address is set from the value passed in. */
                    *ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 8009a72:	4b23      	ldr	r3, [pc, #140]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a24      	ldr	r2, [pc, #144]	; (8009b08 <FreeRTOS_IPInit+0x1dc>)
 8009a78:	6153      	str	r3, [r2, #20]

                    /* Added to prevent ARP flood to gateway.  Ensure the
                    * gateway is on the same subnet as the IP address. */
                    if( xNetworkAddressing.ulGatewayAddress != 0UL )
 8009a7a:	4b21      	ldr	r3, [pc, #132]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00e      	beq.n	8009aa0 <FreeRTOS_IPInit+0x174>
                    {
                        configASSERT( ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) == ( xNetworkAddressing.ulGatewayAddress & xNetworkAddressing.ulNetMask ) );
 8009a82:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <FreeRTOS_IPInit+0x1dc>)
 8009a84:	695a      	ldr	r2, [r3, #20]
 8009a86:	4b1e      	ldr	r3, [pc, #120]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	405a      	eors	r2, r3
 8009a8c:	4b1c      	ldr	r3, [pc, #112]	; (8009b00 <FreeRTOS_IPInit+0x1d4>)
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	4013      	ands	r3, r2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d004      	beq.n	8009aa0 <FreeRTOS_IPInit+0x174>
 8009a96:	4916      	ldr	r1, [pc, #88]	; (8009af0 <FreeRTOS_IPInit+0x1c4>)
 8009a98:	f240 40af 	movw	r0, #1199	; 0x4af
 8009a9c:	f7f7 f817 	bl	8000ace <vAssertCalled>
                }
            #endif /* ipconfigUSE_DHCP == 1 */

            /* The MAC address is stored in the start of the default packet
             * header fragment, which is used when sending UDP packets. */
            ( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009aa0:	2206      	movs	r2, #6
 8009aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa4:	4818      	ldr	r0, [pc, #96]	; (8009b08 <FreeRTOS_IPInit+0x1dc>)
 8009aa6:	f009 f9b4 	bl	8012e12 <memcpy>

            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009aaa:	f000 fdb3 	bl	800a614 <vNetworkSocketsInit>

            /* Create the task that processes Ethernet and stack events. */
            xReturn = xTaskCreate( prvIPTask,
 8009aae:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <FreeRTOS_IPInit+0x1cc>)
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f240 228a 	movw	r2, #650	; 0x28a
 8009abc:	4913      	ldr	r1, [pc, #76]	; (8009b0c <FreeRTOS_IPInit+0x1e0>)
 8009abe:	4814      	ldr	r0, [pc, #80]	; (8009b10 <FreeRTOS_IPInit+0x1e4>)
 8009ac0:	f7fc f8a6 	bl	8005c10 <xTaskCreate>
 8009ac4:	6178      	str	r0, [r7, #20]
 8009ac6:	e00e      	b.n	8009ae6 <FreeRTOS_IPInit+0x1ba>
                                   ipconfigIP_TASK_PRIORITY,
                                   &( xIPTaskHandle ) );
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n" ) );
 8009ac8:	4812      	ldr	r0, [pc, #72]	; (8009b14 <FreeRTOS_IPInit+0x1e8>)
 8009aca:	f7f6 ffd7 	bl	8000a7c <vLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <FreeRTOS_IPInit+0x1c8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fb fe6e 	bl	80057b4 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009ad8:	4b06      	ldr	r3, [pc, #24]	; (8009af4 <FreeRTOS_IPInit+0x1c8>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	e002      	b.n	8009ae6 <FreeRTOS_IPInit+0x1ba>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n" ) );
 8009ae0:	480d      	ldr	r0, [pc, #52]	; (8009b18 <FreeRTOS_IPInit+0x1ec>)
 8009ae2:	f7f6 ffcb 	bl	8000a7c <vLoggingPrintf>
    }

    return xReturn;
 8009ae6:	697b      	ldr	r3, [r7, #20]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bdb0      	pop	{r4, r5, r7, pc}
 8009af0:	080153e8 	.word	0x080153e8
 8009af4:	20026570 	.word	0x20026570
 8009af8:	200265a4 	.word	0x200265a4
 8009afc:	08015418 	.word	0x08015418
 8009b00:	20026578 	.word	0x20026578
 8009b04:	2002658c 	.word	0x2002658c
 8009b08:	20016918 	.word	0x20016918
 8009b0c:	08015420 	.word	0x08015420
 8009b10:	08009445 	.word	0x08009445
 8009b14:	08015428 	.word	0x08015428
 8009b18:	08015460 	.word	0x08015460

08009b1c <xSendEventToIPTask>:
 * @param[in] eEvent: The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009b32:	f107 030c 	add.w	r3, r7, #12
 8009b36:	6979      	ldr	r1, [r7, #20]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 f805 	bl	8009b48 <xSendEventStructToIPTask>
 8009b3e:	4603      	mov	r3, r0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8009b56:	f000 fc59 	bl	800a40c <xIPIsNetworkTaskReady>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d107      	bne.n	8009b70 <xSendEventStructToIPTask+0x28>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f993 3000 	ldrsb.w	r3, [r3]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	e037      	b.n	8009be0 <xSendEventStructToIPTask+0x98>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009b70:	2301      	movs	r3, #1
 8009b72:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
            {
                if( pxEvent->eEventType == eTCPTimerEvent )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f993 3000 	ldrsb.w	r3, [r3]
 8009b7a:	2b06      	cmp	r3, #6
 8009b7c:	d10e      	bne.n	8009b9c <xSendEventStructToIPTask+0x54>
                {
                    /* TCP timer events are sent to wake the timer task when
                     * xTCPTimer has expired, but there is no point sending them if the
                     * IP task is already awake processing other message. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009b7e:	4a1b      	ldr	r2, [pc, #108]	; (8009bec <xSendEventStructToIPTask+0xa4>)
 8009b80:	7813      	ldrb	r3, [r2, #0]
 8009b82:	f043 0302 	orr.w	r3, r3, #2
 8009b86:	7013      	strb	r3, [r2, #0]

                    if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8009b88:	4b19      	ldr	r3, [pc, #100]	; (8009bf0 <xSendEventStructToIPTask+0xa8>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fb fdf7 	bl	8005780 <uxQueueMessagesWaiting>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d001      	beq.n	8009b9c <xSendEventStructToIPTask+0x54>
                    {
                        /* Not actually going to send the message but this is not a
                         * failure as the message didn't need to be sent. */
                        xSendMessage = pdFALSE;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	613b      	str	r3, [r7, #16]
                    }
                }
            }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d01c      	beq.n	8009bdc <xSendEventStructToIPTask+0x94>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009ba2:	f7ff fd2b 	bl	80095fc <xIsCallingFromIPTask>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d104      	bne.n	8009bb6 <xSendEventStructToIPTask+0x6e>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <xSendEventStructToIPTask+0x6e>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8009bb6:	4b0e      	ldr	r3, [pc, #56]	; (8009bf0 <xSendEventStructToIPTask+0xa8>)
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	f7fb fa68 	bl	8005094 <xQueueGenericSend>
 8009bc4:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d109      	bne.n	8009be0 <xSendEventStructToIPTask+0x98>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f993 3000 	ldrsb.w	r3, [r3]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4807      	ldr	r0, [pc, #28]	; (8009bf4 <xSendEventStructToIPTask+0xac>)
 8009bd6:	f7f6 ff51 	bl	8000a7c <vLoggingPrintf>
 8009bda:	e001      	b.n	8009be0 <xSendEventStructToIPTask+0x98>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009be0:	697b      	ldr	r3, [r7, #20]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	200265c4 	.word	0x200265c4
 8009bf0:	20026570 	.word	0x20026570
 8009bf4:	0801549c 	.word	0x0801549c

08009bf8 <prvProcessNetworkDownEvent>:

/**
 * @brief Process a 'Network down' event and complete required processing.
 */
static void prvProcessNetworkDownEvent( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	af00      	add	r7, sp, #0
    /* Stop the ARP timer while there is no network. */
    xARPTimer.bActive = pdFALSE_UNSIGNED;
 8009bfc:	4a10      	ldr	r2, [pc, #64]	; (8009c40 <prvProcessNetworkDownEvent+0x48>)
 8009bfe:	7813      	ldrb	r3, [r2, #0]
 8009c00:	f36f 0300 	bfc	r3, #0, #1
 8009c04:	7013      	strb	r3, [r2, #0]
            static BaseType_t xCallEventHook = pdFALSE;

            /* The first network down event is generated by the IP stack itself to
             * initialise the network hardware, so do not call the network down event
             * the first time through. */
            if( xCallEventHook == pdTRUE )
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <prvProcessNetworkDownEvent+0x4c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d102      	bne.n	8009c14 <prvProcessNetworkDownEvent+0x1c>
            {
                vApplicationIPNetworkEventHook( eNetworkDown );
 8009c0e:	2001      	movs	r0, #1
 8009c10:	f7f6 fffa 	bl	8000c08 <vApplicationIPNetworkEventHook>
            }

            xCallEventHook = pdTRUE;
 8009c14:	4b0b      	ldr	r3, [pc, #44]	; (8009c44 <prvProcessNetworkDownEvent+0x4c>)
 8009c16:	2201      	movs	r2, #1
 8009c18:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigUSE_NETWORK_EVENT_HOOK == 1 */

    /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122,
     * treat network down as a "delivery problem" and flush the ARP cache for this
     * interface. */
    FreeRTOS_ClearARP();
 8009c1a:	f7fe fbc7 	bl	80083ac <FreeRTOS_ClearARP>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */
    if( xNetworkInterfaceInitialise() != pdPASS )
 8009c1e:	f006 fd65 	bl	80106ec <xNetworkInterfaceInitialise>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d006      	beq.n	8009c36 <prvProcessNetworkDownEvent+0x3e>
    {
        /* Ideally the network interface initialisation function will only
         * return when the network is available.  In case this is not the case,
         * wait a while before retrying the initialisation. */
        vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 8009c28:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009c2c:	f7fc f948 	bl	8005ec0 <vTaskDelay>
        FreeRTOS_NetworkDown();
 8009c30:	f7ff fde8 	bl	8009804 <FreeRTOS_NetworkDown>
                /* Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls();
            }
        #endif
    }
}
 8009c34:	e001      	b.n	8009c3a <prvProcessNetworkDownEvent+0x42>
                vIPNetworkUpCalls();
 8009c36:	f000 f807 	bl	8009c48 <vIPNetworkUpCalls>
}
 8009c3a:	bf00      	nop
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	200265b0 	.word	0x200265b0
 8009c44:	200265dc 	.word	0x200265dc

08009c48 <vIPNetworkUpCalls>:

/**
 * @brief Perform all the required tasks when the network gets connected.
 */
void vIPNetworkUpCalls( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
    xNetworkUp = pdTRUE;
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <vIPNetworkUpCalls+0x20>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	601a      	str	r2, [r3, #0]

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8009c52:	2000      	movs	r0, #0
 8009c54:	f7f6 ffd8 	bl	8000c08 <vApplicationIPNetworkEventHook>
            vDNSInitialise();
        }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8009c58:	f242 7110 	movw	r1, #10000	; 0x2710
 8009c5c:	4803      	ldr	r0, [pc, #12]	; (8009c6c <vIPNetworkUpCalls+0x24>)
 8009c5e:	f7ff fd85 	bl	800976c <prvIPTimerReload>
}
 8009c62:	bf00      	nop
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	200265ac 	.word	0x200265ac
 8009c6c:	200265b0 	.word	0x200265b0

08009c70 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer: the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73fb      	strb	r3, [r7, #15]

    configASSERT( pxNetworkBuffer != NULL );
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d104      	bne.n	8009c8c <prvProcessEthernetPacket+0x1c>
 8009c82:	492c      	ldr	r1, [pc, #176]	; (8009d34 <prvProcessEthernetPacket+0xc4>)
 8009c84:	f240 607d 	movw	r0, #1661	; 0x67d
 8009c88:	f7f6 ff21 	bl	8000ace <vAssertCalled>

    iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    /* Interpret the Ethernet frame. */
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	2b0d      	cmp	r3, #13
 8009c92:	d939      	bls.n	8009d08 <prvProcessEthernetPacket+0x98>
    {
        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009c94:	2301      	movs	r3, #1
 8009c96:	73fb      	strb	r3, [r7, #15]

        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */
        pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff fb58 	bl	8009352 <vCastConstPointerTo_EthernetHeader_t>
 8009ca2:	60b8      	str	r0, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	899b      	ldrh	r3, [r3, #12]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	2b08      	cmp	r3, #8
 8009cac:	d015      	beq.n	8009cda <prvProcessEthernetPacket+0x6a>
 8009cae:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8009cb2:	d126      	bne.n	8009d02 <prvProcessEthernetPacket+0x92>
            {
                case ipARP_FRAME_TYPE:

                    /* The Ethernet frame contains an ARP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	2b29      	cmp	r3, #41	; 0x29
 8009cba:	d90b      	bls.n	8009cd4 <prvProcessEthernetPacket+0x64>
                    {
                        eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff fb51 	bl	8009368 <vCastPointerTo_ARPPacket_t>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fd ffff 	bl	8007ccc <eARPProcessPacket>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009cd2:	e01a      	b.n	8009d0a <prvProcessEthernetPacket+0x9a>
                        eReturned = eReleaseBuffer;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73fb      	strb	r3, [r7, #15]
                    break;
 8009cd8:	e017      	b.n	8009d0a <prvProcessEthernetPacket+0x9a>

                case ipIPv4_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	2b21      	cmp	r3, #33	; 0x21
 8009ce0:	d90c      	bls.n	8009cfc <prvProcessEthernetPacket+0x8c>
                    {
                        eReturned = prvProcessIPPacket( ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff fb49 	bl	800937e <vCastPointerTo_IPPacket_t>
 8009cec:	4603      	mov	r3, r0
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f921 	bl	8009f38 <prvProcessIPPacket>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009cfa:	e006      	b.n	8009d0a <prvProcessEthernetPacket+0x9a>
                        eReturned = eReleaseBuffer;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73fb      	strb	r3, [r7, #15]
                    break;
 8009d00:	e003      	b.n	8009d0a <prvProcessEthernetPacket+0x9a>

                default:
                    /* No other packet types are handled.  Nothing to do. */
                    eReturned = eReleaseBuffer;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
                    break;
 8009d06:	e000      	b.n	8009d0a <prvProcessEthernetPacket+0x9a>
            }
        }
 8009d08:	bf00      	nop
    }

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d002      	beq.n	8009d16 <prvProcessEthernetPacket+0xa6>
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d009      	beq.n	8009d28 <prvProcessEthernetPacket+0xb8>
 8009d14:	e004      	b.n	8009d20 <prvProcessEthernetPacket+0xb0>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009d16:	2101      	movs	r1, #1
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb0d 	bl	800a338 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009d1e:	e004      	b.n	8009d2a <prvProcessEthernetPacket+0xba>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f007 ff11 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009d26:	e000      	b.n	8009d2a <prvProcessEthernetPacket+0xba>
            break;
 8009d28:	bf00      	nop
    }
}
 8009d2a:	bf00      	nop
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	080153e8 	.word	0x080153e8

08009d38 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress: The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	061a      	lsls	r2, r3, #24
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	021b      	lsls	r3, r3, #8
 8009d48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	0a1b      	lsrs	r3, r3, #8
 8009d52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d56:	431a      	orrs	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	0e1b      	lsrs	r3, r3, #24
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8009d66:	d306      	bcc.n	8009d76 <xIsIPv4Multicast+0x3e>
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8009d6e:	d202      	bcs.n	8009d76 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 8009d70:	2301      	movs	r3, #1
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	e001      	b.n	8009d7a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 8009d76:	2300      	movs	r3, #0
 8009d78:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress: IP address.
 * @param[out] pxMACAddress: Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	061a      	lsls	r2, r3, #24
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	021b      	lsls	r3, r3, #8
 8009d9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	0a1b      	lsrs	r3, r3, #8
 8009da4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009da8:	431a      	orrs	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	0e1b      	lsrs	r3, r3, #24
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2201      	movs	r2, #1
 8009db6:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	225e      	movs	r2, #94	; 0x5e
 8009dc2:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	0c1b      	lsrs	r3, r3, #16
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	0a1b      	lsrs	r3, r3, #8
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	715a      	strb	r2, [r3, #5]
}
 8009de6:	bf00      	nop
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
	...

08009df4 <prvAllowIPPacket>:
 * @return Whether the packet should be processed or dropped.
 */
static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
                                                  const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b08a      	sub	sp, #40	; 0x28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009e00:	2301      	movs	r3, #1
 8009e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	330e      	adds	r3, #14
 8009e0a:	623b      	str	r3, [r7, #32]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
        {
            /* In systems with a very small amount of RAM, it might be advantageous
             * to have incoming messages checked earlier, by the network card driver.
             * This method may decrease the usage of sparse network buffers. */
            uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	61fb      	str	r3, [r7, #28]

            /* Ensure that the incoming packet is not fragmented (only outgoing
             * packets can be fragmented) as these are the only handled IP frames
             * currently. */
            if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	88db      	ldrh	r3, [r3, #6]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f64f 730f 	movw	r3, #65295	; 0xff0f
 8009e1e:	4013      	ands	r3, r2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <prvAllowIPPacket+0x38>
            {
                /* Can not handle, fragmented packet. */
                eReturn = eReleaseBuffer;
 8009e24:	2300      	movs	r3, #0
 8009e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e2a:	e024      	b.n	8009e76 <prvAllowIPPacket+0x82>
            }

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b44      	cmp	r3, #68	; 0x44
 8009e32:	d903      	bls.n	8009e3c <prvAllowIPPacket+0x48>
                     ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	781b      	ldrb	r3, [r3, #0]
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8009e38:	2b4f      	cmp	r3, #79	; 0x4f
 8009e3a:	d903      	bls.n	8009e44 <prvAllowIPPacket+0x50>
            {
                /* Can not handle, unknown or invalid header version. */
                eReturn = eReleaseBuffer;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e42:	e018      	b.n	8009e76 <prvAllowIPPacket+0x82>
            }
            /* Is the packet for this IP address? */
            else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 8009e44:	4b37      	ldr	r3, [pc, #220]	; (8009f24 <prvAllowIPPacket+0x130>)
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	69fa      	ldr	r2, [r7, #28]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d013      	beq.n	8009e76 <prvAllowIPPacket+0x82>
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e54:	d00f      	beq.n	8009e76 <prvAllowIPPacket+0x82>
                     /* Is it the global broadcast address 255.255.255.255 ? */
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
                     /* Is it a specific broadcast address 192.168.1.255 ? */
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8009e56:	4b34      	ldr	r3, [pc, #208]	; (8009f28 <prvAllowIPPacket+0x134>)
 8009e58:	691b      	ldr	r3, [r3, #16]
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d00a      	beq.n	8009e76 <prvAllowIPPacket+0x82>
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	4a32      	ldr	r2, [pc, #200]	; (8009f2c <prvAllowIPPacket+0x138>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d006      	beq.n	8009e76 <prvAllowIPPacket+0x82>
                     #if ( ipconfigUSE_LLMNR == 1 )
                         /* Is it the LLMNR multicast address? */
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
                     #endif
                     /* Or (during DHCP negotiation) we have no IP-address yet? */
                     ( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 8009e68:	4b2e      	ldr	r3, [pc, #184]	; (8009f24 <prvAllowIPPacket+0x130>)
 8009e6a:	695b      	ldr	r3, [r3, #20]
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <prvAllowIPPacket+0x82>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 8009e70:	2300      	movs	r3, #0
 8009e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
        }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
        {
            if( eReturn == eProcessBuffer )
 8009e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d10d      	bne.n	8009e9a <prvAllowIPPacket+0xa6>
            {
                if( xCheckSizeFields( ( uint8_t * ) ( pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer->xDataLength ) != pdPASS )
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	699a      	ldr	r2, [r3, #24]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	4619      	mov	r1, r3
 8009e88:	4610      	mov	r0, r2
 8009e8a:	f000 f9bb 	bl	800a204 <xCheckSizeFields>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d002      	beq.n	8009e9a <prvAllowIPPacket+0xa6>
                {
                    /* Some of the length checks were not successful. */
                    eReturn = eReleaseBuffer;
 8009e94:	2300      	movs	r3, #0
 8009e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Check if this is a UDP packet without a checksum. */
                    if( eReturn == eProcessBuffer )
 8009e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d13a      	bne.n	8009f18 <prvAllowIPPacket+0x124>
                        /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                         * and so UDP packets carrying a protocol checksum of 0, will
                         * be dropped. */

                        /* Identify the next protocol. */
                        if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	7ddb      	ldrb	r3, [r3, #23]
 8009ea6:	2b11      	cmp	r3, #17
 8009ea8:	d136      	bne.n	8009f18 <prvAllowIPPacket+0x124>
                        {
                            ProtocolPacket_t * pxProtPack;
                            const uint16_t * pusChecksum;

                            /* pxProtPack will point to the offset were the protocols begin. */
                            pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pxNetworkBuffer->pucEthernetBuffer[ uxHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3b14      	subs	r3, #20
 8009eb2:	4413      	add	r3, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7ff fa8e 	bl	80093d6 <vCastPointerTo_ProtocolPacket_t>
 8009eba:	61b8      	str	r0, [r7, #24]
                            pusChecksum = ( const uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	3328      	adds	r3, #40	; 0x28
 8009ec0:	617b      	str	r3, [r7, #20]

                            if( *pusChecksum == ( uint16_t ) 0U )
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d126      	bne.n	8009f18 <prvAllowIPPacket+0x124>
                            {
                                #if ( ipconfigHAS_PRINTF != 0 )
                                    {
                                        static BaseType_t xCount = 0;

                                        if( xCount < 5 )
 8009eca:	4b19      	ldr	r3, [pc, #100]	; (8009f30 <prvAllowIPPacket+0x13c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	dc1f      	bgt.n	8009f12 <prvAllowIPPacket+0x11e>
                                        {
                                            FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009ed8:	061a      	lsls	r2, r3, #24
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009ee0:	021b      	lsls	r3, r3, #8
 8009ee2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009efc:	0e1b      	lsrs	r3, r3, #24
 8009efe:	4313      	orrs	r3, r2
 8009f00:	4619      	mov	r1, r3
 8009f02:	480c      	ldr	r0, [pc, #48]	; (8009f34 <prvAllowIPPacket+0x140>)
 8009f04:	f7f6 fdba 	bl	8000a7c <vLoggingPrintf>
                                                               FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                            xCount++;
 8009f08:	4b09      	ldr	r3, [pc, #36]	; (8009f30 <prvAllowIPPacket+0x13c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	4a08      	ldr	r2, [pc, #32]	; (8009f30 <prvAllowIPPacket+0x13c>)
 8009f10:	6013      	str	r3, [r2, #0]
                                        }
                                    }
                                #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                                /* Protocol checksum not accepted. */
                                eReturn = eReleaseBuffer;
 8009f12:	2300      	movs	r3, #0
 8009f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* to avoid warning unused parameters */
            ( void ) uxHeaderLength;
        }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 8009f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3728      	adds	r7, #40	; 0x28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	20016918 	.word	0x20016918
 8009f28:	20026578 	.word	0x20026578
 8009f2c:	fc0000e0 	.word	0xfc0000e0
 8009f30:	200265e0 	.word	0x200265e0
 8009f34:	080154c8 	.word	0x080154c8

08009f38 <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b090      	sub	sp, #64	; 0x40
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	330e      	adds	r3, #14
 8009f46:	63bb      	str	r3, [r7, #56]	; 0x38
    size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	637b      	str	r3, [r7, #52]	; 0x34
    UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009f56:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t ucProtocol;

    /* Bound the calculated header length: take away the Ethernet header size,
     * then check if the IP header is claiming to be longer than the remaining
     * total packet size. Also check for minimal header field length. */
    if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	3b0e      	subs	r3, #14
 8009f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d802      	bhi.n	8009f6a <prvProcessIPPacket+0x32>
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	2b13      	cmp	r3, #19
 8009f68:	d803      	bhi.n	8009f72 <prvProcessIPPacket+0x3a>
        ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
    {
        eReturn = eReleaseBuffer;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f70:	e0cb      	b.n	800a10a <prvProcessIPPacket+0x1d2>
    }
    else
    {
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	7ddb      	ldrb	r3, [r3, #23]
 8009f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        /* Check if the IP headers are acceptable and if it has our destination. */
        eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7ff ff38 	bl	8009df4 <prvAllowIPPacket>
 8009f84:	4603      	mov	r3, r0
 8009f86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

        if( eReturn == eProcessBuffer )
 8009f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	f040 80b8 	bne.w	800a104 <prvProcessIPPacket+0x1cc>
        {
            /* Are there IP-options. */
            if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	2b14      	cmp	r3, #20
 8009f98:	d927      	bls.n	8009fea <prvProcessIPPacket+0xb2>
                 * The extra space is used for IP-options. */
                #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
                    {
                        /* All structs of headers expect a IP header size of 20 bytes
                         * IP header options were included, we'll ignore them and cut them out. */
                        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	3b14      	subs	r3, #20
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
                        /* From: the previous start of UDP/ICMP/TCP data. */
                        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	699a      	ldr	r2, [r3, #24]
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa6:	330e      	adds	r3, #14
 8009fa8:	4413      	add	r3, r2
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
                        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
                        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	3322      	adds	r3, #34	; 0x22
 8009fb2:	623b      	str	r3, [r7, #32]
                        /* How many: total length minus the options and the lower headers. */
                        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	3b22      	subs	r3, #34	; 0x22
 8009fbe:	61fb      	str	r3, [r7, #28]

                        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fc4:	6a38      	ldr	r0, [r7, #32]
 8009fc6:	f008 ff2f 	bl	8012e28 <memmove>
                        pxNetworkBuffer->xDataLength -= optlen;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	69da      	ldr	r2, [r3, #28]
 8009fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd0:	1ad2      	subs	r2, r2, r3
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	61da      	str	r2, [r3, #28]

                        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
                        pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	f023 030f 	bic.w	r3, r3, #15
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f043 0305 	orr.w	r3, r3, #5
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	701a      	strb	r2, [r3, #0]
                        eReturn = eReleaseBuffer;
                    }
                #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */
            }

            if( eReturn != eReleaseBuffer )
 8009fea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 8088 	beq.w	800a104 <prvProcessIPPacket+0x1cc>
            {
                /* Add the IP and MAC addresses to the ARP table if they are not
                 * already there - otherwise refresh the age of the existing
                 * entry. */
                if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ff8:	2b11      	cmp	r3, #17
 8009ffa:	d007      	beq.n	800a00c <prvProcessIPPacket+0xd4>
                    /* Refresh the ARP cache with the IP/MAC-address of the received
                     *  packet. For UDP packets, this will be done later in
                     *  xProcessReceivedUDPPacket(), as soon as it's know that the message
                     *  will be handled.  This will prevent the ARP cache getting
                     *  overwritten with the IP address of useless broadcast packets. */
                    vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	1d9a      	adds	r2, r3, #6
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f7fd fef2 	bl	8007df0 <vARPRefreshCacheEntry>
                }

                switch( ucProtocol )
 800a00c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a010:	2b06      	cmp	r3, #6
 800a012:	d068      	beq.n	800a0e6 <prvProcessIPPacket+0x1ae>
 800a014:	2b11      	cmp	r3, #17
 800a016:	d01d      	beq.n	800a054 <prvProcessIPPacket+0x11c>
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d000      	beq.n	800a01e <prvProcessIPPacket+0xe6>
                                xProcessedTCPMessage++;
                                break;
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        break;
 800a01c:	e075      	b.n	800a10a <prvProcessIPPacket+0x1d2>
                            if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	69db      	ldr	r3, [r3, #28]
 800a022:	2b29      	cmp	r3, #41	; 0x29
 800a024:	d912      	bls.n	800a04c <prvProcessIPPacket+0x114>
                                ICMPPacket_t * pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff f9bd 	bl	80093aa <vCastPointerTo_ICMPPacket_t>
 800a030:	60b8      	str	r0, [r7, #8]
                                if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	691a      	ldr	r2, [r3, #16]
 800a036:	4b38      	ldr	r3, [pc, #224]	; (800a118 <prvProcessIPPacket+0x1e0>)
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d164      	bne.n	800a108 <prvProcessIPPacket+0x1d0>
                                    eReturn = prvProcessICMPPacket( pxICMPPacket );
 800a03e:	68b8      	ldr	r0, [r7, #8]
 800a040:	f000 f8c6 	bl	800a1d0 <prvProcessICMPPacket>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 800a04a:	e05d      	b.n	800a108 <prvProcessIPPacket+0x1d0>
                                eReturn = eReleaseBuffer;
 800a04c:	2300      	movs	r3, #0
 800a04e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        break;
 800a052:	e059      	b.n	800a108 <prvProcessIPPacket+0x1d0>
                           const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff f9b1 	bl	80093c0 <vCastConstPointerTo_UDPPacket_t>
 800a05e:	61b8      	str	r0, [r7, #24]
                           usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength );
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a064:	b29b      	uxth	r3, r3
 800a066:	021b      	lsls	r3, r3, #8
 800a068:	b21a      	sxth	r2, r3
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a06e:	b29b      	uxth	r3, r3
 800a070:	0a1b      	lsrs	r3, r3, #8
 800a072:	b29b      	uxth	r3, r3
 800a074:	b21b      	sxth	r3, r3
 800a076:	4313      	orrs	r3, r2
 800a078:	b21b      	sxth	r3, r3
 800a07a:	82fb      	strh	r3, [r7, #22]
                           if( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	2b29      	cmp	r3, #41	; 0x29
 800a082:	d92a      	bls.n	800a0da <prvProcessIPPacket+0x1a2>
 800a084:	8afb      	ldrh	r3, [r7, #22]
 800a086:	2b07      	cmp	r3, #7
 800a088:	d927      	bls.n	800a0da <prvProcessIPPacket+0x1a2>
                               uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	3b2a      	subs	r3, #42	; 0x2a
 800a090:	613b      	str	r3, [r7, #16]
                               uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 800a092:	8afb      	ldrh	r3, [r7, #22]
 800a094:	3b08      	subs	r3, #8
 800a096:	60fb      	str	r3, [r7, #12]
                               if( uxPayloadSize_1 > uxPayloadSize_2 )
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d904      	bls.n	800a0aa <prvProcessIPPacket+0x172>
                                   pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	61da      	str	r2, [r3, #28]
                               pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	841a      	strh	r2, [r3, #32]
                               pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	615a      	str	r2, [r3, #20]
                               if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6838      	ldr	r0, [r7, #0]
 800a0c8:	f006 f9ca 	bl	8010460 <xProcessReceivedUDPPacket>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d107      	bne.n	800a0e2 <prvProcessIPPacket+0x1aa>
                                   eReturn = eFrameConsumed;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                           {
 800a0d8:	e003      	b.n	800a0e2 <prvProcessIPPacket+0x1aa>
                               eReturn = eReleaseBuffer;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                       break;
 800a0e0:	e013      	b.n	800a10a <prvProcessIPPacket+0x1d2>
                           {
 800a0e2:	bf00      	nop
                       break;
 800a0e4:	e011      	b.n	800a10a <prvProcessIPPacket+0x1d2>
                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a0e6:	6838      	ldr	r0, [r7, #0]
 800a0e8:	f004 fb4a 	bl	800e780 <xProcessReceivedTCPPacket>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d102      	bne.n	800a0f8 <prvProcessIPPacket+0x1c0>
                                    eReturn = eFrameConsumed;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                xProcessedTCPMessage++;
 800a0f8:	4b08      	ldr	r3, [pc, #32]	; (800a11c <prvProcessIPPacket+0x1e4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	4a07      	ldr	r2, [pc, #28]	; (800a11c <prvProcessIPPacket+0x1e4>)
 800a100:	6013      	str	r3, [r2, #0]
                                break;
 800a102:	e002      	b.n	800a10a <prvProcessIPPacket+0x1d2>
                }
            }
 800a104:	bf00      	nop
 800a106:	e000      	b.n	800a10a <prvProcessIPPacket+0x1d2>
                        break;
 800a108:	bf00      	nop
        }
    }

    return eReturn;
 800a10a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3740      	adds	r7, #64	; 0x40
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20016918 	.word	0x20016918
 800a11c:	200265a8 	.word	0x200265a8

0800a120 <prvProcessICMPEchoRequest>:
 * @brief Process an ICMP echo request.
 *
 * @param[in,out] pxICMPPacket: The IP packet that contains the ICMP message.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
    {
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint16_t usRequest;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3322      	adds	r3, #34	; 0x22
 800a12c:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	330e      	adds	r3, #14
 800a132:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2200      	movs	r2, #0
 800a138:	701a      	strb	r2, [r3, #0]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	68da      	ldr	r2, [r3, #12]
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800a142:	4b22      	ldr	r3, [pc, #136]	; (800a1cc <prvProcessICMPEchoRequest+0xac>)
 800a144:	695a      	ldr	r2, [r3, #20]
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	60da      	str	r2, [r3, #12]
         * has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
         * usGenerateChecksum(). */

        /* due to compiler warning "integer operation result is out of range" */

        usRequest = ( uint16_t ) ( ( uint16_t ) ipICMP_ECHO_REQUEST << 8 );
 800a14a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a14e:	81fb      	strh	r3, [r7, #14]

        if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	885b      	ldrh	r3, [r3, #2]
 800a154:	b29a      	uxth	r2, r3
 800a156:	89fb      	ldrh	r3, [r7, #14]
 800a158:	43db      	mvns	r3, r3
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	021b      	lsls	r3, r3, #8
 800a15e:	b299      	uxth	r1, r3
 800a160:	89f8      	ldrh	r0, [r7, #14]
 800a162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a166:	1a1b      	subs	r3, r3, r0
 800a168:	0a1b      	lsrs	r3, r3, #8
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	430b      	orrs	r3, r1
 800a16e:	b29b      	uxth	r3, r3
 800a170:	429a      	cmp	r2, r3
 800a172:	d312      	bcc.n	800a19a <prvProcessICMPEchoRequest+0x7a>
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	885b      	ldrh	r3, [r3, #2]
 800a178:	b29a      	uxth	r2, r3
 800a17a:	89fb      	ldrh	r3, [r7, #14]
 800a17c:	3301      	adds	r3, #1
 800a17e:	b29b      	uxth	r3, r3
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	b299      	uxth	r1, r3
 800a184:	89fb      	ldrh	r3, [r7, #14]
 800a186:	3301      	adds	r3, #1
 800a188:	0a1b      	lsrs	r3, r3, #8
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	430b      	orrs	r3, r1
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4413      	add	r3, r2
 800a192:	b29a      	uxth	r2, r3
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	805a      	strh	r2, [r3, #2]
 800a198:	e010      	b.n	800a1bc <prvProcessICMPEchoRequest+0x9c>
        }
        else
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	885b      	ldrh	r3, [r3, #2]
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	89fb      	ldrh	r3, [r7, #14]
 800a1a2:	021b      	lsls	r3, r3, #8
 800a1a4:	b219      	sxth	r1, r3
 800a1a6:	89fb      	ldrh	r3, [r7, #14]
 800a1a8:	0a1b      	lsrs	r3, r3, #8
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	b21b      	sxth	r3, r3
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	b21b      	sxth	r3, r3
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	4413      	add	r3, r2
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	805a      	strh	r2, [r3, #2]
        }

        return eReturnEthernetFrame;
 800a1bc:	2302      	movs	r3, #2
    }
 800a1be:	4618      	mov	r0, r3
 800a1c0:	371c      	adds	r7, #28
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	20016918 	.word	0x20016918

0800a1d0 <prvProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
    {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d008      	beq.n	800a1f8 <prvProcessICMPPacket+0x28>
 800a1e6:	2b08      	cmp	r3, #8
 800a1e8:	d000      	beq.n	800a1ec <prvProcessICMPPacket+0x1c>
                #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                break;

            default:
                /* Only ICMP echo packets are handled. */
                break;
 800a1ea:	e006      	b.n	800a1fa <prvProcessICMPPacket+0x2a>
                    eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff ff97 	bl	800a120 <prvProcessICMPEchoRequest>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73fb      	strb	r3, [r7, #15]
                break;
 800a1f6:	e000      	b.n	800a1fa <prvProcessICMPPacket+0x2a>
                break;
 800a1f8:	bf00      	nop
        }

        return eReturn;
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
    }
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <xCheckSizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer,
                                        size_t uxBufferLength )
    {
 800a204:	b580      	push	{r7, lr}
 800a206:	b08c      	sub	sp, #48	; 0x30
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
        const ProtocolPacket_t * pxProtPack;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800a20e:	2300      	movs	r3, #0
 800a210:	62bb      	str	r3, [r7, #40]	; 0x28

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a212:	2300      	movs	r3, #0
 800a214:	627b      	str	r3, [r7, #36]	; 0x24

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b21      	cmp	r3, #33	; 0x21
 800a21a:	d802      	bhi.n	800a222 <xCheckSizeFields+0x1e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a21c:	2301      	movs	r3, #1
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800a220:	e07b      	b.n	800a31a <xCheckSizeFields+0x116>
            }

            /* Map the buffer onto a IP-Packet struct to easily access the
             * fields of the IP packet. */
            pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff f8b6 	bl	8009394 <vCastConstPointerTo_IPPacket_t>
 800a228:	6238      	str	r0, [r7, #32]

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	7b9b      	ldrb	r3, [r3, #14]
 800a22e:	83fb      	strh	r3, [r7, #30]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800a230:	8bfb      	ldrh	r3, [r7, #30]
 800a232:	2b44      	cmp	r3, #68	; 0x44
 800a234:	d902      	bls.n	800a23c <xCheckSizeFields+0x38>
 800a236:	8bfb      	ldrh	r3, [r7, #30]
 800a238:	2b4f      	cmp	r3, #79	; 0x4f
 800a23a:	d902      	bls.n	800a242 <xCheckSizeFields+0x3e>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a23c:	2302      	movs	r3, #2
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800a240:	e06b      	b.n	800a31a <xCheckSizeFields+0x116>
            }

            ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 800a242:	8bfb      	ldrh	r3, [r7, #30]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	b29b      	uxth	r3, r3
 800a248:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800a24c:	83fb      	strh	r3, [r7, #30]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800a24e:	8bfb      	ldrh	r3, [r7, #30]
 800a250:	61bb      	str	r3, [r7, #24]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	330e      	adds	r3, #14
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d202      	bcs.n	800a262 <xCheckSizeFields+0x5e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a25c:	2303      	movs	r3, #3
 800a25e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800a260:	e05b      	b.n	800a31a <xCheckSizeFields+0x116>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	7c1a      	ldrb	r2, [r3, #16]
 800a266:	7c5b      	ldrb	r3, [r3, #17]
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	4313      	orrs	r3, r2
 800a26c:	82fb      	strh	r3, [r7, #22]
            usLength = FreeRTOS_ntohs( usLength );
 800a26e:	8afb      	ldrh	r3, [r7, #22]
 800a270:	021b      	lsls	r3, r3, #8
 800a272:	b21a      	sxth	r2, r3
 800a274:	8afb      	ldrh	r3, [r7, #22]
 800a276:	0a1b      	lsrs	r3, r3, #8
 800a278:	b29b      	uxth	r3, r3
 800a27a:	b21b      	sxth	r3, r3
 800a27c:	4313      	orrs	r3, r2
 800a27e:	b21b      	sxth	r3, r3
 800a280:	82fb      	strh	r3, [r7, #22]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800a282:	8afb      	ldrh	r3, [r7, #22]
 800a284:	330e      	adds	r3, #14
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d202      	bcs.n	800a292 <xCheckSizeFields+0x8e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a28c:	2304      	movs	r3, #4
 800a28e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800a290:	e043      	b.n	800a31a <xCheckSizeFields+0x116>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	7ddb      	ldrb	r3, [r3, #23]
 800a296:	757b      	strb	r3, [r7, #21]
             * protocol (Layer 3 or 4) header will be aligned, which is the convenience
             * of this calculation. */

            /* Map the Buffer onto the Protocol Packet struct for easy access to the
             * struct fields. */
            pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	3b14      	subs	r3, #20
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	4413      	add	r3, r2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff f8a3 	bl	80093ec <vCastConstPointerTo_ProtocolPacket_t>
 800a2a6:	6138      	str	r0, [r7, #16]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a2a8:	7d7b      	ldrb	r3, [r7, #21]
 800a2aa:	2b11      	cmp	r3, #17
 800a2ac:	d103      	bne.n	800a2b6 <xCheckSizeFields+0xb2>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	3316      	adds	r3, #22
 800a2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2b4:	e013      	b.n	800a2de <xCheckSizeFields+0xda>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800a2b6:	7d7b      	ldrb	r3, [r7, #21]
 800a2b8:	2b06      	cmp	r3, #6
 800a2ba:	d103      	bne.n	800a2c4 <xCheckSizeFields+0xc0>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	3322      	adds	r3, #34	; 0x22
 800a2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2c2:	e00c      	b.n	800a2de <xCheckSizeFields+0xda>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800a2c4:	7d7b      	ldrb	r3, [r7, #21]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d002      	beq.n	800a2d0 <xCheckSizeFields+0xcc>
 800a2ca:	7d7b      	ldrb	r3, [r7, #21]
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d103      	bne.n	800a2d8 <xCheckSizeFields+0xd4>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	3316      	adds	r3, #22
 800a2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2d6:	e002      	b.n	800a2de <xCheckSizeFields+0xda>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a2d8:	2305      	movs	r3, #5
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800a2dc:	e01d      	b.n	800a31a <xCheckSizeFields+0x116>
            }

            if( uxBufferLength < uxMinimumLength )
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d202      	bcs.n	800a2ec <xCheckSizeFields+0xe8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a2e6:	2306      	movs	r3, #6
 800a2e8:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800a2ea:	e016      	b.n	800a31a <xCheckSizeFields+0x116>
            }

            uxLength = ( size_t ) usLength;
 800a2ec:	8afb      	ldrh	r3, [r7, #22]
 800a2ee:	60fb      	str	r3, [r7, #12]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	1a9b      	subs	r3, r3, r2
 800a2fa:	60fb      	str	r3, [r7, #12]

            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b07      	cmp	r3, #7
 800a300:	d906      	bls.n	800a310 <xCheckSizeFields+0x10c>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800a302:	69ba      	ldr	r2, [r7, #24]
 800a304:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800a308:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d902      	bls.n	800a316 <xCheckSizeFields+0x112>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a310:	2307      	movs	r3, #7
 800a312:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800a314:	e001      	b.n	800a31a <xCheckSizeFields+0x116>
            }

            xResult = pdPASS;
 800a316:	2301      	movs	r3, #1
 800a318:	62bb      	str	r3, [r7, #40]	; 0x28
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d003      	beq.n	800a328 <xCheckSizeFields+0x124>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
 800a320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a322:	4804      	ldr	r0, [pc, #16]	; (800a334 <xCheckSizeFields+0x130>)
 800a324:	f7f6 fbaa 	bl	8000a7c <vLoggingPrintf>
        }

        return xResult;
 800a328:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 800a32a:	4618      	mov	r0, r3
 800a32c:	3730      	adds	r7, #48	; 0x30
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	08015504 	.word	0x08015504

0800a338 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer: The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend: Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
        {
            if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	2b3b      	cmp	r3, #59	; 0x3b
 800a348:	d818      	bhi.n	800a37c <vReturnEthernetFrame+0x44>
            {
                BaseType_t xIndex;

                FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	4619      	mov	r1, r3
 800a350:	4827      	ldr	r0, [pc, #156]	; (800a3f0 <vReturnEthernetFrame+0xb8>)
 800a352:	f7f6 fb93 	bl	8000a7c <vLoggingPrintf>

                for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	69db      	ldr	r3, [r3, #28]
 800a35a:	61fb      	str	r3, [r7, #28]
 800a35c:	e008      	b.n	800a370 <vReturnEthernetFrame+0x38>
                {
                    pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	699a      	ldr	r2, [r3, #24]
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	4413      	add	r3, r2
 800a366:	2200      	movs	r2, #0
 800a368:	701a      	strb	r2, [r3, #0]
                for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	3301      	adds	r3, #1
 800a36e:	61fb      	str	r3, [r7, #28]
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	2b3b      	cmp	r3, #59	; 0x3b
 800a374:	ddf3      	ble.n	800a35e <vReturnEthernetFrame+0x26>
                }

                pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	223c      	movs	r2, #60	; 0x3c
 800a37a:	61da      	str	r2, [r3, #28]
            }
        }
    #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d111      	bne.n	800a3a6 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7ff fa57 	bl	800983c <pxDuplicateNetworkBufferWithDescriptor>
 800a38e:	61b8      	str	r0, [r7, #24]

            if( pxNewBuffer != NULL )
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 800a396:	2301      	movs	r3, #1
 800a398:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	69da      	ldr	r2, [r3, #28]
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	61da      	str	r2, [r3, #28]
            }

            pxNetworkBuffer = pxNewBuffer;
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01d      	beq.n	800a3e8 <vReturnEthernetFrame+0xb0>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* Map the Buffer to Ethernet Header struct for easy access to fields. */
        pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fe ffc3 	bl	800933c <vCastPointerTo_EthernetHeader_t>
 800a3b6:	6178      	str	r0, [r7, #20]
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        /* Swap source and destination MAC addresses. */
        pvCopySource = &pxEthernetHeader->xSourceAddress;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	3306      	adds	r3, #6
 800a3bc:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 800a3c2:	2206      	movs	r2, #6
 800a3c4:	6939      	ldr	r1, [r7, #16]
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f008 fd23 	bl	8012e12 <memcpy>

        pvCopySource = ipLOCAL_MAC_ADDRESS;
 800a3cc:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <vReturnEthernetFrame+0xbc>)
 800a3ce:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	3306      	adds	r3, #6
 800a3d4:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a3d6:	2206      	movs	r2, #6
 800a3d8:	6939      	ldr	r1, [r7, #16]
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f008 fd19 	bl	8012e12 <memcpy>

        /* Send! */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f006 fafe 	bl	80109e4 <xNetworkInterfaceOutput>
    }
}
 800a3e8:	bf00      	nop
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	08015654 	.word	0x08015654
 800a3f4:	20016918 	.word	0x20016918

0800a3f8 <FreeRTOS_GetMACAddress>:
 * @brief Get the MAC address.
 *
 * @return The pointer to MAC address.
 */
const uint8_t * FreeRTOS_GetMACAddress( void )
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
    return ipLOCAL_MAC_ADDRESS;
 800a3fc:	4b02      	ldr	r3, [pc, #8]	; (800a408 <FreeRTOS_GetMACAddress+0x10>)
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	20016918 	.word	0x20016918

0800a40c <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 800a40c:	b480      	push	{r7}
 800a40e:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800a410:	4b03      	ldr	r3, [pc, #12]	; (800a420 <xIPIsNetworkTaskReady+0x14>)
 800a412:	681b      	ldr	r3, [r3, #0]
}
 800a414:	4618      	mov	r0, r3
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	200265d8 	.word	0x200265d8

0800a424 <FreeRTOS_max_uint32>:
        {
            return ( a >= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_max_uint32( uint32_t a,
                                                        uint32_t b )
        {
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
            return ( a >= b ) ? a : b;
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	4293      	cmp	r3, r2
 800a434:	bf38      	it	cc
 800a436:	4613      	movcc	r3, r2
        }
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <FreeRTOS_round_up>:
        {
            return ( a <= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_round_up( uint32_t a,
                                                      uint32_t d )
        {
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
            return d * ( ( a + d - 1U ) / d );
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	4413      	add	r3, r2
 800a454:	1e5a      	subs	r2, r3, #1
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	fbb2 f3f3 	udiv	r3, r2, r3
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	fb02 f303 	mul.w	r3, r2, r3
        }
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <uxStreamBufferSpace>:
                                                  const size_t uxLower,
                                                  const size_t uxUpper );
    static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t * pxBuffer,
                                                  const size_t uxLower,
                                                  const size_t uxUpper )
    {
 800a46e:	b480      	push	{r7}
 800a470:	b087      	sub	sp, #28
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	691a      	ldr	r2, [r3, #16]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	441a      	add	r2, r3
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	3b01      	subs	r3, #1
 800a488:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	429a      	cmp	r2, r3
 800a492:	d304      	bcc.n	800a49e <uxStreamBufferSpace+0x30>
        {
            uxCount -= pxBuffer->LENGTH;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 800a49e:	697b      	ldr	r3, [r7, #20]
    }
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	371c      	adds	r7, #28
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <uxStreamBufferDistance>:
                                                     const size_t uxLower,
                                                     const size_t uxUpper );
    static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t * pxBuffer,
                                                     const size_t uxLower,
                                                     const size_t uxUpper )
    {
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	441a      	add	r2, r3
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d304      	bcc.n	800a4da <uxStreamBufferDistance+0x2e>
        {
            uxCount -= pxBuffer->LENGTH;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 800a4da:	697b      	ldr	r3, [r7, #20]
    }
 800a4dc:	4618      	mov	r0, r3
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer )
    {
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
 * before hitting on uxTail */
        size_t uxHead = pxBuffer->uxHead;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	68f9      	ldr	r1, [r7, #12]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff ffb4 	bl	800a46e <uxStreamBufferSpace>
 800a506:	4603      	mov	r3, r0
    }
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer )
    {
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
 * or the number of items which can still be added to uxFront,
 * before hitting on uxTail */

        size_t uxFront = pxBuffer->uxFront;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	68f9      	ldr	r1, [r7, #12]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff ffa0 	bl	800a46e <uxStreamBufferSpace>
 800a52e:	4603      	mov	r3, r0
    }
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer )
    {
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
 * before reaching uxHead */
        size_t uxHead = pxBuffer->uxHead;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff ffab 	bl	800a4ac <uxStreamBufferDistance>
 800a556:	4603      	mov	r3, r0
    }
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800a568:	687b      	ldr	r3, [r7, #4]
    }
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <vCastConstPointerTo_FreeRTOS_Socket_t>:
    {
 800a576:	b480      	push	{r7}
 800a578:	b083      	sub	sp, #12
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
        return ( const FreeRTOS_Socket_t * ) pvArgument;
 800a57e:	687b      	ldr	r3, [r7, #4]
    }
 800a580:	4618      	mov	r0, r3
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 800a594:	687b      	ldr	r3, [r7, #4]
}
 800a596:	4618      	mov	r0, r3
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <vCastPointerTo_StreamBuffer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type StreamBuffer_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( StreamBuffer_t )
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
    return ( StreamBuffer_t * ) pvArgument;
 800a5aa:	687b      	ldr	r3, [r7, #4]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <prvValidSocket+0x1a>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d0:	d102      	bne.n	800a5d8 <prvValidSocket+0x20>
    {
        xReturn = pdFALSE;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e015      	b.n	800a604 <prvValidSocket+0x4c>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d006      	beq.n	800a5ec <prvValidSocket+0x34>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <prvValidSocket+0x34>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	e00b      	b.n	800a604 <prvValidSocket+0x4c>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d002      	beq.n	800a600 <prvValidSocket+0x48>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	e001      	b.n	800a604 <prvValidSocket+0x4c>
    }
    else
    {
        xReturn = pdTRUE;
 800a600:	2301      	movs	r3, #1
 800a602:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a604:	697b      	ldr	r3, [r7, #20]
}
 800a606:	4618      	mov	r0, r3
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800a618:	4803      	ldr	r0, [pc, #12]	; (800a628 <vNetworkSocketsInit+0x14>)
 800a61a:	f7fa fb8d 	bl	8004d38 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
        {
            vListInitialise( &xBoundTCPSocketsList );
 800a61e:	4803      	ldr	r0, [pc, #12]	; (800a62c <vNetworkSocketsInit+0x18>)
 800a620:	f7fa fb8a 	bl	8004d38 <vListInitialise>
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800a624:	bf00      	nop
 800a626:	bd80      	pop	{r7, pc}
 800a628:	2002715c 	.word	0x2002715c
 800a62c:	20027148 	.word	0x20027148

0800a630 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
 800a63c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800a63e:	2301      	movs	r3, #1
 800a640:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800a642:	2300      	movs	r3, #0
 800a644:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800a646:	f7ff fee1 	bl	800a40c <xIPIsNetworkTaskReady>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d102      	bne.n	800a656 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800a650:	2300      	movs	r3, #0
 800a652:	617b      	str	r3, [r7, #20]
 800a654:	e04e      	b.n	800a6f4 <prvDetermineSocketSize+0xc4>
    }
    else
    {
        /* Only Ethernet is currently supported. */
        configASSERT( xDomain == FREERTOS_AF_INET );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d004      	beq.n	800a666 <prvDetermineSocketSize+0x36>
 800a65c:	4928      	ldr	r1, [pc, #160]	; (800a700 <prvDetermineSocketSize+0xd0>)
 800a65e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800a662:	f7f6 fa34 	bl	8000ace <vAssertCalled>

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800a666:	4b27      	ldr	r3, [pc, #156]	; (800a704 <prvDetermineSocketSize+0xd4>)
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66e:	d004      	beq.n	800a67a <prvDetermineSocketSize+0x4a>
 800a670:	4923      	ldr	r1, [pc, #140]	; (800a700 <prvDetermineSocketSize+0xd0>)
 800a672:	f240 104b 	movw	r0, #331	; 0x14b
 800a676:	f7f6 fa2a 	bl	8000ace <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
            {
                /* Check if the TCP socket-list has been initialised. */
                configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800a67a:	4b23      	ldr	r3, [pc, #140]	; (800a708 <prvDetermineSocketSize+0xd8>)
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a682:	d004      	beq.n	800a68e <prvDetermineSocketSize+0x5e>
 800a684:	491e      	ldr	r1, [pc, #120]	; (800a700 <prvDetermineSocketSize+0xd0>)
 800a686:	f240 104f 	movw	r0, #335	; 0x14f
 800a68a:	f7f6 fa20 	bl	8000ace <vAssertCalled>
            }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b11      	cmp	r3, #17
 800a692:	d110      	bne.n	800a6b6 <prvDetermineSocketSize+0x86>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d009      	beq.n	800a6ae <prvDetermineSocketSize+0x7e>
            {
                xReturn = pdFAIL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS );
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d004      	beq.n	800a6ae <prvDetermineSocketSize+0x7e>
 800a6a4:	4916      	ldr	r1, [pc, #88]	; (800a700 <prvDetermineSocketSize+0xd0>)
 800a6a6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800a6aa:	f7f6 fa10 	bl	8000ace <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	224c      	movs	r2, #76	; 0x4c
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	e01e      	b.n	800a6f4 <prvDetermineSocketSize+0xc4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b06      	cmp	r3, #6
 800a6ba:	d111      	bne.n	800a6e0 <prvDetermineSocketSize+0xb0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d009      	beq.n	800a6d6 <prvDetermineSocketSize+0xa6>
                {
                    xReturn = pdFAIL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS );
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d004      	beq.n	800a6d6 <prvDetermineSocketSize+0xa6>
 800a6cc:	490c      	ldr	r1, [pc, #48]	; (800a700 <prvDetermineSocketSize+0xd0>)
 800a6ce:	f240 1065 	movw	r0, #357	; 0x165
 800a6d2:	f7f6 f9fc 	bl	8000ace <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	e009      	b.n	800a6f4 <prvDetermineSocketSize+0xc4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS );
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d004      	beq.n	800a6f4 <prvDetermineSocketSize+0xc4>
 800a6ea:	4905      	ldr	r1, [pc, #20]	; (800a700 <prvDetermineSocketSize+0xd0>)
 800a6ec:	f44f 70b7 	mov.w	r0, #366	; 0x16e
 800a6f0:	f7f6 f9ed 	bl	8000ace <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800a6f4:	697b      	ldr	r3, [r7, #20]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	0801576c 	.word	0x0801576c
 800a704:	2002715c 	.word	0x2002715c
 800a708:	20027148 	.word	0x20027148

0800a70c <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800a718:	2301      	movs	r3, #1
 800a71a:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;

    if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800a71c:	f107 0310 	add.w	r3, r7, #16
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	68b9      	ldr	r1, [r7, #8]
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f7ff ff83 	bl	800a630 <prvDetermineSocketSize>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d103      	bne.n	800a738 <FreeRTOS_socket+0x2c>
    {
        xReturn = FREERTOS_INVALID_SOCKET;
 800a730:	f04f 33ff 	mov.w	r3, #4294967295
 800a734:	61fb      	str	r3, [r7, #28]
 800a736:	e080      	b.n	800a83a <FreeRTOS_socket+0x12e>
    {
        /* Allocate the structure that will hold the socket information. The
        * size depends on the type of socket: UDP sockets need less space. A
        * define 'pvPortMallocSocket' will used to allocate the necessary space.
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fc fece 	bl	80074dc <pvPortMalloc>
 800a740:	4603      	mov	r3, r0
 800a742:	4618      	mov	r0, r3
 800a744:	f7ff ff0c 	bl	800a560 <vCastPointerTo_FreeRTOS_Socket_t>
 800a748:	61b8      	str	r0, [r7, #24]

        if( pxSocket == NULL )
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d103      	bne.n	800a758 <FreeRTOS_socket+0x4c>
        {
            xReturn = FREERTOS_INVALID_SOCKET;
 800a750:	f04f 33ff 	mov.w	r3, #4294967295
 800a754:	61fb      	str	r3, [r7, #28]
 800a756:	e070      	b.n	800a83a <FreeRTOS_socket+0x12e>
            iptraceFAILED_TO_CREATE_SOCKET();
        }
        else
        {
            xEventGroup = xEventGroupCreate();
 800a758:	f7fa f91e 	bl	8004998 <xEventGroupCreate>
 800a75c:	6178      	str	r0, [r7, #20]

            if( xEventGroup == NULL )
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d106      	bne.n	800a772 <FreeRTOS_socket+0x66>
            {
                vPortFreeSocket( pxSocket );
 800a764:	69b8      	ldr	r0, [r7, #24]
 800a766:	f7fc ff77 	bl	8007658 <vPortFree>
                xReturn = FREERTOS_INVALID_SOCKET;
 800a76a:	f04f 33ff 	mov.w	r3, #4294967295
 800a76e:	61fb      	str	r3, [r7, #28]
 800a770:	e063      	b.n	800a83a <FreeRTOS_socket+0x12e>
                    /* Lint wants at least a comment, in case the macro is empty. */
                    iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
                }

                /* Clear the entire space to avoid nulling individual entries. */
                ( void ) memset( pxSocket, 0, uxSocketSize );
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	461a      	mov	r2, r3
 800a776:	2100      	movs	r1, #0
 800a778:	69b8      	ldr	r0, [r7, #24]
 800a77a:	f008 fb6e 	bl	8012e5a <memset>

                pxSocket->xEventGroup = xEventGroup;
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	605a      	str	r2, [r3, #4]

                /* Initialise the socket's members.  The semaphore will be created
                 * if the socket is bound to an address, for now the pointer to the
                 * semaphore is just set to NULL to show it has not been created. */
                if( xProtocol == FREERTOS_IPPROTO_UDP )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b11      	cmp	r3, #17
 800a788:	d104      	bne.n	800a794 <FreeRTOS_socket+0x88>
                {
                    vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	3338      	adds	r3, #56	; 0x38
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fa fad2 	bl	8004d38 <vListInitialise>
                            pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
                        }
                    #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
                }

                vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	3308      	adds	r3, #8
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fa faed 	bl	8004d78 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	615a      	str	r2, [r3, #20]

                pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7aa:	61da      	str	r2, [r3, #28]
                pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7b2:	621a      	str	r2, [r3, #32]
                pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                pxSocket->ucProtocol = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

                #if ( ipconfigUSE_TCP == 1 )
                    {
                        if( xProtocol == FREERTOS_IPPROTO_TCP )
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b06      	cmp	r3, #6
 800a7ca:	d134      	bne.n	800a836 <FreeRTOS_socket+0x12a>
                        {
                            /* StreamSize is expressed in number of bytes */
                            /* Round up buffer sizes to nearest multiple of MSS */
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a7d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                            pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ipconfigTCP_MSS;
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800a7dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                            pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7e6:	66da      	str	r2, [r3, #108]	; 0x6c
                            pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800a7e8:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800a7ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a7f0:	f7ff fe28 	bl	800a444 <FreeRTOS_round_up>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	671a      	str	r2, [r3, #112]	; 0x70
                            /* Use half of the buffer size of the TCP windows */
                            #if ( ipconfigUSE_TCP_WIN == 1 )
                                {
                                    pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fe:	08db      	lsrs	r3, r3, #3
 800a800:	4a10      	ldr	r2, [pc, #64]	; (800a844 <FreeRTOS_socket+0x138>)
 800a802:	fba2 2303 	umull	r2, r3, r2, r3
 800a806:	099b      	lsrs	r3, r3, #6
 800a808:	4619      	mov	r1, r3
 800a80a:	2001      	movs	r0, #1
 800a80c:	f7ff fe0a 	bl	800a424 <FreeRTOS_max_uint32>
 800a810:	4602      	mov	r2, r0
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                                    pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81c:	08db      	lsrs	r3, r3, #3
 800a81e:	4a09      	ldr	r2, [pc, #36]	; (800a844 <FreeRTOS_socket+0x138>)
 800a820:	fba2 2303 	umull	r2, r3, r2, r3
 800a824:	099b      	lsrs	r3, r3, #6
 800a826:	4619      	mov	r1, r3
 800a828:	2001      	movs	r0, #1
 800a82a:	f7ff fdfb 	bl	800a424 <FreeRTOS_max_uint32>
 800a82e:	4602      	mov	r2, r0
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                             * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
                             * socket is connected and data is exchanged. */
                        }
                    }
                #endif /* ipconfigUSE_TCP == 1 */
                xReturn = pxSocket;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	61fb      	str	r3, [r7, #28]
    }

    /* Remove compiler warnings in the case the configASSERT() is not defined. */
    ( void ) xDomain;

    return xReturn;
 800a83a:	69fb      	ldr	r3, [r7, #28]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3720      	adds	r7, #32
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	2ce33e6d 	.word	0x2ce33e6d

0800a848 <FreeRTOS_recvfrom>:
                           void * pvBuffer,
                           size_t uxBufferLength,
                           BaseType_t xFlags,
                           struct freertos_sockaddr * pxSourceAddress,
                           socklen_t * pxSourceAddressLength )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b092      	sub	sp, #72	; 0x48
 800a84c:	af02      	add	r7, sp, #8
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	603b      	str	r3, [r7, #0]
    BaseType_t lPacketCount;
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    const void * pvCopySource;
    FreeRTOS_Socket_t const * pxSocket = xSocket;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	633b      	str	r3, [r7, #48]	; 0x30
    TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800a85a:	2300      	movs	r3, #0
 800a85c:	61fb      	str	r3, [r7, #28]
    BaseType_t xTimed = pdFALSE;
 800a85e:	2300      	movs	r3, #0
 800a860:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;
    int32_t lReturn;
    EventBits_t xEventBits = ( EventBits_t ) 0;
 800a862:	2300      	movs	r3, #0
 800a864:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t uxPayloadLength;

    if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800a866:	2201      	movs	r2, #1
 800a868:	2111      	movs	r1, #17
 800a86a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a86c:	f7ff fea4 	bl	800a5b8 <prvValidSocket>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d103      	bne.n	800a87e <FreeRTOS_recvfrom+0x36>
    {
        lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800a876:	f06f 0315 	mvn.w	r3, #21
 800a87a:	637b      	str	r3, [r7, #52]	; 0x34
 800a87c:	e08e      	b.n	800a99c <FreeRTOS_recvfrom+0x154>
    }
    else
    {
        lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a882:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* The function prototype is designed to maintain the expected Berkeley
         * sockets standard, but this implementation does not use all the parameters. */
        ( void ) pxSourceAddressLength;

        while( lPacketCount == 0 )
 800a884:	e02f      	b.n	800a8e6 <FreeRTOS_recvfrom+0x9e>
        {
            if( xTimed == pdFALSE )
 800a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d111      	bne.n	800a8b0 <FreeRTOS_recvfrom+0x68>
            {
                /* Check to see if the socket is non blocking on the first
                 * iteration.  */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	69db      	ldr	r3, [r3, #28]
 800a890:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0 )
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d02a      	beq.n	800a8ee <FreeRTOS_recvfrom+0xa6>
                        }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( ( UBaseType_t ) xFlags ) & ( ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) ) != 0U )
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	f003 0310 	and.w	r3, r3, #16
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d127      	bne.n	800a8f2 <FreeRTOS_recvfrom+0xaa>
                {
                    break;
                }

                /* To ensure this part only executes once. */
                xTimed = pdTRUE;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800a8a6:	f107 0314 	add.w	r3, r7, #20
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fb fe86 	bl	80065bc <vTaskSetTimeOutState>
            }

            /* Wait for arrival of data.  While waiting, the IP-task may set the
             * 'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
             * socket, thus unblocking this API call. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, ( ( EventBits_t ) eSOCKET_RECEIVE ) | ( ( EventBits_t ) eSOCKET_INTR ),
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	6858      	ldr	r0, [r3, #4]
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	2141      	movs	r1, #65	; 0x41
 800a8be:	f7fa f883 	bl	80049c8 <xEventGroupWaitBits>
 800a8c2:	62f8      	str	r0, [r7, #44]	; 0x2c
                {
                    ( void ) xEventBits;
                }
            #endif /* ipconfigSUPPORT_SIGNALS */

            lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c8:	63fb      	str	r3, [r7, #60]	; 0x3c

            if( lPacketCount != 0 )
 800a8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d112      	bne.n	800a8f6 <FreeRTOS_recvfrom+0xae>
            {
                break;
            }

            /* Has the timeout been reached ? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800a8d0:	f107 021c 	add.w	r2, r7, #28
 800a8d4:	f107 0314 	add.w	r3, r7, #20
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fb fea6 	bl	800662c <xTaskCheckForTimeOut>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d109      	bne.n	800a8fa <FreeRTOS_recvfrom+0xb2>
        while( lPacketCount == 0 )
 800a8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d0cc      	beq.n	800a886 <FreeRTOS_recvfrom+0x3e>
 800a8ec:	e006      	b.n	800a8fc <FreeRTOS_recvfrom+0xb4>
                    break;
 800a8ee:	bf00      	nop
 800a8f0:	e004      	b.n	800a8fc <FreeRTOS_recvfrom+0xb4>
                    break;
 800a8f2:	bf00      	nop
 800a8f4:	e002      	b.n	800a8fc <FreeRTOS_recvfrom+0xb4>
                break;
 800a8f6:	bf00      	nop
 800a8f8:	e000      	b.n	800a8fc <FreeRTOS_recvfrom+0xb4>
            {
                break;
 800a8fa:	bf00      	nop
            }
        } /* while( lPacketCount == 0 ) */

        if( lPacketCount != 0 )
 800a8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d049      	beq.n	800a996 <FreeRTOS_recvfrom+0x14e>
        {
            taskENTER_CRITICAL();
 800a902:	f7fd f8c9 	bl	8007a98 <vPortEnterCritical>
            {
                /* The owner of the list item is the network buffer. */
                pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff fe3d 	bl	800a58c <vCastPointerTo_NetworkBufferDescriptor_t>
 800a912:	62b8      	str	r0, [r7, #40]	; 0x28

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	f003 0304 	and.w	r3, r3, #4
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d103      	bne.n	800a926 <FreeRTOS_recvfrom+0xde>
                {
                    /* Remove the network buffer from the list of buffers waiting to
                     * be processed by the socket. */
                    ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	4618      	mov	r0, r3
 800a922:	f7fa fa93 	bl	8004e4c <uxListRemove>
                }
            }
            taskEXIT_CRITICAL();
 800a926:	f7fd f8e3 	bl	8007af0 <vPortExitCritical>

            /* The returned value is the length of the payload data, which is
             * calculated at the total packet size minus the headers.
             * The validity of `xDataLength` prvProcessIPPacket has been confirmed
             * in 'prvProcessIPPacket()'. */
            uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	3b2a      	subs	r3, #42	; 0x2a
 800a930:	627b      	str	r3, [r7, #36]	; 0x24
            lReturn = ( int32_t ) uxPayloadLength;
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	637b      	str	r3, [r7, #52]	; 0x34

            if( pxSourceAddress != NULL )
 800a936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d007      	beq.n	800a94c <FreeRTOS_recvfrom+0x104>
            {
                pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	8c1a      	ldrh	r2, [r3, #32]
 800a940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a942:	805a      	strh	r2, [r3, #2]
                pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800a944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a946:	695a      	ldr	r2, [r3, #20]
 800a948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a94a:	605a      	str	r2, [r3, #4]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b00      	cmp	r3, #0
 800a954:	d118      	bne.n	800a988 <FreeRTOS_recvfrom+0x140>
            {
                /* The zero copy flag is not set.  Truncate the length if it won't
                 * fit in the provided buffer. */
                if( lReturn > ( int32_t ) uxBufferLength )
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a95a:	429a      	cmp	r2, r3
 800a95c:	dd01      	ble.n	800a962 <FreeRTOS_recvfrom+0x11a>
                {
                    iptraceRECVFROM_DISCARDING_BYTES( ( uxBufferLength - lReturn ) );
                    lReturn = ( int32_t ) uxBufferLength;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
                }

                /* Copy the received data into the provided buffer, then release the
                 * network buffer. */
                pvCopySource = ( const void * ) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 800a962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	332a      	adds	r3, #42	; 0x2a
 800a968:	623b      	str	r3, [r7, #32]
                ( void ) memcpy( pvBuffer, pvCopySource, ( size_t ) lReturn );
 800a96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96c:	461a      	mov	r2, r3
 800a96e:	6a39      	ldr	r1, [r7, #32]
 800a970:	68b8      	ldr	r0, [r7, #8]
 800a972:	f008 fa4e 	bl	8012e12 <memcpy>

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10d      	bne.n	800a99c <FreeRTOS_recvfrom+0x154>
                {
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a982:	f007 f8e1 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
 800a986:	e009      	b.n	800a99c <FreeRTOS_recvfrom+0x154>
            {
                /* The zero copy flag was set.  pvBuffer is not a buffer into which
                 * the received data can be copied, but a pointer that must be set to
                 * point to the buffer in which the received data has already been
                 * placed. */
                *( ( void ** ) pvBuffer ) = ipPOINTER_CAST( void *, &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	e002      	b.n	800a99c <FreeRTOS_recvfrom+0x154>
                iptraceRECVFROM_INTERRUPTED();
            }
        #endif /* ipconfigSUPPORT_SIGNALS */
        else
        {
            lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800a996:	f06f 030a 	mvn.w	r3, #10
 800a99a:	637b      	str	r3, [r7, #52]	; 0x34
            iptraceRECVFROM_TIMEOUT();
        }
    }

    return lReturn;
 800a99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3740      	adds	r7, #64	; 0x40
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b090      	sub	sp, #64	; 0x40
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	603b      	str	r3, [r7, #0]
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    void * pvCopyDest;
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800a9b6:	2304      	movs	r3, #4
 800a9b8:	f887 3020 	strb.w	r3, [r7, #32]
 800a9bc:	2300      	movs	r3, #0
 800a9be:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    TickType_t xTicksToWait;
    int32_t lReturn = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	63bb      	str	r3, [r7, #56]	; 0x38
    FreeRTOS_Socket_t const * pxSocket;
    const size_t uxMaxPayloadLength = ipMAX_UDP_PAYLOAD_LENGTH;
 800a9c4:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 800a9c8:	637b      	str	r3, [r7, #52]	; 0x34
    const size_t uxPayloadOffset = ipUDP_PAYLOAD_OFFSET_IPv4;
 800a9ca:	232a      	movs	r3, #42	; 0x2a
 800a9cc:	633b      	str	r3, [r7, #48]	; 0x30


    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pvBuffer != NULL );
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d104      	bne.n	800a9e2 <FreeRTOS_sendto+0x3a>
 800a9d8:	4944      	ldr	r1, [pc, #272]	; (800aaec <FreeRTOS_sendto+0x144>)
 800a9da:	f240 4015 	movw	r0, #1045	; 0x415
 800a9de:	f7f6 f876 	bl	8000ace <vAssertCalled>

    if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d87a      	bhi.n	800aae0 <FreeRTOS_sendto+0x138>
    {
        /* If the socket is not already bound to an address, bind it now.
         * Passing NULL as the address parameter tells FreeRTOS_bind() to select
         * the address to bind to. */
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d107      	bne.n	800aa02 <FreeRTOS_sendto+0x5a>
            ( FreeRTOS_bind( xSocket, NULL, 0U ) == 0 ) )
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 f87a 	bl	800aaf0 <FreeRTOS_bind>
 800a9fc:	4603      	mov	r3, r0
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d16e      	bne.n	800aae0 <FreeRTOS_sendto+0x138>
        {
            xTicksToWait = pxSocket->xSendBlockTime;
 800aa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	617b      	str	r3, [r7, #20]
                        xTicksToWait = ( TickType_t ) 0;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	f003 0310 	and.w	r3, r3, #16
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <FreeRTOS_sendto+0x6e>
            {
                xTicksToWait = ( TickType_t ) 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	617b      	str	r3, [r7, #20]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d128      	bne.n	800aa72 <FreeRTOS_sendto+0xca>
            {
                /* Zero copy is not set, so obtain a network buffer into
                 * which the payload will be copied. */
                vTaskSetTimeOutState( &xTimeOut );
 800aa20:	f107 0318 	add.w	r3, r7, #24
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fb fdc9 	bl	80065bc <vTaskSetTimeOutState>

                /* Block until a buffer becomes available, or until a
                 * timeout has been reached */
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800aa2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4413      	add	r3, r2
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f007 f80d 	bl	8011a54 <pxGetNetworkBufferWithDescriptor>
 800aa3a:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( pxNetworkBuffer != NULL )
 800aa3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d01b      	beq.n	800aa7a <FreeRTOS_sendto+0xd2>
                {
                    pvCopyDest = ( void * ) &pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ];
 800aa42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa44:	699a      	ldr	r2, [r3, #24]
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	4413      	add	r3, r2
 800aa4a:	62bb      	str	r3, [r7, #40]	; 0x28
                    ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	68b9      	ldr	r1, [r7, #8]
 800aa50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa52:	f008 f9de 	bl	8012e12 <memcpy>

                    if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800aa56:	f107 0214 	add.w	r2, r7, #20
 800aa5a:	f107 0318 	add.w	r3, r7, #24
 800aa5e:	4611      	mov	r1, r2
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fb fde3 	bl	800662c <xTaskCheckForTimeOut>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d106      	bne.n	800aa7a <FreeRTOS_sendto+0xd2>
                    {
                        /* The entire block time has been used up. */
                        xTicksToWait = ( TickType_t ) 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]
 800aa70:	e003      	b.n	800aa7a <FreeRTOS_sendto+0xd2>
            else
            {
                /* When zero copy is used, pvBuffer is a pointer to the
                 * payload of a buffer that has already been obtained from the
                 * stack.  Obtain the network buffer pointer from the buffer. */
                pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800aa72:	68b8      	ldr	r0, [r7, #8]
 800aa74:	f7fe ff3d 	bl	80098f2 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800aa78:	63f8      	str	r0, [r7, #60]	; 0x3c
            }

            if( pxNetworkBuffer != NULL )
 800aa7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d02f      	beq.n	800aae0 <FreeRTOS_sendto+0x138>
            {
                /* xDataLength is the size of the total packet, including the Ethernet header. */
                pxNetworkBuffer->xDataLength = uxTotalDataLength + sizeof( UDPPacket_t );
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800aa86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa88:	61da      	str	r2, [r3, #28]
                pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800aa8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa8c:	885a      	ldrh	r2, [r3, #2]
 800aa8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa90:	841a      	strh	r2, [r3, #32]
                pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800aa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9a:	845a      	strh	r2, [r3, #34]	; 0x22
                pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 800aa9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa2:	615a      	str	r2, [r3, #20]

                /* The socket options are passed to the IP layer in the
                 * space that will eventually get used by the Ethernet header. */
                pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800aaa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	3306      	adds	r3, #6
 800aaaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaac:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800aab0:	701a      	strb	r2, [r3, #0]

                /* Tell the networking task that the packet needs sending. */
                xStackTxEvent.pvData = pxNetworkBuffer;
 800aab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab4:	627b      	str	r3, [r7, #36]	; 0x24

                /* Ask the IP-task to send this packet */
                if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	f107 0320 	add.w	r3, r7, #32
 800aabc:	4611      	mov	r1, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff f842 	bl	8009b48 <xSendEventStructToIPTask>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d102      	bne.n	800aad0 <FreeRTOS_sendto+0x128>
                {
                    /* The packet was successfully sent to the IP task. */
                    lReturn = ( int32_t ) uxTotalDataLength;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	63bb      	str	r3, [r7, #56]	; 0x38
 800aace:	e007      	b.n	800aae0 <FreeRTOS_sendto+0x138>
                }
                else
                {
                    /* If the buffer was allocated in this function, release
                     * it. */
                    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	f003 0301 	and.w	r3, r3, #1
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d102      	bne.n	800aae0 <FreeRTOS_sendto+0x138>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800aada:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aadc:	f007 f834 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
    {
        /* The data is longer than the available buffer space. */
        iptraceSENDTO_DATA_TOO_LONG();
    }

    return lReturn;
 800aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
} /* Tested */
 800aae2:	4618      	mov	r0, r3
 800aae4:	3740      	adds	r7, #64	; 0x40
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	0801576c 	.word	0x0801576c

0800aaf0 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08a      	sub	sp, #40	; 0x28
 800aaf4:	af02      	add	r7, sp, #8
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	61bb      	str	r3, [r7, #24]
    BaseType_t xReturn = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	61fb      	str	r3, [r7, #28]

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800ab04:	f7fe fd7a 	bl	80095fc <xIsCallingFromIPTask>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <FreeRTOS_bind+0x28>
 800ab0e:	492f      	ldr	r1, [pc, #188]	; (800abcc <FreeRTOS_bind+0xdc>)
 800ab10:	f240 40ad 	movw	r0, #1197	; 0x4ad
 800ab14:	f7f5 ffdb 	bl	8000ace <vAssertCalled>

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <FreeRTOS_bind+0x36>
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab24:	d103      	bne.n	800ab2e <FreeRTOS_bind+0x3e>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ab26:	f06f 0315 	mvn.w	r3, #21
 800ab2a:	61fb      	str	r3, [r7, #28]
 800ab2c:	e048      	b.n	800abc0 <FreeRTOS_bind+0xd0>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d009      	beq.n	800ab4a <FreeRTOS_bind+0x5a>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4824      	ldr	r0, [pc, #144]	; (800abd0 <FreeRTOS_bind+0xe0>)
 800ab3e:	f7f5 ff9d 	bl	8000a7c <vLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ab42:	f06f 0315 	mvn.w	r3, #21
 800ab46:	61fb      	str	r3, [r7, #28]
 800ab48:	e03a      	b.n	800abc0 <FreeRTOS_bind+0xd0>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800ab4a:	2309      	movs	r3, #9
 800ab4c:	743b      	strb	r3, [r7, #16]
        xBindEvent.pvData = xSocket;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	617b      	str	r3, [r7, #20]

        if( pxAddress != NULL )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00e      	beq.n	800ab76 <FreeRTOS_bind+0x86>
        {
            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	885b      	ldrh	r3, [r3, #2]
 800ab5c:	021b      	lsls	r3, r3, #8
 800ab5e:	b21a      	sxth	r2, r3
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	885b      	ldrh	r3, [r3, #2]
 800ab64:	0a1b      	lsrs	r3, r3, #8
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	b21b      	sxth	r3, r3
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	b21b      	sxth	r3, r3
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	849a      	strh	r2, [r3, #36]	; 0x24
 800ab74:	e002      	b.n	800ab7c <FreeRTOS_bind+0x8c>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	849a      	strh	r2, [r3, #36]	; 0x24
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800ab7c:	f107 0310 	add.w	r3, r7, #16
 800ab80:	f04f 31ff 	mov.w	r1, #4294967295
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fe ffdf 	bl	8009b48 <xSendEventStructToIPTask>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <FreeRTOS_bind+0xae>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800ab90:	4810      	ldr	r0, [pc, #64]	; (800abd4 <FreeRTOS_bind+0xe4>)
 800ab92:	f7f5 ff73 	bl	8000a7c <vLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800ab96:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	e010      	b.n	800abc0 <FreeRTOS_bind+0xd0>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	6858      	ldr	r0, [r3, #4]
 800aba2:	f04f 33ff 	mov.w	r3, #4294967295
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	2300      	movs	r3, #0
 800abaa:	2201      	movs	r2, #1
 800abac:	2110      	movs	r1, #16
 800abae:	f7f9 ff0b 	bl	80049c8 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d102      	bne.n	800abc0 <FreeRTOS_bind+0xd0>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800abba:	f06f 0315 	mvn.w	r3, #21
 800abbe:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    return xReturn;
 800abc0:	69fb      	ldr	r3, [r7, #28]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3720      	adds	r7, #32
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	0801576c 	.word	0x0801576c
 800abd0:	080157c0 	.word	0x080157c0
 800abd4:	080157ec 	.word	0x080157ec

0800abd8 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08a      	sub	sp, #40	; 0x28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800abe6:	2300      	movs	r3, #0
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	61fb      	str	r3, [r7, #28]
    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800abf4:	2b06      	cmp	r3, #6
 800abf6:	d102      	bne.n	800abfe <vSocketBind+0x26>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800abf8:	4b43      	ldr	r3, [pc, #268]	; (800ad08 <vSocketBind+0x130>)
 800abfa:	623b      	str	r3, [r7, #32]
 800abfc:	e001      	b.n	800ac02 <vSocketBind+0x2a>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800abfe:	4b43      	ldr	r3, [pc, #268]	; (800ad0c <vSocketBind+0x134>)
 800ac00:	623b      	str	r3, [r7, #32]

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) uxAddressLength;

    configASSERT( pxSocket != NULL );
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d104      	bne.n	800ac12 <vSocketBind+0x3a>
 800ac08:	4941      	ldr	r1, [pc, #260]	; (800ad10 <vSocketBind+0x138>)
 800ac0a:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 800ac0e:	f7f5 ff5e 	bl	8000ace <vAssertCalled>
    configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac18:	d104      	bne.n	800ac24 <vSocketBind+0x4c>
 800ac1a:	493d      	ldr	r1, [pc, #244]	; (800ad10 <vSocketBind+0x138>)
 800ac1c:	f240 5011 	movw	r0, #1297	; 0x511
 800ac20:	f7f5 ff55 	bl	8000ace <vAssertCalled>
            /* pxAddress will be NULL if sendto() was called on a socket without the
             * socket being bound to an address. In this case, automatically allocate
             * an address to the socket.  There is a small chance that the allocated
             * port will already be in use - if that is the case, then the check below
             * [pxListFindListItemWithValue()] will result in an error being returned. */
            if( pxAddress == NULL )
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d105      	bne.n	800ac36 <vSocketBind+0x5e>
            {
                pxAddress = &xAddress;
 800ac2a:	f107 0314 	add.w	r3, r7, #20
 800ac2e:	61fb      	str	r3, [r7, #28]
                /* Put the port to zero to be assigned later. */
                pxAddress->sin_port = 0U;
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	2200      	movs	r2, #0
 800ac34:	805a      	strh	r2, [r3, #2]
        }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d104      	bne.n	800ac46 <vSocketBind+0x6e>
 800ac3c:	4934      	ldr	r1, [pc, #208]	; (800ad10 <vSocketBind+0x138>)
 800ac3e:	f240 5025 	movw	r0, #1317	; 0x525
 800ac42:	f7f5 ff44 	bl	8000ace <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	885b      	ldrh	r3, [r3, #2]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d111      	bne.n	800ac72 <vSocketBind+0x9a>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 f961 	bl	800af1c <prvGetPrivatePortNumber>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	885b      	ldrh	r3, [r3, #2]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d103      	bne.n	800ac72 <vSocketBind+0x9a>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800ac6a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
 800ac70:	e045      	b.n	800acfe <vSocketBind+0x126>
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            /* Check to ensure the port is not already in use.  If the bind is
             * called internally, a port MAY be used by more than one socket. */
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d004      	beq.n	800ac82 <vSocketBind+0xaa>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ac7e:	2b06      	cmp	r3, #6
 800ac80:	d024      	beq.n	800accc <vSocketBind+0xf4>
                ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	885b      	ldrh	r3, [r3, #2]
 800ac86:	4619      	mov	r1, r3
 800ac88:	6a38      	ldr	r0, [r7, #32]
 800ac8a:	f000 f99f 	bl	800afcc <pxListFindListItemWithValue>
 800ac8e:	4603      	mov	r3, r0
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d01b      	beq.n	800accc <vSocketBind+0xf4>
            {
                FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ac9a:	2b06      	cmp	r3, #6
 800ac9c:	d101      	bne.n	800aca2 <vSocketBind+0xca>
 800ac9e:	491d      	ldr	r1, [pc, #116]	; (800ad14 <vSocketBind+0x13c>)
 800aca0:	e000      	b.n	800aca4 <vSocketBind+0xcc>
 800aca2:	491d      	ldr	r1, [pc, #116]	; (800ad18 <vSocketBind+0x140>)
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	885b      	ldrh	r3, [r3, #2]
 800aca8:	021b      	lsls	r3, r3, #8
 800acaa:	b21a      	sxth	r2, r3
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	885b      	ldrh	r3, [r3, #2]
 800acb0:	0a1b      	lsrs	r3, r3, #8
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	b21b      	sxth	r3, r3
 800acb6:	4313      	orrs	r3, r2
 800acb8:	b21b      	sxth	r3, r3
 800acba:	b29b      	uxth	r3, r3
 800acbc:	461a      	mov	r2, r3
 800acbe:	4817      	ldr	r0, [pc, #92]	; (800ad1c <vSocketBind+0x144>)
 800acc0:	f7f5 fedc 	bl	8000a7c <vLoggingPrintf>
                                         ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                         FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800acc4:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800acc8:	627b      	str	r3, [r7, #36]	; 0x24
 800acca:	e018      	b.n	800acfe <vSocketBind+0x126>
            }
            else
            {
                /* Allocate the port number to the socket.
                 * This macro will set 'xBoundSocketListItem->xItemValue' */
                socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	885b      	ldrh	r3, [r3, #2]
 800acd0:	461a      	mov	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	609a      	str	r2, [r3, #8]

                /* And also store it in a socket field 'usLocalPort' in host-byte-order,
                 * mostly used for logging and debugging purposes */
                pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	885b      	ldrh	r3, [r3, #2]
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	b21a      	sxth	r2, r3
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	885b      	ldrh	r3, [r3, #2]
 800ace2:	0a1b      	lsrs	r3, r3, #8
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	b21b      	sxth	r3, r3
 800ace8:	4313      	orrs	r3, r2
 800acea:	b21b      	sxth	r3, r3
 800acec:	b29a      	uxth	r2, r3
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	849a      	strh	r2, [r3, #36]	; 0x24
                            vTaskSuspendAll();
                        }
                    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

                    /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
                    vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3308      	adds	r3, #8
 800acf6:	4619      	mov	r1, r3
 800acf8:	6a38      	ldr	r0, [r7, #32]
 800acfa:	f7fa f84a 	bl	8004d92 <vListInsertEnd>
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /* Tested */
 800ad00:	4618      	mov	r0, r3
 800ad02:	3728      	adds	r7, #40	; 0x28
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20027148 	.word	0x20027148
 800ad0c:	2002715c 	.word	0x2002715c
 800ad10:	0801576c 	.word	0x0801576c
 800ad14:	08015810 	.word	0x08015810
 800ad18:	08015814 	.word	0x08015814
 800ad1c:	08015818 	.word	0x08015818

0800ad20 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
    #endif
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800ad28:	230a      	movs	r3, #10
 800ad2a:	733b      	strb	r3, [r7, #12]
    xCloseEvent.pvData = xSocket;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	613b      	str	r3, [r7, #16]

    if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <FreeRTOS_closesocket+0x1e>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3c:	d102      	bne.n	800ad44 <FreeRTOS_closesocket+0x24>
    {
        xResult = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	617b      	str	r3, [r7, #20]
 800ad42:	e011      	b.n	800ad68 <FreeRTOS_closesocket+0x48>
         * packet handling. */

        /* Note when changing the time-out value below, it must be checked who is calling
         * this function. If it is called by the IP-task, a deadlock could occur.
         * The IP-task would only call it in case of a user call-back */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800ad44:	f107 030c 	add.w	r3, r7, #12
 800ad48:	2100      	movs	r1, #0
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe fefc 	bl	8009b48 <xSendEventStructToIPTask>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d106      	bne.n	800ad64 <FreeRTOS_closesocket+0x44>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800ad56:	4807      	ldr	r0, [pc, #28]	; (800ad74 <FreeRTOS_closesocket+0x54>)
 800ad58:	f7f5 fe90 	bl	8000a7c <vLoggingPrintf>
            xResult = -1;
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad60:	617b      	str	r3, [r7, #20]
 800ad62:	e001      	b.n	800ad68 <FreeRTOS_closesocket+0x48>
        }
        else
        {
            xResult = 1;
 800ad64:	2301      	movs	r3, #1
 800ad66:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800ad68:	697b      	ldr	r3, [r7, #20]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	0801583c 	.word	0x0801583c

0800ad78 <vSocketClose>:
 * @param[in] pxSocket: The socket descriptor of the socket being closed.
 *
 * @return Returns NULL, always.
 */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800ad78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af02      	add	r7, sp, #8
 800ad7e:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* For TCP: clean up a little more. */
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ad86:	2b06      	cmp	r3, #6
 800ad88:	d122      	bne.n	800add0 <vSocketClose+0x58>
            {
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d004      	beq.n	800ad9c <vSocketClose+0x24>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad96:	4618      	mov	r0, r3
 800ad98:	f006 fed6 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
                        }

                        /* Free the resources which were claimed by the tcpWin member */
                        vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	33d8      	adds	r3, #216	; 0xd8
 800ada0:	4618      	mov	r0, r3
 800ada2:	f004 fb03 	bl	800f3ac <vTCPWindowDestroy>
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* Free the input and output streams */
                if( pxSocket->u.xTCP.rxStream != NULL )
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d004      	beq.n	800adb8 <vSocketClose+0x40>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                    vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fc fc50 	bl	8007658 <vPortFree>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d004      	beq.n	800adca <vSocketClose+0x52>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                    vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fc fc47 	bl	8007658 <vPortFree>
                }

                /* In case this is a child socket, make sure the child-count of the
                 * parent socket is decreased. */
                prvTCPSetSocketCount( pxSocket );
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f850 	bl	800ae70 <prvTCPSetSocketCount>
        }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d004      	beq.n	800ade2 <vSocketClose+0x6a>
            {
                vTaskSuspendAll();
            }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3308      	adds	r3, #8
 800addc:	4618      	mov	r0, r3
 800adde:	f7fa f835 	bl	8004e4c <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ade8:	2b11      	cmp	r3, #17
 800adea:	d112      	bne.n	800ae12 <vSocketClose+0x9a>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800adec:	e00d      	b.n	800ae0a <vSocketClose+0x92>
        {
            pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff fbc9 	bl	800a58c <vCastPointerTo_NetworkBufferDescriptor_t>
 800adfa:	60f8      	str	r0, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fa f824 	bl	8004e4c <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f006 fe9f 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1ed      	bne.n	800adee <vSocketClose+0x76>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d004      	beq.n	800ae24 <vSocketClose+0xac>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7f9 ff3a 	bl	8004c98 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
        {
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ae2a:	2b06      	cmp	r3, #6
 800ae2c:	d114      	bne.n	800ae58 <vSocketClose+0xe0>
            {
                FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%u to %lxip:%u]: buffers %lu socks %lu\n",
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae32:	461d      	mov	r5, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ae3c:	461e      	mov	r6, r3
 800ae3e:	f006 feb7 	bl	8011bb0 <uxGetNumberOfFreeNetworkBuffers>
 800ae42:	4602      	mov	r2, r0
 800ae44:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <vSocketClose+0xf0>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	9200      	str	r2, [sp, #0]
 800ae4c:	4633      	mov	r3, r6
 800ae4e:	4622      	mov	r2, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	4806      	ldr	r0, [pc, #24]	; (800ae6c <vSocketClose+0xf4>)
 800ae54:	f7f5 fe12 	bl	8000a7c <vLoggingPrintf>
        }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f7fc fbfd 	bl	8007658 <vPortFree>

    return NULL;
 800ae5e:	2300      	movs	r3, #0
} /* Tested */
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae68:	20027148 	.word	0x20027148
 800ae6c:	0801585c 	.word	0x0801585c

0800ae70 <prvTCPSetSocketCount>:
 *        keep a pointer to it.
 *
 * @param[in] pxSocketToDelete: The socket being closed.
 */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af02      	add	r7, sp, #8
 800ae76:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800ae78:	4b24      	ldr	r3, [pc, #144]	; (800af0c <prvTCPSetSocketCount+0x9c>)
 800ae7a:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae80:	81fb      	strh	r3, [r7, #14]

        for( pxIterator = listGET_NEXT( pxEnd );
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	617b      	str	r3, [r7, #20]
 800ae88:	e038      	b.n	800aefc <prvTCPSetSocketCount+0x8c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff fb66 	bl	800a560 <vCastPointerTo_FreeRTOS_Socket_t>
 800ae94:	60b8      	str	r0, [r7, #8]

            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d12a      	bne.n	800aef6 <prvTCPSetSocketCount+0x86>
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800aea4:	89fa      	ldrh	r2, [r7, #14]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d125      	bne.n	800aef6 <prvTCPSetSocketCount+0x86>
                ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d020      	beq.n	800aef6 <prvTCPSetSocketCount+0x86>
            {
                pxOtherSocket->u.xTCP.usChildCount--;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800aeba:	3b01      	subs	r3, #1
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aec8:	4619      	mov	r1, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800aed0:	461a      	mov	r2, r3
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aed8:	4618      	mov	r0, r3
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <prvTCPSetSocketCount+0x78>
 800aee4:	4b0a      	ldr	r3, [pc, #40]	; (800af10 <prvTCPSetSocketCount+0xa0>)
 800aee6:	e000      	b.n	800aeea <prvTCPSetSocketCount+0x7a>
 800aee8:	4b0a      	ldr	r3, [pc, #40]	; (800af14 <prvTCPSetSocketCount+0xa4>)
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	4603      	mov	r3, r0
 800aeee:	480a      	ldr	r0, [pc, #40]	; (800af18 <prvTCPSetSocketCount+0xa8>)
 800aef0:	f7f5 fdc4 	bl	8000a7c <vLoggingPrintf>
                                         pxOtherSocket->usLocalPort,
                                         pxOtherSocket->u.xTCP.usChildCount,
                                         pxOtherSocket->u.xTCP.usBacklog,
                                         ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                break;
 800aef4:	e006      	b.n	800af04 <prvTCPSetSocketCount+0x94>
             pxIterator = listGET_NEXT( pxIterator ) )
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	617b      	str	r3, [r7, #20]
        for( pxIterator = listGET_NEXT( pxEnd );
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	429a      	cmp	r2, r3
 800af02:	d1c2      	bne.n	800ae8a <prvTCPSetSocketCount+0x1a>
            }
        }
    }
 800af04:	bf00      	nop
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20027150 	.word	0x20027150
 800af10:	0801589c 	.word	0x0801589c
 800af14:	080158a0 	.word	0x080158a0
 800af18:	080158a4 	.word	0x080158a4

0800af1c <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800af24:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800af28:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800af2a:	89fb      	ldrh	r3, [r7, #14]
 800af2c:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b06      	cmp	r3, #6
 800af3a:	d102      	bne.n	800af42 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800af3c:	4b21      	ldr	r3, [pc, #132]	; (800afc4 <prvGetPrivatePortNumber+0xa8>)
 800af3e:	613b      	str	r3, [r7, #16]
 800af40:	e001      	b.n	800af46 <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800af42:	4b21      	ldr	r3, [pc, #132]	; (800afc8 <prvGetPrivatePortNumber+0xac>)
 800af44:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800af46:	f107 0308 	add.w	r3, r7, #8
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7f5 fdb1 	bl	8000ab2 <xApplicationGetRandomNumber>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d030      	beq.n	800afb8 <prvGetPrivatePortNumber+0x9c>
        }

        /* Map the random to a candidate port. */
        usResult =
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
            ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount );
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	b29b      	uxth	r3, r3
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800af5a:	89fa      	ldrh	r2, [r7, #14]
 800af5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800af60:	fb02 f201 	mul.w	r2, r2, r1
 800af64:	1a9b      	subs	r3, r3, r2
 800af66:	b29b      	uxth	r3, r3
        usResult =
 800af68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af6c:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800af6e:	8abb      	ldrh	r3, [r7, #20]
 800af70:	021b      	lsls	r3, r3, #8
 800af72:	b21a      	sxth	r2, r3
 800af74:	8abb      	ldrh	r3, [r7, #20]
 800af76:	0a1b      	lsrs	r3, r3, #8
 800af78:	b29b      	uxth	r3, r3
 800af7a:	b21b      	sxth	r3, r3
 800af7c:	4313      	orrs	r3, r2
 800af7e:	b21b      	sxth	r3, r3
 800af80:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800af82:	4619      	mov	r1, r3
 800af84:	6938      	ldr	r0, [r7, #16]
 800af86:	f000 f821 	bl	800afcc <pxListFindListItemWithValue>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800af90:	8abb      	ldrh	r3, [r7, #20]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	b21a      	sxth	r2, r3
 800af96:	8abb      	ldrh	r3, [r7, #20]
 800af98:	0a1b      	lsrs	r3, r3, #8
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	b21b      	sxth	r3, r3
 800af9e:	4313      	orrs	r3, r2
 800afa0:	b21b      	sxth	r3, r3
 800afa2:	82bb      	strh	r3, [r7, #20]
            break;
 800afa4:	e009      	b.n	800afba <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800afaa:	8afb      	ldrh	r3, [r7, #22]
 800afac:	3b01      	subs	r3, #1
 800afae:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800afb0:	8afb      	ldrh	r3, [r7, #22]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1c7      	bne.n	800af46 <prvGetPrivatePortNumber+0x2a>
 800afb6:	e000      	b.n	800afba <prvGetPrivatePortNumber+0x9e>
            break;
 800afb8:	bf00      	nop

    return usResult;
 800afba:	8abb      	ldrh	r3, [r7, #20]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3718      	adds	r7, #24
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20027148 	.word	0x20027148
 800afc8:	2002715c 	.word	0x2002715c

0800afcc <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800afda:	f7ff fa17 	bl	800a40c <xIPIsNetworkTaskReady>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d018      	beq.n	800b016 <pxListFindListItemWithValue+0x4a>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d015      	beq.n	800b016 <pxListFindListItemWithValue+0x4a>
    {
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3308      	adds	r3, #8
 800afee:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	613b      	str	r3, [r7, #16]
 800aff6:	e00a      	b.n	800b00e <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	429a      	cmp	r2, r3
 800b000:	d102      	bne.n	800b008 <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	617b      	str	r3, [r7, #20]
                break;
 800b006:	e006      	b.n	800b016 <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	613b      	str	r3, [r7, #16]
        for( pxIterator = listGET_NEXT( pxEnd );
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	429a      	cmp	r2, r3
 800b014:	d1f0      	bne.n	800aff8 <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800b016:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	480d      	ldr	r0, [pc, #52]	; (800b064 <pxUDPSocketLookup+0x44>)
 800b030:	f7ff ffcc 	bl	800afcc <pxListFindListItemWithValue>
 800b034:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00d      	beq.n	800b058 <pxUDPSocketLookup+0x38>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff fa8d 	bl	800a560 <vCastPointerTo_FreeRTOS_Socket_t>
 800b046:	60f8      	str	r0, [r7, #12]
        configASSERT( pxSocket != NULL );
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d104      	bne.n	800b058 <pxUDPSocketLookup+0x38>
 800b04e:	4906      	ldr	r1, [pc, #24]	; (800b068 <pxUDPSocketLookup+0x48>)
 800b050:	f640 008b 	movw	r0, #2187	; 0x88b
 800b054:	f7f5 fd3b 	bl	8000ace <vAssertCalled>
    }

    return pxSocket;
 800b058:	68fb      	ldr	r3, [r7, #12]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	2002715c 	.word	0x2002715c
 800b068:	0801576c 	.word	0x0801576c

0800b06c <FreeRTOS_inet_ntoa>:
 * @return If all checks pass, then the pointer returned will be same as pcBuffer
 *         and will have the address stored in the location. Else, NULL is returned.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800b06c:	b480      	push	{r7}
 800b06e:	b08d      	sub	sp, #52	; 0x34
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800b07a:	1d3b      	adds	r3, r7, #4
 800b07c:	61bb      	str	r3, [r7, #24]
    const char * pcResult = pcBuffer;
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	627b      	str	r3, [r7, #36]	; 0x24
    const socklen_t uxSize = 16;
 800b082:	2310      	movs	r3, #16
 800b084:	617b      	str	r3, [r7, #20]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800b086:	2300      	movs	r3, #0
 800b088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b08a:	e073      	b.n	800b174 <FreeRTOS_inet_ntoa+0x108>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	4413      	add	r3, r2
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800b098:	2302      	movs	r3, #2
 800b09a:	61fb      	str	r3, [r7, #28]
        socklen_t uxNeeded;

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800b09c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b0a0:	4b39      	ldr	r3, [pc, #228]	; (800b188 <FreeRTOS_inet_ntoa+0x11c>)
 800b0a2:	fba3 1302 	umull	r1, r3, r3, r2
 800b0a6:	08d9      	lsrs	r1, r3, #3
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	440b      	add	r3, r1
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	b2d9      	uxtb	r1, r3
 800b0b4:	f107 020c 	add.w	r2, r7, #12
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	460a      	mov	r2, r1
 800b0be:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800b0c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0c4:	4a30      	ldr	r2, [pc, #192]	; (800b188 <FreeRTOS_inet_ntoa+0x11c>)
 800b0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ca:	08db      	lsrs	r3, r3, #3
 800b0cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( uxSource == 1U )
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d003      	beq.n	800b0de <FreeRTOS_inet_ntoa+0x72>
            {
                break;
            }

            uxSource--;
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	61fb      	str	r3, [r7, #28]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800b0dc:	e7de      	b.n	800b09c <FreeRTOS_inet_ntoa+0x30>
                break;
 800b0de:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800b0e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0e4:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61fb      	str	r3, [r7, #28]
 800b0ea:	e009      	b.n	800b100 <FreeRTOS_inet_ntoa+0x94>
        {
            if( pucDigits[ uxSource ] != 0U )
 800b0ec:	f107 020c 	add.w	r2, r7, #12
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d106      	bne.n	800b108 <FreeRTOS_inet_ntoa+0x9c>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	61fb      	str	r3, [r7, #28]
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d9f2      	bls.n	800b0ec <FreeRTOS_inet_ntoa+0x80>
 800b106:	e000      	b.n	800b10a <FreeRTOS_inet_ntoa+0x9e>
            {
                break;
 800b108:	bf00      	nop
            }
        }

        /* Write e.g. "192.", which is 3 digits and a dot. */
        uxNeeded = ( ( socklen_t ) sockDIGIT_COUNT - uxSource ) + 1U;
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	f1c3 0304 	rsb	r3, r3, #4
 800b110:	613b      	str	r3, [r7, #16]

        if( ( uxIndex + uxNeeded ) > uxSize )
 800b112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	4413      	add	r3, r2
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d213      	bcs.n	800b146 <FreeRTOS_inet_ntoa+0xda>
        {
            /* The result won't fit. */
            pcResult = NULL;
 800b11e:	2300      	movs	r3, #0
 800b120:	627b      	str	r3, [r7, #36]	; 0x24
 800b122:	e02a      	b.n	800b17a <FreeRTOS_inet_ntoa+0x10e>
            break;
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800b124:	f107 020c 	add.w	r2, r7, #12
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	4413      	add	r3, r2
 800b12c:	781a      	ldrb	r2, [r3, #0]
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b132:	440b      	add	r3, r1
 800b134:	3230      	adds	r2, #48	; 0x30
 800b136:	b2d2      	uxtb	r2, r2
 800b138:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	3301      	adds	r3, #1
 800b13e:	62bb      	str	r3, [r7, #40]	; 0x28
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	3301      	adds	r3, #1
 800b144:	61fb      	str	r3, [r7, #28]
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d9eb      	bls.n	800b124 <FreeRTOS_inet_ntoa+0xb8>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d805      	bhi.n	800b15e <FreeRTOS_inet_ntoa+0xf2>
        {
            pcBuffer[ uxIndex ] = '.';
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b156:	4413      	add	r3, r2
 800b158:	222e      	movs	r2, #46	; 0x2e
 800b15a:	701a      	strb	r2, [r3, #0]
 800b15c:	e004      	b.n	800b168 <FreeRTOS_inet_ntoa+0xfc>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	4413      	add	r3, r2
 800b164:	2200      	movs	r2, #0
 800b166:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	3301      	adds	r3, #1
 800b16c:	62bb      	str	r3, [r7, #40]	; 0x28
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800b16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b170:	3301      	adds	r3, #1
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	2b03      	cmp	r3, #3
 800b178:	d988      	bls.n	800b08c <FreeRTOS_inet_ntoa+0x20>
    }

    return pcResult;
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3734      	adds	r7, #52	; 0x34
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	cccccccd 	.word	0xcccccccd

0800b18c <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d106      	bne.n	800b1ae <FreeRTOS_inet_ntop+0x22>
    {
        case FREERTOS_AF_INET:
            pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	6879      	ldr	r1, [r7, #4]
 800b1a4:	68b8      	ldr	r0, [r7, #8]
 800b1a6:	f000 f80a 	bl	800b1be <FreeRTOS_inet_ntop4>
 800b1aa:	6178      	str	r0, [r7, #20]
            break;
 800b1ac:	e002      	b.n	800b1b4 <FreeRTOS_inet_ntop+0x28>

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	617b      	str	r3, [r7, #20]
            break;
 800b1b2:	bf00      	nop
    }

    return pcResult;
 800b1b4:	697b      	ldr	r3, [r7, #20]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b088      	sub	sp, #32
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	60f8      	str	r0, [r7, #12]
 800b1c6:	60b9      	str	r1, [r7, #8]
 800b1c8:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b0f      	cmp	r3, #15
 800b1ce:	d802      	bhi.n	800b1d6 <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	61fb      	str	r3, [r7, #28]
 800b1d4:	e00e      	b.n	800b1f4 <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800b1d6:	f107 0314 	add.w	r3, r7, #20
 800b1da:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	68b9      	ldr	r1, [r7, #8]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff ff3e 	bl	800b06c <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800b1f4:	69fb      	ldr	r3, [r7, #28]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3720      	adds	r7, #32
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <FreeRTOS_inet_pton4>:
 *
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
BaseType_t FreeRTOS_inet_pton4( const char * pcSource,
                                void * pvDestination )
{
 800b1fe:	b480      	push	{r7}
 800b200:	b08d      	sub	sp, #52	; 0x34
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	6039      	str	r1, [r7, #0]
    const uint32_t ulDecimalBase = 10U;
 800b208:	230a      	movs	r3, #10
 800b20a:	61fb      	str	r3, [r7, #28]
    uint8_t ucOctet[ socketMAX_IP_ADDRESS_OCTETS ];
    uint32_t ulReturn = 0UL, ulValue;
 800b20c:	2300      	movs	r3, #0
 800b20e:	60fb      	str	r3, [r7, #12]
    UBaseType_t uxOctetNumber;
    BaseType_t xResult = pdPASS;
 800b210:	2301      	movs	r3, #1
 800b212:	627b      	str	r3, [r7, #36]	; 0x24
    const char * pcIPAddress = pcSource;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	623b      	str	r3, [r7, #32]
    const void * pvCopySource;

    /* Translate "192.168.2.100" to a 32-bit number, network-endian. */
    for( uxOctetNumber = 0U; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 800b218:	2300      	movs	r3, #0
 800b21a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b21c:	e043      	b.n	800b2a6 <FreeRTOS_inet_pton4+0xa8>
    {
        ulValue = 0UL;
 800b21e:	2300      	movs	r3, #0
 800b220:	62fb      	str	r3, [r7, #44]	; 0x2c

        while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800b222:	e011      	b.n	800b248 <FreeRTOS_inet_pton4+0x4a>
        {
            BaseType_t xChar;

            /* Move previous read characters into the next decimal
             * position. */
            ulValue *= ulDecimalBase;
 800b224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b226:	69fa      	ldr	r2, [r7, #28]
 800b228:	fb02 f303 	mul.w	r3, r2, r3
 800b22c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Add the binary value of the ascii character. */
            xChar = ( BaseType_t ) pcIPAddress[ 0 ];
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	61bb      	str	r3, [r7, #24]
            xChar = xChar - ( BaseType_t ) '0';
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	3b30      	subs	r3, #48	; 0x30
 800b238:	61bb      	str	r3, [r7, #24]
            ulValue += ( uint32_t ) xChar;
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b23e:	4413      	add	r3, r2
 800b240:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Move to next character in the string. */
            pcIPAddress++;
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	3301      	adds	r3, #1
 800b246:	623b      	str	r3, [r7, #32]
        while( ( *pcIPAddress >= '0' ) && ( *pcIPAddress <= '9' ) )
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b2f      	cmp	r3, #47	; 0x2f
 800b24e:	d903      	bls.n	800b258 <FreeRTOS_inet_pton4+0x5a>
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	2b39      	cmp	r3, #57	; 0x39
 800b256:	d9e5      	bls.n	800b224 <FreeRTOS_inet_pton4+0x26>
        }

        /* Check characters were read. */
        if( pcIPAddress == pcSource )
 800b258:	6a3a      	ldr	r2, [r7, #32]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d101      	bne.n	800b264 <FreeRTOS_inet_pton4+0x66>
        {
            xResult = pdFAIL;
 800b260:	2300      	movs	r3, #0
 800b262:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Check the value fits in an 8-bit number. */
        if( ulValue > 0xffUL )
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	2bff      	cmp	r3, #255	; 0xff
 800b268:	d902      	bls.n	800b270 <FreeRTOS_inet_pton4+0x72>
        {
            xResult = pdFAIL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
 800b26e:	e014      	b.n	800b29a <FreeRTOS_inet_pton4+0x9c>
        }
        else
        {
            ucOctet[ uxOctetNumber ] = ( uint8_t ) ulValue;
 800b270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b272:	b2d9      	uxtb	r1, r3
 800b274:	f107 0210 	add.w	r2, r7, #16
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	4413      	add	r3, r2
 800b27c:	460a      	mov	r2, r1
 800b27e:	701a      	strb	r2, [r3, #0]

            /* Check the next character is as expected. */
            if( uxOctetNumber < ( socketMAX_IP_ADDRESS_OCTETS - 1U ) )
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	2b02      	cmp	r3, #2
 800b284:	d809      	bhi.n	800b29a <FreeRTOS_inet_pton4+0x9c>
            {
                if( *pcIPAddress != '.' )
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	2b2e      	cmp	r3, #46	; 0x2e
 800b28c:	d002      	beq.n	800b294 <FreeRTOS_inet_pton4+0x96>
                {
                    xResult = pdFAIL;
 800b28e:	2300      	movs	r3, #0
 800b290:	627b      	str	r3, [r7, #36]	; 0x24
 800b292:	e002      	b.n	800b29a <FreeRTOS_inet_pton4+0x9c>
                }
                else
                {
                    /* Move past the dot. */
                    pcIPAddress++;
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	3301      	adds	r3, #1
 800b298:	623b      	str	r3, [r7, #32]
                }
            }
        }

        if( xResult == pdFAIL )
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d006      	beq.n	800b2ae <FreeRTOS_inet_pton4+0xb0>
    for( uxOctetNumber = 0U; uxOctetNumber < socketMAX_IP_ADDRESS_OCTETS; uxOctetNumber++ )
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d9b8      	bls.n	800b21e <FreeRTOS_inet_pton4+0x20>
 800b2ac:	e000      	b.n	800b2b0 <FreeRTOS_inet_pton4+0xb2>
        {
            /* No point going on. */
            break;
 800b2ae:	bf00      	nop
        }
    }

    if( *pcIPAddress != ( char ) 0 )
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <FreeRTOS_inet_pton4+0xbe>
    {
        /* Expected the end of the string. */
        xResult = pdFAIL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( uxOctetNumber != socketMAX_IP_ADDRESS_OCTETS )
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	d001      	beq.n	800b2c6 <FreeRTOS_inet_pton4+0xc8>
    {
        /* Didn't read enough octets. */
        xResult = pdFAIL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xResult == pdPASS )
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d10b      	bne.n	800b2e4 <FreeRTOS_inet_pton4+0xe6>
    {
        /* lint: ucOctet has been set because xResult == pdPASS. */
        ulReturn = FreeRTOS_inet_addr_quick( ucOctet[ 0 ], ucOctet[ 1 ], ucOctet[ 2 ], ucOctet[ 3 ] );
 800b2cc:	7cfb      	ldrb	r3, [r7, #19]
 800b2ce:	061a      	lsls	r2, r3, #24
 800b2d0:	7cbb      	ldrb	r3, [r7, #18]
 800b2d2:	041b      	lsls	r3, r3, #16
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	7c7b      	ldrb	r3, [r7, #17]
 800b2d8:	021b      	lsls	r3, r3, #8
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	7c3a      	ldrb	r2, [r7, #16]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	e001      	b.n	800b2e8 <FreeRTOS_inet_pton4+0xea>
    }
    else
    {
        ulReturn = 0UL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	60fb      	str	r3, [r7, #12]
    }

    pvCopySource = ( const void * ) &ulReturn;
 800b2e8:	f107 030c 	add.w	r3, r7, #12
 800b2ec:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvDestination, pvCopySource, sizeof( ulReturn ) );
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	601a      	str	r2, [r3, #0]

    return xResult;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3734      	adds	r7, #52	; 0x34
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <FreeRTOS_inet_addr>:
 *                         (dotted decimal) format.
 *
 * @return The 32-bit representation of IP(v4) address.
 */
uint32_t FreeRTOS_inet_addr( const char * pcIPAddress )
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
    uint32_t ulReturn = 0UL;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]

    /* inet_pton AF_INET target is a 4-byte 'struct in_addr'. */
    ( void ) FreeRTOS_inet_pton4( pcIPAddress, &( ulReturn ) );
 800b312:	f107 030c 	add.w	r3, r7, #12
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f7ff ff70 	bl	800b1fe <FreeRTOS_inet_pton4>

    return ulReturn;
 800b31e:	68fb      	ldr	r3, [r7, #12]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket: The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
        }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            if( pxSocket->pxSocketSet != NULL )
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b334:	2b00      	cmp	r3, #0
 800b336:	d015      	beq.n	800b364 <vSocketWakeUpUser+0x3c>
            {
                EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	0a1b      	lsrs	r3, r3, #8
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	60fb      	str	r3, [r7, #12]

                if( xSelectBits != 0UL )
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00c      	beq.n	800b364 <vSocketWakeUpUser+0x3c>
                {
                    pxSocket->xSocketBits |= xSelectBits;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	431a      	orrs	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	631a      	str	r2, [r3, #48]	; 0x30
                    ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68f9      	ldr	r1, [r7, #12]
 800b35e:	4618      	mov	r0, r3
 800b360:	f7f9 fc18 	bl	8004b94 <xEventGroupSetBits>
                }
            }

            pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	601a      	str	r2, [r3, #0]
        }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00b      	beq.n	800b390 <vSocketWakeUpUser+0x68>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d007      	beq.n	800b390 <vSocketWakeUpUser+0x68>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4619      	mov	r1, r3
 800b38a:	4610      	mov	r0, r2
 800b38c:	f7f9 fc02 	bl	8004b94 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0UL;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	601a      	str	r2, [r3, #0]
}
 800b396:	bf00      	nop
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <xTCPTimerCheck>:
 * @param[in] xWillSleep: Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800b3a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
        TickType_t xNow = xTaskGetTickCount();
 800b3ae:	f7fa feb5 	bl	800611c <xTaskGetTickCount>
 800b3b2:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800b3b4:	4b32      	ldr	r3, [pc, #200]	; (800b480 <xTCPTimerCheck+0xe0>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	623b      	str	r3, [r7, #32]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800b3be:	4b31      	ldr	r3, [pc, #196]	; (800b484 <xTCPTimerCheck+0xe4>)
 800b3c0:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b3c2:	4b31      	ldr	r3, [pc, #196]	; (800b488 <xTCPTimerCheck+0xe8>)
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800b3c8:	4a2d      	ldr	r2, [pc, #180]	; (800b480 <xTCPTimerCheck+0xe0>)
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d14c      	bne.n	800b46e <xTCPTimerCheck+0xce>
        {
            xDelta = 1U;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800b3d8:	e049      	b.n	800b46e <xTCPTimerCheck+0xce>
        {
            pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff f8be 	bl	800a560 <vCastPointerTo_FreeRTOS_Socket_t>
 800b3e4:	6138      	str	r0, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d100      	bne.n	800b3f8 <xTCPTimerCheck+0x58>
            {
                continue;
 800b3f6:	e03a      	b.n	800b46e <xTCPTimerCheck+0xce>
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3fe:	461a      	mov	r2, r3
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	4293      	cmp	r3, r2
 800b404:	d20a      	bcs.n	800b41c <xTCPTimerCheck+0x7c>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	b29a      	uxth	r2, r3
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b41a:	e00b      	b.n	800b434 <xTCPTimerCheck+0x94>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2200      	movs	r2, #0
 800b420:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                xRc = xTCPSocketCheck( pxSocket );
 800b424:	6938      	ldr	r0, [r7, #16]
 800b426:	f000 ff2d 	bl	800c284 <xTCPSocketCheck>
 800b42a:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	da00      	bge.n	800b434 <xTCPTimerCheck+0x94>
                {
                    /* Continue because the socket was deleted. */
                    continue;
 800b432:	e01c      	b.n	800b46e <xTCPTimerCheck+0xce>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d008      	beq.n	800b44e <xTCPTimerCheck+0xae>
            {
                if( xWillSleep != pdFALSE )
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <xTCPTimerCheck+0xaa>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800b442:	6938      	ldr	r0, [r7, #16]
 800b444:	f7ff ff70 	bl	800b328 <vSocketWakeUpUser>
 800b448:	e001      	b.n	800b44e <xTCPTimerCheck+0xae>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00a      	beq.n	800b46e <xTCPTimerCheck+0xce>
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b45e:	461a      	mov	r2, r3
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	4293      	cmp	r3, r2
 800b464:	d903      	bls.n	800b46e <xTCPTimerCheck+0xce>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b46c:	627b      	str	r3, [r7, #36]	; 0x24
        while( pxIterator != pxEnd )
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	429a      	cmp	r2, r3
 800b474:	d1b1      	bne.n	800b3da <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800b478:	4618      	mov	r0, r3
 800b47a:	3728      	adds	r7, #40	; 0x28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	200265e4 	.word	0x200265e4
 800b484:	20027150 	.word	0x20027150
 800b488:	20027148 	.word	0x20027148

0800b48c <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           uint32_t ulRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08a      	sub	sp, #40	; 0x28
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	603b      	str	r3, [r7, #0]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	623b      	str	r3, [r7, #32]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800b4a2:	4b1c      	ldr	r3, [pc, #112]	; (800b514 <pxTCPSocketLookup+0x88>)
 800b4a4:	61bb      	str	r3, [r7, #24]

        /* Parameter not yet supported. */
        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ac:	e024      	b.n	800b4f8 <pxTCPSocketLookup+0x6c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff f854 	bl	800a560 <vCastPointerTo_FreeRTOS_Socket_t>
 800b4b8:	6178      	str	r0, [r7, #20]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d115      	bne.n	800b4f2 <pxTCPSocketLookup+0x66>
            {
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d102      	bne.n	800b4d6 <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	61fb      	str	r3, [r7, #28]
 800b4d4:	e00d      	b.n	800b4f2 <pxTCPSocketLookup+0x66>
                }
                else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d107      	bne.n	800b4f2 <pxTCPSocketLookup+0x66>
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d102      	bne.n	800b4f2 <pxTCPSocketLookup+0x66>
                {
                    /* For sockets not in listening mode, find a match with
                     * xLocalPort, ulRemoteIP AND xRemotePort. */
                    pxResult = pxSocket;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	623b      	str	r3, [r7, #32]
                    break;
 800b4f0:	e006      	b.n	800b500 <pxTCPSocketLookup+0x74>
             pxIterator = listGET_NEXT( pxIterator ) )
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24
        for( pxIterator = listGET_NEXT( pxEnd );
 800b4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d1d6      	bne.n	800b4ae <pxTCPSocketLookup+0x22>
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <pxTCPSocketLookup+0x7e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	623b      	str	r3, [r7, #32]
        }

        return pxResult;
 800b50a:	6a3b      	ldr	r3, [r7, #32]
    }
 800b50c:	4618      	mov	r0, r3
 800b50e:	3728      	adds	r7, #40	; 0x28
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20027150 	.word	0x20027150

0800b518 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d025      	beq.n	800b574 <prvTCPCreateStream+0x5c>
        {
            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b52c:	617b      	str	r3, [r7, #20]

            if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10c      	bne.n	800b550 <prvTCPCreateStream+0x38>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	461a      	mov	r2, r3
 800b544:	4b32      	ldr	r3, [pc, #200]	; (800b610 <prvTCPCreateStream+0xf8>)
 800b546:	fba3 2302 	umull	r2, r3, r3, r2
 800b54a:	095a      	lsrs	r2, r3, #5
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	665a      	str	r2, [r3, #100]	; 0x64
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b554:	2b00      	cmp	r3, #0
 800b556:	d110      	bne.n	800b57a <prvTCPCreateStream+0x62>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	461a      	mov	r2, r3
 800b566:	4b2a      	ldr	r3, [pc, #168]	; (800b610 <prvTCPCreateStream+0xf8>)
 800b568:	fba3 2302 	umull	r2, r3, r3, r2
 800b56c:	095a      	lsrs	r2, r3, #5
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	669a      	str	r2, [r3, #104]	; 0x68
 800b572:	e002      	b.n	800b57a <prvTCPCreateStream+0x62>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b578:	617b      	str	r3, [r7, #20]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	3304      	adds	r3, #4
 800b57e:	617b      	str	r3, [r7, #20]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	f023 0303 	bic.w	r3, r3, #3
 800b586:	617b      	str	r3, [r7, #20]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	3314      	adds	r3, #20
 800b58c:	613b      	str	r3, [r7, #16]

        pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 800b58e:	6938      	ldr	r0, [r7, #16]
 800b590:	f7fb ffa4 	bl	80074dc <pvPortMalloc>
 800b594:	4603      	mov	r3, r0
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff f803 	bl	800a5a2 <vCastPointerTo_StreamBuffer_t>
 800b59c:	60f8      	str	r0, [r7, #12]

        if( pxBuffer == NULL )
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10e      	bne.n	800b5c2 <prvTCPCreateStream+0xaa>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800b5a4:	481b      	ldr	r0, [pc, #108]	; (800b614 <prvTCPCreateStream+0xfc>)
 800b5a6:	f7f5 fa69 	bl	8000a7c <vLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800b5b0:	f043 0308 	orr.w	r3, r3, #8
 800b5b4:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800b5b8:	2108      	movs	r1, #8
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f001 fd74 	bl	800d0a8 <vTCPStateChange>
 800b5c0:	e020      	b.n	800b604 <prvTCPCreateStream+0xec>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800b5c2:	2214      	movs	r2, #20
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f007 fc47 	bl	8012e5a <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800b5d2:	4b11      	ldr	r3, [pc, #68]	; (800b618 <prvTCPCreateStream+0x100>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00a      	beq.n	800b5f0 <prvTCPCreateStream+0xd8>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <prvTCPCreateStream+0xcc>
 800b5e0:	2152      	movs	r1, #82	; 0x52
 800b5e2:	e000      	b.n	800b5e6 <prvTCPCreateStream+0xce>
 800b5e4:	2154      	movs	r1, #84	; 0x54
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	480c      	ldr	r0, [pc, #48]	; (800b61c <prvTCPCreateStream+0x104>)
 800b5ec:	f7f5 fa46 	bl	8000a7c <vLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <prvTCPCreateStream+0xe6>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	675a      	str	r2, [r3, #116]	; 0x74
 800b5fc:	e002      	b.n	800b604 <prvTCPCreateStream+0xec>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	679a      	str	r2, [r3, #120]	; 0x78
            }
        }

        return pxBuffer;
 800b604:	68fb      	ldr	r3, [r7, #12]
    }
 800b606:	4618      	mov	r0, r3
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	51eb851f 	.word	0x51eb851f
 800b614:	08015a24 	.word	0x08015a24
 800b618:	2002660c 	.word	0x2002660c
 800b61c:	08015a48 	.word	0x08015a48

0800b620 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800b620:	b5b0      	push	{r4, r5, r7, lr}
 800b622:	b08c      	sub	sp, #48	; 0x30
 800b624:	af04      	add	r7, sp, #16
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
 800b62c:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b632:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	61bb      	str	r3, [r7, #24]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10a      	bne.n	800b654 <lTCPAddRxdata+0x34>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800b63e:	2101      	movs	r1, #1
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f7ff ff69 	bl	800b518 <prvTCPCreateStream>
 800b646:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d102      	bne.n	800b654 <lTCPAddRxdata+0x34>
            {
                xResult = -1;
 800b64e:	f04f 33ff 	mov.w	r3, #4294967295
 800b652:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	2b00      	cmp	r3, #0
 800b658:	db5c      	blt.n	800b714 <lTCPAddRxdata+0xf4>
                        pcData = NULL;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	68b9      	ldr	r1, [r7, #8]
 800b660:	69f8      	ldr	r0, [r7, #28]
 800b662:	f000 fb45 	bl	800bcf0 <uxStreamBufferAdd>
 800b666:	4603      	mov	r3, r0
 800b668:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    if( xResult != ( int32_t ) ulByteCount )
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	69ba      	ldr	r2, [r7, #24]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d013      	beq.n	800b69a <lTCPAddRxdata+0x7a>
                    {
                        FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	681c      	ldr	r4, [r3, #0]
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	689d      	ldr	r5, [r3, #8]
 800b67a:	69f8      	ldr	r0, [r7, #28]
 800b67c:	f7fe ff48 	bl	800a510 <uxStreamBufferFrontSpace>
 800b680:	4602      	mov	r2, r0
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	9303      	str	r3, [sp, #12]
 800b688:	9202      	str	r2, [sp, #8]
 800b68a:	9501      	str	r5, [sp, #4]
 800b68c:	9400      	str	r4, [sp, #0]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	69ba      	ldr	r2, [r7, #24]
 800b692:	68b9      	ldr	r1, [r7, #8]
 800b694:	4822      	ldr	r0, [pc, #136]	; (800b720 <lTCPAddRxdata+0x100>)
 800b696:	f7f5 f9f1 	bl	8000a7c <vLoggingPrintf>
                                                 ( UBaseType_t ) pxStream->uxFront ) );
                    }
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d139      	bne.n	800b714 <lTCPAddRxdata+0xf4>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    /* See if running out of space. */
                    if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d11f      	bne.n	800b6f0 <lTCPAddRxdata+0xd0>
                    {
                        size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe ff2b 	bl	800a510 <uxStreamBufferFrontSpace>
 800b6ba:	6178      	str	r0, [r7, #20]

                        if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d814      	bhi.n	800b6f0 <lTCPAddRxdata+0xd0>
                        {
                            pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800b6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                            pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800b6da:	f043 0301 	orr.w	r3, r3, #1
 800b6de:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                            /* bLowWater was reached, send the changed window size. */
                            pxSocket->u.xTCP.usTimeout = 1U;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800b6ea:	2006      	movs	r0, #6
 800b6ec:	f7fe fa16 	bl	8009b1c <xSendEventToIPTask>
                        }
                    }

                    /* New incoming data is available, wake up the user.   User's
                     * semaphores will be set just before the IP-task goes asleep. */
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f043 0201 	orr.w	r2, r3, #1
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	2b00      	cmp	r3, #0
 800b706:	d005      	beq.n	800b714 <lTCPAddRxdata+0xf4>
                            {
                                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	601a      	str	r2, [r3, #0]
                    #endif
                }
            }
        }

        return xResult;
 800b714:	69bb      	ldr	r3, [r7, #24]
    }
 800b716:	4618      	mov	r0, r3
 800b718:	3720      	adds	r7, #32
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bdb0      	pop	{r4, r5, r7, pc}
 800b71e:	bf00      	nop
 800b720:	08015a84 	.word	0x08015a84

0800b724 <FreeRTOS_tx_space>:
 * @param[in] xSocket: the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b736:	2b06      	cmp	r3, #6
 800b738:	d003      	beq.n	800b742 <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b73a:	f06f 0315 	mvn.w	r3, #21
 800b73e:	60fb      	str	r3, [r7, #12]
 800b740:	e00e      	b.n	800b760 <FreeRTOS_tx_space+0x3c>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b746:	2b00      	cmp	r3, #0
 800b748:	d007      	beq.n	800b75a <FreeRTOS_tx_space+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe feca 	bl	800a4e8 <uxStreamBufferGetSpace>
 800b754:	4603      	mov	r3, r0
 800b756:	60fb      	str	r3, [r7, #12]
 800b758:	e002      	b.n	800b760 <FreeRTOS_tx_space+0x3c>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75e:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800b760:	68fb      	ldr	r3, [r7, #12]
    }
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b77c:	2b06      	cmp	r3, #6
 800b77e:	d003      	beq.n	800b788 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b780:	f06f 0315 	mvn.w	r3, #21
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	e00d      	b.n	800b7a4 <FreeRTOS_rx_size+0x3a>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d007      	beq.n	800b7a0 <FreeRTOS_rx_size+0x36>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b794:	4618      	mov	r0, r3
 800b796:	f7fe fecf 	bl	800a538 <uxStreamBufferGetSize>
 800b79a:	4603      	mov	r3, r0
 800b79c:	60fb      	str	r3, [r7, #12]
 800b79e:	e001      	b.n	800b7a4 <FreeRTOS_rx_size+0x3a>
        }
        else
        {
            xReturn = 0;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
    }
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
	...

0800b7b0 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800b7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7b4:	b095      	sub	sp, #84	; 0x54
 800b7b6:	af06      	add	r7, sp, #24
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	633b      	str	r3, [r7, #48]	; 0x30
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800b7bc:	f006 fa04 	bl	8011bc8 <uxGetMinimumFreeNetworkBuffers>
 800b7c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800b7c2:	f006 f9f5 	bl	8011bb0 <uxGetNumberOfFreeNetworkBuffers>
 800b7c6:	62b8      	str	r0, [r7, #40]	; 0x28

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800b7c8:	4b5a      	ldr	r3, [pc, #360]	; (800b934 <vTCPNetStat+0x184>)
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d0:	d003      	beq.n	800b7da <vTCPNetStat+0x2a>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800b7d2:	4859      	ldr	r0, [pc, #356]	; (800b938 <vTCPNetStat+0x188>)
 800b7d4:	f7f5 f952 	bl	8000a7c <vLoggingPrintf>
                               ( UBaseType_t ) count,
                               ( UBaseType_t ) uxMinimum,
                               ( UBaseType_t ) uxCurrent,
                               ( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800b7d8:	e0a7      	b.n	800b92a <vTCPNetStat+0x17a>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800b7da:	4b58      	ldr	r3, [pc, #352]	; (800b93c <vTCPNetStat+0x18c>)
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800b7de:	4b58      	ldr	r3, [pc, #352]	; (800b940 <vTCPNetStat+0x190>)
 800b7e0:	623b      	str	r3, [r7, #32]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800b7e2:	4858      	ldr	r0, [pc, #352]	; (800b944 <vTCPNetStat+0x194>)
 800b7e4:	f7f5 f94a 	bl	8000a7c <vLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b7e8:	4b52      	ldr	r3, [pc, #328]	; (800b934 <vTCPNetStat+0x184>)
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ee:	e073      	b.n	800b8d8 <vTCPNetStat+0x128>
                const FreeRTOS_Socket_t * pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe febe 	bl	800a576 <vCastConstPointerTo_FreeRTOS_Socket_t>
 800b7fa:	61f8      	str	r0, [r7, #28]
                    TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800b7fc:	f7fa fc8e 	bl	800611c <xTaskGetTickCount>
 800b800:	4602      	mov	r2, r0
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	61bb      	str	r3, [r7, #24]
                char ucChildText[ 16 ] = "";
 800b80a:	2300      	movs	r3, #0
 800b80c:	607b      	str	r3, [r7, #4]
 800b80e:	f107 0308 	add.w	r3, r7, #8
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	605a      	str	r2, [r3, #4]
 800b818:	609a      	str	r2, [r3, #8]
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b820:	2b01      	cmp	r3, #1
 800b822:	d11e      	bne.n	800b862 <vTCPNetStat+0xb2>
                                                         ( int32_t ) pxSocket->u.xTCP.usChildCount,
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800b82a:	461a      	mov	r2, r3
                                                         ( int32_t ) pxSocket->u.xTCP.usBacklog );
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800b832:	1d38      	adds	r0, r7, #4
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	4613      	mov	r3, r2
 800b838:	4a43      	ldr	r2, [pc, #268]	; (800b948 <vTCPNetStat+0x198>)
 800b83a:	2110      	movs	r1, #16
 800b83c:	f008 f826 	bl	801388c <sniprintf>
 800b840:	6178      	str	r0, [r7, #20]
                    configASSERT( copied_len >= 0 );
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2b00      	cmp	r3, #0
 800b846:	da04      	bge.n	800b852 <vTCPNetStat+0xa2>
 800b848:	4940      	ldr	r1, [pc, #256]	; (800b94c <vTCPNetStat+0x19c>)
 800b84a:	f241 1064 	movw	r0, #4452	; 0x1164
 800b84e:	f7f5 f93e 	bl	8000ace <vAssertCalled>
                    configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) );
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	2b0f      	cmp	r3, #15
 800b856:	dd04      	ble.n	800b862 <vTCPNetStat+0xb2>
 800b858:	493c      	ldr	r1, [pc, #240]	; (800b94c <vTCPNetStat+0x19c>)
 800b85a:	f241 1065 	movw	r0, #4453	; 0x1165
 800b85e:	f7f5 f936 	bl	8000ace <vAssertCalled>
                FreeRTOS_printf( ( "TCP %5d %-16lxip:%5d %d/%d %-13.13s %6lu %6u%s\n",
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b866:	4698      	mov	r8, r3
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b870:	4699      	mov	r9, r3
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b876:	2b00      	cmp	r3, #0
 800b878:	bf14      	ite	ne
 800b87a:	2301      	movne	r3, #1
 800b87c:	2300      	moveq	r3, #0
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	461d      	mov	r5, r3
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b886:	2b00      	cmp	r3, #0
 800b888:	bf14      	ite	ne
 800b88a:	2301      	movne	r3, #1
 800b88c:	2300      	moveq	r3, #0
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	461e      	mov	r6, r3
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b898:	4618      	mov	r0, r3
 800b89a:	f003 fab7 	bl	800ee0c <FreeRTOS_GetTCPStateName>
 800b89e:	4601      	mov	r1, r0
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	4a2b      	ldr	r2, [pc, #172]	; (800b950 <vTCPNetStat+0x1a0>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	bf28      	it	cs
 800b8a8:	4613      	movcs	r3, r2
 800b8aa:	69fa      	ldr	r2, [r7, #28]
 800b8ac:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	1d3a      	adds	r2, r7, #4
 800b8b4:	9205      	str	r2, [sp, #20]
 800b8b6:	9004      	str	r0, [sp, #16]
 800b8b8:	9303      	str	r3, [sp, #12]
 800b8ba:	9102      	str	r1, [sp, #8]
 800b8bc:	9601      	str	r6, [sp, #4]
 800b8be:	9500      	str	r5, [sp, #0]
 800b8c0:	464b      	mov	r3, r9
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	4641      	mov	r1, r8
 800b8c6:	4823      	ldr	r0, [pc, #140]	; (800b954 <vTCPNetStat+0x1a4>)
 800b8c8:	f7f5 f8d8 	bl	8000a7c <vLoggingPrintf>
                count++;
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	633b      	str	r3, [r7, #48]	; 0x30
                 pxIterator = listGET_NEXT( pxIterator ) )
 800b8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	637b      	str	r3, [r7, #52]	; 0x34
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800b8d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d187      	bne.n	800b7f0 <vTCPNetStat+0x40>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800b8e0:	4b1d      	ldr	r3, [pc, #116]	; (800b958 <vTCPNetStat+0x1a8>)
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8e6:	e014      	b.n	800b912 <vTCPNetStat+0x162>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 800b8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	021b      	lsls	r3, r3, #8
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	0a1b      	lsrs	r3, r3, #8
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	4619      	mov	r1, r3
 800b900:	4816      	ldr	r0, [pc, #88]	; (800b95c <vTCPNetStat+0x1ac>)
 800b902:	f7f5 f8bb 	bl	8000a7c <vLoggingPrintf>
                count++;
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	3301      	adds	r3, #1
 800b90a:	633b      	str	r3, [r7, #48]	; 0x30
                 pxIterator = listGET_NEXT( pxIterator ) )
 800b90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	637b      	str	r3, [r7, #52]	; 0x34
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800b912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	429a      	cmp	r2, r3
 800b918:	d1e6      	bne.n	800b8e8 <vTCPNetStat+0x138>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %lu sockets %lu < %lu < %ld buffers free\n",
 800b91a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b91c:	233c      	movs	r3, #60	; 0x3c
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b924:	480e      	ldr	r0, [pc, #56]	; (800b960 <vTCPNetStat+0x1b0>)
 800b926:	f7f5 f8a9 	bl	8000a7c <vLoggingPrintf>
    }
 800b92a:	bf00      	nop
 800b92c:	373c      	adds	r7, #60	; 0x3c
 800b92e:	46bd      	mov	sp, r7
 800b930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b934:	20027148 	.word	0x20027148
 800b938:	08015acc 	.word	0x08015acc
 800b93c:	20027150 	.word	0x20027150
 800b940:	20027164 	.word	0x20027164
 800b944:	08015ae8 	.word	0x08015ae8
 800b948:	08015b30 	.word	0x08015b30
 800b94c:	0801576c 	.word	0x0801576c
 800b950:	000f423f 	.word	0x000f423f
 800b954:	08015b38 	.word	0x08015b38
 800b958:	2002715c 	.word	0x2002715c
 800b95c:	08015b68 	.word	0x08015b68
 800b960:	08015b78 	.word	0x08015b78

0800b964 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet: The socket-set which is to be waited on for change.
 */
    void vSocketSelect( SocketSelect_t * pxSocketSet )
    {
 800b964:	b580      	push	{r7, lr}
 800b966:	b08c      	sub	sp, #48	; 0x30
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800b96c:	2301      	movs	r3, #1
 800b96e:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	627b      	str	r3, [r7, #36]	; 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800b974:	2300      	movs	r3, #0
 800b976:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b978:	e0e4      	b.n	800bb44 <vSocketSelect+0x1e0>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d102      	bne.n	800b986 <vSocketSelect+0x22>
            {
                pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 800b980:	4b85      	ldr	r3, [pc, #532]	; (800bb98 <vSocketSelect+0x234>)
 800b982:	61fb      	str	r3, [r7, #28]
 800b984:	e001      	b.n	800b98a <vSocketSelect+0x26>
            }

            #if ipconfigUSE_TCP == 1
                else
                {
                    pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800b986:	4b85      	ldr	r3, [pc, #532]	; (800bb9c <vSocketSelect+0x238>)
 800b988:	61fb      	str	r3, [r7, #28]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	623b      	str	r3, [r7, #32]
 800b990:	e0d0      	b.n	800bb34 <vSocketSelect+0x1d0>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800b992:	6a3b      	ldr	r3, [r7, #32]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe fde2 	bl	800a560 <vCastPointerTo_FreeRTOS_Socket_t>
 800b99c:	60b8      	str	r0, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	f040 80c1 	bne.w	800bb2c <vSocketSelect+0x1c8>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	62bb      	str	r3, [r7, #40]	; 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b9b4:	2b06      	cmp	r3, #6
 800b9b6:	f040 80a3 	bne.w	800bb00 <vSocketSelect+0x19c>
                    {
                        /* Check if the socket has already been accepted by the
                         * owner.  If not, it is useless to return it from a
                         * select(). */
                        BaseType_t bAccepted = pdFALSE;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	61bb      	str	r3, [r7, #24]

                        if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d109      	bne.n	800b9e2 <vSocketSelect+0x7e>
                        {
                            if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9d4:	f003 0302 	and.w	r3, r3, #2
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <vSocketSelect+0x7e>
                            {
                                bAccepted = pdTRUE;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	61bb      	str	r3, [r7, #24]
                            }
                        }

                        /* Is the set owner interested in READ events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d038      	beq.n	800ba60 <vSocketSelect+0xfc>
                        {
                            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d111      	bne.n	800ba1c <vSocketSelect+0xb8>
                            {
                                if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d02f      	beq.n	800ba60 <vSocketSelect+0xfc>
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba08:	f003 0302 	and.w	r3, r3, #2
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d026      	beq.n	800ba60 <vSocketSelect+0xfc>
                                {
                                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	f043 0301 	orr.w	r3, r3, #1
 800ba18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba1a:	e021      	b.n	800ba60 <vSocketSelect+0xfc>
                                }
                            }
                            else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00c      	beq.n	800ba46 <vSocketSelect+0xe2>
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d004      	beq.n	800ba46 <vSocketSelect+0xe2>
                            {
                                /* This socket has the re-use flag. After connecting it turns into
                                 * a connected socket. Set the READ event, so that accept() will be called. */
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	f043 0301 	orr.w	r3, r3, #1
 800ba42:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba44:	e00c      	b.n	800ba60 <vSocketSelect+0xfc>
                            }
                            else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d009      	beq.n	800ba60 <vSocketSelect+0xfc>
 800ba4c:	68b8      	ldr	r0, [r7, #8]
 800ba4e:	f7ff fe8c 	bl	800b76a <FreeRTOS_rx_size>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	dd03      	ble.n	800ba60 <vSocketSelect+0xfc>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	f043 0301 	orr.w	r3, r3, #1
 800ba5e:	62bb      	str	r3, [r7, #40]	; 0x28
                                /* Nothing. */
                            }
                        }

                        /* Is the set owner interested in EXCEPTION events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00d      	beq.n	800ba88 <vSocketSelect+0x124>
                        {
                            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ba72:	2b08      	cmp	r3, #8
 800ba74:	d004      	beq.n	800ba80 <vSocketSelect+0x11c>
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d103      	bne.n	800ba88 <vSocketSelect+0x124>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	f043 0304 	orr.w	r3, r3, #4
 800ba86:	62bb      	str	r3, [r7, #40]	; 0x28
                            }
                        }

                        /* Is the set owner interested in WRITE events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d043      	beq.n	800bb1c <vSocketSelect+0x1b8>
                        {
                            BaseType_t bMatch = pdFALSE;
 800ba94:	2300      	movs	r3, #0
 800ba96:	617b      	str	r3, [r7, #20]

                            if( bAccepted != 0 )
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d007      	beq.n	800baae <vSocketSelect+0x14a>
                            {
                                if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800ba9e:	68b8      	ldr	r0, [r7, #8]
 800baa0:	f7ff fe40 	bl	800b724 <FreeRTOS_tx_space>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	dd01      	ble.n	800baae <vSocketSelect+0x14a>
                                {
                                    bMatch = pdTRUE;
 800baaa:	2301      	movs	r3, #1
 800baac:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch == pdFALSE )
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d11d      	bne.n	800baf0 <vSocketSelect+0x18c>
                            {
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800baba:	f003 0308 	and.w	r3, r3, #8
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d015      	beq.n	800baf0 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800baca:	2b04      	cmp	r3, #4
 800bacc:	d910      	bls.n	800baf0 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bad4:	f003 0310 	and.w	r3, r3, #16
 800bad8:	b2db      	uxtb	r3, r3
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800bada:	2b00      	cmp	r3, #0
 800badc:	d108      	bne.n	800baf0 <vSocketSelect+0x18c>
                                {
                                    pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800bae4:	f043 0310 	orr.w	r3, r3, #16
 800bae8:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                                    bMatch = pdTRUE;
 800baec:	2301      	movs	r3, #1
 800baee:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch != pdFALSE )
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d012      	beq.n	800bb1c <vSocketSelect+0x1b8>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf8:	f043 0302 	orr.w	r3, r3, #2
 800bafc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bafe:	e00d      	b.n	800bb1c <vSocketSelect+0x1b8>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d007      	beq.n	800bb1c <vSocketSelect+0x1b8>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d003      	beq.n	800bb1c <vSocketSelect+0x1b8>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800bb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb16:	f043 0301 	orr.w	r3, r3, #1
 800bb1a:	62bb      	str	r3, [r7, #40]	; 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb20:	631a      	str	r2, [r3, #48]	; 0x30

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800bb22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	4313      	orrs	r3, r2
 800bb28:	627b      	str	r3, [r7, #36]	; 0x24
 800bb2a:	e000      	b.n	800bb2e <vSocketSelect+0x1ca>
                    continue;
 800bb2c:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800bb34:	6a3a      	ldr	r2, [r7, #32]
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	f47f af2a 	bne.w	800b992 <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	3301      	adds	r3, #1
 800bb42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	f77f af16 	ble.w	800b97a <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2100      	movs	r1, #0
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7f8 ffef 	bl	8004b38 <xEventGroupClearBits>
 800bb5a:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	43da      	mvns	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	4013      	ands	r3, r2
 800bb64:	f003 030f 	and.w	r3, r3, #15
 800bb68:	60fb      	str	r3, [r7, #12]
                 * and cleared in FreeRTOS_select(). */
                xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
            }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d005      	beq.n	800bb7c <vSocketSelect+0x218>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68f9      	ldr	r1, [r7, #12]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7f8 ffde 	bl	8004b38 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	f043 0310 	orr.w	r3, r3, #16
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f7f9 f803 	bl	8004b94 <xEventGroupSetBits>
    }
 800bb8e:	bf00      	nop
 800bb90:	3730      	adds	r7, #48	; 0x30
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	20027164 	.word	0x20027164
 800bb9c:	20027150 	.word	0x20027150

0800bba0 <FreeRTOS_min_uint32>:
        {
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	bf28      	it	cs
 800bbb2:	4613      	movcs	r3, r2
        }
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <uxStreamBufferSpace>:
    {
 800bbc0:	b480      	push	{r7}
 800bbc2:	b087      	sub	sp, #28
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	691a      	ldr	r2, [r3, #16]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	441a      	add	r2, r3
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d304      	bcc.n	800bbf0 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	617b      	str	r3, [r7, #20]
        return uxCount;
 800bbf0:	697b      	ldr	r3, [r7, #20]
    }
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	371c      	adds	r7, #28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <uxStreamBufferDistance>:
    {
 800bbfe:	b480      	push	{r7}
 800bc00:	b087      	sub	sp, #28
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	691a      	ldr	r2, [r3, #16]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	441a      	add	r2, r3
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d304      	bcc.n	800bc2c <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	617b      	str	r3, [r7, #20]
        return uxCount;
 800bc2c:	697b      	ldr	r3, [r7, #20]
    }
 800bc2e:	4618      	mov	r0, r3
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <uxStreamBufferGetSpace>:
    {
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	68f9      	ldr	r1, [r7, #12]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff ffb4 	bl	800bbc0 <uxStreamBufferSpace>
 800bc58:	4603      	mov	r3, r0
    }
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <uxStreamBufferGetSize>:
    {
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b084      	sub	sp, #16
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	68b9      	ldr	r1, [r7, #8]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff ffbf 	bl	800bbfe <uxStreamBufferDistance>
 800bc80:	4603      	mov	r3, r0
    }
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <xStreamBufferLessThenEqual>:
                                                             const size_t uxLeft,
                                                             const size_t uxRight );
    static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * pxBuffer,
                                                             const size_t uxLeft,
                                                             const size_t uxRight )
    {
 800bc8a:	b480      	push	{r7}
 800bc8c:	b087      	sub	sp, #28
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	60f8      	str	r0, [r7, #12]
 800bc92:	60b9      	str	r1, [r7, #8]
 800bc94:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;
        size_t uxTail = pxBuffer->uxTail;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	613b      	str	r3, [r7, #16]

        /* Returns true if ( uxLeft < uxRight ) */
        if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U ) ) != 0U )
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d201      	bcs.n	800bca8 <xStreamBufferLessThenEqual+0x1e>
 800bca4:	2201      	movs	r2, #1
 800bca6:	e000      	b.n	800bcaa <xStreamBufferLessThenEqual+0x20>
 800bca8:	2200      	movs	r2, #0
 800bcaa:	6879      	ldr	r1, [r7, #4]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	4299      	cmp	r1, r3
 800bcb0:	d201      	bcs.n	800bcb6 <xStreamBufferLessThenEqual+0x2c>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e000      	b.n	800bcb8 <xStreamBufferLessThenEqual+0x2e>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d009      	beq.n	800bcd0 <xStreamBufferLessThenEqual+0x46>
        {
            if( uxRight < uxTail )
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d202      	bcs.n	800bcca <xStreamBufferLessThenEqual+0x40>
            {
                xReturn = pdTRUE;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	e00b      	b.n	800bce2 <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800bcca:	2300      	movs	r3, #0
 800bccc:	617b      	str	r3, [r7, #20]
 800bcce:	e008      	b.n	800bce2 <xStreamBufferLessThenEqual+0x58>
            }
        }
        else
        {
            if( uxLeft <= uxRight )
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d802      	bhi.n	800bcde <xStreamBufferLessThenEqual+0x54>
            {
                xReturn = pdTRUE;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	617b      	str	r3, [r7, #20]
 800bcdc:	e001      	b.n	800bce2 <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800bcde:	2300      	movs	r3, #0
 800bce0:	617b      	str	r3, [r7, #20]
            }
        }

        return xReturn;
 800bce2:	697b      	ldr	r3, [r7, #20]
    }
 800bce4:	4618      	mov	r0, r3
 800bce6:	371c      	adds	r7, #28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          const uint8_t * pucData,
                          size_t uxByteCount )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b088      	sub	sp, #32
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
 800bcfc:	603b      	str	r3, [r7, #0]
    size_t uxSpace, uxNextHead, uxFirst;
    size_t uxCount = uxByteCount;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	617b      	str	r3, [r7, #20]

    uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7ff ff99 	bl	800bc3a <uxStreamBufferGetSpace>
 800bd08:	61f8      	str	r0, [r7, #28]

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800bd0a:	69fa      	ldr	r2, [r7, #28]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d904      	bls.n	800bd1c <uxStreamBufferAdd+0x2c>
    {
        uxSpace -= uxOffset;
 800bd12:	69fa      	ldr	r2, [r7, #28]
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	e001      	b.n	800bd20 <uxStreamBufferAdd+0x30>
    }
    else
    {
        uxSpace = 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	61fb      	str	r3, [r7, #28]
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800bd20:	6979      	ldr	r1, [r7, #20]
 800bd22:	69f8      	ldr	r0, [r7, #28]
 800bd24:	f7ff ff3c 	bl	800bba0 <FreeRTOS_min_uint32>
 800bd28:	6178      	str	r0, [r7, #20]

    if( uxCount != 0U )
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d05a      	beq.n	800bde6 <uxStreamBufferAdd+0xf6>
    {
        uxNextHead = pxBuffer->uxHead;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00d      	beq.n	800bd58 <uxStreamBufferAdd+0x68>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800bd3c:	69ba      	ldr	r2, [r7, #24]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	4413      	add	r3, r2
 800bd42:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	69ba      	ldr	r2, [r7, #24]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d304      	bcc.n	800bd58 <uxStreamBufferAdd+0x68>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	69ba      	ldr	r2, [r7, #24]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d022      	beq.n	800bda4 <uxStreamBufferAdd+0xb4>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	691a      	ldr	r2, [r3, #16]
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	6979      	ldr	r1, [r7, #20]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7ff ff19 	bl	800bba0 <FreeRTOS_min_uint32>
 800bd6e:	6138      	str	r0, [r7, #16]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	3310      	adds	r3, #16
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	4413      	add	r3, r2
 800bd78:	3304      	adds	r3, #4
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f007 f847 	bl	8012e12 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d90b      	bls.n	800bda4 <uxStreamBufferAdd+0xb4>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f103 0014 	add.w	r0, r3, #20
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	18d1      	adds	r1, r2, r3
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f007 f837 	bl	8012e12 <memcpy>
            }
        }

        if( uxOffset == 0U )
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d110      	bne.n	800bdcc <uxStreamBufferAdd+0xdc>
        {
            /* ( uxOffset == 0 ) means: write at uxHead position */
            uxNextHead += uxCount;
 800bdaa:	69ba      	ldr	r2, [r7, #24]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	4413      	add	r3, r2
 800bdb0:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	69ba      	ldr	r2, [r7, #24]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d304      	bcc.n	800bdc6 <uxStreamBufferAdd+0xd6>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	69ba      	ldr	r2, [r7, #24]
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxHead = uxNextHead;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	69ba      	ldr	r2, [r7, #24]
 800bdca:	609a      	str	r2, [r3, #8]
        }

        if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	69ba      	ldr	r2, [r7, #24]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f7ff ff58 	bl	800bc8a <xStreamBufferLessThenEqual>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <uxStreamBufferAdd+0xf6>
        {
            /* Advance the front pointer */
            pxBuffer->uxFront = uxNextHead;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	60da      	str	r2, [r3, #12]
        }
    }

    return uxCount;
 800bde6:	697b      	ldr	r3, [r7, #20]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3720      	adds	r7, #32
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          uint8_t * pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b088      	sub	sp, #32
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
    size_t uxSize, uxCount, uxFirst, uxNextTail;

    /* How much data is available? */
    uxSize = uxStreamBufferGetSize( pxBuffer );
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f7ff ff2f 	bl	800bc62 <uxStreamBufferGetSize>
 800be04:	61f8      	str	r0, [r7, #28]

    if( uxSize > uxOffset )
 800be06:	69fa      	ldr	r2, [r7, #28]
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d904      	bls.n	800be18 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800be0e:	69fa      	ldr	r2, [r7, #28]
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	61fb      	str	r3, [r7, #28]
 800be16:	e001      	b.n	800be1c <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800be18:	2300      	movs	r3, #0
 800be1a:	61fb      	str	r3, [r7, #28]
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	69f8      	ldr	r0, [r7, #28]
 800be20:	f7ff febe 	bl	800bba0 <FreeRTOS_min_uint32>
 800be24:	6178      	str	r0, [r7, #20]

    if( uxCount > 0U )
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d050      	beq.n	800bece <uxStreamBufferGet+0xde>
    {
        uxNextTail = pxBuffer->uxTail;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00d      	beq.n	800be54 <uxStreamBufferGet+0x64>
        {
            uxNextTail += uxOffset;
 800be38:	69ba      	ldr	r2, [r7, #24]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	4413      	add	r3, r2
 800be3e:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	69ba      	ldr	r2, [r7, #24]
 800be46:	429a      	cmp	r2, r3
 800be48:	d304      	bcc.n	800be54 <uxStreamBufferGet+0x64>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	69ba      	ldr	r2, [r7, #24]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d022      	beq.n	800bea0 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	691a      	ldr	r2, [r3, #16]
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	6979      	ldr	r1, [r7, #20]
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff fe9b 	bl	800bba0 <FreeRTOS_min_uint32>
 800be6a:	6138      	str	r0, [r7, #16]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	3310      	adds	r3, #16
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	4413      	add	r3, r2
 800be74:	3304      	adds	r3, #4
 800be76:	693a      	ldr	r2, [r7, #16]
 800be78:	4619      	mov	r1, r3
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f006 ffc9 	bl	8012e12 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	429a      	cmp	r2, r3
 800be86:	d90b      	bls.n	800bea0 <uxStreamBufferGet+0xb0>
            {
                /*...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	18d0      	adds	r0, r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f103 0114 	add.w	r1, r3, #20
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	461a      	mov	r2, r3
 800be9c:	f006 ffb9 	bl	8012e12 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d113      	bne.n	800bece <uxStreamBufferGet+0xde>
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d110      	bne.n	800bece <uxStreamBufferGet+0xde>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	4413      	add	r3, r2
 800beb2:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	69ba      	ldr	r2, [r7, #24]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d304      	bcc.n	800bec8 <uxStreamBufferGet+0xd8>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	69ba      	ldr	r2, [r7, #24]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxTail = uxNextTail;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800bece:	697b      	ldr	r3, [r7, #20]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3720      	adds	r7, #32
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <FreeRTOS_min_int32>:
        {
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	4293      	cmp	r3, r2
 800bee8:	bfa8      	it	ge
 800beea:	4613      	movge	r3, r2
        }
 800beec:	4618      	mov	r0, r3
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <FreeRTOS_min_uint32>:
        {
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	4293      	cmp	r3, r2
 800bf08:	bf28      	it	cs
 800bf0a:	4613      	movcs	r3, r2
        }
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <uxStreamBufferSpace>:
    {
 800bf18:	b480      	push	{r7}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	691a      	ldr	r2, [r3, #16]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	441a      	add	r2, r3
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	1ad3      	subs	r3, r2, r3
 800bf30:	3b01      	subs	r3, #1
 800bf32:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	697a      	ldr	r2, [r7, #20]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d304      	bcc.n	800bf48 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	617b      	str	r3, [r7, #20]
        return uxCount;
 800bf48:	697b      	ldr	r3, [r7, #20]
    }
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	371c      	adds	r7, #28
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <uxStreamBufferDistance>:
    {
 800bf56:	b480      	push	{r7}
 800bf58:	b087      	sub	sp, #28
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	60f8      	str	r0, [r7, #12]
 800bf5e:	60b9      	str	r1, [r7, #8]
 800bf60:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	691a      	ldr	r2, [r3, #16]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	441a      	add	r2, r3
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d304      	bcc.n	800bf84 <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	617b      	str	r3, [r7, #20]
        return uxCount;
 800bf84:	697b      	ldr	r3, [r7, #20]
    }
 800bf86:	4618      	mov	r0, r3
 800bf88:	371c      	adds	r7, #28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <uxStreamBufferGetSpace>:
    {
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b084      	sub	sp, #16
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	68f9      	ldr	r1, [r7, #12]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7ff ffb4 	bl	800bf18 <uxStreamBufferSpace>
 800bfb0:	4603      	mov	r3, r0
    }
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <uxStreamBufferFrontSpace>:
    {
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b084      	sub	sp, #16
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
        size_t uxFront = pxBuffer->uxFront;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	68f9      	ldr	r1, [r7, #12]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff ffa0 	bl	800bf18 <uxStreamBufferSpace>
 800bfd8:	4603      	mov	r3, r0
    }
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <uxStreamBufferMidSpace>:
    {
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	60fb      	str	r3, [r7, #12]
        size_t uxMid = pxBuffer->uxMid;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	68b9      	ldr	r1, [r7, #8]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff ffab 	bl	800bf56 <uxStreamBufferDistance>
 800c000:	4603      	mov	r3, r0
    }
 800c002:	4618      	mov	r0, r3
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <vStreamBufferMoveMid>:
    {
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	6039      	str	r1, [r7, #0]
        size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff ffe4 	bl	800bfe2 <uxStreamBufferMidSpace>
 800c01a:	60b8      	str	r0, [r7, #8]
        size_t uxMoveCount = uxCount;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	60fb      	str	r3, [r7, #12]
        if( uxMoveCount > uxSize )
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	429a      	cmp	r2, r3
 800c026:	d901      	bls.n	800c02c <vStreamBufferMoveMid+0x22>
            uxMoveCount = uxSize;
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	60fb      	str	r3, [r7, #12]
        pxBuffer->uxMid += uxMoveCount;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	441a      	add	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	605a      	str	r2, [r3, #4]
        if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	429a      	cmp	r2, r3
 800c042:	d306      	bcc.n	800c052 <vStreamBufferMoveMid+0x48>
            pxBuffer->uxMid -= pxBuffer->LENGTH;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	1ad2      	subs	r2, r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	605a      	str	r2, [r3, #4]
    }
 800c052:	bf00      	nop
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <vCastConstPointerTo_IPHeader_t>:
    {
 800c05a:	b480      	push	{r7}
 800c05c:	b083      	sub	sp, #12
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
        return ( const IPHeader_t * ) pvArgument;
 800c062:	687b      	ldr	r3, [r7, #4]
    }
 800c064:	4618      	mov	r0, r3
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <vCastPointerTo_TCPPacket_t>:
    {
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
        return ( TCPPacket_t * ) pvArgument;
 800c078:	687b      	ldr	r3, [r7, #4]
    }
 800c07a:	4618      	mov	r0, r3
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <vCastConstPointerTo_TCPPacket_t>:
    {
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
        return ( const TCPPacket_t * ) pvArgument;
 800c08e:	687b      	ldr	r3, [r7, #4]
    }
 800c090:	4618      	mov	r0, r3
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <vCastPointerTo_ProtocolHeaders_t>:
    {
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
        return ( ProtocolHeaders_t * ) pvArgument;
 800c0a4:	687b      	ldr	r3, [r7, #4]
    }
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <vCastConstPointerTo_ProtocolHeaders_t>:
    {
 800c0b2:	b480      	push	{r7}
 800c0b4:	b083      	sub	sp, #12
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
        return ( const ProtocolHeaders_t * ) pvArgument;
 800c0ba:	687b      	ldr	r3, [r7, #4]
    }
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800c0d0:	687b      	ldr	r3, [r7, #4]
    }
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <ulChar2u32>:
    {
 800c0de:	b480      	push	{r7}
 800c0e0:	b083      	sub	sp, #12
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	061a      	lsls	r2, r3, #24
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	041b      	lsls	r3, r3, #16
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800c0f4:	431a      	orrs	r2, r3
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3302      	adds	r3, #2
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	021b      	lsls	r3, r3, #8
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800c0fe:	4313      	orrs	r3, r2
               ( ( ( uint32_t ) apChr[ 3 ] ) );
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	3203      	adds	r2, #3
 800c104:	7812      	ldrb	r2, [r2, #0]
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800c106:	4313      	orrs	r3, r2
    }
 800c108:	4618      	mov	r0, r3
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <usChar2u16>:
    {
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	b29b      	uxth	r3, r3
 800c122:	021b      	lsls	r3, r3, #8
 800c124:	b29a      	uxth	r2, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	3301      	adds	r3, #1
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	b29b      	uxth	r3, r3
        return ( uint16_t )
 800c12e:	4313      	orrs	r3, r2
 800c130:	b29b      	uxth	r3, r3
    }
 800c132:	4618      	mov	r0, r3
 800c134:	370c      	adds	r7, #12
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr
	...

0800c140 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    static BaseType_t prvTCPSocketIsActive( eIPTCPState_t xStatus )
    {
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	4603      	mov	r3, r0
 800c148:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( xStatus )
 800c14a:	79fb      	ldrb	r3, [r7, #7]
 800c14c:	2b0b      	cmp	r3, #11
 800c14e:	d81e      	bhi.n	800c18e <prvTCPSocketIsActive+0x4e>
 800c150:	a201      	add	r2, pc, #4	; (adr r2, 800c158 <prvTCPSocketIsActive+0x18>)
 800c152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c156:	bf00      	nop
 800c158:	0800c189 	.word	0x0800c189
 800c15c:	0800c18f 	.word	0x0800c18f
 800c160:	0800c18f 	.word	0x0800c18f
 800c164:	0800c18f 	.word	0x0800c18f
 800c168:	0800c18f 	.word	0x0800c18f
 800c16c:	0800c18f 	.word	0x0800c18f
 800c170:	0800c18f 	.word	0x0800c18f
 800c174:	0800c189 	.word	0x0800c189
 800c178:	0800c189 	.word	0x0800c189
 800c17c:	0800c189 	.word	0x0800c189
 800c180:	0800c18f 	.word	0x0800c18f
 800c184:	0800c189 	.word	0x0800c189
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800c188:	2300      	movs	r3, #0
 800c18a:	60fb      	str	r3, [r7, #12]
                break;
 800c18c:	e002      	b.n	800c194 <prvTCPSocketIsActive+0x54>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800c18e:	2301      	movs	r3, #1
 800c190:	60fb      	str	r3, [r7, #12]
                break;
 800c192:	bf00      	nop
        }

        return xResult;
 800c194:	68fb      	ldr	r3, [r7, #12]
    }
 800c196:	4618      	mov	r0, r3
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop

0800c1a4 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800c1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1a6:	b089      	sub	sp, #36	; 0x24
 800c1a8:	af02      	add	r7, sp, #8
 800c1aa:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;
            eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c1b2:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800c1b4:	7cfb      	ldrb	r3, [r7, #19]
 800c1b6:	2b08      	cmp	r3, #8
 800c1b8:	d81a      	bhi.n	800c1f0 <prvTCPStatusAgeCheck+0x4c>
 800c1ba:	a201      	add	r2, pc, #4	; (adr r2, 800c1c0 <prvTCPStatusAgeCheck+0x1c>)
 800c1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c0:	0800c1eb 	.word	0x0800c1eb
 800c1c4:	0800c1eb 	.word	0x0800c1eb
 800c1c8:	0800c1f1 	.word	0x0800c1f1
 800c1cc:	0800c1f1 	.word	0x0800c1f1
 800c1d0:	0800c1f1 	.word	0x0800c1f1
 800c1d4:	0800c1e5 	.word	0x0800c1e5
 800c1d8:	0800c1f1 	.word	0x0800c1f1
 800c1dc:	0800c1f1 	.word	0x0800c1f1
 800c1e0:	0800c1eb 	.word	0x0800c1eb
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]
                    break;
 800c1e8:	e005      	b.n	800c1f6 <prvTCPStatusAgeCheck+0x52>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	617b      	str	r3, [r7, #20]
                    break;
 800c1ee:	e002      	b.n	800c1f6 <prvTCPStatusAgeCheck+0x52>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	617b      	str	r3, [r7, #20]
                    break;
 800c1f4:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d03b      	beq.n	800c274 <prvTCPStatusAgeCheck+0xd0>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800c1fc:	f7f9 ff8e 	bl	800611c <xTaskGetTickCount>
 800c200:	4602      	mov	r2, r0
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f247 5230 	movw	r2, #30000	; 0x7530
 800c210:	4293      	cmp	r3, r2
 800c212:	d92f      	bls.n	800c274 <prvTCPStatusAgeCheck+0xd0>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %lxip:%u status %s\n",
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c218:	461d      	mov	r5, r3
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c222:	461e      	mov	r6, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c22a:	4618      	mov	r0, r3
 800c22c:	f002 fdee 	bl	800ee0c <FreeRTOS_GetTCPStateName>
 800c230:	4603      	mov	r3, r0
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4633      	mov	r3, r6
 800c236:	4622      	mov	r2, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	4811      	ldr	r0, [pc, #68]	; (800c280 <prvTCPStatusAgeCheck+0xdc>)
 800c23c:	f7f4 fc1e 	bl	8000a7c <vLoggingPrintf>
                                                     FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
                        }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c240:	2108      	movs	r1, #8
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 ff30 	bl	800d0a8 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c24e:	f003 0304 	and.w	r3, r3, #4
 800c252:	b2db      	uxtb	r3, r3
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00d      	beq.n	800c274 <prvTCPStatusAgeCheck+0xd0>
                    {
                        if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c25e:	f003 0308 	and.w	r3, r3, #8
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b00      	cmp	r3, #0
 800c266:	d102      	bne.n	800c26e <prvTCPStatusAgeCheck+0xca>
                        {
                            /* As it did not get connected, and the user can never
                             * accept() it anymore, it will be deleted now.  Called from
                             * the IP-task, so it's safe to call the internal Close
                             * function: vSocketClose(). */
                            ( void ) vSocketClose( pxSocket );
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7fe fd85 	bl	800ad78 <vSocketClose>
                        }

                        /* Return a negative value to tell to inform the caller
                         * xTCPTimerCheck()
                         * that the socket got closed and may not be accessed anymore. */
                        xResult = -1;
 800c26e:	f04f 33ff 	mov.w	r3, #4294967295
 800c272:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800c274:	697b      	ldr	r3, [r7, #20]
        }
 800c276:	4618      	mov	r0, r3
 800c278:	371c      	adds	r7, #28
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c27e:	bf00      	nop
 800c280:	08015bb4 	.word	0x08015bb4

0800c284 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800c284:	b590      	push	{r4, r7, lr}
 800c286:	b087      	sub	sp, #28
 800c288:	af02      	add	r7, sp, #8
 800c28a:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800c290:	2300      	movs	r3, #0
 800c292:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c29a:	2b04      	cmp	r3, #4
 800c29c:	d906      	bls.n	800c2ac <xTCPSocketCheck+0x28>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <xTCPSocketCheck+0x28>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f001 fab6 	bl	800d818 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d04f      	beq.n	800c354 <xTCPSocketCheck+0xd0>
                {
                    /* The first task of this regular socket check is to send-out delayed
                     * ACK's. */
                    if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2ba:	f003 0320 	and.w	r3, r3, #32
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d13b      	bne.n	800c33c <xTCPSocketCheck+0xb8>
                    {
                        /* Earlier data was received but not yet acknowledged.  This
                         * function is called when the TCP timer for the socket expires, the
                         * ACK may be sent now. */
                        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d02e      	beq.n	800c32c <xTCPSocketCheck+0xa8>
                        {
                            if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800c2ce:	4b2f      	ldr	r3, [pc, #188]	; (800c38c <xTCPSocketCheck+0x108>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	dd20      	ble.n	800c318 <xTCPSocketCheck+0x94>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2da:	2b17      	cmp	r3, #23
 800c2dc:	d01c      	beq.n	800c318 <xTCPSocketCheck+0x94>
                            {
                                FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %u)\n",
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c2e8:	461c      	mov	r4, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c2f6:	1ad1      	subs	r1, r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	2228      	movs	r2, #40	; 0x28
 800c308:	9201      	str	r2, [sp, #4]
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	460b      	mov	r3, r1
 800c30e:	4622      	mov	r2, r4
 800c310:	4601      	mov	r1, r0
 800c312:	481f      	ldr	r0, [pc, #124]	; (800c390 <xTCPSocketCheck+0x10c>)
 800c314:	f7f4 fbb2 	bl	8000a7c <vLoggingPrintf>
                                                         pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
                                                         pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
                                                         ( unsigned ) ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
                            }

                            prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800c31c:	2301      	movs	r3, #1
 800c31e:	2228      	movs	r2, #40	; 0x28
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 f8d9 	bl	800c4d8 <prvTCPReturnPacket>

                            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                                {
                                    /* The ownership has been passed to the SEND routine,
                                     * clear the pointer to it. */
                                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	67da      	str	r2, [r3, #124]	; 0x7c
                                }
                            #endif /* ipconfigZERO_COPY_TX_DRIVER */
                        }

                        if( prvTCPNextTimeout( pxSocket ) > 1U )
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f001 f9e3 	bl	800d6f8 <prvTCPNextTimeout>
 800c332:	4603      	mov	r3, r0
 800c334:	2b01      	cmp	r3, #1
 800c336:	d901      	bls.n	800c33c <xTCPSocketCheck+0xb8>
                        {
                            /* Tell the code below that this function is ready. */
                            xReady = pdTRUE;
 800c338:	2301      	movs	r3, #1
 800c33a:	60bb      	str	r3, [r7, #8]
                        /* The user wants to perform an active shutdown(), skip sending
                         * the delayed ACK.  The function prvTCPSendPacket() will send the
                         * FIN along with the ACK's. */
                    }

                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d007      	beq.n	800c354 <xTCPSocketCheck+0xd0>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c348:	4618      	mov	r0, r3
 800c34a:	f005 fbfd 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
                        pxSocket->u.xTCP.pxAckMessage = NULL;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	67da      	str	r2, [r3, #124]	; 0x7c
                    }
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d113      	bne.n	800c382 <xTCPSocketCheck+0xfe>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c360:	2b04      	cmp	r3, #4
 800c362:	d804      	bhi.n	800c36e <xTCPSocketCheck+0xea>
                ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN ) )
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d102      	bne.n	800c374 <xTCPSocketCheck+0xf0>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f810 	bl	800c394 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f001 f9bf 	bl	800d6f8 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
                {
                    /* In all (non-connected) states in which keep-alive messages can not be sent
                     * the anti-hang protocol will close sockets that are 'hanging'. */
                    xResult = prvTCPStatusAgeCheck( pxSocket );
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7ff ff12 	bl	800c1a4 <prvTCPStatusAgeCheck>
 800c380:	60f8      	str	r0, [r7, #12]
                }
            #endif
        }

        return xResult;
 800c382:	68fb      	ldr	r3, [r7, #12]
    }
 800c384:	4618      	mov	r0, r3
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd90      	pop	{r4, r7, pc}
 800c38c:	2002660c 	.word	0x2002660c
 800c390:	08015bec 	.word	0x08015bec

0800c394 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    static int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 800c394:	b580      	push	{r7, lr}
 800c396:	b088      	sub	sp, #32
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d010      	beq.n	800c3d0 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60bb      	str	r3, [r7, #8]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800c3b2:	f107 0308 	add.w	r3, r7, #8
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 f85d 	bl	800c478 <prvTCPSendRepeated>
 800c3be:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d051      	beq.n	800c46a <prvTCPSendPacket+0xd6>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f005 fbbd 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
 800c3ce:	e04c      	b.n	800c46a <prvTCPSendPacket+0xd6>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d90c      	bls.n	800c3f4 <prvTCPSendPacket+0x60>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	4823      	ldr	r0, [pc, #140]	; (800c474 <prvTCPSendPacket+0xe0>)
 800c3e6:	f7f4 fb49 	bl	8000a7c <vLoggingPrintf>
                                         pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c3ea:	2108      	movs	r1, #8
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fe5b 	bl	800d0a8 <vTCPStateChange>
 800c3f2:	e03a      	b.n	800c46a <prvTCPSendPacket+0xd6>
            }
            else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3fa:	f003 0308 	and.w	r3, r3, #8
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b00      	cmp	r3, #0
 800c402:	d105      	bne.n	800c410 <prvTCPSendPacket+0x7c>
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 faa3 	bl	800c950 <prvTCPPrepareConnect>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d12c      	bne.n	800c46a <prvTCPSendPacket+0xd6>
            {
                ProtocolHeaders_t * pxProtocolHeaders;
                const UBaseType_t uxHeaderSize = ipSIZE_OF_IPv4_HEADER;
 800c410:	2314      	movs	r3, #20
 800c412:	617b      	str	r3, [r7, #20]

                /* Or else, if the connection has been prepared, or can be prepared
                 * now, proceed to send the packet with the SYN flag.
                 * prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
                 * the Ethernet address of the peer or the gateway is found. */
                pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxHeaderSize ] ) );
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	330e      	adds	r3, #14
 800c418:	3380      	adds	r3, #128	; 0x80
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	4413      	add	r3, r2
 800c41e:	3302      	adds	r3, #2
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff fe3b 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800c426:	6138      	str	r0, [r7, #16]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fdc5 	bl	800cfbc <prvSetSynAckOptions>
 800c432:	60f8      	str	r0, [r7, #12]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	3328      	adds	r3, #40	; 0x28
 800c438:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	b2db      	uxtb	r3, r3
 800c442:	3314      	adds	r3, #20
 800c444:	b2db      	uxtb	r3, r3
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c454:	3301      	adds	r3, #1
 800c456:	b2da      	uxtb	r2, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800c45e:	69fa      	ldr	r2, [r7, #28]
 800c460:	2300      	movs	r3, #0
 800c462:	2100      	movs	r1, #0
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f837 	bl	800c4d8 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800c46a:	69fb      	ldr	r3, [r7, #28]
    }
 800c46c:	4618      	mov	r0, r3
 800c46e:	3720      	adds	r7, #32
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	08015c18 	.word	0x08015c18

0800c478 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                       NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 800c486:	2300      	movs	r3, #0
 800c488:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]
 800c48e:	e019      	b.n	800c4c4 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	6839      	ldr	r1, [r7, #0]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 ff81 	bl	800d39c <prvTCPPrepareSend>
 800c49a:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	dd14      	ble.n	800c4cc <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	6819      	ldr	r1, [r3, #0]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f814 	bl	800c4d8 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    *ppxNetworkBuffer = NULL;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	601a      	str	r2, [r3, #0]
                }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	617b      	str	r3, [r7, #20]
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	2b07      	cmp	r3, #7
 800c4c8:	d9e2      	bls.n	800c490 <prvTCPSendRepeated+0x18>
 800c4ca:	e000      	b.n	800c4ce <prvTCPSendRepeated+0x56>
                break;
 800c4cc:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800c4ce:	693b      	ldr	r3, [r7, #16]
    }
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3718      	adds	r7, #24
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <prvTCPReturnPacket>:
 */
    static void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                                    NetworkBufferDescriptor_t * pxDescriptor,
                                    uint32_t ulLen,
                                    BaseType_t xReleaseAfterSend )
    {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b0a0      	sub	sp, #128	; 0x80
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	603b      	str	r3, [r7, #0]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        BaseType_t xDoRelease = xReleaseAfterSend;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	67fb      	str	r3, [r7, #124]	; 0x7c
        EthernetHeader_t * pxEthernetHeader;
        uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
        const TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	66bb      	str	r3, [r7, #104]	; 0x68
        void * pvCopyDest;


        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 800c4ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10f      	bne.n	800c514 <prvTCPReturnPacket+0x3c>
        {
            pxNetworkBuffer = &xTempBuffer;
 800c4f4:	f107 0314 	add.w	r3, r7, #20
 800c4f8:	66bb      	str	r3, [r7, #104]	; 0x68

            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
 800c4fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	625a      	str	r2, [r3, #36]	; 0x24
                }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f103 0282 	add.w	r2, r3, #130	; 0x82
 800c506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c508:	619a      	str	r2, [r3, #24]
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800c50a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c50c:	2246      	movs	r2, #70	; 0x46
 800c50e:	61da      	str	r2, [r3, #28]
            xDoRelease = pdFALSE;
 800c510:	2300      	movs	r3, #0
 800c512:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                if( xDoRelease == pdFALSE )
 800c514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10e      	bne.n	800c538 <prvTCPReturnPacket+0x60>
                {
                    pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 800c51a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c51c:	69db      	ldr	r3, [r3, #28]
 800c51e:	4619      	mov	r1, r3
 800c520:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c522:	f7fd f98b 	bl	800983c <pxDuplicateNetworkBufferWithDescriptor>
 800c526:	66b8      	str	r0, [r7, #104]	; 0x68

                    if( pxNetworkBuffer == NULL )
 800c528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d102      	bne.n	800c534 <prvTCPReturnPacket+0x5c>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 800c52e:	489b      	ldr	r0, [pc, #620]	; (800c79c <prvTCPReturnPacket+0x2c4>)
 800c530:	f7f4 faa4 	bl	8000a7c <vLoggingPrintf>
                    }

                    xDoRelease = pdTRUE;
 800c534:	2301      	movs	r3, #1
 800c536:	67fb      	str	r3, [r7, #124]	; 0x7c
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL )
 800c538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 81bd 	beq.w	800c8ba <prvTCPReturnPacket+0x3e2>
        #endif
        {
            /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800c540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	4618      	mov	r0, r3
 800c546:	f7ff fd93 	bl	800c070 <vCastPointerTo_TCPPacket_t>
 800c54a:	6638      	str	r0, [r7, #96]	; 0x60
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800c54c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c54e:	330e      	adds	r3, #14
 800c550:	65fb      	str	r3, [r7, #92]	; 0x5c
            pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800c552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c554:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 80f8 	beq.w	800c74e <prvTCPReturnPacket+0x276>
            {
                /* Calculate the space in the RX buffer in order to advertise the
                 * size of this socket's reception window. */
                pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	33d8      	adds	r3, #216	; 0xd8
 800c562:	653b      	str	r3, [r7, #80]	; 0x50

                if( pxSocket->u.xTCP.rxStream != NULL )
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d006      	beq.n	800c57a <prvTCPReturnPacket+0xa2>
                {
                    /* An RX stream was created already, see how much space is
                     * available. */
                    ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c570:	4618      	mov	r0, r3
 800c572:	f7ff fd22 	bl	800bfba <uxStreamBufferFrontSpace>
 800c576:	67b8      	str	r0, [r7, #120]	; 0x78
 800c578:	e002      	b.n	800c580 <prvTCPReturnPacket+0xa8>
                }
                else
                {
                    /* No RX stream has been created, the full stream size is
                     * available. */
                    ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c57e:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Take the minimum of the RX buffer space and the RX window size. */
                ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 800c580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff fcb6 	bl	800bef8 <FreeRTOS_min_uint32>
 800c58c:	6778      	str	r0, [r7, #116]	; 0x74

                if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c594:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d107      	bne.n	800c5ae <prvTCPReturnPacket+0xd6>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5a4:	f003 0304 	and.w	r3, r3, #4
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <prvTCPReturnPacket+0xda>
                {
                    /* The low-water mark was reached, meaning there was little
                     * space left.  The socket will wait until the application has read
                     * or flushed the incoming data, and 'zero-window' will be
                     * advertised. */
                    ulSpace = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	677b      	str	r3, [r7, #116]	; 0x74
                }

                /* If possible, advertise an RX window size of at least 1 MSS, otherwise
                 * the peer might start 'zero window probing', i.e. sending small packets
                 * (1, 2, 4, 8... bytes). */
                if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d20a      	bcs.n	800c5d6 <prvTCPReturnPacket+0xfe>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d303      	bcc.n	800c5d6 <prvTCPReturnPacket+0xfe>
                {
                    ulSpace = pxSocket->u.xTCP.usCurMSS;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c5d4:	677b      	str	r3, [r7, #116]	; 0x74
                }

                /* Avoid overflow of the 16-bit win field. */
                #if ( ipconfigUSE_TCP_WIN != 0 )
                    {
                        ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5e0:	40d3      	lsrs	r3, r2
 800c5e2:	66fb      	str	r3, [r7, #108]	; 0x6c
                    {
                        ulWinSize = ulSpace;
                    }
                #endif

                if( ulWinSize > 0xfffcUL )
 800c5e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5e6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d902      	bls.n	800c5f4 <prvTCPReturnPacket+0x11c>
                {
                    ulWinSize = 0xfffcUL;
 800c5ee:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800c5f2:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800c5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	021b      	lsls	r3, r3, #8
 800c5fa:	b21a      	sxth	r2, r3
 800c5fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	0a1b      	lsrs	r3, r3, #8
 800c602:	b29b      	uxth	r3, r3
 800c604:	b21b      	sxth	r3, r3
 800c606:	4313      	orrs	r3, r2
 800c608:	b21b      	sxth	r3, r3
 800c60a:	b29a      	uxth	r2, r3
 800c60c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c60e:	861a      	strh	r2, [r3, #48]	; 0x30

                /* The new window size has been advertised, switch off the flag. */
                pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c616:	f36f 0300 	bfc	r3, #0, #1
 800c61a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Later on, when deciding to delay an ACK, a precise estimate is needed
                 * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
                 * highest sequence number minus 1 that the socket will accept. */
                pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800c61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c620:	691a      	ldr	r2, [r3, #16]
 800c622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c624:	441a      	add	r2, r3
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	645a      	str	r2, [r3, #68]	; 0x44

                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c630:	f003 0302 	and.w	r3, r3, #2
 800c634:	b2db      	uxtb	r3, r3
 800c636:	2b00      	cmp	r3, #0
 800c638:	d02f      	beq.n	800c69a <prvTCPReturnPacket+0x1c2>
                    {
                        /* Sending a keep-alive packet, send the current sequence number
                         * minus 1, which will be recognised as a keep-alive packet and
                         * responded to by acknowledging the last byte. */
                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c640:	f36f 0341 	bfc	r3, #1, #1
 800c644:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                        pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800c64e:	f043 0304 	orr.w	r3, r3, #4
 800c652:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                        pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c65c:	1e5a      	subs	r2, r3, #1
 800c65e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c660:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
                        pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800c664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c666:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c66a:	061a      	lsls	r2, r3, #24
 800c66c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c66e:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c672:	021b      	lsls	r3, r3, #8
 800c674:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c678:	431a      	orrs	r2, r3
 800c67a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c67c:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c680:	0a1b      	lsrs	r3, r3, #8
 800c682:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c686:	431a      	orrs	r2, r3
 800c688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c68a:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c68e:	0e1b      	lsrs	r3, r3, #24
 800c690:	431a      	orrs	r2, r3
 800c692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c694:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c698:	e042      	b.n	800c720 <prvTCPReturnPacket+0x248>
                    }
                    else
                #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
                {
                    pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c6a0:	061a      	lsls	r2, r3, #24
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c6a8:	021b      	lsls	r3, r3, #8
 800c6aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6ae:	431a      	orrs	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c6b6:	0a1b      	lsrs	r3, r3, #8
 800c6b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c6bc:	431a      	orrs	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c6c4:	0e1b      	lsrs	r3, r3, #24
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6ca:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26

                    if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800c6ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c6d4:	f003 0301 	and.w	r3, r3, #1
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d021      	beq.n	800c720 <prvTCPReturnPacket+0x248>
                    {
                        /* Suppress FIN in case this packet carries earlier data to be
                         * retransmitted. */
                        uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3b28      	subs	r3, #40	; 0x28
 800c6e0:	64fb      	str	r3, [r7, #76]	; 0x4c

                        if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800c6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6e8:	441a      	add	r2, r3
 800c6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d016      	beq.n	800c720 <prvTCPReturnPacket+0x248>
                        {
                            pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 800c6f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c6f8:	f023 0301 	bic.w	r3, r3, #1
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c700:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                            FreeRTOS_debug_printf( ( "Suppress FIN for %lu + %lu < %lu\n",
 800c704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c70a:	69db      	ldr	r3, [r3, #28]
 800c70c:	1ad1      	subs	r1, r2, r3
 800c70e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c71a:	4821      	ldr	r0, [pc, #132]	; (800c7a0 <prvTCPReturnPacket+0x2c8>)
 800c71c:	f7f4 f9ae 	bl	8000a7c <vLoggingPrintf>
                        }
                    }
                }

                /* Tell which sequence number is expected next time */
                pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800c720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	061a      	lsls	r2, r3, #24
 800c726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	021b      	lsls	r3, r3, #8
 800c72c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c730:	431a      	orrs	r2, r3
 800c732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	0a1b      	lsrs	r3, r3, #8
 800c738:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c73c:	431a      	orrs	r2, r3
 800c73e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	0e1b      	lsrs	r3, r3, #24
 800c744:	431a      	orrs	r2, r3
 800c746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c748:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
 800c74c:	e00d      	b.n	800c76a <prvTCPReturnPacket+0x292>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800c74e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c750:	f8d3 3026 	ldr.w	r3, [r3, #38]	; 0x26
 800c754:	657b      	str	r3, [r7, #84]	; 0x54
 800c756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c758:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
 800c75c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c75e:	f8c3 2026 	str.w	r2, [r3, #38]	; 0x26
 800c762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c766:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800c76a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c76c:	2280      	movs	r2, #128	; 0x80
 800c76e:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	b29b      	uxth	r3, r3
 800c774:	021b      	lsls	r3, r3, #8
 800c776:	b29a      	uxth	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	0a1b      	lsrs	r3, r3, #8
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	4313      	orrs	r3, r2
 800c780:	b29a      	uxth	r2, r3
 800c782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c784:	805a      	strh	r2, [r3, #2]

            if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <prvTCPReturnPacket+0x2bc>
 800c78c:	4b05      	ldr	r3, [pc, #20]	; (800c7a4 <prvTCPReturnPacket+0x2cc>)
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d109      	bne.n	800c7a8 <prvTCPReturnPacket+0x2d0>
            {
                /* When pxSocket is NULL, this function is called by prvTCPSendReset()
                * and the IP-addresses must be swapped.
                * Also swap the IP-addresses in case the IP-tack doesn't have an
                * IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ). */
                ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800c794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	673b      	str	r3, [r7, #112]	; 0x70
 800c79a:	e008      	b.n	800c7ae <prvTCPReturnPacket+0x2d6>
 800c79c:	08015c38 	.word	0x08015c38
 800c7a0:	08015c60 	.word	0x08015c60
 800c7a4:	20016918 	.word	0x20016918
            }
            else
            {
                ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800c7a8:	4b46      	ldr	r3, [pc, #280]	; (800c8c4 <prvTCPReturnPacket+0x3ec>)
 800c7aa:	695b      	ldr	r3, [r3, #20]
 800c7ac:	673b      	str	r3, [r7, #112]	; 0x70
            }

            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800c7ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7b0:	68da      	ldr	r2, [r3, #12]
 800c7b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7b4:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800c7b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c7ba:	60da      	str	r2, [r3, #12]
            vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800c7bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7be:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c7c2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c7c6:	021b      	lsls	r3, r3, #8
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c7ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7d6:	845a      	strh	r2, [r3, #34]	; 0x22
 800c7d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7da:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800c7de:	849a      	strh	r2, [r3, #36]	; 0x24

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800c7e0:	4b39      	ldr	r3, [pc, #228]	; (800c8c8 <prvTCPReturnPacket+0x3f0>)
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	021b      	lsls	r3, r3, #8
 800c7e6:	b21a      	sxth	r2, r3
 800c7e8:	4b37      	ldr	r3, [pc, #220]	; (800c8c8 <prvTCPReturnPacket+0x3f0>)
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	0a1b      	lsrs	r3, r3, #8
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	b21b      	sxth	r3, r3
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	b21b      	sxth	r3, r3
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7fa:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800c7fc:	4b32      	ldr	r3, [pc, #200]	; (800c8c8 <prvTCPReturnPacket+0x3f0>)
 800c7fe:	881b      	ldrh	r3, [r3, #0]
 800c800:	3301      	adds	r3, #1
 800c802:	b29a      	uxth	r2, r3
 800c804:	4b30      	ldr	r3, [pc, #192]	; (800c8c8 <prvTCPReturnPacket+0x3f0>)
 800c806:	801a      	strh	r2, [r3, #0]
            pxIPHeader->usFragmentOffset = 0U;
 800c808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c80a:	2200      	movs	r2, #0
 800c80c:	719a      	strb	r2, [r3, #6]
 800c80e:	2200      	movs	r2, #0
 800c810:	71da      	strb	r2, [r3, #7]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f103 020e 	add.w	r2, r3, #14
 800c818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c81a:	61da      	str	r2, [r3, #28]
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
 800c81c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c81e:	2200      	movs	r2, #0
 800c820:	625a      	str	r2, [r3, #36]	; 0x24
                }
            #endif

            /* Fill in the destination MAC addresses. */
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800c822:	6db8      	ldr	r0, [r7, #88]	; 0x58
                             ( const void * ) ( &( pxEthernetHeader->xSourceAddress ) ),
 800c824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c826:	3306      	adds	r3, #6
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800c828:	2206      	movs	r2, #6
 800c82a:	4619      	mov	r1, r3
 800c82c:	f006 faf1 	bl	8012e12 <memcpy>
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            /* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
            pvCopySource = ipLOCAL_MAC_ADDRESS;
 800c830:	4b24      	ldr	r3, [pc, #144]	; (800c8c4 <prvTCPReturnPacket+0x3ec>)
 800c832:	647b      	str	r3, [r7, #68]	; 0x44
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800c834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c836:	3306      	adds	r3, #6
 800c838:	643b      	str	r3, [r7, #64]	; 0x40
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c83a:	2206      	movs	r2, #6
 800c83c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c83e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c840:	f006 fae7 	bl	8012e12 <memcpy>

            #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800c844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c846:	69db      	ldr	r3, [r3, #28]
 800c848:	2b3b      	cmp	r3, #59	; 0x3b
 800c84a:	d812      	bhi.n	800c872 <prvTCPReturnPacket+0x39a>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800c84c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	667b      	str	r3, [r7, #100]	; 0x64
 800c852:	e008      	b.n	800c866 <prvTCPReturnPacket+0x38e>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800c854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c856:	699a      	ldr	r2, [r3, #24]
 800c858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c85a:	4413      	add	r3, r2
 800c85c:	2200      	movs	r2, #0
 800c85e:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800c860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c862:	3301      	adds	r3, #1
 800c864:	667b      	str	r3, [r7, #100]	; 0x64
 800c866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c868:	2b3b      	cmp	r3, #59	; 0x3b
 800c86a:	ddf3      	ble.n	800c854 <prvTCPReturnPacket+0x37c>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800c86c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c86e:	223c      	movs	r2, #60	; 0x3c
 800c870:	61da      	str	r2, [r3, #28]
                }
            #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 800c872:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c874:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c876:	f004 f8b5 	bl	80109e4 <xNetworkInterfaceOutput>

            if( xDoRelease == pdFALSE )
 800c87a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d11c      	bne.n	800c8ba <prvTCPReturnPacket+0x3e2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800c880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c882:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c886:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c88a:	021b      	lsls	r3, r3, #8
 800c88c:	4313      	orrs	r3, r2
 800c88e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c892:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c894:	b29a      	uxth	r2, r3
 800c896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c898:	845a      	strh	r2, [r3, #34]	; 0x22
 800c89a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c89c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c89e:	849a      	strh	r2, [r3, #36]	; 0x24
                pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800c8a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8a2:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800c8a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8a8:	f8c3 201a 	str.w	r2, [r3, #26]
                ( void ) memcpy( ( void * ) ( pxEthernetHeader->xSourceAddress.ucBytes ), ( const void * ) ( pxEthernetHeader->xDestinationAddress.ucBytes ), ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800c8ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8ae:	3306      	adds	r3, #6
 800c8b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8b2:	2206      	movs	r2, #6
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f006 faac 	bl	8012e12 <memcpy>
            else
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    }
 800c8ba:	bf00      	nop
 800c8bc:	3780      	adds	r7, #128	; 0x80
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	20016918 	.word	0x20016918
 800c8c8:	20026574 	.word	0x20026574

0800c8cc <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    static void prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 800c8cc:	b5b0      	push	{r4, r5, r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af02      	add	r7, sp, #8
 800c8d2:	6078      	str	r0, [r7, #4]
        if( xTCPWindowLoggingLevel != 0 )
 800c8d4:	4b1c      	ldr	r3, [pc, #112]	; (800c948 <prvTCPCreateWindow+0x7c>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d011      	beq.n	800c900 <prvTCPCreateWindow+0x34>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c8e2:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c8e6:	fb02 f103 	mul.w	r1, r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	4814      	ldr	r0, [pc, #80]	; (800c94c <prvTCPCreateWindow+0x80>)
 800c8fc:	f7f4 f8be 	bl	8000a7c <vLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        vTCPWindowCreate(
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
            &pxSocket->u.xTCP.xTCPWindow,
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800c90c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c910:	fb02 f103 	mul.w	r1, r2, r3
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c91a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800c91e:	fb02 f403 	mul.w	r4, r2, r3
        vTCPWindowCreate(
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 50e8 	ldr.w	r5, [r3, #232]	; 0xe8
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
        vTCPWindowCreate(
 800c934:	9201      	str	r2, [sp, #4]
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	462b      	mov	r3, r5
 800c93a:	4622      	mov	r2, r4
 800c93c:	f002 fd66 	bl	800f40c <vTCPWindowCreate>
    }
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bdb0      	pop	{r4, r5, r7, pc}
 800c948:	2002660c 	.word	0x2002660c
 800c94c:	08015c84 	.word	0x08015c84

0800c950 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 800c950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c952:	b093      	sub	sp, #76	; 0x4c
 800c954:	af06      	add	r7, sp, #24
 800c956:	6078      	str	r0, [r7, #4]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        eARPLookupResult_t eReturned;
        uint32_t ulRemoteIP;
        MACAddress_t xEthAddress;
        BaseType_t xReturn = pdTRUE;
 800c958:	2301      	movs	r3, #1
 800c95a:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulInitialSequenceNumber = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	62bb      	str	r3, [r7, #40]	; 0x28

        #if ( ipconfigHAS_PRINTF != 0 )
            {
                /* Only necessary for nicer logging. */
                ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 800c960:	f107 030c 	add.w	r3, r7, #12
 800c964:	2206      	movs	r2, #6
 800c966:	2100      	movs	r1, #0
 800c968:	4618      	mov	r0, r3
 800c96a:	f006 fa76 	bl	8012e5a <memset>
            }
        #endif /* ipconfigHAS_PRINTF != 0 */

        ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c972:	061a      	lsls	r2, r3, #24
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c978:	021b      	lsls	r3, r3, #8
 800c97a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c97e:	431a      	orrs	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c984:	0a1b      	lsrs	r3, r3, #8
 800c986:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c98a:	431a      	orrs	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c990:	0e1b      	lsrs	r3, r3, #24
 800c992:	4313      	orrs	r3, r2
 800c994:	617b      	str	r3, [r7, #20]

        /* Determine the ARP cache status for the requested IP address. */
        eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800c996:	f107 020c 	add.w	r2, r7, #12
 800c99a:	f107 0314 	add.w	r3, r7, #20
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fb fb1d 	bl	8007fe0 <eARPGetCacheEntry>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        switch( eReturned )
 800c9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d037      	beq.n	800ca24 <prvTCPPrepareConnect+0xd4>

            case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
            case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
            default:
                /* Count the number of times it could not find the ARP address. */
                pxSocket->u.xTCP.ucRepCount++;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                FreeRTOS_debug_printf( ( "ARP for %lxip (using %lxip): rc=%d %02X:%02X:%02X %02X:%02X:%02X\n",
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	061a      	lsls	r2, r3, #24
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9d4:	431a      	orrs	r2, r3
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	0a1b      	lsrs	r3, r3, #8
 800c9da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c9de:	431a      	orrs	r2, r3
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	0e1b      	lsrs	r3, r3, #24
 800c9e4:	431a      	orrs	r2, r3
 800c9e6:	f897 e027 	ldrb.w	lr, [r7, #39]	; 0x27
 800c9ea:	7b38      	ldrb	r0, [r7, #12]
 800c9ec:	7b7c      	ldrb	r4, [r7, #13]
 800c9ee:	7bbd      	ldrb	r5, [r7, #14]
 800c9f0:	7bfe      	ldrb	r6, [r7, #15]
 800c9f2:	f897 c010 	ldrb.w	ip, [r7, #16]
 800c9f6:	f8c7 c000 	str.w	ip, [r7]
 800c9fa:	f897 c011 	ldrb.w	ip, [r7, #17]
 800c9fe:	4663      	mov	r3, ip
 800ca00:	9305      	str	r3, [sp, #20]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	9603      	str	r6, [sp, #12]
 800ca08:	9502      	str	r5, [sp, #8]
 800ca0a:	9401      	str	r4, [sp, #4]
 800ca0c:	9000      	str	r0, [sp, #0]
 800ca0e:	4673      	mov	r3, lr
 800ca10:	4859      	ldr	r0, [pc, #356]	; (800cb78 <prvTCPPrepareConnect+0x228>)
 800ca12:	f7f4 f833 	bl	8000a7c <vLoggingPrintf>
                                         xEthAddress.ucBytes[ 3 ],
                                         xEthAddress.ucBytes[ 4 ],
                                         xEthAddress.ucBytes[ 5 ] ) );

                /* And issue a (new) ARP request */
                FreeRTOS_OutputARPRequest( ulRemoteIP );
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fb fc29 	bl	8008270 <FreeRTOS_OutputARPRequest>
                xReturn = pdFALSE;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 800ca22:	e000      	b.n	800ca26 <prvTCPPrepareConnect+0xd6>
                break;            /* We can now prepare the SYN packet. */
 800ca24:	bf00      	nop
        }

        if( xReturn != pdFALSE )
 800ca26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00f      	beq.n	800ca4c <prvTCPPrepareConnect+0xfc>
        {
            /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
            ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800ca2c:	4b53      	ldr	r3, [pc, #332]	; (800cb7c <prvTCPPrepareConnect+0x22c>)
 800ca2e:	6958      	ldr	r0, [r3, #20]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ca3c:	f7f4 f827 	bl	8000a8e <ulApplicationGetNextSequenceNumber>
 800ca40:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                          pxSocket->usLocalPort,
                                                                          pxSocket->u.xTCP.ulRemoteIP,
                                                                          pxSocket->u.xTCP.usRemotePort );

            /* Check for a random number generation error. */
            if( ulInitialSequenceNumber == 0UL )
 800ca42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d101      	bne.n	800ca4c <prvTCPPrepareConnect+0xfc>
            {
                xReturn = pdFALSE;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        if( xReturn != pdFALSE )
 800ca4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 808d 	beq.w	800cb6e <prvTCPPrepareConnect+0x21e>
            uint16_t usLength;

            /* The MAC-address of the peer (or gateway) has been found,
             * now prepare the initial TCP packet and some fields in the socket. Map
             * the buffer onto the TCPPacket_t struct to easily access it's field. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3382      	adds	r3, #130	; 0x82
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7ff fb09 	bl	800c070 <vCastPointerTo_TCPPacket_t>
 800ca5e:	6238      	str	r0, [r7, #32]
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800ca60:	6a3b      	ldr	r3, [r7, #32]
 800ca62:	330e      	adds	r3, #14
 800ca64:	61fb      	str	r3, [r7, #28]

            /* reset the retry counter to zero. */
            pxSocket->u.xTCP.ucRepCount = 0U;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

            /* And remember that the connect/SYN data are prepared. */
            pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800ca74:	f043 0308 	orr.w	r3, r3, #8
 800ca78:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

            /* Now that the Ethernet address is known, the initial packet can be
             * prepared. */
            ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3382      	adds	r3, #130	; 0x82
 800ca80:	2246      	movs	r2, #70	; 0x46
 800ca82:	2100      	movs	r1, #0
 800ca84:	4618      	mov	r0, r3
 800ca86:	f006 f9e8 	bl	8012e5a <memset>

            /* Write the Ethernet address in Source, because it will be swapped by
             * prvTCPReturnPacket(). */
            ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 800ca8a:	6a3b      	ldr	r3, [r7, #32]
 800ca8c:	3306      	adds	r3, #6
 800ca8e:	461a      	mov	r2, r3
 800ca90:	f107 030c 	add.w	r3, r7, #12
 800ca94:	6818      	ldr	r0, [r3, #0]
 800ca96:	6010      	str	r0, [r2, #0]
 800ca98:	889b      	ldrh	r3, [r3, #4]
 800ca9a:	8093      	strh	r3, [r2, #4]

            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f042 0208 	orr.w	r2, r2, #8
 800caa4:	731a      	strb	r2, [r3, #12]
 800caa6:	2200      	movs	r2, #0
 800caa8:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionHeaderLength = 0x45U;
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	2245      	movs	r2, #69	; 0x45
 800caae:	701a      	strb	r2, [r3, #0]
            usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800cab0:	2338      	movs	r3, #56	; 0x38
 800cab2:	837b      	strh	r3, [r7, #26]
            pxIPHeader->usLength = FreeRTOS_htons( usLength );
 800cab4:	8b7b      	ldrh	r3, [r7, #26]
 800cab6:	021b      	lsls	r3, r3, #8
 800cab8:	b21a      	sxth	r2, r3
 800caba:	8b7b      	ldrh	r3, [r7, #26]
 800cabc:	0a1b      	lsrs	r3, r3, #8
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	b21b      	sxth	r3, r3
 800cac2:	4313      	orrs	r3, r2
 800cac4:	b21b      	sxth	r3, r3
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	2280      	movs	r2, #128	; 0x80
 800cad0:	721a      	strb	r2, [r3, #8]

            pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	2206      	movs	r2, #6
 800cad6:	725a      	strb	r2, [r3, #9]

            /* Addresses and ports will be stored swapped because prvTCPReturnPacket
             * will swap them back while replying. */
            pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800cad8:	4b28      	ldr	r3, [pc, #160]	; (800cb7c <prvTCPPrepareConnect+0x22c>)
 800cada:	695a      	ldr	r2, [r3, #20]
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae4:	061a      	lsls	r2, r3, #24
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	021b      	lsls	r3, r3, #8
 800caec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800caf0:	431a      	orrs	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf6:	0a1b      	lsrs	r3, r3, #8
 800caf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cafc:	431a      	orrs	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb02:	0e1b      	lsrs	r3, r3, #24
 800cb04:	431a      	orrs	r2, r3
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	60da      	str	r2, [r3, #12]

            pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb0e:	021b      	lsls	r3, r3, #8
 800cb10:	b21a      	sxth	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	b21b      	sxth	r3, r3
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	b21b      	sxth	r3, r3
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	6a3b      	ldr	r3, [r7, #32]
 800cb24:	845a      	strh	r2, [r3, #34]	; 0x22
            pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb2a:	021b      	lsls	r3, r3, #8
 800cb2c:	b21a      	sxth	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb32:	0a1b      	lsrs	r3, r3, #8
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	b21b      	sxth	r3, r3
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	b21b      	sxth	r3, r3
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	6a3b      	ldr	r3, [r7, #32]
 800cb40:	849a      	strh	r2, [r3, #36]	; 0x24

            /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
             * isn't known yet. */
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

            /* Start with ISN (Initial Sequence Number). */
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
             * the high nibble of the TCP offset field. */
            pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	2250      	movs	r2, #80	; 0x50
 800cb56:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Only set the SYN flag. */
            pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

            /* Set the values of usInitMSS / usCurMSS for this socket. */
            prvSocketSetMSS( pxSocket );
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f001 fdc8 	bl	800e6f8 <prvSocketSetMSS>

            /* The initial sequence numbers at our side are known.  Later
             * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
             * first wait for a SYN+ACK reply. */
            prvTCPCreateWindow( pxSocket );
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f7ff feaf 	bl	800c8cc <prvTCPCreateWindow>
        }

        return xReturn;
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800cb70:	4618      	mov	r0, r3
 800cb72:	3734      	adds	r7, #52	; 0x34
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb78:	08015cbc 	.word	0x08015cbc
 800cb7c:	20016918 	.word	0x20016918

0800cb80 <prvTCPFlagMeaning>:
 * @param[in] xFlags: The TCP flags.
 *
 * @return The string containing the flags.
 */
        static const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 800cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb82:	b08d      	sub	sp, #52	; 0x34
 800cb84:	af08      	add	r7, sp, #32
 800cb86:	6078      	str	r0, [r7, #4]
            static char retString[ 10 ];
            size_t uxFlags = ( size_t ) xFlags;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d002      	beq.n	800cb9c <prvTCPFlagMeaning+0x1c>
 800cb96:	f04f 0c46 	mov.w	ip, #70	; 0x46
 800cb9a:	e001      	b.n	800cba0 <prvTCPFlagMeaning+0x20>
 800cb9c:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <prvTCPFlagMeaning+0x2e>
 800cbaa:	2353      	movs	r3, #83	; 0x53
 800cbac:	e000      	b.n	800cbb0 <prvTCPFlagMeaning+0x30>
 800cbae:	232e      	movs	r3, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 800cbb6:	2a00      	cmp	r2, #0
 800cbb8:	d001      	beq.n	800cbbe <prvTCPFlagMeaning+0x3e>
 800cbba:	2252      	movs	r2, #82	; 0x52
 800cbbc:	e000      	b.n	800cbc0 <prvTCPFlagMeaning+0x40>
 800cbbe:	222e      	movs	r2, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 800cbc0:	68f9      	ldr	r1, [r7, #12]
 800cbc2:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 800cbc6:	2900      	cmp	r1, #0
 800cbc8:	d001      	beq.n	800cbce <prvTCPFlagMeaning+0x4e>
 800cbca:	2150      	movs	r1, #80	; 0x50
 800cbcc:	e000      	b.n	800cbd0 <prvTCPFlagMeaning+0x50>
 800cbce:	212e      	movs	r1, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d001      	beq.n	800cbde <prvTCPFlagMeaning+0x5e>
 800cbda:	2041      	movs	r0, #65	; 0x41
 800cbdc:	e000      	b.n	800cbe0 <prvTCPFlagMeaning+0x60>
 800cbde:	202e      	movs	r0, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 800cbe0:	68fc      	ldr	r4, [r7, #12]
 800cbe2:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 800cbe6:	2c00      	cmp	r4, #0
 800cbe8:	d001      	beq.n	800cbee <prvTCPFlagMeaning+0x6e>
 800cbea:	2455      	movs	r4, #85	; 0x55
 800cbec:	e000      	b.n	800cbf0 <prvTCPFlagMeaning+0x70>
 800cbee:	242e      	movs	r4, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 800cbf0:	68fd      	ldr	r5, [r7, #12]
 800cbf2:	f005 0540 	and.w	r5, r5, #64	; 0x40
            ( void ) snprintf( retString,
 800cbf6:	2d00      	cmp	r5, #0
 800cbf8:	d001      	beq.n	800cbfe <prvTCPFlagMeaning+0x7e>
 800cbfa:	2545      	movs	r5, #69	; 0x45
 800cbfc:	e000      	b.n	800cc00 <prvTCPFlagMeaning+0x80>
 800cbfe:	252e      	movs	r5, #46	; 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 800cc00:	68fe      	ldr	r6, [r7, #12]
 800cc02:	f006 0680 	and.w	r6, r6, #128	; 0x80
            ( void ) snprintf( retString,
 800cc06:	2e00      	cmp	r6, #0
 800cc08:	d001      	beq.n	800cc0e <prvTCPFlagMeaning+0x8e>
 800cc0a:	2643      	movs	r6, #67	; 0x43
 800cc0c:	e000      	b.n	800cc10 <prvTCPFlagMeaning+0x90>
 800cc0e:	262e      	movs	r6, #46	; 0x2e
 800cc10:	9606      	str	r6, [sp, #24]
 800cc12:	9505      	str	r5, [sp, #20]
 800cc14:	9404      	str	r4, [sp, #16]
 800cc16:	9003      	str	r0, [sp, #12]
 800cc18:	9102      	str	r1, [sp, #8]
 800cc1a:	9201      	str	r2, [sp, #4]
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	4663      	mov	r3, ip
 800cc20:	4a04      	ldr	r2, [pc, #16]	; (800cc34 <prvTCPFlagMeaning+0xb4>)
 800cc22:	210a      	movs	r1, #10
 800cc24:	4804      	ldr	r0, [pc, #16]	; (800cc38 <prvTCPFlagMeaning+0xb8>)
 800cc26:	f006 fe31 	bl	801388c <sniprintf>
            return retString;
 800cc2a:	4b03      	ldr	r3, [pc, #12]	; (800cc38 <prvTCPFlagMeaning+0xb8>)
        }
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc34:	08015d00 	.word	0x08015d00
 800cc38:	200265e8 	.word	0x200265e8

0800cc3c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    _static void prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                  const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08c      	sub	sp, #48	; 0x30
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer );
 800cc46:	2322      	movs	r3, #34	; 0x22
 800cc48:	623b      	str	r3, [r7, #32]
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	699a      	ldr	r2, [r3, #24]
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	4413      	add	r3, r2
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff fa22 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800cc58:	61f8      	str	r0, [r7, #28]
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ( sizeof( TCPHeader_t ) - sizeof( pxTCPHeader->ucOptdata ) );
 800cc5a:	6a3b      	ldr	r3, [r7, #32]
 800cc5c:	3314      	adds	r3, #20
 800cc5e:	61bb      	str	r3, [r7, #24]
        size_t uxOptionsLength;
        size_t uxResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	617b      	str	r3, [r7, #20]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	3314      	adds	r3, #20
 800cc68:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	7b1b      	ldrb	r3, [r3, #12]
 800cc6e:	2b50      	cmp	r3, #80	; 0x50
 800cc70:	d93e      	bls.n	800ccf0 <prvCheckOptions+0xb4>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	7b1b      	ldrb	r3, [r3, #12]
 800cc76:	091b      	lsrs	r3, r3, #4
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	3b05      	subs	r3, #5
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	74fb      	strb	r3, [r7, #19]
            uxOptionsLength = ( size_t ) ucLength;
 800cc82:	7cfb      	ldrb	r3, [r7, #19]
 800cc84:	627b      	str	r3, [r7, #36]	; 0x24

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	69db      	ldr	r3, [r3, #28]
 800cc8a:	69ba      	ldr	r2, [r7, #24]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d22f      	bcs.n	800ccf0 <prvCheckOptions+0xb4>
            {
                /* Validate options size calculation. */
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	69db      	ldr	r3, [r3, #28]
 800cc94:	69ba      	ldr	r2, [r7, #24]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d22a      	bcs.n	800ccf0 <prvCheckOptions+0xb4>
                    ( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	69da      	ldr	r2, [r3, #28]
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	1ad3      	subs	r3, r2, r3
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 800cca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d823      	bhi.n	800ccf0 <prvCheckOptions+0xb4>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	7b5b      	ldrb	r3, [r3, #13]
 800ccac:	f003 0302 	and.w	r3, r3, #2
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <prvCheckOptions+0x7e>
                    {
                        xHasSYNFlag = pdTRUE;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccb8:	e001      	b.n	800ccbe <prvCheckOptions+0x82>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d012      	beq.n	800ccea <prvCheckOptions+0xae>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        uxResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 800ccc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cccc:	f000 f814 	bl	800ccf8 <prvSingleStepTCPHeaderOptions>
 800ccd0:	60f8      	str	r0, [r7, #12]

                        if( uxResult == 0UL )
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00a      	beq.n	800ccee <prvCheckOptions+0xb2>
                        {
                            break;
                        }

                        uxOptionsLength -= uxResult;
 800ccd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	1ad3      	subs	r3, r2, r3
 800ccde:	627b      	str	r3, [r7, #36]	; 0x24
                        pucPtr = &( pucPtr[ uxResult ] );
 800cce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	4413      	add	r3, r2
 800cce6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if( uxOptionsLength == 0U )
 800cce8:	e7e9      	b.n	800ccbe <prvCheckOptions+0x82>
                            break;
 800ccea:	bf00      	nop
 800ccec:	e000      	b.n	800ccf0 <prvCheckOptions+0xb4>
                            break;
 800ccee:	bf00      	nop
                    }
                }
            }
        }
    }
 800ccf0:	bf00      	nop
 800ccf2:	3730      	adds	r7, #48	; 0x30
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <prvSingleStepTCPHeaderOptions>:
 */
    _static size_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08a      	sub	sp, #40	; 0x28
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
 800cd04:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	61bb      	str	r3, [r7, #24]
        uint8_t ucLen;
        size_t uxIndex;
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	33d8      	adds	r3, #216	; 0xd8
 800cd0e:	617b      	str	r3, [r7, #20]
        BaseType_t xReturn = pdFALSE;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61fb      	str	r3, [r7, #28]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d102      	bne.n	800cd22 <prvSingleStepTCPHeaderOptions+0x2a>
        {
            /* End of options. */
            uxIndex = 0U;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	623b      	str	r3, [r7, #32]
 800cd20:	e0d2      	b.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d102      	bne.n	800cd30 <prvSingleStepTCPHeaderOptions+0x38>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            uxIndex = 1U;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	623b      	str	r3, [r7, #32]
 800cd2e:	e0cb      	b.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
        }
        else if( uxRemainingOptionsBytes < 2U )
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d802      	bhi.n	800cd3c <prvSingleStepTCPHeaderOptions+0x44>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            uxIndex = 0U;
 800cd36:	2300      	movs	r3, #0
 800cd38:	623b      	str	r3, [r7, #32]
 800cd3a:	e0c5      	b.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b03      	cmp	r3, #3
 800cd42:	d11c      	bne.n	800cd7e <prvSingleStepTCPHeaderOptions+0x86>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	d904      	bls.n	800cd54 <prvSingleStepTCPHeaderOptions+0x5c>
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	d002      	beq.n	800cd5a <prvSingleStepTCPHeaderOptions+0x62>
                {
                    uxIndex = 0U;
 800cd54:	2300      	movs	r3, #0
 800cd56:	623b      	str	r3, [r7, #32]
 800cd58:	e0b6      	b.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00b      	beq.n	800cd78 <prvSingleStepTCPHeaderOptions+0x80>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	789a      	ldrb	r2, [r3, #2]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800cd70:	f043 0310 	orr.w	r3, r3, #16
 800cd74:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                    }

                    uxIndex = tcpTCP_OPT_WSOPT_LEN;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	623b      	str	r3, [r7, #32]
 800cd7c:	e0a4      	b.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d16e      	bne.n	800ce64 <prvSingleStepTCPHeaderOptions+0x16c>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	2b03      	cmp	r3, #3
 800cd8a:	d904      	bls.n	800cd96 <prvSingleStepTCPHeaderOptions+0x9e>
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	2b04      	cmp	r3, #4
 800cd94:	d002      	beq.n	800cd9c <prvSingleStepTCPHeaderOptions+0xa4>
            {
                uxIndex = 0U;
 800cd96:	2300      	movs	r3, #0
 800cd98:	623b      	str	r3, [r7, #32]
 800cd9a:	e095      	b.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3302      	adds	r3, #2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff f9b7 	bl	800c114 <usChar2u16>
 800cda6:	4603      	mov	r3, r0
 800cda8:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d00f      	beq.n	800cdd8 <prvSingleStepTCPHeaderOptions+0xe0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d104      	bne.n	800cdc8 <prvSingleStepTCPHeaderOptions+0xd0>
                    {
                        uxIndex = 0U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	623b      	str	r3, [r7, #32]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	61fb      	str	r3, [r7, #28]
 800cdc6:	e007      	b.n	800cdd8 <prvSingleStepTCPHeaderOptions+0xe0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4840      	ldr	r0, [pc, #256]	; (800ced4 <prvSingleStepTCPHeaderOptions+0x1dc>)
 800cdd4:	f7f3 fe52 	bl	8000a7c <vLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d174      	bne.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
                {
                    if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cde4:	461a      	mov	r2, r3
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d238      	bcs.n	800ce5e <prvSingleStepTCPHeaderOptions+0x166>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800cdf2:	f043 0301 	orr.w	r3, r3, #1
 800cdf6:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                        if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ce00:	461a      	mov	r2, r3
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d20c      	bcs.n	800ce22 <prvSingleStepTCPHeaderOptions+0x12a>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	4619      	mov	r1, r3
 800ce12:	4831      	ldr	r0, [pc, #196]	; (800ced8 <prvSingleStepTCPHeaderOptions+0x1e0>)
 800ce14:	f7f3 fe32 	bl	8000a7c <vLoggingPrintf>
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	685a      	ldr	r2, [r3, #4]
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	fb02 f203 	mul.w	r2, r2, r3
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
                    }

                    uxIndex = tcpTCP_OPT_MSS_LEN;
 800ce5e:	2304      	movs	r3, #4
 800ce60:	623b      	str	r3, [r7, #32]
 800ce62:	e031      	b.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	785b      	ldrb	r3, [r3, #1]
 800ce68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            uxIndex = 0U;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	623b      	str	r3, [r7, #32]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 800ce70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d927      	bls.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
 800ce78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce7c:	69ba      	ldr	r2, [r7, #24]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d322      	bcc.n	800cec8 <prvSingleStepTCPHeaderOptions+0x1d0>
                    {
                        /* Selective ACK: the peer has received a packet but it is missing
                         * earlier packets. At least this packet does not need retransmission
                         * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                         */
                        if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	2b05      	cmp	r3, #5
 800ce88:	d119      	bne.n	800cebe <prvSingleStepTCPHeaderOptions+0x1c6>
                        {
                            ucLen -= 2U;
 800ce8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce8e:	3b02      	subs	r3, #2
 800ce90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            uxIndex += 2U;
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	3302      	adds	r3, #2
 800ce98:	623b      	str	r3, [r7, #32]

                            while( ucLen >= ( uint8_t ) 8U )
 800ce9a:	e00c      	b.n	800ceb6 <prvSingleStepTCPHeaderOptions+0x1be>
                            {
                                prvReadSackOption( pucPtr, uxIndex, pxSocket );
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6a39      	ldr	r1, [r7, #32]
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f000 f81b 	bl	800cedc <prvReadSackOption>
                                uxIndex += 8U;
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	3308      	adds	r3, #8
 800ceaa:	623b      	str	r3, [r7, #32]
                                ucLen -= 8U;
 800ceac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceb0:	3b08      	subs	r3, #8
 800ceb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            while( ucLen >= ( uint8_t ) 8U )
 800ceb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceba:	2b07      	cmp	r3, #7
 800cebc:	d8ee      	bhi.n	800ce9c <prvSingleStepTCPHeaderOptions+0x1a4>
                            /* ucLen should be 0 by now. */
                        }
                    }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                uxIndex += ( size_t ) ucLen;
 800cebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cec2:	6a3a      	ldr	r2, [r7, #32]
 800cec4:	4413      	add	r3, r2
 800cec6:	623b      	str	r3, [r7, #32]
            }
        }
        return uxIndex;
 800cec8:	6a3b      	ldr	r3, [r7, #32]
    }
 800ceca:	4618      	mov	r0, r3
 800cecc:	3728      	adds	r7, #40	; 0x28
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	08015d14 	.word	0x08015d14
 800ced8:	08015d2c 	.word	0x08015d2c

0800cedc <prvReadSackOption>:
 * @param[in] pxSocket: Socket handling the TCP connection.
 */
        _static void prvReadSackOption( const uint8_t * const pucPtr,
                                        size_t uxIndex,
                                        FreeRTOS_Socket_t * const pxSocket )
        {
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08a      	sub	sp, #40	; 0x28
 800cee0:	af02      	add	r7, sp, #8
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	4413      	add	r3, r2
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7ff f8f5 	bl	800c0de <ulChar2u32>
 800cef4:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	3304      	adds	r3, #4
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	4413      	add	r3, r2
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7ff f8ed 	bl	800c0de <ulChar2u32>
 800cf04:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	33d8      	adds	r3, #216	; 0xd8
 800cf0a:	69ba      	ldr	r2, [r7, #24]
 800cf0c:	69f9      	ldr	r1, [r7, #28]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f003 f994 	bl	801023c <ulTCPWindowTxSack>
 800cf14:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d01d      	beq.n	800cf5a <prvReadSackOption+0x7e>
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d01a      	beq.n	800cf5a <prvReadSackOption+0x7e>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cf28:	2300      	movs	r3, #0
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2100      	movs	r1, #0
 800cf32:	f7fe ff5d 	bl	800bdf0 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f043 0202 	orr.w	r2, r3, #2
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf46:	f003 0302 	and.w	r3, r3, #2
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d005      	beq.n	800cf5a <prvReadSackOption+0x7e>
                        {
                            /* The field 'xEventBits' is used to store regular socket events
                             * (at most 8), as well as 'select events', which will be left-shifted.
                             */
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	601a      	str	r2, [r3, #0]
                            pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
                        }
                    }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 800cf5a:	bf00      	nop
 800cf5c:	3720      	adds	r7, #32
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
	...

0800cf64 <prvWinScaleFactor>:
 * @param[in] pxSocket: The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800cf78:	fb02 f303 	mul.w	r3, r2, r3
 800cf7c:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffUL )
 800cf82:	e005      	b.n	800cf90 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	085b      	lsrs	r3, r3, #1
 800cf88:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 800cf8a:	7afb      	ldrb	r3, [r7, #11]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffUL )
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf96:	d2f5      	bcs.n	800cf84 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	7afb      	ldrb	r3, [r7, #11]
 800cfa8:	4803      	ldr	r0, [pc, #12]	; (800cfb8 <prvWinScaleFactor+0x54>)
 800cfaa:	f7f3 fd67 	bl	8000a7c <vLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     ( unsigned ) pxSocket->u.xTCP.usInitMSS,
                                     ucFactor ) );

            return ucFactor;
 800cfae:	7afb      	ldrb	r3, [r7, #11]
        }
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	08015d44 	.word	0x08015d44

0800cfbc <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                            TCPHeader_t * pxTCPHeader )
    {
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800cfcc:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2202      	movs	r2, #2
 800cfd2:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2204      	movs	r2, #4
 800cfd8:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800cfda:	89fb      	ldrh	r3, [r7, #14]
 800cfdc:	0a1b      	lsrs	r3, r3, #8
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	b2da      	uxtb	r2, r3
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 800cfe6:	89fb      	ldrh	r3, [r7, #14]
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff ffb8 	bl	800cf64 <prvWinScaleFactor>
 800cff4:	4603      	mov	r3, r0
 800cff6:	461a      	mov	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

                pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2201      	movs	r2, #1
 800d002:	761a      	strb	r2, [r3, #24]
                pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	2203      	movs	r2, #3
 800d008:	765a      	strb	r2, [r3, #25]
                pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2203      	movs	r2, #3
 800d00e:	769a      	strb	r2, [r3, #26]
                pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	76da      	strb	r2, [r3, #27]
                uxOptionsLength = 8U;
 800d01a:	2308      	movs	r3, #8
 800d01c:	60bb      	str	r3, [r7, #8]
            }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	4413      	add	r3, r2
 800d024:	3314      	adds	r3, #20
 800d026:	2201      	movs	r2, #1
 800d028:	701a      	strb	r2, [r3, #0]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	3301      	adds	r3, #1
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	4413      	add	r3, r2
 800d032:	2201      	movs	r2, #1
 800d034:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	3302      	adds	r3, #2
 800d03a:	683a      	ldr	r2, [r7, #0]
 800d03c:	4413      	add	r3, r2
 800d03e:	2204      	movs	r2, #4
 800d040:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	3303      	adds	r3, #3
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	4413      	add	r3, r2
 800d04a:	2202      	movs	r2, #2
 800d04c:	751a      	strb	r2, [r3, #20]
                uxOptionsLength += 4U;
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	3304      	adds	r3, #4
 800d052:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 800d054:	68bb      	ldr	r3, [r7, #8]
    }
 800d056:	4618      	mov	r0, r3
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    static void prvTCPTouchSocket( FreeRTOS_Socket_t * pxSocket )
    {
 800d05e:	b580      	push	{r7, lr}
 800d060:	b082      	sub	sp, #8
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800d066:	f7f9 f859 	bl	800611c <xTaskGetTickCount>
 800d06a:	4602      	mov	r2, r0
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	661a      	str	r2, [r3, #96]	; 0x60
            }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            {
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d076:	f36f 0382 	bfc	r3, #2, #1
 800d07a:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d084:	f36f 0341 	bfc	r3, #1, #1
 800d088:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800d094:	f7f9 f842 	bl	800611c <xTaskGetTickCount>
 800d098:	4602      	mov	r2, r0
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	65da      	str	r2, [r3, #92]	; 0x5c
            }
        #endif

        ( void ) pxSocket;
    }
 800d09e:	bf00      	nop
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
	...

0800d0a8 <vTCPStateChange>:
 * @param[in] pxSocket: The socket whose state we are trying to change.
 * @param[in] eTCPState: The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 800d0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ac:	b088      	sub	sp, #32
 800d0ae:	af02      	add	r7, sp, #8
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = NULL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	617b      	str	r3, [r7, #20]
        BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d906      	bls.n	800d0d2 <vTCPStateChange+0x2a>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d0ca:	2b08      	cmp	r3, #8
 800d0cc:	d001      	beq.n	800d0d2 <vTCPStateChange+0x2a>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e000      	b.n	800d0d4 <vTCPStateChange+0x2c>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	613b      	str	r3, [r7, #16]
        BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 800d0d6:	78fb      	ldrb	r3, [r7, #3]
 800d0d8:	2b04      	cmp	r3, #4
 800d0da:	d904      	bls.n	800d0e6 <vTCPStateChange+0x3e>
 800d0dc:	78fb      	ldrb	r3, [r7, #3]
 800d0de:	2b08      	cmp	r3, #8
 800d0e0:	d001      	beq.n	800d0e6 <vTCPStateChange+0x3e>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e000      	b.n	800d0e8 <vTCPStateChange+0x40>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            BaseType_t xPreviousState = ( BaseType_t ) pxSocket->u.xTCP.ucTCPState;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d0f0:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
        #endif

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	f000 8082 	beq.w	800d200 <vTCPStateChange+0x158>
        {
            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d05e      	beq.n	800d1c0 <vTCPStateChange+0x118>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d108:	f003 0304 	and.w	r3, r3, #4
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d043      	beq.n	800d19a <vTCPStateChange+0xf2>
                {
                    /* Now that it is connected, find it's parent. */
                    if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <vTCPStateChange+0x80>
                    {
                        xParent = pxSocket;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	617b      	str	r3, [r7, #20]
 800d126:	e00a      	b.n	800d13e <vTCPStateChange+0x96>
                    }
                    else
                    {
                        xParent = pxSocket->u.xTCP.pxPeerSocket;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d12c:	617b      	str	r3, [r7, #20]
                        configASSERT( xParent != NULL );
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d104      	bne.n	800d13e <vTCPStateChange+0x96>
 800d134:	495d      	ldr	r1, [pc, #372]	; (800d2ac <vTCPStateChange+0x204>)
 800d136:	f240 60c4 	movw	r0, #1732	; 0x6c4
 800d13a:	f7f3 fcc8 	bl	8000ace <vAssertCalled>
                    }

                    if( xParent != NULL )
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d018      	beq.n	800d176 <vTCPStateChange+0xce>
                    {
                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d102      	bne.n	800d152 <vTCPStateChange+0xaa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	655a      	str	r2, [r3, #84]	; 0x54
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f043 0204 	orr.w	r2, r3, #4
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                            {
                                /* Library support FreeRTOS_select().  Receiving a new
                                 * connection is being translated as a READ event. */
                                if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d162:	f003 0301 	and.w	r3, r3, #1
 800d166:	2b00      	cmp	r3, #0
 800d168:	d005      	beq.n	800d176 <vTCPStateChange+0xce>
                                {
                                    xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	601a      	str	r2, [r3, #0]
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d182:	f36f 0382 	bfc	r3, #2, #1
 800d186:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d190:	f043 0302 	orr.w	r3, r3, #2
 800d194:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
 800d198:	e024      	b.n	800d1e4 <vTCPStateChange+0x13c>
                }
                else
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f043 0208 	orr.w	r2, r3, #8
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1aa:	f003 0302 	and.w	r3, r3, #2
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d018      	beq.n	800d1e4 <vTCPStateChange+0x13c>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	e011      	b.n	800d1e4 <vTCPStateChange+0x13c>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting a semaphore. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f043 0220 	orr.w	r2, r3, #32
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	f003 0304 	and.w	r3, r3, #4
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d005      	beq.n	800d1e4 <vTCPStateChange+0x13c>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	601a      	str	r2, [r3, #0]
                        xConnected = pxSocket;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fe ffa8 	bl	800c140 <prvTCPSocketIsActive>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d125      	bne.n	800d242 <vTCPStateChange+0x19a>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d1fe:	e020      	b.n	800d242 <vTCPStateChange+0x19a>
            }
        }
        else
        {
            if( ( ( BaseType_t ) eTCPState ) == ( ( BaseType_t ) eCLOSED ) )
 800d200:	78fb      	ldrb	r3, [r7, #3]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d11d      	bne.n	800d242 <vTCPStateChange+0x19a>
            {
                /* Socket goes to status eCLOSED because of a RST.
                 * When nobody owns the socket yet, delete it. */
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d20c:	f003 0304 	and.w	r3, r3, #4
 800d210:	b2db      	uxtb	r3, r3
 800d212:	2b00      	cmp	r3, #0
 800d214:	d107      	bne.n	800d226 <vTCPStateChange+0x17e>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d21c:	f003 0302 	and.w	r3, r3, #2
 800d220:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00d      	beq.n	800d242 <vTCPStateChange+0x19a>
                {
                    FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );
 800d226:	4822      	ldr	r0, [pc, #136]	; (800d2b0 <vTCPStateChange+0x208>)
 800d228:	f7f3 fc28 	bl	8000a7c <vLoggingPrintf>

                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d232:	f003 0308 	and.w	r3, r3, #8
 800d236:	b2db      	uxtb	r3, r3
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d102      	bne.n	800d242 <vTCPStateChange+0x19a>
                    {
                        ( void ) FreeRTOS_closesocket( pxSocket );
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7fd fd6f 	bl	800ad20 <FreeRTOS_closesocket>
                }
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	78fa      	ldrb	r2, [r7, #3]
 800d246:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7ff ff07 	bl	800d05e <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
            {
                if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800d250:	4b18      	ldr	r3, [pc, #96]	; (800d2b4 <vTCPStateChange+0x20c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	db1d      	blt.n	800d294 <vTCPStateChange+0x1ec>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d25c:	2b17      	cmp	r3, #23
 800d25e:	d019      	beq.n	800d294 <vTCPStateChange+0x1ec>
                {
                    FreeRTOS_debug_printf( ( "Socket %d -> %lxip:%u State %s->%s\n",
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d264:	461e      	mov	r6, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d26e:	4698      	mov	r8, r3
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	4618      	mov	r0, r3
 800d274:	f001 fdca 	bl	800ee0c <FreeRTOS_GetTCPStateName>
 800d278:	4605      	mov	r5, r0
 800d27a:	78fb      	ldrb	r3, [r7, #3]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f001 fdc5 	bl	800ee0c <FreeRTOS_GetTCPStateName>
 800d282:	4603      	mov	r3, r0
 800d284:	9301      	str	r3, [sp, #4]
 800d286:	9500      	str	r5, [sp, #0]
 800d288:	4643      	mov	r3, r8
 800d28a:	4622      	mov	r2, r4
 800d28c:	4631      	mov	r1, r6
 800d28e:	480a      	ldr	r0, [pc, #40]	; (800d2b8 <vTCPStateChange+0x210>)
 800d290:	f7f3 fbf4 	bl	8000a7c <vLoggingPrintf>
                    xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
                }
            }
        #endif

        if( xParent != NULL )
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d002      	beq.n	800d2a0 <vTCPStateChange+0x1f8>
        {
            vSocketWakeUpUser( xParent );
 800d29a:	6978      	ldr	r0, [r7, #20]
 800d29c:	f7fe f844 	bl	800b328 <vSocketWakeUpUser>
        }
    }
 800d2a0:	bf00      	nop
 800d2a2:	3718      	adds	r7, #24
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2aa:	bf00      	nop
 800d2ac:	08015d78 	.word	0x08015d78
 800d2b0:	08015dac 	.word	0x08015dac
 800d2b4:	2002660c 	.word	0x2002660c
 800d2b8:	08015dd0 	.word	0x08015dd0

0800d2bc <prvTCPBufferResize>:
 */
    static NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                           NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                           int32_t lDataLen,
                                                           UBaseType_t uxOptionsLength )
    {
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b088      	sub	sp, #32
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 800d2ca:	4b32      	ldr	r3, [pc, #200]	; (800d394 <prvTCPBufferResize+0xd8>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00b      	beq.n	800d2ea <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800d2d2:	f240 53f2 	movw	r3, #1522	; 0x5f2
 800d2d6:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d102      	bne.n	800d2e4 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	617b      	str	r3, [r7, #20]
 800d2e2:	e019      	b.n	800d318 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	e016      	b.n	800d318 <prvTCPBufferResize+0x5c>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	3336      	adds	r3, #54	; 0x36
 800d2f2:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	2b45      	cmp	r3, #69	; 0x45
 800d2f8:	d801      	bhi.n	800d2fe <prvTCPBufferResize+0x42>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800d2fa:	2346      	movs	r3, #70	; 0x46
 800d2fc:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d004      	beq.n	800d30e <prvTCPBufferResize+0x52>
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	69db      	ldr	r3, [r3, #28]
 800d308:	69ba      	ldr	r2, [r7, #24]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d902      	bls.n	800d314 <prvTCPBufferResize+0x58>
            {
                xResize = pdTRUE;
 800d30e:	2301      	movs	r3, #1
 800d310:	617b      	str	r3, [r7, #20]
 800d312:	e001      	b.n	800d318 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 800d314:	2300      	movs	r3, #0
 800d316:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d023      	beq.n	800d366 <prvTCPBufferResize+0xaa>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 800d31e:	2100      	movs	r1, #0
 800d320:	69b8      	ldr	r0, [r7, #24]
 800d322:	f004 fb97 	bl	8011a54 <pxGetNetworkBufferWithDescriptor>
 800d326:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d02c      	beq.n	800d388 <prvTCPBufferResize+0xcc>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	69ba      	ldr	r2, [r7, #24]
 800d332:	61da      	str	r2, [r3, #28]

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00c      	beq.n	800d354 <prvTCPBufferResize+0x98>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	6998      	ldr	r0, [r3, #24]
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	6999      	ldr	r1, [r3, #24]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	461a      	mov	r2, r3
 800d348:	f005 fd63 	bl	8012e12 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d34c:	68b8      	ldr	r0, [r7, #8]
 800d34e:	f004 fbfb 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
 800d352:	e019      	b.n	800d388 <prvTCPBufferResize+0xcc>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	6998      	ldr	r0, [r3, #24]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	3382      	adds	r3, #130	; 0x82
 800d35c:	2246      	movs	r2, #70	; 0x46
 800d35e:	4619      	mov	r1, r3
 800d360:	f005 fd57 	bl	8012e12 <memcpy>
 800d364:	e010      	b.n	800d388 <prvTCPBufferResize+0xcc>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d104      	bne.n	800d376 <prvTCPBufferResize+0xba>
 800d36c:	490a      	ldr	r1, [pc, #40]	; (800d398 <prvTCPBufferResize+0xdc>)
 800d36e:	f240 70b9 	movw	r0, #1977	; 0x7b9
 800d372:	f7f3 fbac 	bl	8000ace <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	4413      	add	r3, r2
 800d380:	f103 0236 	add.w	r2, r3, #54	; 0x36
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	61da      	str	r2, [r3, #28]
        }

        return pxReturn;
 800d388:	69fb      	ldr	r3, [r7, #28]
    }
 800d38a:	4618      	mov	r0, r3
 800d38c:	3720      	adds	r7, #32
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	08016c94 	.word	0x08016c94
 800d398:	08015d78 	.word	0x08015d78

0800d39c <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                                      NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                      UBaseType_t uxOptionsLength )
    {
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b096      	sub	sp, #88	; 0x58
 800d3a0:	af02      	add	r7, sp, #8
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d004      	beq.n	800d3be <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3bc:	e002      	b.n	800d3c4 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3382      	adds	r3, #130	; 0x82
 800d3c2:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800d3c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3c6:	3322      	adds	r3, #34	; 0x22
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe fe67 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800d3ce:	6478      	str	r0, [r7, #68]	; 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	33d8      	adds	r3, #216	; 0xd8
 800d3d4:	63bb      	str	r3, [r7, #56]	; 0x38
        lDataLen = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	64fb      	str	r3, [r7, #76]	; 0x4c
        lStreamPos = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 800d3de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3e0:	7b5b      	ldrb	r3, [r3, #13]
 800d3e2:	f043 0310 	orr.w	r3, r3, #16
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3ea:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 809e 	beq.w	800d532 <prvTCPPrepareSend+0x196>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usCurMSS > 1U )
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d90a      	bls.n	800d416 <prvTCPPrepareSend+0x7a>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d406:	f107 0210 	add.w	r2, r7, #16
 800d40a:	4619      	mov	r1, r3
 800d40c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d40e:	f002 fc45 	bl	800fc9c <ulTCPWindowTxGet>
 800d412:	4603      	mov	r3, r0
 800d414:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            if( lDataLen > 0 )
 800d416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f340 808a 	ble.w	800d532 <prvTCPPrepareSend+0x196>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	6819      	ldr	r1, [r3, #0]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff ff48 	bl	800d2bc <prvTCPBufferResize>
 800d42c:	6378      	str	r0, [r7, #52]	; 0x34

                if( pxNewBuffer != NULL )
 800d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d430:	2b00      	cmp	r3, #0
 800d432:	d07b      	beq.n	800d52c <prvTCPPrepareSend+0x190>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d438:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Map the byte stream onto ProtocolHeaders_t struct for easy
                     * access to the fields. */
                    pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800d440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d442:	3322      	adds	r3, #34	; 0x22
 800d444:	4618      	mov	r0, r3
 800d446:	f7fe fe29 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800d44a:	6478      	str	r0, [r7, #68]	; 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3336      	adds	r3, #54	; 0x36
 800d450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d452:	4413      	add	r3, r2
 800d454:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	693a      	ldr	r2, [r7, #16]
 800d462:	4619      	mov	r1, r3
 800d464:	f7fe fd77 	bl	800bf56 <uxStreamBufferDistance>
 800d468:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d46e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d470:	2301      	movs	r3, #1
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	4613      	mov	r3, r2
 800d476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d47a:	f7fe fcb9 	bl	800bdf0 <uxStreamBufferGet>
 800d47e:	62b8      	str	r0, [r7, #40]	; 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            if( ulDataGot != ( uint32_t ) lDataLen )
 800d480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d484:	429a      	cmp	r2, r3
 800d486:	d007      	beq.n	800d498 <prvTCPPrepareSend+0xfc>
                            {
                                FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 800d488:	6939      	ldr	r1, [r7, #16]
 800d48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d492:	4894      	ldr	r0, [pc, #592]	; (800d6e4 <prvTCPPrepareSend+0x348>)
 800d494:	f7f3 faf2 	bl	8000a7c <vLoggingPrintf>
                        }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d044      	beq.n	800d532 <prvTCPPrepareSend+0x196>
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d13c      	bne.n	800d532 <prvTCPPrepareSend+0x196>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	4619      	mov	r1, r3
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	f7fe fd45 	bl	800bf56 <uxStreamBufferDistance>
 800d4cc:	6278      	str	r0, [r7, #36]	; 0x24

                        if( ulDistance == ulDataGot )
 800d4ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d12d      	bne.n	800d532 <prvTCPPrepareSend+0x196>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                                {
                                    /* the order of volatile accesses is undefined
                                     *  so such workaround */
                                    size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	623b      	str	r3, [r7, #32]
                                    size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	61fb      	str	r3, [r7, #28]
                                    size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	61bb      	str	r3, [r7, #24]

                                    FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4fc:	487a      	ldr	r0, [pc, #488]	; (800d6e8 <prvTCPPrepareSend+0x34c>)
 800d4fe:	f7f3 fabd 	bl	8000a7c <vLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800d502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d504:	7b5b      	ldrb	r3, [r3, #13]
 800d506:	f043 0301 	orr.w	r3, r3, #1
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d50e:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800d510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d516:	441a      	add	r2, r3
 800d518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51a:	625a      	str	r2, [r3, #36]	; 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d526:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d52a:	e002      	b.n	800d532 <prvTCPPrepareSend+0x196>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 800d52c:	f04f 33ff 	mov.w	r3, #4294967295
 800d530:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 800d532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d534:	2b00      	cmp	r3, #0
 800d536:	f2c0 8095 	blt.w	800d664 <prvTCPPrepareSend+0x2c8>
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d540:	2b05      	cmp	r3, #5
 800d542:	f040 808f 	bne.w	800d664 <prvTCPPrepareSend+0x2c8>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d54c:	f003 0320 	and.w	r3, r3, #32
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b00      	cmp	r3, #0
 800d554:	d029      	beq.n	800d5aa <prvTCPPrepareSend+0x20e>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800d556:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d558:	f002 fae8 	bl	800fb2c <xTCPWindowTxDone>
 800d55c:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d023      	beq.n	800d5aa <prvTCPPrepareSend+0x20e>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800d568:	f36f 1345 	bfc	r3, #5, #1
 800d56c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800d570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d572:	7b5b      	ldrb	r3, [r3, #13]
 800d574:	f043 0301 	orr.w	r3, r3, #1
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d57c:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d588:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d592:	f043 0301 	orr.w	r3, r3, #1
 800d596:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59c:	6a1a      	ldr	r2, [r3, #32]
 800d59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a0:	625a      	str	r2, [r3, #36]	; 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800d5a2:	2106      	movs	r1, #6
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f7ff fd7f 	bl	800d0a8 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
                {
                    if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d5b0:	2b03      	cmp	r3, #3
 800d5b2:	d90e      	bls.n	800d5d2 <prvTCPPrepareSend+0x236>
                    {
                        FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d5bc:	461a      	mov	r2, r3
 800d5be:	484b      	ldr	r0, [pc, #300]	; (800d6ec <prvTCPPrepareSend+0x350>)
 800d5c0:	f7f3 fa5c 	bl	8000a7c <vLoggingPrintf>
                                                 pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                                 pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                        vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d5c4:	2108      	movs	r1, #8
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f7ff fd6e 	bl	800d0a8 <vTCPStateChange>
                        lDataLen = -1;
 800d5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d0:	64fb      	str	r3, [r7, #76]	; 0x4c
                    }

                    if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800d5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d145      	bne.n	800d664 <prvTCPPrepareSend+0x2c8>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d13d      	bne.n	800d664 <prvTCPPrepareSend+0x2c8>
                    {
                        /* If there is no data to be sent, and no window-update message,
                         * we might want to send a keep-alive message. */
                        TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800d5e8:	f7f8 fd98 	bl	800611c <xTaskGetTickCount>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	617b      	str	r3, [r7, #20]
                        TickType_t xMax;
                        xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 800d5f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d5fa:	643b      	str	r3, [r7, #64]	; 0x40

                        if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <prvTCPPrepareSend+0x270>
                        {
                            xMax = ( TickType_t ) ( 3U * configTICK_RATE_HZ );
 800d606:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d60a:	643b      	str	r3, [r7, #64]	; 0x40
                        }

                        if( xAge > xMax )
 800d60c:	697a      	ldr	r2, [r7, #20]
 800d60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d610:	429a      	cmp	r2, r3
 800d612:	d927      	bls.n	800d664 <prvTCPPrepareSend+0x2c8>
                        {
                            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800d614:	f7f8 fd82 	bl	800611c <xTaskGetTickCount>
 800d618:	4602      	mov	r2, r0
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	65da      	str	r2, [r3, #92]	; 0x5c

                            if( xTCPWindowLoggingLevel != 0 )
 800d61e:	4b34      	ldr	r3, [pc, #208]	; (800d6f0 <prvTCPPrepareSend+0x354>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00a      	beq.n	800d63c <prvTCPPrepareSend+0x2a0>
                            {
                                FreeRTOS_debug_printf( ( "keep-alive: %lxip:%u count %u\n",
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d62e:	461a      	mov	r2, r3
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d636:	482f      	ldr	r0, [pc, #188]	; (800d6f4 <prvTCPPrepareSend+0x358>)
 800d638:	f7f3 fa20 	bl	8000a7c <vLoggingPrintf>
                                                         pxSocket->u.xTCP.ulRemoteIP,
                                                         pxSocket->u.xTCP.usRemotePort,
                                                         pxSocket->u.xTCP.ucKeepRepCount ) );
                            }

                            pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d642:	f043 0302 	orr.w	r3, r3, #2
 800d646:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                            pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800d650:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                            pxSocket->u.xTCP.ucKeepRepCount++;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d65a:	3301      	adds	r3, #1
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        /* Anything to send, a change of the advertised window size, or maybe send a
         * keep-alive message? */
        if( ( lDataLen > 0 ) ||
 800d664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d666:	2b00      	cmp	r3, #0
 800d668:	dc0f      	bgt.n	800d68a <prvTCPPrepareSend+0x2ee>
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d670:	f003 0301 	and.w	r3, r3, #1
 800d674:	b2db      	uxtb	r3, r3
        if( ( lDataLen > 0 ) ||
 800d676:	2b00      	cmp	r3, #0
 800d678:	d107      	bne.n	800d68a <prvTCPPrepareSend+0x2ee>
            ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d680:	f003 0302 	and.w	r3, r3, #2
 800d684:	b2db      	uxtb	r3, r3
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800d686:	2b00      	cmp	r3, #0
 800d688:	d026      	beq.n	800d6d8 <prvTCPPrepareSend+0x33c>
        {
            pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800d68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d68c:	7b5b      	ldrb	r3, [r3, #13]
 800d68e:	f023 0308 	bic.w	r3, r3, #8
 800d692:	b2da      	uxtb	r2, r3
 800d694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d696:	735a      	strb	r2, [r3, #13]
            pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	3314      	adds	r3, #20
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6a6:	731a      	strb	r2, [r3, #12]

            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 800d6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6aa:	7b5b      	ldrb	r3, [r3, #13]
 800d6ac:	f043 0310 	orr.w	r3, r3, #16
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6b4:	735a      	strb	r2, [r3, #13]

            if( lDataLen != 0L )
 800d6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d006      	beq.n	800d6ca <prvTCPPrepareSend+0x32e>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 800d6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6be:	7b5b      	ldrb	r3, [r3, #13]
 800d6c0:	f043 0308 	orr.w	r3, r3, #8
 800d6c4:	b2da      	uxtb	r2, r3
 800d6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6c8:	735a      	strb	r2, [r3, #13]
            }

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	3328      	adds	r3, #40	; 0x28
 800d6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
            lDataLen += ( int32_t ) uxIntermediateResult;
 800d6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6d4:	4413      	add	r3, r2
 800d6d6:	64fb      	str	r3, [r7, #76]	; 0x4c
        }

        return lDataLen;
 800d6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3750      	adds	r7, #80	; 0x50
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	08015df4 	.word	0x08015df4
 800d6e8:	08015e28 	.word	0x08015e28
 800d6ec:	08015e50 	.word	0x08015e50
 800d6f0:	2002660c 	.word	0x2002660c
 800d6f4:	08015e70 	.word	0x08015e70

0800d6f8 <prvTCPNextTimeout>:
 * @param[in] pxSocket: The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t * pxSocket )
    {
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af02      	add	r7, sp, #8
 800d6fe:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d700:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d704:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d144      	bne.n	800d79a <prvTCPNextTimeout+0xa2>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d716:	f003 0308 	and.w	r3, r3, #8
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d012      	beq.n	800d746 <prvTCPNextTimeout+0x4e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d726:	2b02      	cmp	r3, #2
 800d728:	d809      	bhi.n	800d73e <prvTCPNextTimeout+0x46>
                {
                    ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d730:	3b01      	subs	r3, #1
 800d732:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d736:	fa02 f303 	lsl.w	r3, r2, r3
 800d73a:	60bb      	str	r3, [r7, #8]
 800d73c:	e006      	b.n	800d74c <prvTCPNextTimeout+0x54>
                }
                else
                {
                    ulDelayMs = 11000UL;
 800d73e:	f642 23f8 	movw	r3, #11000	; 0x2af8
 800d742:	60bb      	str	r3, [r7, #8]
 800d744:	e002      	b.n	800d74c <prvTCPNextTimeout+0x54>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500UL;
 800d746:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d74a:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d754:	461a      	mov	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d75c:	4618      	mov	r0, r3
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	4603      	mov	r3, r0
 800d764:	482a      	ldr	r0, [pc, #168]	; (800d810 <prvTCPNextTimeout+0x118>)
 800d766:	f7f3 f989 	bl	8000a7c <vLoggingPrintf>
                                     pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d770:	fb02 f303 	mul.w	r3, r2, r3
 800d774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d778:	d30a      	bcc.n	800d790 <prvTCPNextTimeout+0x98>
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d780:	fb02 f303 	mul.w	r3, r2, r3
 800d784:	4a23      	ldr	r2, [pc, #140]	; (800d814 <prvTCPNextTimeout+0x11c>)
 800d786:	fba2 2303 	umull	r2, r3, r2, r3
 800d78a:	099b      	lsrs	r3, r3, #6
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	e000      	b.n	800d792 <prvTCPNextTimeout+0x9a>
 800d790:	2201      	movs	r2, #1
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d798:	e033      	b.n	800d802 <prvTCPNextTimeout+0x10a>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d12e      	bne.n	800d802 <prvTCPNextTimeout+0x10a>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d7b0:	f107 0208 	add.w	r2, r7, #8
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	f002 fa11 	bl	800fbdc <xTCPWindowTxHasData>
 800d7ba:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d108      	bne.n	800d7d4 <prvTCPNextTimeout+0xdc>
            {
                if( xResult != ( BaseType_t ) 0 )
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <prvTCPNextTimeout+0xd6>
                {
                    ulDelayMs = 1UL;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	60bb      	str	r3, [r7, #8]
 800d7cc:	e002      	b.n	800d7d4 <prvTCPNextTimeout+0xdc>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d7ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d7d2:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d7da:	fb02 f303 	mul.w	r3, r2, r3
 800d7de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7e2:	d30a      	bcc.n	800d7fa <prvTCPNextTimeout+0x102>
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d7ea:	fb02 f303 	mul.w	r3, r2, r3
 800d7ee:	4a09      	ldr	r2, [pc, #36]	; (800d814 <prvTCPNextTimeout+0x11c>)
 800d7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f4:	099b      	lsrs	r3, r3, #6
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	e000      	b.n	800d7fc <prvTCPNextTimeout+0x104>
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    }
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	08015e90 	.word	0x08015e90
 800d814:	10624dd3 	.word	0x10624dd3

0800d818 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket: The socket owning the connection.
 */
    static void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d824:	4618      	mov	r0, r3
 800d826:	f7fe fbdc 	bl	800bfe2 <uxStreamBufferMidSpace>
 800d82a:	4603      	mov	r3, r0
 800d82c:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	dd17      	ble.n	800d864 <prvTCPAddTxData+0x4c>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800d83a:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d840:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800d842:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d848:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800d84a:	f002 f873 	bl	800f934 <lTCPWindowTxAdd>
 800d84e:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	2b00      	cmp	r3, #0
 800d854:	dd06      	ble.n	800d864 <prvTCPAddTxData+0x4c>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	4611      	mov	r1, r2
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe fbd3 	bl	800c00a <vStreamBufferMoveMid>
            }
        }
    }
 800d864:	bf00      	nop
 800d866:	3710      	adds	r7, #16
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d86c:	b5b0      	push	{r4, r5, r7, lr}
 800d86e:	b08a      	sub	sp, #40	; 0x28
 800d870:	af02      	add	r7, sp, #8
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	3322      	adds	r3, #34	; 0x22
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fe fc0d 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800d882:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d888:	2300      	movs	r3, #0
 800d88a:	74fb      	strb	r3, [r7, #19]
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	7b5b      	ldrb	r3, [r3, #13]
 800d890:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	33d8      	adds	r3, #216	; 0xd8
 800d896:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 800d898:	2300      	movs	r3, #0
 800d89a:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	061a      	lsls	r2, r3, #24
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	021b      	lsls	r3, r3, #8
 800d8a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d8ac:	431a      	orrs	r2, r3
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	0a1b      	lsrs	r3, r3, #8
 800d8b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	0e1b      	lsrs	r3, r3, #24
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800d8c4:	7cbb      	ldrb	r3, [r7, #18]
 800d8c6:	f003 0301 	and.w	r3, r3, #1
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d004      	beq.n	800d8d8 <prvTCPHandleFin+0x6c>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	695b      	ldr	r3, [r3, #20]
 800d8d2:	1c5a      	adds	r2, r3, #1
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10b      	bne.n	800d900 <prvTCPHandleFin+0x94>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6a1a      	ldr	r2, [r3, #32]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	625a      	str	r2, [r3, #36]	; 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800d8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8fa:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
 800d8fe:	e00c      	b.n	800d91a <prvTCPHandleFin+0xae>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d904:	3301      	adds	r3, #1
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d106      	bne.n	800d91a <prvTCPHandleFin+0xae>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800d912:	f043 0301 	orr.w	r3, r3, #1
 800d916:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10b      	bne.n	800d942 <prvTCPHandleFin+0xd6>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	2211      	movs	r2, #17
 800d936:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 800d938:	210a      	movs	r1, #10
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff fbb4 	bl	800d0a8 <vTCPStateChange>
 800d940:	e023      	b.n	800d98a <prvTCPHandleFin+0x11e>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d946:	1c5a      	adds	r2, r3, #1
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d952:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d956:	b2db      	uxtb	r3, r3
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d103      	bne.n	800d964 <prvTCPHandleFin+0xf8>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	2200      	movs	r2, #0
 800d960:	735a      	strb	r2, [r3, #13]
 800d962:	e012      	b.n	800d98a <prvTCPHandleFin+0x11e>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d96a:	f003 0302 	and.w	r3, r3, #2
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b00      	cmp	r3, #0
 800d972:	d103      	bne.n	800d97c <prvTCPHandleFin+0x110>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	2210      	movs	r2, #16
 800d978:	735a      	strb	r2, [r3, #13]
 800d97a:	e002      	b.n	800d982 <prvTCPHandleFin+0x116>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	2200      	movs	r2, #0
 800d980:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800d982:	2108      	movs	r1, #8
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff fb8f 	bl	800d0a8 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6a1a      	ldr	r2, [r3, #32]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	62da      	str	r2, [r3, #44]	; 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	7b5b      	ldrb	r3, [r3, #13]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d006      	beq.n	800d9a8 <prvTCPHandleFin+0x13c>
        {
            ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9a0:	3328      	adds	r3, #40	; 0x28
 800d9a2:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 800d9a4:	7cfb      	ldrb	r3, [r7, #19]
 800d9a6:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9ae:	3314      	adds	r3, #20
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 800d9ba:	4b14      	ldr	r3, [pc, #80]	; (800da0c <prvTCPHandleFin+0x1a0>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d01f      	beq.n	800da02 <prvTCPHandleFin+0x196>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %lu, cur/nxt %lu/%lu) ourSeqNr %lu | Rx %lu\n",
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	69db      	ldr	r3, [r3, #28]
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	1ad0      	subs	r0, r2, r3
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6a1a      	ldr	r2, [r3, #32]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	69db      	ldr	r3, [r3, #28]
 800d9d2:	1ad4      	subs	r4, r2, r3
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	69db      	ldr	r3, [r3, #28]
 800d9dc:	1ad5      	subs	r5, r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	6911      	ldr	r1, [r2, #16]
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	68d2      	ldr	r2, [r2, #12]
 800d9f0:	1a8a      	subs	r2, r1, r2
 800d9f2:	9201      	str	r2, [sp, #4]
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	462b      	mov	r3, r5
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	4601      	mov	r1, r0
 800d9fc:	4804      	ldr	r0, [pc, #16]	; (800da10 <prvTCPHandleFin+0x1a4>)
 800d9fe:	f7f3 f83d 	bl	8000a7c <vLoggingPrintf>
                                     pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
        }

        return xSendLength;
 800da02:	69fb      	ldr	r3, [r7, #28]
    }
 800da04:	4618      	mov	r0, r3
 800da06:	3720      	adds	r7, #32
 800da08:	46bd      	mov	sp, r7
 800da0a:	bdb0      	pop	{r4, r5, r7, pc}
 800da0c:	2002660c 	.word	0x2002660c
 800da10:	08015ebc 	.word	0x08015ebc

0800da14 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    static BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint8_t ** ppucRecvData )
    {
 800da14:	b580      	push	{r7, lr}
 800da16:	b08c      	sub	sp, #48	; 0x30
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	3322      	adds	r3, #34	; 0x22
 800da24:	4618      	mov	r0, r3
 800da26:	f7fe fb39 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800da2a:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */
        const IPHeader_t * pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	330e      	adds	r3, #14
 800da36:	4618      	mov	r0, r3
 800da38:	f7fe fb0f 	bl	800c05a <vCastConstPointerTo_IPHeader_t>
 800da3c:	6238      	str	r0, [r7, #32]
        const size_t xIPHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800da3e:	2314      	movs	r3, #20
 800da40:	61fb      	str	r3, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 800da42:	2300      	movs	r3, #0
 800da44:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	7b1b      	ldrb	r3, [r3, #12]
 800da4a:	089b      	lsrs	r3, r3, #2
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800da52:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 800da54:	7efb      	ldrb	r3, [r7, #27]
 800da56:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	699a      	ldr	r2, [r3, #24]
 800da5c:	6979      	ldr	r1, [r7, #20]
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	440b      	add	r3, r1
 800da62:	330e      	adds	r3, #14
 800da64:	441a      	add	r2, r3
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	69db      	ldr	r3, [r3, #28]
 800da6e:	3b0e      	subs	r3, #14
 800da70:	62fb      	str	r3, [r7, #44]	; 0x2c

        usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800da72:	6a3b      	ldr	r3, [r7, #32]
 800da74:	885b      	ldrh	r3, [r3, #2]
 800da76:	b29b      	uxth	r3, r3
 800da78:	021b      	lsls	r3, r3, #8
 800da7a:	b21a      	sxth	r2, r3
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	885b      	ldrh	r3, [r3, #2]
 800da80:	b29b      	uxth	r3, r3
 800da82:	0a1b      	lsrs	r3, r3, #8
 800da84:	b29b      	uxth	r3, r3
 800da86:	b21b      	sxth	r3, r3
 800da88:	4313      	orrs	r3, r2
 800da8a:	b21b      	sxth	r3, r3
 800da8c:	827b      	strh	r3, [r7, #18]
        lLength = ( int32_t ) usLength;
 800da8e:	8a7b      	ldrh	r3, [r7, #18]
 800da90:	60fb      	str	r3, [r7, #12]

        if( lReceiveLength > lLength )
 800da92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	429a      	cmp	r2, r3
 800da98:	dd01      	ble.n	800da9e <prvCheckRxData+0x8a>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 800da9e:	69fa      	ldr	r2, [r7, #28]
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	4413      	add	r3, r2
 800daa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daa6:	429a      	cmp	r2, r3
 800daa8:	dd06      	ble.n	800dab8 <prvCheckRxData+0xa4>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 800daaa:	69fa      	ldr	r2, [r7, #28]
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	4413      	add	r3, r2
 800dab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dab6:	e001      	b.n	800dabc <prvCheckRxData+0xa8>
        }
        else
        {
            lReceiveLength = 0;
 800dab8:	2300      	movs	r3, #0
 800daba:	62fb      	str	r3, [r7, #44]	; 0x2c
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	7b5b      	ldrb	r3, [r3, #13]
 800dac0:	f003 0320 	and.w	r3, r3, #32
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d01c      	beq.n	800db02 <prvCheckRxData+0xee>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	8a5b      	ldrh	r3, [r3, #18]
 800dacc:	b29b      	uxth	r3, r3
 800dace:	021b      	lsls	r3, r3, #8
 800dad0:	b21a      	sxth	r2, r3
 800dad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad4:	8a5b      	ldrh	r3, [r3, #18]
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	0a1b      	lsrs	r3, r3, #8
 800dada:	b29b      	uxth	r3, r3
 800dadc:	b21b      	sxth	r3, r3
 800dade:	4313      	orrs	r3, r2
 800dae0:	b21b      	sxth	r3, r3
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	60bb      	str	r3, [r7, #8]
            *ppucRecvData += lUrgentLength;
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	441a      	add	r2, r3
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800daf2:	68b9      	ldr	r1, [r7, #8]
 800daf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800daf6:	f7fe f9ef 	bl	800bed8 <FreeRTOS_min_int32>
 800dafa:	4602      	mov	r2, r0
 800dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafe:	1a9b      	subs	r3, r3, r2
 800db00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        return ( BaseType_t ) lReceiveLength;
 800db02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800db04:	4618      	mov	r0, r3
 800db06:	3730      	adds	r7, #48	; 0x30
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <prvStoreRxData>:
 */
    static BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                                      const uint8_t * pucRecvData,
                                      NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint32_t ulReceiveLength )
    {
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08c      	sub	sp, #48	; 0x30
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
 800db18:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	699b      	ldr	r3, [r3, #24]
 800db1e:	3322      	adds	r3, #34	; 0x22
 800db20:	4618      	mov	r0, r3
 800db22:	f7fe fac6 	bl	800c0b2 <vCastConstPointerTo_ProtocolHeaders_t>
 800db26:	6278      	str	r0, [r7, #36]	; 0x24
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	623b      	str	r3, [r7, #32]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	33d8      	adds	r3, #216	; 0xd8
 800db30:	61fb      	str	r3, [r7, #28]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	62bb      	str	r3, [r7, #40]	; 0x28

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	061a      	lsls	r2, r3, #24
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	021b      	lsls	r3, r3, #8
 800db42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db46:	431a      	orrs	r2, r3
 800db48:	6a3b      	ldr	r3, [r7, #32]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	0a1b      	lsrs	r3, r3, #8
 800db4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800db52:	431a      	orrs	r2, r3
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	0e1b      	lsrs	r3, r3, #24
 800db5a:	4313      	orrs	r3, r2
 800db5c:	61bb      	str	r3, [r7, #24]

        if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d044      	beq.n	800dbee <prvStoreRxData+0xe2>
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	d93f      	bls.n	800dbee <prvStoreRxData+0xe2>
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db72:	2b00      	cmp	r3, #0
 800db74:	d006      	beq.n	800db84 <prvStoreRxData+0x78>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7fe fa09 	bl	800bf92 <uxStreamBufferGetSpace>
 800db80:	62f8      	str	r0, [r7, #44]	; 0x2c
 800db82:	e002      	b.n	800db8a <prvStoreRxData+0x7e>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db88:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 800db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	69b9      	ldr	r1, [r7, #24]
 800db90:	69f8      	ldr	r0, [r7, #28]
 800db92:	f001 fd5b 	bl	800f64c <lTCPWindowRxCheck>
 800db96:	6178      	str	r0, [r7, #20]

            if( lOffset >= 0 )
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	db15      	blt.n	800dbca <prvStoreRxData+0xbe>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 800db9e:	6979      	ldr	r1, [r7, #20]
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f7fd fd3b 	bl	800b620 <lTCPAddRxdata>
 800dbaa:	6138      	str	r0, [r7, #16]

                if( lStored != ( int32_t ) ulReceiveLength )
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d00a      	beq.n	800dbca <prvStoreRxData+0xbe>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );
 800dbb4:	683a      	ldr	r2, [r7, #0]
 800dbb6:	6939      	ldr	r1, [r7, #16]
 800dbb8:	4812      	ldr	r0, [pc, #72]	; (800dc04 <prvStoreRxData+0xf8>)
 800dbba:	f7f2 ff5f 	bl	8000a7c <vLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 fd8c 	bl	800e6dc <prvTCPSendReset>
                    xResult = -1;
 800dbc4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc8:	62bb      	str	r3, [r7, #40]	; 0x28
            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    /* Now lTCPAddRxdata() will move the rxHead pointer forward
                     * so data becomes available to the user immediately
                     * In case the low-water mark is reached, bLowWater will be set. */
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800dbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d113      	bne.n	800dbf8 <prvStoreRxData+0xec>
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00f      	beq.n	800dbf8 <prvStoreRxData+0xec>
                    {
                        ( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbdc:	2200      	movs	r2, #0
 800dbde:	2100      	movs	r1, #0
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f7fd fd1d 	bl	800b620 <lTCPAddRxdata>
                        pxTCPWindow->ulUserDataLength = 0;
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	631a      	str	r2, [r3, #48]	; 0x30
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800dbec:	e004      	b.n	800dbf8 <prvStoreRxData+0xec>
                }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dbf6:	e000      	b.n	800dbfa <prvStoreRxData+0xee>
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 800dbf8:	bf00      	nop
        }

        return xResult;
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3730      	adds	r7, #48	; 0x30
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	08015f00 	.word	0x08015f00

0800dc08 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    static UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800dc08:	b590      	push	{r4, r7, lr}
 800dc0a:	b08b      	sub	sp, #44	; 0x2c
 800dc0c:	af02      	add	r7, sp, #8
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	699b      	ldr	r3, [r3, #24]
 800dc16:	3322      	adds	r3, #34	; 0x22
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fe fa3f 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800dc1e:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	33d8      	adds	r3, #216	; 0xd8
 800dc28:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc30:	61fb      	str	r3, [r7, #28]
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            if( uxOptionsLength != 0U )
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d05b      	beq.n	800dcf0 <prvSetOptions+0xe8>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 800dc38:	4b4e      	ldr	r3, [pc, #312]	; (800dd74 <prvSetOptions+0x16c>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	db43      	blt.n	800dcc8 <prvSetOptions+0xc0>
                {
                    FreeRTOS_debug_printf( ( "SACK[%d,%d]: optlen %lu sending %lu - %lu\n",
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc44:	4618      	mov	r0, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dc4a:	461c      	mov	r4, r3
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc52:	061a      	lsls	r2, r3, #24
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc5a:	021b      	lsls	r3, r3, #8
 800dc5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc60:	431a      	orrs	r2, r3
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc68:	0a1b      	lsrs	r3, r3, #8
 800dc6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc6e:	431a      	orrs	r2, r3
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc76:	0e1b      	lsrs	r3, r3, #24
 800dc78:	431a      	orrs	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dc80:	1ad3      	subs	r3, r2, r3
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800dc88:	0611      	lsls	r1, r2, #24
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800dc90:	0212      	lsls	r2, r2, #8
 800dc92:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800dc96:	4311      	orrs	r1, r2
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800dc9e:	0a12      	lsrs	r2, r2, #8
 800dca0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800dca4:	4311      	orrs	r1, r2
 800dca6:	693a      	ldr	r2, [r7, #16]
 800dca8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800dcac:	0e12      	lsrs	r2, r2, #24
 800dcae:	4311      	orrs	r1, r2
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800dcb6:	1a8a      	subs	r2, r1, r2
 800dcb8:	9201      	str	r2, [sp, #4]
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	4622      	mov	r2, r4
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	482d      	ldr	r0, [pc, #180]	; (800dd78 <prvSetOptions+0x170>)
 800dcc4:	f7f2 feda 	bl	8000a7c <vLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	3380      	adds	r3, #128	; 0x80
 800dccc:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	3314      	adds	r3, #20
 800dcd2:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 800dcd4:	69fa      	ldr	r2, [r7, #28]
 800dcd6:	68f9      	ldr	r1, [r7, #12]
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f005 f89a 	bl	8012e12 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	3314      	adds	r3, #20
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	731a      	strb	r2, [r3, #12]
 800dcee:	e03c      	b.n	800dd6a <prvSetOptions+0x162>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800dcf6:	2b04      	cmp	r3, #4
 800dcf8:	d937      	bls.n	800dd6a <prvSetOptions+0x162>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd00:	f003 0301 	and.w	r3, r3, #1
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d02f      	beq.n	800dd6a <prvSetOptions+0x162>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800dd10:	f36f 0300 	bfc	r3, #0, #1
 800dd14:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

            if( xTCPWindowLoggingLevel >= 0 )
 800dd18:	4b16      	ldr	r3, [pc, #88]	; (800dd74 <prvSetOptions+0x16c>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	db06      	blt.n	800dd2e <prvSetOptions+0x126>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dd26:	4619      	mov	r1, r3
 800dd28:	4814      	ldr	r0, [pc, #80]	; (800dd7c <prvSetOptions+0x174>)
 800dd2a:	f7f2 fea7 	bl	8000a7c <vLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	2202      	movs	r2, #2
 800dd32:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	2204      	movs	r2, #4
 800dd38:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dd40:	0a1b      	lsrs	r3, r3, #8
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dd50:	b2da      	uxtb	r2, r3
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 800dd56:	2304      	movs	r3, #4
 800dd58:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	3314      	adds	r3, #20
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 800dd6a:	69fb      	ldr	r3, [r7, #28]
    }
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3724      	adds	r7, #36	; 0x24
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd90      	pop	{r4, r7, pc}
 800dd74:	2002660c 	.word	0x2002660c
 800dd78:	08015f2c 	.word	0x08015f2c
 800dd7c:	08015f58 	.word	0x08015f58

0800dd80 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800dd80:	b590      	push	{r4, r7, lr}
 800dd82:	b091      	sub	sp, #68	; 0x44
 800dd84:	af02      	add	r7, sp, #8
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
 800dd8c:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	3322      	adds	r3, #34	; 0x22
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fe f981 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800dd9a:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	62bb      	str	r3, [r7, #40]	; 0x28
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	33d8      	adds	r3, #216	; 0xd8
 800dda4:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800dda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda8:	7b5b      	ldrb	r3, [r3, #13]
 800ddaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800ddae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	061a      	lsls	r2, r3, #24
 800ddb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	021b      	lsls	r3, r3, #8
 800ddba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddbe:	431a      	orrs	r2, r3
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	0a1b      	lsrs	r3, r3, #8
 800ddc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ddca:	431a      	orrs	r2, r3
 800ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	0e1b      	lsrs	r3, r3, #24
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	61fb      	str	r3, [r7, #28]
        BaseType_t xSendLength = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	637b      	str	r3, [r7, #52]	; 0x34
        UBaseType_t uxIntermediateResult = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	61bb      	str	r3, [r7, #24]

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 800ddde:	2310      	movs	r3, #16
 800dde0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d105      	bne.n	800ddfa <prvHandleSynReceived+0x7a>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 800ddee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ddf2:	f043 0302 	orr.w	r3, r3, #2
 800ddf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 800ddfa:	2317      	movs	r3, #23
 800ddfc:	75fb      	strb	r3, [r7, #23]

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800ddfe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800de02:	7dfb      	ldrb	r3, [r7, #23]
 800de04:	4013      	ands	r3, r2
 800de06:	b2db      	uxtb	r3, r3
 800de08:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d03f      	beq.n	800de90 <prvHandleSynReceived+0x110>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800de16:	2b04      	cmp	r3, #4
 800de18:	d101      	bne.n	800de1e <prvHandleSynReceived+0x9e>
 800de1a:	4967      	ldr	r1, [pc, #412]	; (800dfb8 <prvHandleSynReceived+0x238>)
 800de1c:	e000      	b.n	800de20 <prvHandleSynReceived+0xa0>
 800de1e:	4967      	ldr	r1, [pc, #412]	; (800dfbc <prvHandleSynReceived+0x23c>)
 800de20:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800de24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de28:	4865      	ldr	r0, [pc, #404]	; (800dfc0 <prvHandleSynReceived+0x240>)
 800de2a:	f7f2 fe27 	bl	8000a7c <vLoggingPrintf>
                                     ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800de2e:	2108      	movs	r1, #8
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7ff f939 	bl	800d0a8 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	061a      	lsls	r2, r3, #24
 800de3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	021b      	lsls	r3, r3, #8
 800de42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de46:	431a      	orrs	r2, r3
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	0a1b      	lsrs	r3, r3, #8
 800de4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de52:	431a      	orrs	r2, r3
 800de54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	0e1b      	lsrs	r3, r3, #24
 800de5a:	431a      	orrs	r2, r3
 800de5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5e:	62da      	str	r2, [r3, #44]	; 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	69fa      	ldr	r2, [r7, #28]
 800de64:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 800de66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de68:	7b5b      	ldrb	r3, [r3, #13]
 800de6a:	f043 0304 	orr.w	r3, r3, #4
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de72:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	3328      	adds	r3, #40	; 0x28
 800de78:	61bb      	str	r3, [r7, #24]
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	637b      	str	r3, [r7, #52]	; 0x34

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	b2db      	uxtb	r3, r3
 800de82:	3314      	adds	r3, #20
 800de84:	b2db      	uxtb	r3, r3
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8c:	731a      	strb	r2, [r3, #12]
 800de8e:	e08d      	b.n	800dfac <prvHandleSynReceived+0x22c>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800de9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800deaa:	2b02      	cmp	r3, #2
 800deac:	d12a      	bne.n	800df04 <prvHandleSynReceived+0x184>
            {
                /* Map the Last packet onto the ProtocolHeader_t struct for easy access to the fields. */
                ProtocolHeaders_t * pxLastHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	33a4      	adds	r3, #164	; 0xa4
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe f8f2 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800deb8:	6138      	str	r0, [r7, #16]
                                                                            &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	2210      	movs	r2, #16
 800debe:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800dec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec2:	2210      	movs	r2, #16
 800dec4:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800ded8:	69f9      	ldr	r1, [r7, #28]
 800deda:	f001 fadd 	bl	800f498 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	1c5a      	adds	r2, r3, #1
 800dee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee4:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	1c5a      	adds	r2, r3, #1
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	6a1b      	ldr	r3, [r3, #32]
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 800def8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	635a      	str	r2, [r3, #52]	; 0x34
 800df02:	e005      	b.n	800df10 <prvHandleSynReceived+0x190>
            }
            else if( ulReceiveLength == 0U )
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d102      	bne.n	800df10 <prvHandleSynReceived+0x190>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	69fa      	ldr	r2, [r7, #28]
 800df0e:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	69db      	ldr	r3, [r3, #28]
 800df14:	1c5a      	adds	r2, r3, #1
 800df16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df18:	62da      	str	r2, [r3, #44]	; 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    FreeRTOS_debug_printf( ( "TCP: %s %d => %lxip:%d set ESTAB (scaling %u)\n",
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800df20:	2b02      	cmp	r3, #2
 800df22:	d101      	bne.n	800df28 <prvHandleSynReceived+0x1a8>
 800df24:	4927      	ldr	r1, [pc, #156]	; (800dfc4 <prvHandleSynReceived+0x244>)
 800df26:	e000      	b.n	800df2a <prvHandleSynReceived+0x1aa>
 800df28:	4927      	ldr	r1, [pc, #156]	; (800dfc8 <prvHandleSynReceived+0x248>)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df2e:	461c      	mov	r4, r3
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800df38:	4618      	mov	r0, r3
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800df44:	b2db      	uxtb	r3, r3
 800df46:	9301      	str	r3, [sp, #4]
 800df48:	9000      	str	r0, [sp, #0]
 800df4a:	4613      	mov	r3, r2
 800df4c:	4622      	mov	r2, r4
 800df4e:	481f      	ldr	r0, [pc, #124]	; (800dfcc <prvHandleSynReceived+0x24c>)
 800df50:	f7f2 fd94 	bl	8000a7c <vLoggingPrintf>
                                             pxSocket->u.xTCP.usRemotePort,
                                             ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
                }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d002      	beq.n	800df64 <prvHandleSynReceived+0x1e4>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00f      	beq.n	800df84 <prvHandleSynReceived+0x204>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800df64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df66:	2210      	movs	r2, #16
 800df68:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	3328      	adds	r3, #40	; 0x28
 800df6e:	61bb      	str	r3, [r7, #24]
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	637b      	str	r3, [r7, #52]	; 0x34
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	3314      	adds	r3, #20
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
                {
                    if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df8a:	f003 0310 	and.w	r3, r3, #16
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	2b00      	cmp	r3, #0
 800df92:	d107      	bne.n	800dfa4 <prvHandleSynReceived+0x224>
                    {
                        /* The other party did not send a scaling factor.
                         * A shifting factor in this side must be canceled. */
                        pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2200      	movs	r2, #0
 800df98:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
                }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 800dfa4:	2105      	movs	r1, #5
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7ff f87e 	bl	800d0a8 <vTCPStateChange>
        }

        return xSendLength;
 800dfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800dfae:	4618      	mov	r0, r3
 800dfb0:	373c      	adds	r7, #60	; 0x3c
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd90      	pop	{r4, r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	08015f6c 	.word	0x08015f6c
 800dfbc:	08015f7c 	.word	0x08015f7c
 800dfc0:	08015f8c 	.word	0x08015f8c
 800dfc4:	08015fb0 	.word	0x08015fb0
 800dfc8:	08015fb8 	.word	0x08015fb8
 800dfcc:	08015fc0 	.word	0x08015fc0

0800dfd0 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b096      	sub	sp, #88	; 0x58
 800dfd4:	af02      	add	r7, sp, #8
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	699b      	ldr	r3, [r3, #24]
 800dfe4:	3322      	adds	r3, #34	; 0x22
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fe f858 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800dfec:	6478      	str	r0, [r7, #68]	; 0x44
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800dfee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dff0:	643b      	str	r3, [r7, #64]	; 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	33d8      	adds	r3, #216	; 0xd8
 800dff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800dff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dffa:	7b5b      	ldrb	r3, [r3, #13]
 800dffc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 800e000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	061a      	lsls	r2, r3, #24
 800e006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	021b      	lsls	r3, r3, #8
 800e00c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e010:	431a      	orrs	r2, r3
 800e012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	0a1b      	lsrs	r3, r3, #8
 800e018:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e01c:	431a      	orrs	r2, r3
 800e01e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	0e1b      	lsrs	r3, r3, #24
 800e024:	4313      	orrs	r3, r2
 800e026:	637b      	str	r3, [r7, #52]	; 0x34
 800e028:	2300      	movs	r3, #0
 800e02a:	633b      	str	r3, [r7, #48]	; 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800e02c:	2300      	movs	r3, #0
 800e02e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e030:	2300      	movs	r3, #0
 800e032:	64bb      	str	r3, [r7, #72]	; 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800e038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e03a:	89db      	ldrh	r3, [r3, #14]
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	021b      	lsls	r3, r3, #8
 800e040:	b21a      	sxth	r2, r3
 800e042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e044:	89db      	ldrh	r3, [r3, #14]
 800e046:	b29b      	uxth	r3, r3
 800e048:	0a1b      	lsrs	r3, r3, #8
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	b21b      	sxth	r3, r3
 800e04e:	4313      	orrs	r3, r2
 800e050:	b21b      	sxth	r3, r3
 800e052:	857b      	strh	r3, [r7, #42]	; 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800e054:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ulWindowSize =
                    ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800e068:	fa03 f202 	lsl.w	r2, r3, r2
                pxSocket->u.xTCP.ulWindowSize =
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 800e072:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e076:	f003 0310 	and.w	r3, r3, #16
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d03c      	beq.n	800e0f8 <prvHandleEstablished+0x128>
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 800e07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	061a      	lsls	r2, r3, #24
 800e084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	021b      	lsls	r3, r3, #8
 800e08a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e08e:	431a      	orrs	r2, r3
 800e090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	0a1b      	lsrs	r3, r3, #8
 800e096:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e09a:	431a      	orrs	r2, r3
 800e09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	0e1b      	lsrs	r3, r3, #24
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e0a8:	f002 f8aa 	bl	8010200 <ulTCPWindowTxAck>
 800e0ac:	6278      	str	r0, [r7, #36]	; 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d020      	beq.n	800e0f8 <prvHandleEstablished+0x128>
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01d      	beq.n	800e0f8 <prvHandleEstablished+0x128>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	f7fd fe91 	bl	800bdf0 <uxStreamBufferGet>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d011      	beq.n	800e0f8 <prvHandleEstablished+0x128>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f043 0202 	orr.w	r2, r3, #2
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	f003 0302 	and.w	r3, r3, #2
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d005      	beq.n	800e0f8 <prvHandleEstablished+0x128>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	601a      	str	r2, [r3, #0]
            }
        }

        /* If this socket has a stream for transmission, add the data to the
         * outgoing segment(s). */
        if( pxSocket->u.xTCP.txStream != NULL )
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <prvHandleEstablished+0x136>
        {
            prvTCPAddTxData( pxSocket );
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f7ff fb89 	bl	800d818 <prvTCPAddTxData>
        }

        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e108:	6a1a      	ldr	r2, [r3, #32]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

        if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e116:	f003 0320 	and.w	r3, r3, #32
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d105      	bne.n	800e12c <prvHandleEstablished+0x15c>
 800e120:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e124:	f003 0301 	and.w	r3, r3, #1
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d06a      	beq.n	800e202 <prvHandleEstablished+0x232>
        {
            /* Peer is requesting to stop, see if we're really finished. */
            xMayClose = pdTRUE;
 800e12c:	2301      	movs	r3, #1
 800e12e:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Checks are only necessary if we haven't sent a FIN yet. */
            if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d139      	bne.n	800e1b4 <prvHandleEstablished+0x1e4>
            {
                /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800e140:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e142:	f001 f89f 	bl	800f284 <xTCPWindowRxEmpty>
 800e146:	6238      	str	r0, [r7, #32]
                bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800e148:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e14a:	f001 fcef 	bl	800fb2c <xTCPWindowTxDone>
 800e14e:	61f8      	str	r0, [r7, #28]

                if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800e150:	6a3b      	ldr	r3, [r7, #32]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d002      	beq.n	800e15c <prvHandleEstablished+0x18c>
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10e      	bne.n	800e17a <prvHandleEstablished+0x1aa>
                {
                    /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                    FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e160:	4619      	mov	r1, r3
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e166:	461a      	mov	r2, r3
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	6a3b      	ldr	r3, [r7, #32]
 800e16e:	483f      	ldr	r0, [pc, #252]	; (800e26c <prvHandleEstablished+0x29c>)
 800e170:	f7f2 fc84 	bl	8000a7c <vLoggingPrintf>
                                             pxSocket->usLocalPort,
                                             pxSocket->u.xTCP.usRemotePort,
                                             bRxComplete, bTxDone ) );
                    xMayClose = pdFALSE;
 800e174:	2300      	movs	r3, #0
 800e176:	64bb      	str	r3, [r7, #72]	; 0x48
 800e178:	e01c      	b.n	800e1b4 <prvHandleEstablished+0x1e4>
                }
                else
                {
                    ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800e17a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	441a      	add	r2, r3
 800e180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	1ad3      	subs	r3, r2, r3
 800e186:	633b      	str	r3, [r7, #48]	; 0x30
                    lDistance = ( int32_t ) ulIntermediateResult;
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	61bb      	str	r3, [r7, #24]

                    if( lDistance > 1 )
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	dd10      	ble.n	800e1b4 <prvHandleEstablished+0x1e4>
                    {
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
 800e192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e194:	691a      	ldr	r2, [r3, #16]
 800e196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	1ad1      	subs	r1, r2, r3
 800e19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19e:	699a      	ldr	r2, [r3, #24]
 800e1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	460a      	mov	r2, r1
 800e1a8:	69b9      	ldr	r1, [r7, #24]
 800e1aa:	4831      	ldr	r0, [pc, #196]	; (800e270 <prvHandleEstablished+0x2a0>)
 800e1ac:	f7f2 fc66 	bl	8000a7c <vLoggingPrintf>
                                                 lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
                                                 pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

                        xMayClose = pdFALSE;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                }
            }

            if( xTCPWindowLoggingLevel > 0 )
 800e1b4:	4b2f      	ldr	r3, [pc, #188]	; (800e274 <prvHandleEstablished+0x2a4>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	dd11      	ble.n	800e1e0 <prvHandleEstablished+0x210>
            {
                FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1c4:	1ad1      	subs	r1, r2, r3
 800e1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1c8:	6a1a      	ldr	r2, [r3, #32]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	460a      	mov	r2, r1
 800e1d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e1da:	4827      	ldr	r0, [pc, #156]	; (800e278 <prvHandleEstablished+0x2a8>)
 800e1dc:	f7f2 fc4e 	bl	8000a7c <vLoggingPrintf>
                                         xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
                                         pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
            }

            if( xMayClose != pdFALSE )
 800e1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00d      	beq.n	800e202 <prvHandleEstablished+0x232>
            {
                pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e1ec:	f043 0320 	orr.w	r3, r3, #32
 800e1f0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
                xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f7ff fb36 	bl	800d86c <prvTCPHandleFin>
 800e200:	64f8      	str	r0, [r7, #76]	; 0x4c
            }
        }

        if( xMayClose == pdFALSE )
 800e202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e204:	2b00      	cmp	r3, #0
 800e206:	d12c      	bne.n	800e262 <prvHandleEstablished+0x292>
        {
            pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800e208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e20a:	2210      	movs	r2, #16
 800e20c:	735a      	strb	r2, [r3, #13]

            if( ulReceiveLength != 0U )
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d018      	beq.n	800e246 <prvHandleEstablished+0x276>
            {
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	3328      	adds	r3, #40	; 0x28
 800e218:	62fb      	str	r3, [r7, #44]	; 0x2c
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21c:	64fb      	str	r3, [r7, #76]	; 0x4c
                /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	b2db      	uxtb	r3, r3
 800e222:	3314      	adds	r3, #20
 800e224:	b2db      	uxtb	r3, r3
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e22c:	731a      	strb	r2, [r3, #12]

                if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d003      	beq.n	800e246 <prvHandleEstablished+0x276>
                {
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800e23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e244:	621a      	str	r2, [r3, #32]

            /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
             * can not send-out both TCP options and also a full packet. Sending
             * options (SACK) is always more urgent than sending data, which can be
             * sent later. */
            if( uxOptionsLength == 0U )
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d10a      	bne.n	800e262 <prvHandleEstablished+0x292>
            {
                /* prvTCPPrepareSend might allocate a bigger network buffer, if
                 * necessary. */
                lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800e24c:	683a      	ldr	r2, [r7, #0]
 800e24e:	68b9      	ldr	r1, [r7, #8]
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f7ff f8a3 	bl	800d39c <prvTCPPrepareSend>
 800e256:	6178      	str	r0, [r7, #20]

                if( lSendResult > 0 )
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	dd01      	ble.n	800e262 <prvHandleEstablished+0x292>
                {
                    xSendLength = ( BaseType_t ) lSendResult;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
            }
        }

        return xSendLength;
 800e262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    }
 800e264:	4618      	mov	r0, r3
 800e266:	3750      	adds	r7, #80	; 0x50
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	08015ff0 	.word	0x08015ff0
 800e270:	08016020 	.word	0x08016020
 800e274:	2002660c 	.word	0x2002660c
 800e278:	08016058 	.word	0x08016058

0800e27c <prvSendData>:
 */
    static BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                   uint32_t ulReceiveLength,
                                   BaseType_t xByteCount )
    {
 800e27c:	b5b0      	push	{r4, r5, r7, lr}
 800e27e:	b090      	sub	sp, #64	; 0x40
 800e280:	af04      	add	r7, sp, #16
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
 800e288:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	699b      	ldr	r3, [r3, #24]
 800e290:	3322      	adds	r3, #34	; 0x22
 800e292:	4618      	mov	r0, r3
 800e294:	f7fd ff02 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800e298:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                              &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800e29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29c:	627b      	str	r3, [r7, #36]	; 0x24
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	33d8      	adds	r3, #216	; 0xd8
 800e2a2:	623b      	str	r3, [r7, #32]
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            #endif
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2ac:	6a3b      	ldr	r3, [r7, #32]
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
            {
                #if ( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
                    {
                        lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	617b      	str	r3, [r7, #20]
                #endif /* ipconfigTCP_ACK_EARLIER_PACKET */

                /* In case we're receiving data continuously, we might postpone sending
                 * an ACK to gain performance. */
                /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
                if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d071      	beq.n	800e3ac <prvSendData+0x130>
 800e2c8:	69ba      	ldr	r2, [r7, #24]
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	db6d      	blt.n	800e3ac <prvSendData+0x130>
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2da:	b2db      	uxtb	r3, r3
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d165      	bne.n	800e3ac <prvSendData+0x130>
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	2b28      	cmp	r3, #40	; 0x28
 800e2e4:	d162      	bne.n	800e3ac <prvSendData+0x130>
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
 800e2ec:	2b05      	cmp	r3, #5
 800e2ee:	d15d      	bne.n	800e3ac <prvSendData+0x130>
                    ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )                              /* There are no other flags than an ACK. */
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	7b5b      	ldrb	r3, [r3, #13]
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 800e2f4:	2b10      	cmp	r3, #16
 800e2f6:	d159      	bne.n	800e3ac <prvSendData+0x130>
                {
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	429a      	cmp	r2, r3
 800e302:	d00c      	beq.n	800e31e <prvSendData+0xa2>
                    {
                        /* There was still a delayed in queue, delete it. */
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d004      	beq.n	800e316 <prvSendData+0x9a>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e310:	4618      	mov	r0, r3
 800e312:	f003 fc19 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
                        }

                        pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e324:	461a      	mov	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4293      	cmp	r3, r2
 800e32a:	d307      	bcc.n	800e33c <prvSendData+0xc0>
                        ( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) ) /* There are less than 2 x MSS space in the Rx buffer. */
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	461a      	mov	r2, r3
                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	4293      	cmp	r3, r2
 800e33a:	da04      	bge.n	800e346 <prvSendData+0xca>
                    {
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2202      	movs	r2, #2
 800e340:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e344:	e003      	b.n	800e34e <prvSendData+0xd2>
                    else
                    {
                        /* Normally a delayed ACK should wait 200 ms for a next incoming
                         * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                         * for full-size message. */
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2214      	movs	r2, #20
 800e34a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    }

                    if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800e34e:	4b3a      	ldr	r3, [pc, #232]	; (800e438 <prvSendData+0x1bc>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b01      	cmp	r3, #1
 800e354:	dd24      	ble.n	800e3a0 <prvSendData+0x124>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e35a:	2b17      	cmp	r3, #23
 800e35c:	d020      	beq.n	800e3a0 <prvSendData+0x124>
                    {
                        FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %lu SEQ %lu (len %lu) tmout %u d %lu\n",
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e362:	461c      	mov	r4, r3
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e368:	461d      	mov	r5, r3
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	691a      	ldr	r2, [r3, #16]
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	1ad1      	subs	r1, r2, r3
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800e37a:	6a3b      	ldr	r3, [r7, #32]
 800e37c:	69db      	ldr	r3, [r3, #28]
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800e386:	4610      	mov	r0, r2
 800e388:	69ba      	ldr	r2, [r7, #24]
 800e38a:	9203      	str	r2, [sp, #12]
 800e38c:	9002      	str	r0, [sp, #8]
 800e38e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e390:	9201      	str	r2, [sp, #4]
 800e392:	9300      	str	r3, [sp, #0]
 800e394:	460b      	mov	r3, r1
 800e396:	462a      	mov	r2, r5
 800e398:	4621      	mov	r1, r4
 800e39a:	4828      	ldr	r0, [pc, #160]	; (800e43c <prvSendData+0x1c0>)
 800e39c:	f7f2 fb6e 	bl	8000a7c <vLoggingPrintf>
                                                 pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                                 xSendLength,
                                                 pxSocket->u.xTCP.usTimeout, lRxSpace ) );
                    }

                    *ppxNetworkBuffer = NULL;
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	601a      	str	r2, [r3, #0]
                    xSendLength = 0;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3aa:	e011      	b.n	800e3d0 <prvSendData+0x154>
                }
                else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00d      	beq.n	800e3d0 <prvSendData+0x154>
                {
                    /* As an ACK is not being delayed, remove any earlier delayed ACK
                     * message. */
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d004      	beq.n	800e3ca <prvSendData+0x14e>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f003 fbbf 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	67da      	str	r2, [r3, #124]	; 0x7c
                ( void ) pxTCPHeader;
                ( void ) lRxSpace;
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 800e3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d02a      	beq.n	800e42c <prvSendData+0x1b0>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 800e3d6:	4b18      	ldr	r3, [pc, #96]	; (800e438 <prvSendData+0x1bc>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	dd1c      	ble.n	800e418 <prvSendData+0x19c>
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3e2:	2b17      	cmp	r3, #23
 800e3e4:	d018      	beq.n	800e418 <prvSendData+0x19c>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %lu SEQ %lu (len %lu)\n",
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e3f0:	461c      	mov	r4, r3
 800e3f2:	6a3b      	ldr	r3, [r7, #32]
 800e3f4:	691a      	ldr	r2, [r3, #16]
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	1ad1      	subs	r1, r2, r3
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e400:	6a3b      	ldr	r3, [r7, #32]
 800e402:	69db      	ldr	r3, [r3, #28]
 800e404:	1ad3      	subs	r3, r2, r3
 800e406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e408:	9201      	str	r2, [sp, #4]
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	460b      	mov	r3, r1
 800e40e:	4622      	mov	r2, r4
 800e410:	4601      	mov	r1, r0
 800e412:	480b      	ldr	r0, [pc, #44]	; (800e440 <prvSendData+0x1c4>)
 800e414:	f7f2 fb32 	bl	8000a7c <vLoggingPrintf>
                                         xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	6819      	ldr	r1, [r3, #0]
 800e41c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e41e:	2301      	movs	r3, #1
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f7fe f859 	bl	800c4d8 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* The driver has taken ownership of the Network Buffer. */
                    *ppxNetworkBuffer = NULL;
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]
                }
            #endif
        }

        return xSendLength;
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800e42e:	4618      	mov	r0, r3
 800e430:	3730      	adds	r7, #48	; 0x30
 800e432:	46bd      	mov	sp, r7
 800e434:	bdb0      	pop	{r4, r5, r7, pc}
 800e436:	bf00      	nop
 800e438:	2002660c 	.word	0x2002660c
 800e43c:	08016094 	.word	0x08016094
 800e440:	080160d0 	.word	0x080160d0

0800e444 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800e444:	b580      	push	{r7, lr}
 800e446:	b08c      	sub	sp, #48	; 0x30
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	3322      	adds	r3, #34	; 0x22
 800e456:	4618      	mov	r0, r3
 800e458:	f7fd fe20 	bl	800c09c <vCastPointerTo_ProtocolHeaders_t>
 800e45c:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e460:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xSendLength = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	061a      	lsls	r2, r3, #24
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	021b      	lsls	r3, r3, #8
 800e472:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e476:	431a      	orrs	r2, r3
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	0a1b      	lsrs	r3, r3, #8
 800e47e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e482:	431a      	orrs	r2, r3
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	0e1b      	lsrs	r3, r3, #24
 800e48a:	4313      	orrs	r3, r2
 800e48c:	623b      	str	r3, [r7, #32]
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 800e48e:	2300      	movs	r3, #0
 800e490:	61fb      	str	r3, [r7, #28]
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e494:	7b5b      	ldrb	r3, [r3, #13]
 800e496:	76fb      	strb	r3, [r7, #27]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	33d8      	adds	r3, #216	; 0xd8
 800e49c:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIntermediateResult = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	613b      	str	r3, [r7, #16]

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f107 0208 	add.w	r2, r7, #8
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7ff fab1 	bl	800da14 <prvCheckRxData>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	d90c      	bls.n	800e4da <prvTCPHandleState+0x96>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	691a      	ldr	r2, [r3, #16]
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d106      	bne.n	800e4da <prvTCPHandleState+0x96>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e4d2:	f043 0301 	orr.w	r3, r3, #1
 800e4d6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        if( ( ulSequenceNumber + ulReceiveLength ) > pxTCPWindow->rx.ulHighestSequenceNumber )
 800e4da:	6a3a      	ldr	r2, [r7, #32]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	441a      	add	r2, r3
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d904      	bls.n	800e4f2 <prvTCPHandleState+0xae>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e4e8:	6a3a      	ldr	r2, [r7, #32]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	441a      	add	r2, r3
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800e4f2:	68b9      	ldr	r1, [r7, #8]
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	681a      	ldr	r2, [r3, #0]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7ff fb06 	bl	800db0c <prvStoreRxData>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	da03      	bge.n	800e50e <prvTCPHandleState+0xca>
        {
            xSendLength = -1;
 800e506:	f04f 33ff 	mov.w	r3, #4294967295
 800e50a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e50c:	e0a6      	b.n	800e65c <prvTCPHandleState+0x218>
        }
        else
        {
            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4619      	mov	r1, r3
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7ff fb77 	bl	800dc08 <prvSetOptions>
 800e51a:	61f8      	str	r0, [r7, #28]

            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e522:	2b04      	cmp	r3, #4
 800e524:	d10b      	bne.n	800e53e <prvTCPHandleState+0xfa>
 800e526:	7efb      	ldrb	r3, [r7, #27]
 800e528:	f003 031f 	and.w	r3, r3, #31
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d106      	bne.n	800e53e <prvTCPHandleState+0xfa>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 800e530:	4852      	ldr	r0, [pc, #328]	; (800e67c <prvTCPHandleState+0x238>)
 800e532:	f7f2 faa3 	bl	8000a7c <vLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 800e536:	2103      	movs	r1, #3
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7fe fdb5 	bl	800d0a8 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800e53e:	7efb      	ldrb	r3, [r7, #27]
 800e540:	f003 0301 	and.w	r3, r3, #1
 800e544:	2b00      	cmp	r3, #0
 800e546:	d022      	beq.n	800e58e <prvTCPHandleState+0x14a>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e54e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e552:	b2db      	uxtb	r3, r3
 800e554:	2b00      	cmp	r3, #0
 800e556:	d11a      	bne.n	800e58e <prvTCPHandleState+0x14a>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e558:	6a3a      	ldr	r2, [r7, #32]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	441a      	add	r2, r3
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 800e568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e56c:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d106      	bne.n	800e58e <prvTCPHandleState+0x14a>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800e586:	f043 0302 	orr.w	r3, r3, #2
 800e58a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
                }
            }

            switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e594:	2b0b      	cmp	r3, #11
 800e596:	d860      	bhi.n	800e65a <prvTCPHandleState+0x216>
 800e598:	a201      	add	r2, pc, #4	; (adr r2, 800e5a0 <prvTCPHandleState+0x15c>)
 800e59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59e:	bf00      	nop
 800e5a0:	0800e65b 	.word	0x0800e65b
 800e5a4:	0800e65b 	.word	0x0800e65b
 800e5a8:	0800e629 	.word	0x0800e629
 800e5ac:	0800e5d1 	.word	0x0800e5d1
 800e5b0:	0800e629 	.word	0x0800e629
 800e5b4:	0800e63b 	.word	0x0800e63b
 800e5b8:	0800e64b 	.word	0x0800e64b
 800e5bc:	0800e64b 	.word	0x0800e64b
 800e5c0:	0800e65b 	.word	0x0800e65b
 800e5c4:	0800e65b 	.word	0x0800e65b
 800e5c8:	0800e64b 	.word	0x0800e64b
 800e5cc:	0800e65b 	.word	0x0800e65b
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800e5d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7fe fcf2 	bl	800cfbc <prvSetSynAckOptions>
 800e5d8:	61f8      	str	r0, [r7, #28]
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	2212      	movs	r2, #18
 800e5de:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	3328      	adds	r3, #40	; 0x28
 800e5e4:	613b      	str	r3, [r7, #16]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	3314      	adds	r3, #20
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	b2da      	uxtb	r2, r3
 800e5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f8:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800e5fa:	2104      	movs	r1, #4
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7fe fd53 	bl	800d0a8 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 800e602:	6a3b      	ldr	r3, [r7, #32]
 800e604:	1c5a      	adds	r2, r3, #1
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 800e60a:	6a3b      	ldr	r3, [r7, #32]
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	69db      	ldr	r3, [r3, #28]
 800e616:	1c5a      	adds	r2, r3, #1
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	635a      	str	r2, [r3, #52]	; 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	1c5a      	adds	r2, r3, #1
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	621a      	str	r2, [r3, #32]
                    break;
 800e626:	e019      	b.n	800e65c <prvTCPHandleState+0x218>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	6819      	ldr	r1, [r3, #0]
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff fba5 	bl	800dd80 <prvHandleSynReceived>
 800e636:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800e638:	e010      	b.n	800e65c <prvTCPHandleState+0x218>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7ff fcc5 	bl	800dfd0 <prvHandleEstablished>
 800e646:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800e648:	e008      	b.n	800e65c <prvTCPHandleState+0x218>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4619      	mov	r1, r3
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f7ff f90b 	bl	800d86c <prvTCPHandleFin>
 800e656:	62f8      	str	r0, [r7, #44]	; 0x2c
                    break;
 800e658:	e000      	b.n	800e65c <prvTCPHandleState+0x218>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 800e65a:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	2b00      	cmp	r3, #0
 800e660:	dd06      	ble.n	800e670 <prvTCPHandleState+0x22c>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	6839      	ldr	r1, [r7, #0]
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7ff fe07 	bl	800e27c <prvSendData>
 800e66e:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        return xSendLength;
 800e670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800e672:	4618      	mov	r0, r3
 800e674:	3730      	adds	r7, #48	; 0x30
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	080160fc 	.word	0x080160fc

0800e680 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    static BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                     uint8_t ucTCPFlags )
    {
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	70fb      	strb	r3, [r7, #3]
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
            {
                /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */
                TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	4618      	mov	r0, r3
 800e692:	f7fd fced 	bl	800c070 <vCastPointerTo_TCPPacket_t>
 800e696:	60f8      	str	r0, [r7, #12]
                const uint32_t ulSendLength =
 800e698:	2328      	movs	r3, #40	; 0x28
 800e69a:	60bb      	str	r3, [r7, #8]
                    ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ); /* Plus 0 options. */

                pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	78fa      	ldrb	r2, [r7, #3]
 800e6a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2250      	movs	r2, #80	; 0x50
 800e6a8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	6879      	ldr	r1, [r7, #4]
 800e6b2:	2000      	movs	r0, #0
 800e6b4:	f7fd ff10 	bl	800c4d8 <prvTCPReturnPacket>
            }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return pdFAIL;
 800e6b8:	2300      	movs	r3, #0
    }
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3710      	adds	r7, #16
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b082      	sub	sp, #8
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 800e6ca:	2110      	movs	r1, #16
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff ffd7 	bl	800e680 <prvTCPSendSpecialPacketHelper>
 800e6d2:	4603      	mov	r3, r0
    }
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 800e6e4:	2114      	movs	r1, #20
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7ff ffca 	bl	800e680 <prvTCPSendSpecialPacketHelper>
 800e6ec:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
	...

0800e6f8 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket: The socket whose MSS is to be set.
 */
    static void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
        uint32_t ulMSS = ipconfigTCP_MSS;
 800e700:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e704:	60fb      	str	r3, [r7, #12]

        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e70a:	061a      	lsls	r2, r3, #24
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e710:	021b      	lsls	r3, r3, #8
 800e712:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e716:	431a      	orrs	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e71c:	0a1b      	lsrs	r3, r3, #8
 800e71e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e722:	431a      	orrs	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e728:	0e1b      	lsrs	r3, r3, #24
 800e72a:	431a      	orrs	r2, r3
 800e72c:	4b11      	ldr	r3, [pc, #68]	; (800e774 <prvSocketSetMSS+0x7c>)
 800e72e:	695b      	ldr	r3, [r3, #20]
 800e730:	405a      	eors	r2, r3
 800e732:	4b11      	ldr	r3, [pc, #68]	; (800e778 <prvSocketSetMSS+0x80>)
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	4013      	ands	r3, r2
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d005      	beq.n	800e748 <prvSocketSetMSS+0x50>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800e73c:	68f9      	ldr	r1, [r7, #12]
 800e73e:	f44f 60af 	mov.w	r0, #1400	; 0x578
 800e742:	f7fd fbd9 	bl	800bef8 <FreeRTOS_min_uint32>
 800e746:	60f8      	str	r0, [r7, #12]
        }

        FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e750:	68f9      	ldr	r1, [r7, #12]
 800e752:	480a      	ldr	r0, [pc, #40]	; (800e77c <prvSocketSetMSS+0x84>)
 800e754:	f7f2 f992 	bl	8000a7c <vLoggingPrintf>

        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ulMSS;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	b29a      	uxth	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }
 800e76c:	bf00      	nop
 800e76e:	3710      	adds	r7, #16
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	20016918 	.word	0x20016918
 800e778:	20026578 	.word	0x20026578
 800e77c:	0801613c 	.word	0x0801613c

0800e780 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 800e780:	b580      	push	{r7, lr}
 800e782:	b092      	sub	sp, #72	; 0x48
 800e784:	af02      	add	r7, sp, #8
 800e786:	6078      	str	r0, [r7, #4]
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	60fb      	str	r3, [r7, #12]

        /* Map the buffer onto a ProtocolHeaders_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	699b      	ldr	r3, [r3, #24]
 800e790:	3322      	adds	r3, #34	; 0x22
 800e792:	4618      	mov	r0, r3
 800e794:	f7fd fc8d 	bl	800c0b2 <vCastConstPointerTo_ProtocolHeaders_t>
 800e798:	6378      	str	r0, [r7, #52]	; 0x34
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        FreeRTOS_Socket_t * pxSocket;
        uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 800e79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e79c:	7b5b      	ldrb	r3, [r3, #13]
 800e79e:	867b      	strh	r3, [r7, #50]	; 0x32
        uint32_t ulLocalIP;
        uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 800e7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a2:	885b      	ldrh	r3, [r3, #2]
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	021b      	lsls	r3, r3, #8
 800e7a8:	b21a      	sxth	r2, r3
 800e7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ac:	885b      	ldrh	r3, [r3, #2]
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	0a1b      	lsrs	r3, r3, #8
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	b21b      	sxth	r3, r3
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	b21b      	sxth	r3, r3
 800e7ba:	863b      	strh	r3, [r7, #48]	; 0x30
        uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 800e7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7be:	881b      	ldrh	r3, [r3, #0]
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	021b      	lsls	r3, r3, #8
 800e7c4:	b21a      	sxth	r2, r3
 800e7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c8:	881b      	ldrh	r3, [r3, #0]
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	0a1b      	lsrs	r3, r3, #8
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	b21b      	sxth	r3, r3
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	b21b      	sxth	r3, r3
 800e7d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t ulRemoteIP;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800e7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	061a      	lsls	r2, r3, #24
 800e7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	021b      	lsls	r3, r3, #8
 800e7e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7e8:	431a      	orrs	r2, r3
 800e7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	0a1b      	lsrs	r3, r3, #8
 800e7f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e7f4:	431a      	orrs	r2, r3
 800e7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	0e1b      	lsrs	r3, r3, #24
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	62bb      	str	r3, [r7, #40]	; 0x28
        uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );
 800e800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	061a      	lsls	r2, r3, #24
 800e806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	021b      	lsls	r3, r3, #8
 800e80c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e810:	431a      	orrs	r2, r3
 800e812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	0a1b      	lsrs	r3, r3, #8
 800e818:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e81c:	431a      	orrs	r2, r3
 800e81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	0e1b      	lsrs	r3, r3, #24
 800e824:	4313      	orrs	r3, r2
 800e826:	627b      	str	r3, [r7, #36]	; 0x24
        BaseType_t xResult = pdPASS;
 800e828:	2301      	movs	r3, #1
 800e82a:	63bb      	str	r3, [r7, #56]	; 0x38

        configASSERT( pxNetworkBuffer != NULL );
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d104      	bne.n	800e83c <xProcessReceivedTCPPacket+0xbc>
 800e832:	49af      	ldr	r1, [pc, #700]	; (800eaf0 <xProcessReceivedTCPPacket+0x370>)
 800e834:	f640 5088 	movw	r0, #3464	; 0xd88
 800e838:	f7f2 f949 	bl	8000ace <vAssertCalled>
        configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	699b      	ldr	r3, [r3, #24]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d104      	bne.n	800e84e <xProcessReceivedTCPPacket+0xce>
 800e844:	49aa      	ldr	r1, [pc, #680]	; (800eaf0 <xProcessReceivedTCPPacket+0x370>)
 800e846:	f640 5089 	movw	r0, #3465	; 0xd89
 800e84a:	f7f2 f940 	bl	8000ace <vAssertCalled>
        const IPHeader_t * pxIPHeader;

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	69db      	ldr	r3, [r3, #28]
 800e852:	2b35      	cmp	r3, #53	; 0x35
 800e854:	d802      	bhi.n	800e85c <xProcessReceivedTCPPacket+0xdc>
        {
            xResult = pdFAIL;
 800e856:	2300      	movs	r3, #0
 800e858:	63bb      	str	r3, [r7, #56]	; 0x38
 800e85a:	e143      	b.n	800eae4 <xProcessReceivedTCPPacket+0x364>
        }
        else
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	699b      	ldr	r3, [r3, #24]
 800e860:	330e      	adds	r3, #14
 800e862:	4618      	mov	r0, r3
 800e864:	f7fd fbf9 	bl	800c05a <vCastConstPointerTo_IPHeader_t>
 800e868:	6238      	str	r0, [r7, #32]
            ulLocalIP = FreeRTOS_htonl( pxIPHeader->ulDestinationIPAddress );
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	061a      	lsls	r2, r3, #24
 800e870:	6a3b      	ldr	r3, [r7, #32]
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	021b      	lsls	r3, r3, #8
 800e876:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e87a:	431a      	orrs	r2, r3
 800e87c:	6a3b      	ldr	r3, [r7, #32]
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	0a1b      	lsrs	r3, r3, #8
 800e882:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e886:	431a      	orrs	r2, r3
 800e888:	6a3b      	ldr	r3, [r7, #32]
 800e88a:	691b      	ldr	r3, [r3, #16]
 800e88c:	0e1b      	lsrs	r3, r3, #24
 800e88e:	4313      	orrs	r3, r2
 800e890:	61fb      	str	r3, [r7, #28]
            ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 800e892:	6a3b      	ldr	r3, [r7, #32]
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	061a      	lsls	r2, r3, #24
 800e898:	6a3b      	ldr	r3, [r7, #32]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	021b      	lsls	r3, r3, #8
 800e89e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8a2:	431a      	orrs	r2, r3
 800e8a4:	6a3b      	ldr	r3, [r7, #32]
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	0a1b      	lsrs	r3, r3, #8
 800e8aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e8ae:	431a      	orrs	r2, r3
 800e8b0:	6a3b      	ldr	r3, [r7, #32]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	0e1b      	lsrs	r3, r3, #24
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	61bb      	str	r3, [r7, #24]

            /* Find the destination socket, and if not found: return a socket listing to
             * the destination PORT. */
            pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 800e8ba:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800e8bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e8be:	69ba      	ldr	r2, [r7, #24]
 800e8c0:	69f8      	ldr	r0, [r7, #28]
 800e8c2:	f7fc fde3 	bl	800b48c <pxTCPSocketLookup>
 800e8c6:	63f8      	str	r0, [r7, #60]	; 0x3c

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 800e8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d008      	beq.n	800e8e0 <xProcessReceivedTCPPacket+0x160>
 800e8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fd fc33 	bl	800c140 <prvTCPSocketIsActive>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d116      	bne.n	800e90e <xProcessReceivedTCPPacket+0x18e>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%lxip:%d)\n", xLocalPort, ulRemoteIP, xRemotePort ) );
 800e8e0:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800e8e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e8e4:	69ba      	ldr	r2, [r7, #24]
 800e8e6:	4883      	ldr	r0, [pc, #524]	; (800eaf4 <xProcessReceivedTCPPacket+0x374>)
 800e8e8:	f7f2 f8c8 	bl	8000a7c <vLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800e8ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e8ee:	f003 031f 	and.w	r3, r3, #31
 800e8f2:	2b10      	cmp	r3, #16
 800e8f4:	d008      	beq.n	800e908 <xProcessReceivedTCPPacket+0x188>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 800e8f6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e8f8:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d103      	bne.n	800e908 <xProcessReceivedTCPPacket+0x188>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	4618      	mov	r0, r3
 800e904:	f7ff feea 	bl	800e6dc <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 800e908:	2300      	movs	r3, #0
 800e90a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e90c:	e092      	b.n	800ea34 <xProcessReceivedTCPPacket+0x2b4>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 800e90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800e916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e918:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d129      	bne.n	800e974 <xProcessReceivedTCPPacket+0x1f4>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 800e920:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e922:	f003 031f 	and.w	r3, r3, #31
 800e926:	2b02      	cmp	r3, #2
 800e928:	d018      	beq.n	800e95c <xProcessReceivedTCPPacket+0x1dc>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
 800e92a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fe f927 	bl	800cb80 <prvTCPFlagMeaning>
 800e932:	4601      	mov	r1, r0
 800e934:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e936:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	4613      	mov	r3, r2
 800e93c:	69ba      	ldr	r2, [r7, #24]
 800e93e:	486e      	ldr	r0, [pc, #440]	; (800eaf8 <xProcessReceivedTCPPacket+0x378>)
 800e940:	f7f2 f89c 	bl	8000a7c <vLoggingPrintf>
                                                         prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 800e944:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e946:	f003 0304 	and.w	r3, r3, #4
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d103      	bne.n	800e956 <xProcessReceivedTCPPacket+0x1d6>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff fec3 	bl	800e6dc <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 800e956:	2300      	movs	r3, #0
 800e958:	63bb      	str	r3, [r7, #56]	; 0x38
 800e95a:	e06b      	b.n	800ea34 <xProcessReceivedTCPPacket+0x2b4>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	4619      	mov	r1, r3
 800e960:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e962:	f000 f8cf 	bl	800eb04 <prvHandleListen>
 800e966:	63f8      	str	r0, [r7, #60]	; 0x3c

                        if( pxSocket == NULL )
 800e968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d162      	bne.n	800ea34 <xProcessReceivedTCPPacket+0x2b4>
                        {
                            xResult = pdFAIL;
 800e96e:	2300      	movs	r3, #0
 800e970:	63bb      	str	r3, [r7, #56]	; 0x38
 800e972:	e05f      	b.n	800ea34 <xProcessReceivedTCPPacket+0x2b4>
                } /* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 800e974:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e976:	f003 0304 	and.w	r3, r3, #4
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d038      	beq.n	800e9f0 <xProcessReceivedTCPPacket+0x270>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );
 800e97e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e980:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e982:	69b9      	ldr	r1, [r7, #24]
 800e984:	485d      	ldr	r0, [pc, #372]	; (800eafc <xProcessReceivedTCPPacket+0x37c>)
 800e986:	f7f2 f879 	bl	8000a7c <vLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 800e98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e98c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e990:	2b02      	cmp	r3, #2
 800e992:	d10b      	bne.n	800e9ac <xProcessReceivedTCPPacket+0x22c>
                        {
                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 800e994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e996:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e99a:	3301      	adds	r3, #1
 800e99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d123      	bne.n	800e9ea <xProcessReceivedTCPPacket+0x26a>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e9a6:	f7fe fb7f 	bl	800d0a8 <vTCPStateChange>
 800e9aa:	e01e      	b.n	800e9ea <xProcessReceivedTCPPacket+0x26a>
                            }
                        }
                        else
                        {
                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800e9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e9b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d104      	bne.n	800e9c2 <xProcessReceivedTCPPacket+0x242>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e9bc:	f7fe fb74 	bl	800d0a8 <vTCPStateChange>
 800e9c0:	e013      	b.n	800e9ea <xProcessReceivedTCPPacket+0x26a>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800e9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e9c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d90d      	bls.n	800e9ea <xProcessReceivedTCPPacket+0x26a>
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800e9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
                                                            pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) ) )
 800e9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800e9da:	4413      	add	r3, r2
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 800e9dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d203      	bcs.n	800e9ea <xProcessReceivedTCPPacket+0x26a>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7ff fe6c 	bl	800e6c2 <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9ee:	e021      	b.n	800ea34 <xProcessReceivedTCPPacket+0x2b4>
                    }
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 800e9f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e9f2:	f003 031f 	and.w	r3, r3, #31
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	d10d      	bne.n	800ea16 <xProcessReceivedTCPPacket+0x296>
 800e9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ea00:	2b04      	cmp	r3, #4
 800ea02:	d908      	bls.n	800ea16 <xProcessReceivedTCPPacket+0x296>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );
 800ea04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea06:	461a      	mov	r2, r3
 800ea08:	69b9      	ldr	r1, [r7, #24]
 800ea0a:	483d      	ldr	r0, [pc, #244]	; (800eb00 <xProcessReceivedTCPPacket+0x380>)
 800ea0c:	f7f2 f836 	bl	8000a7c <vLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 800ea10:	2300      	movs	r3, #0
 800ea12:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea14:	e00e      	b.n	800ea34 <xProcessReceivedTCPPacket+0x2b4>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t lOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 800ea16:	2322      	movs	r3, #34	; 0x22
 800ea18:	617b      	str	r3, [r7, #20]
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	3380      	adds	r3, #128	; 0x80
 800ea1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea20:	4413      	add	r3, r2
 800ea22:	1c98      	adds	r0, r3, #2
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ lOffset ] ) ),
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	699a      	ldr	r2, [r3, #24]
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ lOffset ] ) ),
 800ea2c:	2214      	movs	r2, #20
 800ea2e:	4619      	mov	r1, r3
 800ea30:	f004 f9ef 	bl	8012e12 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                    }
                }
            }

            if( xResult != pdFAIL )
 800ea34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d054      	beq.n	800eae4 <xProcessReceivedTCPPacket+0x364>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL );
 800ea3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d104      	bne.n	800ea4a <xProcessReceivedTCPPacket+0x2ca>
 800ea40:	492b      	ldr	r1, [pc, #172]	; (800eaf0 <xProcessReceivedTCPPacket+0x370>)
 800ea42:	f44f 6062 	mov.w	r0, #3616	; 0xe20
 800ea46:	f7f2 f842 	bl	8000ace <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 800ea4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ea4c:	f7fe fb07 	bl	800d05e <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 800ea50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea52:	7b1b      	ldrb	r3, [r3, #12]
 800ea54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea58:	2b50      	cmp	r3, #80	; 0x50
 800ea5a:	d904      	bls.n	800ea66 <xProcessReceivedTCPPacket+0x2e6>
                {
                    prvCheckOptions( pxSocket, pxNetworkBuffer );
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	4619      	mov	r1, r3
 800ea60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ea62:	f7fe f8eb 	bl	800cc3c <prvCheckOptions>
                }

                usWindow = FreeRTOS_ntohs( pxProtocolHeaders->xTCPHeader.usWindow );
 800ea66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea68:	89db      	ldrh	r3, [r3, #14]
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	021b      	lsls	r3, r3, #8
 800ea6e:	b21a      	sxth	r2, r3
 800ea70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea72:	89db      	ldrh	r3, [r3, #14]
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	0a1b      	lsrs	r3, r3, #8
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	b21b      	sxth	r3, r3
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	b21b      	sxth	r3, r3
 800ea80:	827b      	strh	r3, [r7, #18]
                pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800ea82:	8a7a      	ldrh	r2, [r7, #18]
 800ea84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea86:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 800ea8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ea8c:	f003 0302 	and.w	r3, r3, #2
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d10a      	bne.n	800eaaa <xProcessReceivedTCPPacket+0x32a>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800ea94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea96:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ea9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea9c:	f892 20ca 	ldrb.w	r2, [r2, #202]	; 0xca
 800eaa0:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 800eaa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaa6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* In prvTCPHandleState() the incoming messages will be handled
                 * depending on the current state of the connection. */
                if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800eaaa:	f107 030c 	add.w	r3, r7, #12
 800eaae:	4619      	mov	r1, r3
 800eab0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eab2:	f7ff fcc7 	bl	800e444 <prvTCPHandleState>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	dd05      	ble.n	800eac8 <xProcessReceivedTCPPacket+0x348>
                {
                    /* prvTCPHandleState() has sent a message, see if there are more to
                     * be transmitted. */
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800eabc:	f107 030c 	add.w	r3, r7, #12
 800eac0:	4619      	mov	r1, r3
 800eac2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eac4:	f7fd fcd8 	bl	800c478 <prvTCPSendRepeated>
                        }
                    #endif /* ipconfigUSE_TCP_WIN */
                }

                if( pxNetworkBuffer != NULL )
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d005      	beq.n	800eada <xProcessReceivedTCPPacket+0x35a>
                {
                    /* We must check if the buffer is unequal to NULL, because the
                     * socket might keep a reference to it in case a delayed ACK must be
                     * sent. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f003 f839 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
                    #ifndef _lint
                        /* Clear pointers that are freed. */
                        pxNetworkBuffer = NULL;
 800ead6:	2300      	movs	r3, #0
 800ead8:	60fb      	str	r3, [r7, #12]
                    #endif
                }

                /* And finally, calculate when this socket wants to be woken up. */
                ( void ) prvTCPNextTimeout( pxSocket );
 800eada:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eadc:	f7fe fe0c 	bl	800d6f8 <prvTCPNextTimeout>
                /* Return pdPASS to tell that the network buffer is 'consumed'. */
                xResult = pdPASS;
 800eae0:	2301      	movs	r3, #1
 800eae2:	63bb      	str	r3, [r7, #56]	; 0x38
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 800eae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    }
 800eae6:	4618      	mov	r0, r3
 800eae8:	3740      	adds	r7, #64	; 0x40
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	08015d78 	.word	0x08015d78
 800eaf4:	08016168 	.word	0x08016168
 800eaf8:	08016198 	.word	0x08016198
 800eafc:	080161d8 	.word	0x080161d8
 800eb00:	08016200 	.word	0x08016200

0800eb04 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    static FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                                NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b08a      	sub	sp, #40	; 0x28
 800eb08:	af02      	add	r7, sp, #8
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
        const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	699b      	ldr	r3, [r3, #24]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fd fab7 	bl	800c086 <vCastConstPointerTo_TCPPacket_t>
 800eb18:	61b8      	str	r0, [r7, #24]
        FreeRTOS_Socket_t * pxReturn = NULL;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	61fb      	str	r3, [r7, #28]
        uint32_t ulInitialSequenceNumber;

        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800eb1e:	4b68      	ldr	r3, [pc, #416]	; (800ecc0 <prvHandleListen+0x1bc>)
 800eb20:	6958      	ldr	r0, [r3, #20]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800eb2c:	69bb      	ldr	r3, [r7, #24]
 800eb2e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	f7f1 ffac 	bl	8000a8e <ulApplicationGetNextSequenceNumber>
 800eb36:	6178      	str	r0, [r7, #20]
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );

        /* A pure SYN (without ACK) has come in, create a new socket to answer
         * it. */
        if( ulInitialSequenceNumber != 0UL )
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d057      	beq.n	800ebee <prvHandleListen+0xea>
        {
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb44:	f003 0308 	and.w	r3, r3, #8
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00c      	beq.n	800eb68 <prvHandleListen+0x64>
            {
                /* The flag bReuseSocket indicates that the same instance of the
                 * listening socket should be used for the connection. */
                pxReturn = pxSocket;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	61fb      	str	r3, [r7, #28]
                pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800eb58:	f043 0304 	orr.w	r3, r3, #4
 800eb5c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	655a      	str	r2, [r3, #84]	; 0x54
 800eb66:	e042      	b.n	800ebee <prvHandleListen+0xea>
            }
            else
            {
                /* The socket does not have the bReuseSocket flag set meaning create a
                 * new socket when a connection comes in. */
                pxReturn = NULL;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	61fb      	str	r3, [r7, #28]

                if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d31b      	bcc.n	800ebb4 <prvHandleListen+0xb0>
                {
                    FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb80:	4619      	mov	r1, r3
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800eb88:	461a      	mov	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb90:	4618      	mov	r0, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d101      	bne.n	800eba0 <prvHandleListen+0x9c>
 800eb9c:	4b49      	ldr	r3, [pc, #292]	; (800ecc4 <prvHandleListen+0x1c0>)
 800eb9e:	e000      	b.n	800eba2 <prvHandleListen+0x9e>
 800eba0:	4b49      	ldr	r3, [pc, #292]	; (800ecc8 <prvHandleListen+0x1c4>)
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	4603      	mov	r3, r0
 800eba6:	4849      	ldr	r0, [pc, #292]	; (800eccc <prvHandleListen+0x1c8>)
 800eba8:	f7f1 ff68 	bl	8000a7c <vLoggingPrintf>
                                       pxSocket->usLocalPort,
                                       pxSocket->u.xTCP.usChildCount,
                                       pxSocket->u.xTCP.usBacklog,
                                       ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800ebac:	6838      	ldr	r0, [r7, #0]
 800ebae:	f7ff fd95 	bl	800e6dc <prvTCPSendReset>
 800ebb2:	e01c      	b.n	800ebee <prvHandleListen+0xea>
                }
                else
                {
                    FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
 800ebb4:	2206      	movs	r2, #6
 800ebb6:	2101      	movs	r1, #1
 800ebb8:	2002      	movs	r0, #2
 800ebba:	f7fb fda7 	bl	800a70c <FreeRTOS_socket>
 800ebbe:	6138      	str	r0, [r7, #16]
                                                      FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );

                    if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d003      	beq.n	800ebce <prvHandleListen+0xca>
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebcc:	d106      	bne.n	800ebdc <prvHandleListen+0xd8>
                    {
                        FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 800ebce:	4840      	ldr	r0, [pc, #256]	; (800ecd0 <prvHandleListen+0x1cc>)
 800ebd0:	f7f1 ff54 	bl	8000a7c <vLoggingPrintf>
                        ( void ) prvTCPSendReset( pxNetworkBuffer );
 800ebd4:	6838      	ldr	r0, [r7, #0]
 800ebd6:	f7ff fd81 	bl	800e6dc <prvTCPSendReset>
 800ebda:	e008      	b.n	800ebee <prvHandleListen+0xea>
                    }
                    else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800ebdc:	6879      	ldr	r1, [r7, #4]
 800ebde:	6938      	ldr	r0, [r7, #16]
 800ebe0:	f000 f878 	bl	800ecd4 <prvTCPSocketCopy>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d001      	beq.n	800ebee <prvHandleListen+0xea>
                    {
                        /* The socket will be connected immediately, no time for the
                         * owner to setsockopt's, therefore copy properties of the server
                         * socket to the new socket.  Only the binding might fail (due to
                         * lack of resources). */
                        pxReturn = pxNewSocket;
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	61fb      	str	r3, [r7, #28]
                    }
                }
            }
        }

        if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d05f      	beq.n	800ecb4 <prvHandleListen+0x1b0>
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d05c      	beq.n	800ecb4 <prvHandleListen+0x1b0>
        {
            /* Map the byte stream onto the ProtocolHeaders_t for easy access to the fields. */
            const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	699b      	ldr	r3, [r3, #24]
 800ebfe:	3322      	adds	r3, #34	; 0x22
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7fd fa56 	bl	800c0b2 <vCastConstPointerTo_ProtocolHeaders_t>
 800ec06:	60f8      	str	r0, [r7, #12]
                                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );

            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	021b      	lsls	r3, r3, #8
 800ec10:	b21a      	sxth	r2, r3
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	0a1b      	lsrs	r3, r3, #8
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	b21b      	sxth	r3, r3
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	b21b      	sxth	r3, r3
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	879a      	strh	r2, [r3, #60]	; 0x3c
            pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ec2e:	061a      	lsls	r2, r3, #24
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ec36:	021b      	lsls	r3, r3, #8
 800ec38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec3c:	431a      	orrs	r2, r3
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ec44:	0a1b      	lsrs	r3, r3, #8
 800ec46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec4a:	431a      	orrs	r2, r3
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800ec52:	0e1b      	lsrs	r3, r3, #24
 800ec54:	431a      	orrs	r2, r3
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	639a      	str	r2, [r3, #56]	; 0x38
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	697a      	ldr	r2, [r7, #20]
 800ec5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	061a      	lsls	r2, r3, #24
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	021b      	lsls	r3, r3, #8
 800ec6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec72:	431a      	orrs	r2, r3
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	0a1b      	lsrs	r3, r3, #8
 800ec7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec7e:	431a      	orrs	r2, r3
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	685b      	ldr	r3, [r3, #4]
 800ec84:	0e1b      	lsrs	r3, r3, #24
 800ec86:	431a      	orrs	r2, r3
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
            prvSocketSetMSS( pxReturn );
 800ec8e:	69f8      	ldr	r0, [r7, #28]
 800ec90:	f7ff fd32 	bl	800e6f8 <prvSocketSetMSS>

            prvTCPCreateWindow( pxReturn );
 800ec94:	69f8      	ldr	r0, [r7, #28]
 800ec96:	f7fd fe19 	bl	800c8cc <prvTCPCreateWindow>

            vTCPStateChange( pxReturn, eSYN_FIRST );
 800ec9a:	2103      	movs	r1, #3
 800ec9c:	69f8      	ldr	r0, [r7, #28]
 800ec9e:	f7fe fa03 	bl	800d0a8 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            ( void ) memcpy( ( void * ) ( pxReturn->u.xTCP.xPacket.u.ucLastPacket ), ( const void * ) ( pxNetworkBuffer->pucEthernetBuffer ), sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	f103 0082 	add.w	r0, r3, #130	; 0x82
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	699b      	ldr	r3, [r3, #24]
 800ecac:	2246      	movs	r2, #70	; 0x46
 800ecae:	4619      	mov	r1, r3
 800ecb0:	f004 f8af 	bl	8012e12 <memcpy>
        }

        return pxReturn;
 800ecb4:	69fb      	ldr	r3, [r7, #28]
    }
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3720      	adds	r7, #32
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20016918 	.word	0x20016918
 800ecc4:	08016224 	.word	0x08016224
 800ecc8:	08016228 	.word	0x08016228
 800eccc:	0801622c 	.word	0x0801622c
 800ecd0:	0801625c 	.word	0x0801625c

0800ecd4 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                        FreeRTOS_Socket_t * pxSocket )
    {
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b088      	sub	sp, #32
 800ecd8:	af02      	add	r7, sp, #8
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	69da      	ldr	r2, [r3, #28]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	61da      	str	r2, [r3, #28]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	6a1a      	ldr	r2, [r3, #32]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	621a      	str	r2, [r3, #32]
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	66da      	str	r2, [r3, #108]	; 0x6c
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	671a      	str	r2, [r3, #112]	; 0x70
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	665a      	str	r2, [r3, #100]	; 0x64
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	669a      	str	r2, [r3, #104]	; 0x68
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                /* Child socket of listening sockets will inherit the Socket Set
                 * Otherwise the owner has no chance of including it into the set. */
                if( pxSocket->pxSocketSet != NULL )
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d009      	beq.n	800ed4e <prvTCPSocketCopy+0x7a>
                {
                    pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	629a      	str	r2, [r3, #40]	; 0x28
                    pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed46:	f043 0205 	orr.w	r2, r3, #5
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	62da      	str	r2, [r3, #44]	; 0x2c
                }
            }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 800ed4e:	4b2a      	ldr	r3, [pc, #168]	; (800edf8 <prvTCPSocketCopy+0x124>)
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	613b      	str	r3, [r7, #16]
        xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed58:	021b      	lsls	r3, r3, #8
 800ed5a:	b21a      	sxth	r2, r3
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed60:	0a1b      	lsrs	r3, r3, #8
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	b21b      	sxth	r3, r3
 800ed66:	4313      	orrs	r3, r2
 800ed68:	b21b      	sxth	r3, r3
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	81fb      	strh	r3, [r7, #14]
                 * orphan temporarily.  Once this socket is really connected, the owner of
                 * the server socket will be notified. */

                /* When bPassQueued is true, the socket is an orphan until it gets
                 * connected. */
                pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800ed74:	f043 0304 	orr.w	r3, r3, #4
 800ed78:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
                pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	683a      	ldr	r2, [r7, #0]
 800ed80:	655a      	str	r2, [r3, #84]	; 0x54
                    pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
                }
            }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ed88:	3301      	adds	r3, #1
 800ed8a:	b29a      	uxth	r2, r3
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s\n",
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed96:	4619      	mov	r1, r3
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ed9e:	461a      	mov	r2, r3
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eda6:	4618      	mov	r0, r3
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d101      	bne.n	800edb6 <prvTCPSocketCopy+0xe2>
 800edb2:	4b12      	ldr	r3, [pc, #72]	; (800edfc <prvTCPSocketCopy+0x128>)
 800edb4:	e000      	b.n	800edb8 <prvTCPSocketCopy+0xe4>
 800edb6:	4b12      	ldr	r3, [pc, #72]	; (800ee00 <prvTCPSocketCopy+0x12c>)
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	4603      	mov	r3, r0
 800edbc:	4811      	ldr	r0, [pc, #68]	; (800ee04 <prvTCPSocketCopy+0x130>)
 800edbe:	f7f1 fe5d 	bl	8000a7c <vLoggingPrintf>
                                 pxSocket->u.xTCP.usChildCount,
                                 pxSocket->u.xTCP.usBacklog,
                                 ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800edc2:	f107 010c 	add.w	r1, r7, #12
 800edc6:	2301      	movs	r3, #1
 800edc8:	2208      	movs	r2, #8
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7fb ff04 	bl	800abd8 <vSocketBind>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d008      	beq.n	800ede8 <prvTCPSocketCopy+0x114>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 800edd6:	480c      	ldr	r0, [pc, #48]	; (800ee08 <prvTCPSocketCopy+0x134>)
 800edd8:	f7f1 fe50 	bl	8000a7c <vLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7fb ffcb 	bl	800ad78 <vSocketClose>
            xResult = pdFALSE;
 800ede2:	2300      	movs	r3, #0
 800ede4:	617b      	str	r3, [r7, #20]
 800ede6:	e001      	b.n	800edec <prvTCPSocketCopy+0x118>
        }
        else
        {
            xResult = pdTRUE;
 800ede8:	2301      	movs	r3, #1
 800edea:	617b      	str	r3, [r7, #20]
        }

        return xResult;
 800edec:	697b      	ldr	r3, [r7, #20]
    }
 800edee:	4618      	mov	r0, r3
 800edf0:	3718      	adds	r7, #24
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	20016918 	.word	0x20016918
 800edfc:	08016224 	.word	0x08016224
 800ee00:	08016228 	.word	0x08016228
 800ee04:	0801627c 	.word	0x0801627c
 800ee08:	080162a8 	.word	0x080162a8

0800ee0c <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	db02      	blt.n	800ee24 <FreeRTOS_GetTCPStateName+0x18>
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2b0c      	cmp	r3, #12
 800ee22:	dd04      	ble.n	800ee2e <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 800ee24:	230d      	movs	r3, #13
 800ee26:	60fb      	str	r3, [r7, #12]
                xIndex--;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 800ee2e:	4a05      	ldr	r2, [pc, #20]	; (800ee44 <FreeRTOS_GetTCPStateName+0x38>)
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 800ee36:	4618      	mov	r0, r3
 800ee38:	3714      	adds	r7, #20
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	08016c54 	.word	0x08016c54

0800ee48 <xTCPCheckNewClient>:
 * @param[in] pxSocket: The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b088      	sub	sp, #32
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee54:	021b      	lsls	r3, r3, #8
 800ee56:	b21a      	sxth	r2, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee5c:	0a1b      	lsrs	r3, r3, #8
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	b21b      	sxth	r3, r3
 800ee62:	4313      	orrs	r3, r2
 800ee64:	b21b      	sxth	r3, r3
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	61bb      	str	r3, [r7, #24]
        const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800ee6e:	4b1b      	ldr	r3, [pc, #108]	; (800eedc <xTCPCheckNewClient+0x94>)
 800ee70:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ee72:	4b1b      	ldr	r3, [pc, #108]	; (800eee0 <xTCPCheckNewClient+0x98>)
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	61fb      	str	r3, [r7, #28]
 800ee78:	e026      	b.n	800eec8 <xTCPCheckNewClient+0x80>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	697a      	ldr	r2, [r7, #20]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d11e      	bne.n	800eec2 <xTCPCheckNewClient+0x7a>
            {
                pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fd f91d 	bl	800c0c8 <vCastPointerTo_FreeRTOS_Socket_t>
 800ee8e:	60f8      	str	r0, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ee96:	2b06      	cmp	r3, #6
 800ee98:	d113      	bne.n	800eec2 <xTCPCheckNewClient+0x7a>
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eea0:	f003 0302 	and.w	r3, r3, #2
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00b      	beq.n	800eec2 <xTCPCheckNewClient+0x7a>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	655a      	str	r2, [r3, #84]	; 0x54
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	480b      	ldr	r0, [pc, #44]	; (800eee4 <xTCPCheckNewClient+0x9c>)
 800eeb8:	f7f1 fde0 	bl	8000a7c <vLoggingPrintf>
                    xResult = pdTRUE;
 800eebc:	2301      	movs	r3, #1
 800eebe:	61bb      	str	r3, [r7, #24]
                    break;
 800eec0:	e006      	b.n	800eed0 <xTCPCheckNewClient+0x88>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	61fb      	str	r3, [r7, #28]
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800eec8:	69fa      	ldr	r2, [r7, #28]
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d1d4      	bne.n	800ee7a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 800eed0:	69bb      	ldr	r3, [r7, #24]
    }
 800eed2:	4618      	mov	r0, r3
 800eed4:	3720      	adds	r7, #32
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	20027150 	.word	0x20027150
 800eee0:	20027148 	.word	0x20027148
 800eee4:	080162cc 	.word	0x080162cc

0800eee8 <FreeRTOS_min_int32>:
        {
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	4293      	cmp	r3, r2
 800eef8:	bfa8      	it	ge
 800eefa:	4613      	movge	r3, r2
        }
 800eefc:	4618      	mov	r0, r3
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <FreeRTOS_min_uint32>:
        {
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	4293      	cmp	r3, r2
 800ef18:	bf28      	it	cs
 800ef1a:	4613      	movcs	r3, r2
        }
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr

0800ef28 <vCastPointerTo_TCPSegment_t>:
 * @brief Utility function to cast pointer of a type to pointer of type TCPSegment_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( TCPSegment_t )
    {
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
        return ( TCPSegment_t * ) pvArgument;
 800ef30:	687b      	ldr	r3, [r7, #4]
    }
 800ef32:	4618      	mov	r0, r3
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr

0800ef3e <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 800ef3e:	b480      	push	{r7}
 800ef40:	b085      	sub	sp, #20
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 800ef48:	683a      	ldr	r2, [r7, #0]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	1ad3      	subs	r3, r2, r3
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	db02      	blt.n	800ef58 <xSequenceLessThanOrEqual+0x1a>
            {
                xResult = pdTRUE;
 800ef52:	2301      	movs	r3, #1
 800ef54:	60fb      	str	r3, [r7, #12]
 800ef56:	e001      	b.n	800ef5c <xSequenceLessThanOrEqual+0x1e>
            }
            else
            {
                xResult = pdFALSE;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
        }
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3714      	adds	r7, #20
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr

0800ef6a <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThan( uint32_t a,
                                                        uint32_t b )
        {
 800ef6a:	b480      	push	{r7}
 800ef6c:	b085      	sub	sp, #20
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
 800ef72:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a < b */
            if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 800ef74:	683a      	ldr	r2, [r7, #0]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	1ad3      	subs	r3, r2, r3
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	db02      	blt.n	800ef86 <xSequenceLessThan+0x1c>
            {
                xResult = pdTRUE;
 800ef80:	2301      	movs	r3, #1
 800ef82:	60fb      	str	r3, [r7, #12]
 800ef84:	e001      	b.n	800ef8a <xSequenceLessThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800ef86:	2300      	movs	r3, #0
 800ef88:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
        }
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a,
                                                           uint32_t b )
        {
 800ef98:	b480      	push	{r7}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a > b */
            if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	3b01      	subs	r3, #1
 800efaa:	2b00      	cmp	r3, #0
 800efac:	db02      	blt.n	800efb4 <xSequenceGreaterThan+0x1c>
            {
                xResult = pdTRUE;
 800efae:	2301      	movs	r3, #1
 800efb0:	60fb      	str	r3, [r7, #12]
 800efb2:	e001      	b.n	800efb8 <xSequenceGreaterThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 800efb4:	2300      	movs	r3, #0
 800efb6:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800efb8:	68fb      	ldr	r3, [r7, #12]
        }
 800efba:	4618      	mov	r0, r3
 800efbc:	3714      	adds	r7, #20
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr

0800efc6 <xSequenceGreaterThanOrEqual>:
 * @return pdTRUE if a>=b, else pdFALSE.
 */

    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 800efc6:	b480      	push	{r7}
 800efc8:	b085      	sub	sp, #20
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
 800efce:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	1ad3      	subs	r3, r2, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	db02      	blt.n	800efe0 <xSequenceGreaterThanOrEqual+0x1a>
        {
            xResult = pdTRUE;
 800efda:	2301      	movs	r3, #1
 800efdc:	60fb      	str	r3, [r7, #12]
 800efde:	e001      	b.n	800efe4 <xSequenceGreaterThanOrEqual+0x1e>
        }
        else
        {
            xResult = pdFALSE;
 800efe0:	2300      	movs	r3, #0
 800efe2:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800efe4:	68fb      	ldr	r3, [r7, #12]
    }
 800efe6:	4618      	mov	r0, r3
 800efe8:	3714      	adds	r7, #20
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr

0800eff2 <vListInsertFifo>:
 * @param[in] pxList: The list in which the item is to inserted.
 * @param[in] pxNewListItem: The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b082      	sub	sp, #8
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
 800effa:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	3308      	adds	r3, #8
 800f000:	461a      	mov	r2, r3
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 f81f 	bl	800f048 <vListInsertGeneric>
        }
 800f00a:	bf00      	nop
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer: The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 800f012:	b580      	push	{r7, lr}
 800f014:	b082      	sub	sp, #8
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
        pxTimer->ulBorn = xTaskGetTickCount();
 800f01a:	f7f7 f87f 	bl	800611c <xTaskGetTickCount>
 800f01e:	4602      	mov	r2, r0
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	601a      	str	r2, [r3, #0]
    }
 800f024:	bf00      	nop
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <ulTimerGetAge>:
 * @param[in] pxTimer: The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
        return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 800f034:	f7f7 f872 	bl	800611c <xTaskGetTickCount>
 800f038:	4602      	mov	r2, r0
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	1ad3      	subs	r3, r2, r3
    }
 800f040:	4618      	mov	r0, r3
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <vListInsertGeneric>:
 * @param[in] pxWhere: Where should the item be inserted.
 */
    static void vListInsertGeneric( List_t * const pxList,
                                    ListItem_t * const pxNewListItem,
                                    MiniListItem_t * const pxWhere )
    {
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	607a      	str	r2, [r7, #4]
        /* Insert a new list item into pxList, it does not sort the list,
         * but it puts the item just before xListEnd, so it will be the last item
         * returned by listGET_HEAD_ENTRY() */
        pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	605a      	str	r2, [r3, #4]
        pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	689a      	ldr	r2, [r3, #8]
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	609a      	str	r2, [r3, #8]
        pxWhere->pxPrevious->pxNext = pxNewListItem;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	689b      	ldr	r3, [r3, #8]
 800f066:	68ba      	ldr	r2, [r7, #8]
 800f068:	605a      	str	r2, [r3, #4]
        pxWhere->pxPrevious = pxNewListItem;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	609a      	str	r2, [r3, #8]

        /* Remember which list the item is in. */
        listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	611a      	str	r2, [r3, #16]

        ( pxList->uxNumberOfItems )++;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	601a      	str	r2, [r3, #0]
    }
 800f080:	bf00      	nop
 800f082:	3714      	adds	r7, #20
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
            BaseType_t xIndex, xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 800f092:	4829      	ldr	r0, [pc, #164]	; (800f138 <prvCreateSectors+0xac>)
 800f094:	f7f5 fe50 	bl	8004d38 <vListInitialise>
            xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 800f098:	f44f 5070 	mov.w	r0, #15360	; 0x3c00
 800f09c:	f7f8 fa1e 	bl	80074dc <pvPortMalloc>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7ff ff40 	bl	800ef28 <vCastPointerTo_TCPSegment_t>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	4b24      	ldr	r3, [pc, #144]	; (800f13c <prvCreateSectors+0xb0>)
 800f0ac:	601a      	str	r2, [r3, #0]

            if( xTCPSegments == NULL )
 800f0ae:	4b23      	ldr	r3, [pc, #140]	; (800f13c <prvCreateSectors+0xb0>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d107      	bne.n	800f0c6 <prvCreateSectors+0x3a>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 800f0b6:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 800f0ba:	4821      	ldr	r0, [pc, #132]	; (800f140 <prvCreateSectors+0xb4>)
 800f0bc:	f7f1 fcde 	bl	8000a7c <vLoggingPrintf>
                                         ( unsigned ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

                xReturn = pdFAIL;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	603b      	str	r3, [r7, #0]
 800f0c4:	e032      	b.n	800f12c <prvCreateSectors+0xa0>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800f0c6:	4b1d      	ldr	r3, [pc, #116]	; (800f13c <prvCreateSectors+0xb0>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f003 fec2 	bl	8012e5a <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	607b      	str	r3, [r7, #4]
 800f0da:	e022      	b.n	800f122 <prvCreateSectors+0x96>
                {
                    /* Could call vListInitialiseItem here but all data has been
                    * nulled already.  Set the owner to a segment descriptor. */
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800f0dc:	4b17      	ldr	r3, [pc, #92]	; (800f13c <prvCreateSectors+0xb0>)
 800f0de:	6819      	ldr	r1, [r3, #0]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	019a      	lsls	r2, r3, #6
 800f0e4:	4b15      	ldr	r3, [pc, #84]	; (800f13c <prvCreateSectors+0xb0>)
 800f0e6:	6818      	ldr	r0, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	019b      	lsls	r3, r3, #6
 800f0ec:	4403      	add	r3, r0
 800f0ee:	440a      	add	r2, r1
 800f0f0:	639a      	str	r2, [r3, #56]	; 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 800f0f2:	4b12      	ldr	r3, [pc, #72]	; (800f13c <prvCreateSectors+0xb0>)
 800f0f4:	6819      	ldr	r1, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	019a      	lsls	r2, r3, #6
 800f0fa:	4b10      	ldr	r3, [pc, #64]	; (800f13c <prvCreateSectors+0xb0>)
 800f0fc:	6818      	ldr	r0, [r3, #0]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	019b      	lsls	r3, r3, #6
 800f102:	4403      	add	r3, r0
 800f104:	440a      	add	r2, r1
 800f106:	625a      	str	r2, [r3, #36]	; 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 800f108:	4b0c      	ldr	r3, [pc, #48]	; (800f13c <prvCreateSectors+0xb0>)
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	019b      	lsls	r3, r3, #6
 800f110:	4413      	add	r3, r2
 800f112:	332c      	adds	r3, #44	; 0x2c
 800f114:	4619      	mov	r1, r3
 800f116:	4808      	ldr	r0, [pc, #32]	; (800f138 <prvCreateSectors+0xac>)
 800f118:	f7ff ff6b 	bl	800eff2 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	3301      	adds	r3, #1
 800f120:	607b      	str	r3, [r7, #4]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2bef      	cmp	r3, #239	; 0xef
 800f126:	ddd9      	ble.n	800f0dc <prvCreateSectors+0x50>
                }

                xReturn = pdPASS;
 800f128:	2301      	movs	r3, #1
 800f12a:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 800f12c:	683b      	ldr	r3, [r7, #0]
        }
 800f12e:	4618      	mov	r0, r3
 800f130:	3708      	adds	r7, #8
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	200265f8 	.word	0x200265f8
 800f13c:	200265f4 	.word	0x200265f4
 800f140:	0801637c 	.word	0x0801637c

0800f144 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 800f14e:	2300      	movs	r3, #0
 800f150:	613b      	str	r3, [r7, #16]

            /* Find a segment with a given sequence number in the list of received
             * segments. */
            pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	33ac      	adds	r3, #172	; 0xac
 800f156:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	617b      	str	r3, [r7, #20]
 800f15e:	e010      	b.n	800f182 <xTCPWindowRxFind+0x3e>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	4618      	mov	r0, r3
 800f166:	f7ff fedf 	bl	800ef28 <vCastPointerTo_TCPSegment_t>
 800f16a:	60b8      	str	r0, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	683a      	ldr	r2, [r7, #0]
 800f172:	429a      	cmp	r2, r3
 800f174:	d102      	bne.n	800f17c <xTCPWindowRxFind+0x38>
                {
                    pxReturn = pxSegment;
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	613b      	str	r3, [r7, #16]
                    break;
 800f17a:	e006      	b.n	800f18a <xTCPWindowRxFind+0x46>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	617b      	str	r3, [r7, #20]
            for( pxIterator = listGET_NEXT( pxEnd );
 800f182:	697a      	ldr	r2, [r7, #20]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	429a      	cmp	r2, r3
 800f188:	d1ea      	bne.n	800f160 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 800f18a:	693b      	ldr	r3, [r7, #16]
        }
 800f18c:	4618      	mov	r0, r3
 800f18e:	3718      	adds	r7, #24
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 800f194:	b580      	push	{r7, lr}
 800f196:	b088      	sub	sp, #32
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
 800f1a0:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 800f1a2:	4b34      	ldr	r3, [pc, #208]	; (800f274 <xTCPWindowNew+0xe0>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d10c      	bne.n	800f1c4 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d001      	beq.n	800f1b4 <xTCPWindowNew+0x20>
 800f1b0:	2352      	movs	r3, #82	; 0x52
 800f1b2:	e000      	b.n	800f1b6 <xTCPWindowNew+0x22>
 800f1b4:	2354      	movs	r3, #84	; 0x54
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	482f      	ldr	r0, [pc, #188]	; (800f278 <xTCPWindowNew+0xe4>)
 800f1ba:	f7f1 fc5f 	bl	8000a7c <vLoggingPrintf>
                pxSegment = NULL;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	e052      	b.n	800f26a <xTCPWindowNew+0xd6>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 800f1c4:	4b2b      	ldr	r3, [pc, #172]	; (800f274 <xTCPWindowNew+0xe0>)
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	61bb      	str	r3, [r7, #24]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7ff feaa 	bl	800ef28 <vCastPointerTo_TCPSegment_t>
 800f1d4:	61f8      	str	r0, [r7, #28]

                configASSERT( pxItem != NULL );
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d104      	bne.n	800f1e6 <xTCPWindowNew+0x52>
 800f1dc:	4927      	ldr	r1, [pc, #156]	; (800f27c <xTCPWindowNew+0xe8>)
 800f1de:	f240 2035 	movw	r0, #565	; 0x235
 800f1e2:	f7f1 fc74 	bl	8000ace <vAssertCalled>
                configASSERT( pxSegment != NULL );
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d104      	bne.n	800f1f6 <xTCPWindowNew+0x62>
 800f1ec:	4923      	ldr	r1, [pc, #140]	; (800f27c <xTCPWindowNew+0xe8>)
 800f1ee:	f240 2036 	movw	r0, #566	; 0x236
 800f1f2:	f7f1 fc6c 	bl	8000ace <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 800f1f6:	69b8      	ldr	r0, [r7, #24]
 800f1f8:	f7f5 fe28 	bl	8004e4c <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d006      	beq.n	800f210 <xTCPWindowNew+0x7c>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	33a4      	adds	r3, #164	; 0xa4
 800f206:	69b9      	ldr	r1, [r7, #24]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7ff fef2 	bl	800eff2 <vListInsertFifo>
 800f20e:	e005      	b.n	800f21c <xTCPWindowNew+0x88>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	3390      	adds	r3, #144	; 0x90
 800f214:	69b9      	ldr	r1, [r7, #24]
 800f216:	4618      	mov	r0, r3
 800f218:	f7ff feeb 	bl	800eff2 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	3310      	adds	r3, #16
 800f220:	4618      	mov	r0, r3
 800f222:	f7ff fef6 	bl	800f012 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	2200      	movs	r2, #0
 800f22a:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d001      	beq.n	800f236 <xTCPWindowNew+0xa2>
 800f232:	2101      	movs	r1, #1
 800f234:	e000      	b.n	800f238 <xTCPWindowNew+0xa4>
 800f236:	2100      	movs	r1, #0
 800f238:	69fa      	ldr	r2, [r7, #28]
 800f23a:	7d93      	ldrb	r3, [r2, #22]
 800f23c:	f361 0382 	bfi	r3, r1, #2, #1
 800f240:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 800f242:	69fb      	ldr	r3, [r7, #28]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                        UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 800f254:	4b07      	ldr	r3, [pc, #28]	; (800f274 <xTCPWindowNew+0xe0>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	617b      	str	r3, [r7, #20]

                        if( xLowestLength > xLength )
 800f25a:	4b09      	ldr	r3, [pc, #36]	; (800f280 <xTCPWindowNew+0xec>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	697a      	ldr	r2, [r7, #20]
 800f260:	429a      	cmp	r2, r3
 800f262:	d202      	bcs.n	800f26a <xTCPWindowNew+0xd6>
                        {
                            xLowestLength = xLength;
 800f264:	4a06      	ldr	r2, [pc, #24]	; (800f280 <xTCPWindowNew+0xec>)
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	6013      	str	r3, [r2, #0]
                        }
                    }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 800f26a:	69fb      	ldr	r3, [r7, #28]
        }
 800f26c:	4618      	mov	r0, r3
 800f26e:	3720      	adds	r7, #32
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	200265f8 	.word	0x200265f8
 800f278:	080163a0 	.word	0x080163a0
 800f27c:	080163d0 	.word	0x080163d0
 800f280:	20016914 	.word	0x20016914

0800f284 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 800f296:	2300      	movs	r3, #0
 800f298:	60fb      	str	r3, [r7, #12]
 800f29a:	e01d      	b.n	800f2d8 <xTCPWindowRxEmpty+0x54>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	691a      	ldr	r2, [r3, #16]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	699b      	ldr	r3, [r3, #24]
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4610      	mov	r0, r2
 800f2a8:	f7ff fe8d 	bl	800efc6 <xSequenceGreaterThanOrEqual>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d002      	beq.n	800f2b8 <xTCPWindowRxEmpty+0x34>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	60fb      	str	r3, [r7, #12]
 800f2b6:	e00f      	b.n	800f2d8 <xTCPWindowRxEmpty+0x54>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	691a      	ldr	r2, [r3, #16]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	1ad1      	subs	r1, r2, r3
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	699a      	ldr	r2, [r3, #24]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	4805      	ldr	r0, [pc, #20]	; (800f2e4 <xTCPWindowRxEmpty+0x60>)
 800f2d0:	f7f1 fbd4 	bl	8000a7c <vLoggingPrintf>
                                         ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
        }
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	08016404 	.word	0x08016404

0800f2e8 <xTCPWindowGetHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d102      	bne.n	800f2fe <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	60fb      	str	r3, [r7, #12]
 800f2fc:	e00b      	b.n	800f316 <xTCPWindowGetHead+0x2e>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	60bb      	str	r3, [r7, #8]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	4618      	mov	r0, r3
 800f30a:	f7ff fe0d 	bl	800ef28 <vCastPointerTo_TCPSegment_t>
 800f30e:	60f8      	str	r0, [r7, #12]

                ( void ) uxListRemove( pxItem );
 800f310:	68b8      	ldr	r0, [r7, #8]
 800f312:	f7f5 fd9b 	bl	8004e4c <uxListRemove>
            }

            return pxSegment;
 800f316:	68fb      	ldr	r3, [r7, #12]
        }
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <xTCPWindowPeekHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d102      	bne.n	800f336 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 800f330:	2300      	movs	r3, #0
 800f332:	60fb      	str	r3, [r7, #12]
 800f334:	e008      	b.n	800f348 <xTCPWindowPeekHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	60bb      	str	r3, [r7, #8]
                pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	4618      	mov	r0, r3
 800f342:	f7ff fdf1 	bl	800ef28 <vCastPointerTo_TCPSegment_t>
 800f346:	60f8      	str	r0, [r7, #12]
            }

            return pxReturn;
 800f348:	68fb      	ldr	r3, [r7, #12]
        }
 800f34a:	4618      	mov	r0, r3
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
	...

0800f354 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment: The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f360:	2b00      	cmp	r3, #0
 800f362:	d004      	beq.n	800f36e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	3318      	adds	r3, #24
 800f368:	4618      	mov	r0, r3
 800f36a:	f7f5 fd6f 	bl	8004e4c <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0UL;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0L;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0UL;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f384:	2b00      	cmp	r3, #0
 800f386:	d004      	beq.n	800f392 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	332c      	adds	r3, #44	; 0x2c
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7f5 fd5d 	bl	8004e4c <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	332c      	adds	r3, #44	; 0x2c
 800f396:	4619      	mov	r1, r3
 800f398:	4803      	ldr	r0, [pc, #12]	; (800f3a8 <vTCPWindowFree+0x54>)
 800f39a:	f7ff fe2a 	bl	800eff2 <vListInsertFifo>
        }
 800f39e:	bf00      	nop
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	200265f8 	.word	0x200265f8

0800f3ac <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	613b      	str	r3, [r7, #16]
 800f3b8:	e020      	b.n	800f3fc <vTCPWindowDestroy+0x50>
            {
                if( xRound != 0 )
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d003      	beq.n	800f3c8 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	33a4      	adds	r3, #164	; 0xa4
 800f3c4:	617b      	str	r3, [r7, #20]
 800f3c6:	e002      	b.n	800f3ce <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3390      	adds	r3, #144	; 0x90
 800f3cc:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d6:	d10e      	bne.n	800f3f6 <vTCPWindowDestroy+0x4a>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800f3d8:	e009      	b.n	800f3ee <vTCPWindowDestroy+0x42>
                    {
                        pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	68db      	ldr	r3, [r3, #12]
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff fda1 	bl	800ef28 <vCastPointerTo_TCPSegment_t>
 800f3e6:	60f8      	str	r0, [r7, #12]
                        vTCPWindowFree( pxSegment );
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f7ff ffb3 	bl	800f354 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1f1      	bne.n	800f3da <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	613b      	str	r3, [r7, #16]
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	dddb      	ble.n	800f3ba <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 800f402:	bf00      	nop
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
	...

0800f40c <vTCPWindowCreate>:
                           uint32_t ulRxWindowLength,
                           uint32_t ulTxWindowLength,
                           uint32_t ulAckNumber,
                           uint32_t ulSequenceNumber,
                           uint32_t ulMSS )
    {
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
 800f418:	603b      	str	r3, [r7, #0]
        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( xTCPSegments == NULL )
 800f41a:	4b1c      	ldr	r3, [pc, #112]	; (800f48c <vTCPWindowCreate+0x80>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d101      	bne.n	800f426 <vTCPWindowCreate+0x1a>
                {
                    ( void ) prvCreateSectors();
 800f422:	f7ff fe33 	bl	800f08c <prvCreateSectors>
                }

                vListInitialise( &( pxWindow->xTxSegments ) );
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	3390      	adds	r3, #144	; 0x90
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7f5 fc84 	bl	8004d38 <vListInitialise>
                vListInitialise( &( pxWindow->xRxSegments ) );
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	33a4      	adds	r3, #164	; 0xa4
 800f434:	4618      	mov	r0, r3
 800f436:	f7f5 fc7f 	bl	8004d38 <vListInitialise>

                vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	3340      	adds	r3, #64	; 0x40
 800f43e:	4618      	mov	r0, r3
 800f440:	f7f5 fc7a 	bl	8004d38 <vListInitialise>
                vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	3354      	adds	r3, #84	; 0x54
 800f448:	4618      	mov	r0, r3
 800f44a:	f7f5 fc75 	bl	8004d38 <vListInitialise>
                vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	3368      	adds	r3, #104	; 0x68
 800f452:	4618      	mov	r0, r3
 800f454:	f7f5 fc70 	bl	8004d38 <vListInitialise>
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 800f458:	4b0d      	ldr	r3, [pc, #52]	; (800f490 <vTCPWindowCreate+0x84>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d004      	beq.n	800f46a <vTCPWindowCreate+0x5e>
        {
            FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	68b9      	ldr	r1, [r7, #8]
 800f464:	480b      	ldr	r0, [pc, #44]	; (800f494 <vTCPWindowCreate+0x88>)
 800f466:	f7f1 fb09 	bl	8000a7c <vLoggingPrintf>
                                     ulRxWindowLength, ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	69ba      	ldr	r2, [r7, #24]
 800f47a:	6839      	ldr	r1, [r7, #0]
 800f47c:	68f8      	ldr	r0, [r7, #12]
 800f47e:	f000 f80b 	bl	800f498 <vTCPWindowInit>
    }
 800f482:	bf00      	nop
 800f484:	3710      	adds	r7, #16
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	bf00      	nop
 800f48c:	200265f4 	.word	0x200265f4
 800f490:	2002660c 	.word	0x2002660c
 800f494:	08016434 	.word	0x08016434

0800f498 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 800f498:	b480      	push	{r7}
 800f49a:	b087      	sub	sp, #28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	607a      	str	r2, [r7, #4]
 800f4a4:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 800f4a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f4aa:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0UL;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	7813      	ldrb	r3, [r2, #0]
 800f4b6:	f043 0301 	orr.w	r3, r3, #1
 800f4ba:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0UL )
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d024      	beq.n	800f50c <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d004      	beq.n	800f4d6 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f4dc:	461a      	mov	r2, r3
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d304      	bcc.n	800f4ee <vTCPWindowInit+0x56>
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d10e      	bne.n	800f50c <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	685a      	ldr	r2, [r3, #4]
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4f8:	683a      	ldr	r2, [r7, #0]
 800f4fa:	fb02 f203 	mul.w	r2, r2, r3
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	b29a      	uxth	r2, r3
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	697a      	ldr	r2, [r7, #20]
 800f510:	639a      	str	r2, [r3, #56]	; 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	68ba      	ldr	r2, [r7, #8]
 800f516:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	635a      	str	r2, [r3, #52]	; 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	629a      	str	r2, [r3, #40]	; 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800f542:	bf00      	nop
 800f544:	371c      	adds	r7, #28
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
	...

0800f550 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 800f550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f552:	b08f      	sub	sp, #60	; 0x3c
 800f554:	af04      	add	r7, sp, #16
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 800f55c:	2300      	movs	r3, #0
 800f55e:	627b      	str	r3, [r7, #36]	; 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 800f560:	68ba      	ldr	r2, [r7, #8]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4413      	add	r3, r2
 800f566:	61fb      	str	r3, [r7, #28]
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	33ac      	adds	r3, #172	; 0xac
 800f56c:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	623b      	str	r3, [r7, #32]
 800f574:	e02a      	b.n	800f5cc <xTCPWindowRxConfirm+0x7c>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7ff fcd4 	bl	800ef28 <vCastPointerTo_TCPSegment_t>
 800f580:	6178      	str	r0, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	4618      	mov	r0, r3
 800f58a:	f7ff fd1c 	bl	800efc6 <xSequenceGreaterThanOrEqual>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d018      	beq.n	800f5c6 <xTCPWindowRxConfirm+0x76>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	69f9      	ldr	r1, [r7, #28]
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff fce5 	bl	800ef6a <xSequenceLessThan>
 800f5a0:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00f      	beq.n	800f5c6 <xTCPWindowRxConfirm+0x76>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00a      	beq.n	800f5c2 <xTCPWindowRxConfirm+0x72>
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	4610      	mov	r0, r2
 800f5b8:	f7ff fcd7 	bl	800ef6a <xSequenceLessThan>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d001      	beq.n	800f5c6 <xTCPWindowRxConfirm+0x76>
                    {
                        pxBest = pxSegment;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	627b      	str	r3, [r7, #36]	; 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f5c6:	6a3b      	ldr	r3, [r7, #32]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	623b      	str	r3, [r7, #32]
            for( pxIterator = listGET_NEXT( pxEnd );
 800f5cc:	6a3a      	ldr	r2, [r7, #32]
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d1d0      	bne.n	800f576 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 800f5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d030      	beq.n	800f63c <xTCPWindowRxConfirm+0xec>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800f5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5dc:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 800f5de:	68ba      	ldr	r2, [r7, #8]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d104      	bne.n	800f5ee <xTCPWindowRxConfirm+0x9e>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	689a      	ldr	r2, [r3, #8]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d026      	beq.n	800f63c <xTCPWindowRxConfirm+0xec>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %lu (+%ld=%lu) found %lu (+%ld=%lu)\n",
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f5f4:	461e      	mov	r6, r3
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	68ba      	ldr	r2, [r7, #8]
 800f5fc:	1ad5      	subs	r5, r2, r3
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	441a      	add	r2, r3
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	1ad3      	subs	r3, r2, r3
 800f60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f60c:	6811      	ldr	r1, [r2, #0]
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	68d2      	ldr	r2, [r2, #12]
 800f612:	1a8a      	subs	r2, r1, r2
 800f614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f616:	6889      	ldr	r1, [r1, #8]
 800f618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f61a:	6800      	ldr	r0, [r0, #0]
 800f61c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800f61e:	68a4      	ldr	r4, [r4, #8]
 800f620:	4404      	add	r4, r0
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	68c0      	ldr	r0, [r0, #12]
 800f626:	1a20      	subs	r0, r4, r0
 800f628:	9003      	str	r0, [sp, #12]
 800f62a:	9102      	str	r1, [sp, #8]
 800f62c:	9201      	str	r2, [sp, #4]
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	462a      	mov	r2, r5
 800f634:	4631      	mov	r1, r6
 800f636:	4804      	ldr	r0, [pc, #16]	; (800f648 <xTCPWindowRxConfirm+0xf8>)
 800f638:	f7f1 fa20 	bl	8000a7c <vLoggingPrintf>
                                         pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
                                         pxBest->lDataLength,
                                         pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
            }

            return pxBest;
 800f63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800f63e:	4618      	mov	r0, r3
 800f640:	372c      	adds	r7, #44	; 0x2c
 800f642:	46bd      	mov	sp, r7
 800f644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f646:	bf00      	nop
 800f648:	08016464 	.word	0x08016464

0800f64c <lTCPWindowRxCheck>:
 */
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace )
        {
 800f64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f64e:	b091      	sub	sp, #68	; 0x44
 800f650:	af04      	add	r7, sp, #16
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber, ulLast, ulSavedSequenceNumber, ulIntermediateResult = 0;
 800f65a:	2300      	movs	r3, #0
 800f65c:	623b      	str	r3, [r7, #32]
             * or there is not enough space.
             *
             * As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
             * if more Rx data may be passed to the user after this packet. */

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	691b      	ldr	r3, [r3, #16]
 800f662:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2200      	movs	r2, #0
 800f668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0UL;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2200      	movs	r2, #0
 800f670:	631a      	str	r2, [r3, #48]	; 0x30

            if( ulCurrentSequenceNumber == ulSequenceNumber )
 800f672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	429a      	cmp	r2, r3
 800f678:	d16a      	bne.n	800f750 <lTCPWindowRxCheck+0x104>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulLength > ulSpace )
 800f67a:	687a      	ldr	r2, [r7, #4]
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d908      	bls.n	800f694 <lTCPWindowRxCheck+0x48>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
 800f682:	683a      	ldr	r2, [r7, #0]
 800f684:	6879      	ldr	r1, [r7, #4]
 800f686:	4897      	ldr	r0, [pc, #604]	; (800f8e4 <lTCPWindowRxCheck+0x298>)
 800f688:	f7f1 f9f8 	bl	8000a7c <vLoggingPrintf>
                    lReturn = -1;
 800f68c:	f04f 33ff 	mov.w	r3, #4294967295
 800f690:	627b      	str	r3, [r7, #36]	; 0x24
 800f692:	e122      	b.n	800f8da <lTCPWindowRxCheck+0x28e>
                }
                else
                {
                    ulCurrentSequenceNumber += ulLength;
 800f694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4413      	add	r3, r2
 800f69a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d04e      	beq.n	800f744 <lTCPWindowRxCheck+0xf8>
                    {
                        ulSavedSequenceNumber = ulCurrentSequenceNumber;
 800f6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a8:	617b      	str	r3, [r7, #20]
                         * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                         * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                         * clean them out. */
                        do
                        {
                            pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	68b9      	ldr	r1, [r7, #8]
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f7ff ff4e 	bl	800f550 <xTCPWindowRxConfirm>
 800f6b4:	61b8      	str	r0, [r7, #24]

                            if( pxFound != NULL )
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d002      	beq.n	800f6c2 <lTCPWindowRxCheck+0x76>
                            {
                                /* Remove it because it will be passed to user directly. */
                                vTCPWindowFree( pxFound );
 800f6bc:	69b8      	ldr	r0, [r7, #24]
 800f6be:	f7ff fe49 	bl	800f354 <vTCPWindowFree>
                            }
                        } while( pxFound != NULL );
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1f0      	bne.n	800f6aa <lTCPWindowRxCheck+0x5e>

                        /*  Check for following segments that are already in the
                         * queue and increment ulCurrentSequenceNumber. */
                        for( ; ; )
                        {
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800f6c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6ca:	68f8      	ldr	r0, [r7, #12]
 800f6cc:	f7ff fd3a 	bl	800f144 <xTCPWindowRxFind>
 800f6d0:	61b8      	str	r0, [r7, #24]

                            if( pxFound == NULL )
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d009      	beq.n	800f6ec <lTCPWindowRxCheck+0xa0>
                            {
                                break;
                            }

                            ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	689b      	ldr	r3, [r3, #8]
 800f6dc:	461a      	mov	r2, r3
 800f6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e0:	4413      	add	r3, r2
 800f6e2:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* As all packet below this one have been passed to the
                             * user it can be discarded. */
                            vTCPWindowFree( pxFound );
 800f6e4:	69b8      	ldr	r0, [r7, #24]
 800f6e6:	f7ff fe35 	bl	800f354 <vTCPWindowFree>
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 800f6ea:	e7ed      	b.n	800f6c8 <lTCPWindowRxCheck+0x7c>
                                break;
 800f6ec:	bf00      	nop
                        }

                        if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 800f6ee:	697a      	ldr	r2, [r7, #20]
 800f6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d026      	beq.n	800f744 <lTCPWindowRxCheck+0xf8>
                        {
                            /*  After the current data-package, there is more data
                             * to be popped. */
                            pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 800f6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	1ad2      	subs	r2, r2, r3
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	631a      	str	r2, [r3, #48]	; 0x30

                            if( xTCPWindowLoggingLevel >= 1 )
 800f700:	4b79      	ldr	r3, [pc, #484]	; (800f8e8 <lTCPWindowRxCheck+0x29c>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2b00      	cmp	r3, #0
 800f706:	dd1d      	ble.n	800f744 <lTCPWindowRxCheck+0xf8>
                            {
                                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: retran %lu (Found %lu bytes at %lu cnt %ld)\n",
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f70e:	461c      	mov	r4, r3
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f716:	461d      	mov	r5, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	1ad0      	subs	r0, r2, r3
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	68d2      	ldr	r2, [r2, #12]
 800f728:	6979      	ldr	r1, [r7, #20]
 800f72a:	1a8a      	subs	r2, r1, r2
 800f72c:	68f9      	ldr	r1, [r7, #12]
 800f72e:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 800f732:	9102      	str	r1, [sp, #8]
 800f734:	9201      	str	r2, [sp, #4]
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	4603      	mov	r3, r0
 800f73a:	462a      	mov	r2, r5
 800f73c:	4621      	mov	r1, r4
 800f73e:	486b      	ldr	r0, [pc, #428]	; (800f8ec <lTCPWindowRxCheck+0x2a0>)
 800f740:	f7f1 f99c 	bl	8000a7c <vLoggingPrintf>
                                                         listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                            }
                        }
                    }

                    pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f748:	611a      	str	r2, [r3, #16]

                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    lReturn = 0;
 800f74a:	2300      	movs	r3, #0
 800f74c:	627b      	str	r3, [r7, #36]	; 0x24
 800f74e:	e0c4      	b.n	800f8da <lTCPWindowRxCheck+0x28e>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	3301      	adds	r3, #1
 800f754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f756:	429a      	cmp	r2, r3
 800f758:	d103      	bne.n	800f762 <lTCPWindowRxCheck+0x116>
            {
                /* Looks like a TCP keep-alive message.  Do not accept/store Rx data
                 * ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
                lReturn = -1;
 800f75a:	f04f 33ff 	mov.w	r3, #4294967295
 800f75e:	627b      	str	r3, [r7, #36]	; 0x24
 800f760:	e0bb      	b.n	800f8da <lTCPWindowRxCheck+0x28e>
                /* The packet is not the one expected.  See if it falls within the Rx
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */
                ulLast = ulSequenceNumber + ulLength;
 800f762:	68ba      	ldr	r2, [r7, #8]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4413      	add	r3, r2
 800f768:	62bb      	str	r3, [r7, #40]	; 0x28

                ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 800f76a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	623b      	str	r3, [r7, #32]
                /* The cast from unsigned long to signed long is on purpose. */
                lDistance = ( int32_t ) ulIntermediateResult;
 800f772:	6a3b      	ldr	r3, [r7, #32]
 800f774:	61fb      	str	r3, [r7, #28]

                if( lDistance <= 0 )
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	dc03      	bgt.n	800f784 <lTCPWindowRxCheck+0x138>
                {
                    /* An earlier has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                    lReturn = -1;
 800f77c:	f04f 33ff 	mov.w	r3, #4294967295
 800f780:	627b      	str	r3, [r7, #36]	; 0x24
 800f782:	e0aa      	b.n	800f8da <lTCPWindowRxCheck+0x28e>
                }
                else if( lDistance > ( int32_t ) ulSpace )
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	69fa      	ldr	r2, [r7, #28]
 800f788:	429a      	cmp	r2, r3
 800f78a:	dd09      	ble.n	800f7a0 <lTCPWindowRxCheck+0x154>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	69f9      	ldr	r1, [r7, #28]
 800f792:	4857      	ldr	r0, [pc, #348]	; (800f8f0 <lTCPWindowRxCheck+0x2a4>)
 800f794:	f7f1 f972 	bl	8000a7c <vLoggingPrintf>
                    lReturn = -1;
 800f798:	f04f 33ff 	mov.w	r3, #4294967295
 800f79c:	627b      	str	r3, [r7, #36]	; 0x24
 800f79e:	e09c      	b.n	800f8da <lTCPWindowRxCheck+0x28e>
                     * This is useful because subsequent packets will be SACK'd with
                     * single one message
                     */
                    for( ; ; )
                    {
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800f7a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f7ff fcce 	bl	800f144 <xTCPWindowRxFind>
 800f7a8:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d006      	beq.n	800f7be <lTCPWindowRxCheck+0x172>
                        {
                            break;
                        }

                        ulLast += ( uint32_t ) pxFound->lDataLength;
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	689b      	ldr	r3, [r3, #8]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b8:	4413      	add	r3, r2
 800f7ba:	62bb      	str	r3, [r7, #40]	; 0x28
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 800f7bc:	e7f0      	b.n	800f7a0 <lTCPWindowRxCheck+0x154>
                            break;
 800f7be:	bf00      	nop
                    }

                    if( xTCPWindowLoggingLevel >= 1 )
 800f7c0:	4b49      	ldr	r3, [pc, #292]	; (800f8e8 <lTCPWindowRxCheck+0x29c>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	dd1f      	ble.n	800f808 <lTCPWindowRxCheck+0x1bc>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f7ce:	461d      	mov	r5, r3
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f7d6:	461e      	mov	r6, r3
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	68ba      	ldr	r2, [r7, #8]
 800f7de:	1ad4      	subs	r4, r2, r3
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	68b9      	ldr	r1, [r7, #8]
 800f7ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7ec:	1a8a      	subs	r2, r1, r2
 800f7ee:	68f9      	ldr	r1, [r7, #12]
 800f7f0:	68c9      	ldr	r1, [r1, #12]
 800f7f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7f4:	1a41      	subs	r1, r0, r1
 800f7f6:	9102      	str	r1, [sp, #8]
 800f7f8:	9201      	str	r2, [sp, #4]
 800f7fa:	9300      	str	r3, [sp, #0]
 800f7fc:	4623      	mov	r3, r4
 800f7fe:	4632      	mov	r2, r6
 800f800:	4629      	mov	r1, r5
 800f802:	483c      	ldr	r0, [pc, #240]	; (800f8f4 <lTCPWindowRxCheck+0x2a8>)
 800f804:	f7f1 f93a 	bl	8000a7c <vLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
                    }

                    /* Now prepare the SACK message.
                     * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
                    pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	4a3b      	ldr	r2, [pc, #236]	; (800f8f8 <lTCPWindowRxCheck+0x2ac>)
 800f80c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* First sequence number that we received. */
                    pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	061a      	lsls	r2, r3, #24
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	021b      	lsls	r3, r3, #8
 800f818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f81c:	431a      	orrs	r2, r3
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	0a1b      	lsrs	r3, r3, #8
 800f822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f826:	431a      	orrs	r2, r3
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	0e1b      	lsrs	r3, r3, #24
 800f82c:	431a      	orrs	r2, r3
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                    /* Last + 1 */
                    pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 800f834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f836:	061a      	lsls	r2, r3, #24
 800f838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83a:	021b      	lsls	r3, r3, #8
 800f83c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f840:	431a      	orrs	r2, r3
 800f842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f844:	0a1b      	lsrs	r3, r3, #8
 800f846:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f84a:	431a      	orrs	r2, r3
 800f84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84e:	0e1b      	lsrs	r3, r3, #24
 800f850:	431a      	orrs	r2, r3
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

                    /* Which make 12 (3*4) option bytes. */
                    pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	220c      	movs	r2, #12
 800f85c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                    pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 800f860:	68b9      	ldr	r1, [r7, #8]
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f7ff fc6e 	bl	800f144 <xTCPWindowRxFind>
 800f868:	61b8      	str	r0, [r7, #24]

                    if( pxFound != NULL )
 800f86a:	69bb      	ldr	r3, [r7, #24]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d003      	beq.n	800f878 <lTCPWindowRxCheck+0x22c>
                    {
                        /* This out-of-sequence packet has been received for a
                         * second time.  It is already stored but do send a SACK
                         * again. */
                        lReturn = -1;
 800f870:	f04f 33ff 	mov.w	r3, #4294967295
 800f874:	627b      	str	r3, [r7, #36]	; 0x24
 800f876:	e030      	b.n	800f8da <lTCPWindowRxCheck+0x28e>
                    }
                    else
                    {
                        pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	2301      	movs	r3, #1
 800f87c:	68b9      	ldr	r1, [r7, #8]
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f7ff fc88 	bl	800f194 <xTCPWindowNew>
 800f884:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d107      	bne.n	800f89c <lTCPWindowRxCheck+0x250>
                        {
                            /* Can not send a SACK, because the segment cannot be
                             * stored. */
                            pxWindow->ucOptionLength = 0U;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2200      	movs	r2, #0
 800f890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

                            /* Needs to be stored but there is no segment
                             * available. */
                            lReturn = -1;
 800f894:	f04f 33ff 	mov.w	r3, #4294967295
 800f898:	627b      	str	r3, [r7, #36]	; 0x24
 800f89a:	e01e      	b.n	800f8da <lTCPWindowRxCheck+0x28e>
                        }
                        else
                        {
                            if( xTCPWindowLoggingLevel != 0 )
 800f89c:	4b12      	ldr	r3, [pc, #72]	; (800f8e8 <lTCPWindowRxCheck+0x29c>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d014      	beq.n	800f8ce <lTCPWindowRxCheck+0x282>
                            {
                                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %lu (cnt %lu)\n",
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	68ba      	ldr	r2, [r7, #8]
 800f8ba:	1ad2      	subs	r2, r2, r3
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	480c      	ldr	r0, [pc, #48]	; (800f8fc <lTCPWindowRxCheck+0x2b0>)
 800f8ca:	f7f1 f8d7 	bl	8000a7c <vLoggingPrintf>
                                FreeRTOS_flush_logging();
                            }

                            /* Return a positive value.  The packet may be accepted
                            * and stored but an earlier packet is still missing. */
                            ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 800f8ce:	68ba      	ldr	r2, [r7, #8]
 800f8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	623b      	str	r3, [r7, #32]
                            lReturn = ( int32_t ) ulIntermediateResult;
 800f8d6:	6a3b      	ldr	r3, [r7, #32]
 800f8d8:	627b      	str	r3, [r7, #36]	; 0x24
                        }
                    }
                }
            }

            return lReturn;
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3734      	adds	r7, #52	; 0x34
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8e4:	080164ac 	.word	0x080164ac
 800f8e8:	2002660c 	.word	0x2002660c
 800f8ec:	080164f0 	.word	0x080164f0
 800f8f0:	08016538 	.word	0x08016538
 800f8f4:	08016580 	.word	0x08016580
 800f8f8:	0a050101 	.word	0x0a050101
 800f8fc:	080165c0 	.word	0x080165c0

0800f900 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 800f900:	b480      	push	{r7}
 800f902:	b087      	sub	sp, #28
 800f904:	af00      	add	r7, sp, #0
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 800f90c:	68fa      	ldr	r2, [r7, #12]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4413      	add	r3, r2
 800f912:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 800f914:	697a      	ldr	r2, [r7, #20]
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	429a      	cmp	r2, r3
 800f91a:	db03      	blt.n	800f924 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 800f91c:	697a      	ldr	r2, [r7, #20]
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	1ad3      	subs	r3, r2, r3
 800f922:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 800f924:	697b      	ldr	r3, [r7, #20]
        }
 800f926:	4618      	mov	r0, r3
 800f928:	371c      	adds	r7, #28
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr
	...

0800f934 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 800f934:	b580      	push	{r7, lr}
 800f936:	b08c      	sub	sp, #48	; 0x30
 800f938:	af02      	add	r7, sp, #8
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	607a      	str	r2, [r7, #4]
 800f940:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	627b      	str	r3, [r7, #36]	; 0x24
            int32_t lDone = 0;
 800f946:	2300      	movs	r3, #0
 800f948:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f952:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( pxSegment != NULL )
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	2b00      	cmp	r3, #0
 800f958:	f000 80d6 	beq.w	800fb08 <lTCPWindowTxAdd+0x1d4>
            {
                if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800f95c:	69bb      	ldr	r3, [r7, #24]
 800f95e:	689a      	ldr	r2, [r3, #8]
 800f960:	69bb      	ldr	r3, [r7, #24]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	429a      	cmp	r2, r3
 800f966:	f280 80cf 	bge.w	800fb08 <lTCPWindowTxAdd+0x1d4>
                {
                    if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	7d9b      	ldrb	r3, [r3, #22]
 800f96e:	f003 0301 	and.w	r3, r3, #1
 800f972:	b2db      	uxtb	r3, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	f040 80c7 	bne.w	800fb08 <lTCPWindowTxAdd+0x1d4>
 800f97a:	69bb      	ldr	r3, [r7, #24]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	f000 80c2 	beq.w	800fb08 <lTCPWindowTxAdd+0x1d4>
                    {
                        /* Adding data to a segment that was already in the TX queue.  It
                         * will be filled-up to a maximum of MSS (maximum segment size). */
                        lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	685a      	ldr	r2, [r3, #4]
 800f988:	69bb      	ldr	r3, [r7, #24]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	4619      	mov	r1, r3
 800f990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f992:	f7ff faa9 	bl	800eee8 <FreeRTOS_min_int32>
 800f996:	6178      	str	r0, [r7, #20]

                        pxSegment->lDataLength += lToWrite;
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	689a      	ldr	r2, [r3, #8]
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	441a      	add	r2, r3
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	609a      	str	r2, [r3, #8]

                        if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	689a      	ldr	r2, [r3, #8]
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	db02      	blt.n	800f9b6 <lTCPWindowTxAdd+0x82>
                        {
                            /* This segment is full, don't add more bytes. */
                            pxWindow->pxHeadSegment = NULL;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        lBytesLeft -= lToWrite;
 800f9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	627b      	str	r3, [r7, #36]	; 0x24

                        /* ulNextTxSequenceNumber is the sequence number of the next byte to
                         * be stored for transmission. */
                        pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	441a      	add	r2, r3
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Increased the return value. */
                        lDone += lToWrite;
 800f9ca:	6a3a      	ldr	r2, [r7, #32]
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	623b      	str	r3, [r7, #32]

                        /* Some detailed logging, for those who're interested. */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800f9d2:	4b52      	ldr	r3, [pc, #328]	; (800fb1c <lTCPWindowTxAdd+0x1e8>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	dd1a      	ble.n	800fa10 <lTCPWindowTxAdd+0xdc>
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800f9e0:	2b17      	cmp	r3, #23
 800f9e2:	d015      	beq.n	800fa10 <lTCPWindowTxAdd+0xdc>
                        {
                            FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4lu bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	69db      	ldr	r3, [r3, #28]
 800f9ec:	1ad1      	subs	r1, r2, r3
 800f9ee:	69bb      	ldr	r3, [r7, #24]
 800f9f0:	6898      	ldr	r0, [r3, #8]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	69db      	ldr	r3, [r3, #28]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	69ba      	ldr	r2, [r7, #24]
 800f9fe:	68d2      	ldr	r2, [r2, #12]
 800fa00:	9201      	str	r2, [sp, #4]
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	4603      	mov	r3, r0
 800fa06:	460a      	mov	r2, r1
 800fa08:	68b9      	ldr	r1, [r7, #8]
 800fa0a:	4845      	ldr	r0, [pc, #276]	; (800fb20 <lTCPWindowTxAdd+0x1ec>)
 800fa0c:	f7f1 f836 	bl	8000a7c <vLoggingPrintf>
                            FreeRTOS_flush_logging();
                        }

                        /* Calculate the next position in the circular data buffer, knowing
                         * its maximum length 'lMax'. */
                        lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800fa10:	697a      	ldr	r2, [r7, #20]
 800fa12:	6839      	ldr	r1, [r7, #0]
 800fa14:	69f8      	ldr	r0, [r7, #28]
 800fa16:	f7ff ff73 	bl	800f900 <lTCPIncrementTxPosition>
 800fa1a:	61f8      	str	r0, [r7, #28]
                    }
                }
            }

            while( lBytesLeft > 0 )
 800fa1c:	e074      	b.n	800fb08 <lTCPWindowTxAdd+0x1d4>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800fa28:	461a      	mov	r2, r3
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	68f8      	ldr	r0, [r7, #12]
 800fa2e:	f7ff fbb1 	bl	800f194 <xTCPWindowNew>
 800fa32:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d05e      	beq.n	800faf8 <lTCPWindowTxAdd+0x1c4>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 800fa3a:	69bb      	ldr	r3, [r7, #24]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	4619      	mov	r1, r3
 800fa40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa42:	f7ff fa51 	bl	800eee8 <FreeRTOS_min_int32>
 800fa46:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	697a      	ldr	r2, [r7, #20]
 800fa4c:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	69fa      	ldr	r2, [r7, #28]
 800fa52:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 800fa54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	1ad3      	subs	r3, r2, r3
 800fa5a:	627b      	str	r3, [r7, #36]	; 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 800fa5c:	697a      	ldr	r2, [r7, #20]
 800fa5e:	6839      	ldr	r1, [r7, #0]
 800fa60:	69f8      	ldr	r0, [r7, #28]
 800fa62:	f7ff ff4d 	bl	800f900 <lTCPIncrementTxPosition>
 800fa66:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	441a      	add	r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	635a      	str	r2, [r3, #52]	; 0x34
                    lDone += lToWrite;
 800fa74:	6a3a      	ldr	r2, [r7, #32]
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	4413      	add	r3, r2
 800fa7a:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	3318      	adds	r3, #24
 800fa86:	4619      	mov	r1, r3
 800fa88:	4610      	mov	r0, r2
 800fa8a:	f7ff fab2 	bl	800eff2 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	689a      	ldr	r2, [r3, #8]
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	da03      	bge.n	800faa2 <lTCPWindowTxAdd+0x16e>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	69ba      	ldr	r2, [r7, #24]
 800fa9e:	67da      	str	r2, [r3, #124]	; 0x7c
 800faa0:	e002      	b.n	800faa8 <lTCPWindowTxAdd+0x174>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2200      	movs	r2, #0
 800faa6:	67da      	str	r2, [r3, #124]	; 0x7c
                    }

                    if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800faae:	2b17      	cmp	r3, #23
 800fab0:	d02a      	beq.n	800fb08 <lTCPWindowTxAdd+0x1d4>
                    {
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800fab2:	4b1a      	ldr	r3, [pc, #104]	; (800fb1c <lTCPWindowTxAdd+0x1e8>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	dc07      	bgt.n	800faca <lTCPWindowTxAdd+0x196>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800faba:	4b18      	ldr	r3, [pc, #96]	; (800fb1c <lTCPWindowTxAdd+0x1e8>)
 800fabc:	681b      	ldr	r3, [r3, #0]
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	dd22      	ble.n	800fb08 <lTCPWindowTxAdd+0x1d4>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d01e      	beq.n	800fb08 <lTCPWindowTxAdd+0x1d4>
                        {
                            FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: New %4ld bytes for seqNr %lu len %4lu (nxt %lu) pos %lu\n",
 800faca:	69bb      	ldr	r3, [r7, #24]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	69db      	ldr	r3, [r3, #28]
 800fad2:	1ad1      	subs	r1, r2, r3
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	6898      	ldr	r0, [r3, #8]
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	69db      	ldr	r3, [r3, #28]
 800fae0:	1ad3      	subs	r3, r2, r3
 800fae2:	69ba      	ldr	r2, [r7, #24]
 800fae4:	68d2      	ldr	r2, [r2, #12]
 800fae6:	9201      	str	r2, [sp, #4]
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	4603      	mov	r3, r0
 800faec:	460a      	mov	r2, r1
 800faee:	68b9      	ldr	r1, [r7, #8]
 800faf0:	480c      	ldr	r0, [pc, #48]	; (800fb24 <lTCPWindowTxAdd+0x1f0>)
 800faf2:	f7f0 ffc3 	bl	8000a7c <vLoggingPrintf>
 800faf6:	e007      	b.n	800fb08 <lTCPWindowTxAdd+0x1d4>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 800faf8:	6a3b      	ldr	r3, [r7, #32]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d008      	beq.n	800fb10 <lTCPWindowTxAdd+0x1dc>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
 800fafe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb00:	4809      	ldr	r0, [pc, #36]	; (800fb28 <lTCPWindowTxAdd+0x1f4>)
 800fb02:	f7f0 ffbb 	bl	8000a7c <vLoggingPrintf>
                    }

                    break;
 800fb06:	e003      	b.n	800fb10 <lTCPWindowTxAdd+0x1dc>
            while( lBytesLeft > 0 )
 800fb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	dc87      	bgt.n	800fa1e <lTCPWindowTxAdd+0xea>
 800fb0e:	e000      	b.n	800fb12 <lTCPWindowTxAdd+0x1de>
                    break;
 800fb10:	bf00      	nop
                }
            }

            return lDone;
 800fb12:	6a3b      	ldr	r3, [r7, #32]
        }
 800fb14:	4618      	mov	r0, r3
 800fb16:	3728      	adds	r7, #40	; 0x28
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	2002660c 	.word	0x2002660c
 800fb20:	080165f0 	.word	0x080165f0
 800fb24:	0801663c 	.word	0x0801663c
 800fb28:	08016688 	.word	0x08016688

0800fb2c <xTCPWindowTxDone>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <xTCPWindowTxDone+0x16>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e000      	b.n	800fb44 <xTCPWindowTxDone+0x18>
 800fb42:	2300      	movs	r3, #0
        }
 800fb44:	4618      	mov	r0, r3
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b086      	sub	sp, #24
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	3354      	adds	r3, #84	; 0x54
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7ff fbde 	bl	800f320 <xTCPWindowPeekHead>
 800fb64:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d102      	bne.n	800fb72 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	613b      	str	r3, [r7, #16]
 800fb70:	e02f      	b.n	800fbd2 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d306      	bcc.n	800fb8c <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a1b      	ldr	r3, [r3, #32]
 800fb86:	1ad3      	subs	r3, r2, r3
 800fb88:	617b      	str	r3, [r7, #20]
 800fb8a:	e001      	b.n	800fb90 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0UL;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 800fb90:	6979      	ldr	r1, [r7, #20]
 800fb92:	6838      	ldr	r0, [r7, #0]
 800fb94:	f7ff f9b8 	bl	800ef08 <FreeRTOS_min_uint32>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	1a9b      	subs	r3, r3, r2
 800fb9e:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	461a      	mov	r2, r3
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d302      	bcc.n	800fbb2 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 800fbac:	2301      	movs	r3, #1
 800fbae:	613b      	str	r3, [r7, #16]
 800fbb0:	e001      	b.n	800fbb6 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00a      	beq.n	800fbd2 <prvTCPWindowTxHasSpace+0x82>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	689a      	ldr	r2, [r3, #8]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	440b      	add	r3, r1
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d201      	bcs.n	800fbd2 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 800fbd2:	693b      	ldr	r3, [r7, #16]
        }
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3718      	adds	r7, #24
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b088      	sub	sp, #32
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	60f8      	str	r0, [r7, #12]
 800fbe4:	60b9      	str	r1, [r7, #8]
 800fbe6:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2200      	movs	r2, #0
 800fbec:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d002      	beq.n	800fbfc <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	61fb      	str	r3, [r7, #28]
 800fbfa:	e04a      	b.n	800fc92 <xTCPWindowTxHasData+0xb6>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	3368      	adds	r3, #104	; 0x68
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7ff fb8d 	bl	800f320 <xTCPWindowPeekHead>
 800fc06:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 800fc08:	69bb      	ldr	r3, [r7, #24]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d019      	beq.n	800fc42 <xTCPWindowTxHasData+0x66>
                {
                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 800fc0e:	69bb      	ldr	r3, [r7, #24]
 800fc10:	3310      	adds	r3, #16
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7ff fa0a 	bl	800f02c <ulTimerGetAge>
 800fc18:	6178      	str	r0, [r7, #20]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc1e:	461a      	mov	r2, r3
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	7d1b      	ldrb	r3, [r3, #20]
 800fc24:	fa02 f303 	lsl.w	r3, r2, r3
 800fc28:	613b      	str	r3, [r7, #16]

                    if( ulMaxAge > ulAge )
 800fc2a:	693a      	ldr	r2, [r7, #16]
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d904      	bls.n	800fc3c <xTCPWindowTxHasData+0x60>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 800fc32:	693a      	ldr	r2, [r7, #16]
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	1ad2      	subs	r2, r2, r3
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	61fb      	str	r3, [r7, #28]
 800fc40:	e027      	b.n	800fc92 <xTCPWindowTxHasData+0xb6>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	3354      	adds	r3, #84	; 0x54
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff fb6a 	bl	800f320 <xTCPWindowPeekHead>
 800fc4c:	61b8      	str	r0, [r7, #24]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 800fc4e:	69bb      	ldr	r3, [r7, #24]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d102      	bne.n	800fc5a <xTCPWindowTxHasData+0x7e>
                    {
                        xReturn = pdFALSE;
 800fc54:	2300      	movs	r3, #0
 800fc56:	61fb      	str	r3, [r7, #28]
 800fc58:	e01b      	b.n	800fc92 <xTCPWindowTxHasData+0xb6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800fc5a:	68b9      	ldr	r1, [r7, #8]
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f7ff ff77 	bl	800fb50 <prvTCPWindowTxHasSpace>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d102      	bne.n	800fc6e <xTCPWindowTxHasData+0x92>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	61fb      	str	r3, [r7, #28]
 800fc6c:	e011      	b.n	800fc92 <xTCPWindowTxHasData+0xb6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	f003 0302 	and.w	r3, r3, #2
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d008      	beq.n	800fc8e <xTCPWindowTxHasData+0xb2>
 800fc7c:	69bb      	ldr	r3, [r7, #24]
 800fc7e:	689a      	ldr	r2, [r3, #8]
 800fc80:	69bb      	ldr	r3, [r7, #24]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	da02      	bge.n	800fc8e <xTCPWindowTxHasData+0xb2>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	61fb      	str	r3, [r7, #28]
 800fc8c:	e001      	b.n	800fc92 <xTCPWindowTxHasData+0xb6>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 800fc8e:	2301      	movs	r3, #1
 800fc90:	61fb      	str	r3, [r7, #28]
                    }
                }
            }

            return xReturn;
 800fc92:	69fb      	ldr	r3, [r7, #28]
        }
 800fc94:	4618      	mov	r0, r3
 800fc96:	3720      	adds	r7, #32
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 800fc9c:	b590      	push	{r4, r7, lr}
 800fc9e:	b08b      	sub	sp, #44	; 0x2c
 800fca0:	af02      	add	r7, sp, #8
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulMaxTime;
            uint32_t ulReturn = ~0UL;
 800fca8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcac:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	3340      	adds	r3, #64	; 0x40
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7ff fb18 	bl	800f2e8 <xTCPWindowGetHead>
 800fcb8:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	62da      	str	r2, [r3, #44]	; 0x2c

            if( pxSegment == NULL )
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f040 80a8 	bne.w	800fe1a <ulTCPWindowTxGet+0x17e>
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3368      	adds	r3, #104	; 0x68
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7ff fb26 	bl	800f320 <xTCPWindowPeekHead>
 800fcd4:	61f8      	str	r0, [r7, #28]

                if( pxSegment != NULL )
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d03e      	beq.n	800fd5a <ulTCPWindowTxGet+0xbe>
                {
                    /* Do check the timing. */
                    ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce0:	461a      	mov	r2, r3
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	7d1b      	ldrb	r3, [r3, #20]
 800fce6:	fa02 f303 	lsl.w	r3, r2, r3
 800fcea:	617b      	str	r3, [r7, #20]

                    if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	3310      	adds	r3, #16
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7ff f99b 	bl	800f02c <ulTimerGetAge>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d22b      	bcs.n	800fd56 <ulTCPWindowTxGet+0xba>
                    {
                        /* A normal (non-fast) retransmission.  Move it from the
                         * head of the waiting queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	3368      	adds	r3, #104	; 0x68
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7ff faf0 	bl	800f2e8 <xTCPWindowGetHead>
 800fd08:	61f8      	str	r0, [r7, #28]
                        pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	755a      	strb	r2, [r3, #21]

                        /* Some detailed logging. */
                        if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800fd10:	4b81      	ldr	r3, [pc, #516]	; (800ff18 <ulTCPWindowTxGet+0x27c>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d020      	beq.n	800fd5a <ulTCPWindowTxGet+0xbe>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fd1e:	2b17      	cmp	r3, #23
 800fd20:	d01b      	beq.n	800fd5a <ulTCPWindowTxGet+0xbe>
                        {
                            FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %ld bytes for sequence number %lu (%lX)\n",
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800fd28:	4618      	mov	r0, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fd30:	461c      	mov	r4, r3
 800fd32:	69fb      	ldr	r3, [r7, #28]
 800fd34:	6899      	ldr	r1, [r3, #8]
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	69db      	ldr	r3, [r3, #28]
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	69fa      	ldr	r2, [r7, #28]
 800fd42:	6812      	ldr	r2, [r2, #0]
 800fd44:	9201      	str	r2, [sp, #4]
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	460b      	mov	r3, r1
 800fd4a:	4622      	mov	r2, r4
 800fd4c:	4601      	mov	r1, r0
 800fd4e:	4873      	ldr	r0, [pc, #460]	; (800ff1c <ulTCPWindowTxGet+0x280>)
 800fd50:	f7f0 fe94 	bl	8000a7c <vLoggingPrintf>
 800fd54:	e001      	b.n	800fd5a <ulTCPWindowTxGet+0xbe>
                            FreeRTOS_flush_logging();
                        }
                    }
                    else
                    {
                        pxSegment = NULL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	61fb      	str	r3, [r7, #28]
                    }
                }

                if( pxSegment == NULL )
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d178      	bne.n	800fe52 <ulTCPWindowTxGet+0x1b6>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	3354      	adds	r3, #84	; 0x54
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7ff fadb 	bl	800f320 <xTCPWindowPeekHead>
 800fd6a:	61f8      	str	r0, [r7, #28]

                    if( pxSegment == NULL )
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d102      	bne.n	800fd78 <ulTCPWindowTxGet+0xdc>
                    {
                        /* No segments queued. */
                        ulReturn = 0UL;
 800fd72:	2300      	movs	r3, #0
 800fd74:	61bb      	str	r3, [r7, #24]
 800fd76:	e06c      	b.n	800fe52 <ulTCPWindowTxGet+0x1b6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	f003 0302 	and.w	r3, r3, #2
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d008      	beq.n	800fd98 <ulTCPWindowTxGet+0xfc>
 800fd86:	69fb      	ldr	r3, [r7, #28]
 800fd88:	689a      	ldr	r2, [r3, #8]
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	da02      	bge.n	800fd98 <ulTCPWindowTxGet+0xfc>
                    {
                        /* A segment has been queued but the driver waits until it
                         * has a full size of MSS. */
                        ulReturn = 0;
 800fd92:	2300      	movs	r3, #0
 800fd94:	61bb      	str	r3, [r7, #24]
 800fd96:	e05c      	b.n	800fe52 <ulTCPWindowTxGet+0x1b6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 800fd98:	68b9      	ldr	r1, [r7, #8]
 800fd9a:	68f8      	ldr	r0, [r7, #12]
 800fd9c:	f7ff fed8 	bl	800fb50 <prvTCPWindowTxHasSpace>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d102      	bne.n	800fdac <ulTCPWindowTxGet+0x110>
                    {
                        /* Peer has no more space at this moment. */
                        ulReturn = 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	61bb      	str	r3, [r7, #24]
 800fdaa:	e052      	b.n	800fe52 <ulTCPWindowTxGet+0x1b6>
                    }
                    else
                    {
                        /* Move it out of the Tx queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	3354      	adds	r3, #84	; 0x54
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff fa99 	bl	800f2e8 <xTCPWindowGetHead>
 800fdb6:	61f8      	str	r0, [r7, #28]

                        /* Don't let pxHeadSegment point to this segment any more,
                         * so no more data will be added. */
                        if( pxWindow->pxHeadSegment == pxSegment )
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fdbc:	69fa      	ldr	r2, [r7, #28]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d102      	bne.n	800fdc8 <ulTCPWindowTxGet+0x12c>
                        {
                            pxWindow->pxHeadSegment = NULL;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	67da      	str	r2, [r3, #124]	; 0x7c
                        }

                        /* pxWindow->tx.highest registers the highest sequence
                         * number in our transmission window. */
                        pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	69fa      	ldr	r2, [r7, #28]
 800fdce:	6892      	ldr	r2, [r2, #8]
 800fdd0:	441a      	add	r2, r3
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	629a      	str	r2, [r3, #40]	; 0x28

                        /* ...and more detailed logging */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 800fdd6:	4b50      	ldr	r3, [pc, #320]	; (800ff18 <ulTCPWindowTxGet+0x27c>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	dd39      	ble.n	800fe52 <ulTCPWindowTxGet+0x1b6>
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fde4:	2b17      	cmp	r3, #23
 800fde6:	d034      	beq.n	800fe52 <ulTCPWindowTxGet+0x1b6>
                        {
                            FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %ld bytes for sequence number %lu (ws %lu)\n",
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800fdee:	4618      	mov	r0, r3
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fdf6:	461c      	mov	r4, r3
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	6899      	ldr	r1, [r3, #8]
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	69db      	ldr	r3, [r3, #28]
 800fe04:	1ad3      	subs	r3, r2, r3
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	9201      	str	r2, [sp, #4]
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	4622      	mov	r2, r4
 800fe10:	4601      	mov	r1, r0
 800fe12:	4843      	ldr	r0, [pc, #268]	; (800ff20 <ulTCPWindowTxGet+0x284>)
 800fe14:	f7f0 fe32 	bl	8000a7c <vLoggingPrintf>
 800fe18:	e01b      	b.n	800fe52 <ulTCPWindowTxGet+0x1b6>
            }
            else
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 800fe1a:	4b3f      	ldr	r3, [pc, #252]	; (800ff18 <ulTCPWindowTxGet+0x27c>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d017      	beq.n	800fe52 <ulTCPWindowTxGet+0x1b6>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %ld bytes for sequence number %lu (ws %lu)\n",
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800fe28:	4618      	mov	r0, r3
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fe30:	461c      	mov	r4, r3
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	6899      	ldr	r1, [r3, #8]
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	69db      	ldr	r3, [r3, #28]
 800fe3e:	1ad3      	subs	r3, r2, r3
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	9201      	str	r2, [sp, #4]
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	460b      	mov	r3, r1
 800fe48:	4622      	mov	r2, r4
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	4835      	ldr	r0, [pc, #212]	; (800ff24 <ulTCPWindowTxGet+0x288>)
 800fe4e:	f7f0 fe15 	bl	8000a7c <vLoggingPrintf>
                    FreeRTOS_flush_logging();
                }
            }

            /* See if it has already been determined to return 0. */
            if( ulReturn != 0UL )
 800fe52:	69bb      	ldr	r3, [r7, #24]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d05a      	beq.n	800ff0e <ulTCPWindowTxGet+0x272>
            {
                /* pxSegment is not NULL when ulReturn != 0UL. */
                configASSERT( pxSegment != NULL );
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d104      	bne.n	800fe68 <ulTCPWindowTxGet+0x1cc>
 800fe5e:	4932      	ldr	r1, [pc, #200]	; (800ff28 <ulTCPWindowTxGet+0x28c>)
 800fe60:	f240 60d9 	movw	r0, #1753	; 0x6d9
 800fe64:	f7f0 fe33 	bl	8000ace <vAssertCalled>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d004      	beq.n	800fe7a <ulTCPWindowTxGet+0x1de>
 800fe70:	492d      	ldr	r1, [pc, #180]	; (800ff28 <ulTCPWindowTxGet+0x28c>)
 800fe72:	f240 60da 	movw	r0, #1754	; 0x6da
 800fe76:	f7f0 fe2a 	bl	8000ace <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	3318      	adds	r3, #24
 800fe84:	4619      	mov	r1, r3
 800fe86:	4610      	mov	r0, r2
 800fe88:	f7ff f8b3 	bl	800eff2 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 800fe8c:	69fa      	ldr	r2, [r7, #28]
 800fe8e:	7d93      	ldrb	r3, [r2, #22]
 800fe90:	f043 0301 	orr.w	r3, r3, #1
 800fe94:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	7d1b      	ldrb	r3, [r3, #20]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	b2da      	uxtb	r2, r3
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	7d1b      	ldrb	r3, [r3, #20]
 800fea6:	2b04      	cmp	r3, #4
 800fea8:	d121      	bne.n	800feee <ulTCPWindowTxGet+0x252>
                {
                    if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	689a      	ldr	r2, [r3, #8]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800feb4:	005b      	lsls	r3, r3, #1
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d919      	bls.n	800feee <ulTCPWindowTxGet+0x252>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800fec0:	4619      	mov	r1, r3
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800fec8:	4618      	mov	r0, r3
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	689a      	ldr	r2, [r3, #8]
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800fed4:	005b      	lsls	r3, r3, #1
 800fed6:	9300      	str	r3, [sp, #0]
 800fed8:	4613      	mov	r3, r2
 800feda:	4602      	mov	r2, r0
 800fedc:	4813      	ldr	r0, [pc, #76]	; (800ff2c <ulTCPWindowTxGet+0x290>)
 800fede:	f7f0 fdcd 	bl	8000a7c <vLoggingPrintf>
                                                 pxWindow->usPeerPortNumber,
                                                 pxWindow->usOurPortNumber,
                                                 pxWindow->xSize.ulTxWindowLength,
                                                 2U * pxWindow->usMSS ) );
                        pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800fee8:	005a      	lsls	r2, r3, #1
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	609a      	str	r2, [r3, #8]
                    }
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	3310      	adds	r3, #16
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7ff f88d 	bl	800f012 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	68da      	ldr	r2, [r3, #12]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 800ff0e:	69bb      	ldr	r3, [r7, #24]
        }
 800ff10:	4618      	mov	r0, r3
 800ff12:	3724      	adds	r7, #36	; 0x24
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd90      	pop	{r4, r7, pc}
 800ff18:	2002660c 	.word	0x2002660c
 800ff1c:	080166c4 	.word	0x080166c4
 800ff20:	08016710 	.word	0x08016710
 800ff24:	08016760 	.word	0x08016760
 800ff28:	080163d0 	.word	0x080163d0
 800ff2c:	080167b0 	.word	0x080167b0

0800ff30 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 800ff30:	b5b0      	push	{r4, r5, r7, lr}
 800ff32:	b092      	sub	sp, #72	; 0x48
 800ff34:	af04      	add	r7, sp, #16
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	637b      	str	r3, [r7, #52]	; 0x34
            uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	633b      	str	r3, [r7, #48]	; 0x30
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	3398      	adds	r3, #152	; 0x98
 800ff48:	627b      	str	r3, [r7, #36]	; 0x24
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	62fb      	str	r3, [r7, #44]	; 0x2c

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 800ff50:	e0d4      	b.n	80100fc <prvTCPWindowTxCheckAck+0x1cc>
            {
                xDoUnlink = pdFALSE;
 800ff52:	2300      	movs	r3, #0
 800ff54:	62bb      	str	r3, [r7, #40]	; 0x28
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ff56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff58:	68db      	ldr	r3, [r3, #12]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fe ffe4 	bl	800ef28 <vCastPointerTo_TCPSegment_t>
 800ff60:	6238      	str	r0, [r7, #32]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800ff62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 800ff68:	6a3b      	ldr	r3, [r7, #32]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff70:	f7ff f812 	bl	800ef98 <xSequenceGreaterThan>
 800ff74:	4603      	mov	r3, r0
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d000      	beq.n	800ff7c <prvTCPWindowTxCheckAck+0x4c>
                {
                    continue;
 800ff7a:	e0bf      	b.n	80100fc <prvTCPWindowTxCheckAck+0x1cc>
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 800ff7c:	6a3b      	ldr	r3, [r7, #32]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff82:	429a      	cmp	r2, r3
 800ff84:	f040 80c7 	bne.w	8010116 <prvTCPWindowTxCheckAck+0x1e6>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 800ff88:	6a3b      	ldr	r3, [r7, #32]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	61fb      	str	r3, [r7, #28]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 800ff8e:	6a3b      	ldr	r3, [r7, #32]
 800ff90:	7d9b      	ldrb	r3, [r3, #22]
 800ff92:	f003 0302 	and.w	r3, r3, #2
 800ff96:	b2db      	uxtb	r3, r3
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d171      	bne.n	8010080 <prvTCPWindowTxCheckAck+0x150>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 800ff9c:	6a3b      	ldr	r3, [r7, #32]
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	6879      	ldr	r1, [r7, #4]
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fe fff6 	bl	800ef98 <xSequenceGreaterThan>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d023      	beq.n	800fffa <prvTCPWindowTxCheckAck+0xca>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                            {
                                uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 800ffb2:	6a3b      	ldr	r3, [r7, #32]
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	69db      	ldr	r3, [r3, #28]
 800ffba:	1ad3      	subs	r3, r2, r3
 800ffbc:	617b      	str	r3, [r7, #20]
                                FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %lu - %lu Partial sequence number %lu - %lu\n",
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800ffc4:	461c      	mov	r4, r3
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800ffcc:	461d      	mov	r5, r3
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	69db      	ldr	r3, [r3, #28]
 800ffd2:	697a      	ldr	r2, [r7, #20]
 800ffd4:	1ad0      	subs	r0, r2, r3
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	69db      	ldr	r3, [r3, #28]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	1ad3      	subs	r3, r2, r3
 800ffde:	6979      	ldr	r1, [r7, #20]
 800ffe0:	69fa      	ldr	r2, [r7, #28]
 800ffe2:	440a      	add	r2, r1
 800ffe4:	9202      	str	r2, [sp, #8]
 800ffe6:	697a      	ldr	r2, [r7, #20]
 800ffe8:	9201      	str	r2, [sp, #4]
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	4603      	mov	r3, r0
 800ffee:	462a      	mov	r2, r5
 800fff0:	4621      	mov	r1, r4
 800fff2:	484c      	ldr	r0, [pc, #304]	; (8010124 <prvTCPWindowTxCheckAck+0x1f4>)
 800fff4:	f7f0 fd42 	bl	8000a7c <vLoggingPrintf>
                                                         ulFirstSeq - pxWindow->tx.ulFirstSequenceNumber,
                                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                         ulFirstSeq, ulFirstSeq + ulDataLength ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */
                        break;
 800fff8:	e08e      	b.n	8010118 <prvTCPWindowTxCheckAck+0x1e8>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 800fffa:	6a3a      	ldr	r2, [r7, #32]
 800fffc:	7d93      	ldrb	r3, [r2, #22]
 800fffe:	f043 0302 	orr.w	r3, r3, #2
 8010002:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8010004:	6a3b      	ldr	r3, [r7, #32]
 8010006:	7d1b      	ldrb	r3, [r3, #20]
 8010008:	2b01      	cmp	r3, #1
 801000a:	d137      	bne.n	801007c <prvTCPWindowTxCheckAck+0x14c>
 801000c:	6a3b      	ldr	r3, [r7, #32]
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	4413      	add	r3, r2
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	429a      	cmp	r2, r3
 8010018:	d130      	bne.n	801007c <prvTCPWindowTxCheckAck+0x14c>
                    {
                        int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 801001a:	6a3b      	ldr	r3, [r7, #32]
 801001c:	3310      	adds	r3, #16
 801001e:	4618      	mov	r0, r3
 8010020:	f7ff f804 	bl	800f02c <ulTimerGetAge>
 8010024:	4603      	mov	r3, r0
 8010026:	61bb      	str	r3, [r7, #24]

                        if( pxWindow->lSRTT >= mS )
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801002c:	69ba      	ldr	r2, [r7, #24]
 801002e:	429a      	cmp	r2, r3
 8010030:	dc0e      	bgt.n	8010050 <prvTCPWindowTxCheckAck+0x120>
                        {
                            /* RTT becomes smaller: adapt slowly. */
                            pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010036:	4613      	mov	r3, r2
 8010038:	00db      	lsls	r3, r3, #3
 801003a:	1a9a      	subs	r2, r3, r2
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	4413      	add	r3, r2
 8010040:	2b00      	cmp	r3, #0
 8010042:	da00      	bge.n	8010046 <prvTCPWindowTxCheckAck+0x116>
 8010044:	3307      	adds	r3, #7
 8010046:	10db      	asrs	r3, r3, #3
 8010048:	461a      	mov	r2, r3
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	639a      	str	r2, [r3, #56]	; 0x38
 801004e:	e00e      	b.n	801006e <prvTCPWindowTxCheckAck+0x13e>
                        }
                        else
                        {
                            /* RTT becomes larger: adapt quicker */
                            pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010054:	4613      	mov	r3, r2
 8010056:	005b      	lsls	r3, r3, #1
 8010058:	441a      	add	r2, r3
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	4413      	add	r3, r2
 801005e:	005b      	lsls	r3, r3, #1
 8010060:	2b00      	cmp	r3, #0
 8010062:	da00      	bge.n	8010066 <prvTCPWindowTxCheckAck+0x136>
 8010064:	3307      	adds	r3, #7
 8010066:	10db      	asrs	r3, r3, #3
 8010068:	461a      	mov	r2, r3
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	639a      	str	r2, [r3, #56]	; 0x38
                        }

                        /* Cap to the minimum of 50ms. */
                        if( pxWindow->lSRTT < winSRTT_CAP_mS )
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010072:	2b31      	cmp	r3, #49	; 0x31
 8010074:	dc02      	bgt.n	801007c <prvTCPWindowTxCheckAck+0x14c>
                        {
                            pxWindow->lSRTT = winSRTT_CAP_mS;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2232      	movs	r2, #50	; 0x32
 801007a:	639a      	str	r2, [r3, #56]	; 0x38
                        }
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 801007c:	2301      	movs	r3, #1
 801007e:	62bb      	str	r3, [r7, #40]	; 0x28
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6a1b      	ldr	r3, [r3, #32]
 8010084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010086:	429a      	cmp	r2, r3
 8010088:	d128      	bne.n	80100dc <prvTCPWindowTxCheckAck+0x1ac>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801008a:	4b27      	ldr	r3, [pc, #156]	; (8010128 <prvTCPWindowTxCheckAck+0x1f8>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2b01      	cmp	r3, #1
 8010090:	dd15      	ble.n	80100be <prvTCPWindowTxCheckAck+0x18e>
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8010098:	2b17      	cmp	r3, #23
 801009a:	d010      	beq.n	80100be <prvTCPWindowTxCheckAck+0x18e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %lu - %lu Ready sequence number %lu\n",
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	69db      	ldr	r3, [r3, #28]
 80100a0:	68ba      	ldr	r2, [r7, #8]
 80100a2:	1ad1      	subs	r1, r2, r3
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	69db      	ldr	r3, [r3, #28]
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	1ad0      	subs	r0, r2, r3
 80100ac:	6a3b      	ldr	r3, [r7, #32]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	69db      	ldr	r3, [r3, #28]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	4602      	mov	r2, r0
 80100b8:	481c      	ldr	r0, [pc, #112]	; (801012c <prvTCPWindowTxCheckAck+0x1fc>)
 80100ba:	f7f0 fcdf 	bl	8000a7c <vLoggingPrintf>
                                                 ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                 pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	6a1a      	ldr	r2, [r3, #32]
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	441a      	add	r2, r3
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 80100ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	4413      	add	r3, r2
 80100d0:	637b      	str	r3, [r7, #52]	; 0x34

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 80100d2:	6a38      	ldr	r0, [r7, #32]
 80100d4:	f7ff f93e 	bl	800f354 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 80100d8:	2300      	movs	r3, #0
 80100da:	62bb      	str	r3, [r7, #40]	; 0x28
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 80100dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d008      	beq.n	80100f4 <prvTCPWindowTxCheckAck+0x1c4>
 80100e2:	6a3b      	ldr	r3, [r7, #32]
 80100e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d004      	beq.n	80100f4 <prvTCPWindowTxCheckAck+0x1c4>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 80100ea:	6a3b      	ldr	r3, [r7, #32]
 80100ec:	3318      	adds	r3, #24
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7f4 feac 	bl	8004e4c <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 80100f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	4413      	add	r3, r2
 80100fa:	633b      	str	r3, [r7, #48]	; 0x30
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 80100fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010100:	429a      	cmp	r2, r3
 8010102:	d009      	beq.n	8010118 <prvTCPWindowTxCheckAck+0x1e8>
 8010104:	6879      	ldr	r1, [r7, #4]
 8010106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010108:	f7fe ff2f 	bl	800ef6a <xSequenceLessThan>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	f47f af1f 	bne.w	800ff52 <prvTCPWindowTxCheckAck+0x22>
 8010114:	e000      	b.n	8010118 <prvTCPWindowTxCheckAck+0x1e8>
                    break;
 8010116:	bf00      	nop
            }

            return ulBytesConfirmed;
 8010118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        }
 801011a:	4618      	mov	r0, r3
 801011c:	3738      	adds	r7, #56	; 0x38
 801011e:	46bd      	mov	sp, r7
 8010120:	bdb0      	pop	{r4, r5, r7, pc}
 8010122:	bf00      	nop
 8010124:	080167e8 	.word	0x080167e8
 8010128:	2002660c 	.word	0x2002660c
 801012c:	08016834 	.word	0x08016834

08010130 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0UL;
 801013a:	2300      	movs	r3, #0
 801013c:	613b      	str	r3, [r7, #16]

            /* A higher Tx block has been acknowledged.  Now iterate through the
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	3370      	adds	r3, #112	; 0x70
 8010142:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 801014a:	e04c      	b.n	80101e6 <prvTCPWindowFastRetransmit+0xb6>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	68db      	ldr	r3, [r3, #12]
 8010150:	4618      	mov	r0, r3
 8010152:	f7fe fee9 	bl	800ef28 <vCastPointerTo_TCPSegment_t>
 8010156:	60b8      	str	r0, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	7d9b      	ldrb	r3, [r3, #22]
 8010162:	f003 0302 	and.w	r3, r3, #2
 8010166:	b2db      	uxtb	r3, r3
 8010168:	2b00      	cmp	r3, #0
 801016a:	d13c      	bne.n	80101e6 <prvTCPWindowFastRetransmit+0xb6>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6839      	ldr	r1, [r7, #0]
 8010172:	4618      	mov	r0, r3
 8010174:	f7fe fef9 	bl	800ef6a <xSequenceLessThan>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d033      	beq.n	80101e6 <prvTCPWindowFastRetransmit+0xb6>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	7d5b      	ldrb	r3, [r3, #21]
 8010182:	3301      	adds	r3, #1
 8010184:	b2da      	uxtb	r2, r3
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	7d5b      	ldrb	r3, [r3, #21]
 801018e:	2b03      	cmp	r3, #3
 8010190:	d129      	bne.n	80101e6 <prvTCPWindowFastRetransmit+0xb6>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	2200      	movs	r2, #0
 8010196:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8010198:	4b17      	ldr	r3, [pc, #92]	; (80101f8 <prvTCPWindowFastRetransmit+0xc8>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	db11      	blt.n	80101c4 <prvTCPWindowFastRetransmit+0x94>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80101a6:	2b17      	cmp	r3, #23
 80101a8:	d00c      	beq.n	80101c4 <prvTCPWindowFastRetransmit+0x94>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %lu < %lu\n",
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	69db      	ldr	r3, [r3, #28]
 80101b2:	1ad1      	subs	r1, r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	69db      	ldr	r3, [r3, #28]
 80101b8:	683a      	ldr	r2, [r7, #0]
 80101ba:	1ad3      	subs	r3, r2, r3
 80101bc:	461a      	mov	r2, r3
 80101be:	480f      	ldr	r0, [pc, #60]	; (80101fc <prvTCPWindowFastRetransmit+0xcc>)
 80101c0:	f7f0 fc5c 	bl	8000a7c <vLoggingPrintf>
                                                         ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
                                FreeRTOS_flush_logging();
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	3318      	adds	r3, #24
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7f4 fe3f 	bl	8004e4c <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	3318      	adds	r3, #24
 80101d8:	4619      	mov	r1, r3
 80101da:	4610      	mov	r0, r2
 80101dc:	f7fe ff09 	bl	800eff2 <vListInsertFifo>
                            ulCount++;
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	3301      	adds	r3, #1
 80101e4:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 80101e6:	697a      	ldr	r2, [r7, #20]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d1ae      	bne.n	801014c <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 80101ee:	693b      	ldr	r3, [r7, #16]
        }
 80101f0:	4618      	mov	r0, r3
 80101f2:	3718      	adds	r7, #24
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	2002660c 	.word	0x2002660c
 80101fc:	08016874 	.word	0x08016874

08010200 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence, ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6a1b      	ldr	r3, [r3, #32]
 801020e:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8010210:	68b9      	ldr	r1, [r7, #8]
 8010212:	6838      	ldr	r0, [r7, #0]
 8010214:	f7fe fe93 	bl	800ef3e <xSequenceLessThanOrEqual>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d002      	beq.n	8010224 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0UL;
 801021e:	2300      	movs	r3, #0
 8010220:	60fb      	str	r3, [r7, #12]
 8010222:	e005      	b.n	8010230 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8010224:	683a      	ldr	r2, [r7, #0]
 8010226:	68b9      	ldr	r1, [r7, #8]
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7ff fe81 	bl	800ff30 <prvTCPWindowTxCheckAck>
 801022e:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8010230:	68fb      	ldr	r3, [r7, #12]
        }
 8010232:	4618      	mov	r0, r3
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
	...

0801023c <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 801023c:	b5b0      	push	{r4, r5, r7, lr}
 801023e:	b088      	sub	sp, #32
 8010240:	af02      	add	r7, sp, #8
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	6a1b      	ldr	r3, [r3, #32]
 801024c:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	68b9      	ldr	r1, [r7, #8]
 8010252:	68f8      	ldr	r0, [r7, #12]
 8010254:	f7ff fe6c 	bl	800ff30 <prvTCPWindowTxCheckAck>
 8010258:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 801025a:	68b9      	ldr	r1, [r7, #8]
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	f7ff ff67 	bl	8010130 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8010262:	4b16      	ldr	r3, [pc, #88]	; (80102bc <ulTCPWindowTxSack+0x80>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	dd23      	ble.n	80102b2 <ulTCPWindowTxSack+0x76>
 801026a:	6979      	ldr	r1, [r7, #20]
 801026c:	68b8      	ldr	r0, [r7, #8]
 801026e:	f7fe fe93 	bl	800ef98 <xSequenceGreaterThan>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d01c      	beq.n	80102b2 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %lu to %lu (ack = %lu)\n",
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 801027e:	461c      	mov	r4, r3
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8010286:	461d      	mov	r5, r3
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	69db      	ldr	r3, [r3, #28]
 801028c:	68ba      	ldr	r2, [r7, #8]
 801028e:	1ad0      	subs	r0, r2, r3
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	69db      	ldr	r3, [r3, #28]
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	1ad3      	subs	r3, r2, r3
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	6a11      	ldr	r1, [r2, #32]
 801029c:	68fa      	ldr	r2, [r7, #12]
 801029e:	69d2      	ldr	r2, [r2, #28]
 80102a0:	1a8a      	subs	r2, r1, r2
 80102a2:	9201      	str	r2, [sp, #4]
 80102a4:	9300      	str	r3, [sp, #0]
 80102a6:	4603      	mov	r3, r0
 80102a8:	462a      	mov	r2, r5
 80102aa:	4621      	mov	r1, r4
 80102ac:	4804      	ldr	r0, [pc, #16]	; (80102c0 <ulTCPWindowTxSack+0x84>)
 80102ae:	f7f0 fbe5 	bl	8000a7c <vLoggingPrintf>
                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                         pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                FreeRTOS_flush_logging();
            }

            return ulAckCount;
 80102b2:	693b      	ldr	r3, [r7, #16]
        }
 80102b4:	4618      	mov	r0, r3
 80102b6:	3718      	adds	r7, #24
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bdb0      	pop	{r4, r5, r7, pc}
 80102bc:	2002660c 	.word	0x2002660c
 80102c0:	080168b4 	.word	0x080168b4

080102c4 <vCastPointerTo_UDPPacket_t>:
    {
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 80102cc:	687b      	ldr	r3, [r7, #4]
    }
 80102ce:	4618      	mov	r0, r3
 80102d0:	370c      	adds	r7, #12
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <vCastConstPointerTo_UDPPacket_t>:
    {
 80102da:	b480      	push	{r7}
 80102dc:	b083      	sub	sp, #12
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 80102e2:	687b      	ldr	r3, [r7, #4]
    }
 80102e4:	4618      	mov	r0, r3
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer: The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b08c      	sub	sp, #48	; 0x30
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	695b      	ldr	r3, [r3, #20]
 80102fc:	60fb      	str	r3, [r7, #12]
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    /* Map the UDP packet onto the start of the frame. */
    pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	699b      	ldr	r3, [r3, #24]
 8010302:	4618      	mov	r0, r3
 8010304:	f7ff ffde 	bl	80102c4 <vCastPointerTo_UDPPacket_t>
 8010308:	6278      	str	r0, [r7, #36]	; 0x24
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	69db      	ldr	r3, [r3, #28]
 801030e:	3b2a      	subs	r3, #42	; 0x2a
 8010310:	623b      	str	r3, [r7, #32]
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 8010312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010314:	f107 030c 	add.w	r3, r7, #12
 8010318:	4611      	mov	r1, r2
 801031a:	4618      	mov	r0, r3
 801031c:	f7f7 fe60 	bl	8007fe0 <eARPGetCacheEntry>
 8010320:	4603      	mov	r3, r0
 8010322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( eReturned != eCantSendPacket )
 8010326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801032a:	2b02      	cmp	r3, #2
 801032c:	d06d      	beq.n	801040a <vProcessGeneratedUDPPacket+0x11a>
    {
        if( eReturned == eARPCacheHit )
 801032e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010332:	2b01      	cmp	r3, #1
 8010334:	d156      	bne.n	80103e4 <vProcessGeneratedUDPPacket+0xf4>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8010336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010338:	330e      	adds	r3, #14
 801033a:	61fb      	str	r3, [r7, #28]
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 801033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033e:	3322      	adds	r3, #34	; 0x22
 8010340:	61bb      	str	r3, [r7, #24]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	8c1a      	ldrh	r2, [r3, #32]
 8010346:	69bb      	ldr	r3, [r7, #24]
 8010348:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8010352:	6a3b      	ldr	r3, [r7, #32]
 8010354:	b29b      	uxth	r3, r3
 8010356:	3308      	adds	r3, #8
 8010358:	b29a      	uxth	r2, r3
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	889b      	ldrh	r3, [r3, #4]
 8010362:	b29b      	uxth	r3, r3
 8010364:	021b      	lsls	r3, r3, #8
 8010366:	b21a      	sxth	r2, r3
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	889b      	ldrh	r3, [r3, #4]
 801036c:	b29b      	uxth	r3, r3
 801036e:	0a1b      	lsrs	r3, r3, #8
 8010370:	b29b      	uxth	r3, r3
 8010372:	b21b      	sxth	r3, r3
 8010374:	4313      	orrs	r3, r2
 8010376:	b21b      	sxth	r3, r3
 8010378:	b29a      	uxth	r2, r3
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801037e:	69bb      	ldr	r3, [r7, #24]
 8010380:	2200      	movs	r2, #0
 8010382:	719a      	strb	r2, [r3, #6]
 8010384:	2200      	movs	r2, #0
 8010386:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = xDefaultPartUDPPacketHeader.ucBytes;
 8010388:	4b33      	ldr	r3, [pc, #204]	; (8010458 <vProcessGeneratedUDPPacket+0x168>)
 801038a:	617b      	str	r3, [r7, #20]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	699b      	ldr	r3, [r3, #24]
 8010390:	3306      	adds	r3, #6
 8010392:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 8010394:	2218      	movs	r2, #24
 8010396:	6979      	ldr	r1, [r7, #20]
 8010398:	6938      	ldr	r0, [r7, #16]
 801039a:	f002 fd3a 	bl	8012e12 <memcpy>
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 801039e:	6a3b      	ldr	r3, [r7, #32]
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	331c      	adds	r3, #28
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	885b      	ldrh	r3, [r3, #2]
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	021b      	lsls	r3, r3, #8
 80103b2:	b21a      	sxth	r2, r3
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	885b      	ldrh	r3, [r3, #2]
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	0a1b      	lsrs	r3, r3, #8
 80103bc:	b29b      	uxth	r3, r3
 80103be:	b21b      	sxth	r3, r3
 80103c0:	4313      	orrs	r3, r2
 80103c2:	b21b      	sxth	r3, r3
 80103c4:	b29a      	uxth	r2, r3
 80103c6:	69fb      	ldr	r3, [r7, #28]
 80103c8:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	695a      	ldr	r2, [r3, #20]
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	611a      	str	r2, [r3, #16]

            #if ( ipconfigUSE_LLMNR == 1 )
                {
                    /* LLMNR messages are typically used on a LAN and they're
                     * not supposed to cross routers */
                    if( pxNetworkBuffer->ulIPAddress == ipLLMNR_IP_ADDR )
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	695b      	ldr	r3, [r3, #20]
 80103d6:	4a21      	ldr	r2, [pc, #132]	; (801045c <vProcessGeneratedUDPPacket+0x16c>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d116      	bne.n	801040a <vProcessGeneratedUDPPacket+0x11a>
                    {
                        pxIPHeader->ucTimeToLive = 0x01;
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	2201      	movs	r2, #1
 80103e0:	721a      	strb	r2, [r3, #8]
 80103e2:	e012      	b.n	801040a <vProcessGeneratedUDPPacket+0x11a>
                        pxUDPPacket->xUDPHeader.usChecksum = 0U;
                    }
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 80103e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d10b      	bne.n	8010404 <vProcessGeneratedUDPPacket+0x114>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress );
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	4619      	mov	r1, r3
 80103f0:	2000      	movs	r0, #0
 80103f2:	f7f7 fcfd 	bl	8007df0 <vARPRefreshCacheEntry>

            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
            pxNetworkBuffer->ulIPAddress = ulIPAddress;
 80103f6:	68fa      	ldr	r2, [r7, #12]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	615a      	str	r2, [r3, #20]
            vARPGenerateRequestPacket( pxNetworkBuffer );
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7f7 ff7f 	bl	8008300 <vARPGenerateRequestPacket>
 8010402:	e002      	b.n	801040a <vProcessGeneratedUDPPacket+0x11a>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8010404:	2302      	movs	r3, #2
 8010406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    if( eReturned != eCantSendPacket )
 801040a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801040e:	2b02      	cmp	r3, #2
 8010410:	d01b      	beq.n	801044a <vProcessGeneratedUDPPacket+0x15a>
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        #if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	69db      	ldr	r3, [r3, #28]
 8010416:	2b3b      	cmp	r3, #59	; 0x3b
 8010418:	d812      	bhi.n	8010440 <vProcessGeneratedUDPPacket+0x150>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	69db      	ldr	r3, [r3, #28]
 801041e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010420:	e008      	b.n	8010434 <vProcessGeneratedUDPPacket+0x144>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	699a      	ldr	r2, [r3, #24]
 8010426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010428:	4413      	add	r3, r2
 801042a:	2200      	movs	r2, #0
 801042c:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801042e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010430:	3301      	adds	r3, #1
 8010432:	62bb      	str	r3, [r7, #40]	; 0x28
 8010434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010436:	2b3b      	cmp	r3, #59	; 0x3b
 8010438:	ddf3      	ble.n	8010422 <vProcessGeneratedUDPPacket+0x132>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	223c      	movs	r2, #60	; 0x3c
 801043e:	61da      	str	r2, [r3, #28]
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8010440:	2101      	movs	r1, #1
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 face 	bl	80109e4 <xNetworkInterfaceOutput>
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8010448:	e002      	b.n	8010450 <vProcessGeneratedUDPPacket+0x160>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f001 fb7c 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
}
 8010450:	bf00      	nop
 8010452:	3730      	adds	r7, #48	; 0x30
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	20016918 	.word	0x20016918
 801045c:	fc0000e0 	.word	0xfc0000e0

08010460 <xProcessReceivedUDPPacket>:
 *
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b086      	sub	sp, #24
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	807b      	strh	r3, [r7, #2]
    BaseType_t xReturn = pdPASS;
 801046c:	2301      	movs	r3, #1
 801046e:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    configASSERT( pxNetworkBuffer != NULL );
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d104      	bne.n	8010480 <xProcessReceivedUDPPacket+0x20>
 8010476:	4945      	ldr	r1, [pc, #276]	; (801058c <xProcessReceivedUDPPacket+0x12c>)
 8010478:	f44f 7092 	mov.w	r0, #292	; 0x124
 801047c:	f7f0 fb27 	bl	8000ace <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	699b      	ldr	r3, [r3, #24]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d104      	bne.n	8010492 <xProcessReceivedUDPPacket+0x32>
 8010488:	4940      	ldr	r1, [pc, #256]	; (801058c <xProcessReceivedUDPPacket+0x12c>)
 801048a:	f240 1025 	movw	r0, #293	; 0x125
 801048e:	f7f0 fb1e 	bl	8000ace <vAssertCalled>

    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
    const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	699b      	ldr	r3, [r3, #24]
 8010496:	4618      	mov	r0, r3
 8010498:	f7ff ff1f 	bl	80102da <vCastConstPointerTo_UDPPacket_t>
 801049c:	6138      	str	r0, [r7, #16]

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 801049e:	887b      	ldrh	r3, [r7, #2]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7fa fdbd 	bl	800b020 <pxUDPSocketLookup>
 80104a6:	60f8      	str	r0, [r7, #12]

    if( pxSocket != NULL )
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d033      	beq.n	8010516 <xProcessReceivedUDPPacket+0xb6>
    {
        /* When refreshing the ARP cache with received UDP packets we must be
         * careful;  hundreds of broadcast messages may pass and if we're not
         * handling them, no use to fill the ARP cache with those IP addresses. */
        vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	1d9a      	adds	r2, r3, #6
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80104b8:	4619      	mov	r1, r3
 80104ba:	4610      	mov	r0, r2
 80104bc:	f7f7 fc98 	bl	8007df0 <vARPRefreshCacheEntry>
            if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
        #else
            /* xReturn is still pdPASS. */
        #endif
        {
            vTaskSuspendAll();
 80104c0:	f7f5 fd86 	bl	8005fd0 <vTaskSuspendAll>
            {
                taskENTER_CRITICAL();
 80104c4:	f7f7 fae8 	bl	8007a98 <vPortEnterCritical>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	3338      	adds	r3, #56	; 0x38
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	4611      	mov	r1, r2
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7f4 fc5e 	bl	8004d92 <vListInsertEnd>
                }
                taskEXIT_CRITICAL();
 80104d6:	f7f7 fb0b 	bl	8007af0 <vPortExitCritical>
            }
            ( void ) xTaskResumeAll();
 80104da:	f7f5 fd87 	bl	8005fec <xTaskResumeAll>

            /* Set the socket's receive event */
            if( pxSocket->xEventGroup != NULL )
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d005      	beq.n	80104f2 <xProcessReceivedUDPPacket+0x92>
            {
                ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	2101      	movs	r1, #1
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7f4 fb51 	bl	8004b94 <xEventGroupSetBits>
            }

            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d043      	beq.n	8010582 <xProcessReceivedUDPPacket+0x122>
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	2b00      	cmp	r3, #0
 8010504:	d03d      	beq.n	8010582 <xProcessReceivedUDPPacket+0x122>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	2101      	movs	r1, #1
 801050e:	4618      	mov	r0, r3
 8010510:	f7f4 fb40 	bl	8004b94 <xEventGroupSetBits>
 8010514:	e035      	b.n	8010582 <xProcessReceivedUDPPacket+0x122>
            else
        #endif

        #if ( ipconfigUSE_LLMNR == 1 )
            /* A LLMNR request, check for the destination port. */
            if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8010516:	887b      	ldrh	r3, [r7, #2]
 8010518:	f64e 3214 	movw	r2, #60180	; 0xeb14
 801051c:	4293      	cmp	r3, r2
 801051e:	d006      	beq.n	801052e <xProcessReceivedUDPPacket+0xce>
                ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010524:	b29b      	uxth	r3, r3
            if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8010526:	f64e 3214 	movw	r2, #60180	; 0xeb14
 801052a:	4293      	cmp	r3, r2
 801052c:	d10e      	bne.n	801054c <xProcessReceivedUDPPacket+0xec>
            {
                vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	1d9a      	adds	r2, r3, #6
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8010538:	4619      	mov	r1, r3
 801053a:	4610      	mov	r0, r2
 801053c:	f7f7 fc58 	bl	8007df0 <vARPRefreshCacheEntry>
                xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7f8 f874 	bl	800862e <ulDNSHandlePacket>
 8010546:	4603      	mov	r3, r0
 8010548:	617b      	str	r3, [r7, #20]
 801054a:	e01a      	b.n	8010582 <xProcessReceivedUDPPacket+0x122>
            else
        #endif /* ipconfigUSE_LLMNR */

        #if ( ipconfigUSE_NBNS == 1 )
            /* a NetBIOS request, check for the destination port */
            if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
 801054c:	887b      	ldrh	r3, [r7, #2]
 801054e:	f5b3 4f09 	cmp.w	r3, #35072	; 0x8900
 8010552:	d005      	beq.n	8010560 <xProcessReceivedUDPPacket+0x100>
                ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipNBNS_PORT ) ) )
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010558:	b29b      	uxth	r3, r3
            if( ( usPort == FreeRTOS_ntohs( ipNBNS_PORT ) ) ||
 801055a:	f5b3 4f09 	cmp.w	r3, #35072	; 0x8900
 801055e:	d10e      	bne.n	801057e <xProcessReceivedUDPPacket+0x11e>
            {
                vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	1d9a      	adds	r2, r3, #6
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	f8d3 301a 	ldr.w	r3, [r3, #26]
 801056a:	4619      	mov	r1, r3
 801056c:	4610      	mov	r0, r2
 801056e:	f7f7 fc3f 	bl	8007df0 <vARPRefreshCacheEntry>
                xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7f8 f878 	bl	8008668 <ulNBNSHandlePacket>
 8010578:	4603      	mov	r3, r0
 801057a:	617b      	str	r3, [r7, #20]
 801057c:	e001      	b.n	8010582 <xProcessReceivedUDPPacket+0x122>
            }
            else
        #endif /* ipconfigUSE_NBNS */
        {
            xReturn = pdFAIL;
 801057e:	2300      	movs	r3, #0
 8010580:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8010582:	697b      	ldr	r3, [r7, #20]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3718      	adds	r7, #24
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	080168ec 	.word	0x080168ec

08010590 <HAL_ETH_RxCpltCallback>:
};

/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8010598:	2300      	movs	r3, #0
 801059a:	60fb      	str	r3, [r7, #12]

    ( void ) heth;

    /* Ethernet RX-Complete callback function, elsewhere declared as weak. */
    ulISREvents |= EMAC_IF_RX_EVENT;
 801059c:	4b10      	ldr	r3, [pc, #64]	; (80105e0 <HAL_ETH_RxCpltCallback+0x50>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f043 0301 	orr.w	r3, r3, #1
 80105a4:	4a0e      	ldr	r2, [pc, #56]	; (80105e0 <HAL_ETH_RxCpltCallback+0x50>)
 80105a6:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 80105a8:	4b0e      	ldr	r3, [pc, #56]	; (80105e4 <HAL_ETH_RxCpltCallback+0x54>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d012      	beq.n	80105d6 <HAL_ETH_RxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 80105b0:	4b0c      	ldr	r3, [pc, #48]	; (80105e4 <HAL_ETH_RxCpltCallback+0x54>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f107 020c 	add.w	r2, r7, #12
 80105b8:	2100      	movs	r1, #0
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7f6 fb7c 	bl	8006cb8 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d007      	beq.n	80105d6 <HAL_ETH_RxCpltCallback+0x46>
 80105c6:	4b08      	ldr	r3, [pc, #32]	; (80105e8 <HAL_ETH_RxCpltCallback+0x58>)
 80105c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105cc:	601a      	str	r2, [r3, #0]
 80105ce:	f3bf 8f4f 	dsb	sy
 80105d2:	f3bf 8f6f 	isb	sy
    }
}
 80105d6:	bf00      	nop
 80105d8:	3710      	adds	r7, #16
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	20026614 	.word	0x20026614
 80105e4:	200266a8 	.word	0x200266a8
 80105e8:	e000ed04 	.word	0xe000ed04

080105ec <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80105f4:	2300      	movs	r3, #0
 80105f6:	60fb      	str	r3, [r7, #12]
    ( void ) heth;

    /* This call-back is only useful in case packets are being sent
     * zero-copy.  Once they're sent, the buffers will be released
     * by the function vClearTXBuffers(). */
    ulISREvents |= EMAC_IF_TX_EVENT;
 80105f8:	4b10      	ldr	r3, [pc, #64]	; (801063c <HAL_ETH_TxCpltCallback+0x50>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f043 0302 	orr.w	r3, r3, #2
 8010600:	4a0e      	ldr	r2, [pc, #56]	; (801063c <HAL_ETH_TxCpltCallback+0x50>)
 8010602:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8010604:	4b0e      	ldr	r3, [pc, #56]	; (8010640 <HAL_ETH_TxCpltCallback+0x54>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d012      	beq.n	8010632 <HAL_ETH_TxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 801060c:	4b0c      	ldr	r3, [pc, #48]	; (8010640 <HAL_ETH_TxCpltCallback+0x54>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f107 020c 	add.w	r2, r7, #12
 8010614:	2100      	movs	r1, #0
 8010616:	4618      	mov	r0, r3
 8010618:	f7f6 fb4e 	bl	8006cb8 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d007      	beq.n	8010632 <HAL_ETH_TxCpltCallback+0x46>
 8010622:	4b08      	ldr	r3, [pc, #32]	; (8010644 <HAL_ETH_TxCpltCallback+0x58>)
 8010624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	f3bf 8f6f 	isb	sy
    }
}
 8010632:	bf00      	nop
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	20026614 	.word	0x20026614
 8010640:	200266a8 	.word	0x200266a8
 8010644:	e000ed04 	.word	0xe000ed04

08010648 <vClearTXBuffers>:
/*-----------------------------------------------------------*/

static void vClearTXBuffers()
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
    __IO ETH_DMADescTypeDef * txLastDescriptor = xETH.TxDesc;
 801064e:	4b24      	ldr	r3, [pc, #144]	; (80106e0 <vClearTXBuffers+0x98>)
 8010650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010652:	60bb      	str	r3, [r7, #8]
    size_t uxCount = ( ( UBaseType_t ) ETH_TXBUFNB ) - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8010654:	4b23      	ldr	r3, [pc, #140]	; (80106e4 <vClearTXBuffers+0x9c>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4618      	mov	r0, r3
 801065a:	f7f5 f891 	bl	8005780 <uxQueueMessagesWaiting>
 801065e:	4603      	mov	r3, r0
 8010660:	f1c3 0304 	rsb	r3, r3, #4
 8010664:	60fb      	str	r3, [r7, #12]

    /* This function is called after a TX-completion interrupt.
     * It will release each Network Buffer used in xNetworkInterfaceOutput().
     * 'uxCount' represents the number of descriptors given to DMA for transmission.
     * After sending a packet, the DMA will clear the 'ETH_DMATXDESC_OWN' bit. */
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 8010666:	e02c      	b.n	80106c2 <vClearTXBuffers+0x7a>
    {
        if( ( DMATxDescToClear == txLastDescriptor ) && ( uxCount != ETH_TXBUFNB ) )
 8010668:	4b1f      	ldr	r3, [pc, #124]	; (80106e8 <vClearTXBuffers+0xa0>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	68ba      	ldr	r2, [r7, #8]
 801066e:	429a      	cmp	r2, r3
 8010670:	d102      	bne.n	8010678 <vClearTXBuffers+0x30>
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2b04      	cmp	r3, #4
 8010676:	d12d      	bne.n	80106d4 <vClearTXBuffers+0x8c>
            break;
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                ucPayLoad = ( uint8_t * ) DMATxDescToClear->Buffer1Addr;
 8010678:	4b1b      	ldr	r3, [pc, #108]	; (80106e8 <vClearTXBuffers+0xa0>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	689b      	ldr	r3, [r3, #8]
 801067e:	607b      	str	r3, [r7, #4]

                if( ucPayLoad != NULL )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00d      	beq.n	80106a2 <vClearTXBuffers+0x5a>
                {
                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7f9 f926 	bl	80098d8 <pxPacketBuffer_to_NetworkBuffer>
 801068c:	6038      	str	r0, [r7, #0]

                    if( pxNetworkBuffer != NULL )
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d002      	beq.n	801069a <vClearTXBuffers+0x52>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8010694:	6838      	ldr	r0, [r7, #0]
 8010696:	f001 fa57 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
                    }

                    DMATxDescToClear->Buffer1Addr = ( uint32_t ) 0u;
 801069a:	4b13      	ldr	r3, [pc, #76]	; (80106e8 <vClearTXBuffers+0xa0>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2200      	movs	r2, #0
 80106a0:	609a      	str	r2, [r3, #8]
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        DMATxDescToClear = ( ETH_DMADescTypeDef * ) ( DMATxDescToClear->Buffer2NextDescAddr );
 80106a2:	4b11      	ldr	r3, [pc, #68]	; (80106e8 <vClearTXBuffers+0xa0>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	461a      	mov	r2, r3
 80106aa:	4b0f      	ldr	r3, [pc, #60]	; (80106e8 <vClearTXBuffers+0xa0>)
 80106ac:	601a      	str	r2, [r3, #0]

        uxCount--;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	3b01      	subs	r3, #1
 80106b2:	60fb      	str	r3, [r7, #12]
        /* Tell the counting semaphore that one more TX descriptor is available. */
        xSemaphoreGive( xTXDescriptorSemaphore );
 80106b4:	4b0b      	ldr	r3, [pc, #44]	; (80106e4 <vClearTXBuffers+0x9c>)
 80106b6:	6818      	ldr	r0, [r3, #0]
 80106b8:	2300      	movs	r3, #0
 80106ba:	2200      	movs	r2, #0
 80106bc:	2100      	movs	r1, #0
 80106be:	f7f4 fce9 	bl	8005094 <xQueueGenericSend>
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d006      	beq.n	80106d6 <vClearTXBuffers+0x8e>
 80106c8:	4b07      	ldr	r3, [pc, #28]	; (80106e8 <vClearTXBuffers+0xa0>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	daca      	bge.n	8010668 <vClearTXBuffers+0x20>
    }
}
 80106d2:	e000      	b.n	80106d6 <vClearTXBuffers+0x8e>
            break;
 80106d4:	bf00      	nop
}
 80106d6:	bf00      	nop
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	20026658 	.word	0x20026658
 80106e4:	200266a0 	.word	0x200266a0
 80106e8:	200266a4 	.word	0x200266a4

080106ec <xNetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceInitialise( void )
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef hal_eth_init_status;
    BaseType_t xResult;

    if( xMacInitStatus == eMACInit )
 80106f2:	4b49      	ldr	r3, [pc, #292]	; (8010818 <xNetworkInterfaceInitialise+0x12c>)
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d167      	bne.n	80107ca <xNetworkInterfaceInitialise+0xde>
    {
        xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TXBUFNB, ( UBaseType_t ) ETH_TXBUFNB );
 80106fa:	2104      	movs	r1, #4
 80106fc:	2004      	movs	r0, #4
 80106fe:	f7f4 fc9f 	bl	8005040 <xQueueCreateCountingSemaphore>
 8010702:	4602      	mov	r2, r0
 8010704:	4b45      	ldr	r3, [pc, #276]	; (801081c <xNetworkInterfaceInitialise+0x130>)
 8010706:	601a      	str	r2, [r3, #0]

        if( xTXDescriptorSemaphore == NULL )
 8010708:	4b44      	ldr	r3, [pc, #272]	; (801081c <xNetworkInterfaceInitialise+0x130>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d103      	bne.n	8010718 <xNetworkInterfaceInitialise+0x2c>
        {
            xMacInitStatus = eMACFailed;
 8010710:	4b41      	ldr	r3, [pc, #260]	; (8010818 <xNetworkInterfaceInitialise+0x12c>)
 8010712:	2202      	movs	r2, #2
 8010714:	701a      	strb	r2, [r3, #0]
 8010716:	e058      	b.n	80107ca <xNetworkInterfaceInitialise+0xde>
        }
        else
        {
            /* Initialise ETH */

            xETH.Instance = ETH;
 8010718:	4b41      	ldr	r3, [pc, #260]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 801071a:	4a42      	ldr	r2, [pc, #264]	; (8010824 <xNetworkInterfaceInitialise+0x138>)
 801071c:	601a      	str	r2, [r3, #0]
            xETH.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801071e:	4b40      	ldr	r3, [pc, #256]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 8010720:	2201      	movs	r2, #1
 8010722:	605a      	str	r2, [r3, #4]
            xETH.Init.Speed = ETH_SPEED_100M;
 8010724:	4b3e      	ldr	r3, [pc, #248]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 8010726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801072a:	609a      	str	r2, [r3, #8]
            xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801072c:	4b3c      	ldr	r3, [pc, #240]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 801072e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010732:	60da      	str	r2, [r3, #12]
            /* Value of PhyAddress doesn't matter, will be probed for. */
            xETH.Init.PhyAddress = 0;
 8010734:	4b3a      	ldr	r3, [pc, #232]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 8010736:	2200      	movs	r2, #0
 8010738:	821a      	strh	r2, [r3, #16]

            xETH.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 801073a:	f7f9 fe5d 	bl	800a3f8 <FreeRTOS_GetMACAddress>
 801073e:	4602      	mov	r2, r0
 8010740:	4b37      	ldr	r3, [pc, #220]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 8010742:	615a      	str	r2, [r3, #20]
            xETH.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8010744:	4b36      	ldr	r3, [pc, #216]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 8010746:	2201      	movs	r2, #1
 8010748:	619a      	str	r2, [r3, #24]
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
                {
                    /* using the ETH_CHECKSUM_BY_HARDWARE option:
                     * both the IP and the protocol checksums will be calculated
                     * by the peripheral. */
                    xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801074a:	4b35      	ldr	r3, [pc, #212]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 801074c:	2200      	movs	r2, #0
 801074e:	61da      	str	r2, [r3, #28]
                }
            #endif

            #if ( ipconfigUSE_RMII != 0 )
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8010750:	4b33      	ldr	r3, [pc, #204]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 8010752:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8010756:	621a      	str	r2, [r3, #32]
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
                }
            #endif /* ipconfigUSE_RMII */

            hal_eth_init_status = HAL_ETH_Init( &xETH );
 8010758:	4831      	ldr	r0, [pc, #196]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 801075a:	f7f3 fb27 	bl	8003dac <HAL_ETH_Init>
 801075e:	4603      	mov	r3, r0
 8010760:	70fb      	strb	r3, [r7, #3]

            /* Only for inspection by debugger. */
            ( void ) hal_eth_init_status;

            /* Set the TxDesc and RxDesc pointers. */
            xETH.TxDesc = DMATxDscrTab;
 8010762:	4b2f      	ldr	r3, [pc, #188]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 8010764:	4a30      	ldr	r2, [pc, #192]	; (8010828 <xNetworkInterfaceInitialise+0x13c>)
 8010766:	62da      	str	r2, [r3, #44]	; 0x2c
            xETH.RxDesc = DMARxDscrTab;
 8010768:	4b2d      	ldr	r3, [pc, #180]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 801076a:	4a30      	ldr	r2, [pc, #192]	; (801082c <xNetworkInterfaceInitialise+0x140>)
 801076c:	629a      	str	r2, [r3, #40]	; 0x28

            /* Make sure that all unused fields are cleared. */
            memset( &DMATxDscrTab, '\0', sizeof( DMATxDscrTab ) );
 801076e:	2280      	movs	r2, #128	; 0x80
 8010770:	2100      	movs	r1, #0
 8010772:	482d      	ldr	r0, [pc, #180]	; (8010828 <xNetworkInterfaceInitialise+0x13c>)
 8010774:	f002 fb71 	bl	8012e5a <memset>
            memset( &DMARxDscrTab, '\0', sizeof( DMARxDscrTab ) );
 8010778:	2280      	movs	r2, #128	; 0x80
 801077a:	2100      	movs	r1, #0
 801077c:	482b      	ldr	r0, [pc, #172]	; (801082c <xNetworkInterfaceInitialise+0x140>)
 801077e:	f002 fb6c 	bl	8012e5a <memset>

            /* Initialize Tx Descriptors list: Chain Mode */
            DMATxDescToClear = DMATxDscrTab;
 8010782:	4b2b      	ldr	r3, [pc, #172]	; (8010830 <xNetworkInterfaceInitialise+0x144>)
 8010784:	4a28      	ldr	r2, [pc, #160]	; (8010828 <xNetworkInterfaceInitialise+0x13c>)
 8010786:	601a      	str	r2, [r3, #0]

            /* Initialise TX-descriptors. */
            prvDMATxDescListInit();
 8010788:	f000 f862 	bl	8010850 <prvDMATxDescListInit>

            /* Initialise RX-descriptors. */
            prvDMARxDescListInit();
 801078c:	f000 f8a4 	bl	80108d8 <prvDMARxDescListInit>

            #if ( ipconfigUSE_LLMNR != 0 )
                {
                    /* Program the LLMNR address at index 1. */
                    prvMACAddressConfig( &xETH, ETH_MAC_ADDRESS1, ( uint8_t * ) xLLMNR_MACAddress );
 8010790:	4a28      	ldr	r2, [pc, #160]	; (8010834 <xNetworkInterfaceInitialise+0x148>)
 8010792:	2108      	movs	r1, #8
 8010794:	4822      	ldr	r0, [pc, #136]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 8010796:	f000 f8eb 	bl	8010970 <prvMACAddressConfig>
                }
            #endif

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 801079a:	2001      	movs	r0, #1
 801079c:	f000 fb08 	bl	8010db0 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             * possible priority to ensure the interrupt handler can return directly
             * to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             * notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &xEMACTaskHandle ) == pdPASS )
 80107a0:	4b25      	ldr	r3, [pc, #148]	; (8010838 <xNetworkInterfaceInitialise+0x14c>)
 80107a2:	9301      	str	r3, [sp, #4]
 80107a4:	2304      	movs	r3, #4
 80107a6:	9300      	str	r3, [sp, #0]
 80107a8:	2300      	movs	r3, #0
 80107aa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80107ae:	4923      	ldr	r1, [pc, #140]	; (801083c <xNetworkInterfaceInitialise+0x150>)
 80107b0:	4823      	ldr	r0, [pc, #140]	; (8010840 <xNetworkInterfaceInitialise+0x154>)
 80107b2:	f7f5 fa2d 	bl	8005c10 <xTaskCreate>
 80107b6:	4603      	mov	r3, r0
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d103      	bne.n	80107c4 <xNetworkInterfaceInitialise+0xd8>
            {
                /* The xTXDescriptorSemaphore and the task are created successfully. */
                xMacInitStatus = eMACPass;
 80107bc:	4b16      	ldr	r3, [pc, #88]	; (8010818 <xNetworkInterfaceInitialise+0x12c>)
 80107be:	2201      	movs	r2, #1
 80107c0:	701a      	strb	r2, [r3, #0]
 80107c2:	e002      	b.n	80107ca <xNetworkInterfaceInitialise+0xde>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 80107c4:	4b14      	ldr	r3, [pc, #80]	; (8010818 <xNetworkInterfaceInitialise+0x12c>)
 80107c6:	2202      	movs	r2, #2
 80107c8:	701a      	strb	r2, [r3, #0]
            }
        }
    } /* if( xEMACTaskHandle == NULL ) */

    if( xMacInitStatus != eMACPass )
 80107ca:	4b13      	ldr	r3, [pc, #76]	; (8010818 <xNetworkInterfaceInitialise+0x12c>)
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d002      	beq.n	80107d8 <xNetworkInterfaceInitialise+0xec>
    {
        /* EMAC initialisation failed, return pdFAIL. */
        xResult = pdFAIL;
 80107d2:	2300      	movs	r3, #0
 80107d4:	607b      	str	r3, [r7, #4]
 80107d6:	e019      	b.n	801080c <xNetworkInterfaceInitialise+0x120>
    }
    else
    {
        if( xPhyObject.ulLinkStatusMask != 0uL )
 80107d8:	4b1a      	ldr	r3, [pc, #104]	; (8010844 <xNetworkInterfaceInitialise+0x158>)
 80107da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d013      	beq.n	8010808 <xNetworkInterfaceInitialise+0x11c>
        {
            xETH.Instance->DMAIER |= ETH_DMA_ALL_INTS;
 80107e0:	4b0f      	ldr	r3, [pc, #60]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 80107e2:	681a      	ldr	r2, [r3, #0]
 80107e4:	f241 031c 	movw	r3, #4124	; 0x101c
 80107e8:	4413      	add	r3, r2
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4a0c      	ldr	r2, [pc, #48]	; (8010820 <xNetworkInterfaceInitialise+0x134>)
 80107ee:	6811      	ldr	r1, [r2, #0]
 80107f0:	4a15      	ldr	r2, [pc, #84]	; (8010848 <xNetworkInterfaceInitialise+0x15c>)
 80107f2:	431a      	orrs	r2, r3
 80107f4:	f241 031c 	movw	r3, #4124	; 0x101c
 80107f8:	440b      	add	r3, r1
 80107fa:	601a      	str	r2, [r3, #0]
            xResult = pdPASS;
 80107fc:	2301      	movs	r3, #1
 80107fe:	607b      	str	r3, [r7, #4]
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8010800:	4812      	ldr	r0, [pc, #72]	; (801084c <xNetworkInterfaceInitialise+0x160>)
 8010802:	f7f0 f93b 	bl	8000a7c <vLoggingPrintf>
 8010806:	e001      	b.n	801080c <xNetworkInterfaceInitialise+0x120>
        }
        else
        {
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
            xResult = pdFAIL;
 8010808:	2300      	movs	r3, #0
 801080a:	607b      	str	r3, [r7, #4]
        }
    }

    /* When returning non-zero, the stack will become active and
     * start DHCP (in configured) */
    return xResult;
 801080c:	687b      	ldr	r3, [r7, #4]
}
 801080e:	4618      	mov	r0, r3
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	20026610 	.word	0x20026610
 801081c:	200266a0 	.word	0x200266a0
 8010820:	20026658 	.word	0x20026658
 8010824:	40028000 	.word	0x40028000
 8010828:	20000080 	.word	0x20000080
 801082c:	20000000 	.word	0x20000000
 8010830:	200266a4 	.word	0x200266a4
 8010834:	08016c88 	.word	0x08016c88
 8010838:	200266a8 	.word	0x200266a8
 801083c:	08016920 	.word	0x08016920
 8010840:	08010ea5 	.word	0x08010ea5
 8010844:	20026618 	.word	0x20026618
 8010848:	380163fb 	.word	0x380163fb
 801084c:	08016928 	.word	0x08016928

08010850 <prvDMATxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMATxDescListInit()
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
    ETH_DMADescTypeDef * pxDMADescriptor;
    BaseType_t xIndex;

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMATxDscrTab;
 8010856:	4b1e      	ldr	r3, [pc, #120]	; (80108d0 <prvDMATxDescListInit+0x80>)
 8010858:	607b      	str	r3, [r7, #4]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 801085a:	2300      	movs	r3, #0
 801085c:	603b      	str	r3, [r7, #0]
 801085e:	e026      	b.n	80108ae <prvDMATxDescListInit+0x5e>
    {
        /* Set Second Address Chained bit */
        pxDMADescriptor->Status = ETH_DMATXDESC_TCH;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010866:	601a      	str	r2, [r3, #0]
                /* Set Buffer1 address pointer */
                pxDMADescriptor->Buffer1Addr = ( uint32_t ) ( Tx_Buff[ xIndex ] );
            }
        #endif

        if( xETH.Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 8010868:	4b1a      	ldr	r3, [pc, #104]	; (80108d4 <prvDMATxDescListInit+0x84>)
 801086a:	69db      	ldr	r3, [r3, #28]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d106      	bne.n	801087e <prvDMATxDescListInit+0x2e>
        {
            /* Set the DMA Tx descriptors checksum insertion for TCP, UDP, and ICMP */
            pxDMADescriptor->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	601a      	str	r2, [r3, #0]
 801087c:	e005      	b.n	801088a <prvDMATxDescListInit+0x3a>
        }
        else
        {
            pxDMADescriptor->Status &= ~( ( uint32_t ) ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL );
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	601a      	str	r2, [r3, #0]
        }

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_TXBUFNB - 1 )
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	2b02      	cmp	r3, #2
 801088e:	d805      	bhi.n	801089c <prvDMATxDescListInit+0x4c>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	3320      	adds	r3, #32
 8010894:	461a      	mov	r2, r3
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	60da      	str	r2, [r3, #12]
 801089a:	e002      	b.n	80108a2 <prvDMATxDescListInit+0x52>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMATxDscrTab;
 801089c:	4a0c      	ldr	r2, [pc, #48]	; (80108d0 <prvDMATxDescListInit+0x80>)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	3301      	adds	r3, #1
 80108a6:	603b      	str	r3, [r7, #0]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	3320      	adds	r3, #32
 80108ac:	607b      	str	r3, [r7, #4]
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	2b03      	cmp	r3, #3
 80108b2:	d9d5      	bls.n	8010860 <prvDMATxDescListInit+0x10>
        }
    }

    /* Set Transmit Descriptor List Address Register */
    xETH.Instance->DMATDLAR = ( uint32_t ) DMATxDscrTab;
 80108b4:	4b07      	ldr	r3, [pc, #28]	; (80108d4 <prvDMATxDescListInit+0x84>)
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	4905      	ldr	r1, [pc, #20]	; (80108d0 <prvDMATxDescListInit+0x80>)
 80108ba:	f241 0310 	movw	r3, #4112	; 0x1010
 80108be:	4413      	add	r3, r2
 80108c0:	6019      	str	r1, [r3, #0]
}
 80108c2:	bf00      	nop
 80108c4:	370c      	adds	r7, #12
 80108c6:	46bd      	mov	sp, r7
 80108c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	20000080 	.word	0x20000080
 80108d4:	20026658 	.word	0x20026658

080108d8 <prvDMARxDescListInit>:
/*-----------------------------------------------------------*/

static void prvDMARxDescListInit()
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
    /*
     * RX-descriptors.
     */

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMARxDscrTab;
 80108de:	4b21      	ldr	r3, [pc, #132]	; (8010964 <prvDMARxDescListInit+0x8c>)
 80108e0:	60fb      	str	r3, [r7, #12]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 80108e2:	2300      	movs	r3, #0
 80108e4:	60bb      	str	r3, [r7, #8]
 80108e6:	e02f      	b.n	8010948 <prvDMARxDescListInit+0x70>
    {
        /* Set Buffer1 size and Second Address Chained bit */
        pxDMADescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80108ee:	605a      	str	r2, [r3, #4]
        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Set Buffer1 address pointer */
                NetworkBufferDescriptor_t * pxBuffer;

                pxBuffer = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, 100ul );
 80108f0:	2164      	movs	r1, #100	; 0x64
 80108f2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80108f6:	f001 f8ad 	bl	8011a54 <pxGetNetworkBufferWithDescriptor>
 80108fa:	6078      	str	r0, [r7, #4]

                /* If the assert below fails, make sure that there are at least 'ETH_RXBUFNB'
                 * Network Buffers available during start-up ( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) */
                configASSERT( pxBuffer != NULL );
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d104      	bne.n	801090c <prvDMARxDescListInit+0x34>
 8010902:	4919      	ldr	r1, [pc, #100]	; (8010968 <prvDMARxDescListInit+0x90>)
 8010904:	f240 2055 	movw	r0, #597	; 0x255
 8010908:	f7f0 f8e1 	bl	8000ace <vAssertCalled>

                if( pxBuffer != NULL )
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d008      	beq.n	8010924 <prvDMARxDescListInit+0x4c>
                {
                    pxDMADescriptor->Buffer1Addr = ( uint32_t ) pxBuffer->pucEthernetBuffer;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	699b      	ldr	r3, [r3, #24]
 8010916:	461a      	mov	r2, r3
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	609a      	str	r2, [r3, #8]
                    pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010922:	601a      	str	r2, [r3, #0]
                pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_RXBUFNB - 1 )
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	2b02      	cmp	r3, #2
 8010928:	d805      	bhi.n	8010936 <prvDMARxDescListInit+0x5e>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	3320      	adds	r3, #32
 801092e:	461a      	mov	r2, r3
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	60da      	str	r2, [r3, #12]
 8010934:	e002      	b.n	801093c <prvDMARxDescListInit+0x64>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMARxDscrTab;
 8010936:	4a0b      	ldr	r2, [pc, #44]	; (8010964 <prvDMARxDescListInit+0x8c>)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	3301      	adds	r3, #1
 8010940:	60bb      	str	r3, [r7, #8]
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	3320      	adds	r3, #32
 8010946:	60fb      	str	r3, [r7, #12]
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	2b03      	cmp	r3, #3
 801094c:	d9cc      	bls.n	80108e8 <prvDMARxDescListInit+0x10>
        }
    }

    /* Set Receive Descriptor List Address Register */
    xETH.Instance->DMARDLAR = ( uint32_t ) DMARxDscrTab;
 801094e:	4b07      	ldr	r3, [pc, #28]	; (801096c <prvDMARxDescListInit+0x94>)
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	4904      	ldr	r1, [pc, #16]	; (8010964 <prvDMARxDescListInit+0x8c>)
 8010954:	f241 030c 	movw	r3, #4108	; 0x100c
 8010958:	4413      	add	r3, r2
 801095a:	6019      	str	r1, [r3, #0]
}
 801095c:	bf00      	nop
 801095e:	3710      	adds	r7, #16
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}
 8010964:	20000000 	.word	0x20000000
 8010968:	08016940 	.word	0x08016940
 801096c:	20026658 	.word	0x20026658

08010970 <prvMACAddressConfig>:
/*-----------------------------------------------------------*/

static void prvMACAddressConfig( ETH_HandleTypeDef * heth,
                                 uint32_t ulIndex,
                                 uint8_t * Addr )
{
 8010970:	b480      	push	{r7}
 8010972:	b087      	sub	sp, #28
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	607a      	str	r2, [r7, #4]
    uint32_t ulTempReg;

    ( void ) heth;

    /* Calculate the selected MAC address high register. */
    ulTempReg = 0x80000000ul | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	3305      	adds	r3, #5
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	021b      	lsls	r3, r3, #8
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	3204      	adds	r2, #4
 8010988:	7812      	ldrb	r2, [r2, #0]
 801098a:	4313      	orrs	r3, r2
 801098c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010990:	617b      	str	r3, [r7, #20]

    /* Load the selected MAC address high register. */
    ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + ulIndex ) ) ) = ulTempReg;
 8010992:	68ba      	ldr	r2, [r7, #8]
 8010994:	4b11      	ldr	r3, [pc, #68]	; (80109dc <prvMACAddressConfig+0x6c>)
 8010996:	4413      	add	r3, r2
 8010998:	461a      	mov	r2, r3
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	6013      	str	r3, [r2, #0]

    /* Calculate the selected MAC address low register. */
    ulTempReg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) Addr[ 1 ] << 8 ) | Addr[ 0 ];
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	3303      	adds	r3, #3
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	061a      	lsls	r2, r3, #24
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	3302      	adds	r3, #2
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	041b      	lsls	r3, r3, #16
 80109ae:	431a      	orrs	r2, r3
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	3301      	adds	r3, #1
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	021b      	lsls	r3, r3, #8
 80109b8:	4313      	orrs	r3, r2
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	7812      	ldrb	r2, [r2, #0]
 80109be:	4313      	orrs	r3, r2
 80109c0:	617b      	str	r3, [r7, #20]

    /* Load the selected MAC address low register */
    ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + ulIndex ) ) ) = ulTempReg;
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	4b06      	ldr	r3, [pc, #24]	; (80109e0 <prvMACAddressConfig+0x70>)
 80109c6:	4413      	add	r3, r2
 80109c8:	461a      	mov	r2, r3
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	6013      	str	r3, [r2, #0]
}
 80109ce:	bf00      	nop
 80109d0:	371c      	adds	r7, #28
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	40028040 	.word	0x40028040
 80109e0:	40028044 	.word	0x40028044

080109e4 <xNetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor,
                                    BaseType_t bReleaseAfterSend )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b088      	sub	sp, #32
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 80109ee:	2300      	movs	r3, #0
 80109f0:	61fb      	str	r3, [r7, #28]
    uint32_t ulTransmitSize = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDmaTxDesc;
/* Do not wait too long for a free TX DMA buffer. */
    const TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 50u );
 80109f6:	2332      	movs	r3, #50	; 0x32
 80109f8:	617b      	str	r3, [r7, #20]
            {
                ProtocolPacket_t * pxPacket;

                /* If the peripheral must calculate the checksum, it wants
                 * the protocol checksum to have a value of zero. */
                pxPacket = ( ProtocolPacket_t * ) ( pxDescriptor->pucEthernetBuffer );
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	699b      	ldr	r3, [r3, #24]
 80109fe:	613b      	str	r3, [r7, #16]

                if( pxPacket->xICMPPacket.xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP )
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	7ddb      	ldrb	r3, [r3, #23]
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	d106      	bne.n	8010a16 <xNetworkInterfaceOutput+0x32>
                {
                    pxPacket->xICMPPacket.xICMPHeader.usChecksum = ( uint16_t ) 0u;
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010a10:	2200      	movs	r2, #0
 8010a12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
            }
        #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM */

        if( xPhyObject.ulLinkStatusMask != 0 )
 8010a16:	4b33      	ldr	r3, [pc, #204]	; (8010ae4 <xNetworkInterfaceOutput+0x100>)
 8010a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d057      	beq.n	8010ace <xNetworkInterfaceOutput+0xea>
        {
            if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8010a1e:	4b32      	ldr	r3, [pc, #200]	; (8010ae8 <xNetworkInterfaceOutput+0x104>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	6979      	ldr	r1, [r7, #20]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7f4 fdb5 	bl	8005594 <xQueueSemaphoreTake>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d14d      	bne.n	8010acc <xNetworkInterfaceOutput+0xe8>
                break;
            }

            /* This function does the actual transmission of the packet. The packet is
             * contained in 'pxDescriptor' that is passed to the function. */
            pxDmaTxDesc = xETH.TxDesc;
 8010a30:	4b2e      	ldr	r3, [pc, #184]	; (8010aec <xNetworkInterfaceOutput+0x108>)
 8010a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a34:	60fb      	str	r3, [r7, #12]

            /* Is this buffer available? */
            configASSERT( ( pxDmaTxDesc->Status & ETH_DMATXDESC_OWN ) == 0 );
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	da04      	bge.n	8010a48 <xNetworkInterfaceOutput+0x64>
 8010a3e:	492c      	ldr	r1, [pc, #176]	; (8010af0 <xNetworkInterfaceOutput+0x10c>)
 8010a40:	f240 20b6 	movw	r0, #694	; 0x2b6
 8010a44:	f7f0 f843 	bl	8000ace <vAssertCalled>

            {
                /* Is this buffer available? */
                /* Get bytes in current buffer. */
                ulTransmitSize = pxDescriptor->xDataLength;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	69db      	ldr	r3, [r3, #28]
 8010a4c:	61bb      	str	r3, [r7, #24]

                if( ulTransmitSize > ETH_TX_BUF_SIZE )
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010a54:	d902      	bls.n	8010a5c <xNetworkInterfaceOutput+0x78>
                {
                    ulTransmitSize = ETH_TX_BUF_SIZE;
 8010a56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010a5a:	61bb      	str	r3, [r7, #24]
                        /* Copy the bytes. */
                        memcpy( ( void * ) pxDmaTxDesc->Buffer1Addr, pxDescriptor->pucEthernetBuffer, ulTransmitSize );
                    }
                #else
                    {
                        configASSERT( bReleaseAfterSend != 0 );
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d104      	bne.n	8010a6c <xNetworkInterfaceOutput+0x88>
 8010a62:	4923      	ldr	r1, [pc, #140]	; (8010af0 <xNetworkInterfaceOutput+0x10c>)
 8010a64:	f240 20c9 	movw	r0, #713	; 0x2c9
 8010a68:	f7f0 f831 	bl	8000ace <vAssertCalled>

                        /* Move the buffer. */
                        pxDmaTxDesc->Buffer1Addr = ( uint32_t ) pxDescriptor->pucEthernetBuffer;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	699b      	ldr	r3, [r3, #24]
 8010a70:	461a      	mov	r2, r3
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	609a      	str	r2, [r3, #8]
                        /* The Network Buffer has been passed to DMA, no need to release it. */
                        bReleaseAfterSend = pdFALSE_UNSIGNED;
 8010a76:	2300      	movs	r3, #0
 8010a78:	603b      	str	r3, [r7, #0]

                /* Ask to set the IPv4 checksum.
                 * Also need an Interrupt on Completion so that 'vClearTXBuffers()' will be called.. */
                #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
                    {
                        pxDmaTxDesc->Status |= ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_IC;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	4b1d      	ldr	r3, [pc, #116]	; (8010af4 <xNetworkInterfaceOutput+0x110>)
 8010a80:	4313      	orrs	r3, r2
 8010a82:	68fa      	ldr	r2, [r7, #12]
 8010a84:	6013      	str	r3, [r2, #0]


                /* Prepare transmit descriptors to give to DMA. */

                /* Set LAST and FIRST segment */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f043 5240 	orr.w	r2, r3, #805306368	; 0x30000000
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	601a      	str	r2, [r3, #0]
                /* Set frame size */
                pxDmaTxDesc->ControlBufferSize = ( ulTransmitSize & ETH_DMATXDESC_TBS1 );
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	605a      	str	r2, [r3, #4]
                        cache_clean_invalidate_by_addr( pulBuffer, xlength );
                    }
                #endif

                /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_OWN;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	601a      	str	r2, [r3, #0]

                /* Point to next descriptor */
                xETH.TxDesc = ( ETH_DMADescTypeDef * ) ( xETH.TxDesc->Buffer2NextDescAddr );
 8010aa8:	4b10      	ldr	r3, [pc, #64]	; (8010aec <xNetworkInterfaceOutput+0x108>)
 8010aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	4b0e      	ldr	r3, [pc, #56]	; (8010aec <xNetworkInterfaceOutput+0x108>)
 8010ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010ab4:	f3bf 8f4f 	dsb	sy
                /* Ensure completion of memory access */
                __DSB();
                /* Resume DMA transmission*/
                xETH.Instance->DMATPDR = 0;
 8010ab8:	4b0c      	ldr	r3, [pc, #48]	; (8010aec <xNetworkInterfaceOutput+0x108>)
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	f241 0304 	movw	r3, #4100	; 0x1004
 8010ac0:	4413      	add	r3, r2
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	601a      	str	r2, [r3, #0]
                iptraceNETWORK_INTERFACE_TRANSMIT();
                xReturn = pdPASS;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	61fb      	str	r3, [r7, #28]
 8010aca:	e000      	b.n	8010ace <xNetworkInterfaceOutput+0xea>
                break;
 8010acc:	bf00      	nop
            /* The PHY has no Link Status, packet shall be dropped. */
        }
    } while( 0 );

    /* The buffer has been sent so can be released. */
    if( bReleaseAfterSend != pdFALSE )
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d002      	beq.n	8010ada <xNetworkInterfaceOutput+0xf6>
    {
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f001 f837 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
    }

    return xReturn;
 8010ada:	69fb      	ldr	r3, [r7, #28]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3720      	adds	r7, #32
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	20026618 	.word	0x20026618
 8010ae8:	200266a0 	.word	0x200266a0
 8010aec:	20026658 	.word	0x20026658
 8010af0:	08016940 	.word	0x08016940
 8010af4:	40c00000 	.word	0x40c00000

08010af8 <xMayAcceptPacket>:
/*-----------------------------------------------------------*/

static BaseType_t xMayAcceptPacket( uint8_t * pcBuffer )
{
 8010af8:	b480      	push	{r7}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
    const ProtocolPacket_t * pxProtPacket = ( const ProtocolPacket_t * ) pcBuffer;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	60fb      	str	r3, [r7, #12]

    switch( pxProtPacket->xTCPPacket.xEthernetHeader.usFrameType )
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	899b      	ldrh	r3, [r3, #12]
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	2b08      	cmp	r3, #8
 8010b0c:	d006      	beq.n	8010b1c <xMayAcceptPacket+0x24>
 8010b0e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010b12:	d101      	bne.n	8010b18 <xMayAcceptPacket+0x20>
    {
        case ipARP_FRAME_TYPE:
            /* Check it later. */
            return pdTRUE;
 8010b14:	2301      	movs	r3, #1
 8010b16:	e003      	b.n	8010b20 <xMayAcceptPacket+0x28>
            /* Check it here. */
            break;

        default:
            /* Refuse the packet. */
            return pdFALSE;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	e001      	b.n	8010b20 <xMayAcceptPacket+0x28>
            break;
 8010b1c:	bf00      	nop
                    return pdFALSE;
                }
            }
        }
    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    return pdTRUE;
 8010b1e:	2301      	movs	r3, #1
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3714      	adds	r7, #20
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <prvPassEthMessages>:
/*-----------------------------------------------------------*/

static void prvPassEthMessages( NetworkBufferDescriptor_t * pxDescriptor )
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b086      	sub	sp, #24
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xRxEvent;

    xRxEvent.eEventType = eNetworkRxEvent;
 8010b34:	2301      	movs	r3, #1
 8010b36:	733b      	strb	r3, [r7, #12]
    xRxEvent.pvData = ( void * ) pxDescriptor;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	613b      	str	r3, [r7, #16]

    if( xSendEventStructToIPTask( &xRxEvent, ( TickType_t ) 1000 ) != pdPASS )
 8010b3c:	f107 030c 	add.w	r3, r7, #12
 8010b40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7f8 ffff 	bl	8009b48 <xSendEventStructToIPTask>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d00d      	beq.n	8010b6c <prvPassEthMessages+0x40>
         * use the task level function here. */
        #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                do
                {
                    NetworkBufferDescriptor_t * pxNext = pxDescriptor->pxNextBuffer;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b54:	617b      	str	r3, [r7, #20]
                    vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f000 fff6 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
                    pxDescriptor = pxNext;
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	607b      	str	r3, [r7, #4]
                } while( pxDescriptor != NULL );
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d1f4      	bne.n	8010b50 <prvPassEthMessages+0x24>
            {
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
            }
        #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
        iptraceETHERNET_RX_EVENT_LOST();
        FreeRTOS_printf( ( "prvPassEthMessages: Can not queue return packet!\n" ) );
 8010b66:	4803      	ldr	r0, [pc, #12]	; (8010b74 <prvPassEthMessages+0x48>)
 8010b68:	f7ef ff88 	bl	8000a7c <vLoggingPrintf>
    }
    else
    {
        iptraceNETWORK_INTERFACE_RECEIVE();
    }
}
 8010b6c:	bf00      	nop
 8010b6e:	3718      	adds	r7, #24
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	08016974 	.word	0x08016974

08010b78 <prvNetworkInterfaceInput>:

static BaseType_t prvNetworkInterfaceInput( void )
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b08a      	sub	sp, #40	; 0x28
 8010b7c:	af00      	add	r7, sp, #0
    NetworkBufferDescriptor_t * pxCurDescriptor;
    NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        NetworkBufferDescriptor_t * pxFirstDescriptor = NULL;
 8010b82:	2300      	movs	r3, #0
 8010b84:	623b      	str	r3, [r7, #32]
        NetworkBufferDescriptor_t * pxLastDescriptor = NULL;
 8010b86:	2300      	movs	r3, #0
 8010b88:	61fb      	str	r3, [r7, #28]
    #endif
    BaseType_t xReceivedLength = 0;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDMARxDescriptor;
    const TickType_t xDescriptorWaitTime = pdMS_TO_TICKS( niDESCRIPTOR_WAIT_TIME_MS );
 8010b8e:	23fa      	movs	r3, #250	; 0xfa
 8010b90:	60fb      	str	r3, [r7, #12]
    uint8_t * pucBuffer;

    pxDMARxDescriptor = xETH.RxDesc;
 8010b92:	4b4f      	ldr	r3, [pc, #316]	; (8010cd0 <prvNetworkInterfaceInput+0x158>)
 8010b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b96:	617b      	str	r3, [r7, #20]

    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 8010b98:	e084      	b.n	8010ca4 <prvNetworkInterfaceInput+0x12c>
    {
        BaseType_t xAccepted = pdTRUE;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	613b      	str	r3, [r7, #16]
        /* Get the Frame Length of the received packet: subtract 4 bytes of the CRC */
        xReceivedLength = ( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_FL ) >> ETH_DMARXDESC_FRAMELENGTHSHIFT ) - 4;
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	0c1b      	lsrs	r3, r3, #16
 8010ba4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010ba8:	3b04      	subs	r3, #4
 8010baa:	61bb      	str	r3, [r7, #24]

        pucBuffer = ( uint8_t * ) pxDMARxDescriptor->Buffer1Addr;
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	689b      	ldr	r3, [r3, #8]
 8010bb0:	60bb      	str	r3, [r7, #8]

        /* Update the ETHERNET DMA global Rx descriptor with next Rx descriptor */
        /* Chained Mode */
        /* Selects the next DMA Rx descriptor list for next buffer to read */
        xETH.RxDesc = ( ETH_DMADescTypeDef * ) pxDMARxDescriptor->Buffer2NextDescAddr;
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	4b45      	ldr	r3, [pc, #276]	; (8010cd0 <prvNetworkInterfaceInput+0x158>)
 8010bba:	629a      	str	r2, [r3, #40]	; 0x28

        /* In order to make the code easier and faster, only packets in a single buffer
         * will be accepted.  This can be done by making the buffers large enough to
         * hold a complete Ethernet packet (1536 bytes).
         * Therefore, two sanity checks: */
        configASSERT( xReceivedLength <= ETH_RX_BUF_SIZE );
 8010bbc:	69bb      	ldr	r3, [r7, #24]
 8010bbe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010bc2:	d904      	bls.n	8010bce <prvNetworkInterfaceInput+0x56>
 8010bc4:	4943      	ldr	r1, [pc, #268]	; (8010cd4 <prvNetworkInterfaceInput+0x15c>)
 8010bc6:	f240 30a6 	movw	r0, #934	; 0x3a6
 8010bca:	f7ef ff80 	bl	8000ace <vAssertCalled>

        if( ( pxDMARxDescriptor->Status & ( ETH_DMARXDESC_CE | ETH_DMARXDESC_IPV4HCE | ETH_DMARXDESC_FT ) ) != ETH_DMARXDESC_FT )
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f003 03a2 	and.w	r3, r3, #162	; 0xa2
 8010bd6:	2b20      	cmp	r3, #32
 8010bd8:	d002      	beq.n	8010be0 <prvNetworkInterfaceInput+0x68>
        {
            /* Not an Ethernet frame-type or a checksum error. */
            xAccepted = pdFALSE;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	613b      	str	r3, [r7, #16]
 8010bde:	e003      	b.n	8010be8 <prvNetworkInterfaceInput+0x70>
        }
        else
        {
            /* See if this packet must be handled. */
            xAccepted = xMayAcceptPacket( pucBuffer );
 8010be0:	68b8      	ldr	r0, [r7, #8]
 8010be2:	f7ff ff89 	bl	8010af8 <xMayAcceptPacket>
 8010be6:	6138      	str	r0, [r7, #16]
        }

        if( xAccepted != pdFALSE )
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00a      	beq.n	8010c04 <prvNetworkInterfaceInput+0x8c>
        {
            /* The packet will be accepted, but check first if a new Network Buffer can
             * be obtained. If not, the packet will still be dropped. */
            pxNewDescriptor = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, xDescriptorWaitTime );
 8010bee:	68f9      	ldr	r1, [r7, #12]
 8010bf0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8010bf4:	f000 ff2e 	bl	8011a54 <pxGetNetworkBufferWithDescriptor>
 8010bf8:	6278      	str	r0, [r7, #36]	; 0x24

            if( pxNewDescriptor == NULL )
 8010bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d101      	bne.n	8010c04 <prvNetworkInterfaceInput+0x8c>
            {
                /* A new descriptor can not be allocated now. This packet will be dropped. */
                xAccepted = pdFALSE;
 8010c00:	2300      	movs	r3, #0
 8010c02:	613b      	str	r3, [r7, #16]
        }

        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Find out which Network Buffer was originally passed to the descriptor. */
                pxCurDescriptor = pxPacketBuffer_to_NetworkBuffer( pucBuffer );
 8010c04:	68b8      	ldr	r0, [r7, #8]
 8010c06:	f7f8 fe67 	bl	80098d8 <pxPacketBuffer_to_NetworkBuffer>
 8010c0a:	6078      	str	r0, [r7, #4]
                configASSERT( pxCurDescriptor != NULL );
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d104      	bne.n	8010c1c <prvNetworkInterfaceInput+0xa4>
 8010c12:	4930      	ldr	r1, [pc, #192]	; (8010cd4 <prvNetworkInterfaceInput+0x15c>)
 8010c14:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 8010c18:	f7ef ff59 	bl	8000ace <vAssertCalled>
                    memcpy( pxNewDescriptor->pucEthernetBuffer, pucBuffer, xReceivedLength );
                }
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        if( xAccepted != pdFALSE )
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d013      	beq.n	8010c4a <prvNetworkInterfaceInput+0xd2>
        {
            pxCurDescriptor->xDataLength = xReceivedLength;
 8010c22:	69ba      	ldr	r2, [r7, #24]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	61da      	str	r2, [r3, #28]
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxCurDescriptor->pxNextBuffer = NULL;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	625a      	str	r2, [r3, #36]	; 0x24

                    if( pxFirstDescriptor == NULL )
 8010c2e:	6a3b      	ldr	r3, [r7, #32]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d102      	bne.n	8010c3a <prvNetworkInterfaceInput+0xc2>
                    {
                        /* Becomes the first message */
                        pxFirstDescriptor = pxCurDescriptor;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	623b      	str	r3, [r7, #32]
 8010c38:	e005      	b.n	8010c46 <prvNetworkInterfaceInput+0xce>
                    }
                    else if( pxLastDescriptor != NULL )
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d002      	beq.n	8010c46 <prvNetworkInterfaceInput+0xce>
                    {
                        /* Add to the tail */
                        pxLastDescriptor->pxNextBuffer = pxCurDescriptor;
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	625a      	str	r2, [r3, #36]	; 0x24
                    }

                    pxLastDescriptor = pxCurDescriptor;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	61fb      	str	r3, [r7, #28]

        /* Release descriptors to DMA */
        #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
            {
                /* Set Buffer1 address pointer */
                if( pxNewDescriptor != NULL )
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d004      	beq.n	8010c5a <prvNetworkInterfaceInput+0xe2>
                {
                    pxDMARxDescriptor->Buffer1Addr = ( uint32_t ) pxNewDescriptor->pucEthernetBuffer;
 8010c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c52:	699b      	ldr	r3, [r3, #24]
 8010c54:	461a      	mov	r2, r3
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	609a      	str	r2, [r3, #8]
                }
            }
        #endif /* ipconfigZERO_COPY_RX_DRIVER */

        /* Set Buffer1 size and Second Address Chained bit */
        pxDMARxDescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8010c60:	605a      	str	r2, [r3, #4]
        pxDMARxDescriptor->Status = ETH_DMARXDESC_OWN;
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010c68:	601a      	str	r2, [r3, #0]
 8010c6a:	f3bf 8f4f 	dsb	sy
        /* Ensure completion of memory access */
        __DSB();

        /* When Rx Buffer unavailable flag is set clear it and resume
         * reception. */
        if( ( xETH.Instance->DMASR & ETH_DMASR_RBUS ) != 0 )
 8010c6e:	4b18      	ldr	r3, [pc, #96]	; (8010cd0 <prvNetworkInterfaceInput+0x158>)
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	f241 0314 	movw	r3, #4116	; 0x1014
 8010c76:	4413      	add	r3, r2
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00d      	beq.n	8010c9e <prvNetworkInterfaceInput+0x126>
        {
            /* Clear RBUS ETHERNET DMA flag. */
            xETH.Instance->DMASR = ETH_DMASR_RBUS;
 8010c82:	4b13      	ldr	r3, [pc, #76]	; (8010cd0 <prvNetworkInterfaceInput+0x158>)
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	f241 0314 	movw	r3, #4116	; 0x1014
 8010c8a:	4413      	add	r3, r2
 8010c8c:	2280      	movs	r2, #128	; 0x80
 8010c8e:	601a      	str	r2, [r3, #0]

            /* Resume DMA reception. */
            xETH.Instance->DMARPDR = 0;
 8010c90:	4b0f      	ldr	r3, [pc, #60]	; (8010cd0 <prvNetworkInterfaceInput+0x158>)
 8010c92:	681a      	ldr	r2, [r3, #0]
 8010c94:	f241 0308 	movw	r3, #4104	; 0x1008
 8010c98:	4413      	add	r3, r2
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	601a      	str	r2, [r3, #0]
        }

        pxDMARxDescriptor = xETH.RxDesc;
 8010c9e:	4b0c      	ldr	r3, [pc, #48]	; (8010cd0 <prvNetworkInterfaceInput+0x158>)
 8010ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ca2:	617b      	str	r3, [r7, #20]
    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	f6bf af76 	bge.w	8010b9a <prvNetworkInterfaceInput+0x22>
    }

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        {
            if( pxFirstDescriptor != NULL )
 8010cae:	6a3b      	ldr	r3, [r7, #32]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d002      	beq.n	8010cba <prvNetworkInterfaceInput+0x142>
            {
                prvPassEthMessages( pxFirstDescriptor );
 8010cb4:	6a38      	ldr	r0, [r7, #32]
 8010cb6:	f7ff ff39 	bl	8010b2c <prvPassEthMessages>
            }
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */

    return( xReceivedLength > 0 );
 8010cba:	69bb      	ldr	r3, [r7, #24]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	bfcc      	ite	gt
 8010cc0:	2301      	movgt	r3, #1
 8010cc2:	2300      	movle	r3, #0
 8010cc4:	b2db      	uxtb	r3, r3
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3728      	adds	r7, #40	; 0x28
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	20026658 	.word	0x20026658
 8010cd4:	08016940 	.word	0x08016940

08010cd8 <xSTM32_PhyRead>:


BaseType_t xSTM32_PhyRead( BaseType_t xAddress,
                           BaseType_t xRegister,
                           uint32_t * pulValue )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b086      	sub	sp, #24
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 8010ce4:	4b10      	ldr	r3, [pc, #64]	; (8010d28 <xSTM32_PhyRead+0x50>)
 8010ce6:	8a1b      	ldrh	r3, [r3, #16]
 8010ce8:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	4b0e      	ldr	r3, [pc, #56]	; (8010d28 <xSTM32_PhyRead+0x50>)
 8010cf0:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_ReadPHYRegister( &xETH, ( uint16_t ) xRegister, pulValue );
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	480b      	ldr	r0, [pc, #44]	; (8010d28 <xSTM32_PhyRead+0x50>)
 8010cfc:	f7f3 f93c 	bl	8003f78 <HAL_ETH_ReadPHYRegister>
 8010d00:	4603      	mov	r3, r0
 8010d02:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 8010d04:	4a08      	ldr	r2, [pc, #32]	; (8010d28 <xSTM32_PhyRead+0x50>)
 8010d06:	8a7b      	ldrh	r3, [r7, #18]
 8010d08:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 8010d0a:	7c7b      	ldrb	r3, [r7, #17]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d102      	bne.n	8010d16 <xSTM32_PhyRead+0x3e>
    {
        xResult = 0;
 8010d10:	2300      	movs	r3, #0
 8010d12:	617b      	str	r3, [r7, #20]
 8010d14:	e002      	b.n	8010d1c <xSTM32_PhyRead+0x44>
    }
    else
    {
        xResult = -1;
 8010d16:	f04f 33ff 	mov.w	r3, #4294967295
 8010d1a:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8010d1c:	697b      	ldr	r3, [r7, #20]
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3718      	adds	r7, #24
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	20026658 	.word	0x20026658

08010d2c <xSTM32_PhyWrite>:
/*-----------------------------------------------------------*/

BaseType_t xSTM32_PhyWrite( BaseType_t xAddress,
                            BaseType_t xRegister,
                            uint32_t ulValue )
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b086      	sub	sp, #24
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	60b9      	str	r1, [r7, #8]
 8010d36:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 8010d38:	4b10      	ldr	r3, [pc, #64]	; (8010d7c <xSTM32_PhyWrite+0x50>)
 8010d3a:	8a1b      	ldrh	r3, [r3, #16]
 8010d3c:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	b29a      	uxth	r2, r3
 8010d42:	4b0e      	ldr	r3, [pc, #56]	; (8010d7c <xSTM32_PhyWrite+0x50>)
 8010d44:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_WritePHYRegister( &xETH, ( uint16_t ) xRegister, ulValue );
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	480b      	ldr	r0, [pc, #44]	; (8010d7c <xSTM32_PhyWrite+0x50>)
 8010d50:	f7f3 f982 	bl	8004058 <HAL_ETH_WritePHYRegister>
 8010d54:	4603      	mov	r3, r0
 8010d56:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 8010d58:	4a08      	ldr	r2, [pc, #32]	; (8010d7c <xSTM32_PhyWrite+0x50>)
 8010d5a:	8a7b      	ldrh	r3, [r7, #18]
 8010d5c:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 8010d5e:	7c7b      	ldrb	r3, [r7, #17]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d102      	bne.n	8010d6a <xSTM32_PhyWrite+0x3e>
    {
        xResult = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	617b      	str	r3, [r7, #20]
 8010d68:	e002      	b.n	8010d70 <xSTM32_PhyWrite+0x44>
    }
    else
    {
        xResult = -1;
 8010d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d6e:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8010d70:	697b      	ldr	r3, [r7, #20]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3718      	adds	r7, #24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	20026658 	.word	0x20026658

08010d80 <vMACBProbePhy>:
/*-----------------------------------------------------------*/

void vMACBProbePhy( void )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	af00      	add	r7, sp, #0
    vPhyInitialise( &xPhyObject, xSTM32_PhyRead, xSTM32_PhyWrite );
 8010d84:	4a06      	ldr	r2, [pc, #24]	; (8010da0 <vMACBProbePhy+0x20>)
 8010d86:	4907      	ldr	r1, [pc, #28]	; (8010da4 <vMACBProbePhy+0x24>)
 8010d88:	4807      	ldr	r0, [pc, #28]	; (8010da8 <vMACBProbePhy+0x28>)
 8010d8a:	f000 f947 	bl	801101c <vPhyInitialise>
    xPhyDiscover( &xPhyObject );
 8010d8e:	4806      	ldr	r0, [pc, #24]	; (8010da8 <vMACBProbePhy+0x28>)
 8010d90:	f000 f95a 	bl	8011048 <xPhyDiscover>
    xPhyConfigure( &xPhyObject, &xPHYProperties );
 8010d94:	4905      	ldr	r1, [pc, #20]	; (8010dac <vMACBProbePhy+0x2c>)
 8010d96:	4804      	ldr	r0, [pc, #16]	; (8010da8 <vMACBProbePhy+0x28>)
 8010d98:	f000 fa52 	bl	8011240 <xPhyConfigure>
}
 8010d9c:	bf00      	nop
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	08010d2d 	.word	0x08010d2d
 8010da4:	08010cd9 	.word	0x08010cd9
 8010da8:	20026618 	.word	0x20026618
 8010dac:	08016c90 	.word	0x08016c90

08010db0 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8010db8:	4b37      	ldr	r3, [pc, #220]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	4836      	ldr	r0, [pc, #216]	; (8010e9c <prvEthernetUpdateConfig+0xec>)
 8010dc2:	f7ef fe5b 	bl	8000a7c <vLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d103      	bne.n	8010dd4 <prvEthernetUpdateConfig+0x24>
 8010dcc:	4b32      	ldr	r3, [pc, #200]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d059      	beq.n	8010e88 <prvEthernetUpdateConfig+0xd8>
    {
        /* Restart the auto-negotiation. */
        if( xETH.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE )
 8010dd4:	4b32      	ldr	r3, [pc, #200]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d024      	beq.n	8010e26 <prvEthernetUpdateConfig+0x76>
        {
            xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 8010ddc:	4b2e      	ldr	r3, [pc, #184]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010de0:	2201      	movs	r2, #1
 8010de2:	fa02 f303 	lsl.w	r3, r2, r3
 8010de6:	3b01      	subs	r3, #1
 8010de8:	4619      	mov	r1, r3
 8010dea:	482b      	ldr	r0, [pc, #172]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010dec:	f000 fb6e 	bl	80114cc <xPhyStartAutoNegotiation>

            /* Configure the MAC with the Duplex Mode fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8010df0:	4b29      	ldr	r3, [pc, #164]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010df6:	2b02      	cmp	r3, #2
 8010df8:	d104      	bne.n	8010e04 <prvEthernetUpdateConfig+0x54>
            {
                xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8010dfa:	4b29      	ldr	r3, [pc, #164]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e00:	60da      	str	r2, [r3, #12]
 8010e02:	e002      	b.n	8010e0a <prvEthernetUpdateConfig+0x5a>
            }
            else
            {
                xETH.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8010e04:	4b26      	ldr	r3, [pc, #152]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010e06:	2200      	movs	r2, #0
 8010e08:	60da      	str	r2, [r3, #12]
            }

            /* Configure the MAC with the speed fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8010e0a:	4b23      	ldr	r3, [pc, #140]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d103      	bne.n	8010e1c <prvEthernetUpdateConfig+0x6c>
            {
                xETH.Init.Speed = ETH_SPEED_10M;
 8010e14:	4b22      	ldr	r3, [pc, #136]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010e16:	2200      	movs	r2, #0
 8010e18:	609a      	str	r2, [r3, #8]
 8010e1a:	e02d      	b.n	8010e78 <prvEthernetUpdateConfig+0xc8>
            }
            else
            {
                xETH.Init.Speed = ETH_SPEED_100M;
 8010e1c:	4b20      	ldr	r3, [pc, #128]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010e1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010e22:	609a      	str	r2, [r3, #8]
 8010e24:	e028      	b.n	8010e78 <prvEthernetUpdateConfig+0xc8>
        {
            /* Check parameters */
            assert_param( IS_ETH_SPEED( xETH.Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( xETH.Init.DuplexMode ) );

            if( xETH.Init.DuplexMode == ETH_MODE_FULLDUPLEX )
 8010e26:	4b1e      	ldr	r3, [pc, #120]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e2e:	d104      	bne.n	8010e3a <prvEthernetUpdateConfig+0x8a>
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_HALF;
 8010e30:	4b19      	ldr	r3, [pc, #100]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010e32:	2201      	movs	r2, #1
 8010e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8010e38:	e003      	b.n	8010e42 <prvEthernetUpdateConfig+0x92>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_FULL;
 8010e3a:	4b17      	ldr	r3, [pc, #92]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010e3c:	2202      	movs	r2, #2
 8010e3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            }

            if( xETH.Init.Speed == ETH_SPEED_10M )
 8010e42:	4b17      	ldr	r3, [pc, #92]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010e44:	689b      	ldr	r3, [r3, #8]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d104      	bne.n	8010e54 <prvEthernetUpdateConfig+0xa4>
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_10;
 8010e4a:	4b13      	ldr	r3, [pc, #76]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8010e52:	e003      	b.n	8010e5c <prvEthernetUpdateConfig+0xac>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_100;
 8010e54:	4b10      	ldr	r3, [pc, #64]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010e56:	2202      	movs	r2, #2
 8010e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }

            xPhyObject.xPhyPreferences.ucMDI_X = PHY_MDIX_AUTO;
 8010e5c:	4b0e      	ldr	r3, [pc, #56]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010e5e:	2203      	movs	r2, #3
 8010e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            /* Use predefined (fixed) configuration. */
            xPhyFixedValue( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 8010e64:	4b0c      	ldr	r3, [pc, #48]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e68:	2201      	movs	r2, #1
 8010e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	4619      	mov	r1, r3
 8010e72:	4809      	ldr	r0, [pc, #36]	; (8010e98 <prvEthernetUpdateConfig+0xe8>)
 8010e74:	f000 faea 	bl	801144c <xPhyFixedValue>
        }

        /* ETHERNET MAC Re-Configuration */
        HAL_ETH_ConfigMAC( &xETH, ( ETH_MACInitTypeDef * ) NULL );
 8010e78:	2100      	movs	r1, #0
 8010e7a:	4809      	ldr	r0, [pc, #36]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010e7c:	f7f3 fa2e 	bl	80042dc <HAL_ETH_ConfigMAC>

        /* Restart MAC interface */
        HAL_ETH_Start( &xETH );
 8010e80:	4807      	ldr	r0, [pc, #28]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010e82:	f7f3 f959 	bl	8004138 <HAL_ETH_Start>
 8010e86:	e002      	b.n	8010e8e <prvEthernetUpdateConfig+0xde>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop( &xETH );
 8010e88:	4805      	ldr	r0, [pc, #20]	; (8010ea0 <prvEthernetUpdateConfig+0xf0>)
 8010e8a:	f7f3 f984 	bl	8004196 <HAL_ETH_Stop>
    }
}
 8010e8e:	bf00      	nop
 8010e90:	3708      	adds	r7, #8
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	20026618 	.word	0x20026618
 8010e9c:	080169a8 	.word	0x080169a8
 8010ea0:	20026658 	.word	0x20026658

08010ea4 <prvEMACHandlerTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b086      	sub	sp, #24
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
    UBaseType_t uxLastMinBufferCount = 0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	617b      	str	r3, [r7, #20]
    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        UBaseType_t uxLastMinQueueSpace = 0;
    #endif
    UBaseType_t uxCurrentCount;
    BaseType_t xResult;
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
 8010eb0:	2364      	movs	r3, #100	; 0x64
 8010eb2:	60fb      	str	r3, [r7, #12]
    /* Remove compiler warnings about unused parameters. */
    ( void ) pvParameters;

    for( ; ; )
    {
        xResult = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	613b      	str	r3, [r7, #16]
        uxCurrentCount = uxGetMinimumFreeNetworkBuffers();
 8010eb8:	f000 fe86 	bl	8011bc8 <uxGetMinimumFreeNetworkBuffers>
 8010ebc:	60b8      	str	r0, [r7, #8]

        if( uxLastMinBufferCount != uxCurrentCount )
 8010ebe:	697a      	ldr	r2, [r7, #20]
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d009      	beq.n	8010eda <prvEMACHandlerTask+0x36>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentCount;
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	617b      	str	r3, [r7, #20]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 8010eca:	f000 fe71 	bl	8011bb0 <uxGetNumberOfFreeNetworkBuffers>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	68ba      	ldr	r2, [r7, #8]
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	482c      	ldr	r0, [pc, #176]	; (8010f88 <prvEMACHandlerTask+0xe4>)
 8010ed6:	f7ef fdd1 	bl	8000a7c <vLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(), uxCurrentCount ) );
        }

        if( xTXDescriptorSemaphore != NULL )
 8010eda:	4b2c      	ldr	r3, [pc, #176]	; (8010f8c <prvEMACHandlerTask+0xe8>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d013      	beq.n	8010f0a <prvEMACHandlerTask+0x66>
        {
            static UBaseType_t uxLowestSemCount = ( UBaseType_t ) ETH_TXBUFNB - 1;

            uxCurrentCount = uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8010ee2:	4b2a      	ldr	r3, [pc, #168]	; (8010f8c <prvEMACHandlerTask+0xe8>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7f4 fc4a 	bl	8005780 <uxQueueMessagesWaiting>
 8010eec:	60b8      	str	r0, [r7, #8]

            if( uxLowestSemCount > uxCurrentCount )
 8010eee:	4b28      	ldr	r3, [pc, #160]	; (8010f90 <prvEMACHandlerTask+0xec>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d208      	bcs.n	8010f0a <prvEMACHandlerTask+0x66>
            {
                uxLowestSemCount = uxCurrentCount;
 8010ef8:	4a25      	ldr	r2, [pc, #148]	; (8010f90 <prvEMACHandlerTask+0xec>)
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "TX DMA buffers: lowest %lu\n", uxLowestSemCount ) );
 8010efe:	4b24      	ldr	r3, [pc, #144]	; (8010f90 <prvEMACHandlerTask+0xec>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4619      	mov	r1, r3
 8010f04:	4823      	ldr	r0, [pc, #140]	; (8010f94 <prvEMACHandlerTask+0xf0>)
 8010f06:	f7ef fdb9 	bl	8000a7c <vLoggingPrintf>
                    FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
                }
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
 8010f0a:	4b23      	ldr	r3, [pc, #140]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f003 0307 	and.w	r3, r3, #7
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d104      	bne.n	8010f20 <prvEMACHandlerTask+0x7c>
        {
            /* No events to process now, wait for the next. */
            ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	2100      	movs	r1, #0
 8010f1a:	2000      	movs	r0, #0
 8010f1c:	f7f5 fe68 	bl	8006bf0 <ulTaskGenericNotifyTake>
        }

        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
 8010f20:	4b1d      	ldr	r3, [pc, #116]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f003 0301 	and.w	r3, r3, #1
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d008      	beq.n	8010f3e <prvEMACHandlerTask+0x9a>
        {
            ulISREvents &= ~EMAC_IF_RX_EVENT;
 8010f2c:	4b1a      	ldr	r3, [pc, #104]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	f023 0301 	bic.w	r3, r3, #1
 8010f34:	4a18      	ldr	r2, [pc, #96]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f36:	6013      	str	r3, [r2, #0]

            xResult = prvNetworkInterfaceInput();
 8010f38:	f7ff fe1e 	bl	8010b78 <prvNetworkInterfaceInput>
 8010f3c:	6138      	str	r0, [r7, #16]
        }

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0 )
 8010f3e:	4b16      	ldr	r3, [pc, #88]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	f003 0302 	and.w	r3, r3, #2
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d007      	beq.n	8010f5a <prvEMACHandlerTask+0xb6>
        {
            /* Code to release TX buffers if zero-copy is used. */
            ulISREvents &= ~EMAC_IF_TX_EVENT;
 8010f4a:	4b13      	ldr	r3, [pc, #76]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f023 0302 	bic.w	r3, r3, #2
 8010f52:	4a11      	ldr	r2, [pc, #68]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f54:	6013      	str	r3, [r2, #0]
            /* Check if DMA packets have been delivered. */
            vClearTXBuffers();
 8010f56:	f7ff fb77 	bl	8010648 <vClearTXBuffers>
        }

        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0 )
 8010f5a:	4b0f      	ldr	r3, [pc, #60]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f003 0304 	and.w	r3, r3, #4
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d005      	beq.n	8010f72 <prvEMACHandlerTask+0xce>
        {
            /* Future extension: logging about errors that occurred. */
            ulISREvents &= ~EMAC_IF_ERR_EVENT;
 8010f66:	4b0c      	ldr	r3, [pc, #48]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	f023 0304 	bic.w	r3, r3, #4
 8010f6e:	4a0a      	ldr	r2, [pc, #40]	; (8010f98 <prvEMACHandlerTask+0xf4>)
 8010f70:	6013      	str	r3, [r2, #0]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != 0 )
 8010f72:	6939      	ldr	r1, [r7, #16]
 8010f74:	4809      	ldr	r0, [pc, #36]	; (8010f9c <prvEMACHandlerTask+0xf8>)
 8010f76:	f000 fc35 	bl	80117e4 <xPhyCheckLinkStatus>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d099      	beq.n	8010eb4 <prvEMACHandlerTask+0x10>
        {
            /* Something has changed to a Link Status, need re-check. */
            prvEthernetUpdateConfig( pdFALSE );
 8010f80:	2000      	movs	r0, #0
 8010f82:	f7ff ff15 	bl	8010db0 <prvEthernetUpdateConfig>
        xResult = 0;
 8010f86:	e795      	b.n	8010eb4 <prvEMACHandlerTask+0x10>
 8010f88:	080169dc 	.word	0x080169dc
 8010f8c:	200266a0 	.word	0x200266a0
 8010f90:	20016930 	.word	0x20016930
 8010f94:	08016a00 	.word	0x08016a00
 8010f98:	20026614 	.word	0x20026614
 8010f9c:	20026618 	.word	0x20026618

08010fa0 <ETH_IRQHandler>:
    }
}
/*-----------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &xETH );
 8010fa4:	4802      	ldr	r0, [pc, #8]	; (8010fb0 <ETH_IRQHandler+0x10>)
 8010fa6:	f7f2 ffab 	bl	8003f00 <HAL_ETH_IRQHandler>
}
 8010faa:	bf00      	nop
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	20026658 	.word	0x20026658

08010fb4 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4a08      	ldr	r2, [pc, #32]	; (8010fe0 <xHas_1F_PHYSPCS+0x2c>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d002      	beq.n	8010fca <xHas_1F_PHYSPCS+0x16>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	60fb      	str	r3, [r7, #12]
            break;
 8010fc8:	e002      	b.n	8010fd0 <xHas_1F_PHYSPCS+0x1c>

        case PHY_ID_DP83848I:
            xResult = pdFALSE;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	60fb      	str	r3, [r7, #12]
            break;
 8010fce:	bf00      	nop
    }

    return xResult;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3714      	adds	r7, #20
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr
 8010fde:	bf00      	nop
 8010fe0:	20005c90 	.word	0x20005c90

08010fe4 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	4a09      	ldr	r2, [pc, #36]	; (8011014 <xHas_19_PHYCR+0x30>)
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	d002      	beq.n	8010ffa <xHas_19_PHYCR+0x16>
 8010ff4:	4a08      	ldr	r2, [pc, #32]	; (8011018 <xHas_19_PHYCR+0x34>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d102      	bne.n	8011000 <xHas_19_PHYCR+0x1c>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
            xResult = pdTRUE;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	60fb      	str	r3, [r7, #12]
            break;
 8010ffe:	e002      	b.n	8011006 <xHas_19_PHYCR+0x22>

        default:
            /* Most PHY's do not have a 19_PHYCR */
            xResult = pdFALSE;
 8011000:	2300      	movs	r3, #0
 8011002:	60fb      	str	r3, [r7, #12]
            break;
 8011004:	bf00      	nop
    }

    return xResult;
 8011006:	68fb      	ldr	r3, [r7, #12]
}
 8011008:	4618      	mov	r0, r3
 801100a:	3714      	adds	r7, #20
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	0007c130 	.word	0x0007c130
 8011018:	20005c90 	.word	0x20005c90

0801101c <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8011028:	2240      	movs	r2, #64	; 0x40
 801102a:	2100      	movs	r1, #0
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	f001 ff14 	bl	8012e5a <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	68ba      	ldr	r2, [r7, #8]
 8011036:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	605a      	str	r2, [r3, #4]
}
 801103e:	bf00      	nop
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
	...

08011048 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b086      	sub	sp, #24
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2200      	movs	r2, #0
 8011054:	629a      	str	r2, [r3, #40]	; 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8011056:	2300      	movs	r3, #0
 8011058:	617b      	str	r3, [r7, #20]
 801105a:	e038      	b.n	80110ce <xPhyDiscover+0x86>
    {
        uint32_t ulLowerID;

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f107 020c 	add.w	r2, r7, #12
 8011064:	2103      	movs	r1, #3
 8011066:	6978      	ldr	r0, [r7, #20]
 8011068:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011070:	4293      	cmp	r3, r2
 8011072:	d029      	beq.n	80110c8 <xPhyDiscover+0x80>
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d026      	beq.n	80110c8 <xPhyDiscover+0x80>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f107 0208 	add.w	r2, r7, #8
 8011082:	2102      	movs	r1, #2
 8011084:	6978      	ldr	r0, [r7, #20]
 8011086:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	041a      	lsls	r2, r3, #16
 801108c:	68f9      	ldr	r1, [r7, #12]
 801108e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8011092:	400b      	ands	r3, r1
 8011094:	4313      	orrs	r3, r2
 8011096:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801109c:	697a      	ldr	r2, [r7, #20]
 801109e:	b2d1      	uxtb	r1, r2
 80110a0:	687a      	ldr	r2, [r7, #4]
 80110a2:	4413      	add	r3, r2
 80110a4:	460a      	mov	r2, r1
 80110a6:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	3202      	adds	r2, #2
 80110b0:	6939      	ldr	r1, [r7, #16]
 80110b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ba:	1c5a      	adds	r2, r3, #1
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	629a      	str	r2, [r3, #40]	; 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110c4:	2b04      	cmp	r3, #4
 80110c6:	d005      	beq.n	80110d4 <xPhyDiscover+0x8c>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	3301      	adds	r3, #1
 80110cc:	617b      	str	r3, [r7, #20]
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	2b1f      	cmp	r3, #31
 80110d2:	ddc3      	ble.n	801105c <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110d8:	2b00      	cmp	r3, #0
 80110da:	dd05      	ble.n	80110e8 <xPhyDiscover+0xa0>
    {
        FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	689b      	ldr	r3, [r3, #8]
 80110e0:	4619      	mov	r1, r3
 80110e2:	4804      	ldr	r0, [pc, #16]	; (80110f4 <xPhyDiscover+0xac>)
 80110e4:	f7ef fcca 	bl	8000a7c <vLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3718      	adds	r7, #24
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	08016a1c 	.word	0x08016a1c

080110f8 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b08c      	sub	sp, #48	; 0x30
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0UL;
 8011102:	2300      	movs	r3, #0
 8011104:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011106:	2300      	movs	r3, #0
 8011108:	62bb      	str	r3, [r7, #40]	; 0x28
 801110a:	e017      	b.n	801113c <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011110:	4413      	add	r3, r2
 8011112:	3318      	adds	r3, #24
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	f107 0218 	add.w	r2, r7, #24
 8011120:	2100      	movs	r1, #0
 8011122:	69f8      	ldr	r0, [r7, #28]
 8011124:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	69ba      	ldr	r2, [r7, #24]
 801112c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011130:	2100      	movs	r1, #0
 8011132:	69f8      	ldr	r0, [r7, #28]
 8011134:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011138:	3301      	adds	r3, #1
 801113a:	62bb      	str	r3, [r7, #40]	; 0x28
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011142:	429a      	cmp	r2, r3
 8011144:	dbe2      	blt.n	801110c <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8011146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801114a:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 801114c:	f107 030c 	add.w	r3, r7, #12
 8011150:	4618      	mov	r0, r3
 8011152:	f7f5 fa33 	bl	80065bc <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011156:	2300      	movs	r3, #0
 8011158:	62bb      	str	r3, [r7, #40]	; 0x28
 801115a:	e01f      	b.n	801119c <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801115c:	687a      	ldr	r2, [r7, #4]
 801115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011160:	4413      	add	r3, r2
 8011162:	3318      	adds	r3, #24
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f107 0218 	add.w	r2, r7, #24
 8011170:	2100      	movs	r1, #0
 8011172:	6a38      	ldr	r0, [r7, #32]
 8011174:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801117c:	2b00      	cmp	r3, #0
 801117e:	d10a      	bne.n	8011196 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8011180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011182:	482d      	ldr	r0, [pc, #180]	; (8011238 <xPhyReset+0x140>)
 8011184:	f7ef fc7a 	bl	8000a7c <vLoggingPrintf>
                ulDoneMask |= ( 1UL << xPhyIndex );
 8011188:	2201      	movs	r2, #1
 801118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118c:	fa02 f303 	lsl.w	r3, r2, r3
 8011190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011192:	4313      	orrs	r3, r2
 8011194:	62fb      	str	r3, [r7, #44]	; 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011198:	3301      	adds	r3, #1
 801119a:	62bb      	str	r3, [r7, #40]	; 0x28
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111a2:	429a      	cmp	r2, r3
 80111a4:	dbda      	blt.n	801115c <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 80111a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d013      	beq.n	80111d6 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80111ae:	f107 0214 	add.w	r2, r7, #20
 80111b2:	f107 030c 	add.w	r3, r7, #12
 80111b6:	4611      	mov	r1, r2
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7f5 fa37 	bl	800662c <xTaskCheckForTimeOut>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d004      	beq.n	80111ce <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 80111c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111c6:	481d      	ldr	r0, [pc, #116]	; (801123c <xPhyReset+0x144>)
 80111c8:	f7ef fc58 	bl	8000a7c <vLoggingPrintf>
            break;
 80111cc:	e004      	b.n	80111d8 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80111ce:	2032      	movs	r0, #50	; 0x32
 80111d0:	f7f4 fe76 	bl	8005ec0 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80111d4:	e7bf      	b.n	8011156 <xPhyReset+0x5e>
            break;
 80111d6:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80111d8:	2300      	movs	r3, #0
 80111da:	62bb      	str	r3, [r7, #40]	; 0x28
 80111dc:	e01f      	b.n	801121e <xPhyReset+0x126>
    {
        if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 80111de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e2:	fa22 f303 	lsr.w	r3, r2, r3
 80111e6:	f003 0301 	and.w	r3, r3, #1
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d114      	bne.n	8011218 <xPhyReset+0x120>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80111ee:	687a      	ldr	r2, [r7, #4]
 80111f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f2:	4413      	add	r3, r2
 80111f4:	3318      	adds	r3, #24
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	627b      	str	r3, [r7, #36]	; 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	f107 0218 	add.w	r2, r7, #24
 8011202:	2100      	movs	r1, #0
 8011204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011206:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	69ba      	ldr	r2, [r7, #24]
 801120e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011212:	2100      	movs	r1, #0
 8011214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011216:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121a:	3301      	adds	r3, #1
 801121c:	62bb      	str	r3, [r7, #40]	; 0x28
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011224:	429a      	cmp	r2, r3
 8011226:	dbda      	blt.n	80111de <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8011228:	2032      	movs	r0, #50	; 0x32
 801122a:	f7f4 fe49 	bl	8005ec0 <vTaskDelay>

    return ulDoneMask;
 801122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011230:	4618      	mov	r0, r3
 8011232:	3730      	adds	r7, #48	; 0x30
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	08016a28 	.word	0x08016a28
 801123c:	08016a4c 	.word	0x08016a4c

08011240 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b088      	sub	sp, #32
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801124e:	2b00      	cmp	r3, #0
 8011250:	dc05      	bgt.n	801125e <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8011252:	487c      	ldr	r0, [pc, #496]	; (8011444 <xPhyConfigure+0x204>)
 8011254:	f7ef fc12 	bl	8000a7c <vLoggingPrintf>
        return -1;
 8011258:	f04f 33ff 	mov.w	r3, #4294967295
 801125c:	e0ed      	b.n	801143a <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	2b03      	cmp	r3, #3
 8011264:	d107      	bne.n	8011276 <xPhyConfigure+0x36>
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	789b      	ldrb	r3, [r3, #2]
 801126a:	2b03      	cmp	r3, #3
 801126c:	d103      	bne.n	8011276 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 801126e:	f240 13e1 	movw	r3, #481	; 0x1e1
 8011272:	61fb      	str	r3, [r7, #28]
 8011274:	e044      	b.n	8011300 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8011276:	2301      	movs	r3, #1
 8011278:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	2b03      	cmp	r3, #3
 8011280:	d10d      	bne.n	801129e <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	789b      	ldrb	r3, [r3, #2]
 8011286:	2b02      	cmp	r3, #2
 8011288:	d104      	bne.n	8011294 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8011290:	61fb      	str	r3, [r7, #28]
 8011292:	e035      	b.n	8011300 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 801129a:	61fb      	str	r3, [r7, #28]
 801129c:	e030      	b.n	8011300 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	789b      	ldrb	r3, [r3, #2]
 80112a2:	2b03      	cmp	r3, #3
 80112a4:	d10d      	bne.n	80112c2 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	2b01      	cmp	r3, #1
 80112ac:	d104      	bne.n	80112b8 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 80112ae:	69fb      	ldr	r3, [r7, #28]
 80112b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80112b4:	61fb      	str	r3, [r7, #28]
 80112b6:	e023      	b.n	8011300 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 80112b8:	69fb      	ldr	r3, [r7, #28]
 80112ba:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80112be:	61fb      	str	r3, [r7, #28]
 80112c0:	e01e      	b.n	8011300 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	2b02      	cmp	r3, #2
 80112c8:	d10d      	bne.n	80112e6 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	789b      	ldrb	r3, [r3, #2]
 80112ce:	2b02      	cmp	r3, #2
 80112d0:	d104      	bne.n	80112dc <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80112d8:	61fb      	str	r3, [r7, #28]
 80112da:	e011      	b.n	8011300 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112e2:	61fb      	str	r3, [r7, #28]
 80112e4:	e00c      	b.n	8011300 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	789b      	ldrb	r3, [r3, #2]
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d104      	bne.n	80112f8 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 80112ee:	69fb      	ldr	r3, [r7, #28]
 80112f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112f4:	61fb      	str	r3, [r7, #28]
 80112f6:	e003      	b.n	8011300 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	f043 0320 	orr.w	r3, r3, #32
 80112fe:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011304:	2201      	movs	r2, #1
 8011306:	fa02 f303 	lsl.w	r3, r2, r3
 801130a:	3b01      	subs	r3, #1
 801130c:	4619      	mov	r1, r3
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f7ff fef2 	bl	80110f8 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011314:	2300      	movs	r3, #0
 8011316:	61bb      	str	r3, [r7, #24]
 8011318:	e080      	b.n	801141c <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	69bb      	ldr	r3, [r7, #24]
 801131e:	4413      	add	r3, r2
 8011320:	3318      	adds	r3, #24
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	69ba      	ldr	r2, [r7, #24]
 801132a:	3202      	adds	r2, #2
 801132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011330:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	69fa      	ldr	r2, [r7, #28]
 8011338:	2104      	movs	r1, #4
 801133a:	6978      	ldr	r0, [r7, #20]
 801133c:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f107 020c 	add.w	r2, r7, #12
 8011346:	2100      	movs	r1, #0
 8011348:	6978      	ldr	r0, [r7, #20]
 801134a:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 8011352:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801135a:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	2b02      	cmp	r3, #2
 8011362:	d003      	beq.n	801136c <xPhyConfigure+0x12c>
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	2b03      	cmp	r3, #3
 801136a:	d104      	bne.n	8011376 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011372:	60fb      	str	r3, [r7, #12]
 8011374:	e007      	b.n	8011386 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	2b01      	cmp	r3, #1
 801137c:	d103      	bne.n	8011386 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011384:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	789b      	ldrb	r3, [r3, #2]
 801138a:	2b02      	cmp	r3, #2
 801138c:	d003      	beq.n	8011396 <xPhyConfigure+0x156>
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	789b      	ldrb	r3, [r3, #2]
 8011392:	2b03      	cmp	r3, #3
 8011394:	d104      	bne.n	80113a0 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801139c:	60fb      	str	r3, [r7, #12]
 801139e:	e007      	b.n	80113b0 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	789b      	ldrb	r3, [r3, #2]
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d103      	bne.n	80113b0 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113ae:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 80113b0:	6938      	ldr	r0, [r7, #16]
 80113b2:	f7ff fe17 	bl	8010fe4 <xHas_19_PHYCR>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d026      	beq.n	801140a <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	f107 0208 	add.w	r2, r7, #8
 80113c4:	2119      	movs	r1, #25
 80113c6:	6978      	ldr	r0, [r7, #20]
 80113c8:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80113d0:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	785b      	ldrb	r3, [r3, #1]
 80113d6:	2b03      	cmp	r3, #3
 80113d8:	d104      	bne.n	80113e4 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113e0:	60bb      	str	r3, [r7, #8]
 80113e2:	e00c      	b.n	80113fe <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	785b      	ldrb	r3, [r3, #1]
 80113e8:	2b02      	cmp	r3, #2
 80113ea:	d104      	bne.n	80113f6 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80113f2:	60bb      	str	r3, [r7, #8]
 80113f4:	e003      	b.n	80113fe <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80113fc:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	68ba      	ldr	r2, [r7, #8]
 8011404:	2119      	movs	r1, #25
 8011406:	6978      	ldr	r0, [r7, #20]
 8011408:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	461a      	mov	r2, r3
 801140e:	69f9      	ldr	r1, [r7, #28]
 8011410:	480d      	ldr	r0, [pc, #52]	; (8011448 <xPhyConfigure+0x208>)
 8011412:	f7ef fb33 	bl	8000a7c <vLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	3301      	adds	r3, #1
 801141a:	61bb      	str	r3, [r7, #24]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011420:	69ba      	ldr	r2, [r7, #24]
 8011422:	429a      	cmp	r2, r3
 8011424:	f6ff af79 	blt.w	801131a <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	62da      	str	r2, [r3, #44]	; 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	69fa      	ldr	r2, [r7, #28]
 8011436:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8011438:	2300      	movs	r3, #0
}
 801143a:	4618      	mov	r0, r3
 801143c:	3720      	adds	r7, #32
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	08016a84 	.word	0x08016a84
 8011448:	08016aa8 	.word	0x08016aa8

0801144c <xPhyFixedValue>:
 * The caller has set the values in 'xPhyPreferences' (ucDuplex and ucSpeed).
 * The PHY register phyREG_00_BMCR will be set for every connected PHY that matches
 * with ulPhyMask. */
BaseType_t xPhyFixedValue( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	6039      	str	r1, [r7, #0]
    BaseType_t xPhyIndex;
    uint32_t ulValue, ulBitMask = ( uint32_t ) 1U;
 8011456:	2301      	movs	r3, #1
 8011458:	60fb      	str	r3, [r7, #12]

    ulValue = ( uint32_t ) 0U;
 801145a:	2300      	movs	r3, #0
 801145c:	613b      	str	r3, [r7, #16]

    if( pxPhyObject->xPhyPreferences.ucDuplex == PHY_DUPLEX_FULL )
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011464:	2b02      	cmp	r3, #2
 8011466:	d103      	bne.n	8011470 <xPhyFixedValue+0x24>
    {
        ulValue |= phyBMCR_FULL_DUPLEX;
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801146e:	613b      	str	r3, [r7, #16]
    }

    if( pxPhyObject->xPhyPreferences.ucSpeed == PHY_SPEED_100 )
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011476:	2b02      	cmp	r3, #2
 8011478:	d103      	bne.n	8011482 <xPhyFixedValue+0x36>
    {
        ulValue |= phyBMCR_SPEED_100;
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011480:	613b      	str	r3, [r7, #16]
    }

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011482:	2300      	movs	r3, #0
 8011484:	617b      	str	r3, [r7, #20]
 8011486:	e016      	b.n	80114b6 <xPhyFixedValue+0x6a>
    {
        if( ( ulPhyMask & ulBitMask ) != 0lu )
 8011488:	683a      	ldr	r2, [r7, #0]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	4013      	ands	r3, r2
 801148e:	2b00      	cmp	r3, #0
 8011490:	d00b      	beq.n	80114aa <xPhyFixedValue+0x5e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	4413      	add	r3, r2
 8011498:	3318      	adds	r3, #24
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	60bb      	str	r3, [r7, #8]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulValue );
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	693a      	ldr	r2, [r7, #16]
 80114a4:	2100      	movs	r1, #0
 80114a6:	68b8      	ldr	r0, [r7, #8]
 80114a8:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	3301      	adds	r3, #1
 80114ae:	617b      	str	r3, [r7, #20]
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	005b      	lsls	r3, r3, #1
 80114b4:	60fb      	str	r3, [r7, #12]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ba:	697a      	ldr	r2, [r7, #20]
 80114bc:	429a      	cmp	r2, r3
 80114be:	dbe3      	blt.n	8011488 <xPhyFixedValue+0x3c>
        }
    }

    return 0;
 80114c0:	2300      	movs	r3, #0
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3718      	adds	r7, #24
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
	...

080114cc <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b092      	sub	sp, #72	; 0x48
 80114d0:	af02      	add	r7, sp, #8
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulPHYLinkStatus, ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d101      	bne.n	80114e0 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 80114dc:	2300      	movs	r3, #0
 80114de:	e170      	b.n	80117c2 <xPhyStartAutoNegotiation+0x2f6>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80114e0:	2300      	movs	r3, #0
 80114e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114e4:	e020      	b.n	8011528 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 80114e6:	683a      	ldr	r2, [r7, #0]
 80114e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ea:	fa22 f303 	lsr.w	r3, r2, r3
 80114ee:	f003 0301 	and.w	r3, r3, #1
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d015      	beq.n	8011522 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114fa:	4413      	add	r3, r2
 80114fc:	3318      	adds	r3, #24
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	623b      	str	r3, [r7, #32]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801150a:	2104      	movs	r1, #4
 801150c:	6a38      	ldr	r0, [r7, #32]
 801150e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801151c:	2100      	movs	r1, #0
 801151e:	6a38      	ldr	r0, [r7, #32]
 8011520:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8011522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011524:	3301      	adds	r3, #1
 8011526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801152c:	461a      	mov	r2, r3
 801152e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011530:	4293      	cmp	r3, r2
 8011532:	d3d8      	bcc.n	80114e6 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8011534:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011538:	61bb      	str	r3, [r7, #24]
    vTaskSetTimeOutState( &xTimer );
 801153a:	f107 0310 	add.w	r3, r7, #16
 801153e:	4618      	mov	r0, r3
 8011540:	f7f5 f83c 	bl	80065bc <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8011544:	2300      	movs	r3, #0
 8011546:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8011548:	2301      	movs	r3, #1
 801154a:	637b      	str	r3, [r7, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801154c:	2300      	movs	r3, #0
 801154e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011550:	e025      	b.n	801159e <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8011552:	683a      	ldr	r2, [r7, #0]
 8011554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011556:	4013      	ands	r3, r2
 8011558:	2b00      	cmp	r3, #0
 801155a:	d01a      	beq.n	8011592 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 801155c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801155e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011560:	4013      	ands	r3, r2
 8011562:	2b00      	cmp	r3, #0
 8011564:	d115      	bne.n	8011592 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011566:	687a      	ldr	r2, [r7, #4]
 8011568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801156a:	4413      	add	r3, r2
 801156c:	3318      	adds	r3, #24
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	627b      	str	r3, [r7, #36]	; 0x24

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	f107 021c 	add.w	r2, r7, #28
 801157a:	2101      	movs	r1, #1
 801157c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801157e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	f003 0320 	and.w	r3, r3, #32
 8011586:	2b00      	cmp	r3, #0
 8011588:	d003      	beq.n	8011592 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 801158a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801158c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801158e:	4313      	orrs	r3, r2
 8011590:	63bb      	str	r3, [r7, #56]	; 0x38
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011594:	3301      	adds	r3, #1
 8011596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801159a:	005b      	lsls	r3, r3, #1
 801159c:	637b      	str	r3, [r7, #52]	; 0x34
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a2:	461a      	mov	r2, r3
 80115a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d3d3      	bcc.n	8011552 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 80115aa:	683a      	ldr	r2, [r7, #0]
 80115ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d013      	beq.n	80115da <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80115b2:	f107 0218 	add.w	r2, r7, #24
 80115b6:	f107 0310 	add.w	r3, r7, #16
 80115ba:	4611      	mov	r1, r2
 80115bc:	4618      	mov	r0, r3
 80115be:	f7f5 f835 	bl	800662c <xTaskCheckForTimeOut>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d004      	beq.n	80115d2 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
 80115c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115ca:	4880      	ldr	r0, [pc, #512]	; (80117cc <xPhyStartAutoNegotiation+0x300>)
 80115cc:	f7ef fa56 	bl	8000a7c <vLoggingPrintf>
            break;
 80115d0:	e004      	b.n	80115dc <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80115d2:	2032      	movs	r0, #50	; 0x32
 80115d4:	f7f4 fc74 	bl	8005ec0 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 80115d8:	e7b6      	b.n	8011548 <xPhyStartAutoNegotiation+0x7c>
            break;
 80115da:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 80115dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115de:	2b00      	cmp	r3, #0
 80115e0:	f000 80ee 	beq.w	80117c0 <xPhyStartAutoNegotiation+0x2f4>
    {
        ulBitMask = ( uint32_t ) 1U;
 80115e4:	2301      	movs	r3, #1
 80115e6:	637b      	str	r3, [r7, #52]	; 0x34
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ee:	43db      	mvns	r3, r3
 80115f0:	401a      	ands	r2, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	635a      	str	r2, [r3, #52]	; 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80115f6:	2300      	movs	r3, #0
 80115f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80115fa:	e0da      	b.n	80117b2 <xPhyStartAutoNegotiation+0x2e6>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80115fc:	687a      	ldr	r2, [r7, #4]
 80115fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011600:	4413      	add	r3, r2
 8011602:	3318      	adds	r3, #24
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	62fb      	str	r3, [r7, #44]	; 0x2c
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801160c:	3202      	adds	r2, #2
 801160e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011612:	62bb      	str	r3, [r7, #40]	; 0x28

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8011614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011618:	4013      	ands	r3, r2
 801161a:	2b00      	cmp	r3, #0
 801161c:	f000 80c2 	beq.w	80117a4 <xPhyStartAutoNegotiation+0x2d8>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011628:	2100      	movs	r1, #0
 801162a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801162c:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f107 021c 	add.w	r2, r7, #28
 8011636:	2101      	movs	r1, #1
 8011638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801163a:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 801163c:	69fb      	ldr	r3, [r7, #28]
 801163e:	f003 0304 	and.w	r3, r3, #4
 8011642:	2b00      	cmp	r3, #0
 8011644:	d00a      	beq.n	801165c <xPhyStartAutoNegotiation+0x190>
            {
                ulPHYLinkStatus |= phyBMSR_LINK_STATUS;
 8011646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011648:	f043 0304 	orr.w	r3, r3, #4
 801164c:	633b      	str	r3, [r7, #48]	; 0x30
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011654:	431a      	orrs	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	635a      	str	r2, [r3, #52]	; 0x34
 801165a:	e003      	b.n	8011664 <xPhyStartAutoNegotiation+0x198>
            }
            else
            {
                ulPHYLinkStatus &= ~( phyBMSR_LINK_STATUS );
 801165c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165e:	f023 0304 	bic.w	r3, r3, #4
 8011662:	633b      	str	r3, [r7, #48]	; 0x30
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8011664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011666:	4a5a      	ldr	r2, [pc, #360]	; (80117d0 <xPhyStartAutoNegotiation+0x304>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d13a      	bne.n	80116e2 <xPhyStartAutoNegotiation+0x216>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f107 020c 	add.w	r2, r7, #12
 8011674:	211e      	movs	r1, #30
 8011676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011678:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	f003 0307 	and.w	r3, r3, #7
 8011680:	3b01      	subs	r3, #1
 8011682:	2b05      	cmp	r3, #5
 8011684:	d813      	bhi.n	80116ae <xPhyStartAutoNegotiation+0x1e2>
 8011686:	a201      	add	r2, pc, #4	; (adr r2, 801168c <xPhyStartAutoNegotiation+0x1c0>)
 8011688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801168c:	080116a5 	.word	0x080116a5
 8011690:	080116af 	.word	0x080116af
 8011694:	080116af 	.word	0x080116af
 8011698:	080116af 	.word	0x080116af
 801169c:	080116a5 	.word	0x080116a5
 80116a0:	080116af 	.word	0x080116af
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	f043 0302 	orr.w	r3, r3, #2
 80116aa:	61fb      	str	r3, [r7, #28]
                        break;
 80116ac:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	f003 0307 	and.w	r3, r3, #7
 80116b4:	3b01      	subs	r3, #1
 80116b6:	2b05      	cmp	r3, #5
 80116b8:	d83c      	bhi.n	8011734 <xPhyStartAutoNegotiation+0x268>
 80116ba:	a201      	add	r2, pc, #4	; (adr r2, 80116c0 <xPhyStartAutoNegotiation+0x1f4>)
 80116bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116c0:	08011735 	.word	0x08011735
 80116c4:	08011735 	.word	0x08011735
 80116c8:	08011735 	.word	0x08011735
 80116cc:	08011735 	.word	0x08011735
 80116d0:	080116d9 	.word	0x080116d9
 80116d4:	080116d9 	.word	0x080116d9
                    case 0x05:
                    case 0x06:
/*	[101] = 10BASE-T full-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        /* Full duplex. */
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	f043 0304 	orr.w	r3, r3, #4
 80116de:	61fb      	str	r3, [r7, #28]
                        break;
 80116e0:	e028      	b.n	8011734 <xPhyStartAutoNegotiation+0x268>
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 80116e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116e4:	f7ff fc66 	bl	8010fb4 <xHas_1F_PHYSPCS>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d01b      	beq.n	8011726 <xPhyStartAutoNegotiation+0x25a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f107 0208 	add.w	r2, r7, #8
 80116f6:	211f      	movs	r1, #31
 80116f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116fa:	4798      	blx	r3
                ulRegValue = 0;
 80116fc:	2300      	movs	r3, #0
 80116fe:	61fb      	str	r3, [r7, #28]

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	f003 0310 	and.w	r3, r3, #16
 8011706:	2b00      	cmp	r3, #0
 8011708:	d003      	beq.n	8011712 <xPhyStartAutoNegotiation+0x246>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	f043 0304 	orr.w	r3, r3, #4
 8011710:	61fb      	str	r3, [r7, #28]
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	f003 030c 	and.w	r3, r3, #12
 8011718:	2b04      	cmp	r3, #4
 801171a:	d10b      	bne.n	8011734 <xPhyStartAutoNegotiation+0x268>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	f043 0302 	orr.w	r3, r3, #2
 8011722:	61fb      	str	r3, [r7, #28]
 8011724:	e006      	b.n	8011734 <xPhyStartAutoNegotiation+0x268>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	f107 021c 	add.w	r2, r7, #28
 801172e:	2110      	movs	r1, #16
 8011730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011732:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08lx: %s duplex %u mbit %s status\n",
 8011734:	69f9      	ldr	r1, [r7, #28]
 8011736:	69fb      	ldr	r3, [r7, #28]
 8011738:	f003 0304 	and.w	r3, r3, #4
 801173c:	2b00      	cmp	r3, #0
 801173e:	d001      	beq.n	8011744 <xPhyStartAutoNegotiation+0x278>
 8011740:	4a24      	ldr	r2, [pc, #144]	; (80117d4 <xPhyStartAutoNegotiation+0x308>)
 8011742:	e000      	b.n	8011746 <xPhyStartAutoNegotiation+0x27a>
 8011744:	4a24      	ldr	r2, [pc, #144]	; (80117d8 <xPhyStartAutoNegotiation+0x30c>)
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	f003 0302 	and.w	r3, r3, #2
 801174c:	2b00      	cmp	r3, #0
 801174e:	d001      	beq.n	8011754 <xPhyStartAutoNegotiation+0x288>
 8011750:	200a      	movs	r0, #10
 8011752:	e000      	b.n	8011756 <xPhyStartAutoNegotiation+0x28a>
 8011754:	2064      	movs	r0, #100	; 0x64
 8011756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011758:	f043 0304 	orr.w	r3, r3, #4
 801175c:	633b      	str	r3, [r7, #48]	; 0x30
 801175e:	4b1f      	ldr	r3, [pc, #124]	; (80117dc <xPhyStartAutoNegotiation+0x310>)
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	4603      	mov	r3, r0
 8011764:	481e      	ldr	r0, [pc, #120]	; (80117e0 <xPhyStartAutoNegotiation+0x314>)
 8011766:	f7ef f989 	bl	8000a7c <vLoggingPrintf>
                               ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( ulPHYLinkStatus |= phyBMSR_LINK_STATUS ) != 0 ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	f003 0304 	and.w	r3, r3, #4
 8011770:	2b00      	cmp	r3, #0
 8011772:	d004      	beq.n	801177e <xPhyStartAutoNegotiation+0x2b2>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2202      	movs	r2, #2
 8011778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801177c:	e003      	b.n	8011786 <xPhyStartAutoNegotiation+0x2ba>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2201      	movs	r2, #1
 8011782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	f003 0302 	and.w	r3, r3, #2
 801178c:	2b00      	cmp	r3, #0
 801178e:	d004      	beq.n	801179a <xPhyStartAutoNegotiation+0x2ce>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2201      	movs	r2, #1
 8011794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8011798:	e005      	b.n	80117a6 <xPhyStartAutoNegotiation+0x2da>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2202      	movs	r2, #2
 801179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80117a2:	e000      	b.n	80117a6 <xPhyStartAutoNegotiation+0x2da>
                continue;
 80117a4:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80117a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a8:	3301      	adds	r3, #1
 80117aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ae:	005b      	lsls	r3, r3, #1
 80117b0:	637b      	str	r3, [r7, #52]	; 0x34
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b6:	461a      	mov	r2, r3
 80117b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117ba:	4293      	cmp	r3, r2
 80117bc:	f4ff af1e 	bcc.w	80115fc <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 80117c0:	2300      	movs	r3, #0
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3740      	adds	r7, #64	; 0x40
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	08016ad0 	.word	0x08016ad0
 80117d0:	00221560 	.word	0x00221560
 80117d4:	08016b14 	.word	0x08016b14
 80117d8:	08016b1c 	.word	0x08016b1c
 80117dc:	08016b24 	.word	0x08016b24
 80117e0:	08016b2c 	.word	0x08016b2c

080117e4 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b088      	sub	sp, #32
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 80117ee:	2301      	movs	r3, #1
 80117f0:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 80117f2:	2300      	movs	r3, #0
 80117f4:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	dd2b      	ble.n	8011854 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	331c      	adds	r3, #28
 8011800:	4618      	mov	r0, r3
 8011802:	f7f4 fedb 	bl	80065bc <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f643 2298 	movw	r2, #15000	; 0x3a98
 801180c:	625a      	str	r2, [r3, #36]	; 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801180e:	2300      	movs	r3, #0
 8011810:	61bb      	str	r3, [r7, #24]
 8011812:	e019      	b.n	8011848 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011818:	69fb      	ldr	r3, [r7, #28]
 801181a:	4013      	ands	r3, r2
 801181c:	2b00      	cmp	r3, #0
 801181e:	d10d      	bne.n	801183c <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	431a      	orrs	r2, r3
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	635a      	str	r2, [r3, #52]	; 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011830:	4619      	mov	r1, r3
 8011832:	4842      	ldr	r0, [pc, #264]	; (801193c <xPhyCheckLinkStatus+0x158>)
 8011834:	f7ef f922 	bl	8000a7c <vLoggingPrintf>
                xNeedCheck = pdTRUE;
 8011838:	2301      	movs	r3, #1
 801183a:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801183c:	69bb      	ldr	r3, [r7, #24]
 801183e:	3301      	adds	r3, #1
 8011840:	61bb      	str	r3, [r7, #24]
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	005b      	lsls	r3, r3, #1
 8011846:	61fb      	str	r3, [r7, #28]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801184c:	69ba      	ldr	r2, [r7, #24]
 801184e:	429a      	cmp	r2, r3
 8011850:	dbe0      	blt.n	8011814 <xPhyCheckLinkStatus+0x30>
 8011852:	e06e      	b.n	8011932 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f103 021c 	add.w	r2, r3, #28
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	3324      	adds	r3, #36	; 0x24
 801185e:	4619      	mov	r1, r3
 8011860:	4610      	mov	r0, r2
 8011862:	f7f4 fee3 	bl	800662c <xTaskCheckForTimeOut>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d062      	beq.n	8011932 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801186c:	2300      	movs	r3, #0
 801186e:	61bb      	str	r3, [r7, #24]
 8011870:	e045      	b.n	80118fe <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	4413      	add	r3, r2
 8011878:	3318      	adds	r3, #24
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f107 020c 	add.w	r2, r7, #12
 8011886:	2101      	movs	r1, #1
 8011888:	6938      	ldr	r0, [r7, #16]
 801188a:	4798      	blx	r3
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d12f      	bne.n	80118f2 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011896:	69fb      	ldr	r3, [r7, #28]
 8011898:	4013      	ands	r3, r2
 801189a:	2b00      	cmp	r3, #0
 801189c:	bf14      	ite	ne
 801189e:	2301      	movne	r3, #1
 80118a0:	2300      	moveq	r3, #0
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f003 0304 	and.w	r3, r3, #4
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	bf14      	ite	ne
 80118ae:	2301      	movne	r3, #1
 80118b0:	2300      	moveq	r3, #0
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	4053      	eors	r3, r2
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d01a      	beq.n	80118f2 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f003 0304 	and.w	r3, r3, #4
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d006      	beq.n	80118d4 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	431a      	orrs	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	635a      	str	r2, [r3, #52]	; 0x34
 80118d2:	e006      	b.n	80118e2 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118d8:	69fb      	ldr	r3, [r7, #28]
 80118da:	43db      	mvns	r3, r3
 80118dc:	401a      	ands	r2, r3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	635a      	str	r2, [r3, #52]	; 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118e6:	4619      	mov	r1, r3
 80118e8:	4814      	ldr	r0, [pc, #80]	; (801193c <xPhyCheckLinkStatus+0x158>)
 80118ea:	f7ef f8c7 	bl	8000a7c <vLoggingPrintf>
                    xNeedCheck = pdTRUE;
 80118ee:	2301      	movs	r3, #1
 80118f0:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80118f2:	69bb      	ldr	r3, [r7, #24]
 80118f4:	3301      	adds	r3, #1
 80118f6:	61bb      	str	r3, [r7, #24]
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	61fb      	str	r3, [r7, #28]
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011902:	69ba      	ldr	r2, [r7, #24]
 8011904:	429a      	cmp	r2, r3
 8011906:	dbb4      	blt.n	8011872 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	331c      	adds	r3, #28
 801190c:	4618      	mov	r0, r3
 801190e:	f7f4 fe55 	bl	80065bc <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	085b      	lsrs	r3, r3, #1
 801191a:	4013      	ands	r3, r2
 801191c:	2b00      	cmp	r3, #0
 801191e:	d004      	beq.n	801192a <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f643 2298 	movw	r2, #15000	; 0x3a98
 8011926:	625a      	str	r2, [r3, #36]	; 0x24
 8011928:	e003      	b.n	8011932 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011930:	625a      	str	r2, [r3, #36]	; 0x24
        }
    }

    return xNeedCheck;
 8011932:	697b      	ldr	r3, [r7, #20]
}
 8011934:	4618      	mov	r0, r3
 8011936:	3720      	adds	r7, #32
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	08016b60 	.word	0x08016b60

08011940 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 8011946:	4b34      	ldr	r3, [pc, #208]	; (8011a18 <xNetworkBuffersInitialise+0xd8>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d156      	bne.n	80119fc <xNetworkBuffersInitialise+0xbc>
    {
        xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 801194e:	213c      	movs	r1, #60	; 0x3c
 8011950:	203c      	movs	r0, #60	; 0x3c
 8011952:	f7f3 fb75 	bl	8005040 <xQueueCreateCountingSemaphore>
 8011956:	4602      	mov	r2, r0
 8011958:	4b2f      	ldr	r3, [pc, #188]	; (8011a18 <xNetworkBuffersInitialise+0xd8>)
 801195a:	601a      	str	r2, [r3, #0]
        configASSERT( xNetworkBufferSemaphore != NULL );
 801195c:	4b2e      	ldr	r3, [pc, #184]	; (8011a18 <xNetworkBuffersInitialise+0xd8>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d103      	bne.n	801196c <xNetworkBuffersInitialise+0x2c>
 8011964:	492d      	ldr	r1, [pc, #180]	; (8011a1c <xNetworkBuffersInitialise+0xdc>)
 8011966:	206a      	movs	r0, #106	; 0x6a
 8011968:	f7ef f8b1 	bl	8000ace <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 801196c:	4b2a      	ldr	r3, [pc, #168]	; (8011a18 <xNetworkBuffersInitialise+0xd8>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d043      	beq.n	80119fc <xNetworkBuffersInitialise+0xbc>
        {
            #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 8011974:	4b28      	ldr	r3, [pc, #160]	; (8011a18 <xNetworkBuffersInitialise+0xd8>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	4929      	ldr	r1, [pc, #164]	; (8011a20 <xNetworkBuffersInitialise+0xe0>)
 801197a:	4618      	mov	r0, r3
 801197c:	f7f4 f86a 	bl	8005a54 <vQueueAddToRegistry>
                    vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
                    vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
                }
            #endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

            vListInitialise( &xFreeBuffersList );
 8011980:	4828      	ldr	r0, [pc, #160]	; (8011a24 <xNetworkBuffersInitialise+0xe4>)
 8011982:	f7f3 f9d9 	bl	8004d38 <vListInitialise>

            /* Initialise all the network buffers.  No storage is allocated to
             * the buffers yet. */
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8011986:	2300      	movs	r3, #0
 8011988:	603b      	str	r3, [r7, #0]
 801198a:	e031      	b.n	80119f0 <xNetworkBuffersInitialise+0xb0>
            {
                /* Initialise and set the owner of the buffer list items. */
                xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 801198c:	4926      	ldr	r1, [pc, #152]	; (8011a28 <xNetworkBuffersInitialise+0xe8>)
 801198e:	683a      	ldr	r2, [r7, #0]
 8011990:	4613      	mov	r3, r2
 8011992:	009b      	lsls	r3, r3, #2
 8011994:	4413      	add	r3, r2
 8011996:	00db      	lsls	r3, r3, #3
 8011998:	440b      	add	r3, r1
 801199a:	3318      	adds	r3, #24
 801199c:	2200      	movs	r2, #0
 801199e:	601a      	str	r2, [r3, #0]
                vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80119a0:	683a      	ldr	r2, [r7, #0]
 80119a2:	4613      	mov	r3, r2
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	4413      	add	r3, r2
 80119a8:	00db      	lsls	r3, r3, #3
 80119aa:	4a1f      	ldr	r2, [pc, #124]	; (8011a28 <xNetworkBuffersInitialise+0xe8>)
 80119ac:	4413      	add	r3, r2
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7f3 f9e2 	bl	8004d78 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 80119b4:	683a      	ldr	r2, [r7, #0]
 80119b6:	4613      	mov	r3, r2
 80119b8:	009b      	lsls	r3, r3, #2
 80119ba:	4413      	add	r3, r2
 80119bc:	00db      	lsls	r3, r3, #3
 80119be:	4a1a      	ldr	r2, [pc, #104]	; (8011a28 <xNetworkBuffersInitialise+0xe8>)
 80119c0:	1899      	adds	r1, r3, r2
 80119c2:	4819      	ldr	r0, [pc, #100]	; (8011a28 <xNetworkBuffersInitialise+0xe8>)
 80119c4:	683a      	ldr	r2, [r7, #0]
 80119c6:	4613      	mov	r3, r2
 80119c8:	009b      	lsls	r3, r3, #2
 80119ca:	4413      	add	r3, r2
 80119cc:	00db      	lsls	r3, r3, #3
 80119ce:	4403      	add	r3, r0
 80119d0:	330c      	adds	r3, #12
 80119d2:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80119d4:	683a      	ldr	r2, [r7, #0]
 80119d6:	4613      	mov	r3, r2
 80119d8:	009b      	lsls	r3, r3, #2
 80119da:	4413      	add	r3, r2
 80119dc:	00db      	lsls	r3, r3, #3
 80119de:	4a12      	ldr	r2, [pc, #72]	; (8011a28 <xNetworkBuffersInitialise+0xe8>)
 80119e0:	4413      	add	r3, r2
 80119e2:	4619      	mov	r1, r3
 80119e4:	480f      	ldr	r0, [pc, #60]	; (8011a24 <xNetworkBuffersInitialise+0xe4>)
 80119e6:	f7f3 f9f8 	bl	8004dda <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	3301      	adds	r3, #1
 80119ee:	603b      	str	r3, [r7, #0]
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	2b3b      	cmp	r3, #59	; 0x3b
 80119f4:	d9ca      	bls.n	801198c <xNetworkBuffersInitialise+0x4c>
            }

            uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80119f6:	4b0d      	ldr	r3, [pc, #52]	; (8011a2c <xNetworkBuffersInitialise+0xec>)
 80119f8:	223c      	movs	r2, #60	; 0x3c
 80119fa:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 80119fc:	4b06      	ldr	r3, [pc, #24]	; (8011a18 <xNetworkBuffersInitialise+0xd8>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d102      	bne.n	8011a0a <xNetworkBuffersInitialise+0xca>
    {
        xReturn = pdFAIL;
 8011a04:	2300      	movs	r3, #0
 8011a06:	607b      	str	r3, [r7, #4]
 8011a08:	e001      	b.n	8011a0e <xNetworkBuffersInitialise+0xce>
    }
    else
    {
        xReturn = pdPASS;
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8011a0e:	687b      	ldr	r3, [r7, #4]
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}
 8011a18:	20027024 	.word	0x20027024
 8011a1c:	08016b88 	.word	0x08016b88
 8011a20:	08016bd8 	.word	0x08016bd8
 8011a24:	200266ac 	.word	0x200266ac
 8011a28:	200266c4 	.word	0x200266c4
 8011a2c:	200266c0 	.word	0x200266c0

08011a30 <vReleaseNetworkBuffer>:
    return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t * pucEthernetBuffer )
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
    /* There is space before the Ethernet buffer in which a pointer to the
     * network buffer that references this Ethernet buffer is stored.  Remove the
     * space before freeing the buffer. */
    if( pucEthernetBuffer != NULL )
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d005      	beq.n	8011a4a <vReleaseNetworkBuffer+0x1a>
    {
        pucEthernetBuffer -= ipBUFFER_PADDING;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	3b0a      	subs	r3, #10
 8011a42:	607b      	str	r3, [r7, #4]
        vPortFree( ( void * ) pucEthernetBuffer );
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7f5 fe07 	bl	8007658 <vPortFree>
    }
}
 8011a4a:	bf00      	nop
 8011a4c:	3708      	adds	r7, #8
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
	...

08011a54 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	60fb      	str	r3, [r7, #12]
    size_t uxCount;

    if( xNetworkBufferSemaphore != NULL )
 8011a62:	4b35      	ldr	r3, [pc, #212]	; (8011b38 <pxGetNetworkBufferWithDescriptor+0xe4>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d061      	beq.n	8011b2e <pxGetNetworkBufferWithDescriptor+0xda>
    {
        if( ( xRequestedSizeBytes != 0U ) && ( xRequestedSizeBytes < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d004      	beq.n	8011a7a <pxGetNetworkBufferWithDescriptor+0x26>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2b45      	cmp	r3, #69	; 0x45
 8011a74:	d801      	bhi.n	8011a7a <pxGetNetworkBufferWithDescriptor+0x26>
        {
            /* ARP packets can replace application packets, so the storage must be
             * at least large enough to hold an ARP. */
            xRequestedSizeBytes = baMINIMAL_BUFFER_SIZE;
 8011a76:	2346      	movs	r3, #70	; 0x46
 8011a78:	607b      	str	r3, [r7, #4]
        }

        /* Add 2 bytes to xRequestedSizeBytes and round up xRequestedSizeBytes
         * to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
        xRequestedSizeBytes += 2U;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	3302      	adds	r3, #2
 8011a7e:	607b      	str	r3, [r7, #4]

        if( ( xRequestedSizeBytes & ( sizeof( size_t ) - 1U ) ) != 0U )
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f003 0303 	and.w	r3, r3, #3
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d004      	beq.n	8011a94 <pxGetNetworkBufferWithDescriptor+0x40>
        {
            xRequestedSizeBytes = ( xRequestedSizeBytes | ( sizeof( size_t ) - 1U ) ) + 1U;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f043 0303 	orr.w	r3, r3, #3
 8011a90:	3301      	adds	r3, #1
 8011a92:	607b      	str	r3, [r7, #4]
        }

        /* If there is a semaphore available, there is a network buffer available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8011a94:	4b28      	ldr	r3, [pc, #160]	; (8011b38 <pxGetNetworkBufferWithDescriptor+0xe4>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	6839      	ldr	r1, [r7, #0]
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7f3 fd7a 	bl	8005594 <xQueueSemaphoreTake>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d143      	bne.n	8011b2e <pxGetNetworkBufferWithDescriptor+0xda>
        {
            /* Protect the structure as it is accessed from tasks and interrupts. */
            taskENTER_CRITICAL();
 8011aa6:	f7f5 fff7 	bl	8007a98 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8011aaa:	4b24      	ldr	r3, [pc, #144]	; (8011b3c <pxGetNetworkBufferWithDescriptor+0xe8>)
 8011aac:	68db      	ldr	r3, [r3, #12]
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	60fb      	str	r3, [r7, #12]
                ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7f3 f9c9 	bl	8004e4c <uxListRemove>
            }
            taskEXIT_CRITICAL();
 8011aba:	f7f6 f819 	bl	8007af0 <vPortExitCritical>

            /* Reading UBaseType_t, no critical section needed. */
            uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8011abe:	4b1f      	ldr	r3, [pc, #124]	; (8011b3c <pxGetNetworkBufferWithDescriptor+0xe8>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	60bb      	str	r3, [r7, #8]

            if( uxMinimumFreeNetworkBuffers > uxCount )
 8011ac4:	4b1e      	ldr	r3, [pc, #120]	; (8011b40 <pxGetNetworkBufferWithDescriptor+0xec>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	68ba      	ldr	r2, [r7, #8]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d202      	bcs.n	8011ad4 <pxGetNetworkBufferWithDescriptor+0x80>
            {
                uxMinimumFreeNetworkBuffers = uxCount;
 8011ace:	4a1c      	ldr	r2, [pc, #112]	; (8011b40 <pxGetNetworkBufferWithDescriptor+0xec>)
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	6013      	str	r3, [r2, #0]
            }

            /* Allocate storage of exactly the requested size to the buffer. */
            configASSERT( pxReturn->pucEthernetBuffer == NULL );
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	699b      	ldr	r3, [r3, #24]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d003      	beq.n	8011ae4 <pxGetNetworkBufferWithDescriptor+0x90>
 8011adc:	4919      	ldr	r1, [pc, #100]	; (8011b44 <pxGetNetworkBufferWithDescriptor+0xf0>)
 8011ade:	20fe      	movs	r0, #254	; 0xfe
 8011ae0:	f7ee fff5 	bl	8000ace <vAssertCalled>

            if( xRequestedSizeBytes > 0U )
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d021      	beq.n	8011b2e <pxGetNetworkBufferWithDescriptor+0xda>
            {
                /* Extra space is obtained so a pointer to the network buffer can
                 * be stored at the beginning of the buffer. */
                pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xRequestedSizeBytes + ipBUFFER_PADDING );
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	330a      	adds	r3, #10
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7f5 fcf4 	bl	80074dc <pvPortMalloc>
 8011af4:	4602      	mov	r2, r0
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	619a      	str	r2, [r3, #24]

                if( pxReturn->pucEthernetBuffer == NULL )
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	699b      	ldr	r3, [r3, #24]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d105      	bne.n	8011b0e <pxGetNetworkBufferWithDescriptor+0xba>
                {
                    /* The attempt to allocate storage for the buffer payload failed,
                     * so the network buffer structure cannot be used and must be
                     * released. */
                    vReleaseNetworkBufferAndDescriptor( pxReturn );
 8011b02:	68f8      	ldr	r0, [r7, #12]
 8011b04:	f000 f820 	bl	8011b48 <vReleaseNetworkBufferAndDescriptor>
                    pxReturn = NULL;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	60fb      	str	r3, [r7, #12]
 8011b0c:	e00f      	b.n	8011b2e <pxGetNetworkBufferWithDescriptor+0xda>
                {
                    /* Store a pointer to the network buffer structure in the
                     * buffer storage area, then move the buffer pointer on past the
                     * stored pointer so the pointer value is not overwritten by the
                     * application when the buffer is used. */
                    *( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	699b      	ldr	r3, [r3, #24]
 8011b12:	68fa      	ldr	r2, [r7, #12]
 8011b14:	601a      	str	r2, [r3, #0]
                    pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	699b      	ldr	r3, [r3, #24]
 8011b1a:	f103 020a 	add.w	r2, r3, #10
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	619a      	str	r2, [r3, #24]

                    /* Store the actual size of the allocated buffer, which may be
                     * greater than the original requested size. */
                    pxReturn->xDataLength = xRequestedSizeBytes;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	61da      	str	r2, [r3, #28]

                    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                        {
                            /* make sure the buffer is not linked */
                            pxReturn->pxNextBuffer = NULL;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	625a      	str	r2, [r3, #36]	; 0x24
    {
        /* No action. */
        iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
    }

    return pxReturn;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3710      	adds	r7, #16
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}
 8011b38:	20027024 	.word	0x20027024
 8011b3c:	200266ac 	.word	0x200266ac
 8011b40:	200266c0 	.word	0x200266c0
 8011b44:	08016b88 	.word	0x08016b88

08011b48 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
    /* Ensure the buffer is returned to the list of free buffers before the
    * counting semaphore is 'given' to say a buffer is available.  Release the
    * storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
    * IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
    * MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
    vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	699b      	ldr	r3, [r3, #24]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7ff ff6b 	bl	8011a30 <vReleaseNetworkBuffer>
    pxNetworkBuffer->pucEthernetBuffer = NULL;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	619a      	str	r2, [r3, #24]

    taskENTER_CRITICAL();
 8011b60:	f7f5 ff9a 	bl	8007a98 <vPortEnterCritical>
    {
        xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	691b      	ldr	r3, [r3, #16]
 8011b68:	4a0f      	ldr	r2, [pc, #60]	; (8011ba8 <vReleaseNetworkBufferAndDescriptor+0x60>)
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d101      	bne.n	8011b72 <vReleaseNetworkBufferAndDescriptor+0x2a>
 8011b6e:	2301      	movs	r3, #1
 8011b70:	e000      	b.n	8011b74 <vReleaseNetworkBufferAndDescriptor+0x2c>
 8011b72:	2300      	movs	r3, #0
 8011b74:	60fb      	str	r3, [r7, #12]

        if( xListItemAlreadyInFreeList == pdFALSE )
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d104      	bne.n	8011b86 <vReleaseNetworkBufferAndDescriptor+0x3e>
        {
            vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	4619      	mov	r1, r3
 8011b80:	4809      	ldr	r0, [pc, #36]	; (8011ba8 <vReleaseNetworkBufferAndDescriptor+0x60>)
 8011b82:	f7f3 f906 	bl	8004d92 <vListInsertEnd>
        }
    }
    taskEXIT_CRITICAL();
 8011b86:	f7f5 ffb3 	bl	8007af0 <vPortExitCritical>

    /*
     * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
     * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
     */
    if( xListItemAlreadyInFreeList == pdFALSE )
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d106      	bne.n	8011b9e <vReleaseNetworkBufferAndDescriptor+0x56>
    {
        if( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 8011b90:	4b06      	ldr	r3, [pc, #24]	; (8011bac <vReleaseNetworkBufferAndDescriptor+0x64>)
 8011b92:	6818      	ldr	r0, [r3, #0]
 8011b94:	2300      	movs	r3, #0
 8011b96:	2200      	movs	r2, #0
 8011b98:	2100      	movs	r1, #0
 8011b9a:	f7f3 fa7b 	bl	8005094 <xQueueGenericSend>
    else
    {
        /* No action. */
        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8011b9e:	bf00      	nop
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	200266ac 	.word	0x200266ac
 8011bac:	20027024 	.word	0x20027024

08011bb0 <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8011bb4:	4b03      	ldr	r3, [pc, #12]	; (8011bc4 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr
 8011bc2:	bf00      	nop
 8011bc4:	200266ac 	.word	0x200266ac

08011bc8 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8011bc8:	b480      	push	{r7}
 8011bca:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8011bcc:	4b03      	ldr	r3, [pc, #12]	; (8011bdc <uxGetMinimumFreeNetworkBuffers+0x14>)
 8011bce:	681b      	ldr	r3, [r3, #0]
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop
 8011bdc:	200266c0 	.word	0x200266c0

08011be0 <arm_rfft_fast_init_f32>:
 8011be0:	084b      	lsrs	r3, r1, #1
 8011be2:	2b80      	cmp	r3, #128	; 0x80
 8011be4:	b430      	push	{r4, r5}
 8011be6:	8201      	strh	r1, [r0, #16]
 8011be8:	8003      	strh	r3, [r0, #0]
 8011bea:	d06f      	beq.n	8011ccc <arm_rfft_fast_init_f32+0xec>
 8011bec:	d916      	bls.n	8011c1c <arm_rfft_fast_init_f32+0x3c>
 8011bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bf2:	d05e      	beq.n	8011cb2 <arm_rfft_fast_init_f32+0xd2>
 8011bf4:	d935      	bls.n	8011c62 <arm_rfft_fast_init_f32+0x82>
 8011bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011bfa:	d025      	beq.n	8011c48 <arm_rfft_fast_init_f32+0x68>
 8011bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c00:	d112      	bne.n	8011c28 <arm_rfft_fast_init_f32+0x48>
 8011c02:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8011c06:	4c37      	ldr	r4, [pc, #220]	; (8011ce4 <arm_rfft_fast_init_f32+0x104>)
 8011c08:	4937      	ldr	r1, [pc, #220]	; (8011ce8 <arm_rfft_fast_init_f32+0x108>)
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	4a37      	ldr	r2, [pc, #220]	; (8011cec <arm_rfft_fast_init_f32+0x10c>)
 8011c0e:	8185      	strh	r5, [r0, #12]
 8011c10:	6084      	str	r4, [r0, #8]
 8011c12:	6041      	str	r1, [r0, #4]
 8011c14:	6142      	str	r2, [r0, #20]
 8011c16:	b258      	sxtb	r0, r3
 8011c18:	bc30      	pop	{r4, r5}
 8011c1a:	4770      	bx	lr
 8011c1c:	2b20      	cmp	r3, #32
 8011c1e:	d030      	beq.n	8011c82 <arm_rfft_fast_init_f32+0xa2>
 8011c20:	2b40      	cmp	r3, #64	; 0x40
 8011c22:	d005      	beq.n	8011c30 <arm_rfft_fast_init_f32+0x50>
 8011c24:	2b10      	cmp	r3, #16
 8011c26:	d038      	beq.n	8011c9a <arm_rfft_fast_init_f32+0xba>
 8011c28:	23ff      	movs	r3, #255	; 0xff
 8011c2a:	bc30      	pop	{r4, r5}
 8011c2c:	b258      	sxtb	r0, r3
 8011c2e:	4770      	bx	lr
 8011c30:	2538      	movs	r5, #56	; 0x38
 8011c32:	4c2f      	ldr	r4, [pc, #188]	; (8011cf0 <arm_rfft_fast_init_f32+0x110>)
 8011c34:	492f      	ldr	r1, [pc, #188]	; (8011cf4 <arm_rfft_fast_init_f32+0x114>)
 8011c36:	2300      	movs	r3, #0
 8011c38:	4a2f      	ldr	r2, [pc, #188]	; (8011cf8 <arm_rfft_fast_init_f32+0x118>)
 8011c3a:	8185      	strh	r5, [r0, #12]
 8011c3c:	6084      	str	r4, [r0, #8]
 8011c3e:	6041      	str	r1, [r0, #4]
 8011c40:	6142      	str	r2, [r0, #20]
 8011c42:	b258      	sxtb	r0, r3
 8011c44:	bc30      	pop	{r4, r5}
 8011c46:	4770      	bx	lr
 8011c48:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8011c4c:	4c2b      	ldr	r4, [pc, #172]	; (8011cfc <arm_rfft_fast_init_f32+0x11c>)
 8011c4e:	492c      	ldr	r1, [pc, #176]	; (8011d00 <arm_rfft_fast_init_f32+0x120>)
 8011c50:	2300      	movs	r3, #0
 8011c52:	4a2c      	ldr	r2, [pc, #176]	; (8011d04 <arm_rfft_fast_init_f32+0x124>)
 8011c54:	8185      	strh	r5, [r0, #12]
 8011c56:	6084      	str	r4, [r0, #8]
 8011c58:	6041      	str	r1, [r0, #4]
 8011c5a:	6142      	str	r2, [r0, #20]
 8011c5c:	b258      	sxtb	r0, r3
 8011c5e:	bc30      	pop	{r4, r5}
 8011c60:	4770      	bx	lr
 8011c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c66:	d1df      	bne.n	8011c28 <arm_rfft_fast_init_f32+0x48>
 8011c68:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8011c6c:	4c26      	ldr	r4, [pc, #152]	; (8011d08 <arm_rfft_fast_init_f32+0x128>)
 8011c6e:	4927      	ldr	r1, [pc, #156]	; (8011d0c <arm_rfft_fast_init_f32+0x12c>)
 8011c70:	2300      	movs	r3, #0
 8011c72:	4a27      	ldr	r2, [pc, #156]	; (8011d10 <arm_rfft_fast_init_f32+0x130>)
 8011c74:	8185      	strh	r5, [r0, #12]
 8011c76:	6084      	str	r4, [r0, #8]
 8011c78:	6041      	str	r1, [r0, #4]
 8011c7a:	6142      	str	r2, [r0, #20]
 8011c7c:	b258      	sxtb	r0, r3
 8011c7e:	bc30      	pop	{r4, r5}
 8011c80:	4770      	bx	lr
 8011c82:	2530      	movs	r5, #48	; 0x30
 8011c84:	4c23      	ldr	r4, [pc, #140]	; (8011d14 <arm_rfft_fast_init_f32+0x134>)
 8011c86:	4924      	ldr	r1, [pc, #144]	; (8011d18 <arm_rfft_fast_init_f32+0x138>)
 8011c88:	2300      	movs	r3, #0
 8011c8a:	4a24      	ldr	r2, [pc, #144]	; (8011d1c <arm_rfft_fast_init_f32+0x13c>)
 8011c8c:	8185      	strh	r5, [r0, #12]
 8011c8e:	6084      	str	r4, [r0, #8]
 8011c90:	6041      	str	r1, [r0, #4]
 8011c92:	6142      	str	r2, [r0, #20]
 8011c94:	b258      	sxtb	r0, r3
 8011c96:	bc30      	pop	{r4, r5}
 8011c98:	4770      	bx	lr
 8011c9a:	2514      	movs	r5, #20
 8011c9c:	4c20      	ldr	r4, [pc, #128]	; (8011d20 <arm_rfft_fast_init_f32+0x140>)
 8011c9e:	4921      	ldr	r1, [pc, #132]	; (8011d24 <arm_rfft_fast_init_f32+0x144>)
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	4a21      	ldr	r2, [pc, #132]	; (8011d28 <arm_rfft_fast_init_f32+0x148>)
 8011ca4:	8185      	strh	r5, [r0, #12]
 8011ca6:	6084      	str	r4, [r0, #8]
 8011ca8:	6041      	str	r1, [r0, #4]
 8011caa:	6142      	str	r2, [r0, #20]
 8011cac:	b258      	sxtb	r0, r3
 8011cae:	bc30      	pop	{r4, r5}
 8011cb0:	4770      	bx	lr
 8011cb2:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8011cb6:	4c1d      	ldr	r4, [pc, #116]	; (8011d2c <arm_rfft_fast_init_f32+0x14c>)
 8011cb8:	491d      	ldr	r1, [pc, #116]	; (8011d30 <arm_rfft_fast_init_f32+0x150>)
 8011cba:	2300      	movs	r3, #0
 8011cbc:	4a1d      	ldr	r2, [pc, #116]	; (8011d34 <arm_rfft_fast_init_f32+0x154>)
 8011cbe:	8185      	strh	r5, [r0, #12]
 8011cc0:	6084      	str	r4, [r0, #8]
 8011cc2:	6041      	str	r1, [r0, #4]
 8011cc4:	6142      	str	r2, [r0, #20]
 8011cc6:	b258      	sxtb	r0, r3
 8011cc8:	bc30      	pop	{r4, r5}
 8011cca:	4770      	bx	lr
 8011ccc:	25d0      	movs	r5, #208	; 0xd0
 8011cce:	4c1a      	ldr	r4, [pc, #104]	; (8011d38 <arm_rfft_fast_init_f32+0x158>)
 8011cd0:	491a      	ldr	r1, [pc, #104]	; (8011d3c <arm_rfft_fast_init_f32+0x15c>)
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	4a1a      	ldr	r2, [pc, #104]	; (8011d40 <arm_rfft_fast_init_f32+0x160>)
 8011cd6:	8185      	strh	r5, [r0, #12]
 8011cd8:	6084      	str	r4, [r0, #8]
 8011cda:	6041      	str	r1, [r0, #4]
 8011cdc:	6142      	str	r2, [r0, #20]
 8011cde:	b258      	sxtb	r0, r3
 8011ce0:	bc30      	pop	{r4, r5}
 8011ce2:	4770      	bx	lr
 8011ce4:	08025aa0 	.word	0x08025aa0
 8011ce8:	08016c98 	.word	0x08016c98
 8011cec:	0801ce08 	.word	0x0801ce08
 8011cf0:	0801ad98 	.word	0x0801ad98
 8011cf4:	08027860 	.word	0x08027860
 8011cf8:	08029d50 	.word	0x08029d50
 8011cfc:	08023788 	.word	0x08023788
 8011d00:	08021688 	.word	0x08021688
 8011d04:	0801ae08 	.word	0x0801ae08
 8011d08:	080299e0 	.word	0x080299e0
 8011d0c:	08020e08 	.word	0x08020e08
 8011d10:	08027a60 	.word	0x08027a60
 8011d14:	08024640 	.word	0x08024640
 8011d18:	08023688 	.word	0x08023688
 8011d1c:	0801ac98 	.word	0x0801ac98
 8011d20:	08024598 	.word	0x08024598
 8011d24:	08021608 	.word	0x08021608
 8011d28:	080245c0 	.word	0x080245c0
 8011d2c:	08028260 	.word	0x08028260
 8011d30:	08024aa0 	.word	0x08024aa0
 8011d34:	080285e0 	.word	0x080285e0
 8011d38:	08029f50 	.word	0x08029f50
 8011d3c:	080246a0 	.word	0x080246a0
 8011d40:	080295e0 	.word	0x080295e0

08011d44 <arm_rfft_fast_f32>:
 8011d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d48:	8a05      	ldrh	r5, [r0, #16]
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	4690      	mov	r8, r2
 8011d4e:	460c      	mov	r4, r1
 8011d50:	086d      	lsrs	r5, r5, #1
 8011d52:	8005      	strh	r5, [r0, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d15e      	bne.n	8011e16 <arm_rfft_fast_f32+0xd2>
 8011d58:	461a      	mov	r2, r3
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	f000 fbe0 	bl	8012520 <arm_cfft_f32>
 8011d60:	edd4 7a00 	vldr	s15, [r4]
 8011d64:	ed94 7a01 	vldr	s14, [r4, #4]
 8011d68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011d6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011d70:	8837      	ldrh	r7, [r6, #0]
 8011d72:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011d76:	6975      	ldr	r5, [r6, #20]
 8011d78:	3f01      	subs	r7, #1
 8011d7a:	eef0 3a46 	vmov.f32	s7, s12
 8011d7e:	3510      	adds	r5, #16
 8011d80:	f108 0610 	add.w	r6, r8, #16
 8011d84:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011d88:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8011d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d90:	f104 0310 	add.w	r3, r4, #16
 8011d94:	3808      	subs	r0, #8
 8011d96:	ee26 7a86 	vmul.f32	s14, s13, s12
 8011d9a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011d9e:	ed88 7a00 	vstr	s14, [r8]
 8011da2:	edc8 7a01 	vstr	s15, [r8, #4]
 8011da6:	edd0 6a02 	vldr	s13, [r0, #8]
 8011daa:	3f01      	subs	r7, #1
 8011dac:	ed13 5a02 	vldr	s10, [r3, #-8]
 8011db0:	f1a0 0008 	sub.w	r0, r0, #8
 8011db4:	ed13 7a01 	vldr	s14, [r3, #-4]
 8011db8:	f105 0508 	add.w	r5, r5, #8
 8011dbc:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8011dc0:	ed15 6a04 	vldr	s12, [r5, #-16]
 8011dc4:	edd0 5a05 	vldr	s11, [r0, #20]
 8011dc8:	ee36 5a85 	vadd.f32	s10, s13, s10
 8011dcc:	ed55 6a03 	vldr	s13, [r5, #-12]
 8011dd0:	f103 0308 	add.w	r3, r3, #8
 8011dd4:	ee35 4a87 	vadd.f32	s8, s11, s14
 8011dd8:	f106 0608 	add.w	r6, r6, #8
 8011ddc:	ee66 4a27 	vmul.f32	s9, s12, s15
 8011de0:	ee77 5a65 	vsub.f32	s11, s14, s11
 8011de4:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8011de8:	ee34 5a85 	vadd.f32	s10, s9, s10
 8011dec:	ee26 6a04 	vmul.f32	s12, s12, s8
 8011df0:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011df4:	ee77 7a25 	vadd.f32	s15, s14, s11
 8011df8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011dfc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011e00:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011e04:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011e08:	ed46 6a04 	vstr	s13, [r6, #-16]
 8011e0c:	ed46 7a03 	vstr	s15, [r6, #-12]
 8011e10:	d1c9      	bne.n	8011da6 <arm_rfft_fast_f32+0x62>
 8011e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e16:	edd1 7a00 	vldr	s15, [r1]
 8011e1a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8011e1e:	edd1 6a01 	vldr	s13, [r1, #4]
 8011e22:	1e68      	subs	r0, r5, #1
 8011e24:	6975      	ldr	r5, [r6, #20]
 8011e26:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011e2a:	00c1      	lsls	r1, r0, #3
 8011e2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e30:	ee27 7a23 	vmul.f32	s14, s14, s7
 8011e34:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011e38:	ed82 7a00 	vstr	s14, [r2]
 8011e3c:	edc2 7a01 	vstr	s15, [r2, #4]
 8011e40:	b3e0      	cbz	r0, 8011ebc <arm_rfft_fast_f32+0x178>
 8011e42:	3908      	subs	r1, #8
 8011e44:	f104 0210 	add.w	r2, r4, #16
 8011e48:	3510      	adds	r5, #16
 8011e4a:	440c      	add	r4, r1
 8011e4c:	f108 0110 	add.w	r1, r8, #16
 8011e50:	ed94 7a02 	vldr	s14, [r4, #8]
 8011e54:	3801      	subs	r0, #1
 8011e56:	ed52 6a02 	vldr	s13, [r2, #-8]
 8011e5a:	f1a4 0408 	sub.w	r4, r4, #8
 8011e5e:	ed15 6a02 	vldr	s12, [r5, #-8]
 8011e62:	f102 0208 	add.w	r2, r2, #8
 8011e66:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8011e6a:	ed94 4a05 	vldr	s8, [r4, #20]
 8011e6e:	ed12 5a03 	vldr	s10, [r2, #-12]
 8011e72:	ee77 6a26 	vadd.f32	s13, s14, s13
 8011e76:	ed55 5a01 	vldr	s11, [r5, #-4]
 8011e7a:	f101 0108 	add.w	r1, r1, #8
 8011e7e:	ee26 3a27 	vmul.f32	s6, s12, s15
 8011e82:	f105 0508 	add.w	r5, r5, #8
 8011e86:	ee74 4a05 	vadd.f32	s9, s8, s10
 8011e8a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8011e8e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011e92:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011e96:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011e9a:	ee77 7a05 	vadd.f32	s15, s14, s10
 8011e9e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8011ea2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011ea6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8011eaa:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011eae:	ee27 7a23 	vmul.f32	s14, s14, s7
 8011eb2:	ed41 7a03 	vstr	s15, [r1, #-12]
 8011eb6:	ed01 7a04 	vstr	s14, [r1, #-16]
 8011eba:	d1c9      	bne.n	8011e50 <arm_rfft_fast_f32+0x10c>
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	4641      	mov	r1, r8
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ec8:	f000 bb2a 	b.w	8012520 <arm_cfft_f32>

08011ecc <arm_cfft_radix8by2_f32>:
 8011ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed0:	ed2d 8b06 	vpush	{d8-d10}
 8011ed4:	f8b0 e000 	ldrh.w	lr, [r0]
 8011ed8:	4607      	mov	r7, r0
 8011eda:	6842      	ldr	r2, [r0, #4]
 8011edc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8011ee0:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8011ee4:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8011ee8:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8011eec:	f000 80af 	beq.w	801204e <arm_cfft_radix8by2_f32+0x182>
 8011ef0:	3310      	adds	r3, #16
 8011ef2:	3210      	adds	r2, #16
 8011ef4:	f101 0610 	add.w	r6, r1, #16
 8011ef8:	f108 0510 	add.w	r5, r8, #16
 8011efc:	18cc      	adds	r4, r1, r3
 8011efe:	4443      	add	r3, r8
 8011f00:	ed55 6a04 	vldr	s13, [r5, #-16]
 8011f04:	f1be 0e01 	subs.w	lr, lr, #1
 8011f08:	ed56 4a04 	vldr	s9, [r6, #-16]
 8011f0c:	f104 0410 	add.w	r4, r4, #16
 8011f10:	ed55 7a02 	vldr	s15, [r5, #-8]
 8011f14:	f106 0610 	add.w	r6, r6, #16
 8011f18:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8011f1c:	ed53 0a04 	vldr	s1, [r3, #-16]
 8011f20:	ed13 5a03 	vldr	s10, [r3, #-12]
 8011f24:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8011f28:	ed13 3a02 	vldr	s6, [r3, #-8]
 8011f2c:	f102 0210 	add.w	r2, r2, #16
 8011f30:	ed15 7a03 	vldr	s14, [r5, #-12]
 8011f34:	f103 0310 	add.w	r3, r3, #16
 8011f38:	ed55 2a01 	vldr	s5, [r5, #-4]
 8011f3c:	f105 0510 	add.w	r5, r5, #16
 8011f40:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8011f44:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8011f48:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8011f4c:	ee33 8a83 	vadd.f32	s16, s7, s6
 8011f50:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8011f54:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8011f58:	ee34 0a06 	vadd.f32	s0, s8, s12
 8011f5c:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8011f60:	ee76 aa87 	vadd.f32	s21, s13, s14
 8011f64:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8011f68:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011f6c:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8011f70:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8011f74:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8011f78:	ee71 8a05 	vadd.f32	s17, s2, s10
 8011f7c:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8011f80:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8011f84:	ee72 9a22 	vadd.f32	s19, s4, s5
 8011f88:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8011f8c:	ee35 5a41 	vsub.f32	s10, s10, s2
 8011f90:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8011f94:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8011f98:	ee36 6a44 	vsub.f32	s12, s12, s8
 8011f9c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8011fa0:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8011fa4:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8011fa8:	ee72 7a62 	vsub.f32	s15, s4, s5
 8011fac:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8011fb0:	ee73 2a63 	vsub.f32	s5, s6, s7
 8011fb4:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8011fb8:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8011fbc:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8011fc0:	ee24 3a84 	vmul.f32	s6, s9, s8
 8011fc4:	ee27 2a26 	vmul.f32	s4, s14, s13
 8011fc8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8011fcc:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8011fd0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011fd4:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011fd8:	ee65 6a26 	vmul.f32	s13, s10, s13
 8011fdc:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011fe0:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011fe4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011fe8:	ee33 4a02 	vadd.f32	s8, s6, s4
 8011fec:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8011ff0:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8011ff4:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8011ff8:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8011ffc:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8012000:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8012004:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8012008:	ee61 4aa6 	vmul.f32	s9, s3, s13
 801200c:	ee27 4a87 	vmul.f32	s8, s15, s14
 8012010:	ee61 5a87 	vmul.f32	s11, s3, s14
 8012014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012018:	ee22 5a87 	vmul.f32	s10, s5, s14
 801201c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012020:	ee26 6a26 	vmul.f32	s12, s12, s13
 8012024:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8012028:	ee74 4a84 	vadd.f32	s9, s9, s8
 801202c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012030:	ee35 6a46 	vsub.f32	s12, s10, s12
 8012034:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012038:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 801203c:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8012040:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8012044:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8012048:	f47f af5a 	bne.w	8011f00 <arm_cfft_radix8by2_f32+0x34>
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	fa1f f48c 	uxth.w	r4, ip
 8012052:	4608      	mov	r0, r1
 8012054:	2302      	movs	r3, #2
 8012056:	4621      	mov	r1, r4
 8012058:	f000 fbc2 	bl	80127e0 <arm_radix8_butterfly_f32>
 801205c:	4640      	mov	r0, r8
 801205e:	4621      	mov	r1, r4
 8012060:	687a      	ldr	r2, [r7, #4]
 8012062:	2302      	movs	r3, #2
 8012064:	ecbd 8b06 	vpop	{d8-d10}
 8012068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801206c:	f000 bbb8 	b.w	80127e0 <arm_radix8_butterfly_f32>

08012070 <arm_cfft_radix8by4_f32>:
 8012070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012074:	ed2d 8b06 	vpush	{d8-d10}
 8012078:	8804      	ldrh	r4, [r0, #0]
 801207a:	b08f      	sub	sp, #60	; 0x3c
 801207c:	ed91 6a00 	vldr	s12, [r1]
 8012080:	460a      	mov	r2, r1
 8012082:	0864      	lsrs	r4, r4, #1
 8012084:	ed91 7a01 	vldr	s14, [r1, #4]
 8012088:	9101      	str	r1, [sp, #4]
 801208a:	00a3      	lsls	r3, r4, #2
 801208c:	9104      	str	r1, [sp, #16]
 801208e:	0864      	lsrs	r4, r4, #1
 8012090:	6841      	ldr	r1, [r0, #4]
 8012092:	900c      	str	r0, [sp, #48]	; 0x30
 8012094:	4625      	mov	r5, r4
 8012096:	940b      	str	r4, [sp, #44]	; 0x2c
 8012098:	f101 0408 	add.w	r4, r1, #8
 801209c:	f101 0610 	add.w	r6, r1, #16
 80120a0:	9406      	str	r4, [sp, #24]
 80120a2:	18d4      	adds	r4, r2, r3
 80120a4:	1eaa      	subs	r2, r5, #2
 80120a6:	f101 0518 	add.w	r5, r1, #24
 80120aa:	18e0      	adds	r0, r4, r3
 80120ac:	ed94 4a00 	vldr	s8, [r4]
 80120b0:	edd4 3a01 	vldr	s7, [r4, #4]
 80120b4:	46a6      	mov	lr, r4
 80120b6:	edd0 6a00 	vldr	s13, [r0]
 80120ba:	18c7      	adds	r7, r0, r3
 80120bc:	edd0 7a01 	vldr	s15, [r0, #4]
 80120c0:	46a0      	mov	r8, r4
 80120c2:	ee76 5a26 	vadd.f32	s11, s12, s13
 80120c6:	edd7 4a00 	vldr	s9, [r7]
 80120ca:	9402      	str	r4, [sp, #8]
 80120cc:	4604      	mov	r4, r0
 80120ce:	9507      	str	r5, [sp, #28]
 80120d0:	4605      	mov	r5, r0
 80120d2:	ee75 2a84 	vadd.f32	s5, s11, s8
 80120d6:	900a      	str	r0, [sp, #40]	; 0x28
 80120d8:	9801      	ldr	r0, [sp, #4]
 80120da:	ee76 6a66 	vsub.f32	s13, s12, s13
 80120de:	ee37 6a27 	vadd.f32	s12, s14, s15
 80120e2:	ed97 5a01 	vldr	s10, [r7, #4]
 80120e6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80120ea:	46bc      	mov	ip, r7
 80120ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120f0:	9605      	str	r6, [sp, #20]
 80120f2:	ee36 7a63 	vsub.f32	s14, s12, s7
 80120f6:	9703      	str	r7, [sp, #12]
 80120f8:	ee12 9a90 	vmov	r9, s5
 80120fc:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8012100:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8012104:	1f3e      	subs	r6, r7, #4
 8012106:	f840 9b08 	str.w	r9, [r0], #8
 801210a:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801210e:	edde 2a01 	vldr	s5, [lr, #4]
 8012112:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8012116:	ee77 7a84 	vadd.f32	s15, s15, s8
 801211a:	ed9c 4a01 	vldr	s8, [ip, #4]
 801211e:	ee36 6a22 	vadd.f32	s12, s12, s5
 8012122:	9001      	str	r0, [sp, #4]
 8012124:	ee37 7a45 	vsub.f32	s14, s14, s10
 8012128:	9804      	ldr	r0, [sp, #16]
 801212a:	ee75 6a26 	vadd.f32	s13, s10, s13
 801212e:	f1ae 0704 	sub.w	r7, lr, #4
 8012132:	ee36 6a04 	vadd.f32	s12, s12, s8
 8012136:	ee33 4a45 	vsub.f32	s8, s6, s10
 801213a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801213e:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8012142:	ed80 6a01 	vstr	s12, [r0, #4]
 8012146:	ee14 9a10 	vmov	r9, s8
 801214a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801214e:	f848 9b08 	str.w	r9, [r8], #8
 8012152:	ed8e 5a01 	vstr	s10, [lr, #4]
 8012156:	ee15 ea90 	vmov	lr, s11
 801215a:	f844 eb08 	str.w	lr, [r4], #8
 801215e:	ee16 ea90 	vmov	lr, s13
 8012162:	9408      	str	r4, [sp, #32]
 8012164:	462c      	mov	r4, r5
 8012166:	ed85 7a01 	vstr	s14, [r5, #4]
 801216a:	9d03      	ldr	r5, [sp, #12]
 801216c:	f84c eb08 	str.w	lr, [ip], #8
 8012170:	edc5 7a01 	vstr	s15, [r5, #4]
 8012174:	0855      	lsrs	r5, r2, #1
 8012176:	9509      	str	r5, [sp, #36]	; 0x24
 8012178:	f000 8130 	beq.w	80123dc <arm_cfft_radix8by4_f32+0x36c>
 801217c:	9804      	ldr	r0, [sp, #16]
 801217e:	3b08      	subs	r3, #8
 8012180:	46ab      	mov	fp, r5
 8012182:	f1a4 020c 	sub.w	r2, r4, #12
 8012186:	f100 0510 	add.w	r5, r0, #16
 801218a:	f101 0920 	add.w	r9, r1, #32
 801218e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8012192:	f8dd a014 	ldr.w	sl, [sp, #20]
 8012196:	4433      	add	r3, r6
 8012198:	3410      	adds	r4, #16
 801219a:	4660      	mov	r0, ip
 801219c:	4641      	mov	r1, r8
 801219e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80121a2:	ed54 6a02 	vldr	s13, [r4, #-8]
 80121a6:	f1bb 0b01 	subs.w	fp, fp, #1
 80121aa:	ed55 5a02 	vldr	s11, [r5, #-8]
 80121ae:	f10a 0a08 	add.w	sl, sl, #8
 80121b2:	edd1 7a00 	vldr	s15, [r1]
 80121b6:	f105 0508 	add.w	r5, r5, #8
 80121ba:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80121be:	edd0 2a00 	vldr	s5, [r0]
 80121c2:	ed14 7a01 	vldr	s14, [r4, #-4]
 80121c6:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80121ca:	ed55 6a03 	vldr	s13, [r5, #-12]
 80121ce:	f1a2 0208 	sub.w	r2, r2, #8
 80121d2:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80121d6:	ed90 2a01 	vldr	s4, [r0, #4]
 80121da:	ee36 5a87 	vadd.f32	s10, s13, s14
 80121de:	ed91 6a01 	vldr	s12, [r1, #4]
 80121e2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80121e6:	f109 0910 	add.w	r9, r9, #16
 80121ea:	ee72 6aa4 	vadd.f32	s13, s5, s9
 80121ee:	f104 0408 	add.w	r4, r4, #8
 80121f2:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80121f6:	f10e 0e18 	add.w	lr, lr, #24
 80121fa:	ee37 3a67 	vsub.f32	s6, s14, s15
 80121fe:	f1a3 0308 	sub.w	r3, r3, #8
 8012202:	ed45 6a04 	vstr	s13, [r5, #-16]
 8012206:	ee37 7a27 	vadd.f32	s14, s14, s15
 801220a:	edd1 6a01 	vldr	s13, [r1, #4]
 801220e:	ee76 1a25 	vadd.f32	s3, s12, s11
 8012212:	edd0 4a01 	vldr	s9, [r0, #4]
 8012216:	ee33 3a22 	vadd.f32	s6, s6, s5
 801221a:	ee75 6a26 	vadd.f32	s13, s10, s13
 801221e:	ee35 5a46 	vsub.f32	s10, s10, s12
 8012222:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8012226:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801222a:	ee71 1ac2 	vsub.f32	s3, s3, s4
 801222e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8012232:	ed45 6a03 	vstr	s13, [r5, #-12]
 8012236:	ee32 2a06 	vadd.f32	s4, s4, s12
 801223a:	edd6 7a00 	vldr	s15, [r6]
 801223e:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8012242:	ed97 1a00 	vldr	s2, [r7]
 8012246:	ee77 2a62 	vsub.f32	s5, s14, s5
 801224a:	ed92 8a04 	vldr	s16, [r2, #16]
 801224e:	ee71 8a27 	vadd.f32	s17, s2, s15
 8012252:	ed93 aa04 	vldr	s20, [r3, #16]
 8012256:	ed16 7a01 	vldr	s14, [r6, #-4]
 801225a:	ee71 7a67 	vsub.f32	s15, s2, s15
 801225e:	ed57 0a01 	vldr	s1, [r7, #-4]
 8012262:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8012266:	ee38 6a88 	vadd.f32	s12, s17, s16
 801226a:	edd3 9a03 	vldr	s19, [r3, #12]
 801226e:	ee30 0a87 	vadd.f32	s0, s1, s14
 8012272:	ed92 9a03 	vldr	s18, [r2, #12]
 8012276:	ee78 5ac8 	vsub.f32	s11, s17, s16
 801227a:	ee3a 6a06 	vadd.f32	s12, s20, s12
 801227e:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8012282:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8012286:	ee16 ca10 	vmov	ip, s12
 801228a:	ee30 6a49 	vsub.f32	s12, s0, s18
 801228e:	ee71 4a07 	vadd.f32	s9, s2, s14
 8012292:	f847 c908 	str.w	ip, [r7], #-8
 8012296:	ee34 4a29 	vadd.f32	s8, s8, s19
 801229a:	edd2 8a03 	vldr	s17, [r2, #12]
 801229e:	ee39 9ac9 	vsub.f32	s18, s19, s18
 80122a2:	ed93 8a03 	vldr	s16, [r3, #12]
 80122a6:	ee71 0a47 	vsub.f32	s1, s2, s14
 80122aa:	ee30 0a28 	vadd.f32	s0, s0, s17
 80122ae:	ee39 1a67 	vsub.f32	s2, s18, s15
 80122b2:	ee36 6a69 	vsub.f32	s12, s12, s19
 80122b6:	ee30 0a08 	vadd.f32	s0, s0, s16
 80122ba:	ee75 5aca 	vsub.f32	s11, s11, s20
 80122be:	ed87 0a01 	vstr	s0, [r7, #4]
 80122c2:	ed1a 0a04 	vldr	s0, [sl, #-16]
 80122c6:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80122ca:	ee21 8a80 	vmul.f32	s16, s3, s0
 80122ce:	ee23 7a26 	vmul.f32	s14, s6, s13
 80122d2:	ee64 7a26 	vmul.f32	s15, s8, s13
 80122d6:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80122da:	ee24 4a00 	vmul.f32	s8, s8, s0
 80122de:	ee23 3a00 	vmul.f32	s6, s6, s0
 80122e2:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80122e6:	ee24 0a80 	vmul.f32	s0, s9, s0
 80122ea:	ee38 7a07 	vadd.f32	s14, s16, s14
 80122ee:	ee76 6a84 	vadd.f32	s13, s13, s8
 80122f2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80122f6:	ee33 3a61 	vsub.f32	s6, s6, s3
 80122fa:	ee17 ca10 	vmov	ip, s14
 80122fe:	f841 cb08 	str.w	ip, [r1], #8
 8012302:	ed01 3a01 	vstr	s6, [r1, #-4]
 8012306:	ed82 0a04 	vstr	s0, [r2, #16]
 801230a:	edc2 6a03 	vstr	s13, [r2, #12]
 801230e:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8012312:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8012316:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 801231a:	ee23 4aa6 	vmul.f32	s8, s7, s13
 801231e:	ee65 4a27 	vmul.f32	s9, s10, s15
 8012322:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8012326:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801232a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801232e:	ee25 5a26 	vmul.f32	s10, s10, s13
 8012332:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012336:	ee77 7a67 	vsub.f32	s15, s14, s15
 801233a:	ee34 6a24 	vadd.f32	s12, s8, s9
 801233e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8012342:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012346:	ee17 ca90 	vmov	ip, s15
 801234a:	ed04 6a04 	vstr	s12, [r4, #-16]
 801234e:	ed04 5a03 	vstr	s10, [r4, #-12]
 8012352:	f846 c908 	str.w	ip, [r6], #-8
 8012356:	edc6 6a01 	vstr	s13, [r6, #4]
 801235a:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 801235e:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8012362:	ee62 5a27 	vmul.f32	s11, s4, s15
 8012366:	ee22 6a87 	vmul.f32	s12, s5, s14
 801236a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801236e:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8012372:	ee61 6a07 	vmul.f32	s13, s2, s14
 8012376:	ee20 7a87 	vmul.f32	s14, s1, s14
 801237a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801237e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012382:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012386:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801238a:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801238e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012392:	ee16 ca10 	vmov	ip, s12
 8012396:	f840 cb08 	str.w	ip, [r0], #8
 801239a:	ed40 2a01 	vstr	s5, [r0, #-4]
 801239e:	edc3 0a04 	vstr	s1, [r3, #16]
 80123a2:	edc3 7a03 	vstr	s15, [r3, #12]
 80123a6:	f47f aefc 	bne.w	80121a2 <arm_cfft_radix8by4_f32+0x132>
 80123aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123ac:	9805      	ldr	r0, [sp, #20]
 80123ae:	00cb      	lsls	r3, r1, #3
 80123b0:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80123b4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80123b8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80123bc:	4498      	add	r8, r3
 80123be:	449c      	add	ip, r3
 80123c0:	9105      	str	r1, [sp, #20]
 80123c2:	9901      	ldr	r1, [sp, #4]
 80123c4:	4419      	add	r1, r3
 80123c6:	9101      	str	r1, [sp, #4]
 80123c8:	9906      	ldr	r1, [sp, #24]
 80123ca:	4419      	add	r1, r3
 80123cc:	9106      	str	r1, [sp, #24]
 80123ce:	9908      	ldr	r1, [sp, #32]
 80123d0:	4419      	add	r1, r3
 80123d2:	9b07      	ldr	r3, [sp, #28]
 80123d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123d8:	9108      	str	r1, [sp, #32]
 80123da:	9307      	str	r3, [sp, #28]
 80123dc:	9a01      	ldr	r2, [sp, #4]
 80123de:	2304      	movs	r3, #4
 80123e0:	9e08      	ldr	r6, [sp, #32]
 80123e2:	edd2 6a00 	vldr	s13, [r2]
 80123e6:	ed96 4a00 	vldr	s8, [r6]
 80123ea:	edd8 7a00 	vldr	s15, [r8]
 80123ee:	ee36 6a84 	vadd.f32	s12, s13, s8
 80123f2:	eddc 2a00 	vldr	s5, [ip]
 80123f6:	ed96 7a01 	vldr	s14, [r6, #4]
 80123fa:	ee36 4ac4 	vsub.f32	s8, s13, s8
 80123fe:	edd2 6a01 	vldr	s13, [r2, #4]
 8012402:	ee76 4a27 	vadd.f32	s9, s12, s15
 8012406:	ed98 2a01 	vldr	s4, [r8, #4]
 801240a:	ee76 5a87 	vadd.f32	s11, s13, s14
 801240e:	ed9c 5a01 	vldr	s10, [ip, #4]
 8012412:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012416:	9d05      	ldr	r5, [sp, #20]
 8012418:	ee72 6aa4 	vadd.f32	s13, s5, s9
 801241c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8012420:	ee72 3a04 	vadd.f32	s7, s4, s8
 8012424:	9804      	ldr	r0, [sp, #16]
 8012426:	ee77 4a67 	vsub.f32	s9, s14, s15
 801242a:	4621      	mov	r1, r4
 801242c:	edc2 6a00 	vstr	s13, [r2]
 8012430:	ee76 6a67 	vsub.f32	s13, s12, s15
 8012434:	ed98 3a01 	vldr	s6, [r8, #4]
 8012438:	ee35 6ac2 	vsub.f32	s12, s11, s4
 801243c:	eddc 1a01 	vldr	s3, [ip, #4]
 8012440:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8012444:	ee35 3a83 	vadd.f32	s6, s11, s6
 8012448:	ee34 4a42 	vsub.f32	s8, s8, s4
 801244c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8012450:	ee73 5a21 	vadd.f32	s11, s6, s3
 8012454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012458:	ee36 6a45 	vsub.f32	s12, s12, s10
 801245c:	edc2 5a01 	vstr	s11, [r2, #4]
 8012460:	ee35 5a04 	vadd.f32	s10, s10, s8
 8012464:	9a06      	ldr	r2, [sp, #24]
 8012466:	ee76 6ae2 	vsub.f32	s13, s13, s5
 801246a:	edd2 7a00 	vldr	s15, [r2]
 801246e:	edd2 5a01 	vldr	s11, [r2, #4]
 8012472:	ee23 4aa7 	vmul.f32	s8, s7, s15
 8012476:	ee63 3aa5 	vmul.f32	s7, s7, s11
 801247a:	ee64 5aa5 	vmul.f32	s11, s9, s11
 801247e:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8012482:	ee77 7a62 	vsub.f32	s15, s14, s5
 8012486:	ee74 5a25 	vadd.f32	s11, s8, s11
 801248a:	ee74 4ae3 	vsub.f32	s9, s9, s7
 801248e:	edc8 5a00 	vstr	s11, [r8]
 8012492:	edc8 4a01 	vstr	s9, [r8, #4]
 8012496:	edd5 4a01 	vldr	s9, [r5, #4]
 801249a:	ed95 7a00 	vldr	s14, [r5]
 801249e:	9d07      	ldr	r5, [sp, #28]
 80124a0:	ee66 5a87 	vmul.f32	s11, s13, s14
 80124a4:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80124a8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80124ac:	ee26 6a24 	vmul.f32	s12, s12, s9
 80124b0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80124b4:	ee35 6a86 	vadd.f32	s12, s11, s12
 80124b8:	edc6 6a01 	vstr	s13, [r6, #4]
 80124bc:	ed86 6a00 	vstr	s12, [r6]
 80124c0:	ed95 6a01 	vldr	s12, [r5, #4]
 80124c4:	ed95 7a00 	vldr	s14, [r5]
 80124c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80124ca:	ee65 6a07 	vmul.f32	s13, s10, s14
 80124ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80124d2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80124d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80124da:	ee37 5a45 	vsub.f32	s10, s14, s10
 80124de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80124e2:	ed8c 5a01 	vstr	s10, [ip, #4]
 80124e6:	edcc 7a00 	vstr	s15, [ip]
 80124ea:	6872      	ldr	r2, [r6, #4]
 80124ec:	f000 f978 	bl	80127e0 <arm_radix8_butterfly_f32>
 80124f0:	9802      	ldr	r0, [sp, #8]
 80124f2:	4621      	mov	r1, r4
 80124f4:	6872      	ldr	r2, [r6, #4]
 80124f6:	2304      	movs	r3, #4
 80124f8:	f000 f972 	bl	80127e0 <arm_radix8_butterfly_f32>
 80124fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80124fe:	4621      	mov	r1, r4
 8012500:	6872      	ldr	r2, [r6, #4]
 8012502:	2304      	movs	r3, #4
 8012504:	f000 f96c 	bl	80127e0 <arm_radix8_butterfly_f32>
 8012508:	9803      	ldr	r0, [sp, #12]
 801250a:	4621      	mov	r1, r4
 801250c:	6872      	ldr	r2, [r6, #4]
 801250e:	2304      	movs	r3, #4
 8012510:	b00f      	add	sp, #60	; 0x3c
 8012512:	ecbd 8b06 	vpop	{d8-d10}
 8012516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801251a:	f000 b961 	b.w	80127e0 <arm_radix8_butterfly_f32>
 801251e:	bf00      	nop

08012520 <arm_cfft_f32>:
 8012520:	2a01      	cmp	r2, #1
 8012522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012526:	4606      	mov	r6, r0
 8012528:	4617      	mov	r7, r2
 801252a:	460c      	mov	r4, r1
 801252c:	4698      	mov	r8, r3
 801252e:	8805      	ldrh	r5, [r0, #0]
 8012530:	d053      	beq.n	80125da <arm_cfft_f32+0xba>
 8012532:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8012536:	d04b      	beq.n	80125d0 <arm_cfft_f32+0xb0>
 8012538:	d916      	bls.n	8012568 <arm_cfft_f32+0x48>
 801253a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801253e:	d01a      	beq.n	8012576 <arm_cfft_f32+0x56>
 8012540:	d95a      	bls.n	80125f8 <arm_cfft_f32+0xd8>
 8012542:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8012546:	d043      	beq.n	80125d0 <arm_cfft_f32+0xb0>
 8012548:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 801254c:	d105      	bne.n	801255a <arm_cfft_f32+0x3a>
 801254e:	4620      	mov	r0, r4
 8012550:	4629      	mov	r1, r5
 8012552:	6872      	ldr	r2, [r6, #4]
 8012554:	2301      	movs	r3, #1
 8012556:	f000 f943 	bl	80127e0 <arm_radix8_butterfly_f32>
 801255a:	f1b8 0f00 	cmp.w	r8, #0
 801255e:	d111      	bne.n	8012584 <arm_cfft_f32+0x64>
 8012560:	2f01      	cmp	r7, #1
 8012562:	d016      	beq.n	8012592 <arm_cfft_f32+0x72>
 8012564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012568:	2d20      	cmp	r5, #32
 801256a:	d031      	beq.n	80125d0 <arm_cfft_f32+0xb0>
 801256c:	d948      	bls.n	8012600 <arm_cfft_f32+0xe0>
 801256e:	2d40      	cmp	r5, #64	; 0x40
 8012570:	d0ed      	beq.n	801254e <arm_cfft_f32+0x2e>
 8012572:	2d80      	cmp	r5, #128	; 0x80
 8012574:	d1f1      	bne.n	801255a <arm_cfft_f32+0x3a>
 8012576:	4630      	mov	r0, r6
 8012578:	4621      	mov	r1, r4
 801257a:	f7ff fca7 	bl	8011ecc <arm_cfft_radix8by2_f32>
 801257e:	f1b8 0f00 	cmp.w	r8, #0
 8012582:	d0ed      	beq.n	8012560 <arm_cfft_f32+0x40>
 8012584:	4620      	mov	r0, r4
 8012586:	89b1      	ldrh	r1, [r6, #12]
 8012588:	68b2      	ldr	r2, [r6, #8]
 801258a:	f7ed fe59 	bl	8000240 <arm_bitreversal_32>
 801258e:	2f01      	cmp	r7, #1
 8012590:	d1e8      	bne.n	8012564 <arm_cfft_f32+0x44>
 8012592:	ee07 5a90 	vmov	s15, r5
 8012596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801259a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801259e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80125a2:	2d00      	cmp	r5, #0
 80125a4:	d0de      	beq.n	8012564 <arm_cfft_f32+0x44>
 80125a6:	f104 0108 	add.w	r1, r4, #8
 80125aa:	2300      	movs	r3, #0
 80125ac:	ed11 7a02 	vldr	s14, [r1, #-8]
 80125b0:	3301      	adds	r3, #1
 80125b2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80125b6:	3108      	adds	r1, #8
 80125b8:	429d      	cmp	r5, r3
 80125ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 80125be:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80125c2:	ed01 7a04 	vstr	s14, [r1, #-16]
 80125c6:	ed41 7a03 	vstr	s15, [r1, #-12]
 80125ca:	d1ef      	bne.n	80125ac <arm_cfft_f32+0x8c>
 80125cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d0:	4630      	mov	r0, r6
 80125d2:	4621      	mov	r1, r4
 80125d4:	f7ff fd4c 	bl	8012070 <arm_cfft_radix8by4_f32>
 80125d8:	e7bf      	b.n	801255a <arm_cfft_f32+0x3a>
 80125da:	b1a5      	cbz	r5, 8012606 <arm_cfft_f32+0xe6>
 80125dc:	f101 030c 	add.w	r3, r1, #12
 80125e0:	2200      	movs	r2, #0
 80125e2:	ed53 7a02 	vldr	s15, [r3, #-8]
 80125e6:	3201      	adds	r2, #1
 80125e8:	3308      	adds	r3, #8
 80125ea:	eef1 7a67 	vneg.f32	s15, s15
 80125ee:	4295      	cmp	r5, r2
 80125f0:	ed43 7a04 	vstr	s15, [r3, #-16]
 80125f4:	d1f5      	bne.n	80125e2 <arm_cfft_f32+0xc2>
 80125f6:	e79c      	b.n	8012532 <arm_cfft_f32+0x12>
 80125f8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80125fc:	d0a7      	beq.n	801254e <arm_cfft_f32+0x2e>
 80125fe:	e7ac      	b.n	801255a <arm_cfft_f32+0x3a>
 8012600:	2d10      	cmp	r5, #16
 8012602:	d0b8      	beq.n	8012576 <arm_cfft_f32+0x56>
 8012604:	e7a9      	b.n	801255a <arm_cfft_f32+0x3a>
 8012606:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801260a:	d896      	bhi.n	801253a <arm_cfft_f32+0x1a>
 801260c:	e7ac      	b.n	8012568 <arm_cfft_f32+0x48>
 801260e:	bf00      	nop

08012610 <arm_cmplx_mag_f32>:
 8012610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012614:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8012618:	b084      	sub	sp, #16
 801261a:	d07f      	beq.n	801271c <arm_cmplx_mag_f32+0x10c>
 801261c:	f100 0420 	add.w	r4, r0, #32
 8012620:	f101 0510 	add.w	r5, r1, #16
 8012624:	4646      	mov	r6, r8
 8012626:	2700      	movs	r7, #0
 8012628:	e05a      	b.n	80126e0 <arm_cmplx_mag_f32+0xd0>
 801262a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801262e:	eeb4 0a40 	vcmp.f32	s0, s0
 8012632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012636:	f040 80a4 	bne.w	8012782 <arm_cmplx_mag_f32+0x172>
 801263a:	ed05 0a04 	vstr	s0, [r5, #-16]
 801263e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8012642:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8012646:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801264a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801264e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265a:	f2c0 808f 	blt.w	801277c <arm_cmplx_mag_f32+0x16c>
 801265e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012662:	eeb4 0a40 	vcmp.f32	s0, s0
 8012666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266a:	f040 80af 	bne.w	80127cc <arm_cmplx_mag_f32+0x1bc>
 801266e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8012672:	ed54 7a04 	vldr	s15, [r4, #-16]
 8012676:	ed14 0a03 	vldr	s0, [r4, #-12]
 801267a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801267e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012682:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012686:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801268e:	db72      	blt.n	8012776 <arm_cmplx_mag_f32+0x166>
 8012690:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012694:	eeb4 0a40 	vcmp.f32	s0, s0
 8012698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269c:	f040 808c 	bne.w	80127b8 <arm_cmplx_mag_f32+0x1a8>
 80126a0:	ed05 0a02 	vstr	s0, [r5, #-8]
 80126a4:	ed54 7a02 	vldr	s15, [r4, #-8]
 80126a8:	ed14 0a01 	vldr	s0, [r4, #-4]
 80126ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80126b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80126b4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80126b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80126bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c0:	db20      	blt.n	8012704 <arm_cmplx_mag_f32+0xf4>
 80126c2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80126c6:	eeb4 0a40 	vcmp.f32	s0, s0
 80126ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ce:	d169      	bne.n	80127a4 <arm_cmplx_mag_f32+0x194>
 80126d0:	3e01      	subs	r6, #1
 80126d2:	ed05 0a01 	vstr	s0, [r5, #-4]
 80126d6:	f104 0420 	add.w	r4, r4, #32
 80126da:	f105 0510 	add.w	r5, r5, #16
 80126de:	d019      	beq.n	8012714 <arm_cmplx_mag_f32+0x104>
 80126e0:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80126e4:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80126e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80126ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 80126f0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80126f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80126f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fc:	da95      	bge.n	801262a <arm_cmplx_mag_f32+0x1a>
 80126fe:	f845 7c10 	str.w	r7, [r5, #-16]
 8012702:	e79c      	b.n	801263e <arm_cmplx_mag_f32+0x2e>
 8012704:	3e01      	subs	r6, #1
 8012706:	f845 7c04 	str.w	r7, [r5, #-4]
 801270a:	f104 0420 	add.w	r4, r4, #32
 801270e:	f105 0510 	add.w	r5, r5, #16
 8012712:	d1e5      	bne.n	80126e0 <arm_cmplx_mag_f32+0xd0>
 8012714:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8012718:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 801271c:	f012 0503 	ands.w	r5, r2, #3
 8012720:	d026      	beq.n	8012770 <arm_cmplx_mag_f32+0x160>
 8012722:	f100 0408 	add.w	r4, r0, #8
 8012726:	2600      	movs	r6, #0
 8012728:	e00c      	b.n	8012744 <arm_cmplx_mag_f32+0x134>
 801272a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801272e:	eeb4 0a40 	vcmp.f32	s0, s0
 8012732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012736:	d12e      	bne.n	8012796 <arm_cmplx_mag_f32+0x186>
 8012738:	3d01      	subs	r5, #1
 801273a:	ed01 0a01 	vstr	s0, [r1, #-4]
 801273e:	f104 0408 	add.w	r4, r4, #8
 8012742:	d015      	beq.n	8012770 <arm_cmplx_mag_f32+0x160>
 8012744:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012748:	3104      	adds	r1, #4
 801274a:	ed14 0a01 	vldr	s0, [r4, #-4]
 801274e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012752:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012756:	ee77 7a80 	vadd.f32	s15, s15, s0
 801275a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012762:	dae2      	bge.n	801272a <arm_cmplx_mag_f32+0x11a>
 8012764:	3d01      	subs	r5, #1
 8012766:	f841 6c04 	str.w	r6, [r1, #-4]
 801276a:	f104 0408 	add.w	r4, r4, #8
 801276e:	d1e9      	bne.n	8012744 <arm_cmplx_mag_f32+0x134>
 8012770:	b004      	add	sp, #16
 8012772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012776:	f845 7c08 	str.w	r7, [r5, #-8]
 801277a:	e793      	b.n	80126a4 <arm_cmplx_mag_f32+0x94>
 801277c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8012780:	e777      	b.n	8012672 <arm_cmplx_mag_f32+0x62>
 8012782:	eeb0 0a67 	vmov.f32	s0, s15
 8012786:	9203      	str	r2, [sp, #12]
 8012788:	9102      	str	r1, [sp, #8]
 801278a:	9001      	str	r0, [sp, #4]
 801278c:	f002 fbb0 	bl	8014ef0 <sqrtf>
 8012790:	a801      	add	r0, sp, #4
 8012792:	c807      	ldmia	r0, {r0, r1, r2}
 8012794:	e751      	b.n	801263a <arm_cmplx_mag_f32+0x2a>
 8012796:	eeb0 0a67 	vmov.f32	s0, s15
 801279a:	9101      	str	r1, [sp, #4]
 801279c:	f002 fba8 	bl	8014ef0 <sqrtf>
 80127a0:	9901      	ldr	r1, [sp, #4]
 80127a2:	e7c9      	b.n	8012738 <arm_cmplx_mag_f32+0x128>
 80127a4:	eeb0 0a67 	vmov.f32	s0, s15
 80127a8:	9203      	str	r2, [sp, #12]
 80127aa:	9102      	str	r1, [sp, #8]
 80127ac:	9001      	str	r0, [sp, #4]
 80127ae:	f002 fb9f 	bl	8014ef0 <sqrtf>
 80127b2:	a801      	add	r0, sp, #4
 80127b4:	c807      	ldmia	r0, {r0, r1, r2}
 80127b6:	e78b      	b.n	80126d0 <arm_cmplx_mag_f32+0xc0>
 80127b8:	eeb0 0a67 	vmov.f32	s0, s15
 80127bc:	9203      	str	r2, [sp, #12]
 80127be:	9102      	str	r1, [sp, #8]
 80127c0:	9001      	str	r0, [sp, #4]
 80127c2:	f002 fb95 	bl	8014ef0 <sqrtf>
 80127c6:	a801      	add	r0, sp, #4
 80127c8:	c807      	ldmia	r0, {r0, r1, r2}
 80127ca:	e769      	b.n	80126a0 <arm_cmplx_mag_f32+0x90>
 80127cc:	eeb0 0a67 	vmov.f32	s0, s15
 80127d0:	9203      	str	r2, [sp, #12]
 80127d2:	9102      	str	r1, [sp, #8]
 80127d4:	9001      	str	r0, [sp, #4]
 80127d6:	f002 fb8b 	bl	8014ef0 <sqrtf>
 80127da:	a801      	add	r0, sp, #4
 80127dc:	c807      	ldmia	r0, {r0, r1, r2}
 80127de:	e746      	b.n	801266e <arm_cmplx_mag_f32+0x5e>

080127e0 <arm_radix8_butterfly_f32>:
 80127e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e4:	469e      	mov	lr, r3
 80127e6:	1d03      	adds	r3, r0, #4
 80127e8:	4683      	mov	fp, r0
 80127ea:	468a      	mov	sl, r1
 80127ec:	4688      	mov	r8, r1
 80127ee:	469c      	mov	ip, r3
 80127f0:	ed2d 8b10 	vpush	{d8-d15}
 80127f4:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 8012b08 <arm_radix8_butterfly_f32+0x328>
 80127f8:	b09f      	sub	sp, #124	; 0x7c
 80127fa:	921c      	str	r2, [sp, #112]	; 0x70
 80127fc:	931d      	str	r3, [sp, #116]	; 0x74
 80127fe:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8012802:	f04f 0900 	mov.w	r9, #0
 8012806:	461a      	mov	r2, r3
 8012808:	930e      	str	r3, [sp, #56]	; 0x38
 801280a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801280e:	0051      	lsls	r1, r2, #1
 8012810:	4608      	mov	r0, r1
 8012812:	9103      	str	r1, [sp, #12]
 8012814:	00d1      	lsls	r1, r2, #3
 8012816:	1885      	adds	r5, r0, r2
 8012818:	0110      	lsls	r0, r2, #4
 801281a:	eb0b 0601 	add.w	r6, fp, r1
 801281e:	9101      	str	r1, [sp, #4]
 8012820:	18ac      	adds	r4, r5, r2
 8012822:	9002      	str	r0, [sp, #8]
 8012824:	1877      	adds	r7, r6, r1
 8012826:	4611      	mov	r1, r2
 8012828:	4422      	add	r2, r4
 801282a:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 801282e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8012832:	1850      	adds	r0, r2, r1
 8012834:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8012838:	4401      	add	r1, r0
 801283a:	3204      	adds	r2, #4
 801283c:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8012840:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8012844:	3104      	adds	r1, #4
 8012846:	ed1c 7a01 	vldr	s14, [ip, #-4]
 801284a:	44c1      	add	r9, r8
 801284c:	edd4 6a00 	vldr	s13, [r4]
 8012850:	ed97 6a00 	vldr	s12, [r7]
 8012854:	45ca      	cmp	sl, r9
 8012856:	edd0 7a00 	vldr	s15, [r0]
 801285a:	ee37 5a66 	vsub.f32	s10, s14, s13
 801285e:	edd6 5a00 	vldr	s11, [r6]
 8012862:	ee37 2a26 	vadd.f32	s4, s14, s13
 8012866:	ee76 2a67 	vsub.f32	s5, s12, s15
 801286a:	edd5 6a00 	vldr	s13, [r5]
 801286e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8012872:	ee76 4a27 	vadd.f32	s9, s12, s15
 8012876:	ed11 6a01 	vldr	s12, [r1, #-4]
 801287a:	ee75 1a87 	vadd.f32	s3, s11, s14
 801287e:	ee36 4a86 	vadd.f32	s8, s13, s12
 8012882:	ee72 7a24 	vadd.f32	s15, s4, s9
 8012886:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801288a:	ee76 5ac6 	vsub.f32	s11, s13, s12
 801288e:	ee31 6a84 	vadd.f32	s12, s3, s8
 8012892:	ee32 2a64 	vsub.f32	s4, s4, s9
 8012896:	ee77 6a65 	vsub.f32	s13, s14, s11
 801289a:	ee77 4a86 	vadd.f32	s9, s15, s12
 801289e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80128a2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80128a6:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80128aa:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80128ae:	edc4 7a00 	vstr	s15, [r4]
 80128b2:	ee66 6a89 	vmul.f32	s13, s13, s18
 80128b6:	edd6 5a01 	vldr	s11, [r6, #4]
 80128ba:	ee27 6a09 	vmul.f32	s12, s14, s18
 80128be:	edd5 3a01 	vldr	s7, [r5, #4]
 80128c2:	ed92 4a00 	vldr	s8, [r2]
 80128c6:	ee35 1a26 	vadd.f32	s2, s10, s13
 80128ca:	edd1 4a00 	vldr	s9, [r1]
 80128ce:	ee75 6a66 	vsub.f32	s13, s10, s13
 80128d2:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80128d6:	ed94 0a01 	vldr	s0, [r4, #4]
 80128da:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80128de:	ed9c 7a00 	vldr	s14, [ip]
 80128e2:	edd0 0a01 	vldr	s1, [r0, #4]
 80128e6:	ee35 4a84 	vadd.f32	s8, s11, s8
 80128ea:	ed97 5a01 	vldr	s10, [r7, #4]
 80128ee:	ee73 4aa4 	vadd.f32	s9, s7, s9
 80128f2:	ee73 5a27 	vadd.f32	s11, s6, s15
 80128f6:	ee77 3a00 	vadd.f32	s7, s14, s0
 80128fa:	ee33 3a67 	vsub.f32	s6, s6, s15
 80128fe:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012902:	ee35 0a20 	vadd.f32	s0, s10, s1
 8012906:	ee63 7a09 	vmul.f32	s15, s6, s18
 801290a:	ee35 5a60 	vsub.f32	s10, s10, s1
 801290e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8012912:	ee74 0a24 	vadd.f32	s1, s8, s9
 8012916:	ee65 5a89 	vmul.f32	s11, s11, s18
 801291a:	ee74 4a64 	vsub.f32	s9, s8, s9
 801291e:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8012922:	ee75 3a25 	vadd.f32	s7, s10, s11
 8012926:	ee75 5a65 	vsub.f32	s11, s10, s11
 801292a:	ee37 5a27 	vadd.f32	s10, s14, s15
 801292e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012932:	ee32 7a86 	vadd.f32	s14, s5, s12
 8012936:	ee32 6ac6 	vsub.f32	s12, s5, s12
 801293a:	ee73 2a20 	vadd.f32	s5, s6, s1
 801293e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8012942:	ee72 0a24 	vadd.f32	s1, s4, s9
 8012946:	edcc 2a00 	vstr	s5, [ip]
 801294a:	ee72 4a64 	vsub.f32	s9, s4, s9
 801294e:	ed84 3a01 	vstr	s6, [r4, #4]
 8012952:	ee74 2a61 	vsub.f32	s5, s8, s3
 8012956:	ee31 3a23 	vadd.f32	s6, s2, s7
 801295a:	edc7 0a00 	vstr	s1, [r7]
 801295e:	ee31 1a63 	vsub.f32	s2, s2, s7
 8012962:	edc0 4a00 	vstr	s9, [r0]
 8012966:	ee76 3aa5 	vadd.f32	s7, s13, s11
 801296a:	edc7 2a01 	vstr	s5, [r7, #4]
 801296e:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8012972:	441c      	add	r4, r3
 8012974:	ee75 5a47 	vsub.f32	s11, s10, s14
 8012978:	449c      	add	ip, r3
 801297a:	ee35 5a07 	vadd.f32	s10, s10, s14
 801297e:	441f      	add	r7, r3
 8012980:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8012984:	ee34 4a21 	vadd.f32	s8, s8, s3
 8012988:	ee77 7a86 	vadd.f32	s15, s15, s12
 801298c:	ed80 4a01 	vstr	s8, [r0, #4]
 8012990:	4418      	add	r0, r3
 8012992:	ed86 3a00 	vstr	s6, [r6]
 8012996:	ed01 1a01 	vstr	s2, [r1, #-4]
 801299a:	ed42 3a01 	vstr	s7, [r2, #-4]
 801299e:	edc5 6a00 	vstr	s13, [r5]
 80129a2:	edc6 5a01 	vstr	s11, [r6, #4]
 80129a6:	441e      	add	r6, r3
 80129a8:	ed81 5a00 	vstr	s10, [r1]
 80129ac:	4419      	add	r1, r3
 80129ae:	ed82 7a00 	vstr	s14, [r2]
 80129b2:	441a      	add	r2, r3
 80129b4:	edc5 7a01 	vstr	s15, [r5, #4]
 80129b8:	441d      	add	r5, r3
 80129ba:	f63f af44 	bhi.w	8012846 <arm_radix8_butterfly_f32+0x66>
 80129be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80129c0:	2f07      	cmp	r7, #7
 80129c2:	f240 81e8 	bls.w	8012d96 <arm_radix8_butterfly_f32+0x5b6>
 80129c6:	9903      	ldr	r1, [sp, #12]
 80129c8:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 80129cc:	9e01      	ldr	r6, [sp, #4]
 80129ce:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80129d2:	19ca      	adds	r2, r1, r7
 80129d4:	1c4c      	adds	r4, r1, #1
 80129d6:	eb05 010e 	add.w	r1, r5, lr
 80129da:	00ed      	lsls	r5, r5, #3
 80129dc:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 80129e0:	3608      	adds	r6, #8
 80129e2:	950f      	str	r5, [sp, #60]	; 0x3c
 80129e4:	eb01 050e 	add.w	r5, r1, lr
 80129e8:	00c9      	lsls	r1, r1, #3
 80129ea:	443c      	add	r4, r7
 80129ec:	9618      	str	r6, [sp, #96]	; 0x60
 80129ee:	00ee      	lsls	r6, r5, #3
 80129f0:	460f      	mov	r7, r1
 80129f2:	9114      	str	r1, [sp, #80]	; 0x50
 80129f4:	9902      	ldr	r1, [sp, #8]
 80129f6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80129fa:	9611      	str	r6, [sp, #68]	; 0x44
 80129fc:	00c0      	lsls	r0, r0, #3
 80129fe:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8012a00:	3108      	adds	r1, #8
 8012a02:	3404      	adds	r4, #4
 8012a04:	f04f 0901 	mov.w	r9, #1
 8012a08:	9119      	str	r1, [sp, #100]	; 0x64
 8012a0a:	eb05 010e 	add.w	r1, r5, lr
 8012a0e:	4635      	mov	r5, r6
 8012a10:	940b      	str	r4, [sp, #44]	; 0x2c
 8012a12:	9301      	str	r3, [sp, #4]
 8012a14:	443d      	add	r5, r7
 8012a16:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8012a18:	9507      	str	r5, [sp, #28]
 8012a1a:	eb01 050e 	add.w	r5, r1, lr
 8012a1e:	00c9      	lsls	r1, r1, #3
 8012a20:	19f7      	adds	r7, r6, r7
 8012a22:	00ed      	lsls	r5, r5, #3
 8012a24:	9110      	str	r1, [sp, #64]	; 0x40
 8012a26:	00d1      	lsls	r1, r2, #3
 8012a28:	970a      	str	r7, [sp, #40]	; 0x28
 8012a2a:	462f      	mov	r7, r5
 8012a2c:	9515      	str	r5, [sp, #84]	; 0x54
 8012a2e:	0112      	lsls	r2, r2, #4
 8012a30:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012a32:	19f4      	adds	r4, r6, r7
 8012a34:	320c      	adds	r2, #12
 8012a36:	3108      	adds	r1, #8
 8012a38:	1975      	adds	r5, r6, r5
 8012a3a:	9408      	str	r4, [sp, #32]
 8012a3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8012a3e:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8012a42:	9509      	str	r5, [sp, #36]	; 0x24
 8012a44:	f100 020c 	add.w	r2, r0, #12
 8012a48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012a4a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8012a4c:	1975      	adds	r5, r6, r5
 8012a4e:	9216      	str	r2, [sp, #88]	; 0x58
 8012a50:	1932      	adds	r2, r6, r4
 8012a52:	911b      	str	r1, [sp, #108]	; 0x6c
 8012a54:	9505      	str	r5, [sp, #20]
 8012a56:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8012a5a:	0179      	lsls	r1, r7, #5
 8012a5c:	9204      	str	r2, [sp, #16]
 8012a5e:	1972      	adds	r2, r6, r5
 8012a60:	9412      	str	r4, [sp, #72]	; 0x48
 8012a62:	9513      	str	r5, [sp, #76]	; 0x4c
 8012a64:	9206      	str	r2, [sp, #24]
 8012a66:	f101 0208 	add.w	r2, r1, #8
 8012a6a:	921a      	str	r2, [sp, #104]	; 0x68
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	f102 0108 	add.w	r1, r2, #8
 8012a72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a74:	46cc      	mov	ip, r9
 8012a76:	460f      	mov	r7, r1
 8012a78:	910c      	str	r1, [sp, #48]	; 0x30
 8012a7a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012a7c:	eb0b 0e07 	add.w	lr, fp, r7
 8012a80:	9f04      	ldr	r7, [sp, #16]
 8012a82:	188e      	adds	r6, r1, r2
 8012a84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012a86:	edd7 fa00 	vldr	s31, [r7]
 8012a8a:	9f06      	ldr	r7, [sp, #24]
 8012a8c:	188d      	adds	r5, r1, r2
 8012a8e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012a90:	445e      	add	r6, fp
 8012a92:	ed97 fa00 	vldr	s30, [r7]
 8012a96:	445d      	add	r5, fp
 8012a98:	9f05      	ldr	r7, [sp, #20]
 8012a9a:	188c      	adds	r4, r1, r2
 8012a9c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012a9e:	edd7 ea00 	vldr	s29, [r7]
 8012aa2:	445c      	add	r4, fp
 8012aa4:	9f07      	ldr	r7, [sp, #28]
 8012aa6:	1888      	adds	r0, r1, r2
 8012aa8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012aaa:	ed97 ea00 	vldr	s28, [r7]
 8012aae:	4458      	add	r0, fp
 8012ab0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012ab2:	4411      	add	r1, r2
 8012ab4:	441a      	add	r2, r3
 8012ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ab8:	edd7 da00 	vldr	s27, [r7]
 8012abc:	4459      	add	r1, fp
 8012abe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012ac0:	445a      	add	r2, fp
 8012ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8012ac4:	ed97 da00 	vldr	s26, [r7]
 8012ac8:	9f08      	ldr	r7, [sp, #32]
 8012aca:	edd7 ca00 	vldr	s25, [r7]
 8012ace:	9f04      	ldr	r7, [sp, #16]
 8012ad0:	ed97 ca01 	vldr	s24, [r7, #4]
 8012ad4:	9f06      	ldr	r7, [sp, #24]
 8012ad6:	edd7 ba01 	vldr	s23, [r7, #4]
 8012ada:	9f05      	ldr	r7, [sp, #20]
 8012adc:	ed97 ba01 	vldr	s22, [r7, #4]
 8012ae0:	9f07      	ldr	r7, [sp, #28]
 8012ae2:	edd7 aa01 	vldr	s21, [r7, #4]
 8012ae6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012ae8:	ed97 aa01 	vldr	s20, [r7, #4]
 8012aec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012aee:	9b01      	ldr	r3, [sp, #4]
 8012af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8012af4:	9f08      	ldr	r7, [sp, #32]
 8012af6:	edcd 7a02 	vstr	s15, [sp, #8]
 8012afa:	edd7 7a01 	vldr	s15, [r7, #4]
 8012afe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012b00:	edcd 7a03 	vstr	s15, [sp, #12]
 8012b04:	e002      	b.n	8012b0c <arm_radix8_butterfly_f32+0x32c>
 8012b06:	bf00      	nop
 8012b08:	3f3504f3 	.word	0x3f3504f3
 8012b0c:	ed90 2a00 	vldr	s4, [r0]
 8012b10:	44c4      	add	ip, r8
 8012b12:	ed96 7a00 	vldr	s14, [r6]
 8012b16:	ed94 8a00 	vldr	s16, [r4]
 8012b1a:	45e2      	cmp	sl, ip
 8012b1c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8012b20:	ed95 5a00 	vldr	s10, [r5]
 8012b24:	ed51 5a01 	vldr	s11, [r1, #-4]
 8012b28:	ee38 6a27 	vadd.f32	s12, s16, s15
 8012b2c:	ed9e 1a00 	vldr	s2, [lr]
 8012b30:	ee78 2a67 	vsub.f32	s5, s16, s15
 8012b34:	ed17 4a01 	vldr	s8, [r7, #-4]
 8012b38:	ee75 3a25 	vadd.f32	s7, s10, s11
 8012b3c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8012b40:	edde 4a01 	vldr	s9, [lr, #4]
 8012b44:	ee72 6a04 	vadd.f32	s13, s4, s8
 8012b48:	ee75 5a65 	vsub.f32	s11, s10, s11
 8012b4c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8012b50:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8012b54:	ee32 4a44 	vsub.f32	s8, s4, s8
 8012b58:	ee31 1a47 	vsub.f32	s2, s2, s14
 8012b5c:	ee31 7a85 	vadd.f32	s14, s3, s10
 8012b60:	ee75 7a84 	vadd.f32	s15, s11, s8
 8012b64:	ee33 3a46 	vsub.f32	s6, s6, s12
 8012b68:	ed8e 7a00 	vstr	s14, [lr]
 8012b6c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8012b70:	ee67 7a89 	vmul.f32	s15, s15, s18
 8012b74:	ed90 2a01 	vldr	s4, [r0, #4]
 8012b78:	ed95 7a01 	vldr	s14, [r5, #4]
 8012b7c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8012b80:	ed91 6a00 	vldr	s12, [r1]
 8012b84:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8012b88:	edd7 8a00 	vldr	s17, [r7]
 8012b8c:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8012b90:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8012b94:	edd2 0a00 	vldr	s1, [r2]
 8012b98:	ee72 6a68 	vsub.f32	s13, s4, s17
 8012b9c:	edd6 7a01 	vldr	s15, [r6, #4]
 8012ba0:	ee77 2a46 	vsub.f32	s5, s14, s12
 8012ba4:	ee37 0a06 	vadd.f32	s0, s14, s12
 8012ba8:	ed94 7a01 	vldr	s14, [r4, #4]
 8012bac:	ee32 6a28 	vadd.f32	s12, s4, s17
 8012bb0:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8012bb4:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8012bb8:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8012bbc:	ee77 6a20 	vadd.f32	s13, s14, s1
 8012bc0:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8012bc4:	ee37 7a60 	vsub.f32	s14, s14, s1
 8012bc8:	ee24 4a09 	vmul.f32	s8, s8, s18
 8012bcc:	ee70 0a06 	vadd.f32	s1, s0, s12
 8012bd0:	ee69 7a89 	vmul.f32	s15, s19, s18
 8012bd4:	ee62 2a89 	vmul.f32	s5, s5, s18
 8012bd8:	ee30 6a46 	vsub.f32	s12, s0, s12
 8012bdc:	ee32 0a26 	vadd.f32	s0, s4, s13
 8012be0:	ee72 6a66 	vsub.f32	s13, s4, s13
 8012be4:	ee77 8a62 	vsub.f32	s17, s14, s5
 8012be8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8012bec:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8012bf0:	ee77 4a22 	vadd.f32	s9, s14, s5
 8012bf4:	ee71 2a04 	vadd.f32	s5, s2, s8
 8012bf8:	ee31 7a44 	vsub.f32	s14, s2, s8
 8012bfc:	ee30 1a60 	vsub.f32	s2, s0, s1
 8012c00:	ee73 1a06 	vadd.f32	s3, s6, s12
 8012c04:	ee33 6a46 	vsub.f32	s12, s6, s12
 8012c08:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8012c0c:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8012c10:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012c14:	ee77 7a88 	vadd.f32	s15, s15, s16
 8012c18:	ee72 3a65 	vsub.f32	s7, s4, s11
 8012c1c:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8012c20:	ee72 5a25 	vadd.f32	s11, s4, s11
 8012c24:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8012c28:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8012c2c:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8012c30:	ee77 2a28 	vadd.f32	s5, s14, s17
 8012c34:	ee37 7a68 	vsub.f32	s14, s14, s17
 8012c38:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8012c3c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8012c40:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8012c44:	ee70 0a20 	vadd.f32	s1, s0, s1
 8012c48:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8012c4c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8012c50:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8012c54:	edce 0a01 	vstr	s1, [lr, #4]
 8012c58:	ee38 8a88 	vadd.f32	s16, s17, s16
 8012c5c:	449e      	add	lr, r3
 8012c5e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8012c62:	ee31 5a45 	vsub.f32	s10, s2, s10
 8012c66:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8012c6a:	ed86 8a00 	vstr	s16, [r6]
 8012c6e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012c72:	ee33 3a61 	vsub.f32	s6, s6, s3
 8012c76:	ed86 5a01 	vstr	s10, [r6, #4]
 8012c7a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8012c7e:	edcd 3a01 	vstr	s7, [sp, #4]
 8012c82:	ed9d 5a03 	vldr	s10, [sp, #12]
 8012c86:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8012c8a:	eddd 3a02 	vldr	s7, [sp, #8]
 8012c8e:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8012c92:	ed84 0a00 	vstr	s0, [r4]
 8012c96:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012c9a:	ed84 3a01 	vstr	s6, [r4, #4]
 8012c9e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8012ca2:	ee23 6a86 	vmul.f32	s12, s7, s12
 8012ca6:	eddd 3a01 	vldr	s7, [sp, #4]
 8012caa:	ee25 5a25 	vmul.f32	s10, s10, s11
 8012cae:	441e      	add	r6, r3
 8012cb0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8012cb4:	441c      	add	r4, r3
 8012cb6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8012cba:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8012cbe:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8012cc2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8012cc6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8012cca:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8012cce:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8012cd2:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8012cd6:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8012cda:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8012cde:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8012ce2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8012ce6:	ee38 8a01 	vadd.f32	s16, s16, s2
 8012cea:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8012cee:	ee39 5a85 	vadd.f32	s10, s19, s10
 8012cf2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8012cf6:	ed02 8a01 	vstr	s16, [r2, #-4]
 8012cfa:	ee30 0a21 	vadd.f32	s0, s0, s3
 8012cfe:	ed82 6a00 	vstr	s12, [r2]
 8012d02:	ee74 2a62 	vsub.f32	s5, s8, s5
 8012d06:	edc5 0a00 	vstr	s1, [r5]
 8012d0a:	ee33 3a28 	vadd.f32	s6, s6, s17
 8012d0e:	edc5 3a01 	vstr	s7, [r5, #4]
 8012d12:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8012d16:	ed07 5a01 	vstr	s10, [r7, #-4]
 8012d1a:	edc7 4a00 	vstr	s9, [r7]
 8012d1e:	441d      	add	r5, r3
 8012d20:	ed01 0a01 	vstr	s0, [r1, #-4]
 8012d24:	441a      	add	r2, r3
 8012d26:	edc1 2a00 	vstr	s5, [r1]
 8012d2a:	441f      	add	r7, r3
 8012d2c:	ed80 3a00 	vstr	s6, [r0]
 8012d30:	4419      	add	r1, r3
 8012d32:	ed80 7a01 	vstr	s14, [r0, #4]
 8012d36:	4418      	add	r0, r3
 8012d38:	f63f aee8 	bhi.w	8012b0c <arm_radix8_butterfly_f32+0x32c>
 8012d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012d3e:	f109 0901 	add.w	r9, r9, #1
 8012d42:	9301      	str	r3, [sp, #4]
 8012d44:	9b04      	ldr	r3, [sp, #16]
 8012d46:	4413      	add	r3, r2
 8012d48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012d4a:	9304      	str	r3, [sp, #16]
 8012d4c:	9b06      	ldr	r3, [sp, #24]
 8012d4e:	4413      	add	r3, r2
 8012d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012d52:	9306      	str	r3, [sp, #24]
 8012d54:	9b05      	ldr	r3, [sp, #20]
 8012d56:	4413      	add	r3, r2
 8012d58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012d5a:	9305      	str	r3, [sp, #20]
 8012d5c:	9b07      	ldr	r3, [sp, #28]
 8012d5e:	4413      	add	r3, r2
 8012d60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012d62:	9307      	str	r3, [sp, #28]
 8012d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d66:	4413      	add	r3, r2
 8012d68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8012d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d6e:	4413      	add	r3, r2
 8012d70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012d72:	9309      	str	r3, [sp, #36]	; 0x24
 8012d74:	9b08      	ldr	r3, [sp, #32]
 8012d76:	4413      	add	r3, r2
 8012d78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d7a:	9308      	str	r3, [sp, #32]
 8012d7c:	3208      	adds	r2, #8
 8012d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d80:	920b      	str	r2, [sp, #44]	; 0x2c
 8012d82:	4599      	cmp	r9, r3
 8012d84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d86:	f47f ae72 	bne.w	8012a6e <arm_radix8_butterfly_f32+0x28e>
 8012d8a:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8012d8e:	46c8      	mov	r8, r9
 8012d90:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 8012d94:	e533      	b.n	80127fe <arm_radix8_butterfly_f32+0x1e>
 8012d96:	b01f      	add	sp, #124	; 0x7c
 8012d98:	ecbd 8b10 	vpop	{d8-d15}
 8012d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012da0 <__errno>:
 8012da0:	4b01      	ldr	r3, [pc, #4]	; (8012da8 <__errno+0x8>)
 8012da2:	6818      	ldr	r0, [r3, #0]
 8012da4:	4770      	bx	lr
 8012da6:	bf00      	nop
 8012da8:	20016934 	.word	0x20016934

08012dac <__libc_init_array>:
 8012dac:	b570      	push	{r4, r5, r6, lr}
 8012dae:	4e0d      	ldr	r6, [pc, #52]	; (8012de4 <__libc_init_array+0x38>)
 8012db0:	4c0d      	ldr	r4, [pc, #52]	; (8012de8 <__libc_init_array+0x3c>)
 8012db2:	1ba4      	subs	r4, r4, r6
 8012db4:	10a4      	asrs	r4, r4, #2
 8012db6:	2500      	movs	r5, #0
 8012db8:	42a5      	cmp	r5, r4
 8012dba:	d109      	bne.n	8012dd0 <__libc_init_array+0x24>
 8012dbc:	4e0b      	ldr	r6, [pc, #44]	; (8012dec <__libc_init_array+0x40>)
 8012dbe:	4c0c      	ldr	r4, [pc, #48]	; (8012df0 <__libc_init_array+0x44>)
 8012dc0:	f002 f8ec 	bl	8014f9c <_init>
 8012dc4:	1ba4      	subs	r4, r4, r6
 8012dc6:	10a4      	asrs	r4, r4, #2
 8012dc8:	2500      	movs	r5, #0
 8012dca:	42a5      	cmp	r5, r4
 8012dcc:	d105      	bne.n	8012dda <__libc_init_array+0x2e>
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012dd4:	4798      	blx	r3
 8012dd6:	3501      	adds	r5, #1
 8012dd8:	e7ee      	b.n	8012db8 <__libc_init_array+0xc>
 8012dda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012dde:	4798      	blx	r3
 8012de0:	3501      	adds	r5, #1
 8012de2:	e7f2      	b.n	8012dca <__libc_init_array+0x1e>
 8012de4:	0802a3bc 	.word	0x0802a3bc
 8012de8:	0802a3bc 	.word	0x0802a3bc
 8012dec:	0802a3bc 	.word	0x0802a3bc
 8012df0:	0802a3c0 	.word	0x0802a3c0

08012df4 <memcmp>:
 8012df4:	b530      	push	{r4, r5, lr}
 8012df6:	2400      	movs	r4, #0
 8012df8:	42a2      	cmp	r2, r4
 8012dfa:	d101      	bne.n	8012e00 <memcmp+0xc>
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	e007      	b.n	8012e10 <memcmp+0x1c>
 8012e00:	5d03      	ldrb	r3, [r0, r4]
 8012e02:	3401      	adds	r4, #1
 8012e04:	190d      	adds	r5, r1, r4
 8012e06:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8012e0a:	42ab      	cmp	r3, r5
 8012e0c:	d0f4      	beq.n	8012df8 <memcmp+0x4>
 8012e0e:	1b58      	subs	r0, r3, r5
 8012e10:	bd30      	pop	{r4, r5, pc}

08012e12 <memcpy>:
 8012e12:	b510      	push	{r4, lr}
 8012e14:	1e43      	subs	r3, r0, #1
 8012e16:	440a      	add	r2, r1
 8012e18:	4291      	cmp	r1, r2
 8012e1a:	d100      	bne.n	8012e1e <memcpy+0xc>
 8012e1c:	bd10      	pop	{r4, pc}
 8012e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e26:	e7f7      	b.n	8012e18 <memcpy+0x6>

08012e28 <memmove>:
 8012e28:	4288      	cmp	r0, r1
 8012e2a:	b510      	push	{r4, lr}
 8012e2c:	eb01 0302 	add.w	r3, r1, r2
 8012e30:	d807      	bhi.n	8012e42 <memmove+0x1a>
 8012e32:	1e42      	subs	r2, r0, #1
 8012e34:	4299      	cmp	r1, r3
 8012e36:	d00a      	beq.n	8012e4e <memmove+0x26>
 8012e38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012e40:	e7f8      	b.n	8012e34 <memmove+0xc>
 8012e42:	4283      	cmp	r3, r0
 8012e44:	d9f5      	bls.n	8012e32 <memmove+0xa>
 8012e46:	1881      	adds	r1, r0, r2
 8012e48:	1ad2      	subs	r2, r2, r3
 8012e4a:	42d3      	cmn	r3, r2
 8012e4c:	d100      	bne.n	8012e50 <memmove+0x28>
 8012e4e:	bd10      	pop	{r4, pc}
 8012e50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012e58:	e7f7      	b.n	8012e4a <memmove+0x22>

08012e5a <memset>:
 8012e5a:	4402      	add	r2, r0
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d100      	bne.n	8012e64 <memset+0xa>
 8012e62:	4770      	bx	lr
 8012e64:	f803 1b01 	strb.w	r1, [r3], #1
 8012e68:	e7f9      	b.n	8012e5e <memset+0x4>
	...

08012e6c <_malloc_r>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	1ccd      	adds	r5, r1, #3
 8012e70:	f025 0503 	bic.w	r5, r5, #3
 8012e74:	3508      	adds	r5, #8
 8012e76:	2d0c      	cmp	r5, #12
 8012e78:	bf38      	it	cc
 8012e7a:	250c      	movcc	r5, #12
 8012e7c:	2d00      	cmp	r5, #0
 8012e7e:	4606      	mov	r6, r0
 8012e80:	db01      	blt.n	8012e86 <_malloc_r+0x1a>
 8012e82:	42a9      	cmp	r1, r5
 8012e84:	d903      	bls.n	8012e8e <_malloc_r+0x22>
 8012e86:	230c      	movs	r3, #12
 8012e88:	6033      	str	r3, [r6, #0]
 8012e8a:	2000      	movs	r0, #0
 8012e8c:	bd70      	pop	{r4, r5, r6, pc}
 8012e8e:	f001 fb65 	bl	801455c <__malloc_lock>
 8012e92:	4a21      	ldr	r2, [pc, #132]	; (8012f18 <_malloc_r+0xac>)
 8012e94:	6814      	ldr	r4, [r2, #0]
 8012e96:	4621      	mov	r1, r4
 8012e98:	b991      	cbnz	r1, 8012ec0 <_malloc_r+0x54>
 8012e9a:	4c20      	ldr	r4, [pc, #128]	; (8012f1c <_malloc_r+0xb0>)
 8012e9c:	6823      	ldr	r3, [r4, #0]
 8012e9e:	b91b      	cbnz	r3, 8012ea8 <_malloc_r+0x3c>
 8012ea0:	4630      	mov	r0, r6
 8012ea2:	f000 fce3 	bl	801386c <_sbrk_r>
 8012ea6:	6020      	str	r0, [r4, #0]
 8012ea8:	4629      	mov	r1, r5
 8012eaa:	4630      	mov	r0, r6
 8012eac:	f000 fcde 	bl	801386c <_sbrk_r>
 8012eb0:	1c43      	adds	r3, r0, #1
 8012eb2:	d124      	bne.n	8012efe <_malloc_r+0x92>
 8012eb4:	230c      	movs	r3, #12
 8012eb6:	6033      	str	r3, [r6, #0]
 8012eb8:	4630      	mov	r0, r6
 8012eba:	f001 fb50 	bl	801455e <__malloc_unlock>
 8012ebe:	e7e4      	b.n	8012e8a <_malloc_r+0x1e>
 8012ec0:	680b      	ldr	r3, [r1, #0]
 8012ec2:	1b5b      	subs	r3, r3, r5
 8012ec4:	d418      	bmi.n	8012ef8 <_malloc_r+0x8c>
 8012ec6:	2b0b      	cmp	r3, #11
 8012ec8:	d90f      	bls.n	8012eea <_malloc_r+0x7e>
 8012eca:	600b      	str	r3, [r1, #0]
 8012ecc:	50cd      	str	r5, [r1, r3]
 8012ece:	18cc      	adds	r4, r1, r3
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f001 fb44 	bl	801455e <__malloc_unlock>
 8012ed6:	f104 000b 	add.w	r0, r4, #11
 8012eda:	1d23      	adds	r3, r4, #4
 8012edc:	f020 0007 	bic.w	r0, r0, #7
 8012ee0:	1ac3      	subs	r3, r0, r3
 8012ee2:	d0d3      	beq.n	8012e8c <_malloc_r+0x20>
 8012ee4:	425a      	negs	r2, r3
 8012ee6:	50e2      	str	r2, [r4, r3]
 8012ee8:	e7d0      	b.n	8012e8c <_malloc_r+0x20>
 8012eea:	428c      	cmp	r4, r1
 8012eec:	684b      	ldr	r3, [r1, #4]
 8012eee:	bf16      	itet	ne
 8012ef0:	6063      	strne	r3, [r4, #4]
 8012ef2:	6013      	streq	r3, [r2, #0]
 8012ef4:	460c      	movne	r4, r1
 8012ef6:	e7eb      	b.n	8012ed0 <_malloc_r+0x64>
 8012ef8:	460c      	mov	r4, r1
 8012efa:	6849      	ldr	r1, [r1, #4]
 8012efc:	e7cc      	b.n	8012e98 <_malloc_r+0x2c>
 8012efe:	1cc4      	adds	r4, r0, #3
 8012f00:	f024 0403 	bic.w	r4, r4, #3
 8012f04:	42a0      	cmp	r0, r4
 8012f06:	d005      	beq.n	8012f14 <_malloc_r+0xa8>
 8012f08:	1a21      	subs	r1, r4, r0
 8012f0a:	4630      	mov	r0, r6
 8012f0c:	f000 fcae 	bl	801386c <_sbrk_r>
 8012f10:	3001      	adds	r0, #1
 8012f12:	d0cf      	beq.n	8012eb4 <_malloc_r+0x48>
 8012f14:	6025      	str	r5, [r4, #0]
 8012f16:	e7db      	b.n	8012ed0 <_malloc_r+0x64>
 8012f18:	20027028 	.word	0x20027028
 8012f1c:	2002702c 	.word	0x2002702c

08012f20 <__cvt>:
 8012f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f22:	ed2d 8b02 	vpush	{d8}
 8012f26:	eeb0 8b40 	vmov.f64	d8, d0
 8012f2a:	b085      	sub	sp, #20
 8012f2c:	4617      	mov	r7, r2
 8012f2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012f30:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012f32:	ee18 2a90 	vmov	r2, s17
 8012f36:	f025 0520 	bic.w	r5, r5, #32
 8012f3a:	2a00      	cmp	r2, #0
 8012f3c:	bfb6      	itet	lt
 8012f3e:	222d      	movlt	r2, #45	; 0x2d
 8012f40:	2200      	movge	r2, #0
 8012f42:	eeb1 8b40 	vneglt.f64	d8, d0
 8012f46:	2d46      	cmp	r5, #70	; 0x46
 8012f48:	460c      	mov	r4, r1
 8012f4a:	701a      	strb	r2, [r3, #0]
 8012f4c:	d004      	beq.n	8012f58 <__cvt+0x38>
 8012f4e:	2d45      	cmp	r5, #69	; 0x45
 8012f50:	d100      	bne.n	8012f54 <__cvt+0x34>
 8012f52:	3401      	adds	r4, #1
 8012f54:	2102      	movs	r1, #2
 8012f56:	e000      	b.n	8012f5a <__cvt+0x3a>
 8012f58:	2103      	movs	r1, #3
 8012f5a:	ab03      	add	r3, sp, #12
 8012f5c:	9301      	str	r3, [sp, #4]
 8012f5e:	ab02      	add	r3, sp, #8
 8012f60:	9300      	str	r3, [sp, #0]
 8012f62:	4622      	mov	r2, r4
 8012f64:	4633      	mov	r3, r6
 8012f66:	eeb0 0b48 	vmov.f64	d0, d8
 8012f6a:	f000 fd75 	bl	8013a58 <_dtoa_r>
 8012f6e:	2d47      	cmp	r5, #71	; 0x47
 8012f70:	d101      	bne.n	8012f76 <__cvt+0x56>
 8012f72:	07fb      	lsls	r3, r7, #31
 8012f74:	d51e      	bpl.n	8012fb4 <__cvt+0x94>
 8012f76:	2d46      	cmp	r5, #70	; 0x46
 8012f78:	eb00 0304 	add.w	r3, r0, r4
 8012f7c:	d10c      	bne.n	8012f98 <__cvt+0x78>
 8012f7e:	7802      	ldrb	r2, [r0, #0]
 8012f80:	2a30      	cmp	r2, #48	; 0x30
 8012f82:	d107      	bne.n	8012f94 <__cvt+0x74>
 8012f84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8c:	bf1c      	itt	ne
 8012f8e:	f1c4 0401 	rsbne	r4, r4, #1
 8012f92:	6034      	strne	r4, [r6, #0]
 8012f94:	6832      	ldr	r2, [r6, #0]
 8012f96:	4413      	add	r3, r2
 8012f98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa0:	d007      	beq.n	8012fb2 <__cvt+0x92>
 8012fa2:	2130      	movs	r1, #48	; 0x30
 8012fa4:	9a03      	ldr	r2, [sp, #12]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d204      	bcs.n	8012fb4 <__cvt+0x94>
 8012faa:	1c54      	adds	r4, r2, #1
 8012fac:	9403      	str	r4, [sp, #12]
 8012fae:	7011      	strb	r1, [r2, #0]
 8012fb0:	e7f8      	b.n	8012fa4 <__cvt+0x84>
 8012fb2:	9303      	str	r3, [sp, #12]
 8012fb4:	9b03      	ldr	r3, [sp, #12]
 8012fb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012fb8:	1a1b      	subs	r3, r3, r0
 8012fba:	6013      	str	r3, [r2, #0]
 8012fbc:	b005      	add	sp, #20
 8012fbe:	ecbd 8b02 	vpop	{d8}
 8012fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012fc4 <__exponent>:
 8012fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fc6:	2900      	cmp	r1, #0
 8012fc8:	4604      	mov	r4, r0
 8012fca:	bfba      	itte	lt
 8012fcc:	4249      	neglt	r1, r1
 8012fce:	232d      	movlt	r3, #45	; 0x2d
 8012fd0:	232b      	movge	r3, #43	; 0x2b
 8012fd2:	2909      	cmp	r1, #9
 8012fd4:	f804 2b02 	strb.w	r2, [r4], #2
 8012fd8:	7043      	strb	r3, [r0, #1]
 8012fda:	dd20      	ble.n	801301e <__exponent+0x5a>
 8012fdc:	f10d 0307 	add.w	r3, sp, #7
 8012fe0:	461f      	mov	r7, r3
 8012fe2:	260a      	movs	r6, #10
 8012fe4:	fb91 f5f6 	sdiv	r5, r1, r6
 8012fe8:	fb06 1115 	mls	r1, r6, r5, r1
 8012fec:	3130      	adds	r1, #48	; 0x30
 8012fee:	2d09      	cmp	r5, #9
 8012ff0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012ff4:	f103 32ff 	add.w	r2, r3, #4294967295
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	dc09      	bgt.n	8013010 <__exponent+0x4c>
 8012ffc:	3130      	adds	r1, #48	; 0x30
 8012ffe:	3b02      	subs	r3, #2
 8013000:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013004:	42bb      	cmp	r3, r7
 8013006:	4622      	mov	r2, r4
 8013008:	d304      	bcc.n	8013014 <__exponent+0x50>
 801300a:	1a10      	subs	r0, r2, r0
 801300c:	b003      	add	sp, #12
 801300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013010:	4613      	mov	r3, r2
 8013012:	e7e7      	b.n	8012fe4 <__exponent+0x20>
 8013014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013018:	f804 2b01 	strb.w	r2, [r4], #1
 801301c:	e7f2      	b.n	8013004 <__exponent+0x40>
 801301e:	2330      	movs	r3, #48	; 0x30
 8013020:	4419      	add	r1, r3
 8013022:	7083      	strb	r3, [r0, #2]
 8013024:	1d02      	adds	r2, r0, #4
 8013026:	70c1      	strb	r1, [r0, #3]
 8013028:	e7ef      	b.n	801300a <__exponent+0x46>
 801302a:	0000      	movs	r0, r0
 801302c:	0000      	movs	r0, r0
	...

08013030 <_printf_float>:
 8013030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013034:	b08d      	sub	sp, #52	; 0x34
 8013036:	460c      	mov	r4, r1
 8013038:	4616      	mov	r6, r2
 801303a:	461f      	mov	r7, r3
 801303c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013040:	4605      	mov	r5, r0
 8013042:	f001 fa63 	bl	801450c <_localeconv_r>
 8013046:	f8d0 b000 	ldr.w	fp, [r0]
 801304a:	4658      	mov	r0, fp
 801304c:	f7ed f962 	bl	8000314 <strlen>
 8013050:	2300      	movs	r3, #0
 8013052:	930a      	str	r3, [sp, #40]	; 0x28
 8013054:	f8d8 3000 	ldr.w	r3, [r8]
 8013058:	9005      	str	r0, [sp, #20]
 801305a:	3307      	adds	r3, #7
 801305c:	f023 0307 	bic.w	r3, r3, #7
 8013060:	f103 0108 	add.w	r1, r3, #8
 8013064:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013068:	6822      	ldr	r2, [r4, #0]
 801306a:	f8c8 1000 	str.w	r1, [r8]
 801306e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013072:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8013076:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8013300 <_printf_float+0x2d0>
 801307a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801307e:	eeb0 6bc0 	vabs.f64	d6, d0
 8013082:	eeb4 6b47 	vcmp.f64	d6, d7
 8013086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308a:	dd24      	ble.n	80130d6 <_printf_float+0xa6>
 801308c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013094:	d502      	bpl.n	801309c <_printf_float+0x6c>
 8013096:	232d      	movs	r3, #45	; 0x2d
 8013098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801309c:	499a      	ldr	r1, [pc, #616]	; (8013308 <_printf_float+0x2d8>)
 801309e:	4b9b      	ldr	r3, [pc, #620]	; (801330c <_printf_float+0x2dc>)
 80130a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80130a4:	bf8c      	ite	hi
 80130a6:	4688      	movhi	r8, r1
 80130a8:	4698      	movls	r8, r3
 80130aa:	f022 0204 	bic.w	r2, r2, #4
 80130ae:	2303      	movs	r3, #3
 80130b0:	6123      	str	r3, [r4, #16]
 80130b2:	6022      	str	r2, [r4, #0]
 80130b4:	f04f 0a00 	mov.w	sl, #0
 80130b8:	9700      	str	r7, [sp, #0]
 80130ba:	4633      	mov	r3, r6
 80130bc:	aa0b      	add	r2, sp, #44	; 0x2c
 80130be:	4621      	mov	r1, r4
 80130c0:	4628      	mov	r0, r5
 80130c2:	f000 f9e1 	bl	8013488 <_printf_common>
 80130c6:	3001      	adds	r0, #1
 80130c8:	f040 8089 	bne.w	80131de <_printf_float+0x1ae>
 80130cc:	f04f 30ff 	mov.w	r0, #4294967295
 80130d0:	b00d      	add	sp, #52	; 0x34
 80130d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d6:	eeb4 0b40 	vcmp.f64	d0, d0
 80130da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130de:	d702      	bvc.n	80130e6 <_printf_float+0xb6>
 80130e0:	498b      	ldr	r1, [pc, #556]	; (8013310 <_printf_float+0x2e0>)
 80130e2:	4b8c      	ldr	r3, [pc, #560]	; (8013314 <_printf_float+0x2e4>)
 80130e4:	e7dc      	b.n	80130a0 <_printf_float+0x70>
 80130e6:	6861      	ldr	r1, [r4, #4]
 80130e8:	1c4b      	adds	r3, r1, #1
 80130ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80130ee:	ab0a      	add	r3, sp, #40	; 0x28
 80130f0:	a809      	add	r0, sp, #36	; 0x24
 80130f2:	d13b      	bne.n	801316c <_printf_float+0x13c>
 80130f4:	2106      	movs	r1, #6
 80130f6:	6061      	str	r1, [r4, #4]
 80130f8:	f04f 0c00 	mov.w	ip, #0
 80130fc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8013100:	e9cd 0900 	strd	r0, r9, [sp]
 8013104:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013108:	6022      	str	r2, [r4, #0]
 801310a:	6861      	ldr	r1, [r4, #4]
 801310c:	4628      	mov	r0, r5
 801310e:	f7ff ff07 	bl	8012f20 <__cvt>
 8013112:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8013116:	2b47      	cmp	r3, #71	; 0x47
 8013118:	4680      	mov	r8, r0
 801311a:	d109      	bne.n	8013130 <_printf_float+0x100>
 801311c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801311e:	1cd8      	adds	r0, r3, #3
 8013120:	db02      	blt.n	8013128 <_printf_float+0xf8>
 8013122:	6862      	ldr	r2, [r4, #4]
 8013124:	4293      	cmp	r3, r2
 8013126:	dd47      	ble.n	80131b8 <_printf_float+0x188>
 8013128:	f1a9 0902 	sub.w	r9, r9, #2
 801312c:	fa5f f989 	uxtb.w	r9, r9
 8013130:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013136:	d824      	bhi.n	8013182 <_printf_float+0x152>
 8013138:	3901      	subs	r1, #1
 801313a:	464a      	mov	r2, r9
 801313c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013140:	9109      	str	r1, [sp, #36]	; 0x24
 8013142:	f7ff ff3f 	bl	8012fc4 <__exponent>
 8013146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013148:	1813      	adds	r3, r2, r0
 801314a:	2a01      	cmp	r2, #1
 801314c:	4682      	mov	sl, r0
 801314e:	6123      	str	r3, [r4, #16]
 8013150:	dc02      	bgt.n	8013158 <_printf_float+0x128>
 8013152:	6822      	ldr	r2, [r4, #0]
 8013154:	07d1      	lsls	r1, r2, #31
 8013156:	d501      	bpl.n	801315c <_printf_float+0x12c>
 8013158:	3301      	adds	r3, #1
 801315a:	6123      	str	r3, [r4, #16]
 801315c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013160:	2b00      	cmp	r3, #0
 8013162:	d0a9      	beq.n	80130b8 <_printf_float+0x88>
 8013164:	232d      	movs	r3, #45	; 0x2d
 8013166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801316a:	e7a5      	b.n	80130b8 <_printf_float+0x88>
 801316c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8013170:	f000 8178 	beq.w	8013464 <_printf_float+0x434>
 8013174:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013178:	d1be      	bne.n	80130f8 <_printf_float+0xc8>
 801317a:	2900      	cmp	r1, #0
 801317c:	d1bc      	bne.n	80130f8 <_printf_float+0xc8>
 801317e:	2101      	movs	r1, #1
 8013180:	e7b9      	b.n	80130f6 <_printf_float+0xc6>
 8013182:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013186:	d119      	bne.n	80131bc <_printf_float+0x18c>
 8013188:	2900      	cmp	r1, #0
 801318a:	6863      	ldr	r3, [r4, #4]
 801318c:	dd0c      	ble.n	80131a8 <_printf_float+0x178>
 801318e:	6121      	str	r1, [r4, #16]
 8013190:	b913      	cbnz	r3, 8013198 <_printf_float+0x168>
 8013192:	6822      	ldr	r2, [r4, #0]
 8013194:	07d2      	lsls	r2, r2, #31
 8013196:	d502      	bpl.n	801319e <_printf_float+0x16e>
 8013198:	3301      	adds	r3, #1
 801319a:	440b      	add	r3, r1
 801319c:	6123      	str	r3, [r4, #16]
 801319e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80131a2:	f04f 0a00 	mov.w	sl, #0
 80131a6:	e7d9      	b.n	801315c <_printf_float+0x12c>
 80131a8:	b913      	cbnz	r3, 80131b0 <_printf_float+0x180>
 80131aa:	6822      	ldr	r2, [r4, #0]
 80131ac:	07d0      	lsls	r0, r2, #31
 80131ae:	d501      	bpl.n	80131b4 <_printf_float+0x184>
 80131b0:	3302      	adds	r3, #2
 80131b2:	e7f3      	b.n	801319c <_printf_float+0x16c>
 80131b4:	2301      	movs	r3, #1
 80131b6:	e7f1      	b.n	801319c <_printf_float+0x16c>
 80131b8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80131bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80131c0:	4293      	cmp	r3, r2
 80131c2:	db05      	blt.n	80131d0 <_printf_float+0x1a0>
 80131c4:	6822      	ldr	r2, [r4, #0]
 80131c6:	6123      	str	r3, [r4, #16]
 80131c8:	07d1      	lsls	r1, r2, #31
 80131ca:	d5e8      	bpl.n	801319e <_printf_float+0x16e>
 80131cc:	3301      	adds	r3, #1
 80131ce:	e7e5      	b.n	801319c <_printf_float+0x16c>
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	bfd4      	ite	le
 80131d4:	f1c3 0302 	rsble	r3, r3, #2
 80131d8:	2301      	movgt	r3, #1
 80131da:	4413      	add	r3, r2
 80131dc:	e7de      	b.n	801319c <_printf_float+0x16c>
 80131de:	6823      	ldr	r3, [r4, #0]
 80131e0:	055a      	lsls	r2, r3, #21
 80131e2:	d407      	bmi.n	80131f4 <_printf_float+0x1c4>
 80131e4:	6923      	ldr	r3, [r4, #16]
 80131e6:	4642      	mov	r2, r8
 80131e8:	4631      	mov	r1, r6
 80131ea:	4628      	mov	r0, r5
 80131ec:	47b8      	blx	r7
 80131ee:	3001      	adds	r0, #1
 80131f0:	d12a      	bne.n	8013248 <_printf_float+0x218>
 80131f2:	e76b      	b.n	80130cc <_printf_float+0x9c>
 80131f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80131f8:	f240 80de 	bls.w	80133b8 <_printf_float+0x388>
 80131fc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013200:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013208:	d133      	bne.n	8013272 <_printf_float+0x242>
 801320a:	2301      	movs	r3, #1
 801320c:	4a42      	ldr	r2, [pc, #264]	; (8013318 <_printf_float+0x2e8>)
 801320e:	4631      	mov	r1, r6
 8013210:	4628      	mov	r0, r5
 8013212:	47b8      	blx	r7
 8013214:	3001      	adds	r0, #1
 8013216:	f43f af59 	beq.w	80130cc <_printf_float+0x9c>
 801321a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801321e:	429a      	cmp	r2, r3
 8013220:	db02      	blt.n	8013228 <_printf_float+0x1f8>
 8013222:	6823      	ldr	r3, [r4, #0]
 8013224:	07d8      	lsls	r0, r3, #31
 8013226:	d50f      	bpl.n	8013248 <_printf_float+0x218>
 8013228:	9b05      	ldr	r3, [sp, #20]
 801322a:	465a      	mov	r2, fp
 801322c:	4631      	mov	r1, r6
 801322e:	4628      	mov	r0, r5
 8013230:	47b8      	blx	r7
 8013232:	3001      	adds	r0, #1
 8013234:	f43f af4a 	beq.w	80130cc <_printf_float+0x9c>
 8013238:	f04f 0800 	mov.w	r8, #0
 801323c:	f104 091a 	add.w	r9, r4, #26
 8013240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013242:	3b01      	subs	r3, #1
 8013244:	4543      	cmp	r3, r8
 8013246:	dc09      	bgt.n	801325c <_printf_float+0x22c>
 8013248:	6823      	ldr	r3, [r4, #0]
 801324a:	079b      	lsls	r3, r3, #30
 801324c:	f100 8105 	bmi.w	801345a <_printf_float+0x42a>
 8013250:	68e0      	ldr	r0, [r4, #12]
 8013252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013254:	4298      	cmp	r0, r3
 8013256:	bfb8      	it	lt
 8013258:	4618      	movlt	r0, r3
 801325a:	e739      	b.n	80130d0 <_printf_float+0xa0>
 801325c:	2301      	movs	r3, #1
 801325e:	464a      	mov	r2, r9
 8013260:	4631      	mov	r1, r6
 8013262:	4628      	mov	r0, r5
 8013264:	47b8      	blx	r7
 8013266:	3001      	adds	r0, #1
 8013268:	f43f af30 	beq.w	80130cc <_printf_float+0x9c>
 801326c:	f108 0801 	add.w	r8, r8, #1
 8013270:	e7e6      	b.n	8013240 <_printf_float+0x210>
 8013272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013274:	2b00      	cmp	r3, #0
 8013276:	dc2b      	bgt.n	80132d0 <_printf_float+0x2a0>
 8013278:	2301      	movs	r3, #1
 801327a:	4a27      	ldr	r2, [pc, #156]	; (8013318 <_printf_float+0x2e8>)
 801327c:	4631      	mov	r1, r6
 801327e:	4628      	mov	r0, r5
 8013280:	47b8      	blx	r7
 8013282:	3001      	adds	r0, #1
 8013284:	f43f af22 	beq.w	80130cc <_printf_float+0x9c>
 8013288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801328a:	b923      	cbnz	r3, 8013296 <_printf_float+0x266>
 801328c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801328e:	b913      	cbnz	r3, 8013296 <_printf_float+0x266>
 8013290:	6823      	ldr	r3, [r4, #0]
 8013292:	07d9      	lsls	r1, r3, #31
 8013294:	d5d8      	bpl.n	8013248 <_printf_float+0x218>
 8013296:	9b05      	ldr	r3, [sp, #20]
 8013298:	465a      	mov	r2, fp
 801329a:	4631      	mov	r1, r6
 801329c:	4628      	mov	r0, r5
 801329e:	47b8      	blx	r7
 80132a0:	3001      	adds	r0, #1
 80132a2:	f43f af13 	beq.w	80130cc <_printf_float+0x9c>
 80132a6:	f04f 0900 	mov.w	r9, #0
 80132aa:	f104 0a1a 	add.w	sl, r4, #26
 80132ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132b0:	425b      	negs	r3, r3
 80132b2:	454b      	cmp	r3, r9
 80132b4:	dc01      	bgt.n	80132ba <_printf_float+0x28a>
 80132b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132b8:	e795      	b.n	80131e6 <_printf_float+0x1b6>
 80132ba:	2301      	movs	r3, #1
 80132bc:	4652      	mov	r2, sl
 80132be:	4631      	mov	r1, r6
 80132c0:	4628      	mov	r0, r5
 80132c2:	47b8      	blx	r7
 80132c4:	3001      	adds	r0, #1
 80132c6:	f43f af01 	beq.w	80130cc <_printf_float+0x9c>
 80132ca:	f109 0901 	add.w	r9, r9, #1
 80132ce:	e7ee      	b.n	80132ae <_printf_float+0x27e>
 80132d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80132d4:	429a      	cmp	r2, r3
 80132d6:	bfa8      	it	ge
 80132d8:	461a      	movge	r2, r3
 80132da:	2a00      	cmp	r2, #0
 80132dc:	4691      	mov	r9, r2
 80132de:	dd07      	ble.n	80132f0 <_printf_float+0x2c0>
 80132e0:	4613      	mov	r3, r2
 80132e2:	4631      	mov	r1, r6
 80132e4:	4642      	mov	r2, r8
 80132e6:	4628      	mov	r0, r5
 80132e8:	47b8      	blx	r7
 80132ea:	3001      	adds	r0, #1
 80132ec:	f43f aeee 	beq.w	80130cc <_printf_float+0x9c>
 80132f0:	f104 031a 	add.w	r3, r4, #26
 80132f4:	f04f 0a00 	mov.w	sl, #0
 80132f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80132fc:	9307      	str	r3, [sp, #28]
 80132fe:	e017      	b.n	8013330 <_printf_float+0x300>
 8013300:	ffffffff 	.word	0xffffffff
 8013304:	7fefffff 	.word	0x7fefffff
 8013308:	0802a154 	.word	0x0802a154
 801330c:	0802a150 	.word	0x0802a150
 8013310:	0802a15c 	.word	0x0802a15c
 8013314:	0802a158 	.word	0x0802a158
 8013318:	0802a160 	.word	0x0802a160
 801331c:	2301      	movs	r3, #1
 801331e:	9a07      	ldr	r2, [sp, #28]
 8013320:	4631      	mov	r1, r6
 8013322:	4628      	mov	r0, r5
 8013324:	47b8      	blx	r7
 8013326:	3001      	adds	r0, #1
 8013328:	f43f aed0 	beq.w	80130cc <_printf_float+0x9c>
 801332c:	f10a 0a01 	add.w	sl, sl, #1
 8013330:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013332:	9306      	str	r3, [sp, #24]
 8013334:	eba3 0309 	sub.w	r3, r3, r9
 8013338:	4553      	cmp	r3, sl
 801333a:	dcef      	bgt.n	801331c <_printf_float+0x2ec>
 801333c:	9b06      	ldr	r3, [sp, #24]
 801333e:	4498      	add	r8, r3
 8013340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013344:	429a      	cmp	r2, r3
 8013346:	db15      	blt.n	8013374 <_printf_float+0x344>
 8013348:	6823      	ldr	r3, [r4, #0]
 801334a:	07da      	lsls	r2, r3, #31
 801334c:	d412      	bmi.n	8013374 <_printf_float+0x344>
 801334e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013350:	9a06      	ldr	r2, [sp, #24]
 8013352:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013354:	1a9a      	subs	r2, r3, r2
 8013356:	eba3 0a01 	sub.w	sl, r3, r1
 801335a:	4592      	cmp	sl, r2
 801335c:	bfa8      	it	ge
 801335e:	4692      	movge	sl, r2
 8013360:	f1ba 0f00 	cmp.w	sl, #0
 8013364:	dc0e      	bgt.n	8013384 <_printf_float+0x354>
 8013366:	f04f 0800 	mov.w	r8, #0
 801336a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801336e:	f104 091a 	add.w	r9, r4, #26
 8013372:	e019      	b.n	80133a8 <_printf_float+0x378>
 8013374:	9b05      	ldr	r3, [sp, #20]
 8013376:	465a      	mov	r2, fp
 8013378:	4631      	mov	r1, r6
 801337a:	4628      	mov	r0, r5
 801337c:	47b8      	blx	r7
 801337e:	3001      	adds	r0, #1
 8013380:	d1e5      	bne.n	801334e <_printf_float+0x31e>
 8013382:	e6a3      	b.n	80130cc <_printf_float+0x9c>
 8013384:	4653      	mov	r3, sl
 8013386:	4642      	mov	r2, r8
 8013388:	4631      	mov	r1, r6
 801338a:	4628      	mov	r0, r5
 801338c:	47b8      	blx	r7
 801338e:	3001      	adds	r0, #1
 8013390:	d1e9      	bne.n	8013366 <_printf_float+0x336>
 8013392:	e69b      	b.n	80130cc <_printf_float+0x9c>
 8013394:	2301      	movs	r3, #1
 8013396:	464a      	mov	r2, r9
 8013398:	4631      	mov	r1, r6
 801339a:	4628      	mov	r0, r5
 801339c:	47b8      	blx	r7
 801339e:	3001      	adds	r0, #1
 80133a0:	f43f ae94 	beq.w	80130cc <_printf_float+0x9c>
 80133a4:	f108 0801 	add.w	r8, r8, #1
 80133a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80133ac:	1a9b      	subs	r3, r3, r2
 80133ae:	eba3 030a 	sub.w	r3, r3, sl
 80133b2:	4543      	cmp	r3, r8
 80133b4:	dcee      	bgt.n	8013394 <_printf_float+0x364>
 80133b6:	e747      	b.n	8013248 <_printf_float+0x218>
 80133b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133ba:	2a01      	cmp	r2, #1
 80133bc:	dc01      	bgt.n	80133c2 <_printf_float+0x392>
 80133be:	07db      	lsls	r3, r3, #31
 80133c0:	d539      	bpl.n	8013436 <_printf_float+0x406>
 80133c2:	2301      	movs	r3, #1
 80133c4:	4642      	mov	r2, r8
 80133c6:	4631      	mov	r1, r6
 80133c8:	4628      	mov	r0, r5
 80133ca:	47b8      	blx	r7
 80133cc:	3001      	adds	r0, #1
 80133ce:	f43f ae7d 	beq.w	80130cc <_printf_float+0x9c>
 80133d2:	9b05      	ldr	r3, [sp, #20]
 80133d4:	465a      	mov	r2, fp
 80133d6:	4631      	mov	r1, r6
 80133d8:	4628      	mov	r0, r5
 80133da:	47b8      	blx	r7
 80133dc:	3001      	adds	r0, #1
 80133de:	f108 0801 	add.w	r8, r8, #1
 80133e2:	f43f ae73 	beq.w	80130cc <_printf_float+0x9c>
 80133e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80133ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80133f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80133f8:	d018      	beq.n	801342c <_printf_float+0x3fc>
 80133fa:	4642      	mov	r2, r8
 80133fc:	4631      	mov	r1, r6
 80133fe:	4628      	mov	r0, r5
 8013400:	47b8      	blx	r7
 8013402:	3001      	adds	r0, #1
 8013404:	d10e      	bne.n	8013424 <_printf_float+0x3f4>
 8013406:	e661      	b.n	80130cc <_printf_float+0x9c>
 8013408:	2301      	movs	r3, #1
 801340a:	464a      	mov	r2, r9
 801340c:	4631      	mov	r1, r6
 801340e:	4628      	mov	r0, r5
 8013410:	47b8      	blx	r7
 8013412:	3001      	adds	r0, #1
 8013414:	f43f ae5a 	beq.w	80130cc <_printf_float+0x9c>
 8013418:	f108 0801 	add.w	r8, r8, #1
 801341c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801341e:	3b01      	subs	r3, #1
 8013420:	4543      	cmp	r3, r8
 8013422:	dcf1      	bgt.n	8013408 <_printf_float+0x3d8>
 8013424:	4653      	mov	r3, sl
 8013426:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801342a:	e6dd      	b.n	80131e8 <_printf_float+0x1b8>
 801342c:	f04f 0800 	mov.w	r8, #0
 8013430:	f104 091a 	add.w	r9, r4, #26
 8013434:	e7f2      	b.n	801341c <_printf_float+0x3ec>
 8013436:	2301      	movs	r3, #1
 8013438:	e7df      	b.n	80133fa <_printf_float+0x3ca>
 801343a:	2301      	movs	r3, #1
 801343c:	464a      	mov	r2, r9
 801343e:	4631      	mov	r1, r6
 8013440:	4628      	mov	r0, r5
 8013442:	47b8      	blx	r7
 8013444:	3001      	adds	r0, #1
 8013446:	f43f ae41 	beq.w	80130cc <_printf_float+0x9c>
 801344a:	f108 0801 	add.w	r8, r8, #1
 801344e:	68e3      	ldr	r3, [r4, #12]
 8013450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013452:	1a9b      	subs	r3, r3, r2
 8013454:	4543      	cmp	r3, r8
 8013456:	dcf0      	bgt.n	801343a <_printf_float+0x40a>
 8013458:	e6fa      	b.n	8013250 <_printf_float+0x220>
 801345a:	f04f 0800 	mov.w	r8, #0
 801345e:	f104 0919 	add.w	r9, r4, #25
 8013462:	e7f4      	b.n	801344e <_printf_float+0x41e>
 8013464:	2900      	cmp	r1, #0
 8013466:	f43f ae8a 	beq.w	801317e <_printf_float+0x14e>
 801346a:	f04f 0c00 	mov.w	ip, #0
 801346e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8013472:	e9cd 0900 	strd	r0, r9, [sp]
 8013476:	6022      	str	r2, [r4, #0]
 8013478:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801347c:	4628      	mov	r0, r5
 801347e:	f7ff fd4f 	bl	8012f20 <__cvt>
 8013482:	4680      	mov	r8, r0
 8013484:	e64a      	b.n	801311c <_printf_float+0xec>
 8013486:	bf00      	nop

08013488 <_printf_common>:
 8013488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801348c:	4691      	mov	r9, r2
 801348e:	461f      	mov	r7, r3
 8013490:	688a      	ldr	r2, [r1, #8]
 8013492:	690b      	ldr	r3, [r1, #16]
 8013494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013498:	4293      	cmp	r3, r2
 801349a:	bfb8      	it	lt
 801349c:	4613      	movlt	r3, r2
 801349e:	f8c9 3000 	str.w	r3, [r9]
 80134a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80134a6:	4606      	mov	r6, r0
 80134a8:	460c      	mov	r4, r1
 80134aa:	b112      	cbz	r2, 80134b2 <_printf_common+0x2a>
 80134ac:	3301      	adds	r3, #1
 80134ae:	f8c9 3000 	str.w	r3, [r9]
 80134b2:	6823      	ldr	r3, [r4, #0]
 80134b4:	0699      	lsls	r1, r3, #26
 80134b6:	bf42      	ittt	mi
 80134b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80134bc:	3302      	addmi	r3, #2
 80134be:	f8c9 3000 	strmi.w	r3, [r9]
 80134c2:	6825      	ldr	r5, [r4, #0]
 80134c4:	f015 0506 	ands.w	r5, r5, #6
 80134c8:	d107      	bne.n	80134da <_printf_common+0x52>
 80134ca:	f104 0a19 	add.w	sl, r4, #25
 80134ce:	68e3      	ldr	r3, [r4, #12]
 80134d0:	f8d9 2000 	ldr.w	r2, [r9]
 80134d4:	1a9b      	subs	r3, r3, r2
 80134d6:	42ab      	cmp	r3, r5
 80134d8:	dc28      	bgt.n	801352c <_printf_common+0xa4>
 80134da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80134de:	6822      	ldr	r2, [r4, #0]
 80134e0:	3300      	adds	r3, #0
 80134e2:	bf18      	it	ne
 80134e4:	2301      	movne	r3, #1
 80134e6:	0692      	lsls	r2, r2, #26
 80134e8:	d42d      	bmi.n	8013546 <_printf_common+0xbe>
 80134ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80134ee:	4639      	mov	r1, r7
 80134f0:	4630      	mov	r0, r6
 80134f2:	47c0      	blx	r8
 80134f4:	3001      	adds	r0, #1
 80134f6:	d020      	beq.n	801353a <_printf_common+0xb2>
 80134f8:	6823      	ldr	r3, [r4, #0]
 80134fa:	68e5      	ldr	r5, [r4, #12]
 80134fc:	f8d9 2000 	ldr.w	r2, [r9]
 8013500:	f003 0306 	and.w	r3, r3, #6
 8013504:	2b04      	cmp	r3, #4
 8013506:	bf08      	it	eq
 8013508:	1aad      	subeq	r5, r5, r2
 801350a:	68a3      	ldr	r3, [r4, #8]
 801350c:	6922      	ldr	r2, [r4, #16]
 801350e:	bf0c      	ite	eq
 8013510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013514:	2500      	movne	r5, #0
 8013516:	4293      	cmp	r3, r2
 8013518:	bfc4      	itt	gt
 801351a:	1a9b      	subgt	r3, r3, r2
 801351c:	18ed      	addgt	r5, r5, r3
 801351e:	f04f 0900 	mov.w	r9, #0
 8013522:	341a      	adds	r4, #26
 8013524:	454d      	cmp	r5, r9
 8013526:	d11a      	bne.n	801355e <_printf_common+0xd6>
 8013528:	2000      	movs	r0, #0
 801352a:	e008      	b.n	801353e <_printf_common+0xb6>
 801352c:	2301      	movs	r3, #1
 801352e:	4652      	mov	r2, sl
 8013530:	4639      	mov	r1, r7
 8013532:	4630      	mov	r0, r6
 8013534:	47c0      	blx	r8
 8013536:	3001      	adds	r0, #1
 8013538:	d103      	bne.n	8013542 <_printf_common+0xba>
 801353a:	f04f 30ff 	mov.w	r0, #4294967295
 801353e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013542:	3501      	adds	r5, #1
 8013544:	e7c3      	b.n	80134ce <_printf_common+0x46>
 8013546:	18e1      	adds	r1, r4, r3
 8013548:	1c5a      	adds	r2, r3, #1
 801354a:	2030      	movs	r0, #48	; 0x30
 801354c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013550:	4422      	add	r2, r4
 8013552:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013556:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801355a:	3302      	adds	r3, #2
 801355c:	e7c5      	b.n	80134ea <_printf_common+0x62>
 801355e:	2301      	movs	r3, #1
 8013560:	4622      	mov	r2, r4
 8013562:	4639      	mov	r1, r7
 8013564:	4630      	mov	r0, r6
 8013566:	47c0      	blx	r8
 8013568:	3001      	adds	r0, #1
 801356a:	d0e6      	beq.n	801353a <_printf_common+0xb2>
 801356c:	f109 0901 	add.w	r9, r9, #1
 8013570:	e7d8      	b.n	8013524 <_printf_common+0x9c>
	...

08013574 <_printf_i>:
 8013574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013578:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801357c:	460c      	mov	r4, r1
 801357e:	7e09      	ldrb	r1, [r1, #24]
 8013580:	b085      	sub	sp, #20
 8013582:	296e      	cmp	r1, #110	; 0x6e
 8013584:	4617      	mov	r7, r2
 8013586:	4606      	mov	r6, r0
 8013588:	4698      	mov	r8, r3
 801358a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801358c:	f000 80b3 	beq.w	80136f6 <_printf_i+0x182>
 8013590:	d822      	bhi.n	80135d8 <_printf_i+0x64>
 8013592:	2963      	cmp	r1, #99	; 0x63
 8013594:	d036      	beq.n	8013604 <_printf_i+0x90>
 8013596:	d80a      	bhi.n	80135ae <_printf_i+0x3a>
 8013598:	2900      	cmp	r1, #0
 801359a:	f000 80b9 	beq.w	8013710 <_printf_i+0x19c>
 801359e:	2958      	cmp	r1, #88	; 0x58
 80135a0:	f000 8083 	beq.w	80136aa <_printf_i+0x136>
 80135a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80135a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80135ac:	e032      	b.n	8013614 <_printf_i+0xa0>
 80135ae:	2964      	cmp	r1, #100	; 0x64
 80135b0:	d001      	beq.n	80135b6 <_printf_i+0x42>
 80135b2:	2969      	cmp	r1, #105	; 0x69
 80135b4:	d1f6      	bne.n	80135a4 <_printf_i+0x30>
 80135b6:	6820      	ldr	r0, [r4, #0]
 80135b8:	6813      	ldr	r3, [r2, #0]
 80135ba:	0605      	lsls	r5, r0, #24
 80135bc:	f103 0104 	add.w	r1, r3, #4
 80135c0:	d52a      	bpl.n	8013618 <_printf_i+0xa4>
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	6011      	str	r1, [r2, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	da03      	bge.n	80135d2 <_printf_i+0x5e>
 80135ca:	222d      	movs	r2, #45	; 0x2d
 80135cc:	425b      	negs	r3, r3
 80135ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80135d2:	486f      	ldr	r0, [pc, #444]	; (8013790 <_printf_i+0x21c>)
 80135d4:	220a      	movs	r2, #10
 80135d6:	e039      	b.n	801364c <_printf_i+0xd8>
 80135d8:	2973      	cmp	r1, #115	; 0x73
 80135da:	f000 809d 	beq.w	8013718 <_printf_i+0x1a4>
 80135de:	d808      	bhi.n	80135f2 <_printf_i+0x7e>
 80135e0:	296f      	cmp	r1, #111	; 0x6f
 80135e2:	d020      	beq.n	8013626 <_printf_i+0xb2>
 80135e4:	2970      	cmp	r1, #112	; 0x70
 80135e6:	d1dd      	bne.n	80135a4 <_printf_i+0x30>
 80135e8:	6823      	ldr	r3, [r4, #0]
 80135ea:	f043 0320 	orr.w	r3, r3, #32
 80135ee:	6023      	str	r3, [r4, #0]
 80135f0:	e003      	b.n	80135fa <_printf_i+0x86>
 80135f2:	2975      	cmp	r1, #117	; 0x75
 80135f4:	d017      	beq.n	8013626 <_printf_i+0xb2>
 80135f6:	2978      	cmp	r1, #120	; 0x78
 80135f8:	d1d4      	bne.n	80135a4 <_printf_i+0x30>
 80135fa:	2378      	movs	r3, #120	; 0x78
 80135fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013600:	4864      	ldr	r0, [pc, #400]	; (8013794 <_printf_i+0x220>)
 8013602:	e055      	b.n	80136b0 <_printf_i+0x13c>
 8013604:	6813      	ldr	r3, [r2, #0]
 8013606:	1d19      	adds	r1, r3, #4
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	6011      	str	r1, [r2, #0]
 801360c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013614:	2301      	movs	r3, #1
 8013616:	e08c      	b.n	8013732 <_printf_i+0x1be>
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	6011      	str	r1, [r2, #0]
 801361c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013620:	bf18      	it	ne
 8013622:	b21b      	sxthne	r3, r3
 8013624:	e7cf      	b.n	80135c6 <_printf_i+0x52>
 8013626:	6813      	ldr	r3, [r2, #0]
 8013628:	6825      	ldr	r5, [r4, #0]
 801362a:	1d18      	adds	r0, r3, #4
 801362c:	6010      	str	r0, [r2, #0]
 801362e:	0628      	lsls	r0, r5, #24
 8013630:	d501      	bpl.n	8013636 <_printf_i+0xc2>
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	e002      	b.n	801363c <_printf_i+0xc8>
 8013636:	0668      	lsls	r0, r5, #25
 8013638:	d5fb      	bpl.n	8013632 <_printf_i+0xbe>
 801363a:	881b      	ldrh	r3, [r3, #0]
 801363c:	4854      	ldr	r0, [pc, #336]	; (8013790 <_printf_i+0x21c>)
 801363e:	296f      	cmp	r1, #111	; 0x6f
 8013640:	bf14      	ite	ne
 8013642:	220a      	movne	r2, #10
 8013644:	2208      	moveq	r2, #8
 8013646:	2100      	movs	r1, #0
 8013648:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801364c:	6865      	ldr	r5, [r4, #4]
 801364e:	60a5      	str	r5, [r4, #8]
 8013650:	2d00      	cmp	r5, #0
 8013652:	f2c0 8095 	blt.w	8013780 <_printf_i+0x20c>
 8013656:	6821      	ldr	r1, [r4, #0]
 8013658:	f021 0104 	bic.w	r1, r1, #4
 801365c:	6021      	str	r1, [r4, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d13d      	bne.n	80136de <_printf_i+0x16a>
 8013662:	2d00      	cmp	r5, #0
 8013664:	f040 808e 	bne.w	8013784 <_printf_i+0x210>
 8013668:	4665      	mov	r5, ip
 801366a:	2a08      	cmp	r2, #8
 801366c:	d10b      	bne.n	8013686 <_printf_i+0x112>
 801366e:	6823      	ldr	r3, [r4, #0]
 8013670:	07db      	lsls	r3, r3, #31
 8013672:	d508      	bpl.n	8013686 <_printf_i+0x112>
 8013674:	6923      	ldr	r3, [r4, #16]
 8013676:	6862      	ldr	r2, [r4, #4]
 8013678:	429a      	cmp	r2, r3
 801367a:	bfde      	ittt	le
 801367c:	2330      	movle	r3, #48	; 0x30
 801367e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013682:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013686:	ebac 0305 	sub.w	r3, ip, r5
 801368a:	6123      	str	r3, [r4, #16]
 801368c:	f8cd 8000 	str.w	r8, [sp]
 8013690:	463b      	mov	r3, r7
 8013692:	aa03      	add	r2, sp, #12
 8013694:	4621      	mov	r1, r4
 8013696:	4630      	mov	r0, r6
 8013698:	f7ff fef6 	bl	8013488 <_printf_common>
 801369c:	3001      	adds	r0, #1
 801369e:	d14d      	bne.n	801373c <_printf_i+0x1c8>
 80136a0:	f04f 30ff 	mov.w	r0, #4294967295
 80136a4:	b005      	add	sp, #20
 80136a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136aa:	4839      	ldr	r0, [pc, #228]	; (8013790 <_printf_i+0x21c>)
 80136ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80136b0:	6813      	ldr	r3, [r2, #0]
 80136b2:	6821      	ldr	r1, [r4, #0]
 80136b4:	1d1d      	adds	r5, r3, #4
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	6015      	str	r5, [r2, #0]
 80136ba:	060a      	lsls	r2, r1, #24
 80136bc:	d50b      	bpl.n	80136d6 <_printf_i+0x162>
 80136be:	07ca      	lsls	r2, r1, #31
 80136c0:	bf44      	itt	mi
 80136c2:	f041 0120 	orrmi.w	r1, r1, #32
 80136c6:	6021      	strmi	r1, [r4, #0]
 80136c8:	b91b      	cbnz	r3, 80136d2 <_printf_i+0x15e>
 80136ca:	6822      	ldr	r2, [r4, #0]
 80136cc:	f022 0220 	bic.w	r2, r2, #32
 80136d0:	6022      	str	r2, [r4, #0]
 80136d2:	2210      	movs	r2, #16
 80136d4:	e7b7      	b.n	8013646 <_printf_i+0xd2>
 80136d6:	064d      	lsls	r5, r1, #25
 80136d8:	bf48      	it	mi
 80136da:	b29b      	uxthmi	r3, r3
 80136dc:	e7ef      	b.n	80136be <_printf_i+0x14a>
 80136de:	4665      	mov	r5, ip
 80136e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80136e4:	fb02 3311 	mls	r3, r2, r1, r3
 80136e8:	5cc3      	ldrb	r3, [r0, r3]
 80136ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80136ee:	460b      	mov	r3, r1
 80136f0:	2900      	cmp	r1, #0
 80136f2:	d1f5      	bne.n	80136e0 <_printf_i+0x16c>
 80136f4:	e7b9      	b.n	801366a <_printf_i+0xf6>
 80136f6:	6813      	ldr	r3, [r2, #0]
 80136f8:	6825      	ldr	r5, [r4, #0]
 80136fa:	6961      	ldr	r1, [r4, #20]
 80136fc:	1d18      	adds	r0, r3, #4
 80136fe:	6010      	str	r0, [r2, #0]
 8013700:	0628      	lsls	r0, r5, #24
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	d501      	bpl.n	801370a <_printf_i+0x196>
 8013706:	6019      	str	r1, [r3, #0]
 8013708:	e002      	b.n	8013710 <_printf_i+0x19c>
 801370a:	066a      	lsls	r2, r5, #25
 801370c:	d5fb      	bpl.n	8013706 <_printf_i+0x192>
 801370e:	8019      	strh	r1, [r3, #0]
 8013710:	2300      	movs	r3, #0
 8013712:	6123      	str	r3, [r4, #16]
 8013714:	4665      	mov	r5, ip
 8013716:	e7b9      	b.n	801368c <_printf_i+0x118>
 8013718:	6813      	ldr	r3, [r2, #0]
 801371a:	1d19      	adds	r1, r3, #4
 801371c:	6011      	str	r1, [r2, #0]
 801371e:	681d      	ldr	r5, [r3, #0]
 8013720:	6862      	ldr	r2, [r4, #4]
 8013722:	2100      	movs	r1, #0
 8013724:	4628      	mov	r0, r5
 8013726:	f7ec fe03 	bl	8000330 <memchr>
 801372a:	b108      	cbz	r0, 8013730 <_printf_i+0x1bc>
 801372c:	1b40      	subs	r0, r0, r5
 801372e:	6060      	str	r0, [r4, #4]
 8013730:	6863      	ldr	r3, [r4, #4]
 8013732:	6123      	str	r3, [r4, #16]
 8013734:	2300      	movs	r3, #0
 8013736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801373a:	e7a7      	b.n	801368c <_printf_i+0x118>
 801373c:	6923      	ldr	r3, [r4, #16]
 801373e:	462a      	mov	r2, r5
 8013740:	4639      	mov	r1, r7
 8013742:	4630      	mov	r0, r6
 8013744:	47c0      	blx	r8
 8013746:	3001      	adds	r0, #1
 8013748:	d0aa      	beq.n	80136a0 <_printf_i+0x12c>
 801374a:	6823      	ldr	r3, [r4, #0]
 801374c:	079b      	lsls	r3, r3, #30
 801374e:	d413      	bmi.n	8013778 <_printf_i+0x204>
 8013750:	68e0      	ldr	r0, [r4, #12]
 8013752:	9b03      	ldr	r3, [sp, #12]
 8013754:	4298      	cmp	r0, r3
 8013756:	bfb8      	it	lt
 8013758:	4618      	movlt	r0, r3
 801375a:	e7a3      	b.n	80136a4 <_printf_i+0x130>
 801375c:	2301      	movs	r3, #1
 801375e:	464a      	mov	r2, r9
 8013760:	4639      	mov	r1, r7
 8013762:	4630      	mov	r0, r6
 8013764:	47c0      	blx	r8
 8013766:	3001      	adds	r0, #1
 8013768:	d09a      	beq.n	80136a0 <_printf_i+0x12c>
 801376a:	3501      	adds	r5, #1
 801376c:	68e3      	ldr	r3, [r4, #12]
 801376e:	9a03      	ldr	r2, [sp, #12]
 8013770:	1a9b      	subs	r3, r3, r2
 8013772:	42ab      	cmp	r3, r5
 8013774:	dcf2      	bgt.n	801375c <_printf_i+0x1e8>
 8013776:	e7eb      	b.n	8013750 <_printf_i+0x1dc>
 8013778:	2500      	movs	r5, #0
 801377a:	f104 0919 	add.w	r9, r4, #25
 801377e:	e7f5      	b.n	801376c <_printf_i+0x1f8>
 8013780:	2b00      	cmp	r3, #0
 8013782:	d1ac      	bne.n	80136de <_printf_i+0x16a>
 8013784:	7803      	ldrb	r3, [r0, #0]
 8013786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801378a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801378e:	e76c      	b.n	801366a <_printf_i+0xf6>
 8013790:	0802a162 	.word	0x0802a162
 8013794:	0802a173 	.word	0x0802a173

08013798 <cleanup_glue>:
 8013798:	b538      	push	{r3, r4, r5, lr}
 801379a:	460c      	mov	r4, r1
 801379c:	6809      	ldr	r1, [r1, #0]
 801379e:	4605      	mov	r5, r0
 80137a0:	b109      	cbz	r1, 80137a6 <cleanup_glue+0xe>
 80137a2:	f7ff fff9 	bl	8013798 <cleanup_glue>
 80137a6:	4621      	mov	r1, r4
 80137a8:	4628      	mov	r0, r5
 80137aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137ae:	f001 b9c1 	b.w	8014b34 <_free_r>
	...

080137b4 <_reclaim_reent>:
 80137b4:	4b2c      	ldr	r3, [pc, #176]	; (8013868 <_reclaim_reent+0xb4>)
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	4283      	cmp	r3, r0
 80137ba:	b570      	push	{r4, r5, r6, lr}
 80137bc:	4604      	mov	r4, r0
 80137be:	d051      	beq.n	8013864 <_reclaim_reent+0xb0>
 80137c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80137c2:	b143      	cbz	r3, 80137d6 <_reclaim_reent+0x22>
 80137c4:	68db      	ldr	r3, [r3, #12]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d14a      	bne.n	8013860 <_reclaim_reent+0xac>
 80137ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137cc:	6819      	ldr	r1, [r3, #0]
 80137ce:	b111      	cbz	r1, 80137d6 <_reclaim_reent+0x22>
 80137d0:	4620      	mov	r0, r4
 80137d2:	f001 f9af 	bl	8014b34 <_free_r>
 80137d6:	6961      	ldr	r1, [r4, #20]
 80137d8:	b111      	cbz	r1, 80137e0 <_reclaim_reent+0x2c>
 80137da:	4620      	mov	r0, r4
 80137dc:	f001 f9aa 	bl	8014b34 <_free_r>
 80137e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80137e2:	b111      	cbz	r1, 80137ea <_reclaim_reent+0x36>
 80137e4:	4620      	mov	r0, r4
 80137e6:	f001 f9a5 	bl	8014b34 <_free_r>
 80137ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80137ec:	b111      	cbz	r1, 80137f4 <_reclaim_reent+0x40>
 80137ee:	4620      	mov	r0, r4
 80137f0:	f001 f9a0 	bl	8014b34 <_free_r>
 80137f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80137f6:	b111      	cbz	r1, 80137fe <_reclaim_reent+0x4a>
 80137f8:	4620      	mov	r0, r4
 80137fa:	f001 f99b 	bl	8014b34 <_free_r>
 80137fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013800:	b111      	cbz	r1, 8013808 <_reclaim_reent+0x54>
 8013802:	4620      	mov	r0, r4
 8013804:	f001 f996 	bl	8014b34 <_free_r>
 8013808:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801380a:	b111      	cbz	r1, 8013812 <_reclaim_reent+0x5e>
 801380c:	4620      	mov	r0, r4
 801380e:	f001 f991 	bl	8014b34 <_free_r>
 8013812:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013814:	b111      	cbz	r1, 801381c <_reclaim_reent+0x68>
 8013816:	4620      	mov	r0, r4
 8013818:	f001 f98c 	bl	8014b34 <_free_r>
 801381c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801381e:	b111      	cbz	r1, 8013826 <_reclaim_reent+0x72>
 8013820:	4620      	mov	r0, r4
 8013822:	f001 f987 	bl	8014b34 <_free_r>
 8013826:	69a3      	ldr	r3, [r4, #24]
 8013828:	b1e3      	cbz	r3, 8013864 <_reclaim_reent+0xb0>
 801382a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801382c:	4620      	mov	r0, r4
 801382e:	4798      	blx	r3
 8013830:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013832:	b1b9      	cbz	r1, 8013864 <_reclaim_reent+0xb0>
 8013834:	4620      	mov	r0, r4
 8013836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801383a:	f7ff bfad 	b.w	8013798 <cleanup_glue>
 801383e:	5949      	ldr	r1, [r1, r5]
 8013840:	b941      	cbnz	r1, 8013854 <_reclaim_reent+0xa0>
 8013842:	3504      	adds	r5, #4
 8013844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013846:	2d80      	cmp	r5, #128	; 0x80
 8013848:	68d9      	ldr	r1, [r3, #12]
 801384a:	d1f8      	bne.n	801383e <_reclaim_reent+0x8a>
 801384c:	4620      	mov	r0, r4
 801384e:	f001 f971 	bl	8014b34 <_free_r>
 8013852:	e7ba      	b.n	80137ca <_reclaim_reent+0x16>
 8013854:	680e      	ldr	r6, [r1, #0]
 8013856:	4620      	mov	r0, r4
 8013858:	f001 f96c 	bl	8014b34 <_free_r>
 801385c:	4631      	mov	r1, r6
 801385e:	e7ef      	b.n	8013840 <_reclaim_reent+0x8c>
 8013860:	2500      	movs	r5, #0
 8013862:	e7ef      	b.n	8013844 <_reclaim_reent+0x90>
 8013864:	bd70      	pop	{r4, r5, r6, pc}
 8013866:	bf00      	nop
 8013868:	20016934 	.word	0x20016934

0801386c <_sbrk_r>:
 801386c:	b538      	push	{r3, r4, r5, lr}
 801386e:	4c06      	ldr	r4, [pc, #24]	; (8013888 <_sbrk_r+0x1c>)
 8013870:	2300      	movs	r3, #0
 8013872:	4605      	mov	r5, r0
 8013874:	4608      	mov	r0, r1
 8013876:	6023      	str	r3, [r4, #0]
 8013878:	f7ed fc26 	bl	80010c8 <_sbrk>
 801387c:	1c43      	adds	r3, r0, #1
 801387e:	d102      	bne.n	8013886 <_sbrk_r+0x1a>
 8013880:	6823      	ldr	r3, [r4, #0]
 8013882:	b103      	cbz	r3, 8013886 <_sbrk_r+0x1a>
 8013884:	602b      	str	r3, [r5, #0]
 8013886:	bd38      	pop	{r3, r4, r5, pc}
 8013888:	20027170 	.word	0x20027170

0801388c <sniprintf>:
 801388c:	b40c      	push	{r2, r3}
 801388e:	b530      	push	{r4, r5, lr}
 8013890:	4b17      	ldr	r3, [pc, #92]	; (80138f0 <sniprintf+0x64>)
 8013892:	1e0c      	subs	r4, r1, #0
 8013894:	b09d      	sub	sp, #116	; 0x74
 8013896:	681d      	ldr	r5, [r3, #0]
 8013898:	da08      	bge.n	80138ac <sniprintf+0x20>
 801389a:	238b      	movs	r3, #139	; 0x8b
 801389c:	602b      	str	r3, [r5, #0]
 801389e:	f04f 30ff 	mov.w	r0, #4294967295
 80138a2:	b01d      	add	sp, #116	; 0x74
 80138a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138a8:	b002      	add	sp, #8
 80138aa:	4770      	bx	lr
 80138ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80138b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80138b4:	bf14      	ite	ne
 80138b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80138ba:	4623      	moveq	r3, r4
 80138bc:	9304      	str	r3, [sp, #16]
 80138be:	9307      	str	r3, [sp, #28]
 80138c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138c4:	9002      	str	r0, [sp, #8]
 80138c6:	9006      	str	r0, [sp, #24]
 80138c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80138cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80138ce:	ab21      	add	r3, sp, #132	; 0x84
 80138d0:	a902      	add	r1, sp, #8
 80138d2:	4628      	mov	r0, r5
 80138d4:	9301      	str	r3, [sp, #4]
 80138d6:	f001 f9d5 	bl	8014c84 <_svfiprintf_r>
 80138da:	1c43      	adds	r3, r0, #1
 80138dc:	bfbc      	itt	lt
 80138de:	238b      	movlt	r3, #139	; 0x8b
 80138e0:	602b      	strlt	r3, [r5, #0]
 80138e2:	2c00      	cmp	r4, #0
 80138e4:	d0dd      	beq.n	80138a2 <sniprintf+0x16>
 80138e6:	9b02      	ldr	r3, [sp, #8]
 80138e8:	2200      	movs	r2, #0
 80138ea:	701a      	strb	r2, [r3, #0]
 80138ec:	e7d9      	b.n	80138a2 <sniprintf+0x16>
 80138ee:	bf00      	nop
 80138f0:	20016934 	.word	0x20016934

080138f4 <strcasecmp>:
 80138f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138f6:	4606      	mov	r6, r0
 80138f8:	460f      	mov	r7, r1
 80138fa:	f816 4b01 	ldrb.w	r4, [r6], #1
 80138fe:	f000 fdf7 	bl	80144f0 <__locale_ctype_ptr>
 8013902:	4420      	add	r0, r4
 8013904:	f817 5b01 	ldrb.w	r5, [r7], #1
 8013908:	7843      	ldrb	r3, [r0, #1]
 801390a:	f003 0303 	and.w	r3, r3, #3
 801390e:	2b01      	cmp	r3, #1
 8013910:	bf08      	it	eq
 8013912:	3420      	addeq	r4, #32
 8013914:	f000 fdec 	bl	80144f0 <__locale_ctype_ptr>
 8013918:	4428      	add	r0, r5
 801391a:	7842      	ldrb	r2, [r0, #1]
 801391c:	f002 0203 	and.w	r2, r2, #3
 8013920:	2a01      	cmp	r2, #1
 8013922:	bf08      	it	eq
 8013924:	3520      	addeq	r5, #32
 8013926:	1b60      	subs	r0, r4, r5
 8013928:	d101      	bne.n	801392e <strcasecmp+0x3a>
 801392a:	2d00      	cmp	r5, #0
 801392c:	d1e5      	bne.n	80138fa <strcasecmp+0x6>
 801392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013930 <strcpy>:
 8013930:	4603      	mov	r3, r0
 8013932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013936:	f803 2b01 	strb.w	r2, [r3], #1
 801393a:	2a00      	cmp	r2, #0
 801393c:	d1f9      	bne.n	8013932 <strcpy+0x2>
 801393e:	4770      	bx	lr

08013940 <quorem>:
 8013940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013944:	6903      	ldr	r3, [r0, #16]
 8013946:	690c      	ldr	r4, [r1, #16]
 8013948:	42a3      	cmp	r3, r4
 801394a:	4680      	mov	r8, r0
 801394c:	f2c0 8082 	blt.w	8013a54 <quorem+0x114>
 8013950:	3c01      	subs	r4, #1
 8013952:	f101 0714 	add.w	r7, r1, #20
 8013956:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801395a:	f100 0614 	add.w	r6, r0, #20
 801395e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013962:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013966:	eb06 030c 	add.w	r3, r6, ip
 801396a:	3501      	adds	r5, #1
 801396c:	eb07 090c 	add.w	r9, r7, ip
 8013970:	9301      	str	r3, [sp, #4]
 8013972:	fbb0 f5f5 	udiv	r5, r0, r5
 8013976:	b395      	cbz	r5, 80139de <quorem+0x9e>
 8013978:	f04f 0a00 	mov.w	sl, #0
 801397c:	4638      	mov	r0, r7
 801397e:	46b6      	mov	lr, r6
 8013980:	46d3      	mov	fp, sl
 8013982:	f850 2b04 	ldr.w	r2, [r0], #4
 8013986:	b293      	uxth	r3, r2
 8013988:	fb05 a303 	mla	r3, r5, r3, sl
 801398c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013990:	b29b      	uxth	r3, r3
 8013992:	ebab 0303 	sub.w	r3, fp, r3
 8013996:	0c12      	lsrs	r2, r2, #16
 8013998:	f8de b000 	ldr.w	fp, [lr]
 801399c:	fb05 a202 	mla	r2, r5, r2, sl
 80139a0:	fa13 f38b 	uxtah	r3, r3, fp
 80139a4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80139a8:	fa1f fb82 	uxth.w	fp, r2
 80139ac:	f8de 2000 	ldr.w	r2, [lr]
 80139b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80139b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80139be:	4581      	cmp	r9, r0
 80139c0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80139c4:	f84e 3b04 	str.w	r3, [lr], #4
 80139c8:	d2db      	bcs.n	8013982 <quorem+0x42>
 80139ca:	f856 300c 	ldr.w	r3, [r6, ip]
 80139ce:	b933      	cbnz	r3, 80139de <quorem+0x9e>
 80139d0:	9b01      	ldr	r3, [sp, #4]
 80139d2:	3b04      	subs	r3, #4
 80139d4:	429e      	cmp	r6, r3
 80139d6:	461a      	mov	r2, r3
 80139d8:	d330      	bcc.n	8013a3c <quorem+0xfc>
 80139da:	f8c8 4010 	str.w	r4, [r8, #16]
 80139de:	4640      	mov	r0, r8
 80139e0:	f000 ffd4 	bl	801498c <__mcmp>
 80139e4:	2800      	cmp	r0, #0
 80139e6:	db25      	blt.n	8013a34 <quorem+0xf4>
 80139e8:	3501      	adds	r5, #1
 80139ea:	4630      	mov	r0, r6
 80139ec:	f04f 0c00 	mov.w	ip, #0
 80139f0:	f857 2b04 	ldr.w	r2, [r7], #4
 80139f4:	f8d0 e000 	ldr.w	lr, [r0]
 80139f8:	b293      	uxth	r3, r2
 80139fa:	ebac 0303 	sub.w	r3, ip, r3
 80139fe:	0c12      	lsrs	r2, r2, #16
 8013a00:	fa13 f38e 	uxtah	r3, r3, lr
 8013a04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013a08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a12:	45b9      	cmp	r9, r7
 8013a14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013a18:	f840 3b04 	str.w	r3, [r0], #4
 8013a1c:	d2e8      	bcs.n	80139f0 <quorem+0xb0>
 8013a1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013a22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013a26:	b92a      	cbnz	r2, 8013a34 <quorem+0xf4>
 8013a28:	3b04      	subs	r3, #4
 8013a2a:	429e      	cmp	r6, r3
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	d30b      	bcc.n	8013a48 <quorem+0x108>
 8013a30:	f8c8 4010 	str.w	r4, [r8, #16]
 8013a34:	4628      	mov	r0, r5
 8013a36:	b003      	add	sp, #12
 8013a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a3c:	6812      	ldr	r2, [r2, #0]
 8013a3e:	3b04      	subs	r3, #4
 8013a40:	2a00      	cmp	r2, #0
 8013a42:	d1ca      	bne.n	80139da <quorem+0x9a>
 8013a44:	3c01      	subs	r4, #1
 8013a46:	e7c5      	b.n	80139d4 <quorem+0x94>
 8013a48:	6812      	ldr	r2, [r2, #0]
 8013a4a:	3b04      	subs	r3, #4
 8013a4c:	2a00      	cmp	r2, #0
 8013a4e:	d1ef      	bne.n	8013a30 <quorem+0xf0>
 8013a50:	3c01      	subs	r4, #1
 8013a52:	e7ea      	b.n	8013a2a <quorem+0xea>
 8013a54:	2000      	movs	r0, #0
 8013a56:	e7ee      	b.n	8013a36 <quorem+0xf6>

08013a58 <_dtoa_r>:
 8013a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a5c:	ec57 6b10 	vmov	r6, r7, d0
 8013a60:	b095      	sub	sp, #84	; 0x54
 8013a62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013a64:	9108      	str	r1, [sp, #32]
 8013a66:	4604      	mov	r4, r0
 8013a68:	920a      	str	r2, [sp, #40]	; 0x28
 8013a6a:	9311      	str	r3, [sp, #68]	; 0x44
 8013a6c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8013a70:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013a74:	b93d      	cbnz	r5, 8013a86 <_dtoa_r+0x2e>
 8013a76:	2010      	movs	r0, #16
 8013a78:	f000 fd56 	bl	8014528 <malloc>
 8013a7c:	6260      	str	r0, [r4, #36]	; 0x24
 8013a7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013a82:	6005      	str	r5, [r0, #0]
 8013a84:	60c5      	str	r5, [r0, #12]
 8013a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a88:	6819      	ldr	r1, [r3, #0]
 8013a8a:	b151      	cbz	r1, 8013aa2 <_dtoa_r+0x4a>
 8013a8c:	685a      	ldr	r2, [r3, #4]
 8013a8e:	604a      	str	r2, [r1, #4]
 8013a90:	2301      	movs	r3, #1
 8013a92:	4093      	lsls	r3, r2
 8013a94:	608b      	str	r3, [r1, #8]
 8013a96:	4620      	mov	r0, r4
 8013a98:	f000 fd96 	bl	80145c8 <_Bfree>
 8013a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	601a      	str	r2, [r3, #0]
 8013aa2:	1e3b      	subs	r3, r7, #0
 8013aa4:	bfb9      	ittee	lt
 8013aa6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013aaa:	9303      	strlt	r3, [sp, #12]
 8013aac:	2300      	movge	r3, #0
 8013aae:	f8c8 3000 	strge.w	r3, [r8]
 8013ab2:	9d03      	ldr	r5, [sp, #12]
 8013ab4:	4bac      	ldr	r3, [pc, #688]	; (8013d68 <_dtoa_r+0x310>)
 8013ab6:	bfbc      	itt	lt
 8013ab8:	2201      	movlt	r2, #1
 8013aba:	f8c8 2000 	strlt.w	r2, [r8]
 8013abe:	43ab      	bics	r3, r5
 8013ac0:	d11b      	bne.n	8013afa <_dtoa_r+0xa2>
 8013ac2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013ac4:	f242 730f 	movw	r3, #9999	; 0x270f
 8013ac8:	6013      	str	r3, [r2, #0]
 8013aca:	9b02      	ldr	r3, [sp, #8]
 8013acc:	b923      	cbnz	r3, 8013ad8 <_dtoa_r+0x80>
 8013ace:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013ad2:	2d00      	cmp	r5, #0
 8013ad4:	f000 84dd 	beq.w	8014492 <_dtoa_r+0xa3a>
 8013ad8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013ada:	b953      	cbnz	r3, 8013af2 <_dtoa_r+0x9a>
 8013adc:	4ba3      	ldr	r3, [pc, #652]	; (8013d6c <_dtoa_r+0x314>)
 8013ade:	e020      	b.n	8013b22 <_dtoa_r+0xca>
 8013ae0:	4ba3      	ldr	r3, [pc, #652]	; (8013d70 <_dtoa_r+0x318>)
 8013ae2:	9304      	str	r3, [sp, #16]
 8013ae4:	3308      	adds	r3, #8
 8013ae6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013ae8:	6013      	str	r3, [r2, #0]
 8013aea:	9804      	ldr	r0, [sp, #16]
 8013aec:	b015      	add	sp, #84	; 0x54
 8013aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af2:	4b9e      	ldr	r3, [pc, #632]	; (8013d6c <_dtoa_r+0x314>)
 8013af4:	9304      	str	r3, [sp, #16]
 8013af6:	3303      	adds	r3, #3
 8013af8:	e7f5      	b.n	8013ae6 <_dtoa_r+0x8e>
 8013afa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013afe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b06:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013b0a:	d10c      	bne.n	8013b26 <_dtoa_r+0xce>
 8013b0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013b0e:	2301      	movs	r3, #1
 8013b10:	6013      	str	r3, [r2, #0]
 8013b12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	f000 84b9 	beq.w	801448c <_dtoa_r+0xa34>
 8013b1a:	4b96      	ldr	r3, [pc, #600]	; (8013d74 <_dtoa_r+0x31c>)
 8013b1c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013b1e:	6013      	str	r3, [r2, #0]
 8013b20:	3b01      	subs	r3, #1
 8013b22:	9304      	str	r3, [sp, #16]
 8013b24:	e7e1      	b.n	8013aea <_dtoa_r+0x92>
 8013b26:	a913      	add	r1, sp, #76	; 0x4c
 8013b28:	aa12      	add	r2, sp, #72	; 0x48
 8013b2a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8013b2e:	4620      	mov	r0, r4
 8013b30:	f000 ffa3 	bl	8014a7a <__d2b>
 8013b34:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8013b38:	9001      	str	r0, [sp, #4]
 8013b3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013b3c:	2e00      	cmp	r6, #0
 8013b3e:	d046      	beq.n	8013bce <_dtoa_r+0x176>
 8013b40:	9805      	ldr	r0, [sp, #20]
 8013b42:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8013b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b4a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8013b4e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013b52:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8013b56:	2700      	movs	r7, #0
 8013b58:	ee07 aa90 	vmov	s15, sl
 8013b5c:	ec43 2b16 	vmov	d6, r2, r3
 8013b60:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013b64:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8013d50 <_dtoa_r+0x2f8>
 8013b68:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013b6c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013b70:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8013d58 <_dtoa_r+0x300>
 8013b74:	eea7 6b04 	vfma.f64	d6, d7, d4
 8013b78:	eeb0 7b46 	vmov.f64	d7, d6
 8013b7c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8013d60 <_dtoa_r+0x308>
 8013b80:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013b84:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013b88:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b90:	ee16 ba90 	vmov	fp, s13
 8013b94:	d508      	bpl.n	8013ba8 <_dtoa_r+0x150>
 8013b96:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013b9a:	eeb4 6b47 	vcmp.f64	d6, d7
 8013b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba2:	bf18      	it	ne
 8013ba4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013ba8:	f1bb 0f16 	cmp.w	fp, #22
 8013bac:	d834      	bhi.n	8013c18 <_dtoa_r+0x1c0>
 8013bae:	4b72      	ldr	r3, [pc, #456]	; (8013d78 <_dtoa_r+0x320>)
 8013bb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013bb4:	ed93 7b00 	vldr	d7, [r3]
 8013bb8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013bbc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc4:	dd01      	ble.n	8013bca <_dtoa_r+0x172>
 8013bc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013bca:	2300      	movs	r3, #0
 8013bcc:	e025      	b.n	8013c1a <_dtoa_r+0x1c2>
 8013bce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013bd0:	eb01 0a03 	add.w	sl, r1, r3
 8013bd4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8013bd8:	2b20      	cmp	r3, #32
 8013bda:	dd17      	ble.n	8013c0c <_dtoa_r+0x1b4>
 8013bdc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8013be0:	9a02      	ldr	r2, [sp, #8]
 8013be2:	409d      	lsls	r5, r3
 8013be4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8013be8:	fa22 f303 	lsr.w	r3, r2, r3
 8013bec:	432b      	orrs	r3, r5
 8013bee:	ee07 3a90 	vmov	s15, r3
 8013bf2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013bf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013bfa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013bfe:	9805      	ldr	r0, [sp, #20]
 8013c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c04:	2701      	movs	r7, #1
 8013c06:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8013c0a:	e7a5      	b.n	8013b58 <_dtoa_r+0x100>
 8013c0c:	9a02      	ldr	r2, [sp, #8]
 8013c0e:	f1c3 0320 	rsb	r3, r3, #32
 8013c12:	fa02 f303 	lsl.w	r3, r2, r3
 8013c16:	e7ea      	b.n	8013bee <_dtoa_r+0x196>
 8013c18:	2301      	movs	r3, #1
 8013c1a:	eba1 0a0a 	sub.w	sl, r1, sl
 8013c1e:	9310      	str	r3, [sp, #64]	; 0x40
 8013c20:	f1ba 0301 	subs.w	r3, sl, #1
 8013c24:	9307      	str	r3, [sp, #28]
 8013c26:	bf43      	ittte	mi
 8013c28:	2300      	movmi	r3, #0
 8013c2a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8013c2e:	9307      	strmi	r3, [sp, #28]
 8013c30:	f04f 0a00 	movpl.w	sl, #0
 8013c34:	f1bb 0f00 	cmp.w	fp, #0
 8013c38:	db19      	blt.n	8013c6e <_dtoa_r+0x216>
 8013c3a:	9b07      	ldr	r3, [sp, #28]
 8013c3c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013c40:	445b      	add	r3, fp
 8013c42:	9307      	str	r3, [sp, #28]
 8013c44:	f04f 0800 	mov.w	r8, #0
 8013c48:	9b08      	ldr	r3, [sp, #32]
 8013c4a:	2b09      	cmp	r3, #9
 8013c4c:	d866      	bhi.n	8013d1c <_dtoa_r+0x2c4>
 8013c4e:	2b05      	cmp	r3, #5
 8013c50:	bfc4      	itt	gt
 8013c52:	3b04      	subgt	r3, #4
 8013c54:	9308      	strgt	r3, [sp, #32]
 8013c56:	9b08      	ldr	r3, [sp, #32]
 8013c58:	f1a3 0302 	sub.w	r3, r3, #2
 8013c5c:	bfcc      	ite	gt
 8013c5e:	2500      	movgt	r5, #0
 8013c60:	2501      	movle	r5, #1
 8013c62:	2b03      	cmp	r3, #3
 8013c64:	d866      	bhi.n	8013d34 <_dtoa_r+0x2dc>
 8013c66:	e8df f003 	tbb	[pc, r3]
 8013c6a:	5755      	.short	0x5755
 8013c6c:	4909      	.short	0x4909
 8013c6e:	2300      	movs	r3, #0
 8013c70:	ebaa 0a0b 	sub.w	sl, sl, fp
 8013c74:	f1cb 0800 	rsb	r8, fp, #0
 8013c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c7a:	e7e5      	b.n	8013c48 <_dtoa_r+0x1f0>
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8013c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	dd59      	ble.n	8013d3a <_dtoa_r+0x2e2>
 8013c86:	9306      	str	r3, [sp, #24]
 8013c88:	4699      	mov	r9, r3
 8013c8a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	6072      	str	r2, [r6, #4]
 8013c90:	2204      	movs	r2, #4
 8013c92:	f102 0014 	add.w	r0, r2, #20
 8013c96:	4298      	cmp	r0, r3
 8013c98:	6871      	ldr	r1, [r6, #4]
 8013c9a:	d953      	bls.n	8013d44 <_dtoa_r+0x2ec>
 8013c9c:	4620      	mov	r0, r4
 8013c9e:	f000 fc5f 	bl	8014560 <_Balloc>
 8013ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ca4:	6030      	str	r0, [r6, #0]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	9304      	str	r3, [sp, #16]
 8013caa:	f1b9 0f0e 	cmp.w	r9, #14
 8013cae:	f200 80c2 	bhi.w	8013e36 <_dtoa_r+0x3de>
 8013cb2:	2d00      	cmp	r5, #0
 8013cb4:	f000 80bf 	beq.w	8013e36 <_dtoa_r+0x3de>
 8013cb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013cbc:	f1bb 0f00 	cmp.w	fp, #0
 8013cc0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8013cc4:	f340 80e6 	ble.w	8013e94 <_dtoa_r+0x43c>
 8013cc8:	4a2b      	ldr	r2, [pc, #172]	; (8013d78 <_dtoa_r+0x320>)
 8013cca:	f00b 030f 	and.w	r3, fp, #15
 8013cce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013cd2:	ed93 7b00 	vldr	d7, [r3]
 8013cd6:	ea4f 132b 	mov.w	r3, fp, asr #4
 8013cda:	06da      	lsls	r2, r3, #27
 8013cdc:	f140 80d8 	bpl.w	8013e90 <_dtoa_r+0x438>
 8013ce0:	4a26      	ldr	r2, [pc, #152]	; (8013d7c <_dtoa_r+0x324>)
 8013ce2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8013ce6:	ed92 6b08 	vldr	d6, [r2, #32]
 8013cea:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8013cee:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013cf2:	f003 030f 	and.w	r3, r3, #15
 8013cf6:	2203      	movs	r2, #3
 8013cf8:	4920      	ldr	r1, [pc, #128]	; (8013d7c <_dtoa_r+0x324>)
 8013cfa:	e04a      	b.n	8013d92 <_dtoa_r+0x33a>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8013d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d02:	445b      	add	r3, fp
 8013d04:	f103 0901 	add.w	r9, r3, #1
 8013d08:	9306      	str	r3, [sp, #24]
 8013d0a:	464b      	mov	r3, r9
 8013d0c:	2b01      	cmp	r3, #1
 8013d0e:	bfb8      	it	lt
 8013d10:	2301      	movlt	r3, #1
 8013d12:	e7ba      	b.n	8013c8a <_dtoa_r+0x232>
 8013d14:	2300      	movs	r3, #0
 8013d16:	e7b2      	b.n	8013c7e <_dtoa_r+0x226>
 8013d18:	2300      	movs	r3, #0
 8013d1a:	e7f0      	b.n	8013cfe <_dtoa_r+0x2a6>
 8013d1c:	2501      	movs	r5, #1
 8013d1e:	2300      	movs	r3, #0
 8013d20:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8013d24:	f04f 33ff 	mov.w	r3, #4294967295
 8013d28:	9306      	str	r3, [sp, #24]
 8013d2a:	4699      	mov	r9, r3
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	2312      	movs	r3, #18
 8013d30:	920a      	str	r2, [sp, #40]	; 0x28
 8013d32:	e7aa      	b.n	8013c8a <_dtoa_r+0x232>
 8013d34:	2301      	movs	r3, #1
 8013d36:	9309      	str	r3, [sp, #36]	; 0x24
 8013d38:	e7f4      	b.n	8013d24 <_dtoa_r+0x2cc>
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	9306      	str	r3, [sp, #24]
 8013d3e:	4699      	mov	r9, r3
 8013d40:	461a      	mov	r2, r3
 8013d42:	e7f5      	b.n	8013d30 <_dtoa_r+0x2d8>
 8013d44:	3101      	adds	r1, #1
 8013d46:	6071      	str	r1, [r6, #4]
 8013d48:	0052      	lsls	r2, r2, #1
 8013d4a:	e7a2      	b.n	8013c92 <_dtoa_r+0x23a>
 8013d4c:	f3af 8000 	nop.w
 8013d50:	636f4361 	.word	0x636f4361
 8013d54:	3fd287a7 	.word	0x3fd287a7
 8013d58:	8b60c8b3 	.word	0x8b60c8b3
 8013d5c:	3fc68a28 	.word	0x3fc68a28
 8013d60:	509f79fb 	.word	0x509f79fb
 8013d64:	3fd34413 	.word	0x3fd34413
 8013d68:	7ff00000 	.word	0x7ff00000
 8013d6c:	0802a18d 	.word	0x0802a18d
 8013d70:	0802a184 	.word	0x0802a184
 8013d74:	0802a161 	.word	0x0802a161
 8013d78:	0802a1c8 	.word	0x0802a1c8
 8013d7c:	0802a1a0 	.word	0x0802a1a0
 8013d80:	07de      	lsls	r6, r3, #31
 8013d82:	d504      	bpl.n	8013d8e <_dtoa_r+0x336>
 8013d84:	ed91 6b00 	vldr	d6, [r1]
 8013d88:	3201      	adds	r2, #1
 8013d8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013d8e:	105b      	asrs	r3, r3, #1
 8013d90:	3108      	adds	r1, #8
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d1f4      	bne.n	8013d80 <_dtoa_r+0x328>
 8013d96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013d9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013d9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	f000 80a7 	beq.w	8013ef8 <_dtoa_r+0x4a0>
 8013daa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013dae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013db2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dba:	f140 809d 	bpl.w	8013ef8 <_dtoa_r+0x4a0>
 8013dbe:	f1b9 0f00 	cmp.w	r9, #0
 8013dc2:	f000 8099 	beq.w	8013ef8 <_dtoa_r+0x4a0>
 8013dc6:	9b06      	ldr	r3, [sp, #24]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	dd30      	ble.n	8013e2e <_dtoa_r+0x3d6>
 8013dcc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013dd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013dd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013dd8:	9d06      	ldr	r5, [sp, #24]
 8013dda:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013dde:	3201      	adds	r2, #1
 8013de0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013de4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013de8:	ee07 2a90 	vmov	s15, r2
 8013dec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013df0:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013df4:	ed8d 5b02 	vstr	d5, [sp, #8]
 8013df8:	9a03      	ldr	r2, [sp, #12]
 8013dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dfe:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8013e02:	2d00      	cmp	r5, #0
 8013e04:	d17b      	bne.n	8013efe <_dtoa_r+0x4a6>
 8013e06:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013e0a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013e0e:	ec41 0b17 	vmov	d7, r0, r1
 8013e12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1a:	f300 8253 	bgt.w	80142c4 <_dtoa_r+0x86c>
 8013e1e:	eeb1 7b47 	vneg.f64	d7, d7
 8013e22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e2a:	f100 8249 	bmi.w	80142c0 <_dtoa_r+0x868>
 8013e2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013e32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013e36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	f2c0 8119 	blt.w	8014070 <_dtoa_r+0x618>
 8013e3e:	f1bb 0f0e 	cmp.w	fp, #14
 8013e42:	f300 8115 	bgt.w	8014070 <_dtoa_r+0x618>
 8013e46:	4bc3      	ldr	r3, [pc, #780]	; (8014154 <_dtoa_r+0x6fc>)
 8013e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013e4c:	ed93 6b00 	vldr	d6, [r3]
 8013e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	f280 80ba 	bge.w	8013fcc <_dtoa_r+0x574>
 8013e58:	f1b9 0f00 	cmp.w	r9, #0
 8013e5c:	f300 80b6 	bgt.w	8013fcc <_dtoa_r+0x574>
 8013e60:	f040 822d 	bne.w	80142be <_dtoa_r+0x866>
 8013e64:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013e68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013e6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013e70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e78:	464d      	mov	r5, r9
 8013e7a:	464f      	mov	r7, r9
 8013e7c:	f280 8204 	bge.w	8014288 <_dtoa_r+0x830>
 8013e80:	9b04      	ldr	r3, [sp, #16]
 8013e82:	9a04      	ldr	r2, [sp, #16]
 8013e84:	1c5e      	adds	r6, r3, #1
 8013e86:	2331      	movs	r3, #49	; 0x31
 8013e88:	7013      	strb	r3, [r2, #0]
 8013e8a:	f10b 0b01 	add.w	fp, fp, #1
 8013e8e:	e1ff      	b.n	8014290 <_dtoa_r+0x838>
 8013e90:	2202      	movs	r2, #2
 8013e92:	e731      	b.n	8013cf8 <_dtoa_r+0x2a0>
 8013e94:	d02e      	beq.n	8013ef4 <_dtoa_r+0x49c>
 8013e96:	f1cb 0300 	rsb	r3, fp, #0
 8013e9a:	4aae      	ldr	r2, [pc, #696]	; (8014154 <_dtoa_r+0x6fc>)
 8013e9c:	f003 010f 	and.w	r1, r3, #15
 8013ea0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013ea4:	ed92 7b00 	vldr	d7, [r2]
 8013ea8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8013eac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013eb0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013eb4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8013eb8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013ebc:	49a6      	ldr	r1, [pc, #664]	; (8014158 <_dtoa_r+0x700>)
 8013ebe:	111b      	asrs	r3, r3, #4
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	2202      	movs	r2, #2
 8013ec4:	b93b      	cbnz	r3, 8013ed6 <_dtoa_r+0x47e>
 8013ec6:	2800      	cmp	r0, #0
 8013ec8:	f43f af6b 	beq.w	8013da2 <_dtoa_r+0x34a>
 8013ecc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ed4:	e765      	b.n	8013da2 <_dtoa_r+0x34a>
 8013ed6:	07dd      	lsls	r5, r3, #31
 8013ed8:	d509      	bpl.n	8013eee <_dtoa_r+0x496>
 8013eda:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8013ede:	ed91 7b00 	vldr	d7, [r1]
 8013ee2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013ee6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013eea:	3201      	adds	r2, #1
 8013eec:	2001      	movs	r0, #1
 8013eee:	105b      	asrs	r3, r3, #1
 8013ef0:	3108      	adds	r1, #8
 8013ef2:	e7e7      	b.n	8013ec4 <_dtoa_r+0x46c>
 8013ef4:	2202      	movs	r2, #2
 8013ef6:	e754      	b.n	8013da2 <_dtoa_r+0x34a>
 8013ef8:	465b      	mov	r3, fp
 8013efa:	464d      	mov	r5, r9
 8013efc:	e770      	b.n	8013de0 <_dtoa_r+0x388>
 8013efe:	4a95      	ldr	r2, [pc, #596]	; (8014154 <_dtoa_r+0x6fc>)
 8013f00:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8013f04:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f0a:	ec41 0b17 	vmov	d7, r0, r1
 8013f0e:	b35a      	cbz	r2, 8013f68 <_dtoa_r+0x510>
 8013f10:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013f14:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013f18:	9e04      	ldr	r6, [sp, #16]
 8013f1a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013f1e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013f22:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013f26:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013f2a:	ee14 2a90 	vmov	r2, s9
 8013f2e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013f32:	3230      	adds	r2, #48	; 0x30
 8013f34:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013f38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f40:	f806 2b01 	strb.w	r2, [r6], #1
 8013f44:	d43b      	bmi.n	8013fbe <_dtoa_r+0x566>
 8013f46:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013f4a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f52:	d472      	bmi.n	801403a <_dtoa_r+0x5e2>
 8013f54:	9a04      	ldr	r2, [sp, #16]
 8013f56:	1ab2      	subs	r2, r6, r2
 8013f58:	4295      	cmp	r5, r2
 8013f5a:	f77f af68 	ble.w	8013e2e <_dtoa_r+0x3d6>
 8013f5e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013f62:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013f66:	e7de      	b.n	8013f26 <_dtoa_r+0x4ce>
 8013f68:	9a04      	ldr	r2, [sp, #16]
 8013f6a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8013f6e:	1956      	adds	r6, r2, r5
 8013f70:	4611      	mov	r1, r2
 8013f72:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013f76:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013f7a:	ee14 2a90 	vmov	r2, s9
 8013f7e:	3230      	adds	r2, #48	; 0x30
 8013f80:	f801 2b01 	strb.w	r2, [r1], #1
 8013f84:	42b1      	cmp	r1, r6
 8013f86:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013f8a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013f8e:	d11a      	bne.n	8013fc6 <_dtoa_r+0x56e>
 8013f90:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013f94:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013f98:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa0:	dc4b      	bgt.n	801403a <_dtoa_r+0x5e2>
 8013fa2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013fa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	f57f af3e 	bpl.w	8013e2e <_dtoa_r+0x3d6>
 8013fb2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013fb6:	2a30      	cmp	r2, #48	; 0x30
 8013fb8:	f106 31ff 	add.w	r1, r6, #4294967295
 8013fbc:	d001      	beq.n	8013fc2 <_dtoa_r+0x56a>
 8013fbe:	469b      	mov	fp, r3
 8013fc0:	e02a      	b.n	8014018 <_dtoa_r+0x5c0>
 8013fc2:	460e      	mov	r6, r1
 8013fc4:	e7f5      	b.n	8013fb2 <_dtoa_r+0x55a>
 8013fc6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013fca:	e7d4      	b.n	8013f76 <_dtoa_r+0x51e>
 8013fcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013fd0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013fd4:	9e04      	ldr	r6, [sp, #16]
 8013fd6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013fda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013fde:	ee15 3a10 	vmov	r3, s10
 8013fe2:	3330      	adds	r3, #48	; 0x30
 8013fe4:	f806 3b01 	strb.w	r3, [r6], #1
 8013fe8:	9b04      	ldr	r3, [sp, #16]
 8013fea:	1af3      	subs	r3, r6, r3
 8013fec:	4599      	cmp	r9, r3
 8013fee:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013ff2:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013ff6:	d133      	bne.n	8014060 <_dtoa_r+0x608>
 8013ff8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013ffc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014004:	dc18      	bgt.n	8014038 <_dtoa_r+0x5e0>
 8014006:	eeb4 7b46 	vcmp.f64	d7, d6
 801400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801400e:	d103      	bne.n	8014018 <_dtoa_r+0x5c0>
 8014010:	ee15 3a10 	vmov	r3, s10
 8014014:	07db      	lsls	r3, r3, #31
 8014016:	d40f      	bmi.n	8014038 <_dtoa_r+0x5e0>
 8014018:	9901      	ldr	r1, [sp, #4]
 801401a:	4620      	mov	r0, r4
 801401c:	f000 fad4 	bl	80145c8 <_Bfree>
 8014020:	2300      	movs	r3, #0
 8014022:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014024:	7033      	strb	r3, [r6, #0]
 8014026:	f10b 0301 	add.w	r3, fp, #1
 801402a:	6013      	str	r3, [r2, #0]
 801402c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801402e:	2b00      	cmp	r3, #0
 8014030:	f43f ad5b 	beq.w	8013aea <_dtoa_r+0x92>
 8014034:	601e      	str	r6, [r3, #0]
 8014036:	e558      	b.n	8013aea <_dtoa_r+0x92>
 8014038:	465b      	mov	r3, fp
 801403a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801403e:	2939      	cmp	r1, #57	; 0x39
 8014040:	f106 32ff 	add.w	r2, r6, #4294967295
 8014044:	d106      	bne.n	8014054 <_dtoa_r+0x5fc>
 8014046:	9904      	ldr	r1, [sp, #16]
 8014048:	4291      	cmp	r1, r2
 801404a:	d107      	bne.n	801405c <_dtoa_r+0x604>
 801404c:	2230      	movs	r2, #48	; 0x30
 801404e:	700a      	strb	r2, [r1, #0]
 8014050:	3301      	adds	r3, #1
 8014052:	460a      	mov	r2, r1
 8014054:	7811      	ldrb	r1, [r2, #0]
 8014056:	3101      	adds	r1, #1
 8014058:	7011      	strb	r1, [r2, #0]
 801405a:	e7b0      	b.n	8013fbe <_dtoa_r+0x566>
 801405c:	4616      	mov	r6, r2
 801405e:	e7ec      	b.n	801403a <_dtoa_r+0x5e2>
 8014060:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014064:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406c:	d1b3      	bne.n	8013fd6 <_dtoa_r+0x57e>
 801406e:	e7d3      	b.n	8014018 <_dtoa_r+0x5c0>
 8014070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014072:	2a00      	cmp	r2, #0
 8014074:	f000 808d 	beq.w	8014192 <_dtoa_r+0x73a>
 8014078:	9a08      	ldr	r2, [sp, #32]
 801407a:	2a01      	cmp	r2, #1
 801407c:	dc72      	bgt.n	8014164 <_dtoa_r+0x70c>
 801407e:	2f00      	cmp	r7, #0
 8014080:	d06c      	beq.n	801415c <_dtoa_r+0x704>
 8014082:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014086:	4645      	mov	r5, r8
 8014088:	4656      	mov	r6, sl
 801408a:	9a07      	ldr	r2, [sp, #28]
 801408c:	2101      	movs	r1, #1
 801408e:	441a      	add	r2, r3
 8014090:	4620      	mov	r0, r4
 8014092:	449a      	add	sl, r3
 8014094:	9207      	str	r2, [sp, #28]
 8014096:	f000 fb37 	bl	8014708 <__i2b>
 801409a:	4607      	mov	r7, r0
 801409c:	2e00      	cmp	r6, #0
 801409e:	dd0b      	ble.n	80140b8 <_dtoa_r+0x660>
 80140a0:	9b07      	ldr	r3, [sp, #28]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	dd08      	ble.n	80140b8 <_dtoa_r+0x660>
 80140a6:	42b3      	cmp	r3, r6
 80140a8:	9a07      	ldr	r2, [sp, #28]
 80140aa:	bfa8      	it	ge
 80140ac:	4633      	movge	r3, r6
 80140ae:	ebaa 0a03 	sub.w	sl, sl, r3
 80140b2:	1af6      	subs	r6, r6, r3
 80140b4:	1ad3      	subs	r3, r2, r3
 80140b6:	9307      	str	r3, [sp, #28]
 80140b8:	f1b8 0f00 	cmp.w	r8, #0
 80140bc:	d01d      	beq.n	80140fa <_dtoa_r+0x6a2>
 80140be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d06a      	beq.n	801419a <_dtoa_r+0x742>
 80140c4:	b18d      	cbz	r5, 80140ea <_dtoa_r+0x692>
 80140c6:	4639      	mov	r1, r7
 80140c8:	462a      	mov	r2, r5
 80140ca:	4620      	mov	r0, r4
 80140cc:	f000 fbbc 	bl	8014848 <__pow5mult>
 80140d0:	9a01      	ldr	r2, [sp, #4]
 80140d2:	4601      	mov	r1, r0
 80140d4:	4607      	mov	r7, r0
 80140d6:	4620      	mov	r0, r4
 80140d8:	f000 fb1f 	bl	801471a <__multiply>
 80140dc:	9901      	ldr	r1, [sp, #4]
 80140de:	900c      	str	r0, [sp, #48]	; 0x30
 80140e0:	4620      	mov	r0, r4
 80140e2:	f000 fa71 	bl	80145c8 <_Bfree>
 80140e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140e8:	9301      	str	r3, [sp, #4]
 80140ea:	ebb8 0205 	subs.w	r2, r8, r5
 80140ee:	d004      	beq.n	80140fa <_dtoa_r+0x6a2>
 80140f0:	9901      	ldr	r1, [sp, #4]
 80140f2:	4620      	mov	r0, r4
 80140f4:	f000 fba8 	bl	8014848 <__pow5mult>
 80140f8:	9001      	str	r0, [sp, #4]
 80140fa:	2101      	movs	r1, #1
 80140fc:	4620      	mov	r0, r4
 80140fe:	f000 fb03 	bl	8014708 <__i2b>
 8014102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014104:	4605      	mov	r5, r0
 8014106:	2b00      	cmp	r3, #0
 8014108:	f000 81ca 	beq.w	80144a0 <_dtoa_r+0xa48>
 801410c:	461a      	mov	r2, r3
 801410e:	4601      	mov	r1, r0
 8014110:	4620      	mov	r0, r4
 8014112:	f000 fb99 	bl	8014848 <__pow5mult>
 8014116:	9b08      	ldr	r3, [sp, #32]
 8014118:	2b01      	cmp	r3, #1
 801411a:	4605      	mov	r5, r0
 801411c:	dc44      	bgt.n	80141a8 <_dtoa_r+0x750>
 801411e:	9b02      	ldr	r3, [sp, #8]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d13c      	bne.n	801419e <_dtoa_r+0x746>
 8014124:	9b03      	ldr	r3, [sp, #12]
 8014126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801412a:	2b00      	cmp	r3, #0
 801412c:	d137      	bne.n	801419e <_dtoa_r+0x746>
 801412e:	9b03      	ldr	r3, [sp, #12]
 8014130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014134:	0d1b      	lsrs	r3, r3, #20
 8014136:	051b      	lsls	r3, r3, #20
 8014138:	2b00      	cmp	r3, #0
 801413a:	d033      	beq.n	80141a4 <_dtoa_r+0x74c>
 801413c:	9b07      	ldr	r3, [sp, #28]
 801413e:	3301      	adds	r3, #1
 8014140:	f10a 0a01 	add.w	sl, sl, #1
 8014144:	9307      	str	r3, [sp, #28]
 8014146:	f04f 0801 	mov.w	r8, #1
 801414a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801414c:	bb73      	cbnz	r3, 80141ac <_dtoa_r+0x754>
 801414e:	2001      	movs	r0, #1
 8014150:	e034      	b.n	80141bc <_dtoa_r+0x764>
 8014152:	bf00      	nop
 8014154:	0802a1c8 	.word	0x0802a1c8
 8014158:	0802a1a0 	.word	0x0802a1a0
 801415c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801415e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014162:	e790      	b.n	8014086 <_dtoa_r+0x62e>
 8014164:	f109 35ff 	add.w	r5, r9, #4294967295
 8014168:	45a8      	cmp	r8, r5
 801416a:	bfbf      	itttt	lt
 801416c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801416e:	eba5 0808 	sublt.w	r8, r5, r8
 8014172:	4443      	addlt	r3, r8
 8014174:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8014176:	bfb6      	itet	lt
 8014178:	46a8      	movlt	r8, r5
 801417a:	eba8 0505 	subge.w	r5, r8, r5
 801417e:	2500      	movlt	r5, #0
 8014180:	f1b9 0f00 	cmp.w	r9, #0
 8014184:	bfb9      	ittee	lt
 8014186:	ebaa 0609 	sublt.w	r6, sl, r9
 801418a:	2300      	movlt	r3, #0
 801418c:	4656      	movge	r6, sl
 801418e:	464b      	movge	r3, r9
 8014190:	e77b      	b.n	801408a <_dtoa_r+0x632>
 8014192:	4645      	mov	r5, r8
 8014194:	4656      	mov	r6, sl
 8014196:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014198:	e780      	b.n	801409c <_dtoa_r+0x644>
 801419a:	4642      	mov	r2, r8
 801419c:	e7a8      	b.n	80140f0 <_dtoa_r+0x698>
 801419e:	f04f 0800 	mov.w	r8, #0
 80141a2:	e7d2      	b.n	801414a <_dtoa_r+0x6f2>
 80141a4:	4698      	mov	r8, r3
 80141a6:	e7d0      	b.n	801414a <_dtoa_r+0x6f2>
 80141a8:	f04f 0800 	mov.w	r8, #0
 80141ac:	692b      	ldr	r3, [r5, #16]
 80141ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80141b2:	6918      	ldr	r0, [r3, #16]
 80141b4:	f000 fa5a 	bl	801466c <__hi0bits>
 80141b8:	f1c0 0020 	rsb	r0, r0, #32
 80141bc:	9b07      	ldr	r3, [sp, #28]
 80141be:	4418      	add	r0, r3
 80141c0:	f010 001f 	ands.w	r0, r0, #31
 80141c4:	d047      	beq.n	8014256 <_dtoa_r+0x7fe>
 80141c6:	f1c0 0320 	rsb	r3, r0, #32
 80141ca:	2b04      	cmp	r3, #4
 80141cc:	dd3b      	ble.n	8014246 <_dtoa_r+0x7ee>
 80141ce:	9b07      	ldr	r3, [sp, #28]
 80141d0:	f1c0 001c 	rsb	r0, r0, #28
 80141d4:	4482      	add	sl, r0
 80141d6:	4406      	add	r6, r0
 80141d8:	4403      	add	r3, r0
 80141da:	9307      	str	r3, [sp, #28]
 80141dc:	f1ba 0f00 	cmp.w	sl, #0
 80141e0:	dd05      	ble.n	80141ee <_dtoa_r+0x796>
 80141e2:	4652      	mov	r2, sl
 80141e4:	9901      	ldr	r1, [sp, #4]
 80141e6:	4620      	mov	r0, r4
 80141e8:	f000 fb7c 	bl	80148e4 <__lshift>
 80141ec:	9001      	str	r0, [sp, #4]
 80141ee:	9b07      	ldr	r3, [sp, #28]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	dd05      	ble.n	8014200 <_dtoa_r+0x7a8>
 80141f4:	4629      	mov	r1, r5
 80141f6:	461a      	mov	r2, r3
 80141f8:	4620      	mov	r0, r4
 80141fa:	f000 fb73 	bl	80148e4 <__lshift>
 80141fe:	4605      	mov	r5, r0
 8014200:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014202:	b353      	cbz	r3, 801425a <_dtoa_r+0x802>
 8014204:	4629      	mov	r1, r5
 8014206:	9801      	ldr	r0, [sp, #4]
 8014208:	f000 fbc0 	bl	801498c <__mcmp>
 801420c:	2800      	cmp	r0, #0
 801420e:	da24      	bge.n	801425a <_dtoa_r+0x802>
 8014210:	2300      	movs	r3, #0
 8014212:	220a      	movs	r2, #10
 8014214:	9901      	ldr	r1, [sp, #4]
 8014216:	4620      	mov	r0, r4
 8014218:	f000 f9ed 	bl	80145f6 <__multadd>
 801421c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801421e:	9001      	str	r0, [sp, #4]
 8014220:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014224:	2b00      	cmp	r3, #0
 8014226:	f000 8142 	beq.w	80144ae <_dtoa_r+0xa56>
 801422a:	2300      	movs	r3, #0
 801422c:	4639      	mov	r1, r7
 801422e:	220a      	movs	r2, #10
 8014230:	4620      	mov	r0, r4
 8014232:	f000 f9e0 	bl	80145f6 <__multadd>
 8014236:	9b06      	ldr	r3, [sp, #24]
 8014238:	2b00      	cmp	r3, #0
 801423a:	4607      	mov	r7, r0
 801423c:	dc4b      	bgt.n	80142d6 <_dtoa_r+0x87e>
 801423e:	9b08      	ldr	r3, [sp, #32]
 8014240:	2b02      	cmp	r3, #2
 8014242:	dd48      	ble.n	80142d6 <_dtoa_r+0x87e>
 8014244:	e011      	b.n	801426a <_dtoa_r+0x812>
 8014246:	d0c9      	beq.n	80141dc <_dtoa_r+0x784>
 8014248:	9a07      	ldr	r2, [sp, #28]
 801424a:	331c      	adds	r3, #28
 801424c:	441a      	add	r2, r3
 801424e:	449a      	add	sl, r3
 8014250:	441e      	add	r6, r3
 8014252:	4613      	mov	r3, r2
 8014254:	e7c1      	b.n	80141da <_dtoa_r+0x782>
 8014256:	4603      	mov	r3, r0
 8014258:	e7f6      	b.n	8014248 <_dtoa_r+0x7f0>
 801425a:	f1b9 0f00 	cmp.w	r9, #0
 801425e:	dc34      	bgt.n	80142ca <_dtoa_r+0x872>
 8014260:	9b08      	ldr	r3, [sp, #32]
 8014262:	2b02      	cmp	r3, #2
 8014264:	dd31      	ble.n	80142ca <_dtoa_r+0x872>
 8014266:	f8cd 9018 	str.w	r9, [sp, #24]
 801426a:	9b06      	ldr	r3, [sp, #24]
 801426c:	b963      	cbnz	r3, 8014288 <_dtoa_r+0x830>
 801426e:	4629      	mov	r1, r5
 8014270:	2205      	movs	r2, #5
 8014272:	4620      	mov	r0, r4
 8014274:	f000 f9bf 	bl	80145f6 <__multadd>
 8014278:	4601      	mov	r1, r0
 801427a:	4605      	mov	r5, r0
 801427c:	9801      	ldr	r0, [sp, #4]
 801427e:	f000 fb85 	bl	801498c <__mcmp>
 8014282:	2800      	cmp	r0, #0
 8014284:	f73f adfc 	bgt.w	8013e80 <_dtoa_r+0x428>
 8014288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801428a:	9e04      	ldr	r6, [sp, #16]
 801428c:	ea6f 0b03 	mvn.w	fp, r3
 8014290:	f04f 0900 	mov.w	r9, #0
 8014294:	4629      	mov	r1, r5
 8014296:	4620      	mov	r0, r4
 8014298:	f000 f996 	bl	80145c8 <_Bfree>
 801429c:	2f00      	cmp	r7, #0
 801429e:	f43f aebb 	beq.w	8014018 <_dtoa_r+0x5c0>
 80142a2:	f1b9 0f00 	cmp.w	r9, #0
 80142a6:	d005      	beq.n	80142b4 <_dtoa_r+0x85c>
 80142a8:	45b9      	cmp	r9, r7
 80142aa:	d003      	beq.n	80142b4 <_dtoa_r+0x85c>
 80142ac:	4649      	mov	r1, r9
 80142ae:	4620      	mov	r0, r4
 80142b0:	f000 f98a 	bl	80145c8 <_Bfree>
 80142b4:	4639      	mov	r1, r7
 80142b6:	4620      	mov	r0, r4
 80142b8:	f000 f986 	bl	80145c8 <_Bfree>
 80142bc:	e6ac      	b.n	8014018 <_dtoa_r+0x5c0>
 80142be:	2500      	movs	r5, #0
 80142c0:	462f      	mov	r7, r5
 80142c2:	e7e1      	b.n	8014288 <_dtoa_r+0x830>
 80142c4:	469b      	mov	fp, r3
 80142c6:	462f      	mov	r7, r5
 80142c8:	e5da      	b.n	8013e80 <_dtoa_r+0x428>
 80142ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142cc:	f8cd 9018 	str.w	r9, [sp, #24]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	f000 80f3 	beq.w	80144bc <_dtoa_r+0xa64>
 80142d6:	2e00      	cmp	r6, #0
 80142d8:	dd05      	ble.n	80142e6 <_dtoa_r+0x88e>
 80142da:	4639      	mov	r1, r7
 80142dc:	4632      	mov	r2, r6
 80142de:	4620      	mov	r0, r4
 80142e0:	f000 fb00 	bl	80148e4 <__lshift>
 80142e4:	4607      	mov	r7, r0
 80142e6:	f1b8 0f00 	cmp.w	r8, #0
 80142ea:	d04c      	beq.n	8014386 <_dtoa_r+0x92e>
 80142ec:	6879      	ldr	r1, [r7, #4]
 80142ee:	4620      	mov	r0, r4
 80142f0:	f000 f936 	bl	8014560 <_Balloc>
 80142f4:	693a      	ldr	r2, [r7, #16]
 80142f6:	3202      	adds	r2, #2
 80142f8:	4606      	mov	r6, r0
 80142fa:	0092      	lsls	r2, r2, #2
 80142fc:	f107 010c 	add.w	r1, r7, #12
 8014300:	300c      	adds	r0, #12
 8014302:	f7fe fd86 	bl	8012e12 <memcpy>
 8014306:	2201      	movs	r2, #1
 8014308:	4631      	mov	r1, r6
 801430a:	4620      	mov	r0, r4
 801430c:	f000 faea 	bl	80148e4 <__lshift>
 8014310:	9b02      	ldr	r3, [sp, #8]
 8014312:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014316:	f003 0301 	and.w	r3, r3, #1
 801431a:	46b9      	mov	r9, r7
 801431c:	9307      	str	r3, [sp, #28]
 801431e:	4607      	mov	r7, r0
 8014320:	4629      	mov	r1, r5
 8014322:	9801      	ldr	r0, [sp, #4]
 8014324:	f7ff fb0c 	bl	8013940 <quorem>
 8014328:	4649      	mov	r1, r9
 801432a:	4606      	mov	r6, r0
 801432c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014330:	9801      	ldr	r0, [sp, #4]
 8014332:	f000 fb2b 	bl	801498c <__mcmp>
 8014336:	463a      	mov	r2, r7
 8014338:	9002      	str	r0, [sp, #8]
 801433a:	4629      	mov	r1, r5
 801433c:	4620      	mov	r0, r4
 801433e:	f000 fb3f 	bl	80149c0 <__mdiff>
 8014342:	68c3      	ldr	r3, [r0, #12]
 8014344:	4602      	mov	r2, r0
 8014346:	bb03      	cbnz	r3, 801438a <_dtoa_r+0x932>
 8014348:	4601      	mov	r1, r0
 801434a:	9009      	str	r0, [sp, #36]	; 0x24
 801434c:	9801      	ldr	r0, [sp, #4]
 801434e:	f000 fb1d 	bl	801498c <__mcmp>
 8014352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014354:	4603      	mov	r3, r0
 8014356:	4611      	mov	r1, r2
 8014358:	4620      	mov	r0, r4
 801435a:	9309      	str	r3, [sp, #36]	; 0x24
 801435c:	f000 f934 	bl	80145c8 <_Bfree>
 8014360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014362:	b9a3      	cbnz	r3, 801438e <_dtoa_r+0x936>
 8014364:	9a08      	ldr	r2, [sp, #32]
 8014366:	b992      	cbnz	r2, 801438e <_dtoa_r+0x936>
 8014368:	9a07      	ldr	r2, [sp, #28]
 801436a:	b982      	cbnz	r2, 801438e <_dtoa_r+0x936>
 801436c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014370:	d029      	beq.n	80143c6 <_dtoa_r+0x96e>
 8014372:	9b02      	ldr	r3, [sp, #8]
 8014374:	2b00      	cmp	r3, #0
 8014376:	dd01      	ble.n	801437c <_dtoa_r+0x924>
 8014378:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801437c:	f10a 0601 	add.w	r6, sl, #1
 8014380:	f88a 8000 	strb.w	r8, [sl]
 8014384:	e786      	b.n	8014294 <_dtoa_r+0x83c>
 8014386:	4638      	mov	r0, r7
 8014388:	e7c2      	b.n	8014310 <_dtoa_r+0x8b8>
 801438a:	2301      	movs	r3, #1
 801438c:	e7e3      	b.n	8014356 <_dtoa_r+0x8fe>
 801438e:	9a02      	ldr	r2, [sp, #8]
 8014390:	2a00      	cmp	r2, #0
 8014392:	db04      	blt.n	801439e <_dtoa_r+0x946>
 8014394:	d124      	bne.n	80143e0 <_dtoa_r+0x988>
 8014396:	9a08      	ldr	r2, [sp, #32]
 8014398:	bb12      	cbnz	r2, 80143e0 <_dtoa_r+0x988>
 801439a:	9a07      	ldr	r2, [sp, #28]
 801439c:	bb02      	cbnz	r2, 80143e0 <_dtoa_r+0x988>
 801439e:	2b00      	cmp	r3, #0
 80143a0:	ddec      	ble.n	801437c <_dtoa_r+0x924>
 80143a2:	2201      	movs	r2, #1
 80143a4:	9901      	ldr	r1, [sp, #4]
 80143a6:	4620      	mov	r0, r4
 80143a8:	f000 fa9c 	bl	80148e4 <__lshift>
 80143ac:	4629      	mov	r1, r5
 80143ae:	9001      	str	r0, [sp, #4]
 80143b0:	f000 faec 	bl	801498c <__mcmp>
 80143b4:	2800      	cmp	r0, #0
 80143b6:	dc03      	bgt.n	80143c0 <_dtoa_r+0x968>
 80143b8:	d1e0      	bne.n	801437c <_dtoa_r+0x924>
 80143ba:	f018 0f01 	tst.w	r8, #1
 80143be:	d0dd      	beq.n	801437c <_dtoa_r+0x924>
 80143c0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80143c4:	d1d8      	bne.n	8014378 <_dtoa_r+0x920>
 80143c6:	2339      	movs	r3, #57	; 0x39
 80143c8:	f10a 0601 	add.w	r6, sl, #1
 80143cc:	f88a 3000 	strb.w	r3, [sl]
 80143d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80143d4:	2b39      	cmp	r3, #57	; 0x39
 80143d6:	f106 32ff 	add.w	r2, r6, #4294967295
 80143da:	d04c      	beq.n	8014476 <_dtoa_r+0xa1e>
 80143dc:	3301      	adds	r3, #1
 80143de:	e051      	b.n	8014484 <_dtoa_r+0xa2c>
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	f10a 0601 	add.w	r6, sl, #1
 80143e6:	dd05      	ble.n	80143f4 <_dtoa_r+0x99c>
 80143e8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80143ec:	d0eb      	beq.n	80143c6 <_dtoa_r+0x96e>
 80143ee:	f108 0801 	add.w	r8, r8, #1
 80143f2:	e7c5      	b.n	8014380 <_dtoa_r+0x928>
 80143f4:	9b04      	ldr	r3, [sp, #16]
 80143f6:	9a06      	ldr	r2, [sp, #24]
 80143f8:	f806 8c01 	strb.w	r8, [r6, #-1]
 80143fc:	1af3      	subs	r3, r6, r3
 80143fe:	4293      	cmp	r3, r2
 8014400:	d021      	beq.n	8014446 <_dtoa_r+0x9ee>
 8014402:	2300      	movs	r3, #0
 8014404:	220a      	movs	r2, #10
 8014406:	9901      	ldr	r1, [sp, #4]
 8014408:	4620      	mov	r0, r4
 801440a:	f000 f8f4 	bl	80145f6 <__multadd>
 801440e:	45b9      	cmp	r9, r7
 8014410:	9001      	str	r0, [sp, #4]
 8014412:	f04f 0300 	mov.w	r3, #0
 8014416:	f04f 020a 	mov.w	r2, #10
 801441a:	4649      	mov	r1, r9
 801441c:	4620      	mov	r0, r4
 801441e:	d105      	bne.n	801442c <_dtoa_r+0x9d4>
 8014420:	f000 f8e9 	bl	80145f6 <__multadd>
 8014424:	4681      	mov	r9, r0
 8014426:	4607      	mov	r7, r0
 8014428:	46b2      	mov	sl, r6
 801442a:	e779      	b.n	8014320 <_dtoa_r+0x8c8>
 801442c:	f000 f8e3 	bl	80145f6 <__multadd>
 8014430:	4639      	mov	r1, r7
 8014432:	4681      	mov	r9, r0
 8014434:	2300      	movs	r3, #0
 8014436:	220a      	movs	r2, #10
 8014438:	4620      	mov	r0, r4
 801443a:	f000 f8dc 	bl	80145f6 <__multadd>
 801443e:	4607      	mov	r7, r0
 8014440:	e7f2      	b.n	8014428 <_dtoa_r+0x9d0>
 8014442:	f04f 0900 	mov.w	r9, #0
 8014446:	2201      	movs	r2, #1
 8014448:	9901      	ldr	r1, [sp, #4]
 801444a:	4620      	mov	r0, r4
 801444c:	f000 fa4a 	bl	80148e4 <__lshift>
 8014450:	4629      	mov	r1, r5
 8014452:	9001      	str	r0, [sp, #4]
 8014454:	f000 fa9a 	bl	801498c <__mcmp>
 8014458:	2800      	cmp	r0, #0
 801445a:	dcb9      	bgt.n	80143d0 <_dtoa_r+0x978>
 801445c:	d102      	bne.n	8014464 <_dtoa_r+0xa0c>
 801445e:	f018 0f01 	tst.w	r8, #1
 8014462:	d1b5      	bne.n	80143d0 <_dtoa_r+0x978>
 8014464:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014468:	2b30      	cmp	r3, #48	; 0x30
 801446a:	f106 32ff 	add.w	r2, r6, #4294967295
 801446e:	f47f af11 	bne.w	8014294 <_dtoa_r+0x83c>
 8014472:	4616      	mov	r6, r2
 8014474:	e7f6      	b.n	8014464 <_dtoa_r+0xa0c>
 8014476:	9b04      	ldr	r3, [sp, #16]
 8014478:	4293      	cmp	r3, r2
 801447a:	d105      	bne.n	8014488 <_dtoa_r+0xa30>
 801447c:	9a04      	ldr	r2, [sp, #16]
 801447e:	f10b 0b01 	add.w	fp, fp, #1
 8014482:	2331      	movs	r3, #49	; 0x31
 8014484:	7013      	strb	r3, [r2, #0]
 8014486:	e705      	b.n	8014294 <_dtoa_r+0x83c>
 8014488:	4616      	mov	r6, r2
 801448a:	e7a1      	b.n	80143d0 <_dtoa_r+0x978>
 801448c:	4b16      	ldr	r3, [pc, #88]	; (80144e8 <_dtoa_r+0xa90>)
 801448e:	f7ff bb48 	b.w	8013b22 <_dtoa_r+0xca>
 8014492:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014494:	2b00      	cmp	r3, #0
 8014496:	f47f ab23 	bne.w	8013ae0 <_dtoa_r+0x88>
 801449a:	4b14      	ldr	r3, [pc, #80]	; (80144ec <_dtoa_r+0xa94>)
 801449c:	f7ff bb41 	b.w	8013b22 <_dtoa_r+0xca>
 80144a0:	9b08      	ldr	r3, [sp, #32]
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	f77f ae3b 	ble.w	801411e <_dtoa_r+0x6c6>
 80144a8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80144ac:	e64f      	b.n	801414e <_dtoa_r+0x6f6>
 80144ae:	9b06      	ldr	r3, [sp, #24]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	dc03      	bgt.n	80144bc <_dtoa_r+0xa64>
 80144b4:	9b08      	ldr	r3, [sp, #32]
 80144b6:	2b02      	cmp	r3, #2
 80144b8:	f73f aed7 	bgt.w	801426a <_dtoa_r+0x812>
 80144bc:	9e04      	ldr	r6, [sp, #16]
 80144be:	9801      	ldr	r0, [sp, #4]
 80144c0:	4629      	mov	r1, r5
 80144c2:	f7ff fa3d 	bl	8013940 <quorem>
 80144c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80144ca:	f806 8b01 	strb.w	r8, [r6], #1
 80144ce:	9b04      	ldr	r3, [sp, #16]
 80144d0:	9a06      	ldr	r2, [sp, #24]
 80144d2:	1af3      	subs	r3, r6, r3
 80144d4:	429a      	cmp	r2, r3
 80144d6:	ddb4      	ble.n	8014442 <_dtoa_r+0x9ea>
 80144d8:	2300      	movs	r3, #0
 80144da:	220a      	movs	r2, #10
 80144dc:	9901      	ldr	r1, [sp, #4]
 80144de:	4620      	mov	r0, r4
 80144e0:	f000 f889 	bl	80145f6 <__multadd>
 80144e4:	9001      	str	r0, [sp, #4]
 80144e6:	e7ea      	b.n	80144be <_dtoa_r+0xa66>
 80144e8:	0802a160 	.word	0x0802a160
 80144ec:	0802a184 	.word	0x0802a184

080144f0 <__locale_ctype_ptr>:
 80144f0:	4b04      	ldr	r3, [pc, #16]	; (8014504 <__locale_ctype_ptr+0x14>)
 80144f2:	4a05      	ldr	r2, [pc, #20]	; (8014508 <__locale_ctype_ptr+0x18>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	6a1b      	ldr	r3, [r3, #32]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	bf08      	it	eq
 80144fc:	4613      	moveq	r3, r2
 80144fe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8014502:	4770      	bx	lr
 8014504:	20016934 	.word	0x20016934
 8014508:	20016998 	.word	0x20016998

0801450c <_localeconv_r>:
 801450c:	4b04      	ldr	r3, [pc, #16]	; (8014520 <_localeconv_r+0x14>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	6a18      	ldr	r0, [r3, #32]
 8014512:	4b04      	ldr	r3, [pc, #16]	; (8014524 <_localeconv_r+0x18>)
 8014514:	2800      	cmp	r0, #0
 8014516:	bf08      	it	eq
 8014518:	4618      	moveq	r0, r3
 801451a:	30f0      	adds	r0, #240	; 0xf0
 801451c:	4770      	bx	lr
 801451e:	bf00      	nop
 8014520:	20016934 	.word	0x20016934
 8014524:	20016998 	.word	0x20016998

08014528 <malloc>:
 8014528:	4b02      	ldr	r3, [pc, #8]	; (8014534 <malloc+0xc>)
 801452a:	4601      	mov	r1, r0
 801452c:	6818      	ldr	r0, [r3, #0]
 801452e:	f7fe bc9d 	b.w	8012e6c <_malloc_r>
 8014532:	bf00      	nop
 8014534:	20016934 	.word	0x20016934

08014538 <__ascii_mbtowc>:
 8014538:	b082      	sub	sp, #8
 801453a:	b901      	cbnz	r1, 801453e <__ascii_mbtowc+0x6>
 801453c:	a901      	add	r1, sp, #4
 801453e:	b142      	cbz	r2, 8014552 <__ascii_mbtowc+0x1a>
 8014540:	b14b      	cbz	r3, 8014556 <__ascii_mbtowc+0x1e>
 8014542:	7813      	ldrb	r3, [r2, #0]
 8014544:	600b      	str	r3, [r1, #0]
 8014546:	7812      	ldrb	r2, [r2, #0]
 8014548:	1c10      	adds	r0, r2, #0
 801454a:	bf18      	it	ne
 801454c:	2001      	movne	r0, #1
 801454e:	b002      	add	sp, #8
 8014550:	4770      	bx	lr
 8014552:	4610      	mov	r0, r2
 8014554:	e7fb      	b.n	801454e <__ascii_mbtowc+0x16>
 8014556:	f06f 0001 	mvn.w	r0, #1
 801455a:	e7f8      	b.n	801454e <__ascii_mbtowc+0x16>

0801455c <__malloc_lock>:
 801455c:	4770      	bx	lr

0801455e <__malloc_unlock>:
 801455e:	4770      	bx	lr

08014560 <_Balloc>:
 8014560:	b570      	push	{r4, r5, r6, lr}
 8014562:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014564:	4604      	mov	r4, r0
 8014566:	460e      	mov	r6, r1
 8014568:	b93d      	cbnz	r5, 801457a <_Balloc+0x1a>
 801456a:	2010      	movs	r0, #16
 801456c:	f7ff ffdc 	bl	8014528 <malloc>
 8014570:	6260      	str	r0, [r4, #36]	; 0x24
 8014572:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014576:	6005      	str	r5, [r0, #0]
 8014578:	60c5      	str	r5, [r0, #12]
 801457a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801457c:	68eb      	ldr	r3, [r5, #12]
 801457e:	b183      	cbz	r3, 80145a2 <_Balloc+0x42>
 8014580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014582:	68db      	ldr	r3, [r3, #12]
 8014584:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014588:	b9b8      	cbnz	r0, 80145ba <_Balloc+0x5a>
 801458a:	2101      	movs	r1, #1
 801458c:	fa01 f506 	lsl.w	r5, r1, r6
 8014590:	1d6a      	adds	r2, r5, #5
 8014592:	0092      	lsls	r2, r2, #2
 8014594:	4620      	mov	r0, r4
 8014596:	f000 fabf 	bl	8014b18 <_calloc_r>
 801459a:	b160      	cbz	r0, 80145b6 <_Balloc+0x56>
 801459c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80145a0:	e00e      	b.n	80145c0 <_Balloc+0x60>
 80145a2:	2221      	movs	r2, #33	; 0x21
 80145a4:	2104      	movs	r1, #4
 80145a6:	4620      	mov	r0, r4
 80145a8:	f000 fab6 	bl	8014b18 <_calloc_r>
 80145ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145ae:	60e8      	str	r0, [r5, #12]
 80145b0:	68db      	ldr	r3, [r3, #12]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d1e4      	bne.n	8014580 <_Balloc+0x20>
 80145b6:	2000      	movs	r0, #0
 80145b8:	bd70      	pop	{r4, r5, r6, pc}
 80145ba:	6802      	ldr	r2, [r0, #0]
 80145bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80145c0:	2300      	movs	r3, #0
 80145c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80145c6:	e7f7      	b.n	80145b8 <_Balloc+0x58>

080145c8 <_Bfree>:
 80145c8:	b570      	push	{r4, r5, r6, lr}
 80145ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80145cc:	4606      	mov	r6, r0
 80145ce:	460d      	mov	r5, r1
 80145d0:	b93c      	cbnz	r4, 80145e2 <_Bfree+0x1a>
 80145d2:	2010      	movs	r0, #16
 80145d4:	f7ff ffa8 	bl	8014528 <malloc>
 80145d8:	6270      	str	r0, [r6, #36]	; 0x24
 80145da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80145de:	6004      	str	r4, [r0, #0]
 80145e0:	60c4      	str	r4, [r0, #12]
 80145e2:	b13d      	cbz	r5, 80145f4 <_Bfree+0x2c>
 80145e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80145e6:	686a      	ldr	r2, [r5, #4]
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80145ee:	6029      	str	r1, [r5, #0]
 80145f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80145f4:	bd70      	pop	{r4, r5, r6, pc}

080145f6 <__multadd>:
 80145f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145fa:	690d      	ldr	r5, [r1, #16]
 80145fc:	461f      	mov	r7, r3
 80145fe:	4606      	mov	r6, r0
 8014600:	460c      	mov	r4, r1
 8014602:	f101 0c14 	add.w	ip, r1, #20
 8014606:	2300      	movs	r3, #0
 8014608:	f8dc 0000 	ldr.w	r0, [ip]
 801460c:	b281      	uxth	r1, r0
 801460e:	fb02 7101 	mla	r1, r2, r1, r7
 8014612:	0c0f      	lsrs	r7, r1, #16
 8014614:	0c00      	lsrs	r0, r0, #16
 8014616:	fb02 7000 	mla	r0, r2, r0, r7
 801461a:	b289      	uxth	r1, r1
 801461c:	3301      	adds	r3, #1
 801461e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014622:	429d      	cmp	r5, r3
 8014624:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014628:	f84c 1b04 	str.w	r1, [ip], #4
 801462c:	dcec      	bgt.n	8014608 <__multadd+0x12>
 801462e:	b1d7      	cbz	r7, 8014666 <__multadd+0x70>
 8014630:	68a3      	ldr	r3, [r4, #8]
 8014632:	42ab      	cmp	r3, r5
 8014634:	dc12      	bgt.n	801465c <__multadd+0x66>
 8014636:	6861      	ldr	r1, [r4, #4]
 8014638:	4630      	mov	r0, r6
 801463a:	3101      	adds	r1, #1
 801463c:	f7ff ff90 	bl	8014560 <_Balloc>
 8014640:	6922      	ldr	r2, [r4, #16]
 8014642:	3202      	adds	r2, #2
 8014644:	f104 010c 	add.w	r1, r4, #12
 8014648:	4680      	mov	r8, r0
 801464a:	0092      	lsls	r2, r2, #2
 801464c:	300c      	adds	r0, #12
 801464e:	f7fe fbe0 	bl	8012e12 <memcpy>
 8014652:	4621      	mov	r1, r4
 8014654:	4630      	mov	r0, r6
 8014656:	f7ff ffb7 	bl	80145c8 <_Bfree>
 801465a:	4644      	mov	r4, r8
 801465c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014660:	3501      	adds	r5, #1
 8014662:	615f      	str	r7, [r3, #20]
 8014664:	6125      	str	r5, [r4, #16]
 8014666:	4620      	mov	r0, r4
 8014668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801466c <__hi0bits>:
 801466c:	0c02      	lsrs	r2, r0, #16
 801466e:	0412      	lsls	r2, r2, #16
 8014670:	4603      	mov	r3, r0
 8014672:	b9b2      	cbnz	r2, 80146a2 <__hi0bits+0x36>
 8014674:	0403      	lsls	r3, r0, #16
 8014676:	2010      	movs	r0, #16
 8014678:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801467c:	bf04      	itt	eq
 801467e:	021b      	lsleq	r3, r3, #8
 8014680:	3008      	addeq	r0, #8
 8014682:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014686:	bf04      	itt	eq
 8014688:	011b      	lsleq	r3, r3, #4
 801468a:	3004      	addeq	r0, #4
 801468c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014690:	bf04      	itt	eq
 8014692:	009b      	lsleq	r3, r3, #2
 8014694:	3002      	addeq	r0, #2
 8014696:	2b00      	cmp	r3, #0
 8014698:	db06      	blt.n	80146a8 <__hi0bits+0x3c>
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	d503      	bpl.n	80146a6 <__hi0bits+0x3a>
 801469e:	3001      	adds	r0, #1
 80146a0:	4770      	bx	lr
 80146a2:	2000      	movs	r0, #0
 80146a4:	e7e8      	b.n	8014678 <__hi0bits+0xc>
 80146a6:	2020      	movs	r0, #32
 80146a8:	4770      	bx	lr

080146aa <__lo0bits>:
 80146aa:	6803      	ldr	r3, [r0, #0]
 80146ac:	f013 0207 	ands.w	r2, r3, #7
 80146b0:	4601      	mov	r1, r0
 80146b2:	d00b      	beq.n	80146cc <__lo0bits+0x22>
 80146b4:	07da      	lsls	r2, r3, #31
 80146b6:	d423      	bmi.n	8014700 <__lo0bits+0x56>
 80146b8:	0798      	lsls	r0, r3, #30
 80146ba:	bf49      	itett	mi
 80146bc:	085b      	lsrmi	r3, r3, #1
 80146be:	089b      	lsrpl	r3, r3, #2
 80146c0:	2001      	movmi	r0, #1
 80146c2:	600b      	strmi	r3, [r1, #0]
 80146c4:	bf5c      	itt	pl
 80146c6:	600b      	strpl	r3, [r1, #0]
 80146c8:	2002      	movpl	r0, #2
 80146ca:	4770      	bx	lr
 80146cc:	b298      	uxth	r0, r3
 80146ce:	b9a8      	cbnz	r0, 80146fc <__lo0bits+0x52>
 80146d0:	0c1b      	lsrs	r3, r3, #16
 80146d2:	2010      	movs	r0, #16
 80146d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80146d8:	bf04      	itt	eq
 80146da:	0a1b      	lsreq	r3, r3, #8
 80146dc:	3008      	addeq	r0, #8
 80146de:	071a      	lsls	r2, r3, #28
 80146e0:	bf04      	itt	eq
 80146e2:	091b      	lsreq	r3, r3, #4
 80146e4:	3004      	addeq	r0, #4
 80146e6:	079a      	lsls	r2, r3, #30
 80146e8:	bf04      	itt	eq
 80146ea:	089b      	lsreq	r3, r3, #2
 80146ec:	3002      	addeq	r0, #2
 80146ee:	07da      	lsls	r2, r3, #31
 80146f0:	d402      	bmi.n	80146f8 <__lo0bits+0x4e>
 80146f2:	085b      	lsrs	r3, r3, #1
 80146f4:	d006      	beq.n	8014704 <__lo0bits+0x5a>
 80146f6:	3001      	adds	r0, #1
 80146f8:	600b      	str	r3, [r1, #0]
 80146fa:	4770      	bx	lr
 80146fc:	4610      	mov	r0, r2
 80146fe:	e7e9      	b.n	80146d4 <__lo0bits+0x2a>
 8014700:	2000      	movs	r0, #0
 8014702:	4770      	bx	lr
 8014704:	2020      	movs	r0, #32
 8014706:	4770      	bx	lr

08014708 <__i2b>:
 8014708:	b510      	push	{r4, lr}
 801470a:	460c      	mov	r4, r1
 801470c:	2101      	movs	r1, #1
 801470e:	f7ff ff27 	bl	8014560 <_Balloc>
 8014712:	2201      	movs	r2, #1
 8014714:	6144      	str	r4, [r0, #20]
 8014716:	6102      	str	r2, [r0, #16]
 8014718:	bd10      	pop	{r4, pc}

0801471a <__multiply>:
 801471a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801471e:	4614      	mov	r4, r2
 8014720:	690a      	ldr	r2, [r1, #16]
 8014722:	6923      	ldr	r3, [r4, #16]
 8014724:	429a      	cmp	r2, r3
 8014726:	bfb8      	it	lt
 8014728:	460b      	movlt	r3, r1
 801472a:	4688      	mov	r8, r1
 801472c:	bfbc      	itt	lt
 801472e:	46a0      	movlt	r8, r4
 8014730:	461c      	movlt	r4, r3
 8014732:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014736:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801473a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801473e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014742:	eb07 0609 	add.w	r6, r7, r9
 8014746:	42b3      	cmp	r3, r6
 8014748:	bfb8      	it	lt
 801474a:	3101      	addlt	r1, #1
 801474c:	f7ff ff08 	bl	8014560 <_Balloc>
 8014750:	f100 0514 	add.w	r5, r0, #20
 8014754:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014758:	462b      	mov	r3, r5
 801475a:	2200      	movs	r2, #0
 801475c:	4573      	cmp	r3, lr
 801475e:	d316      	bcc.n	801478e <__multiply+0x74>
 8014760:	f104 0214 	add.w	r2, r4, #20
 8014764:	f108 0114 	add.w	r1, r8, #20
 8014768:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801476c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014770:	9300      	str	r3, [sp, #0]
 8014772:	9b00      	ldr	r3, [sp, #0]
 8014774:	9201      	str	r2, [sp, #4]
 8014776:	4293      	cmp	r3, r2
 8014778:	d80c      	bhi.n	8014794 <__multiply+0x7a>
 801477a:	2e00      	cmp	r6, #0
 801477c:	dd03      	ble.n	8014786 <__multiply+0x6c>
 801477e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014782:	2b00      	cmp	r3, #0
 8014784:	d05d      	beq.n	8014842 <__multiply+0x128>
 8014786:	6106      	str	r6, [r0, #16]
 8014788:	b003      	add	sp, #12
 801478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801478e:	f843 2b04 	str.w	r2, [r3], #4
 8014792:	e7e3      	b.n	801475c <__multiply+0x42>
 8014794:	f8b2 b000 	ldrh.w	fp, [r2]
 8014798:	f1bb 0f00 	cmp.w	fp, #0
 801479c:	d023      	beq.n	80147e6 <__multiply+0xcc>
 801479e:	4689      	mov	r9, r1
 80147a0:	46ac      	mov	ip, r5
 80147a2:	f04f 0800 	mov.w	r8, #0
 80147a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80147aa:	f8dc a000 	ldr.w	sl, [ip]
 80147ae:	b2a3      	uxth	r3, r4
 80147b0:	fa1f fa8a 	uxth.w	sl, sl
 80147b4:	fb0b a303 	mla	r3, fp, r3, sl
 80147b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80147bc:	f8dc 4000 	ldr.w	r4, [ip]
 80147c0:	4443      	add	r3, r8
 80147c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80147c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80147ca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80147ce:	46e2      	mov	sl, ip
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80147d6:	454f      	cmp	r7, r9
 80147d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80147dc:	f84a 3b04 	str.w	r3, [sl], #4
 80147e0:	d82b      	bhi.n	801483a <__multiply+0x120>
 80147e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80147e6:	9b01      	ldr	r3, [sp, #4]
 80147e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80147ec:	3204      	adds	r2, #4
 80147ee:	f1ba 0f00 	cmp.w	sl, #0
 80147f2:	d020      	beq.n	8014836 <__multiply+0x11c>
 80147f4:	682b      	ldr	r3, [r5, #0]
 80147f6:	4689      	mov	r9, r1
 80147f8:	46a8      	mov	r8, r5
 80147fa:	f04f 0b00 	mov.w	fp, #0
 80147fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8014802:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014806:	fb0a 440c 	mla	r4, sl, ip, r4
 801480a:	445c      	add	r4, fp
 801480c:	46c4      	mov	ip, r8
 801480e:	b29b      	uxth	r3, r3
 8014810:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014814:	f84c 3b04 	str.w	r3, [ip], #4
 8014818:	f859 3b04 	ldr.w	r3, [r9], #4
 801481c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014820:	0c1b      	lsrs	r3, r3, #16
 8014822:	fb0a b303 	mla	r3, sl, r3, fp
 8014826:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801482a:	454f      	cmp	r7, r9
 801482c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014830:	d805      	bhi.n	801483e <__multiply+0x124>
 8014832:	f8c8 3004 	str.w	r3, [r8, #4]
 8014836:	3504      	adds	r5, #4
 8014838:	e79b      	b.n	8014772 <__multiply+0x58>
 801483a:	46d4      	mov	ip, sl
 801483c:	e7b3      	b.n	80147a6 <__multiply+0x8c>
 801483e:	46e0      	mov	r8, ip
 8014840:	e7dd      	b.n	80147fe <__multiply+0xe4>
 8014842:	3e01      	subs	r6, #1
 8014844:	e799      	b.n	801477a <__multiply+0x60>
	...

08014848 <__pow5mult>:
 8014848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801484c:	4615      	mov	r5, r2
 801484e:	f012 0203 	ands.w	r2, r2, #3
 8014852:	4606      	mov	r6, r0
 8014854:	460f      	mov	r7, r1
 8014856:	d007      	beq.n	8014868 <__pow5mult+0x20>
 8014858:	3a01      	subs	r2, #1
 801485a:	4c21      	ldr	r4, [pc, #132]	; (80148e0 <__pow5mult+0x98>)
 801485c:	2300      	movs	r3, #0
 801485e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014862:	f7ff fec8 	bl	80145f6 <__multadd>
 8014866:	4607      	mov	r7, r0
 8014868:	10ad      	asrs	r5, r5, #2
 801486a:	d035      	beq.n	80148d8 <__pow5mult+0x90>
 801486c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801486e:	b93c      	cbnz	r4, 8014880 <__pow5mult+0x38>
 8014870:	2010      	movs	r0, #16
 8014872:	f7ff fe59 	bl	8014528 <malloc>
 8014876:	6270      	str	r0, [r6, #36]	; 0x24
 8014878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801487c:	6004      	str	r4, [r0, #0]
 801487e:	60c4      	str	r4, [r0, #12]
 8014880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014888:	b94c      	cbnz	r4, 801489e <__pow5mult+0x56>
 801488a:	f240 2171 	movw	r1, #625	; 0x271
 801488e:	4630      	mov	r0, r6
 8014890:	f7ff ff3a 	bl	8014708 <__i2b>
 8014894:	2300      	movs	r3, #0
 8014896:	f8c8 0008 	str.w	r0, [r8, #8]
 801489a:	4604      	mov	r4, r0
 801489c:	6003      	str	r3, [r0, #0]
 801489e:	f04f 0800 	mov.w	r8, #0
 80148a2:	07eb      	lsls	r3, r5, #31
 80148a4:	d50a      	bpl.n	80148bc <__pow5mult+0x74>
 80148a6:	4639      	mov	r1, r7
 80148a8:	4622      	mov	r2, r4
 80148aa:	4630      	mov	r0, r6
 80148ac:	f7ff ff35 	bl	801471a <__multiply>
 80148b0:	4639      	mov	r1, r7
 80148b2:	4681      	mov	r9, r0
 80148b4:	4630      	mov	r0, r6
 80148b6:	f7ff fe87 	bl	80145c8 <_Bfree>
 80148ba:	464f      	mov	r7, r9
 80148bc:	106d      	asrs	r5, r5, #1
 80148be:	d00b      	beq.n	80148d8 <__pow5mult+0x90>
 80148c0:	6820      	ldr	r0, [r4, #0]
 80148c2:	b938      	cbnz	r0, 80148d4 <__pow5mult+0x8c>
 80148c4:	4622      	mov	r2, r4
 80148c6:	4621      	mov	r1, r4
 80148c8:	4630      	mov	r0, r6
 80148ca:	f7ff ff26 	bl	801471a <__multiply>
 80148ce:	6020      	str	r0, [r4, #0]
 80148d0:	f8c0 8000 	str.w	r8, [r0]
 80148d4:	4604      	mov	r4, r0
 80148d6:	e7e4      	b.n	80148a2 <__pow5mult+0x5a>
 80148d8:	4638      	mov	r0, r7
 80148da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148de:	bf00      	nop
 80148e0:	0802a290 	.word	0x0802a290

080148e4 <__lshift>:
 80148e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148e8:	460c      	mov	r4, r1
 80148ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80148ee:	6923      	ldr	r3, [r4, #16]
 80148f0:	6849      	ldr	r1, [r1, #4]
 80148f2:	eb0a 0903 	add.w	r9, sl, r3
 80148f6:	68a3      	ldr	r3, [r4, #8]
 80148f8:	4607      	mov	r7, r0
 80148fa:	4616      	mov	r6, r2
 80148fc:	f109 0501 	add.w	r5, r9, #1
 8014900:	42ab      	cmp	r3, r5
 8014902:	db32      	blt.n	801496a <__lshift+0x86>
 8014904:	4638      	mov	r0, r7
 8014906:	f7ff fe2b 	bl	8014560 <_Balloc>
 801490a:	2300      	movs	r3, #0
 801490c:	4680      	mov	r8, r0
 801490e:	f100 0114 	add.w	r1, r0, #20
 8014912:	461a      	mov	r2, r3
 8014914:	4553      	cmp	r3, sl
 8014916:	db2b      	blt.n	8014970 <__lshift+0x8c>
 8014918:	6920      	ldr	r0, [r4, #16]
 801491a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801491e:	f104 0314 	add.w	r3, r4, #20
 8014922:	f016 021f 	ands.w	r2, r6, #31
 8014926:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801492a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801492e:	d025      	beq.n	801497c <__lshift+0x98>
 8014930:	f1c2 0e20 	rsb	lr, r2, #32
 8014934:	2000      	movs	r0, #0
 8014936:	681e      	ldr	r6, [r3, #0]
 8014938:	468a      	mov	sl, r1
 801493a:	4096      	lsls	r6, r2
 801493c:	4330      	orrs	r0, r6
 801493e:	f84a 0b04 	str.w	r0, [sl], #4
 8014942:	f853 0b04 	ldr.w	r0, [r3], #4
 8014946:	459c      	cmp	ip, r3
 8014948:	fa20 f00e 	lsr.w	r0, r0, lr
 801494c:	d814      	bhi.n	8014978 <__lshift+0x94>
 801494e:	6048      	str	r0, [r1, #4]
 8014950:	b108      	cbz	r0, 8014956 <__lshift+0x72>
 8014952:	f109 0502 	add.w	r5, r9, #2
 8014956:	3d01      	subs	r5, #1
 8014958:	4638      	mov	r0, r7
 801495a:	f8c8 5010 	str.w	r5, [r8, #16]
 801495e:	4621      	mov	r1, r4
 8014960:	f7ff fe32 	bl	80145c8 <_Bfree>
 8014964:	4640      	mov	r0, r8
 8014966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801496a:	3101      	adds	r1, #1
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	e7c7      	b.n	8014900 <__lshift+0x1c>
 8014970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014974:	3301      	adds	r3, #1
 8014976:	e7cd      	b.n	8014914 <__lshift+0x30>
 8014978:	4651      	mov	r1, sl
 801497a:	e7dc      	b.n	8014936 <__lshift+0x52>
 801497c:	3904      	subs	r1, #4
 801497e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014982:	f841 2f04 	str.w	r2, [r1, #4]!
 8014986:	459c      	cmp	ip, r3
 8014988:	d8f9      	bhi.n	801497e <__lshift+0x9a>
 801498a:	e7e4      	b.n	8014956 <__lshift+0x72>

0801498c <__mcmp>:
 801498c:	6903      	ldr	r3, [r0, #16]
 801498e:	690a      	ldr	r2, [r1, #16]
 8014990:	1a9b      	subs	r3, r3, r2
 8014992:	b530      	push	{r4, r5, lr}
 8014994:	d10c      	bne.n	80149b0 <__mcmp+0x24>
 8014996:	0092      	lsls	r2, r2, #2
 8014998:	3014      	adds	r0, #20
 801499a:	3114      	adds	r1, #20
 801499c:	1884      	adds	r4, r0, r2
 801499e:	4411      	add	r1, r2
 80149a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80149a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80149a8:	4295      	cmp	r5, r2
 80149aa:	d003      	beq.n	80149b4 <__mcmp+0x28>
 80149ac:	d305      	bcc.n	80149ba <__mcmp+0x2e>
 80149ae:	2301      	movs	r3, #1
 80149b0:	4618      	mov	r0, r3
 80149b2:	bd30      	pop	{r4, r5, pc}
 80149b4:	42a0      	cmp	r0, r4
 80149b6:	d3f3      	bcc.n	80149a0 <__mcmp+0x14>
 80149b8:	e7fa      	b.n	80149b0 <__mcmp+0x24>
 80149ba:	f04f 33ff 	mov.w	r3, #4294967295
 80149be:	e7f7      	b.n	80149b0 <__mcmp+0x24>

080149c0 <__mdiff>:
 80149c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149c4:	460d      	mov	r5, r1
 80149c6:	4607      	mov	r7, r0
 80149c8:	4611      	mov	r1, r2
 80149ca:	4628      	mov	r0, r5
 80149cc:	4614      	mov	r4, r2
 80149ce:	f7ff ffdd 	bl	801498c <__mcmp>
 80149d2:	1e06      	subs	r6, r0, #0
 80149d4:	d108      	bne.n	80149e8 <__mdiff+0x28>
 80149d6:	4631      	mov	r1, r6
 80149d8:	4638      	mov	r0, r7
 80149da:	f7ff fdc1 	bl	8014560 <_Balloc>
 80149de:	2301      	movs	r3, #1
 80149e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80149e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149e8:	bfa4      	itt	ge
 80149ea:	4623      	movge	r3, r4
 80149ec:	462c      	movge	r4, r5
 80149ee:	4638      	mov	r0, r7
 80149f0:	6861      	ldr	r1, [r4, #4]
 80149f2:	bfa6      	itte	ge
 80149f4:	461d      	movge	r5, r3
 80149f6:	2600      	movge	r6, #0
 80149f8:	2601      	movlt	r6, #1
 80149fa:	f7ff fdb1 	bl	8014560 <_Balloc>
 80149fe:	692b      	ldr	r3, [r5, #16]
 8014a00:	60c6      	str	r6, [r0, #12]
 8014a02:	6926      	ldr	r6, [r4, #16]
 8014a04:	f105 0914 	add.w	r9, r5, #20
 8014a08:	f104 0214 	add.w	r2, r4, #20
 8014a0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014a10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014a14:	f100 0514 	add.w	r5, r0, #20
 8014a18:	f04f 0e00 	mov.w	lr, #0
 8014a1c:	f852 ab04 	ldr.w	sl, [r2], #4
 8014a20:	f859 4b04 	ldr.w	r4, [r9], #4
 8014a24:	fa1e f18a 	uxtah	r1, lr, sl
 8014a28:	b2a3      	uxth	r3, r4
 8014a2a:	1ac9      	subs	r1, r1, r3
 8014a2c:	0c23      	lsrs	r3, r4, #16
 8014a2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014a32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014a36:	b289      	uxth	r1, r1
 8014a38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014a3c:	45c8      	cmp	r8, r9
 8014a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014a42:	4694      	mov	ip, r2
 8014a44:	f845 3b04 	str.w	r3, [r5], #4
 8014a48:	d8e8      	bhi.n	8014a1c <__mdiff+0x5c>
 8014a4a:	45bc      	cmp	ip, r7
 8014a4c:	d304      	bcc.n	8014a58 <__mdiff+0x98>
 8014a4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014a52:	b183      	cbz	r3, 8014a76 <__mdiff+0xb6>
 8014a54:	6106      	str	r6, [r0, #16]
 8014a56:	e7c5      	b.n	80149e4 <__mdiff+0x24>
 8014a58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014a5c:	fa1e f381 	uxtah	r3, lr, r1
 8014a60:	141a      	asrs	r2, r3, #16
 8014a62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014a66:	b29b      	uxth	r3, r3
 8014a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014a70:	f845 3b04 	str.w	r3, [r5], #4
 8014a74:	e7e9      	b.n	8014a4a <__mdiff+0x8a>
 8014a76:	3e01      	subs	r6, #1
 8014a78:	e7e9      	b.n	8014a4e <__mdiff+0x8e>

08014a7a <__d2b>:
 8014a7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a7e:	460e      	mov	r6, r1
 8014a80:	2101      	movs	r1, #1
 8014a82:	ec59 8b10 	vmov	r8, r9, d0
 8014a86:	4615      	mov	r5, r2
 8014a88:	f7ff fd6a 	bl	8014560 <_Balloc>
 8014a8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014a90:	4607      	mov	r7, r0
 8014a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a96:	bb34      	cbnz	r4, 8014ae6 <__d2b+0x6c>
 8014a98:	9301      	str	r3, [sp, #4]
 8014a9a:	f1b8 0300 	subs.w	r3, r8, #0
 8014a9e:	d027      	beq.n	8014af0 <__d2b+0x76>
 8014aa0:	a802      	add	r0, sp, #8
 8014aa2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014aa6:	f7ff fe00 	bl	80146aa <__lo0bits>
 8014aaa:	9900      	ldr	r1, [sp, #0]
 8014aac:	b1f0      	cbz	r0, 8014aec <__d2b+0x72>
 8014aae:	9a01      	ldr	r2, [sp, #4]
 8014ab0:	f1c0 0320 	rsb	r3, r0, #32
 8014ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8014ab8:	430b      	orrs	r3, r1
 8014aba:	40c2      	lsrs	r2, r0
 8014abc:	617b      	str	r3, [r7, #20]
 8014abe:	9201      	str	r2, [sp, #4]
 8014ac0:	9b01      	ldr	r3, [sp, #4]
 8014ac2:	61bb      	str	r3, [r7, #24]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	bf14      	ite	ne
 8014ac8:	2102      	movne	r1, #2
 8014aca:	2101      	moveq	r1, #1
 8014acc:	6139      	str	r1, [r7, #16]
 8014ace:	b1c4      	cbz	r4, 8014b02 <__d2b+0x88>
 8014ad0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014ad4:	4404      	add	r4, r0
 8014ad6:	6034      	str	r4, [r6, #0]
 8014ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014adc:	6028      	str	r0, [r5, #0]
 8014ade:	4638      	mov	r0, r7
 8014ae0:	b003      	add	sp, #12
 8014ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014aea:	e7d5      	b.n	8014a98 <__d2b+0x1e>
 8014aec:	6179      	str	r1, [r7, #20]
 8014aee:	e7e7      	b.n	8014ac0 <__d2b+0x46>
 8014af0:	a801      	add	r0, sp, #4
 8014af2:	f7ff fdda 	bl	80146aa <__lo0bits>
 8014af6:	9b01      	ldr	r3, [sp, #4]
 8014af8:	617b      	str	r3, [r7, #20]
 8014afa:	2101      	movs	r1, #1
 8014afc:	6139      	str	r1, [r7, #16]
 8014afe:	3020      	adds	r0, #32
 8014b00:	e7e5      	b.n	8014ace <__d2b+0x54>
 8014b02:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014b06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014b0a:	6030      	str	r0, [r6, #0]
 8014b0c:	6918      	ldr	r0, [r3, #16]
 8014b0e:	f7ff fdad 	bl	801466c <__hi0bits>
 8014b12:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014b16:	e7e1      	b.n	8014adc <__d2b+0x62>

08014b18 <_calloc_r>:
 8014b18:	b538      	push	{r3, r4, r5, lr}
 8014b1a:	fb02 f401 	mul.w	r4, r2, r1
 8014b1e:	4621      	mov	r1, r4
 8014b20:	f7fe f9a4 	bl	8012e6c <_malloc_r>
 8014b24:	4605      	mov	r5, r0
 8014b26:	b118      	cbz	r0, 8014b30 <_calloc_r+0x18>
 8014b28:	4622      	mov	r2, r4
 8014b2a:	2100      	movs	r1, #0
 8014b2c:	f7fe f995 	bl	8012e5a <memset>
 8014b30:	4628      	mov	r0, r5
 8014b32:	bd38      	pop	{r3, r4, r5, pc}

08014b34 <_free_r>:
 8014b34:	b538      	push	{r3, r4, r5, lr}
 8014b36:	4605      	mov	r5, r0
 8014b38:	2900      	cmp	r1, #0
 8014b3a:	d045      	beq.n	8014bc8 <_free_r+0x94>
 8014b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b40:	1f0c      	subs	r4, r1, #4
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	bfb8      	it	lt
 8014b46:	18e4      	addlt	r4, r4, r3
 8014b48:	f7ff fd08 	bl	801455c <__malloc_lock>
 8014b4c:	4a1f      	ldr	r2, [pc, #124]	; (8014bcc <_free_r+0x98>)
 8014b4e:	6813      	ldr	r3, [r2, #0]
 8014b50:	4610      	mov	r0, r2
 8014b52:	b933      	cbnz	r3, 8014b62 <_free_r+0x2e>
 8014b54:	6063      	str	r3, [r4, #4]
 8014b56:	6014      	str	r4, [r2, #0]
 8014b58:	4628      	mov	r0, r5
 8014b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b5e:	f7ff bcfe 	b.w	801455e <__malloc_unlock>
 8014b62:	42a3      	cmp	r3, r4
 8014b64:	d90c      	bls.n	8014b80 <_free_r+0x4c>
 8014b66:	6821      	ldr	r1, [r4, #0]
 8014b68:	1862      	adds	r2, r4, r1
 8014b6a:	4293      	cmp	r3, r2
 8014b6c:	bf04      	itt	eq
 8014b6e:	681a      	ldreq	r2, [r3, #0]
 8014b70:	685b      	ldreq	r3, [r3, #4]
 8014b72:	6063      	str	r3, [r4, #4]
 8014b74:	bf04      	itt	eq
 8014b76:	1852      	addeq	r2, r2, r1
 8014b78:	6022      	streq	r2, [r4, #0]
 8014b7a:	6004      	str	r4, [r0, #0]
 8014b7c:	e7ec      	b.n	8014b58 <_free_r+0x24>
 8014b7e:	4613      	mov	r3, r2
 8014b80:	685a      	ldr	r2, [r3, #4]
 8014b82:	b10a      	cbz	r2, 8014b88 <_free_r+0x54>
 8014b84:	42a2      	cmp	r2, r4
 8014b86:	d9fa      	bls.n	8014b7e <_free_r+0x4a>
 8014b88:	6819      	ldr	r1, [r3, #0]
 8014b8a:	1858      	adds	r0, r3, r1
 8014b8c:	42a0      	cmp	r0, r4
 8014b8e:	d10b      	bne.n	8014ba8 <_free_r+0x74>
 8014b90:	6820      	ldr	r0, [r4, #0]
 8014b92:	4401      	add	r1, r0
 8014b94:	1858      	adds	r0, r3, r1
 8014b96:	4282      	cmp	r2, r0
 8014b98:	6019      	str	r1, [r3, #0]
 8014b9a:	d1dd      	bne.n	8014b58 <_free_r+0x24>
 8014b9c:	6810      	ldr	r0, [r2, #0]
 8014b9e:	6852      	ldr	r2, [r2, #4]
 8014ba0:	605a      	str	r2, [r3, #4]
 8014ba2:	4401      	add	r1, r0
 8014ba4:	6019      	str	r1, [r3, #0]
 8014ba6:	e7d7      	b.n	8014b58 <_free_r+0x24>
 8014ba8:	d902      	bls.n	8014bb0 <_free_r+0x7c>
 8014baa:	230c      	movs	r3, #12
 8014bac:	602b      	str	r3, [r5, #0]
 8014bae:	e7d3      	b.n	8014b58 <_free_r+0x24>
 8014bb0:	6820      	ldr	r0, [r4, #0]
 8014bb2:	1821      	adds	r1, r4, r0
 8014bb4:	428a      	cmp	r2, r1
 8014bb6:	bf04      	itt	eq
 8014bb8:	6811      	ldreq	r1, [r2, #0]
 8014bba:	6852      	ldreq	r2, [r2, #4]
 8014bbc:	6062      	str	r2, [r4, #4]
 8014bbe:	bf04      	itt	eq
 8014bc0:	1809      	addeq	r1, r1, r0
 8014bc2:	6021      	streq	r1, [r4, #0]
 8014bc4:	605c      	str	r4, [r3, #4]
 8014bc6:	e7c7      	b.n	8014b58 <_free_r+0x24>
 8014bc8:	bd38      	pop	{r3, r4, r5, pc}
 8014bca:	bf00      	nop
 8014bcc:	20027028 	.word	0x20027028

08014bd0 <__ssputs_r>:
 8014bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bd4:	688e      	ldr	r6, [r1, #8]
 8014bd6:	429e      	cmp	r6, r3
 8014bd8:	4682      	mov	sl, r0
 8014bda:	460c      	mov	r4, r1
 8014bdc:	4690      	mov	r8, r2
 8014bde:	4699      	mov	r9, r3
 8014be0:	d837      	bhi.n	8014c52 <__ssputs_r+0x82>
 8014be2:	898a      	ldrh	r2, [r1, #12]
 8014be4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014be8:	d031      	beq.n	8014c4e <__ssputs_r+0x7e>
 8014bea:	6825      	ldr	r5, [r4, #0]
 8014bec:	6909      	ldr	r1, [r1, #16]
 8014bee:	1a6f      	subs	r7, r5, r1
 8014bf0:	6965      	ldr	r5, [r4, #20]
 8014bf2:	2302      	movs	r3, #2
 8014bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014bf8:	fb95 f5f3 	sdiv	r5, r5, r3
 8014bfc:	f109 0301 	add.w	r3, r9, #1
 8014c00:	443b      	add	r3, r7
 8014c02:	429d      	cmp	r5, r3
 8014c04:	bf38      	it	cc
 8014c06:	461d      	movcc	r5, r3
 8014c08:	0553      	lsls	r3, r2, #21
 8014c0a:	d530      	bpl.n	8014c6e <__ssputs_r+0x9e>
 8014c0c:	4629      	mov	r1, r5
 8014c0e:	f7fe f92d 	bl	8012e6c <_malloc_r>
 8014c12:	4606      	mov	r6, r0
 8014c14:	b950      	cbnz	r0, 8014c2c <__ssputs_r+0x5c>
 8014c16:	230c      	movs	r3, #12
 8014c18:	f8ca 3000 	str.w	r3, [sl]
 8014c1c:	89a3      	ldrh	r3, [r4, #12]
 8014c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c22:	81a3      	strh	r3, [r4, #12]
 8014c24:	f04f 30ff 	mov.w	r0, #4294967295
 8014c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c2c:	463a      	mov	r2, r7
 8014c2e:	6921      	ldr	r1, [r4, #16]
 8014c30:	f7fe f8ef 	bl	8012e12 <memcpy>
 8014c34:	89a3      	ldrh	r3, [r4, #12]
 8014c36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c3e:	81a3      	strh	r3, [r4, #12]
 8014c40:	6126      	str	r6, [r4, #16]
 8014c42:	6165      	str	r5, [r4, #20]
 8014c44:	443e      	add	r6, r7
 8014c46:	1bed      	subs	r5, r5, r7
 8014c48:	6026      	str	r6, [r4, #0]
 8014c4a:	60a5      	str	r5, [r4, #8]
 8014c4c:	464e      	mov	r6, r9
 8014c4e:	454e      	cmp	r6, r9
 8014c50:	d900      	bls.n	8014c54 <__ssputs_r+0x84>
 8014c52:	464e      	mov	r6, r9
 8014c54:	4632      	mov	r2, r6
 8014c56:	4641      	mov	r1, r8
 8014c58:	6820      	ldr	r0, [r4, #0]
 8014c5a:	f7fe f8e5 	bl	8012e28 <memmove>
 8014c5e:	68a3      	ldr	r3, [r4, #8]
 8014c60:	1b9b      	subs	r3, r3, r6
 8014c62:	60a3      	str	r3, [r4, #8]
 8014c64:	6823      	ldr	r3, [r4, #0]
 8014c66:	441e      	add	r6, r3
 8014c68:	6026      	str	r6, [r4, #0]
 8014c6a:	2000      	movs	r0, #0
 8014c6c:	e7dc      	b.n	8014c28 <__ssputs_r+0x58>
 8014c6e:	462a      	mov	r2, r5
 8014c70:	f000 f90d 	bl	8014e8e <_realloc_r>
 8014c74:	4606      	mov	r6, r0
 8014c76:	2800      	cmp	r0, #0
 8014c78:	d1e2      	bne.n	8014c40 <__ssputs_r+0x70>
 8014c7a:	6921      	ldr	r1, [r4, #16]
 8014c7c:	4650      	mov	r0, sl
 8014c7e:	f7ff ff59 	bl	8014b34 <_free_r>
 8014c82:	e7c8      	b.n	8014c16 <__ssputs_r+0x46>

08014c84 <_svfiprintf_r>:
 8014c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c88:	461d      	mov	r5, r3
 8014c8a:	898b      	ldrh	r3, [r1, #12]
 8014c8c:	061f      	lsls	r7, r3, #24
 8014c8e:	b09d      	sub	sp, #116	; 0x74
 8014c90:	4680      	mov	r8, r0
 8014c92:	460c      	mov	r4, r1
 8014c94:	4616      	mov	r6, r2
 8014c96:	d50f      	bpl.n	8014cb8 <_svfiprintf_r+0x34>
 8014c98:	690b      	ldr	r3, [r1, #16]
 8014c9a:	b96b      	cbnz	r3, 8014cb8 <_svfiprintf_r+0x34>
 8014c9c:	2140      	movs	r1, #64	; 0x40
 8014c9e:	f7fe f8e5 	bl	8012e6c <_malloc_r>
 8014ca2:	6020      	str	r0, [r4, #0]
 8014ca4:	6120      	str	r0, [r4, #16]
 8014ca6:	b928      	cbnz	r0, 8014cb4 <_svfiprintf_r+0x30>
 8014ca8:	230c      	movs	r3, #12
 8014caa:	f8c8 3000 	str.w	r3, [r8]
 8014cae:	f04f 30ff 	mov.w	r0, #4294967295
 8014cb2:	e0c8      	b.n	8014e46 <_svfiprintf_r+0x1c2>
 8014cb4:	2340      	movs	r3, #64	; 0x40
 8014cb6:	6163      	str	r3, [r4, #20]
 8014cb8:	2300      	movs	r3, #0
 8014cba:	9309      	str	r3, [sp, #36]	; 0x24
 8014cbc:	2320      	movs	r3, #32
 8014cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014cc2:	2330      	movs	r3, #48	; 0x30
 8014cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014cc8:	9503      	str	r5, [sp, #12]
 8014cca:	f04f 0b01 	mov.w	fp, #1
 8014cce:	4637      	mov	r7, r6
 8014cd0:	463d      	mov	r5, r7
 8014cd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014cd6:	b10b      	cbz	r3, 8014cdc <_svfiprintf_r+0x58>
 8014cd8:	2b25      	cmp	r3, #37	; 0x25
 8014cda:	d13e      	bne.n	8014d5a <_svfiprintf_r+0xd6>
 8014cdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8014ce0:	d00b      	beq.n	8014cfa <_svfiprintf_r+0x76>
 8014ce2:	4653      	mov	r3, sl
 8014ce4:	4632      	mov	r2, r6
 8014ce6:	4621      	mov	r1, r4
 8014ce8:	4640      	mov	r0, r8
 8014cea:	f7ff ff71 	bl	8014bd0 <__ssputs_r>
 8014cee:	3001      	adds	r0, #1
 8014cf0:	f000 80a4 	beq.w	8014e3c <_svfiprintf_r+0x1b8>
 8014cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cf6:	4453      	add	r3, sl
 8014cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8014cfa:	783b      	ldrb	r3, [r7, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	f000 809d 	beq.w	8014e3c <_svfiprintf_r+0x1b8>
 8014d02:	2300      	movs	r3, #0
 8014d04:	f04f 32ff 	mov.w	r2, #4294967295
 8014d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d0c:	9304      	str	r3, [sp, #16]
 8014d0e:	9307      	str	r3, [sp, #28]
 8014d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d14:	931a      	str	r3, [sp, #104]	; 0x68
 8014d16:	462f      	mov	r7, r5
 8014d18:	2205      	movs	r2, #5
 8014d1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014d1e:	4850      	ldr	r0, [pc, #320]	; (8014e60 <_svfiprintf_r+0x1dc>)
 8014d20:	f7eb fb06 	bl	8000330 <memchr>
 8014d24:	9b04      	ldr	r3, [sp, #16]
 8014d26:	b9d0      	cbnz	r0, 8014d5e <_svfiprintf_r+0xda>
 8014d28:	06d9      	lsls	r1, r3, #27
 8014d2a:	bf44      	itt	mi
 8014d2c:	2220      	movmi	r2, #32
 8014d2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014d32:	071a      	lsls	r2, r3, #28
 8014d34:	bf44      	itt	mi
 8014d36:	222b      	movmi	r2, #43	; 0x2b
 8014d38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014d3c:	782a      	ldrb	r2, [r5, #0]
 8014d3e:	2a2a      	cmp	r2, #42	; 0x2a
 8014d40:	d015      	beq.n	8014d6e <_svfiprintf_r+0xea>
 8014d42:	9a07      	ldr	r2, [sp, #28]
 8014d44:	462f      	mov	r7, r5
 8014d46:	2000      	movs	r0, #0
 8014d48:	250a      	movs	r5, #10
 8014d4a:	4639      	mov	r1, r7
 8014d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d50:	3b30      	subs	r3, #48	; 0x30
 8014d52:	2b09      	cmp	r3, #9
 8014d54:	d94d      	bls.n	8014df2 <_svfiprintf_r+0x16e>
 8014d56:	b1b8      	cbz	r0, 8014d88 <_svfiprintf_r+0x104>
 8014d58:	e00f      	b.n	8014d7a <_svfiprintf_r+0xf6>
 8014d5a:	462f      	mov	r7, r5
 8014d5c:	e7b8      	b.n	8014cd0 <_svfiprintf_r+0x4c>
 8014d5e:	4a40      	ldr	r2, [pc, #256]	; (8014e60 <_svfiprintf_r+0x1dc>)
 8014d60:	1a80      	subs	r0, r0, r2
 8014d62:	fa0b f000 	lsl.w	r0, fp, r0
 8014d66:	4318      	orrs	r0, r3
 8014d68:	9004      	str	r0, [sp, #16]
 8014d6a:	463d      	mov	r5, r7
 8014d6c:	e7d3      	b.n	8014d16 <_svfiprintf_r+0x92>
 8014d6e:	9a03      	ldr	r2, [sp, #12]
 8014d70:	1d11      	adds	r1, r2, #4
 8014d72:	6812      	ldr	r2, [r2, #0]
 8014d74:	9103      	str	r1, [sp, #12]
 8014d76:	2a00      	cmp	r2, #0
 8014d78:	db01      	blt.n	8014d7e <_svfiprintf_r+0xfa>
 8014d7a:	9207      	str	r2, [sp, #28]
 8014d7c:	e004      	b.n	8014d88 <_svfiprintf_r+0x104>
 8014d7e:	4252      	negs	r2, r2
 8014d80:	f043 0302 	orr.w	r3, r3, #2
 8014d84:	9207      	str	r2, [sp, #28]
 8014d86:	9304      	str	r3, [sp, #16]
 8014d88:	783b      	ldrb	r3, [r7, #0]
 8014d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8014d8c:	d10c      	bne.n	8014da8 <_svfiprintf_r+0x124>
 8014d8e:	787b      	ldrb	r3, [r7, #1]
 8014d90:	2b2a      	cmp	r3, #42	; 0x2a
 8014d92:	d133      	bne.n	8014dfc <_svfiprintf_r+0x178>
 8014d94:	9b03      	ldr	r3, [sp, #12]
 8014d96:	1d1a      	adds	r2, r3, #4
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	9203      	str	r2, [sp, #12]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	bfb8      	it	lt
 8014da0:	f04f 33ff 	movlt.w	r3, #4294967295
 8014da4:	3702      	adds	r7, #2
 8014da6:	9305      	str	r3, [sp, #20]
 8014da8:	4d2e      	ldr	r5, [pc, #184]	; (8014e64 <_svfiprintf_r+0x1e0>)
 8014daa:	7839      	ldrb	r1, [r7, #0]
 8014dac:	2203      	movs	r2, #3
 8014dae:	4628      	mov	r0, r5
 8014db0:	f7eb fabe 	bl	8000330 <memchr>
 8014db4:	b138      	cbz	r0, 8014dc6 <_svfiprintf_r+0x142>
 8014db6:	2340      	movs	r3, #64	; 0x40
 8014db8:	1b40      	subs	r0, r0, r5
 8014dba:	fa03 f000 	lsl.w	r0, r3, r0
 8014dbe:	9b04      	ldr	r3, [sp, #16]
 8014dc0:	4303      	orrs	r3, r0
 8014dc2:	3701      	adds	r7, #1
 8014dc4:	9304      	str	r3, [sp, #16]
 8014dc6:	7839      	ldrb	r1, [r7, #0]
 8014dc8:	4827      	ldr	r0, [pc, #156]	; (8014e68 <_svfiprintf_r+0x1e4>)
 8014dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014dce:	2206      	movs	r2, #6
 8014dd0:	1c7e      	adds	r6, r7, #1
 8014dd2:	f7eb faad 	bl	8000330 <memchr>
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	d038      	beq.n	8014e4c <_svfiprintf_r+0x1c8>
 8014dda:	4b24      	ldr	r3, [pc, #144]	; (8014e6c <_svfiprintf_r+0x1e8>)
 8014ddc:	bb13      	cbnz	r3, 8014e24 <_svfiprintf_r+0x1a0>
 8014dde:	9b03      	ldr	r3, [sp, #12]
 8014de0:	3307      	adds	r3, #7
 8014de2:	f023 0307 	bic.w	r3, r3, #7
 8014de6:	3308      	adds	r3, #8
 8014de8:	9303      	str	r3, [sp, #12]
 8014dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dec:	444b      	add	r3, r9
 8014dee:	9309      	str	r3, [sp, #36]	; 0x24
 8014df0:	e76d      	b.n	8014cce <_svfiprintf_r+0x4a>
 8014df2:	fb05 3202 	mla	r2, r5, r2, r3
 8014df6:	2001      	movs	r0, #1
 8014df8:	460f      	mov	r7, r1
 8014dfa:	e7a6      	b.n	8014d4a <_svfiprintf_r+0xc6>
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	3701      	adds	r7, #1
 8014e00:	9305      	str	r3, [sp, #20]
 8014e02:	4619      	mov	r1, r3
 8014e04:	250a      	movs	r5, #10
 8014e06:	4638      	mov	r0, r7
 8014e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e0c:	3a30      	subs	r2, #48	; 0x30
 8014e0e:	2a09      	cmp	r2, #9
 8014e10:	d903      	bls.n	8014e1a <_svfiprintf_r+0x196>
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d0c8      	beq.n	8014da8 <_svfiprintf_r+0x124>
 8014e16:	9105      	str	r1, [sp, #20]
 8014e18:	e7c6      	b.n	8014da8 <_svfiprintf_r+0x124>
 8014e1a:	fb05 2101 	mla	r1, r5, r1, r2
 8014e1e:	2301      	movs	r3, #1
 8014e20:	4607      	mov	r7, r0
 8014e22:	e7f0      	b.n	8014e06 <_svfiprintf_r+0x182>
 8014e24:	ab03      	add	r3, sp, #12
 8014e26:	9300      	str	r3, [sp, #0]
 8014e28:	4622      	mov	r2, r4
 8014e2a:	4b11      	ldr	r3, [pc, #68]	; (8014e70 <_svfiprintf_r+0x1ec>)
 8014e2c:	a904      	add	r1, sp, #16
 8014e2e:	4640      	mov	r0, r8
 8014e30:	f7fe f8fe 	bl	8013030 <_printf_float>
 8014e34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014e38:	4681      	mov	r9, r0
 8014e3a:	d1d6      	bne.n	8014dea <_svfiprintf_r+0x166>
 8014e3c:	89a3      	ldrh	r3, [r4, #12]
 8014e3e:	065b      	lsls	r3, r3, #25
 8014e40:	f53f af35 	bmi.w	8014cae <_svfiprintf_r+0x2a>
 8014e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e46:	b01d      	add	sp, #116	; 0x74
 8014e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e4c:	ab03      	add	r3, sp, #12
 8014e4e:	9300      	str	r3, [sp, #0]
 8014e50:	4622      	mov	r2, r4
 8014e52:	4b07      	ldr	r3, [pc, #28]	; (8014e70 <_svfiprintf_r+0x1ec>)
 8014e54:	a904      	add	r1, sp, #16
 8014e56:	4640      	mov	r0, r8
 8014e58:	f7fe fb8c 	bl	8013574 <_printf_i>
 8014e5c:	e7ea      	b.n	8014e34 <_svfiprintf_r+0x1b0>
 8014e5e:	bf00      	nop
 8014e60:	0802a29c 	.word	0x0802a29c
 8014e64:	0802a2a2 	.word	0x0802a2a2
 8014e68:	0802a2a6 	.word	0x0802a2a6
 8014e6c:	08013031 	.word	0x08013031
 8014e70:	08014bd1 	.word	0x08014bd1

08014e74 <__ascii_wctomb>:
 8014e74:	b149      	cbz	r1, 8014e8a <__ascii_wctomb+0x16>
 8014e76:	2aff      	cmp	r2, #255	; 0xff
 8014e78:	bf85      	ittet	hi
 8014e7a:	238a      	movhi	r3, #138	; 0x8a
 8014e7c:	6003      	strhi	r3, [r0, #0]
 8014e7e:	700a      	strbls	r2, [r1, #0]
 8014e80:	f04f 30ff 	movhi.w	r0, #4294967295
 8014e84:	bf98      	it	ls
 8014e86:	2001      	movls	r0, #1
 8014e88:	4770      	bx	lr
 8014e8a:	4608      	mov	r0, r1
 8014e8c:	4770      	bx	lr

08014e8e <_realloc_r>:
 8014e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e90:	4607      	mov	r7, r0
 8014e92:	4614      	mov	r4, r2
 8014e94:	460e      	mov	r6, r1
 8014e96:	b921      	cbnz	r1, 8014ea2 <_realloc_r+0x14>
 8014e98:	4611      	mov	r1, r2
 8014e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014e9e:	f7fd bfe5 	b.w	8012e6c <_malloc_r>
 8014ea2:	b922      	cbnz	r2, 8014eae <_realloc_r+0x20>
 8014ea4:	f7ff fe46 	bl	8014b34 <_free_r>
 8014ea8:	4625      	mov	r5, r4
 8014eaa:	4628      	mov	r0, r5
 8014eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eae:	f000 f814 	bl	8014eda <_malloc_usable_size_r>
 8014eb2:	42a0      	cmp	r0, r4
 8014eb4:	d20f      	bcs.n	8014ed6 <_realloc_r+0x48>
 8014eb6:	4621      	mov	r1, r4
 8014eb8:	4638      	mov	r0, r7
 8014eba:	f7fd ffd7 	bl	8012e6c <_malloc_r>
 8014ebe:	4605      	mov	r5, r0
 8014ec0:	2800      	cmp	r0, #0
 8014ec2:	d0f2      	beq.n	8014eaa <_realloc_r+0x1c>
 8014ec4:	4631      	mov	r1, r6
 8014ec6:	4622      	mov	r2, r4
 8014ec8:	f7fd ffa3 	bl	8012e12 <memcpy>
 8014ecc:	4631      	mov	r1, r6
 8014ece:	4638      	mov	r0, r7
 8014ed0:	f7ff fe30 	bl	8014b34 <_free_r>
 8014ed4:	e7e9      	b.n	8014eaa <_realloc_r+0x1c>
 8014ed6:	4635      	mov	r5, r6
 8014ed8:	e7e7      	b.n	8014eaa <_realloc_r+0x1c>

08014eda <_malloc_usable_size_r>:
 8014eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ede:	1f18      	subs	r0, r3, #4
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	bfbc      	itt	lt
 8014ee4:	580b      	ldrlt	r3, [r1, r0]
 8014ee6:	18c0      	addlt	r0, r0, r3
 8014ee8:	4770      	bx	lr
 8014eea:	0000      	movs	r0, r0
 8014eec:	0000      	movs	r0, r0
	...

08014ef0 <sqrtf>:
 8014ef0:	b500      	push	{lr}
 8014ef2:	ed2d 8b02 	vpush	{d8}
 8014ef6:	b08b      	sub	sp, #44	; 0x2c
 8014ef8:	eeb0 8a40 	vmov.f32	s16, s0
 8014efc:	f000 f848 	bl	8014f90 <__ieee754_sqrtf>
 8014f00:	4b21      	ldr	r3, [pc, #132]	; (8014f88 <sqrtf+0x98>)
 8014f02:	f993 3000 	ldrsb.w	r3, [r3]
 8014f06:	1c5a      	adds	r2, r3, #1
 8014f08:	d028      	beq.n	8014f5c <sqrtf+0x6c>
 8014f0a:	eeb4 8a48 	vcmp.f32	s16, s16
 8014f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f12:	d623      	bvs.n	8014f5c <sqrtf+0x6c>
 8014f14:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f1c:	d51e      	bpl.n	8014f5c <sqrtf+0x6c>
 8014f1e:	2201      	movs	r2, #1
 8014f20:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8014f24:	9200      	str	r2, [sp, #0]
 8014f26:	4a19      	ldr	r2, [pc, #100]	; (8014f8c <sqrtf+0x9c>)
 8014f28:	9201      	str	r2, [sp, #4]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	9208      	str	r2, [sp, #32]
 8014f2e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014f32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014f36:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8014f80 <sqrtf+0x90>
 8014f3a:	b9a3      	cbnz	r3, 8014f66 <sqrtf+0x76>
 8014f3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014f40:	4668      	mov	r0, sp
 8014f42:	f000 f828 	bl	8014f96 <matherr>
 8014f46:	b1a0      	cbz	r0, 8014f72 <sqrtf+0x82>
 8014f48:	9b08      	ldr	r3, [sp, #32]
 8014f4a:	b11b      	cbz	r3, 8014f54 <sqrtf+0x64>
 8014f4c:	f7fd ff28 	bl	8012da0 <__errno>
 8014f50:	9b08      	ldr	r3, [sp, #32]
 8014f52:	6003      	str	r3, [r0, #0]
 8014f54:	ed9d 0b06 	vldr	d0, [sp, #24]
 8014f58:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014f5c:	b00b      	add	sp, #44	; 0x2c
 8014f5e:	ecbd 8b02 	vpop	{d8}
 8014f62:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f66:	2b02      	cmp	r3, #2
 8014f68:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8014f6c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8014f70:	d1e6      	bne.n	8014f40 <sqrtf+0x50>
 8014f72:	f7fd ff15 	bl	8012da0 <__errno>
 8014f76:	2321      	movs	r3, #33	; 0x21
 8014f78:	6003      	str	r3, [r0, #0]
 8014f7a:	e7e5      	b.n	8014f48 <sqrtf+0x58>
 8014f7c:	f3af 8000 	nop.w
	...
 8014f88:	20016b04 	.word	0x20016b04
 8014f8c:	0802a3ae 	.word	0x0802a3ae

08014f90 <__ieee754_sqrtf>:
 8014f90:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014f94:	4770      	bx	lr

08014f96 <matherr>:
 8014f96:	2000      	movs	r0, #0
 8014f98:	4770      	bx	lr
	...

08014f9c <_init>:
 8014f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f9e:	bf00      	nop
 8014fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fa2:	bc08      	pop	{r3}
 8014fa4:	469e      	mov	lr, r3
 8014fa6:	4770      	bx	lr

08014fa8 <_fini>:
 8014fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014faa:	bf00      	nop
 8014fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fae:	bc08      	pop	{r3}
 8014fb0:	469e      	mov	lr, r3
 8014fb2:	4770      	bx	lr
