
freertos-ethernet-edf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008530  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08008730  08008730  00018730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca0  08008ca0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca8  08008ca8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020580  200001e4  08008e94  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20020764  08008e94  00020764  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d09e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fde  00000000  00000000  0003d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a0  00000000  00000000  00041290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b8  00000000  00000000  00042830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006a81  00000000  00000000  00043be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001532f  00000000  00000000  0004a669  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012fed6  00000000  00000000  0005f998  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018f86e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b8  00000000  00000000  0018f8ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08008718 	.word	0x08008718

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08008718 	.word	0x08008718

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <shortestDeadline>:
	unsigned int numberOfEDFTasks;						// total number of tasks
	unsigned int activeTask;							// display active task number
}edfTasks;

unsigned int shortestDeadline( void )
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
	// init function variable with high value, 100000 means something went wrong
	int shortestDeadline = 1000000;
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <shortestDeadline+0x6c>)
 80005f8:	60fb      	str	r3, [r7, #12]
	// save task number with negative value, -1 means something went wrong
	int shortestDeadlineTask = -1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	60bb      	str	r3, [r7, #8]
	// iterate over all EDF tasks
	for (int taskCounter = 0u; taskCounter < SIZE_OF_EDF_TASKS_ARRAY; taskCounter ++)
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	e018      	b.n	8000638 <shortestDeadline+0x48>
	{
		if ( edfTasks.tasksArray[taskCounter].absoluteDeadline < shortestDeadline )
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <shortestDeadline+0x70>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	212c      	movs	r1, #44	; 0x2c
 800060c:	fb01 f303 	mul.w	r3, r1, r3
 8000610:	4413      	add	r3, r2
 8000612:	3314      	adds	r3, #20
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d20a      	bcs.n	8000632 <shortestDeadline+0x42>
		{
			shortestDeadline = edfTasks.tasksArray[taskCounter].absoluteDeadline;
 800061c:	4a10      	ldr	r2, [pc, #64]	; (8000660 <shortestDeadline+0x70>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	212c      	movs	r1, #44	; 0x2c
 8000622:	fb01 f303 	mul.w	r3, r1, r3
 8000626:	4413      	add	r3, r2
 8000628:	3314      	adds	r3, #20
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
			shortestDeadlineTask = taskCounter;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	60bb      	str	r3, [r7, #8]
	for (int taskCounter = 0u; taskCounter < SIZE_OF_EDF_TASKS_ARRAY; taskCounter ++)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b01      	cmp	r3, #1
 800063c:	dde3      	ble.n	8000606 <shortestDeadline+0x16>
		}
	}
	if ( (shortestDeadlineTask == -1 ) )
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000644:	d104      	bne.n	8000650 <shortestDeadline+0x60>
	{
		#if DEBUG_MODE
			debugPrintln("shortestDeadline error");
 8000646:	4807      	ldr	r0, [pc, #28]	; (8000664 <shortestDeadline+0x74>)
 8000648:	f000 fa30 	bl	8000aac <debugPrintln>
		#endif
		// something went wrong
		return -9999;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <shortestDeadline+0x78>)
 800064e:	e000      	b.n	8000652 <shortestDeadline+0x62>
	}
	else
	{
		// return shortest deadline task
		return shortestDeadlineTask;
 8000650:	68bb      	ldr	r3, [r7, #8]
	}
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	000f4240 	.word	0x000f4240
 8000660:	200205e8 	.word	0x200205e8
 8000664:	08008738 	.word	0x08008738
 8000668:	ffffd8f1 	.word	0xffffd8f1

0800066c <calcLastRunningTime>:


TickType_t calcLastRunningTime( void )
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	return edfTasks.tasksArray[edfTasks.activeTask].stopTime - edfTasks.tasksArray[edfTasks.activeTask].startTime;
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <calcLastRunningTime+0x34>)
 8000672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <calcLastRunningTime+0x34>)
 8000676:	212c      	movs	r1, #44	; 0x2c
 8000678:	fb01 f303 	mul.w	r3, r1, r3
 800067c:	4413      	add	r3, r2
 800067e:	3324      	adds	r3, #36	; 0x24
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <calcLastRunningTime+0x34>)
 8000684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000686:	4906      	ldr	r1, [pc, #24]	; (80006a0 <calcLastRunningTime+0x34>)
 8000688:	202c      	movs	r0, #44	; 0x2c
 800068a:	fb00 f303 	mul.w	r3, r0, r3
 800068e:	440b      	add	r3, r1
 8000690:	3320      	adds	r3, #32
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	1ad3      	subs	r3, r2, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	200205e8 	.word	0x200205e8

080006a4 <calcLatestStartTime>:

TickType_t calcLatestStartTime( void )
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	return edfTasks.tasksArray[edfTasks.activeTask].absoluteDeadline + edfTasks.tasksArray[edfTasks.activeTask].absoluteDeadline - edfTasks.tasksArray[edfTasks.activeTask].capacity;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <calcLatestStartTime+0x38>)
 80006aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ac:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <calcLatestStartTime+0x38>)
 80006ae:	212c      	movs	r1, #44	; 0x2c
 80006b0:	fb01 f303 	mul.w	r3, r1, r3
 80006b4:	4413      	add	r3, r2
 80006b6:	3314      	adds	r3, #20
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	005a      	lsls	r2, r3, #1
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <calcLatestStartTime+0x38>)
 80006be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c0:	4906      	ldr	r1, [pc, #24]	; (80006dc <calcLatestStartTime+0x38>)
 80006c2:	202c      	movs	r0, #44	; 0x2c
 80006c4:	fb00 f303 	mul.w	r3, r0, r3
 80006c8:	440b      	add	r3, r1
 80006ca:	3308      	adds	r3, #8
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1ad3      	subs	r3, r2, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	200205e8 	.word	0x200205e8

080006e0 <calcNextDeadline>:

TickType_t calcNextDeadline( TickType_t currentTick )
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	return currentTick + edfTasks.tasksArray[edfTasks.activeTask].relativeDeadline;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <calcNextDeadline+0x2c>)
 80006ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <calcNextDeadline+0x2c>)
 80006ee:	212c      	movs	r1, #44	; 0x2c
 80006f0:	fb01 f303 	mul.w	r3, r1, r3
 80006f4:	4413      	add	r3, r2
 80006f6:	3318      	adds	r3, #24
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	200205e8 	.word	0x200205e8

08000710 <rescheduleEDF>:

/* reschedule edf tasks */
void rescheduleEDF( void )
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b0a1      	sub	sp, #132	; 0x84
 8000714:	af02      	add	r7, sp, #8
	// executed task
	unsigned int executedTask = edfTasks.activeTask;
 8000716:	4b4a      	ldr	r3, [pc, #296]	; (8000840 <rescheduleEDF+0x130>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	677b      	str	r3, [r7, #116]	; 0x74
	// get current tick
	uint32_t currentTick = xTaskGetTickCount();
 800071c:	f004 fb80 	bl	8004e20 <xTaskGetTickCount>
 8000720:	6738      	str	r0, [r7, #112]	; 0x70
	// set stop time
	edfTasks.tasksArray[edfTasks.activeTask].stopTime = currentTick;
 8000722:	4b47      	ldr	r3, [pc, #284]	; (8000840 <rescheduleEDF+0x130>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a46      	ldr	r2, [pc, #280]	; (8000840 <rescheduleEDF+0x130>)
 8000728:	212c      	movs	r1, #44	; 0x2c
 800072a:	fb01 f303 	mul.w	r3, r1, r3
 800072e:	4413      	add	r3, r2
 8000730:	3324      	adds	r3, #36	; 0x24
 8000732:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000734:	601a      	str	r2, [r3, #0]
	// calculate running time
	edfTasks.tasksArray[edfTasks.activeTask].lastRunningTime = calcLastRunningTime();
 8000736:	4b42      	ldr	r3, [pc, #264]	; (8000840 <rescheduleEDF+0x130>)
 8000738:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800073a:	f7ff ff97 	bl	800066c <calcLastRunningTime>
 800073e:	4601      	mov	r1, r0
 8000740:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <rescheduleEDF+0x130>)
 8000742:	232c      	movs	r3, #44	; 0x2c
 8000744:	fb03 f304 	mul.w	r3, r3, r4
 8000748:	4413      	add	r3, r2
 800074a:	331c      	adds	r3, #28
 800074c:	6019      	str	r1, [r3, #0]
	// calculate next latest start time of task
	edfTasks.tasksArray[edfTasks.activeTask].latestStartTime = calcLatestStartTime();
 800074e:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <rescheduleEDF+0x130>)
 8000750:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8000752:	f7ff ffa7 	bl	80006a4 <calcLatestStartTime>
 8000756:	4601      	mov	r1, r0
 8000758:	4a39      	ldr	r2, [pc, #228]	; (8000840 <rescheduleEDF+0x130>)
 800075a:	232c      	movs	r3, #44	; 0x2c
 800075c:	fb03 f304 	mul.w	r3, r3, r4
 8000760:	4413      	add	r3, r2
 8000762:	3310      	adds	r3, #16
 8000764:	6019      	str	r1, [r3, #0]
	// calculate next deadline of task
	edfTasks.tasksArray[edfTasks.activeTask].absoluteDeadline = calcNextDeadline( currentTick );
 8000766:	4b36      	ldr	r3, [pc, #216]	; (8000840 <rescheduleEDF+0x130>)
 8000768:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800076a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800076c:	f7ff ffb8 	bl	80006e0 <calcNextDeadline>
 8000770:	4601      	mov	r1, r0
 8000772:	4a33      	ldr	r2, [pc, #204]	; (8000840 <rescheduleEDF+0x130>)
 8000774:	232c      	movs	r3, #44	; 0x2c
 8000776:	fb03 f304 	mul.w	r3, r3, r4
 800077a:	4413      	add	r3, r2
 800077c:	3314      	adds	r3, #20
 800077e:	6019      	str	r1, [r3, #0]
	// find shortest deadline task number
	unsigned int shortestDeadlineTask = shortestDeadline();
 8000780:	f7ff ff36 	bl	80005f0 <shortestDeadline>
 8000784:	66f8      	str	r0, [r7, #108]	; 0x6c
	// set startTime of task
	edfTasks.tasksArray[shortestDeadlineTask].startTime = xTaskGetTickCount();
 8000786:	f004 fb4b 	bl	8004e20 <xTaskGetTickCount>
 800078a:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <rescheduleEDF+0x130>)
 800078c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800078e:	212c      	movs	r1, #44	; 0x2c
 8000790:	fb01 f303 	mul.w	r3, r1, r3
 8000794:	4413      	add	r3, r2
 8000796:	3320      	adds	r3, #32
 8000798:	6018      	str	r0, [r3, #0]
	// increase task call counter
	edfTasks.tasksArray[shortestDeadlineTask].callCounter++;
 800079a:	4a29      	ldr	r2, [pc, #164]	; (8000840 <rescheduleEDF+0x130>)
 800079c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800079e:	212c      	movs	r1, #44	; 0x2c
 80007a0:	fb01 f303 	mul.w	r3, r1, r3
 80007a4:	4413      	add	r3, r2
 80007a6:	3328      	adds	r3, #40	; 0x28
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	4924      	ldr	r1, [pc, #144]	; (8000840 <rescheduleEDF+0x130>)
 80007ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007b0:	202c      	movs	r0, #44	; 0x2c
 80007b2:	fb00 f303 	mul.w	r3, r0, r3
 80007b6:	440b      	add	r3, r1
 80007b8:	3328      	adds	r3, #40	; 0x28
 80007ba:	601a      	str	r2, [r3, #0]
	// set task numer in edf struct
	edfTasks.activeTask = shortestDeadlineTask;
 80007bc:	4a20      	ldr	r2, [pc, #128]	; (8000840 <rescheduleEDF+0x130>)
 80007be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007c0:	6613      	str	r3, [r2, #96]	; 0x60
	vTaskPrioritySet( edfTasks.tasksArray[executedTask].taskHandle, EDF_DISABLED_PRIORITY);
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <rescheduleEDF+0x130>)
 80007c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007c6:	212c      	movs	r1, #44	; 0x2c
 80007c8:	fb01 f303 	mul.w	r3, r1, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	211e      	movs	r1, #30
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 f85e 	bl	8004894 <vTaskPrioritySet>
	vTaskPrioritySet( edfTasks.tasksArray[shortestDeadlineTask].taskHandle, EDF_ENABLED_PRIOTIRY);
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <rescheduleEDF+0x130>)
 80007da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007dc:	212c      	movs	r1, #44	; 0x2c
 80007de:	fb01 f303 	mul.w	r3, r1, r3
 80007e2:	4413      	add	r3, r2
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	211f      	movs	r1, #31
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 f853 	bl	8004894 <vTaskPrioritySet>
	#if DEBUG_MODE
		char buffer[100];
		unsigned long t1 = uxTaskPriorityGet( edfTasks.tasksArray[0].taskHandle );
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <rescheduleEDF+0x130>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 f834 	bl	8004860 <uxTaskPriorityGet>
 80007f8:	66b8      	str	r0, [r7, #104]	; 0x68
		unsigned long t2 = uxTaskPriorityGet( edfTasks.tasksArray[1].taskHandle );
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <rescheduleEDF+0x130>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 f82e 	bl	8004860 <uxTaskPriorityGet>
 8000804:	6678      	str	r0, [r7, #100]	; 0x64
		snprintf(buffer, sizeof(buffer), "Prio of Task1: %lu, Task2: %lu", t1, t2 );
 8000806:	4638      	mov	r0, r7
 8000808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800080e:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <rescheduleEDF+0x134>)
 8000810:	2164      	movs	r1, #100	; 0x64
 8000812:	f006 fc83 	bl	800711c <sniprintf>
		debugPrintln(buffer);
 8000816:	463b      	mov	r3, r7
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f947 	bl	8000aac <debugPrintln>
	#endif
	// resume selected task
	vTaskResume( edfTasks.tasksArray[shortestDeadlineTask].taskHandle );
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <rescheduleEDF+0x130>)
 8000820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000822:	212c      	movs	r1, #44	; 0x2c
 8000824:	fb01 f303 	mul.w	r3, r1, r3
 8000828:	4413      	add	r3, r2
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f004 f99f 	bl	8004b70 <vTaskResume>
	// suspend current task
	vTaskSuspend( NULL );
 8000832:	2000      	movs	r0, #0
 8000834:	f004 f8d4 	bl	80049e0 <vTaskSuspend>
}
 8000838:	bf00      	nop
 800083a:	377c      	adds	r7, #124	; 0x7c
 800083c:	46bd      	mov	sp, r7
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	200205e8 	.word	0x200205e8
 8000844:	08008750 	.word	0x08008750

08000848 <initEDFTasksStruct>:


/* initialisation of edfTasksStruct */
void initEDFTasksStruct( void )
{
 8000848:	b580      	push	{r7, lr}
 800084a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800084e:	af00      	add	r7, sp, #0
	// get shortest deadline task number
	unsigned int shortestDeadlineTask = shortestDeadline();
 8000850:	f7ff fece 	bl	80005f0 <shortestDeadline>
 8000854:	f8c7 0404 	str.w	r0, [r7, #1028]	; 0x404
	// set startTime of task
	edfTasks.tasksArray[shortestDeadlineTask].startTime = xTaskGetTickCount();
 8000858:	f004 fae2 	bl	8004e20 <xTaskGetTickCount>
 800085c:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <initEDFTasksStruct+0x78>)
 800085e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000862:	212c      	movs	r1, #44	; 0x2c
 8000864:	fb01 f303 	mul.w	r3, r1, r3
 8000868:	4413      	add	r3, r2
 800086a:	3320      	adds	r3, #32
 800086c:	6018      	str	r0, [r3, #0]
	// increase task call counter
	edfTasks.tasksArray[shortestDeadlineTask].callCounter++;
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <initEDFTasksStruct+0x78>)
 8000870:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000874:	212c      	movs	r1, #44	; 0x2c
 8000876:	fb01 f303 	mul.w	r3, r1, r3
 800087a:	4413      	add	r3, r2
 800087c:	3328      	adds	r3, #40	; 0x28
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	490f      	ldr	r1, [pc, #60]	; (80008c0 <initEDFTasksStruct+0x78>)
 8000884:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000888:	202c      	movs	r0, #44	; 0x2c
 800088a:	fb00 f303 	mul.w	r3, r0, r3
 800088e:	440b      	add	r3, r1
 8000890:	3328      	adds	r3, #40	; 0x28
 8000892:	601a      	str	r2, [r3, #0]
	// set task numer in edf struct
	edfTasks.activeTask = shortestDeadlineTask;
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <initEDFTasksStruct+0x78>)
 8000896:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800089a:	6613      	str	r3, [r2, #96]	; 0x60
//	// resume selected task
//	vTaskResume( edfTasks.tasksArray[shortestDeadlineTask].taskHandle );
//	vTaskPrioritySet(edfTasks.tasksArray[shortestDeadlineTask].taskHandle, EDF_ENABLED_PRIOTIRY);
	#if DEBUG_MODE
		char buffer[1024];
		snprintf(buffer, sizeof(buffer), "initEDFTasksStruct finished, selected Task: %d", shortestDeadlineTask );
 800089c:	1d38      	adds	r0, r7, #4
 800089e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <initEDFTasksStruct+0x7c>)
 80008a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a8:	f006 fc38 	bl	800711c <sniprintf>
		debugPrintln(buffer);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f8fc 	bl	8000aac <debugPrintln>
	#endif
}
 80008b4:	bf00      	nop
 80008b6:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200205e8 	.word	0x200205e8
 80008c4:	08008770 	.word	0x08008770

080008c8 <createEDFTask>:
						  configSTACK_DEPTH_TYPE stackDepth,		// The number of words (not bytes!) to allocate for use as the task`s stack
						  void* pvParameters,						// A value that will passed into the created task as the task`s parameter
						  TickType_t capacity,						// Capacity or worst-case computation time
						  TickType_t period,						// Period of Task
						  TickType_t deadline)						// Deadline of Task
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	4613      	mov	r3, r2
 80008d6:	80fb      	strh	r3, [r7, #6]
	// get current Tick
	uint32_t currentTick = xTaskGetTickCount();
 80008d8:	f004 faa2 	bl	8004e20 <xTaskGetTickCount>
 80008dc:	61f8      	str	r0, [r7, #28]
	// get current number of tasks
	unsigned int edfTaskNumber = edfTasks.numberOfEDFTasks;
 80008de:	4b2f      	ldr	r3, [pc, #188]	; (800099c <createEDFTask+0xd4>)
 80008e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008e2:	61bb      	str	r3, [r7, #24]
	// set realtiveDeadline
	edfTasks.tasksArray[edfTaskNumber].relativeDeadline = deadline;
 80008e4:	4a2d      	ldr	r2, [pc, #180]	; (800099c <createEDFTask+0xd4>)
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	212c      	movs	r1, #44	; 0x2c
 80008ea:	fb01 f303 	mul.w	r3, r1, r3
 80008ee:	4413      	add	r3, r2
 80008f0:	3318      	adds	r3, #24
 80008f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008f4:	601a      	str	r2, [r3, #0]
	// calculate next deadline
	edfTasks.tasksArray[edfTaskNumber].absoluteDeadline = currentTick + deadline;
 80008f6:	69fa      	ldr	r2, [r7, #28]
 80008f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008fa:	441a      	add	r2, r3
 80008fc:	4927      	ldr	r1, [pc, #156]	; (800099c <createEDFTask+0xd4>)
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	202c      	movs	r0, #44	; 0x2c
 8000902:	fb00 f303 	mul.w	r3, r0, r3
 8000906:	440b      	add	r3, r1
 8000908:	3314      	adds	r3, #20
 800090a:	601a      	str	r2, [r3, #0]
	// calculate latest start time
	edfTasks.tasksArray[edfTaskNumber].latestStartTime = currentTick + deadline - capacity;
 800090c:	69fa      	ldr	r2, [r7, #28]
 800090e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000910:	441a      	add	r2, r3
 8000912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000914:	1ad2      	subs	r2, r2, r3
 8000916:	4921      	ldr	r1, [pc, #132]	; (800099c <createEDFTask+0xd4>)
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	202c      	movs	r0, #44	; 0x2c
 800091c:	fb00 f303 	mul.w	r3, r0, r3
 8000920:	440b      	add	r3, r1
 8000922:	3310      	adds	r3, #16
 8000924:	601a      	str	r2, [r3, #0]
	// create normal freeRTOS task
	BaseType_t xReturned = xTaskCreate( taskCode, taskName, stackDepth , NULL, EDF_DISABLED_PRIORITY, &edfTasks.tasksArray[edfTaskNumber].taskHandle );
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	222c      	movs	r2, #44	; 0x2c
 800092a:	fb02 f303 	mul.w	r3, r2, r3
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <createEDFTask+0xd4>)
 8000930:	4413      	add	r3, r2
 8000932:	88fa      	ldrh	r2, [r7, #6]
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	231e      	movs	r3, #30
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2300      	movs	r3, #0
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f003 fe06 	bl	8004550 <xTaskCreate>
 8000944:	6178      	str	r0, [r7, #20]
	// set task name
	edfTasks.tasksArray[edfTaskNumber].taskName = taskName;
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <createEDFTask+0xd4>)
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	212c      	movs	r1, #44	; 0x2c
 800094c:	fb01 f303 	mul.w	r3, r1, r3
 8000950:	4413      	add	r3, r2
 8000952:	3304      	adds	r3, #4
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	601a      	str	r2, [r3, #0]
	// set capacity of task
	edfTasks.tasksArray[edfTaskNumber].capacity = capacity;
 8000958:	4a10      	ldr	r2, [pc, #64]	; (800099c <createEDFTask+0xd4>)
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	212c      	movs	r1, #44	; 0x2c
 800095e:	fb01 f303 	mul.w	r3, r1, r3
 8000962:	4413      	add	r3, r2
 8000964:	3308      	adds	r3, #8
 8000966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000968:	601a      	str	r2, [r3, #0]
	// set period of task
	edfTasks.tasksArray[edfTaskNumber].period = period;
 800096a:	4a0c      	ldr	r2, [pc, #48]	; (800099c <createEDFTask+0xd4>)
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	212c      	movs	r1, #44	; 0x2c
 8000970:	fb01 f303 	mul.w	r3, r1, r3
 8000974:	4413      	add	r3, r2
 8000976:	330c      	adds	r3, #12
 8000978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800097a:	601a      	str	r2, [r3, #0]
//	// set task to suspend mode
//	vTaskSuspend(edfTasks.tasksArray[edfTaskNumber].taskHandle);
	// increment number of tasks
	edfTasks.numberOfEDFTasks++;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <createEDFTask+0xd4>)
 800097e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000980:	3301      	adds	r3, #1
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <createEDFTask+0xd4>)
 8000984:	65d3      	str	r3, [r2, #92]	; 0x5c
	// update last execution time
	edfTasks.lastExecutionTime = xTaskGetTickCount();
 8000986:	f004 fa4b 	bl	8004e20 <xTaskGetTickCount>
 800098a:	4602      	mov	r2, r0
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <createEDFTask+0xd4>)
 800098e:	659a      	str	r2, [r3, #88]	; 0x58
	// return pdTrue if task creation was successful, pdFalse when not
	return xReturned;
 8000990:	697b      	ldr	r3, [r7, #20]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200205e8 	.word	0x200205e8

080009a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b6:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a2f      	ldr	r2, [pc, #188]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_GPIO_Init+0xd8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_GPIO_Init+0xd8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <MX_GPIO_Init+0xd8>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_GPIO_Init+0xd8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_GPIO_Init+0xd8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <MX_GPIO_Init+0xd8>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_GPIO_Init+0xd8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f242 0120 	movw	r1, #8224	; 0x2020
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_GPIO_Init+0xdc>)
 8000a36:	f000 fe37 	bl	80016a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|LD_USER2_Pin;
 8000a3a:	f242 0320 	movw	r3, #8224	; 0x2020
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <MX_GPIO_Init+0xdc>)
 8000a54:	f000 fc7e 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_GPIO_Init+0xe0>)
 8000a6c:	f000 fc72 	bl	8001354 <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40022400 	.word	0x40022400
 8000a80:	40020000 	.word	0x40020000

08000a84 <vAssertCalled>:
	*(pulNumber) = uxRand();
	return pdTRUE;
}

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8000a92:	f005 fc69 	bl	8006368 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 8000a96:	e000      	b.n	8000a9a <vAssertCalled+0x16>
		{
			__NOP();
 8000a98:	bf00      	nop
		while( ul == 0 )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0fb      	beq.n	8000a98 <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8000aa0:	f005 fc8e 	bl	80063c0 <vPortExitCritical>
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <debugPrintln>:
	/* enable interrupts */
	vPortExitCritical();
}

/* print string over usart1 with \r\n */
void debugPrintln(char _out[]){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	/* disable interrupts */
	vPortEnterCritical();
 8000ab4:	f005 fc58 	bl	8006368 <vPortEnterCritical>
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 10);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fbc1 	bl	8000240 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <debugPrintln+0x40>)
 8000ac8:	f002 fa92 	bl	8002ff0 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8000acc:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000ad0:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *) newline, 2, 10);
 8000ad2:	f107 010c 	add.w	r1, r7, #12
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	2202      	movs	r2, #2
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <debugPrintln+0x40>)
 8000adc:	f002 fa88 	bl	8002ff0 <HAL_UART_Transmit>
	/* enable interrupts */
	vPortExitCritical();
 8000ae0:	f005 fc6e 	bl	80063c0 <vPortExitCritical>
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2002069c 	.word	0x2002069c

08000af0 <vApplicationMallocFailedHook>:
    }
}


void vApplicationMallocFailedHook(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
    Called if a call to pvPortMalloc() fails because there is insufficient
    free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    internally by FreeRTOS API functions that create tasks, queues, software
    timers, and semaphores.  The size of the FreeRTOS heap is set by the
    configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	debugPrintln("Malloc Failed Hook called!!!");
 8000af4:	4801      	ldr	r0, [pc, #4]	; (8000afc <vApplicationMallocFailedHook+0xc>)
 8000af6:	f7ff ffd9 	bl	8000aac <debugPrintln>
    for( ;; );
 8000afa:	e7fe      	b.n	8000afa <vApplicationMallocFailedHook+0xa>
 8000afc:	08008808 	.word	0x08008808

08000b00 <vApplicationStackOverflowHook>:
}


void vApplicationStackOverflowHook( TaskHandle_t xTask, char * pcTaskName )
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
    inspected in the debugger if the task name passed into this function is
    corrupt. */
    for( ;; )
    {
		/* Toggle LED for visualization */
		HAL_GPIO_TogglePin(LD_USER2_GPIO_Port, LD_USER2_Pin);
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	4801      	ldr	r0, [pc, #4]	; (8000b14 <vApplicationStackOverflowHook+0x14>)
 8000b0e:	f000 fde4 	bl	80016da <HAL_GPIO_TogglePin>
 8000b12:	e7fa      	b.n	8000b0a <vApplicationStackOverflowHook+0xa>
 8000b14:	40022400 	.word	0x40022400

08000b18 <vApplicationIdleHook>:
    }
}

void vApplicationIdleHook(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
    for( ;; );
 8000b1c:	e7fe      	b.n	8000b1c <vApplicationIdleHook+0x4>
	...

08000b20 <task1>:
    }
}

// test task 1
void task1( void* pvParameters )
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    for( ;; )
    {
		debugPrintln("Task 1");
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <task1+0x1c>)
 8000b2a:	f7ff ffbf 	bl	8000aac <debugPrintln>
		vTaskDelay(500 / portTICK_PERIOD_MS);
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f003 fe65 	bl	8004800 <vTaskDelay>
		rescheduleEDF();
 8000b36:	f7ff fdeb 	bl	8000710 <rescheduleEDF>
    {
 8000b3a:	e7f5      	b.n	8000b28 <task1+0x8>
 8000b3c:	08008834 	.word	0x08008834

08000b40 <task2>:
    }
}

// test task 2
void task2( void* pvParameters )
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    for( ;; )
    {
		debugPrintln("Task 2");
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <task2+0x1c>)
 8000b4a:	f7ff ffaf 	bl	8000aac <debugPrintln>
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 8000b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b52:	f003 fe55 	bl	8004800 <vTaskDelay>
		rescheduleEDF();
 8000b56:	f7ff fddb 	bl	8000710 <rescheduleEDF>
    {
 8000b5a:	e7f5      	b.n	8000b48 <task2+0x8>
 8000b5c:	0800883c 	.word	0x0800883c

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fae6 	bl	8001136 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f867 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f7ff ff17 	bl	80009a0 <MX_GPIO_Init>
  MX_RNG_Init();
 8000b72:	f000 f90d 	bl	8000d90 <MX_RNG_Init>
  MX_USART1_UART_Init();
 8000b76:	f000 fa41 	bl	8000ffc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  #if DEBUG_MODE
  	  debugPrintln("Main Hardware init finished");
 8000b7a:	4825      	ldr	r0, [pc, #148]	; (8000c10 <main+0xb0>)
 8000b7c:	f7ff ff96 	bl	8000aac <debugPrintln>
  #endif
  /* create queue for sending data between receiving UDP task and fft task */
  receivedQueue= xQueueCreate( 1, (sizeof( float32_t * ) * TOTAL_SAMPLE_SIZE));
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b86:	2001      	movs	r0, #1
 8000b88:	f003 f824 	bl	8003bd4 <xQueueGenericCreate>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <main+0xb4>)
 8000b90:	601a      	str	r2, [r3, #0]
  /* create queue for sending data between fft task and sending UDP task */
  sendQueue= xQueueCreate( 1, (sizeof( float32_t * ) * FFT_SIZE) );
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f003 f81b 	bl	8003bd4 <xQueueGenericCreate>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <main+0xb8>)
 8000ba2:	601a      	str	r2, [r3, #0]
  /* check if queue pointers are NULL */
  if ( ( receivedQueue == NULL ) || ( sendQueue == NULL) )
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <main+0xb4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <main+0x54>
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <main+0xb8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d108      	bne.n	8000bc6 <main+0x66>
  {
	  #if DEBUG_MODE == 1
		  debugPrintln( "--------------------------------");
 8000bb4:	4819      	ldr	r0, [pc, #100]	; (8000c1c <main+0xbc>)
 8000bb6:	f7ff ff79 	bl	8000aac <debugPrintln>
		  debugPrintln( " ONE QUEUE IS NULL !!!! ");
 8000bba:	4819      	ldr	r0, [pc, #100]	; (8000c20 <main+0xc0>)
 8000bbc:	f7ff ff76 	bl	8000aac <debugPrintln>
		  debugPrintln( "--------------------------------");
 8000bc0:	4816      	ldr	r0, [pc, #88]	; (8000c1c <main+0xbc>)
 8000bc2:	f7ff ff73 	bl	8000aac <debugPrintln>
	  #endif
  }
  /* init Freertos + TCP module */
  #if DEBUG_MODE == 1
  debugPrintln("IP Init");
 8000bc6:	4817      	ldr	r0, [pc, #92]	; (8000c24 <main+0xc4>)
 8000bc8:	f7ff ff70 	bl	8000aac <debugPrintln>
//  FreeRTOS_IPInit( ucIPAddress,
//                   ucNetMask,
//                   ucGatewayAddress,
//                   ucDNSServerAddress,
//                   ucMACAddress );
  createEDFTask(task1, "task1", (unsigned short ) 300, NULL, 5, 30, 20);
 8000bcc:	2314      	movs	r3, #20
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	231e      	movs	r3, #30
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bde:	4912      	ldr	r1, [pc, #72]	; (8000c28 <main+0xc8>)
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <main+0xcc>)
 8000be2:	f7ff fe71 	bl	80008c8 <createEDFTask>
  createEDFTask(task2, "task2", (unsigned short ) 300, NULL, 10, 50, 40);
 8000be6:	2328      	movs	r3, #40	; 0x28
 8000be8:	9302      	str	r3, [sp, #8]
 8000bea:	2332      	movs	r3, #50	; 0x32
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	230a      	movs	r3, #10
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bf8:	490d      	ldr	r1, [pc, #52]	; (8000c30 <main+0xd0>)
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <main+0xd4>)
 8000bfc:	f7ff fe64 	bl	80008c8 <createEDFTask>
//  createEDFTask(printTick, "printTick", (unsigned short ) 300, NULL, 5, 50, 40);
  initEDFTasksStruct();
 8000c00:	f7ff fe22 	bl	8000848 <initEDFTasksStruct>
  /* start the freertos scheduler */
  #if DEBUG_MODE
  	  debugPrintln("Start Scheduler");
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <main+0xd8>)
 8000c06:	f7ff ff51 	bl	8000aac <debugPrintln>
  #endif
//  xTaskCreate( printTick, "printTick", ( unsigned short ) 500 , NULL, 5, tickTestHandle );
  vTaskStartScheduler();
 8000c0a:	f004 f80b 	bl	8004c24 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <main+0xae>
 8000c10:	08008844 	.word	0x08008844
 8000c14:	20000200 	.word	0x20000200
 8000c18:	20000204 	.word	0x20000204
 8000c1c:	08008860 	.word	0x08008860
 8000c20:	08008884 	.word	0x08008884
 8000c24:	080088a0 	.word	0x080088a0
 8000c28:	080088a8 	.word	0x080088a8
 8000c2c:	08000b21 	.word	0x08000b21
 8000c30:	080088b0 	.word	0x080088b0
 8000c34:	08000b41 	.word	0x08000b41
 8000c38:	080088b8 	.word	0x080088b8

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0b8      	sub	sp, #224	; 0xe0
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c46:	2234      	movs	r2, #52	; 0x34
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f005 fd4e 	bl	80066ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	2290      	movs	r2, #144	; 0x90
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f005 fd3f 	bl	80066ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	; (8000d58 <SystemClock_Config+0x11c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a39      	ldr	r2, [pc, #228]	; (8000d58 <SystemClock_Config+0x11c>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <SystemClock_Config+0x11c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <SystemClock_Config+0x120>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a34      	ldr	r2, [pc, #208]	; (8000d5c <SystemClock_Config+0x120>)
 8000c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <SystemClock_Config+0x120>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cba:	2319      	movs	r3, #25
 8000cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000cc0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cce:	2309      	movs	r3, #9
 8000cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fd69 	bl	80017b0 <HAL_RCC_OscConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ce4:	f000 f850 	bl	8000d88 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ce8:	f000 fd12 	bl	8001710 <HAL_PWREx_EnableOverDrive>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000cf2:	f000 f849 	bl	8000d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d1c:	2107      	movs	r1, #7
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fff4 	bl	8001d0c <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000d2a:	f000 f82d 	bl	8000d88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <SystemClock_Config+0x124>)
 8000d30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d32:	2300      	movs	r3, #0
 8000d34:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 f9e7 	bl	8002114 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000d4c:	f000 f81c 	bl	8000d88 <Error_Handler>
  }
}
 8000d50:	bf00      	nop
 8000d52:	37e0      	adds	r7, #224	; 0xe0
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40007000 	.word	0x40007000
 8000d60:	00200040 	.word	0x00200040

08000d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d76:	f000 f9eb 	bl	8001150 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40001000 	.word	0x40001000

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <Error_Handler+0x6>

08000d90 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_RNG_Init+0x20>)
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <MX_RNG_Init+0x24>)
 8000d98:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_RNG_Init+0x20>)
 8000d9c:	f001 fde0 	bl	8002960 <HAL_RNG_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000da6:	f7ff ffef 	bl	8000d88 <Error_Handler>
  }

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2002064c 	.word	0x2002064c
 8000db4:	50060800 	.word	0x50060800

08000db8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_RNG_MspInit+0x44>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d113      	bne.n	8000df2 <HAL_RNG_MspInit+0x3a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_RNG_MspInit+0x48>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <HAL_RNG_MspInit+0x48>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd4:	6353      	str	r3, [r2, #52]	; 0x34
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_RNG_MspInit+0x48>)
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2050      	movs	r0, #80	; 0x50
 8000de8:	f000 fa8a 	bl	8001300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000dec:	2050      	movs	r0, #80	; 0x50
 8000dee:	f000 faa3 	bl	8001338 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	50060800 	.word	0x50060800
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_MspInit+0x44>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_MspInit+0x44>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_MspInit+0x44>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x44>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x44>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x44>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	2036      	movs	r0, #54	; 0x36
 8000e62:	f000 fa4d 	bl	8001300 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e66:	2036      	movs	r0, #54	; 0x36
 8000e68:	f000 fa66 	bl	8001338 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <HAL_InitTick+0xa0>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <HAL_InitTick+0xa0>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6413      	str	r3, [r2, #64]	; 0x40
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <HAL_InitTick+0xa0>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e84:	f107 0210 	add.w	r2, r7, #16
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 f90e 	bl	80020b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e94:	f001 f8e4 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <HAL_InitTick+0xa4>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	0c9b      	lsrs	r3, r3, #18
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <HAL_InitTick+0xac>)
 8000eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000ece:	f001 fddc 	bl	8002a8a <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d104      	bne.n	8000ee2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <HAL_InitTick+0xa8>)
 8000eda:	f001 fe0b 	bl	8002af4 <HAL_TIM_Base_Start_IT>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3730      	adds	r7, #48	; 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	2002065c 	.word	0x2002065c
 8000ef8:	40001000 	.word	0x40001000

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>
	...

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LD_USER1_GPIO_Port, LD_USER1_Pin, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0e:	4802      	ldr	r0, [pc, #8]	; (8000f18 <HardFault_Handler+0x14>)
 8000f10:	f000 fbca 	bl	80016a8 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <HardFault_Handler+0x10>
 8000f16:	bf00      	nop
 8000f18:	40022400 	.word	0x40022400

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <TIM6_DAC_IRQHandler+0x10>)
 8000f42:	f001 fe01 	bl	8002b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2002065c 	.word	0x2002065c

08000f50 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <RNG_IRQHandler+0x10>)
 8000f56:	f001 fd2d 	bl	80029b4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2002064c 	.word	0x2002064c

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f005 fb5c 	bl	8006650 <__errno>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	230c      	movs	r3, #12
 8000f9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20080000 	.word	0x20080000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	20000208 	.word	0x20000208
 8000fcc:	20020768 	.word	0x20020768

08000fd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SystemInit+0x28>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <SystemInit+0x28>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SystemInit+0x28>)
 8000fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fea:	609a      	str	r2, [r3, #8]
#endif
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_USART1_UART_Init+0x58>)
 8001002:	4a15      	ldr	r2, [pc, #84]	; (8001058 <MX_USART1_UART_Init+0x5c>)
 8001004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_USART1_UART_Init+0x58>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART1_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_USART1_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART1_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART1_UART_Init+0x58>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART1_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART1_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART1_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART1_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART1_UART_Init+0x58>)
 8001040:	f001 ff88 	bl	8002f54 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800104a:	f7ff fe9d 	bl	8000d88 <Error_Handler>
  }

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2002069c 	.word	0x2002069c
 8001058:	40011000 	.word	0x40011000

0800105c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0x7c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d128      	bne.n	80010d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_UART_MspInit+0x80>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <HAL_UART_MspInit+0x80>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_UART_MspInit+0x80>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_UART_MspInit+0x80>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_UART_MspInit+0x80>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_UART_MspInit+0x80>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80010ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c0:	2307      	movs	r3, #7
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_UART_MspInit+0x84>)
 80010cc:	f000 f942 	bl	8001354 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40011000 	.word	0x40011000
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ea:	e003      	b.n	80010f4 <LoopCopyDataInit>

080010ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010f2:	3104      	adds	r1, #4

080010f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010fc:	d3f6      	bcc.n	80010ec <CopyDataInit>
  ldr  r2, =_sbss
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001100:	e002      	b.n	8001108 <LoopFillZerobss>

08001102 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001102:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001104:	f842 3b04 	str.w	r3, [r2], #4

08001108 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800110a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800110c:	d3f9      	bcc.n	8001102 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800110e:	f7ff ff5f 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001112:	f005 faa3 	bl	800665c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001116:	f7ff fd23 	bl	8000b60 <main>
  bx  lr    
 800111a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800111c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001120:	08008cb0 	.word	0x08008cb0
  ldr  r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001128:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800112c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001130:	20020764 	.word	0x20020764

08001134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC_IRQHandler>

08001136 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113a:	2003      	movs	r0, #3
 800113c:	f000 f8d5 	bl	80012ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fe83 	bl	8000e4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001146:	f7ff fe5d 	bl	8000e04 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	2002071c 	.word	0x2002071c

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2002071c 	.word	0x2002071c

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	05fa0000 	.word	0x05fa0000

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff4c 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001312:	f7ff ff61 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001316:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f7ff ffb1 	bl	8001284 <NVIC_EncodePriority>
 8001322:	4602      	mov	r2, r0
 8001324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff80 	bl	8001230 <__NVIC_SetPriority>
}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff54 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e175      	b.n	8001660 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8164 	bne.w	800165a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d00b      	beq.n	80013b2 <HAL_GPIO_Init+0x5e>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a6:	2b11      	cmp	r3, #17
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d130      	bne.n	8001414 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x100>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b12      	cmp	r3, #18
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80be 	beq.w	800165a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b65      	ldr	r3, [pc, #404]	; (8001674 <HAL_GPIO_Init+0x320>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a64      	ldr	r2, [pc, #400]	; (8001674 <HAL_GPIO_Init+0x320>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b62      	ldr	r3, [pc, #392]	; (8001674 <HAL_GPIO_Init+0x320>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014f6:	4a60      	ldr	r2, [pc, #384]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a57      	ldr	r2, [pc, #348]	; (800167c <HAL_GPIO_Init+0x328>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d037      	beq.n	8001592 <HAL_GPIO_Init+0x23e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a56      	ldr	r2, [pc, #344]	; (8001680 <HAL_GPIO_Init+0x32c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d031      	beq.n	800158e <HAL_GPIO_Init+0x23a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a55      	ldr	r2, [pc, #340]	; (8001684 <HAL_GPIO_Init+0x330>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02b      	beq.n	800158a <HAL_GPIO_Init+0x236>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_GPIO_Init+0x334>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x232>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a53      	ldr	r2, [pc, #332]	; (800168c <HAL_GPIO_Init+0x338>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x22e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_GPIO_Init+0x33c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x22a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a51      	ldr	r2, [pc, #324]	; (8001694 <HAL_GPIO_Init+0x340>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x226>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_GPIO_Init+0x344>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x222>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_GPIO_Init+0x348>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x21e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_GPIO_Init+0x34c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x21a>
 800156a:	2309      	movs	r3, #9
 800156c:	e012      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800156e:	230a      	movs	r3, #10
 8001570:	e010      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001572:	2308      	movs	r3, #8
 8001574:	e00e      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001576:	2307      	movs	r3, #7
 8001578:	e00c      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800157a:	2306      	movs	r3, #6
 800157c:	e00a      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800157e:	2305      	movs	r3, #5
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001582:	2304      	movs	r3, #4
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001592:	2300      	movs	r3, #0
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015a4:	4934      	ldr	r1, [pc, #208]	; (8001678 <HAL_GPIO_Init+0x324>)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b2:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <HAL_GPIO_Init+0x350>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d6:	4a33      	ldr	r2, [pc, #204]	; (80016a4 <HAL_GPIO_Init+0x350>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <HAL_GPIO_Init+0x350>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001600:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <HAL_GPIO_Init+0x350>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_GPIO_Init+0x350>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <HAL_GPIO_Init+0x350>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_GPIO_Init+0x350>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001654:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <HAL_GPIO_Init+0x350>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b0f      	cmp	r3, #15
 8001664:	f67f ae86 	bls.w	8001374 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001668:	bf00      	nop
 800166a:	3724      	adds	r7, #36	; 0x24
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40023800 	.word	0x40023800
 8001678:	40013800 	.word	0x40013800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40021000 	.word	0x40021000
 8001690:	40021400 	.word	0x40021400
 8001694:	40021800 	.word	0x40021800
 8001698:	40021c00 	.word	0x40021c00
 800169c:	40022000 	.word	0x40022000
 80016a0:	40022400 	.word	0x40022400
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
 80016b4:	4613      	mov	r3, r2
 80016b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016c4:	e003      	b.n	80016ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	041a      	lsls	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	619a      	str	r2, [r3, #24]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016fc:	887a      	ldrh	r2, [r7, #2]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800173e:	f7ff fd1b 	bl	8001178 <HAL_GetTick>
 8001742:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001744:	e009      	b.n	800175a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001746:	f7ff fd17 	bl	8001178 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001754:	d901      	bls.n	800175a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e022      	b.n	80017a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001766:	d1ee      	bne.n	8001746 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800176e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001772:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001774:	f7ff fd00 	bl	8001178 <HAL_GetTick>
 8001778:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800177a:	e009      	b.n	8001790 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800177c:	f7ff fcfc 	bl	8001178 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800178a:	d901      	bls.n	8001790 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e007      	b.n	80017a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800179c:	d1ee      	bne.n	800177c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e29b      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8087 	beq.w	80018e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d4:	4b96      	ldr	r3, [pc, #600]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d00c      	beq.n	80017fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e0:	4b93      	ldr	r3, [pc, #588]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d112      	bne.n	8001812 <HAL_RCC_OscConfig+0x62>
 80017ec:	4b90      	ldr	r3, [pc, #576]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017f8:	d10b      	bne.n	8001812 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fa:	4b8d      	ldr	r3, [pc, #564]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d06c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x130>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d168      	bne.n	80018e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e275      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x7a>
 800181c:	4b84      	ldr	r3, [pc, #528]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a83      	ldr	r2, [pc, #524]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e02e      	b.n	8001888 <HAL_RCC_OscConfig+0xd8>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x9c>
 8001832:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7e      	ldr	r2, [pc, #504]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7b      	ldr	r2, [pc, #492]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e01d      	b.n	8001888 <HAL_RCC_OscConfig+0xd8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0xc0>
 8001856:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a75      	ldr	r2, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b73      	ldr	r3, [pc, #460]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a72      	ldr	r2, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0xd8>
 8001870:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6b      	ldr	r2, [pc, #428]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fc72 	bl	8001178 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fc6e 	bl	8001178 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e229      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0xe8>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc5e 	bl	8001178 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc5a 	bl	8001178 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e215      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x110>
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d069      	beq.n	80019c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ee:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fa:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b08      	cmp	r3, #8
 8001904:	d11c      	bne.n	8001940 <HAL_RCC_OscConfig+0x190>
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x17a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1e9      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	493d      	ldr	r1, [pc, #244]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	e040      	b.n	80019c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d023      	beq.n	8001990 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001948:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fc10 	bl	8001178 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195c:	f7ff fc0c 	bl	8001178 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1c7      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4929      	ldr	r1, [pc, #164]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
 800198e:	e018      	b.n	80019c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fbec 	bl	8001178 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff fbe8 	bl	8001178 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1a3      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d038      	beq.n	8001a40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d019      	beq.n	8001a0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80019d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff fbc9 	bl	8001178 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fbc5 	bl	8001178 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e180      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80019fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x23a>
 8001a08:	e01a      	b.n	8001a40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff fbaf 	bl	8001178 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fbab 	bl	8001178 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d903      	bls.n	8001a34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e166      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
 8001a30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	4b92      	ldr	r3, [pc, #584]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a4 	beq.w	8001b96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4e:	4b8c      	ldr	r3, [pc, #560]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10d      	bne.n	8001a76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b89      	ldr	r3, [pc, #548]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a88      	ldr	r2, [pc, #544]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b86      	ldr	r3, [pc, #536]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a76:	4b83      	ldr	r3, [pc, #524]	; (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d118      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a82:	4b80      	ldr	r3, [pc, #512]	; (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7f      	ldr	r2, [pc, #508]	; (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb73 	bl	8001178 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7ff fb6f 	bl	8001178 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	; 0x64
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e12a      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa8:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x31a>
 8001abc:	4b70      	ldr	r3, [pc, #448]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	4a6f      	ldr	r2, [pc, #444]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac8:	e02d      	b.n	8001b26 <HAL_RCC_OscConfig+0x376>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x33c>
 8001ad2:	4b6b      	ldr	r3, [pc, #428]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a6a      	ldr	r2, [pc, #424]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a67      	ldr	r2, [pc, #412]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	e01c      	b.n	8001b26 <HAL_RCC_OscConfig+0x376>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	d10c      	bne.n	8001b0e <HAL_RCC_OscConfig+0x35e>
 8001af4:	4b62      	ldr	r3, [pc, #392]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a61      	ldr	r2, [pc, #388]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
 8001b00:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b04:	4a5e      	ldr	r2, [pc, #376]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0c:	e00b      	b.n	8001b26 <HAL_RCC_OscConfig+0x376>
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	4a5b      	ldr	r2, [pc, #364]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1a:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d015      	beq.n	8001b5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fb23 	bl	8001178 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff fb1f 	bl	8001178 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0d8      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0ee      	beq.n	8001b36 <HAL_RCC_OscConfig+0x386>
 8001b58:	e014      	b.n	8001b84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fb0d 	bl	8001178 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff fb09 	bl	8001178 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0c2      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ee      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d105      	bne.n	8001b96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a3c      	ldr	r2, [pc, #240]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80ae 	beq.w	8001cfc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d06d      	beq.n	8001c88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d14b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fada 	bl	8001178 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff fad6 	bl	8001178 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e091      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	085b      	lsrs	r3, r3, #1
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	061b      	lsls	r3, r3, #24
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	071b      	lsls	r3, r3, #28
 8001c12:	491b      	ldr	r1, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff faa8 	bl	8001178 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff faa4 	bl	8001178 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e05f      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x47c>
 8001c4a:	e057      	b.n	8001cfc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fa8e 	bl	8001178 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff fa8a 	bl	8001178 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e045      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4b0>
 8001c7e:	e03d      	b.n	8001cfc <HAL_RCC_OscConfig+0x54c>
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_RCC_OscConfig+0x558>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d030      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d129      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d122      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d119      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0d0      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d910      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 020f 	bic.w	r2, r3, #15
 8001d3a:	4965      	ldr	r1, [pc, #404]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b8      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	494d      	ldr	r1, [pc, #308]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d040      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d115      	bne.n	8001dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e073      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06b      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4936      	ldr	r1, [pc, #216]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e00:	f7ff f9ba 	bl	8001178 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff f9b6 	bl	8001178 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e053      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d210      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 020f 	bic.w	r2, r3, #15
 8001e46:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e032      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e9e:	f000 f821 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1d0>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1d4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe ffc4 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023c00 	.word	0x40023c00
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	080089cc 	.word	0x080089cc
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001efa:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_GetSysClockFreq+0x158>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d007      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0x32>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d008      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x38>
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 808d 	bne.w	800202a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001f12:	60bb      	str	r3, [r7, #8]
      break;
 8001f14:	e08c      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f16:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f18:	60bb      	str	r3, [r7, #8]
      break;
 8001f1a:	e089      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f1c:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f24:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f26:	4b45      	ldr	r3, [pc, #276]	; (800203c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d023      	beq.n	8001f7a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f32:	4b42      	ldr	r3, [pc, #264]	; (800203c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	099b      	lsrs	r3, r3, #6
 8001f38:	f04f 0400 	mov.w	r4, #0
 8001f3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	ea03 0501 	and.w	r5, r3, r1
 8001f48:	ea04 0602 	and.w	r6, r4, r2
 8001f4c:	4a3d      	ldr	r2, [pc, #244]	; (8002044 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f4e:	fb02 f106 	mul.w	r1, r2, r6
 8001f52:	2200      	movs	r2, #0
 8001f54:	fb02 f205 	mul.w	r2, r2, r5
 8001f58:	440a      	add	r2, r1
 8001f5a:	493a      	ldr	r1, [pc, #232]	; (8002044 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f5c:	fba5 0101 	umull	r0, r1, r5, r1
 8001f60:	1853      	adds	r3, r2, r1
 8001f62:	4619      	mov	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f04f 0400 	mov.w	r4, #0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4623      	mov	r3, r4
 8001f6e:	f7fe f9bf 	bl	80002f0 <__aeabi_uldivmod>
 8001f72:	4603      	mov	r3, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e049      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	f04f 0400 	mov.w	r4, #0
 8001f84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	ea03 0501 	and.w	r5, r3, r1
 8001f90:	ea04 0602 	and.w	r6, r4, r2
 8001f94:	4629      	mov	r1, r5
 8001f96:	4632      	mov	r2, r6
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	f04f 0400 	mov.w	r4, #0
 8001fa0:	0154      	lsls	r4, r2, #5
 8001fa2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fa6:	014b      	lsls	r3, r1, #5
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4622      	mov	r2, r4
 8001fac:	1b49      	subs	r1, r1, r5
 8001fae:	eb62 0206 	sbc.w	r2, r2, r6
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	f04f 0400 	mov.w	r4, #0
 8001fba:	0194      	lsls	r4, r2, #6
 8001fbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fc0:	018b      	lsls	r3, r1, #6
 8001fc2:	1a5b      	subs	r3, r3, r1
 8001fc4:	eb64 0402 	sbc.w	r4, r4, r2
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	00e2      	lsls	r2, r4, #3
 8001fd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fd6:	00d9      	lsls	r1, r3, #3
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4614      	mov	r4, r2
 8001fdc:	195b      	adds	r3, r3, r5
 8001fde:	eb44 0406 	adc.w	r4, r4, r6
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	02a2      	lsls	r2, r4, #10
 8001fec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ff0:	0299      	lsls	r1, r3, #10
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f04f 0400 	mov.w	r4, #0
 8002000:	461a      	mov	r2, r3
 8002002:	4623      	mov	r3, r4
 8002004:	f7fe f974 	bl	80002f0 <__aeabi_uldivmod>
 8002008:	4603      	mov	r3, r0
 800200a:	460c      	mov	r4, r1
 800200c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_GetSysClockFreq+0x158>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	3301      	adds	r3, #1
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	60bb      	str	r3, [r7, #8]
      break;
 8002028:	e002      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetSysClockFreq+0x15c>)
 800202c:	60bb      	str	r3, [r7, #8]
      break;
 800202e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002030:	68bb      	ldr	r3, [r7, #8]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	00f42400 	.word	0x00f42400
 8002044:	017d7840 	.word	0x017d7840

08002048 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_GetHCLKFreq+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002064:	f7ff fff0 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002068:	4601      	mov	r1, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0a9b      	lsrs	r3, r3, #10
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	080089dc 	.word	0x080089dc

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800208c:	f7ff ffdc 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002090:	4601      	mov	r1, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0b5b      	lsrs	r3, r3, #13
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4a03      	ldr	r2, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40023800 	.word	0x40023800
 80020ac:	080089dc 	.word	0x080089dc

080020b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	220f      	movs	r2, #15
 80020be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCC_GetClockConfig+0x5c>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_RCC_GetClockConfig+0x5c>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_RCC_GetClockConfig+0x5c>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_GetClockConfig+0x5c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	08db      	lsrs	r3, r3, #3
 80020ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_RCC_GetClockConfig+0x60>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 020f 	and.w	r2, r3, #15
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	601a      	str	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d012      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800213c:	4b69      	ldr	r3, [pc, #420]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a68      	ldr	r2, [pc, #416]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002142:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002146:	6093      	str	r3, [r2, #8]
 8002148:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002150:	4964      	ldr	r1, [pc, #400]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d017      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800216e:	4b5d      	ldr	r3, [pc, #372]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002174:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	4959      	ldr	r1, [pc, #356]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800218c:	d101      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d017      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021aa:	4b4e      	ldr	r3, [pc, #312]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	494a      	ldr	r1, [pc, #296]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c8:	d101      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 808b 	beq.w	800230e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	4a39      	ldr	r2, [pc, #228]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002202:	6413      	str	r3, [r2, #64]	; 0x40
 8002204:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a34      	ldr	r2, [pc, #208]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe ffac 	bl	8001178 <HAL_GetTick>
 8002220:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002224:	f7fe ffa8 	bl	8001178 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e38d      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d035      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	429a      	cmp	r2, r3
 800225e:	d02e      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002268:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a1a      	ldr	r2, [pc, #104]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002280:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002282:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d114      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe ff70 	bl	8001178 <HAL_GetTick>
 8002298:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	e00a      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7fe ff6c 	bl	8001178 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e34f      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0ee      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022ca:	d111      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022da:	400b      	ands	r3, r1
 80022dc:	4901      	ldr	r1, [pc, #4]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
 80022e2:	e00b      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40007000 	.word	0x40007000
 80022ec:	0ffffcff 	.word	0x0ffffcff
 80022f0:	4bb3      	ldr	r3, [pc, #716]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4ab2      	ldr	r2, [pc, #712]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022fa:	6093      	str	r3, [r2, #8]
 80022fc:	4bb0      	ldr	r3, [pc, #704]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	49ad      	ldr	r1, [pc, #692]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800230a:	4313      	orrs	r3, r2
 800230c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	d010      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800231a:	4ba9      	ldr	r3, [pc, #676]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800231c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002320:	4aa7      	ldr	r2, [pc, #668]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002326:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800232a:	4ba5      	ldr	r3, [pc, #660]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800232c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	49a2      	ldr	r1, [pc, #648]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002348:	4b9d      	ldr	r3, [pc, #628]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002356:	499a      	ldr	r1, [pc, #616]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800236a:	4b95      	ldr	r3, [pc, #596]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002378:	4991      	ldr	r1, [pc, #580]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800238c:	4b8c      	ldr	r3, [pc, #560]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239a:	4989      	ldr	r1, [pc, #548]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ae:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4980      	ldr	r1, [pc, #512]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d0:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	4978      	ldr	r1, [pc, #480]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f023 020c 	bic.w	r2, r3, #12
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002400:	496f      	ldr	r1, [pc, #444]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	4967      	ldr	r1, [pc, #412]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002436:	4b62      	ldr	r3, [pc, #392]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002444:	495e      	ldr	r1, [pc, #376]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002458:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	4956      	ldr	r1, [pc, #344]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800247a:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	494d      	ldr	r1, [pc, #308]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800249c:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	4945      	ldr	r1, [pc, #276]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024be:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024cc:	493c      	ldr	r1, [pc, #240]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024e0:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ee:	4934      	ldr	r1, [pc, #208]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d011      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002502:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002510:	492b      	ldr	r1, [pc, #172]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800251c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002520:	d101      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002542:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	491b      	ldr	r1, [pc, #108]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00b      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002574:	4912      	ldr	r1, [pc, #72]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002598:	4909      	ldr	r1, [pc, #36]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00f      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	e002      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	4985      	ldr	r1, [pc, #532]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025d8:	4b80      	ldr	r3, [pc, #512]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025e8:	497c      	ldr	r1, [pc, #496]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d005      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025fe:	f040 80d6 	bne.w	80027ae <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002608:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800260c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260e:	f7fe fdb3 	bl	8001178 <HAL_GetTick>
 8002612:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002616:	f7fe fdaf 	bl	8001178 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	; 0x64
 8002622:	d901      	bls.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e194      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002628:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d021      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	2b00      	cmp	r3, #0
 8002646:	d11d      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002648:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800264a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265c:	0e1b      	lsrs	r3, r3, #24
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	019a      	lsls	r2, r3, #6
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	061b      	lsls	r3, r3, #24
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	071b      	lsls	r3, r3, #28
 800267c:	4957      	ldr	r1, [pc, #348]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02e      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ae:	d129      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026b0:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c4:	0f1b      	lsrs	r3, r3, #28
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	019a      	lsls	r2, r3, #6
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	071b      	lsls	r3, r3, #28
 80026e4:	493d      	ldr	r1, [pc, #244]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026ec:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f2:	f023 021f 	bic.w	r2, r3, #31
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	3b01      	subs	r3, #1
 80026fc:	4937      	ldr	r1, [pc, #220]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002716:	0e1b      	lsrs	r3, r3, #24
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800271e:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002724:	0f1b      	lsrs	r3, r3, #28
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	019a      	lsls	r2, r3, #6
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	431a      	orrs	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	071b      	lsls	r3, r3, #28
 8002744:	4925      	ldr	r1, [pc, #148]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d011      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	019a      	lsls	r2, r3, #6
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	071b      	lsls	r3, r3, #28
 8002774:	4919      	ldr	r1, [pc, #100]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a16      	ldr	r2, [pc, #88]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002788:	f7fe fcf6 	bl	8001178 <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002790:	f7fe fcf2 	bl	8001178 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0d7      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 80cd 	bne.w	8002950 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c2:	f7fe fcd9 	bl	8001178 <HAL_GetTick>
 80027c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027ca:	f7fe fcd5 	bl	8001178 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d903      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0ba      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80027dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027e0:	4b5e      	ldr	r3, [pc, #376]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ec:	d0ed      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800280a:	2b00      	cmp	r3, #0
 800280c:	d02e      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d12a      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002816:	4b51      	ldr	r3, [pc, #324]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002824:	4b4d      	ldr	r3, [pc, #308]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	0f1b      	lsrs	r3, r3, #28
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	019a      	lsls	r2, r3, #6
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	061b      	lsls	r3, r3, #24
 8002844:	431a      	orrs	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	071b      	lsls	r3, r3, #28
 800284a:	4944      	ldr	r1, [pc, #272]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002852:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002858:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	493d      	ldr	r1, [pc, #244]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d022      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002880:	d11d      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002882:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	0e1b      	lsrs	r3, r3, #24
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002890:	4b32      	ldr	r3, [pc, #200]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	0f1b      	lsrs	r3, r3, #28
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	019a      	lsls	r2, r3, #6
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	431a      	orrs	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	071b      	lsls	r3, r3, #28
 80028b6:	4929      	ldr	r1, [pc, #164]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d028      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	0e1b      	lsrs	r3, r3, #24
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	019a      	lsls	r2, r3, #6
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	431a      	orrs	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	071b      	lsls	r3, r3, #28
 80028fe:	4917      	ldr	r1, [pc, #92]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800290c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	4911      	ldr	r1, [pc, #68]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0e      	ldr	r2, [pc, #56]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002928:	f7fe fc26 	bl	8001178 <HAL_GetTick>
 800292c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002930:	f7fe fc22 	bl	8001178 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e007      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800294a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800294e:	d1ef      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800

08002960 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e01c      	b.n	80029ac <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	795b      	ldrb	r3, [r3, #5]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fa18 	bl	8000db8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0204 	orr.w	r2, r2, #4
 800299c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d105      	bne.n	80029da <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2210      	movs	r2, #16
 80029d2:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80029d4:	2301      	movs	r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	e00b      	b.n	80029f2 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d104      	bne.n	80029f2 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2208      	movs	r2, #8
 80029ec:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80029ee:	2301      	movs	r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d10a      	bne.n	8002a0e <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2204      	movs	r2, #4
 80029fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f839 	bl	8002a76 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8002a0c:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d11d      	bne.n	8002a58 <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0208 	bic.w	r2, r2, #8
 8002a2a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	795b      	ldrb	r3, [r3, #5]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d00b      	beq.n	8002a58 <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f804 	bl	8002a60 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e01d      	b.n	8002ad8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f815 	bl	8002ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4610      	mov	r0, r2
 8002aca:	f000 f985 	bl	8002dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_TIM_Base_Start_IT+0x50>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d00b      	beq.n	8002b36 <HAL_TIM_Base_Start_IT+0x42>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b24:	d007      	beq.n	8002b36 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	00010007 	.word	0x00010007

08002b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d122      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0202 	mvn.w	r2, #2
 8002b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f905 	bl	8002d9a <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8f7 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f908 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d122      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0204 	mvn.w	r2, #4
 8002bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f8db 	bl	8002d9a <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8cd 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f8de 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0208 	mvn.w	r2, #8
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2204      	movs	r2, #4
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8b1 	bl	8002d9a <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8a3 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8b4 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0210 	mvn.w	r2, #16
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2208      	movs	r2, #8
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f887 	bl	8002d9a <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f879 	bl	8002d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f88a 	bl	8002dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d107      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0201 	mvn.w	r2, #1
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe f84c 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	2b80      	cmp	r3, #128	; 0x80
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f91a 	bl	8002f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d06:	d10e      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	2b80      	cmp	r3, #128	; 0x80
 8002d14:	d107      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f90d 	bl	8002f40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d10e      	bne.n	8002d52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d107      	bne.n	8002d52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f838 	bl	8002dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d10e      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d107      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f06f 0220 	mvn.w	r2, #32
 8002d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f8cd 	bl	8002f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a40      	ldr	r2, [pc, #256]	; (8002eec <TIM_Base_SetConfig+0x114>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d00f      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <TIM_Base_SetConfig+0x118>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3c      	ldr	r2, [pc, #240]	; (8002ef4 <TIM_Base_SetConfig+0x11c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3b      	ldr	r2, [pc, #236]	; (8002ef8 <TIM_Base_SetConfig+0x120>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0x40>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <TIM_Base_SetConfig+0x124>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d108      	bne.n	8002e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2f      	ldr	r2, [pc, #188]	; (8002eec <TIM_Base_SetConfig+0x114>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02b      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e38:	d027      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ef0 <TIM_Base_SetConfig+0x118>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d023      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <TIM_Base_SetConfig+0x11c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01f      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <TIM_Base_SetConfig+0x120>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01b      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a29      	ldr	r2, [pc, #164]	; (8002efc <TIM_Base_SetConfig+0x124>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d017      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <TIM_Base_SetConfig+0x128>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <TIM_Base_SetConfig+0x12c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00f      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <TIM_Base_SetConfig+0x130>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00b      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <TIM_Base_SetConfig+0x134>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a24      	ldr	r2, [pc, #144]	; (8002f10 <TIM_Base_SetConfig+0x138>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d003      	beq.n	8002e8a <TIM_Base_SetConfig+0xb2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <TIM_Base_SetConfig+0x13c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d108      	bne.n	8002e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <TIM_Base_SetConfig+0x114>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_Base_SetConfig+0xf8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <TIM_Base_SetConfig+0x124>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d103      	bne.n	8002ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	615a      	str	r2, [r3, #20]
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40010400 	.word	0x40010400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40014400 	.word	0x40014400
 8002f08:	40014800 	.word	0x40014800
 8002f0c:	40001800 	.word	0x40001800
 8002f10:	40001c00 	.word	0x40001c00
 8002f14:	40002000 	.word	0x40002000

08002f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e040      	b.n	8002fe8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe f870 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2224      	movs	r2, #36	; 0x24
 8002f80:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0201 	bic.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f8be 	bl	8003114 <UART_SetConfig>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e022      	b.n	8002fe8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fb5c 	bl	8003668 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fbe3 	bl	80037ac <UART_CheckIdleState>
 8002fe6:	4603      	mov	r3, r0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003004:	2b20      	cmp	r3, #32
 8003006:	d17f      	bne.n	8003108 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_UART_Transmit+0x24>
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e078      	b.n	800310a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_UART_Transmit+0x36>
 8003022:	2302      	movs	r3, #2
 8003024:	e071      	b.n	800310a <HAL_UART_Transmit+0x11a>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2221      	movs	r2, #33	; 0x21
 8003038:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800303a:	f7fe f89d 	bl	8001178 <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003058:	d108      	bne.n	800306c <HAL_UART_Transmit+0x7c>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e003      	b.n	8003074 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800307c:	e02c      	b.n	80030d8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2200      	movs	r2, #0
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fbd4 	bl	8003836 <UART_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e038      	b.n	800310a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10b      	bne.n	80030b6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	3302      	adds	r3, #2
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e007      	b.n	80030c6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	3301      	adds	r3, #1
 80030c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1cc      	bne.n	800307e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2200      	movs	r2, #0
 80030ec:	2140      	movs	r1, #64	; 0x40
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fba1 	bl	8003836 <UART_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e005      	b.n	800310a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4bb1      	ldr	r3, [pc, #708]	; (8003408 <UART_SetConfig+0x2f4>)
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	6939      	ldr	r1, [r7, #16]
 800314c:	430b      	orrs	r3, r1
 800314e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a9f      	ldr	r2, [pc, #636]	; (800340c <UART_SetConfig+0x2f8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d121      	bne.n	80031d8 <UART_SetConfig+0xc4>
 8003194:	4b9e      	ldr	r3, [pc, #632]	; (8003410 <UART_SetConfig+0x2fc>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d816      	bhi.n	80031d0 <UART_SetConfig+0xbc>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <UART_SetConfig+0x94>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031c5 	.word	0x080031c5
 80031b0:	080031bf 	.word	0x080031bf
 80031b4:	080031cb 	.word	0x080031cb
 80031b8:	2301      	movs	r3, #1
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e151      	b.n	8003462 <UART_SetConfig+0x34e>
 80031be:	2302      	movs	r3, #2
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e14e      	b.n	8003462 <UART_SetConfig+0x34e>
 80031c4:	2304      	movs	r3, #4
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e14b      	b.n	8003462 <UART_SetConfig+0x34e>
 80031ca:	2308      	movs	r3, #8
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e148      	b.n	8003462 <UART_SetConfig+0x34e>
 80031d0:	2310      	movs	r3, #16
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	bf00      	nop
 80031d6:	e144      	b.n	8003462 <UART_SetConfig+0x34e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a8d      	ldr	r2, [pc, #564]	; (8003414 <UART_SetConfig+0x300>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d134      	bne.n	800324c <UART_SetConfig+0x138>
 80031e2:	4b8b      	ldr	r3, [pc, #556]	; (8003410 <UART_SetConfig+0x2fc>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d829      	bhi.n	8003244 <UART_SetConfig+0x130>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <UART_SetConfig+0xe4>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800322d 	.word	0x0800322d
 80031fc:	08003245 	.word	0x08003245
 8003200:	08003245 	.word	0x08003245
 8003204:	08003245 	.word	0x08003245
 8003208:	08003239 	.word	0x08003239
 800320c:	08003245 	.word	0x08003245
 8003210:	08003245 	.word	0x08003245
 8003214:	08003245 	.word	0x08003245
 8003218:	08003233 	.word	0x08003233
 800321c:	08003245 	.word	0x08003245
 8003220:	08003245 	.word	0x08003245
 8003224:	08003245 	.word	0x08003245
 8003228:	0800323f 	.word	0x0800323f
 800322c:	2300      	movs	r3, #0
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e117      	b.n	8003462 <UART_SetConfig+0x34e>
 8003232:	2302      	movs	r3, #2
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e114      	b.n	8003462 <UART_SetConfig+0x34e>
 8003238:	2304      	movs	r3, #4
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e111      	b.n	8003462 <UART_SetConfig+0x34e>
 800323e:	2308      	movs	r3, #8
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e10e      	b.n	8003462 <UART_SetConfig+0x34e>
 8003244:	2310      	movs	r3, #16
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	bf00      	nop
 800324a:	e10a      	b.n	8003462 <UART_SetConfig+0x34e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a71      	ldr	r2, [pc, #452]	; (8003418 <UART_SetConfig+0x304>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d120      	bne.n	8003298 <UART_SetConfig+0x184>
 8003256:	4b6e      	ldr	r3, [pc, #440]	; (8003410 <UART_SetConfig+0x2fc>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003260:	2b10      	cmp	r3, #16
 8003262:	d00f      	beq.n	8003284 <UART_SetConfig+0x170>
 8003264:	2b10      	cmp	r3, #16
 8003266:	d802      	bhi.n	800326e <UART_SetConfig+0x15a>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <UART_SetConfig+0x164>
 800326c:	e010      	b.n	8003290 <UART_SetConfig+0x17c>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d005      	beq.n	800327e <UART_SetConfig+0x16a>
 8003272:	2b30      	cmp	r3, #48	; 0x30
 8003274:	d009      	beq.n	800328a <UART_SetConfig+0x176>
 8003276:	e00b      	b.n	8003290 <UART_SetConfig+0x17c>
 8003278:	2300      	movs	r3, #0
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e0f1      	b.n	8003462 <UART_SetConfig+0x34e>
 800327e:	2302      	movs	r3, #2
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e0ee      	b.n	8003462 <UART_SetConfig+0x34e>
 8003284:	2304      	movs	r3, #4
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e0eb      	b.n	8003462 <UART_SetConfig+0x34e>
 800328a:	2308      	movs	r3, #8
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e0e8      	b.n	8003462 <UART_SetConfig+0x34e>
 8003290:	2310      	movs	r3, #16
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	bf00      	nop
 8003296:	e0e4      	b.n	8003462 <UART_SetConfig+0x34e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a5f      	ldr	r2, [pc, #380]	; (800341c <UART_SetConfig+0x308>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d120      	bne.n	80032e4 <UART_SetConfig+0x1d0>
 80032a2:	4b5b      	ldr	r3, [pc, #364]	; (8003410 <UART_SetConfig+0x2fc>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d00f      	beq.n	80032d0 <UART_SetConfig+0x1bc>
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	d802      	bhi.n	80032ba <UART_SetConfig+0x1a6>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <UART_SetConfig+0x1b0>
 80032b8:	e010      	b.n	80032dc <UART_SetConfig+0x1c8>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d005      	beq.n	80032ca <UART_SetConfig+0x1b6>
 80032be:	2bc0      	cmp	r3, #192	; 0xc0
 80032c0:	d009      	beq.n	80032d6 <UART_SetConfig+0x1c2>
 80032c2:	e00b      	b.n	80032dc <UART_SetConfig+0x1c8>
 80032c4:	2300      	movs	r3, #0
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e0cb      	b.n	8003462 <UART_SetConfig+0x34e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e0c8      	b.n	8003462 <UART_SetConfig+0x34e>
 80032d0:	2304      	movs	r3, #4
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e0c5      	b.n	8003462 <UART_SetConfig+0x34e>
 80032d6:	2308      	movs	r3, #8
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e0c2      	b.n	8003462 <UART_SetConfig+0x34e>
 80032dc:	2310      	movs	r3, #16
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	bf00      	nop
 80032e2:	e0be      	b.n	8003462 <UART_SetConfig+0x34e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a4d      	ldr	r2, [pc, #308]	; (8003420 <UART_SetConfig+0x30c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d124      	bne.n	8003338 <UART_SetConfig+0x224>
 80032ee:	4b48      	ldr	r3, [pc, #288]	; (8003410 <UART_SetConfig+0x2fc>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fc:	d012      	beq.n	8003324 <UART_SetConfig+0x210>
 80032fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003302:	d802      	bhi.n	800330a <UART_SetConfig+0x1f6>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <UART_SetConfig+0x204>
 8003308:	e012      	b.n	8003330 <UART_SetConfig+0x21c>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d006      	beq.n	800331e <UART_SetConfig+0x20a>
 8003310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003314:	d009      	beq.n	800332a <UART_SetConfig+0x216>
 8003316:	e00b      	b.n	8003330 <UART_SetConfig+0x21c>
 8003318:	2300      	movs	r3, #0
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e0a1      	b.n	8003462 <UART_SetConfig+0x34e>
 800331e:	2302      	movs	r3, #2
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e09e      	b.n	8003462 <UART_SetConfig+0x34e>
 8003324:	2304      	movs	r3, #4
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e09b      	b.n	8003462 <UART_SetConfig+0x34e>
 800332a:	2308      	movs	r3, #8
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e098      	b.n	8003462 <UART_SetConfig+0x34e>
 8003330:	2310      	movs	r3, #16
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	bf00      	nop
 8003336:	e094      	b.n	8003462 <UART_SetConfig+0x34e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a39      	ldr	r2, [pc, #228]	; (8003424 <UART_SetConfig+0x310>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d124      	bne.n	800338c <UART_SetConfig+0x278>
 8003342:	4b33      	ldr	r3, [pc, #204]	; (8003410 <UART_SetConfig+0x2fc>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800334c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003350:	d012      	beq.n	8003378 <UART_SetConfig+0x264>
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003356:	d802      	bhi.n	800335e <UART_SetConfig+0x24a>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <UART_SetConfig+0x258>
 800335c:	e012      	b.n	8003384 <UART_SetConfig+0x270>
 800335e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003362:	d006      	beq.n	8003372 <UART_SetConfig+0x25e>
 8003364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003368:	d009      	beq.n	800337e <UART_SetConfig+0x26a>
 800336a:	e00b      	b.n	8003384 <UART_SetConfig+0x270>
 800336c:	2301      	movs	r3, #1
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e077      	b.n	8003462 <UART_SetConfig+0x34e>
 8003372:	2302      	movs	r3, #2
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e074      	b.n	8003462 <UART_SetConfig+0x34e>
 8003378:	2304      	movs	r3, #4
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e071      	b.n	8003462 <UART_SetConfig+0x34e>
 800337e:	2308      	movs	r3, #8
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e06e      	b.n	8003462 <UART_SetConfig+0x34e>
 8003384:	2310      	movs	r3, #16
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	bf00      	nop
 800338a:	e06a      	b.n	8003462 <UART_SetConfig+0x34e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a25      	ldr	r2, [pc, #148]	; (8003428 <UART_SetConfig+0x314>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d124      	bne.n	80033e0 <UART_SetConfig+0x2cc>
 8003396:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <UART_SetConfig+0x2fc>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a4:	d012      	beq.n	80033cc <UART_SetConfig+0x2b8>
 80033a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033aa:	d802      	bhi.n	80033b2 <UART_SetConfig+0x29e>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <UART_SetConfig+0x2ac>
 80033b0:	e012      	b.n	80033d8 <UART_SetConfig+0x2c4>
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b6:	d006      	beq.n	80033c6 <UART_SetConfig+0x2b2>
 80033b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033bc:	d009      	beq.n	80033d2 <UART_SetConfig+0x2be>
 80033be:	e00b      	b.n	80033d8 <UART_SetConfig+0x2c4>
 80033c0:	2300      	movs	r3, #0
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e04d      	b.n	8003462 <UART_SetConfig+0x34e>
 80033c6:	2302      	movs	r3, #2
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	e04a      	b.n	8003462 <UART_SetConfig+0x34e>
 80033cc:	2304      	movs	r3, #4
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e047      	b.n	8003462 <UART_SetConfig+0x34e>
 80033d2:	2308      	movs	r3, #8
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e044      	b.n	8003462 <UART_SetConfig+0x34e>
 80033d8:	2310      	movs	r3, #16
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	bf00      	nop
 80033de:	e040      	b.n	8003462 <UART_SetConfig+0x34e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a11      	ldr	r2, [pc, #68]	; (800342c <UART_SetConfig+0x318>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d139      	bne.n	800345e <UART_SetConfig+0x34a>
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <UART_SetConfig+0x2fc>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033f8:	d027      	beq.n	800344a <UART_SetConfig+0x336>
 80033fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fe:	d817      	bhi.n	8003430 <UART_SetConfig+0x31c>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01c      	beq.n	800343e <UART_SetConfig+0x32a>
 8003404:	e027      	b.n	8003456 <UART_SetConfig+0x342>
 8003406:	bf00      	nop
 8003408:	efff69f3 	.word	0xefff69f3
 800340c:	40011000 	.word	0x40011000
 8003410:	40023800 	.word	0x40023800
 8003414:	40004400 	.word	0x40004400
 8003418:	40004800 	.word	0x40004800
 800341c:	40004c00 	.word	0x40004c00
 8003420:	40005000 	.word	0x40005000
 8003424:	40011400 	.word	0x40011400
 8003428:	40007800 	.word	0x40007800
 800342c:	40007c00 	.word	0x40007c00
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003434:	d006      	beq.n	8003444 <UART_SetConfig+0x330>
 8003436:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800343a:	d009      	beq.n	8003450 <UART_SetConfig+0x33c>
 800343c:	e00b      	b.n	8003456 <UART_SetConfig+0x342>
 800343e:	2300      	movs	r3, #0
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e00e      	b.n	8003462 <UART_SetConfig+0x34e>
 8003444:	2302      	movs	r3, #2
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e00b      	b.n	8003462 <UART_SetConfig+0x34e>
 800344a:	2304      	movs	r3, #4
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e008      	b.n	8003462 <UART_SetConfig+0x34e>
 8003450:	2308      	movs	r3, #8
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e005      	b.n	8003462 <UART_SetConfig+0x34e>
 8003456:	2310      	movs	r3, #16
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	bf00      	nop
 800345c:	e001      	b.n	8003462 <UART_SetConfig+0x34e>
 800345e:	2310      	movs	r3, #16
 8003460:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d17f      	bne.n	800356c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800346c:	7ffb      	ldrb	r3, [r7, #31]
 800346e:	2b08      	cmp	r3, #8
 8003470:	d85c      	bhi.n	800352c <UART_SetConfig+0x418>
 8003472:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <UART_SetConfig+0x364>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	0800349d 	.word	0x0800349d
 800347c:	080034bd 	.word	0x080034bd
 8003480:	080034dd 	.word	0x080034dd
 8003484:	0800352d 	.word	0x0800352d
 8003488:	080034f5 	.word	0x080034f5
 800348c:	0800352d 	.word	0x0800352d
 8003490:	0800352d 	.word	0x0800352d
 8003494:	0800352d 	.word	0x0800352d
 8003498:	08003515 	.word	0x08003515
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800349c:	f7fe fde0 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80034a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	005a      	lsls	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	441a      	add	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	61bb      	str	r3, [r7, #24]
        break;
 80034ba:	e03a      	b.n	8003532 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7fe fde4 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 80034c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	005a      	lsls	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	441a      	add	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	61bb      	str	r3, [r7, #24]
        break;
 80034da:	e02a      	b.n	8003532 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	085a      	lsrs	r2, r3, #1
 80034e2:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <UART_SetConfig+0x54c>)
 80034e4:	4413      	add	r3, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6852      	ldr	r2, [r2, #4]
 80034ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	61bb      	str	r3, [r7, #24]
        break;
 80034f2:	e01e      	b.n	8003532 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f4:	f7fe fcf6 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 80034f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	005a      	lsls	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	b29b      	uxth	r3, r3
 8003510:	61bb      	str	r3, [r7, #24]
        break;
 8003512:	e00e      	b.n	8003532 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	61bb      	str	r3, [r7, #24]
        break;
 800352a:	e002      	b.n	8003532 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	75fb      	strb	r3, [r7, #23]
        break;
 8003530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b0f      	cmp	r3, #15
 8003536:	d916      	bls.n	8003566 <UART_SetConfig+0x452>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353e:	d212      	bcs.n	8003566 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f023 030f 	bic.w	r3, r3, #15
 8003548:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	b29b      	uxth	r3, r3
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	b29a      	uxth	r2, r3
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	4313      	orrs	r3, r2
 800355a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	897a      	ldrh	r2, [r7, #10]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	e070      	b.n	8003648 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
 800356a:	e06d      	b.n	8003648 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800356c:	7ffb      	ldrb	r3, [r7, #31]
 800356e:	2b08      	cmp	r3, #8
 8003570:	d859      	bhi.n	8003626 <UART_SetConfig+0x512>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <UART_SetConfig+0x464>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	0800359d 	.word	0x0800359d
 800357c:	080035bb 	.word	0x080035bb
 8003580:	080035d9 	.word	0x080035d9
 8003584:	08003627 	.word	0x08003627
 8003588:	080035f1 	.word	0x080035f1
 800358c:	08003627 	.word	0x08003627
 8003590:	08003627 	.word	0x08003627
 8003594:	08003627 	.word	0x08003627
 8003598:	0800360f 	.word	0x0800360f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800359c:	f7fe fd60 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80035a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	085a      	lsrs	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	441a      	add	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	61bb      	str	r3, [r7, #24]
        break;
 80035b8:	e038      	b.n	800362c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ba:	f7fe fd65 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 80035be:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	085a      	lsrs	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	441a      	add	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	61bb      	str	r3, [r7, #24]
        break;
 80035d6:	e029      	b.n	800362c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	085a      	lsrs	r2, r3, #1
 80035de:	4b21      	ldr	r3, [pc, #132]	; (8003664 <UART_SetConfig+0x550>)
 80035e0:	4413      	add	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6852      	ldr	r2, [r2, #4]
 80035e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	61bb      	str	r3, [r7, #24]
        break;
 80035ee:	e01d      	b.n	800362c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f0:	f7fe fc78 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 80035f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	085a      	lsrs	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	441a      	add	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	b29b      	uxth	r3, r3
 800360a:	61bb      	str	r3, [r7, #24]
        break;
 800360c:	e00e      	b.n	800362c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	085b      	lsrs	r3, r3, #1
 8003614:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	b29b      	uxth	r3, r3
 8003622:	61bb      	str	r3, [r7, #24]
        break;
 8003624:	e002      	b.n	800362c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
        break;
 800362a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	d908      	bls.n	8003644 <UART_SetConfig+0x530>
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d204      	bcs.n	8003644 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	e001      	b.n	8003648 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003654:	7dfb      	ldrb	r3, [r7, #23]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	01e84800 	.word	0x01e84800
 8003664:	00f42400 	.word	0x00f42400

08003668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01a      	beq.n	800377e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003766:	d10a      	bne.n	800377e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80037ba:	f7fd fcdd 	bl	8001178 <HAL_GetTick>
 80037be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d10e      	bne.n	80037ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f82a 	bl	8003836 <UART_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e020      	b.n	800382e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d10e      	bne.n	8003818 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f814 	bl	8003836 <UART_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e00a      	b.n	800382e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003846:	e05d      	b.n	8003904 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d059      	beq.n	8003904 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003850:	f7fd fc92 	bl	8001178 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <UART_WaitOnFlagUntilTimeout+0x30>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11b      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003874:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e042      	b.n	8003924 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d02b      	beq.n	8003904 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ba:	d123      	bne.n	8003904 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e00f      	b.n	8003924 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4013      	ands	r3, r2
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	429a      	cmp	r2, r3
 8003920:	d092      	beq.n	8003848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_ETH_IRQHandler>:

/*#define ETH_DMA_ALL_INTS		ETH_DMA_IT_RBU | ETH_DMA_FLAG_T | ETH_DMA_FLAG_AIS */

        #define INT_MASK    ( ( uint32_t ) ~( ETH_DMA_IT_TBU ) )
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
            uint32_t dmasr;

            dmasr = heth->Instance->DMASR & ETH_DMA_ALL_INTS;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	f241 0314 	movw	r3, #4116	; 0x1014
 800393c:	4413      	add	r3, r2
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_ETH_IRQHandler+0x60>)
 8003942:	4013      	ands	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
            heth->Instance->DMASR = dmasr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f241 0314 	movw	r3, #4116	; 0x1014
 800394e:	4413      	add	r3, r2
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

            /* Frame received */
            if( ( dmasr & ( ETH_DMA_FLAG_R | ETH_DMA_IT_RBU ) ) != 0 )
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_ETH_IRQHandler+0x38>
            {
                /* Receive complete callback */
                HAL_ETH_RxCpltCallback( heth );
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f002 fe10 	bl	8006584 <HAL_ETH_RxCpltCallback>
            }

            /* Frame transmitted */
            if( ( dmasr & ( ETH_DMA_FLAG_T ) ) != 0 )
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_ETH_IRQHandler+0x48>
            {
                /* Transfer complete callback */
                HAL_ETH_TxCpltCallback( heth );
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f002 fe36 	bl	80065e0 <HAL_ETH_TxCpltCallback>
            }

            /* ETH DMA Error */
            if( ( dmasr & ( ETH_DMA_FLAG_AIS ) ) != 0 )
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_ETH_IRQHandler+0x58>
            {
                /* Ethernet Error callback */
                HAL_ETH_ErrorCallback( heth );
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f806 	bl	8003990 <HAL_ETH_ErrorCallback>
            }
        }
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	3801e7fb 	.word	0x3801e7fb

08003990 <HAL_ETH_ErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * heth )
        {
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_TxCpltCallback could be implemented in the user file
             */
            ( void ) heth;
        }
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f103 0208 	add.w	r2, r3, #8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f04f 32ff 	mov.w	r2, #4294967295
 80039bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f103 0208 	add.w	r2, r3, #8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f103 0208 	add.w	r2, r3, #8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d103      	bne.n	8003a66 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	e00c      	b.n	8003a80 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e002      	b.n	8003a74 <vListInsert+0x2e>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d2f6      	bcs.n	8003a6e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	601a      	str	r2, [r3, #0]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6852      	ldr	r2, [r2, #4]
 8003ad8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d103      	bne.n	8003aec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <xQueueGenericReset+0x1e>
 8003b20:	492a      	ldr	r1, [pc, #168]	; (8003bcc <xQueueGenericReset+0xc0>)
 8003b22:	f240 100d 	movw	r0, #269	; 0x10d
 8003b26:	f7fc ffad 	bl	8000a84 <vAssertCalled>

    taskENTER_CRITICAL();
 8003b2a:	f002 fc1d 	bl	8006368 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	441a      	add	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	68f9      	ldr	r1, [r7, #12]
 8003b5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	441a      	add	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	22ff      	movs	r2, #255	; 0xff
 8003b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	22ff      	movs	r2, #255	; 0xff
 8003b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d114      	bne.n	8003baa <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01a      	beq.n	8003bbe <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3310      	adds	r3, #16
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f001 fad7 	bl	8005140 <xTaskRemoveFromEventList>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d012      	beq.n	8003bbe <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <xQueueGenericReset+0xc4>)
 8003b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	e009      	b.n	8003bbe <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3310      	adds	r3, #16
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fef8 	bl	80039a4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3324      	adds	r3, #36	; 0x24
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fef3 	bl	80039a4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003bbe:	f002 fbff 	bl	80063c0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	080088c8 	.word	0x080088c8
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <xQueueGenericCreate+0x1e>
 8003be8:	491c      	ldr	r1, [pc, #112]	; (8003c5c <xQueueGenericCreate+0x88>)
 8003bea:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8003bee:	f7fc ff49 	bl	8000a84 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <xQueueGenericCreate+0x3c>
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d101      	bne.n	8003c14 <xQueueGenericCreate+0x40>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <xQueueGenericCreate+0x42>
 8003c14:	2300      	movs	r3, #0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d104      	bne.n	8003c24 <xQueueGenericCreate+0x50>
 8003c1a:	4910      	ldr	r1, [pc, #64]	; (8003c5c <xQueueGenericCreate+0x88>)
 8003c1c:	f44f 70c7 	mov.w	r0, #398	; 0x18e
 8003c20:	f7fc ff30 	bl	8000a84 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	3354      	adds	r3, #84	; 0x54
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f002 f8bf 	bl	8005dac <pvPortMalloc>
 8003c2e:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <xQueueGenericCreate+0x7e>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3354      	adds	r3, #84	; 0x54
 8003c3e:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c40:	79fa      	ldrb	r2, [r7, #7]
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f807 	bl	8003c60 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003c52:	69bb      	ldr	r3, [r7, #24]
    }
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	080088c8 	.word	0x080088c8

08003c60 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e002      	b.n	8003c82 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c8e:	2101      	movs	r1, #1
 8003c90:	69b8      	ldr	r0, [r7, #24]
 8003c92:	f7ff ff3b 	bl	8003b0c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d104      	bne.n	8003cd2 <xQueueGenericSend+0x26>
 8003cc8:	4978      	ldr	r1, [pc, #480]	; (8003eac <xQueueGenericSend+0x200>)
 8003cca:	f240 3009 	movw	r0, #777	; 0x309
 8003cce:	f7fc fed9 	bl	8000a84 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <xQueueGenericSend+0x34>
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <xQueueGenericSend+0x38>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <xQueueGenericSend+0x3a>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <xQueueGenericSend+0x48>
 8003cea:	4970      	ldr	r1, [pc, #448]	; (8003eac <xQueueGenericSend+0x200>)
 8003cec:	f240 300a 	movw	r0, #778	; 0x30a
 8003cf0:	f7fc fec8 	bl	8000a84 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d103      	bne.n	8003d02 <xQueueGenericSend+0x56>
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <xQueueGenericSend+0x5a>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <xQueueGenericSend+0x5c>
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <xQueueGenericSend+0x6a>
 8003d0c:	4967      	ldr	r1, [pc, #412]	; (8003eac <xQueueGenericSend+0x200>)
 8003d0e:	f240 300b 	movw	r0, #779	; 0x30b
 8003d12:	f7fc feb7 	bl	8000a84 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d16:	f001 fba7 	bl	8005468 <xTaskGetSchedulerState>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <xQueueGenericSend+0x7a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <xQueueGenericSend+0x7e>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <xQueueGenericSend+0x80>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <xQueueGenericSend+0x8e>
 8003d30:	495e      	ldr	r1, [pc, #376]	; (8003eac <xQueueGenericSend+0x200>)
 8003d32:	f240 300e 	movw	r0, #782	; 0x30e
 8003d36:	f7fc fea5 	bl	8000a84 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d3a:	f002 fb15 	bl	8006368 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <xQueueGenericSend+0xa4>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d145      	bne.n	8003ddc <xQueueGenericSend+0x130>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	61fb      	str	r3, [r7, #28]

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	6a38      	ldr	r0, [r7, #32]
 8003d5c:	f000 fa26 	bl	80041ac <prvCopyDataToQueue>
 8003d60:	61b8      	str	r0, [r7, #24]

                        if( pxQueue->pxQueueSetContainer != NULL )
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d014      	beq.n	8003d94 <xQueueGenericSend+0xe8>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d102      	bne.n	8003d76 <xQueueGenericSend+0xca>
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d12e      	bne.n	8003dd4 <xQueueGenericSend+0x128>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003d76:	6a38      	ldr	r0, [r7, #32]
 8003d78:	f000 fb92 	bl	80044a0 <prvNotifyQueueSetContainer>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d028      	beq.n	8003dd4 <xQueueGenericSend+0x128>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003d82:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <xQueueGenericSend+0x204>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	e01f      	b.n	8003dd4 <xQueueGenericSend+0x128>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <xQueueGenericSend+0x112>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	3324      	adds	r3, #36	; 0x24
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 f9cd 	bl	8005140 <xTaskRemoveFromEventList>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <xQueueGenericSend+0x128>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8003dac:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <xQueueGenericSend+0x204>)
 8003dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	e00a      	b.n	8003dd4 <xQueueGenericSend+0x128>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <xQueueGenericSend+0x128>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003dc4:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <xQueueGenericSend+0x204>)
 8003dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003dd4:	f002 faf4 	bl	80063c0 <vPortExitCritical>
                return pdPASS;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e063      	b.n	8003ea4 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003de2:	f002 faed 	bl	80063c0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e05c      	b.n	8003ea4 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 fa01 	bl	80051fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003dfe:	f002 fadf 	bl	80063c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e02:	f000 ff67 	bl	8004cd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e06:	f002 faaf 	bl	8006368 <vPortEnterCritical>
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e10:	b25b      	sxtb	r3, r3
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d103      	bne.n	8003e20 <xQueueGenericSend+0x174>
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e26:	b25b      	sxtb	r3, r3
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d103      	bne.n	8003e36 <xQueueGenericSend+0x18a>
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e36:	f002 fac3 	bl	80063c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e3a:	1d3a      	adds	r2, r7, #4
 8003e3c:	f107 0310 	add.w	r3, r7, #16
 8003e40:	4611      	mov	r1, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 f9f0 	bl	8005228 <xTaskCheckForTimeOut>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d124      	bne.n	8003e98 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e4e:	6a38      	ldr	r0, [r7, #32]
 8003e50:	f000 fab1 	bl	80043b6 <prvIsQueueFull>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d018      	beq.n	8003e8c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	3310      	adds	r3, #16
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 f924 	bl	80050b0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003e68:	6a38      	ldr	r0, [r7, #32]
 8003e6a:	f000 fa2f 	bl	80042cc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003e6e:	f000 ff3f 	bl	8004cf0 <xTaskResumeAll>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f47f af60 	bne.w	8003d3a <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <xQueueGenericSend+0x204>)
 8003e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	e756      	b.n	8003d3a <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003e8c:	6a38      	ldr	r0, [r7, #32]
 8003e8e:	f000 fa1d 	bl	80042cc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e92:	f000 ff2d 	bl	8004cf0 <xTaskResumeAll>
 8003e96:	e750      	b.n	8003d3a <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003e98:	6a38      	ldr	r0, [r7, #32]
 8003e9a:	f000 fa17 	bl	80042cc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e9e:	f000 ff27 	bl	8004cf0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003ea2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	080088c8 	.word	0x080088c8
 8003eb0:	e000ed04 	.word	0xe000ed04

08003eb4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	; 0x30
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <xQueueGenericSendFromISR+0x22>
 8003ecc:	494e      	ldr	r1, [pc, #312]	; (8004008 <xQueueGenericSendFromISR+0x154>)
 8003ece:	f240 30dd 	movw	r0, #989	; 0x3dd
 8003ed2:	f7fc fdd7 	bl	8000a84 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <xQueueGenericSendFromISR+0x30>
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <xQueueGenericSendFromISR+0x34>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <xQueueGenericSendFromISR+0x36>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d104      	bne.n	8003ef8 <xQueueGenericSendFromISR+0x44>
 8003eee:	4946      	ldr	r1, [pc, #280]	; (8004008 <xQueueGenericSendFromISR+0x154>)
 8003ef0:	f240 30de 	movw	r0, #990	; 0x3de
 8003ef4:	f7fc fdc6 	bl	8000a84 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d103      	bne.n	8003f06 <xQueueGenericSendFromISR+0x52>
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <xQueueGenericSendFromISR+0x56>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <xQueueGenericSendFromISR+0x58>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d104      	bne.n	8003f1a <xQueueGenericSendFromISR+0x66>
 8003f10:	493d      	ldr	r1, [pc, #244]	; (8004008 <xQueueGenericSendFromISR+0x154>)
 8003f12:	f240 30df 	movw	r0, #991	; 0x3df
 8003f16:	f7fc fdb5 	bl	8000a84 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f1a:	f002 faff 	bl	800651c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003f1e:	f3ef 8211 	mrs	r2, BASEPRI
 8003f22:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f26:	b672      	cpsid	i
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	b662      	cpsie	i
 8003f36:	61ba      	str	r2, [r7, #24]
 8003f38:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d302      	bcc.n	8003f50 <xQueueGenericSendFromISR+0x9c>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d14f      	bne.n	8003ff0 <xQueueGenericSendFromISR+0x13c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f66:	f000 f921 	bl	80041ac <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003f6a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d129      	bne.n	8003fc8 <xQueueGenericSendFromISR+0x114>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <xQueueGenericSendFromISR+0xee>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d102      	bne.n	8003f88 <xQueueGenericSendFromISR+0xd4>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d130      	bne.n	8003fea <xQueueGenericSendFromISR+0x136>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8003f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f8a:	f000 fa89 	bl	80044a0 <prvNotifyQueueSetContainer>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d02a      	beq.n	8003fea <xQueueGenericSendFromISR+0x136>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d027      	beq.n	8003fea <xQueueGenericSendFromISR+0x136>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e023      	b.n	8003fea <xQueueGenericSendFromISR+0x136>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01f      	beq.n	8003fea <xQueueGenericSendFromISR+0x136>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	3324      	adds	r3, #36	; 0x24
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 f8c6 	bl	8005140 <xTaskRemoveFromEventList>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d017      	beq.n	8003fea <xQueueGenericSendFromISR+0x136>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d014      	beq.n	8003fea <xQueueGenericSendFromISR+0x136>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e010      	b.n	8003fea <xQueueGenericSendFromISR+0x136>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003fc8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8003fce:	d104      	bne.n	8003fda <xQueueGenericSendFromISR+0x126>
 8003fd0:	490d      	ldr	r1, [pc, #52]	; (8004008 <xQueueGenericSendFromISR+0x154>)
 8003fd2:	f44f 608d 	mov.w	r0, #1128	; 0x468
 8003fd6:	f7fc fd55 	bl	8000a84 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	b25a      	sxtb	r2, r3
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003fea:	2301      	movs	r3, #1
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 8003fee:	e001      	b.n	8003ff4 <xQueueGenericSendFromISR+0x140>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004000:	4618      	mov	r0, r3
 8004002:	3730      	adds	r7, #48	; 0x30
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	080088c8 	.word	0x080088c8

0800400c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004018:	2300      	movs	r3, #0
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <xQueueReceive+0x24>
 8004026:	495f      	ldr	r1, [pc, #380]	; (80041a4 <xQueueReceive+0x198>)
 8004028:	f240 502c 	movw	r0, #1324	; 0x52c
 800402c:	f7fc fd2a 	bl	8000a84 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <xQueueReceive+0x32>
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <xQueueReceive+0x36>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <xQueueReceive+0x38>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <xQueueReceive+0x46>
 8004048:	4956      	ldr	r1, [pc, #344]	; (80041a4 <xQueueReceive+0x198>)
 800404a:	f44f 60a6 	mov.w	r0, #1328	; 0x530
 800404e:	f7fc fd19 	bl	8000a84 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004052:	f001 fa09 	bl	8005468 <xTaskGetSchedulerState>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <xQueueReceive+0x56>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <xQueueReceive+0x5a>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <xQueueReceive+0x5c>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <xQueueReceive+0x6a>
 800406c:	494d      	ldr	r1, [pc, #308]	; (80041a4 <xQueueReceive+0x198>)
 800406e:	f240 5035 	movw	r0, #1333	; 0x535
 8004072:	f7fc fd07 	bl	8000a84 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004076:	f002 f977 	bl	8006368 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01f      	beq.n	80040c6 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	6a38      	ldr	r0, [r7, #32]
 800408a:	f000 f8f9 	bl	8004280 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	1e5a      	subs	r2, r3, #1
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00f      	beq.n	80040be <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	3310      	adds	r3, #16
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 f84c 	bl	8005140 <xTaskRemoveFromEventList>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80040ae:	4b3e      	ldr	r3, [pc, #248]	; (80041a8 <xQueueReceive+0x19c>)
 80040b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80040be:	f002 f97f 	bl	80063c0 <vPortExitCritical>
                return pdPASS;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e069      	b.n	800419a <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d103      	bne.n	80040d4 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80040cc:	f002 f978 	bl	80063c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80040d0:	2300      	movs	r3, #0
 80040d2:	e062      	b.n	800419a <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80040da:	f107 0314 	add.w	r3, r7, #20
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 f88c 	bl	80051fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80040e4:	2301      	movs	r3, #1
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80040e8:	f002 f96a 	bl	80063c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80040ec:	f000 fdf2 	bl	8004cd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80040f0:	f002 f93a 	bl	8006368 <vPortEnterCritical>
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040fa:	b25b      	sxtb	r3, r3
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d103      	bne.n	800410a <xQueueReceive+0xfe>
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004110:	b25b      	sxtb	r3, r3
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d103      	bne.n	8004120 <xQueueReceive+0x114>
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004120:	f002 f94e 	bl	80063c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004124:	1d3a      	adds	r2, r7, #4
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f001 f87b 	bl	8005228 <xTaskCheckForTimeOut>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d123      	bne.n	8004180 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004138:	6a38      	ldr	r0, [r7, #32]
 800413a:	f000 f926 	bl	800438a <prvIsQueueEmpty>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d017      	beq.n	8004174 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	3324      	adds	r3, #36	; 0x24
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f000 ffaf 	bl	80050b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004152:	6a38      	ldr	r0, [r7, #32]
 8004154:	f000 f8ba 	bl	80042cc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004158:	f000 fdca 	bl	8004cf0 <xTaskResumeAll>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d189      	bne.n	8004076 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <xQueueReceive+0x19c>)
 8004164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	e780      	b.n	8004076 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004174:	6a38      	ldr	r0, [r7, #32]
 8004176:	f000 f8a9 	bl	80042cc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800417a:	f000 fdb9 	bl	8004cf0 <xTaskResumeAll>
 800417e:	e77a      	b.n	8004076 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004180:	6a38      	ldr	r0, [r7, #32]
 8004182:	f000 f8a3 	bl	80042cc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004186:	f000 fdb3 	bl	8004cf0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800418a:	6a38      	ldr	r0, [r7, #32]
 800418c:	f000 f8fd 	bl	800438a <prvIsQueueEmpty>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	f43f af6f 	beq.w	8004076 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004198:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800419a:	4618      	mov	r0, r3
 800419c:	3728      	adds	r7, #40	; 0x28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	080088c8 	.word	0x080088c8
 80041a8:	e000ed04 	.word	0xe000ed04

080041ac <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10d      	bne.n	80041e6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d14d      	bne.n	800426e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 f964 	bl	80054a4 <xTaskPriorityDisinherit>
 80041dc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
 80041e4:	e043      	b.n	800426e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d119      	bne.n	8004220 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6858      	ldr	r0, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	461a      	mov	r2, r3
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	f002 fa54 	bl	80066a4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	441a      	add	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d32b      	bcc.n	800426e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	e026      	b.n	800426e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	68d8      	ldr	r0, [r3, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	461a      	mov	r2, r3
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	f002 fa3a 	bl	80066a4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	425b      	negs	r3, r3
 800423a:	441a      	add	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d207      	bcs.n	800425c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	425b      	negs	r3, r3
 8004256:	441a      	add	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d105      	bne.n	800426e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	3b01      	subs	r3, #1
 800426c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004276:	697b      	ldr	r3, [r7, #20]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d018      	beq.n	80042c4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	441a      	add	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d303      	bcc.n	80042b4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68d9      	ldr	r1, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	461a      	mov	r2, r3
 80042be:	6838      	ldr	r0, [r7, #0]
 80042c0:	f002 f9f0 	bl	80066a4 <memcpy>
    }
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80042d4:	f002 f848 	bl	8006368 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042de:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80042e0:	e01e      	b.n	8004320 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8d8 	bl	80044a0 <prvNotifyQueueSetContainer>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d010      	beq.n	8004318 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 80042f6:	f000 fff3 	bl	80052e0 <vTaskMissedYield>
 80042fa:	e00d      	b.n	8004318 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d012      	beq.n	800432a <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3324      	adds	r3, #36	; 0x24
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ff19 	bl	8005140 <xTaskRemoveFromEventList>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 8004314:	f000 ffe4 	bl	80052e0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	3b01      	subs	r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	dcdc      	bgt.n	80042e2 <prvUnlockQueue+0x16>
 8004328:	e000      	b.n	800432c <prvUnlockQueue+0x60>
                            break;
 800432a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	22ff      	movs	r2, #255	; 0xff
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004334:	f002 f844 	bl	80063c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004338:	f002 f816 	bl	8006368 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004342:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004344:	e011      	b.n	800436a <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d012      	beq.n	8004374 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3310      	adds	r3, #16
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fef4 	bl	8005140 <xTaskRemoveFromEventList>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 800435e:	f000 ffbf 	bl	80052e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004362:	7bbb      	ldrb	r3, [r7, #14]
 8004364:	3b01      	subs	r3, #1
 8004366:	b2db      	uxtb	r3, r3
 8004368:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800436a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800436e:	2b00      	cmp	r3, #0
 8004370:	dce9      	bgt.n	8004346 <prvUnlockQueue+0x7a>
 8004372:	e000      	b.n	8004376 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8004374:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800437e:	f002 f81f 	bl	80063c0 <vPortExitCritical>
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004392:	f001 ffe9 	bl	8006368 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800439e:	2301      	movs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e001      	b.n	80043a8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043a8:	f002 f80a 	bl	80063c0 <vPortExitCritical>

    return xReturn;
 80043ac:	68fb      	ldr	r3, [r7, #12]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043be:	f001 ffd3 	bl	8006368 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d102      	bne.n	80043d4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	e001      	b.n	80043d8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043d8:	f001 fff2 	bl	80063c0 <vPortExitCritical>

    return xReturn;
 80043dc:	68fb      	ldr	r3, [r7, #12]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e014      	b.n	8004422 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043f8:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <vQueueAddToRegistry+0x4c>)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004404:	490b      	ldr	r1, [pc, #44]	; (8004434 <vQueueAddToRegistry+0x4c>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <vQueueAddToRegistry+0x4c>)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800441a:	e005      	b.n	8004428 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3301      	adds	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b07      	cmp	r3, #7
 8004426:	d9e7      	bls.n	80043f8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	20020720 	.word	0x20020720

08004438 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004448:	f001 ff8e 	bl	8006368 <vPortEnterCritical>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004452:	b25b      	sxtb	r3, r3
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d103      	bne.n	8004462 <vQueueWaitForMessageRestricted+0x2a>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004468:	b25b      	sxtb	r3, r3
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446e:	d103      	bne.n	8004478 <vQueueWaitForMessageRestricted+0x40>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004478:	f001 ffa2 	bl	80063c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	3324      	adds	r3, #36	; 0x24
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fe2f 	bl	80050f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	f7ff ff1a 	bl	80042cc <prvUnlockQueue>
    }
 8004498:	bf00      	nop
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ac:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d104      	bne.n	80044c2 <prvNotifyQueueSetContainer+0x22>
 80044b8:	4924      	ldr	r1, [pc, #144]	; (800454c <prvNotifyQueueSetContainer+0xac>)
 80044ba:	f640 3097 	movw	r0, #2967	; 0xb97
 80044be:	f7fc fae1 	bl	8000a84 <vAssertCalled>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d304      	bcc.n	80044d8 <prvNotifyQueueSetContainer+0x38>
 80044ce:	491f      	ldr	r1, [pc, #124]	; (800454c <prvNotifyQueueSetContainer+0xac>)
 80044d0:	f640 3098 	movw	r0, #2968	; 0xb98
 80044d4:	f7fc fad6 	bl	8000a84 <vAssertCalled>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d22e      	bcs.n	8004542 <prvNotifyQueueSetContainer+0xa2>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ea:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	2200      	movs	r2, #0
 80044f0:	4619      	mov	r1, r3
 80044f2:	6938      	ldr	r0, [r7, #16]
 80044f4:	f7ff fe5a 	bl	80041ac <prvCopyDataToQueue>
 80044f8:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 80044fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d10e      	bne.n	8004522 <prvNotifyQueueSetContainer+0x82>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01a      	beq.n	8004542 <prvNotifyQueueSetContainer+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	3324      	adds	r3, #36	; 0x24
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fe15 	bl	8005140 <xTaskRemoveFromEventList>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d012      	beq.n	8004542 <prvNotifyQueueSetContainer+0xa2>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e00f      	b.n	8004542 <prvNotifyQueueSetContainer+0xa2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8004522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004526:	2b7f      	cmp	r3, #127	; 0x7f
 8004528:	d104      	bne.n	8004534 <prvNotifyQueueSetContainer+0x94>
 800452a:	4908      	ldr	r1, [pc, #32]	; (800454c <prvNotifyQueueSetContainer+0xac>)
 800452c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004530:	f7fc faa8 	bl	8000a84 <vAssertCalled>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	3301      	adds	r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	b25a      	sxtb	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004542:	697b      	ldr	r3, [r7, #20]
    }
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	080088c8 	.word	0x080088c8

08004550 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004550:	b580      	push	{r7, lr}
 8004552:	b08c      	sub	sp, #48	; 0x30
 8004554:	af04      	add	r7, sp, #16
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4618      	mov	r0, r3
 8004566:	f001 fc21 	bl	8005dac <pvPortMalloc>
 800456a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00e      	beq.n	8004590 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004572:	20cc      	movs	r0, #204	; 0xcc
 8004574:	f001 fc1a 	bl	8005dac <pvPortMalloc>
 8004578:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
 8004586:	e005      	b.n	8004594 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004588:	6978      	ldr	r0, [r7, #20]
 800458a:	f001 fccd 	bl	8005f28 <vPortFree>
 800458e:	e001      	b.n	8004594 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800459a:	88fa      	ldrh	r2, [r7, #6]
 800459c:	2300      	movs	r3, #0
 800459e:	9303      	str	r3, [sp, #12]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	9302      	str	r3, [sp, #8]
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f80f 	bl	80045d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80045b6:	69f8      	ldr	r0, [r7, #28]
 80045b8:	f000 f8b4 	bl	8004724 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80045bc:	2301      	movs	r3, #1
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e002      	b.n	80045c8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295
 80045c6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80045c8:	69bb      	ldr	r3, [r7, #24]
    }
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	461a      	mov	r2, r3
 80045ec:	21a5      	movs	r1, #165	; 0xa5
 80045ee:	f002 f87d 	bl	80066ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80045fc:	440b      	add	r3, r1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f023 0307 	bic.w	r3, r3, #7
 800460a:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	2b00      	cmp	r3, #0
 8004614:	d004      	beq.n	8004620 <prvInitialiseNewTask+0x4c>
 8004616:	493f      	ldr	r1, [pc, #252]	; (8004714 <prvInitialiseNewTask+0x140>)
 8004618:	f240 305e 	movw	r0, #862	; 0x35e
 800461c:	f7fc fa32 	bl	8000a84 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01f      	beq.n	8004666 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e012      	b.n	8004652 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	4413      	add	r3, r2
 8004632:	7819      	ldrb	r1, [r3, #0]
 8004634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4413      	add	r3, r2
 800463a:	3334      	adds	r3, #52	; 0x34
 800463c:	460a      	mov	r2, r1
 800463e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	4413      	add	r3, r2
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d006      	beq.n	800465a <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3301      	adds	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b1d      	cmp	r3, #29
 8004656:	d9e9      	bls.n	800462c <prvInitialiseNewTask+0x58>
 8004658:	e000      	b.n	800465c <prvInitialiseNewTask+0x88>
            {
                break;
 800465a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004664:	e003      	b.n	800466e <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	2b1f      	cmp	r3, #31
 8004672:	d901      	bls.n	8004678 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004674:	231f      	movs	r3, #31
 8004676:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	65da      	str	r2, [r3, #92]	; 0x5c
            pxNewTCB->uxMutexesHeld = 0;
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	2200      	movs	r2, #0
 8004688:	661a      	str	r2, [r3, #96]	; 0x60
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	3304      	adds	r3, #4
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f9a8 	bl	80039e4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	3318      	adds	r3, #24
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff f9a3 	bl	80039e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	f1c3 0220 	rsb	r2, r3, #32
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	33c4      	adds	r3, #196	; 0xc4
 80046b8:	2204      	movs	r2, #4
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f002 f815 	bl	80066ec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	33c8      	adds	r3, #200	; 0xc8
 80046c6:	2201      	movs	r2, #1
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f002 f80e 	bl	80066ec <memset>
    #if ( configUSE_NEWLIB_REENTRANT == 1 )
        {
            /* Initialise this task's Newlib reent structure.
             * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
             * for additional information. */
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	3364      	adds	r3, #100	; 0x64
 80046d4:	2260      	movs	r2, #96	; 0x60
 80046d6:	2100      	movs	r1, #0
 80046d8:	4618      	mov	r0, r3
 80046da:	f002 f807 	bl	80066ec <memset>
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	4a0d      	ldr	r2, [pc, #52]	; (8004718 <prvInitialiseNewTask+0x144>)
 80046e2:	669a      	str	r2, [r3, #104]	; 0x68
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	4a0d      	ldr	r2, [pc, #52]	; (800471c <prvInitialiseNewTask+0x148>)
 80046e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	4a0c      	ldr	r2, [pc, #48]	; (8004720 <prvInitialiseNewTask+0x14c>)
 80046ee:	671a      	str	r2, [r3, #112]	; 0x70
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	6938      	ldr	r0, [r7, #16]
 80046f6:	f001 fd2b 	bl	8006150 <pxPortInitialiseStack>
 80046fa:	4602      	mov	r2, r0
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800470a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800470c:	bf00      	nop
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	080088ec 	.word	0x080088ec
 8004718:	08008a04 	.word	0x08008a04
 800471c:	08008a24 	.word	0x08008a24
 8004720:	080089e4 	.word	0x080089e4

08004724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800472c:	f001 fe1c 	bl	8006368 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004730:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <prvAddNewTaskToReadyList+0xc0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	4a2b      	ldr	r2, [pc, #172]	; (80047e4 <prvAddNewTaskToReadyList+0xc0>)
 8004738:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800473a:	4b2b      	ldr	r3, [pc, #172]	; (80047e8 <prvAddNewTaskToReadyList+0xc4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004742:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <prvAddNewTaskToReadyList+0xc4>)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004748:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <prvAddNewTaskToReadyList+0xc0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d110      	bne.n	8004772 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004750:	f000 fdec 	bl	800532c <prvInitialiseTaskLists>
 8004754:	e00d      	b.n	8004772 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004756:	4b25      	ldr	r3, [pc, #148]	; (80047ec <prvAddNewTaskToReadyList+0xc8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <prvAddNewTaskToReadyList+0xc4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	429a      	cmp	r2, r3
 800476a:	d802      	bhi.n	8004772 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800476c:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <prvAddNewTaskToReadyList+0xc4>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004772:	4b1f      	ldr	r3, [pc, #124]	; (80047f0 <prvAddNewTaskToReadyList+0xcc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <prvAddNewTaskToReadyList+0xcc>)
 800477a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800477c:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <prvAddNewTaskToReadyList+0xcc>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	2201      	movs	r2, #1
 800478a:	409a      	lsls	r2, r3
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <prvAddNewTaskToReadyList+0xd0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <prvAddNewTaskToReadyList+0xd0>)
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <prvAddNewTaskToReadyList+0xd4>)
 80047a4:	441a      	add	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7ff f926 	bl	80039fe <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80047b2:	f001 fe05 	bl	80063c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <prvAddNewTaskToReadyList+0xc8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00e      	beq.n	80047dc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <prvAddNewTaskToReadyList+0xc4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d207      	bcs.n	80047dc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <prvAddNewTaskToReadyList+0xd8>)
 80047ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000500 	.word	0x20000500
 80047e8:	2000020c 	.word	0x2000020c
 80047ec:	2000050c 	.word	0x2000050c
 80047f0:	2000051c 	.word	0x2000051c
 80047f4:	20000508 	.word	0x20000508
 80047f8:	20000210 	.word	0x20000210
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d011      	beq.n	8004836 <vTaskDelay+0x36>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <vTaskDelay+0x54>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <vTaskDelay+0x24>
 800481a:	490f      	ldr	r1, [pc, #60]	; (8004858 <vTaskDelay+0x58>)
 800481c:	f240 503f 	movw	r0, #1343	; 0x53f
 8004820:	f7fc f930 	bl	8000a84 <vAssertCalled>
            vTaskSuspendAll();
 8004824:	f000 fa56 	bl	8004cd4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004828:	2100      	movs	r1, #0
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 ff48 	bl	80056c0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004830:	f000 fa5e 	bl	8004cf0 <xTaskResumeAll>
 8004834:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d107      	bne.n	800484c <vTaskDelay+0x4c>
        {
            portYIELD_WITHIN_API();
 800483c:	4b07      	ldr	r3, [pc, #28]	; (800485c <vTaskDelay+0x5c>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000528 	.word	0x20000528
 8004858:	080088ec 	.word	0x080088ec
 800485c:	e000ed04 	.word	0xe000ed04

08004860 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8004868:	f001 fd7e 	bl	8006368 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <uxTaskPriorityGet+0x18>
 8004872:	4b07      	ldr	r3, [pc, #28]	; (8004890 <uxTaskPriorityGet+0x30>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	e000      	b.n	800487a <uxTaskPriorityGet+0x1a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8004882:	f001 fd9d 	bl	80063c0 <vPortExitCritical>

        return uxReturn;
 8004886:	68bb      	ldr	r3, [r7, #8]
    }
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	2000020c 	.word	0x2000020c

08004894 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b1f      	cmp	r3, #31
 80048a6:	d904      	bls.n	80048b2 <vTaskPrioritySet+0x1e>
 80048a8:	4948      	ldr	r1, [pc, #288]	; (80049cc <vTaskPrioritySet+0x138>)
 80048aa:	f240 600b 	movw	r0, #1547	; 0x60b
 80048ae:	f7fc f8e9 	bl	8000a84 <vAssertCalled>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b1f      	cmp	r3, #31
 80048b6:	d901      	bls.n	80048bc <vTaskPrioritySet+0x28>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048b8:	231f      	movs	r3, #31
 80048ba:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80048bc:	f001 fd54 	bl	8006368 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <vTaskPrioritySet+0x38>
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <vTaskPrioritySet+0x13c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	e000      	b.n	80048ce <vTaskPrioritySet+0x3a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	613b      	str	r3, [r7, #16]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	60fb      	str	r3, [r7, #12]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d06f      	beq.n	80049be <vTaskPrioritySet+0x12a>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d90d      	bls.n	8004902 <vTaskPrioritySet+0x6e>
                {
                    if( pxTCB != pxCurrentTCB )
 80048e6:	4b3a      	ldr	r3, [pc, #232]	; (80049d0 <vTaskPrioritySet+0x13c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d00f      	beq.n	8004910 <vTaskPrioritySet+0x7c>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80048f0:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <vTaskPrioritySet+0x13c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d309      	bcc.n	8004910 <vTaskPrioritySet+0x7c>
                        {
                            xYieldRequired = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e006      	b.n	8004910 <vTaskPrioritySet+0x7c>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8004902:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <vTaskPrioritySet+0x13c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	429a      	cmp	r2, r3
 800490a:	d101      	bne.n	8004910 <vTaskPrioritySet+0x7c>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800490c:	2301      	movs	r3, #1
 800490e:	617b      	str	r3, [r7, #20]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	60bb      	str	r3, [r7, #8]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	429a      	cmp	r2, r3
 8004920:	d102      	bne.n	8004928 <vTaskPrioritySet+0x94>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	65da      	str	r2, [r3, #92]	; 0x5c
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	db04      	blt.n	8004940 <vTaskPrioritySet+0xac>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f1c3 0220 	rsb	r2, r3, #32
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6959      	ldr	r1, [r3, #20]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <vTaskPrioritySet+0x140>)
 8004950:	4413      	add	r3, r2
 8004952:	4299      	cmp	r1, r3
 8004954:	d128      	bne.n	80049a8 <vTaskPrioritySet+0x114>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff f8ac 	bl	8003ab8 <uxListRemove>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <vTaskPrioritySet+0xe6>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8004966:	2201      	movs	r2, #1
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43da      	mvns	r2, r3
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <vTaskPrioritySet+0x144>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4013      	ands	r3, r2
 8004976:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <vTaskPrioritySet+0x144>)
 8004978:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	2201      	movs	r2, #1
 8004980:	409a      	lsls	r2, r3
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <vTaskPrioritySet+0x144>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4313      	orrs	r3, r2
 8004988:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <vTaskPrioritySet+0x144>)
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <vTaskPrioritySet+0x140>)
 800499a:	441a      	add	r2, r3
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	3304      	adds	r3, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4610      	mov	r0, r2
 80049a4:	f7ff f82b 	bl	80039fe <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <vTaskPrioritySet+0x12a>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <vTaskPrioritySet+0x148>)
 80049b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80049be:	f001 fcff 	bl	80063c0 <vPortExitCritical>
    }
 80049c2:	bf00      	nop
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	080088ec 	.word	0x080088ec
 80049d0:	2000020c 	.word	0x2000020c
 80049d4:	20000210 	.word	0x20000210
 80049d8:	20000508 	.word	0x20000508
 80049dc:	e000ed04 	.word	0xe000ed04

080049e0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80049e8:	f001 fcbe 	bl	8006368 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <vTaskSuspend+0x18>
 80049f2:	4b40      	ldr	r3, [pc, #256]	; (8004af4 <vTaskSuspend+0x114>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	e000      	b.n	80049fa <vTaskSuspend+0x1a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff f859 	bl	8003ab8 <uxListRemove>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d115      	bne.n	8004a38 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	4939      	ldr	r1, [pc, #228]	; (8004af8 <vTaskSuspend+0x118>)
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <vTaskSuspend+0x58>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	2201      	movs	r2, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	43da      	mvns	r2, r3
 8004a2e:	4b33      	ldr	r3, [pc, #204]	; (8004afc <vTaskSuspend+0x11c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4013      	ands	r3, r2
 8004a34:	4a31      	ldr	r2, [pc, #196]	; (8004afc <vTaskSuspend+0x11c>)
 8004a36:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d004      	beq.n	8004a4a <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	3318      	adds	r3, #24
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff f837 	bl	8003ab8 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	482b      	ldr	r0, [pc, #172]	; (8004b00 <vTaskSuspend+0x120>)
 8004a52:	f7fe ffd4 	bl	80039fe <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e010      	b.n	8004a7e <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	33c8      	adds	r3, #200	; 0xc8
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d105      	bne.n	8004a78 <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	33c8      	adds	r3, #200	; 0xc8
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	ddeb      	ble.n	8004a5c <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004a84:	f001 fc9c 	bl	80063c0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <vTaskSuspend+0x124>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8004a90:	f001 fc6a 	bl	8006368 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004a94:	f000 fccc 	bl	8005430 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004a98:	f001 fc92 	bl	80063c0 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004a9c:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <vTaskSuspend+0x114>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d121      	bne.n	8004aea <vTaskSuspend+0x10a>
        {
            if( xSchedulerRunning != pdFALSE )
 8004aa6:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <vTaskSuspend+0x124>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d011      	beq.n	8004ad2 <vTaskSuspend+0xf2>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8004aae:	4b16      	ldr	r3, [pc, #88]	; (8004b08 <vTaskSuspend+0x128>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <vTaskSuspend+0xe0>
 8004ab6:	4915      	ldr	r1, [pc, #84]	; (8004b0c <vTaskSuspend+0x12c>)
 8004ab8:	f240 60f3 	movw	r0, #1779	; 0x6f3
 8004abc:	f7fb ffe2 	bl	8000a84 <vAssertCalled>
                portYIELD_WITHIN_API();
 8004ac0:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <vTaskSuspend+0x130>)
 8004ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004ad0:	e00b      	b.n	8004aea <vTaskSuspend+0x10a>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <vTaskSuspend+0x120>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <vTaskSuspend+0x134>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d103      	bne.n	8004ae6 <vTaskSuspend+0x106>
                    pxCurrentTCB = NULL;
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <vTaskSuspend+0x114>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
    }
 8004ae4:	e001      	b.n	8004aea <vTaskSuspend+0x10a>
                    vTaskSwitchContext();
 8004ae6:	f000 fa5f 	bl	8004fa8 <vTaskSwitchContext>
    }
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	2000020c 	.word	0x2000020c
 8004af8:	20000210 	.word	0x20000210
 8004afc:	20000508 	.word	0x20000508
 8004b00:	200004ec 	.word	0x200004ec
 8004b04:	2000050c 	.word	0x2000050c
 8004b08:	20000528 	.word	0x20000528
 8004b0c:	080088ec 	.word	0x080088ec
 8004b10:	e000ed04 	.word	0xe000ed04
 8004b14:	20000500 	.word	0x20000500

08004b18 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60bb      	str	r3, [r7, #8]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <prvTaskIsTaskSuspended+0x20>
 8004b2e:	490d      	ldr	r1, [pc, #52]	; (8004b64 <prvTaskIsTaskSuspended+0x4c>)
 8004b30:	f240 701d 	movw	r0, #1821	; 0x71d
 8004b34:	f7fb ffa6 	bl	8000a84 <vAssertCalled>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <prvTaskIsTaskSuspended+0x50>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10a      	bne.n	8004b58 <prvTaskIsTaskSuspended+0x40>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <prvTaskIsTaskSuspended+0x54>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d005      	beq.n	8004b58 <prvTaskIsTaskSuspended+0x40>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <prvTaskIsTaskSuspended+0x40>
                {
                    xReturn = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004b58:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	080088ec 	.word	0x080088ec
 8004b68:	200004ec 	.word	0x200004ec
 8004b6c:	200004c0 	.word	0x200004c0

08004b70 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <vTaskResume+0x1c>
 8004b82:	4923      	ldr	r1, [pc, #140]	; (8004c10 <vTaskResume+0xa0>)
 8004b84:	f240 7047 	movw	r0, #1863	; 0x747
 8004b88:	f7fb ff7c 	bl	8000a84 <vAssertCalled>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004b8c:	4b21      	ldr	r3, [pc, #132]	; (8004c14 <vTaskResume+0xa4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d037      	beq.n	8004c06 <vTaskResume+0x96>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d034      	beq.n	8004c06 <vTaskResume+0x96>
        {
            taskENTER_CRITICAL();
 8004b9c:	f001 fbe4 	bl	8006368 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff ffb9 	bl	8004b18 <prvTaskIsTaskSuspended>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02a      	beq.n	8004c02 <vTaskResume+0x92>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fe ff81 	bl	8003ab8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	2201      	movs	r2, #1
 8004bbc:	409a      	lsls	r2, r3
 8004bbe:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <vTaskResume+0xa8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <vTaskResume+0xa8>)
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4a11      	ldr	r2, [pc, #68]	; (8004c1c <vTaskResume+0xac>)
 8004bd6:	441a      	add	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f7fe ff0d 	bl	80039fe <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <vTaskResume+0xa4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d307      	bcc.n	8004c02 <vTaskResume+0x92>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <vTaskResume+0xb0>)
 8004bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004c02:	f001 fbdd 	bl	80063c0 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	080088ec 	.word	0x080088ec
 8004c14:	2000020c 	.word	0x2000020c
 8004c18:	20000508 	.word	0x20000508
 8004c1c:	20000210 	.word	0x20000210
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004c2a:	4b20      	ldr	r3, [pc, #128]	; (8004cac <vTaskStartScheduler+0x88>)
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	2300      	movs	r3, #0
 8004c34:	2282      	movs	r2, #130	; 0x82
 8004c36:	491e      	ldr	r1, [pc, #120]	; (8004cb0 <vTaskStartScheduler+0x8c>)
 8004c38:	481e      	ldr	r0, [pc, #120]	; (8004cb4 <vTaskStartScheduler+0x90>)
 8004c3a:	f7ff fc89 	bl	8004550 <xTaskCreate>
 8004c3e:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d102      	bne.n	8004c4c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004c46:	f000 fda1 	bl	800578c <xTimerCreateTimerTask>
 8004c4a:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d11c      	bne.n	8004c8c <vTaskStartScheduler+0x68>
        __asm volatile
 8004c52:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004c56:	b672      	cpsid	i
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	b662      	cpsie	i
 8004c66:	603b      	str	r3, [r7, #0]
            {
                /* Switch Newlib's _impure_ptr variable to point to the _reent
                 * structure specific to the task that will run first.
                 * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c68:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <vTaskStartScheduler+0x94>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3364      	adds	r3, #100	; 0x64
 8004c6e:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <vTaskStartScheduler+0x98>)
 8004c70:	6013      	str	r3, [r2, #0]
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <vTaskStartScheduler+0x9c>)
 8004c74:	f04f 32ff 	mov.w	r2, #4294967295
 8004c78:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <vTaskStartScheduler+0xa0>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c80:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <vTaskStartScheduler+0xa4>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004c86:	f001 faed 	bl	8006264 <xPortStartScheduler>
 8004c8a:	e008      	b.n	8004c9e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d104      	bne.n	8004c9e <vTaskStartScheduler+0x7a>
 8004c94:	490d      	ldr	r1, [pc, #52]	; (8004ccc <vTaskStartScheduler+0xa8>)
 8004c96:	f640 0036 	movw	r0, #2102	; 0x836
 8004c9a:	f7fb fef3 	bl	8000a84 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <vTaskStartScheduler+0xac>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
}
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000524 	.word	0x20000524
 8004cb0:	08008910 	.word	0x08008910
 8004cb4:	080052f9 	.word	0x080052f9
 8004cb8:	2000020c 	.word	0x2000020c
 8004cbc:	20000014 	.word	0x20000014
 8004cc0:	20000520 	.word	0x20000520
 8004cc4:	2000050c 	.word	0x2000050c
 8004cc8:	20000504 	.word	0x20000504
 8004ccc:	080088ec 	.word	0x080088ec
 8004cd0:	2000000c 	.word	0x2000000c

08004cd4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <vTaskSuspendAll+0x18>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	4a03      	ldr	r2, [pc, #12]	; (8004cec <vTaskSuspendAll+0x18>)
 8004ce0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004ce2:	bf00      	nop
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	20000528 	.word	0x20000528

08004cf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <xTaskResumeAll+0x108>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <xTaskResumeAll+0x20>
 8004d06:	493d      	ldr	r1, [pc, #244]	; (8004dfc <xTaskResumeAll+0x10c>)
 8004d08:	f640 00a9 	movw	r0, #2217	; 0x8a9
 8004d0c:	f7fb feba 	bl	8000a84 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004d10:	f001 fb2a 	bl	8006368 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004d14:	4b38      	ldr	r3, [pc, #224]	; (8004df8 <xTaskResumeAll+0x108>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	4a37      	ldr	r2, [pc, #220]	; (8004df8 <xTaskResumeAll+0x108>)
 8004d1c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1e:	4b36      	ldr	r3, [pc, #216]	; (8004df8 <xTaskResumeAll+0x108>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d161      	bne.n	8004dea <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <xTaskResumeAll+0x110>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d05d      	beq.n	8004dea <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d2e:	e02e      	b.n	8004d8e <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d30:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <xTaskResumeAll+0x114>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3318      	adds	r3, #24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe febb 	bl	8003ab8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe feb6 	bl	8003ab8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	2201      	movs	r2, #1
 8004d52:	409a      	lsls	r2, r3
 8004d54:	4b2c      	ldr	r3, [pc, #176]	; (8004e08 <xTaskResumeAll+0x118>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <xTaskResumeAll+0x118>)
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4a28      	ldr	r2, [pc, #160]	; (8004e0c <xTaskResumeAll+0x11c>)
 8004d6c:	441a      	add	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7fe fe42 	bl	80039fe <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <xTaskResumeAll+0x120>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d302      	bcc.n	8004d8e <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 8004d88:	4b22      	ldr	r3, [pc, #136]	; (8004e14 <xTaskResumeAll+0x124>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d8e:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <xTaskResumeAll+0x114>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1cc      	bne.n	8004d30 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004d9c:	f000 fb48 	bl	8005430 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004da0:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <xTaskResumeAll+0x128>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d010      	beq.n	8004dce <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004dac:	f000 f848 	bl	8004e40 <xTaskIncrementTick>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 8004db6:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <xTaskResumeAll+0x124>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f1      	bne.n	8004dac <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 8004dc8:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <xTaskResumeAll+0x128>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <xTaskResumeAll+0x124>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <xTaskResumeAll+0x12c>)
 8004ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004dea:	f001 fae9 	bl	80063c0 <vPortExitCritical>

    return xAlreadyYielded;
 8004dee:	68bb      	ldr	r3, [r7, #8]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000528 	.word	0x20000528
 8004dfc:	080088ec 	.word	0x080088ec
 8004e00:	20000500 	.word	0x20000500
 8004e04:	200004c0 	.word	0x200004c0
 8004e08:	20000508 	.word	0x20000508
 8004e0c:	20000210 	.word	0x20000210
 8004e10:	2000020c 	.word	0x2000020c
 8004e14:	20000514 	.word	0x20000514
 8004e18:	20000510 	.word	0x20000510
 8004e1c:	e000ed04 	.word	0xe000ed04

08004e20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <xTaskGetTickCount+0x1c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004e2c:	687b      	ldr	r3, [r7, #4]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000504 	.word	0x20000504

08004e40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e4a:	4b4b      	ldr	r3, [pc, #300]	; (8004f78 <xTaskIncrementTick+0x138>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 8088 	bne.w	8004f64 <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e54:	4b49      	ldr	r3, [pc, #292]	; (8004f7c <xTaskIncrementTick+0x13c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004e5c:	4a47      	ldr	r2, [pc, #284]	; (8004f7c <xTaskIncrementTick+0x13c>)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11a      	bne.n	8004e9e <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8004e68:	4b45      	ldr	r3, [pc, #276]	; (8004f80 <xTaskIncrementTick+0x140>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d004      	beq.n	8004e7c <xTaskIncrementTick+0x3c>
 8004e72:	4944      	ldr	r1, [pc, #272]	; (8004f84 <xTaskIncrementTick+0x144>)
 8004e74:	f640 20bc 	movw	r0, #2748	; 0xabc
 8004e78:	f7fb fe04 	bl	8000a84 <vAssertCalled>
 8004e7c:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <xTaskIncrementTick+0x140>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <xTaskIncrementTick+0x148>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a3e      	ldr	r2, [pc, #248]	; (8004f80 <xTaskIncrementTick+0x140>)
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <xTaskIncrementTick+0x148>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	4b3e      	ldr	r3, [pc, #248]	; (8004f8c <xTaskIncrementTick+0x14c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	4a3d      	ldr	r2, [pc, #244]	; (8004f8c <xTaskIncrementTick+0x14c>)
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	f000 fac9 	bl	8005430 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004e9e:	4b3c      	ldr	r3, [pc, #240]	; (8004f90 <xTaskIncrementTick+0x150>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d348      	bcc.n	8004f3a <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ea8:	4b35      	ldr	r3, [pc, #212]	; (8004f80 <xTaskIncrementTick+0x140>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eb2:	4b37      	ldr	r3, [pc, #220]	; (8004f90 <xTaskIncrementTick+0x150>)
 8004eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb8:	601a      	str	r2, [r3, #0]
                    break;
 8004eba:	e03e      	b.n	8004f3a <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ebc:	4b30      	ldr	r3, [pc, #192]	; (8004f80 <xTaskIncrementTick+0x140>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d203      	bcs.n	8004edc <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004ed4:	4a2e      	ldr	r2, [pc, #184]	; (8004f90 <xTaskIncrementTick+0x150>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004eda:	e02e      	b.n	8004f3a <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe fde9 	bl	8003ab8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	3318      	adds	r3, #24
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fde0 	bl	8003ab8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	2201      	movs	r2, #1
 8004efe:	409a      	lsls	r2, r3
 8004f00:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <xTaskIncrementTick+0x154>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	4a23      	ldr	r2, [pc, #140]	; (8004f94 <xTaskIncrementTick+0x154>)
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <xTaskIncrementTick+0x158>)
 8004f18:	441a      	add	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f7fe fd6c 	bl	80039fe <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2a:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <xTaskIncrementTick+0x15c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3b9      	bcc.n	8004ea8 <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f38:	e7b6      	b.n	8004ea8 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <xTaskIncrementTick+0x15c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	4915      	ldr	r1, [pc, #84]	; (8004f98 <xTaskIncrementTick+0x158>)
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d901      	bls.n	8004f56 <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <xTaskIncrementTick+0x160>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e004      	b.n	8004f6e <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004f64:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <xTaskIncrementTick+0x164>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	4a0e      	ldr	r2, [pc, #56]	; (8004fa4 <xTaskIncrementTick+0x164>)
 8004f6c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004f6e:	697b      	ldr	r3, [r7, #20]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000528 	.word	0x20000528
 8004f7c:	20000504 	.word	0x20000504
 8004f80:	200004b8 	.word	0x200004b8
 8004f84:	080088ec 	.word	0x080088ec
 8004f88:	200004bc 	.word	0x200004bc
 8004f8c:	20000518 	.word	0x20000518
 8004f90:	20000520 	.word	0x20000520
 8004f94:	20000508 	.word	0x20000508
 8004f98:	20000210 	.word	0x20000210
 8004f9c:	2000020c 	.word	0x2000020c
 8004fa0:	20000514 	.word	0x20000514
 8004fa4:	20000510 	.word	0x20000510

08004fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fae:	4b39      	ldr	r3, [pc, #228]	; (8005094 <vTaskSwitchContext+0xec>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004fb6:	4b38      	ldr	r3, [pc, #224]	; (8005098 <vTaskSwitchContext+0xf0>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004fbc:	e065      	b.n	800508a <vTaskSwitchContext+0xe2>
        xYieldPending = pdFALSE;
 8004fbe:	4b36      	ldr	r3, [pc, #216]	; (8005098 <vTaskSwitchContext+0xf0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8004fc4:	4b35      	ldr	r3, [pc, #212]	; (800509c <vTaskSwitchContext+0xf4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d111      	bne.n	8005000 <vTaskSwitchContext+0x58>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d10b      	bne.n	8005000 <vTaskSwitchContext+0x58>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3308      	adds	r3, #8
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d105      	bne.n	8005000 <vTaskSwitchContext+0x58>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d008      	beq.n	8005012 <vTaskSwitchContext+0x6a>
 8005000:	4b26      	ldr	r3, [pc, #152]	; (800509c <vTaskSwitchContext+0xf4>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b25      	ldr	r3, [pc, #148]	; (800509c <vTaskSwitchContext+0xf4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3334      	adds	r3, #52	; 0x34
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f7fb fd77 	bl	8000b00 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005012:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <vTaskSwitchContext+0xf8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	f1c3 031f 	rsb	r3, r3, #31
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	491e      	ldr	r1, [pc, #120]	; (80050a4 <vTaskSwitchContext+0xfc>)
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <vTaskSwitchContext+0x9e>
 800503c:	491a      	ldr	r1, [pc, #104]	; (80050a8 <vTaskSwitchContext+0x100>)
 800503e:	f640 30f7 	movw	r0, #3063	; 0xbf7
 8005042:	f7fb fd1f 	bl	8000a84 <vAssertCalled>
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4a14      	ldr	r2, [pc, #80]	; (80050a4 <vTaskSwitchContext+0xfc>)
 8005052:	4413      	add	r3, r2
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	605a      	str	r2, [r3, #4]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	3308      	adds	r3, #8
 8005068:	429a      	cmp	r2, r3
 800506a:	d104      	bne.n	8005076 <vTaskSwitchContext+0xce>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4a07      	ldr	r2, [pc, #28]	; (800509c <vTaskSwitchContext+0xf4>)
 800507e:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <vTaskSwitchContext+0xf4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3364      	adds	r3, #100	; 0x64
 8005086:	4a09      	ldr	r2, [pc, #36]	; (80050ac <vTaskSwitchContext+0x104>)
 8005088:	6013      	str	r3, [r2, #0]
}
 800508a:	bf00      	nop
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000528 	.word	0x20000528
 8005098:	20000514 	.word	0x20000514
 800509c:	2000020c 	.word	0x2000020c
 80050a0:	20000508 	.word	0x20000508
 80050a4:	20000210 	.word	0x20000210
 80050a8:	080088ec 	.word	0x080088ec
 80050ac:	20000014 	.word	0x20000014

080050b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <vTaskPlaceOnEventList+0x1a>
 80050c0:	4909      	ldr	r1, [pc, #36]	; (80050e8 <vTaskPlaceOnEventList+0x38>)
 80050c2:	f640 4011 	movw	r0, #3089	; 0xc11
 80050c6:	f7fb fcdd 	bl	8000a84 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <vTaskPlaceOnEventList+0x3c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3318      	adds	r3, #24
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fe fcb7 	bl	8003a46 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050d8:	2101      	movs	r1, #1
 80050da:	6838      	ldr	r0, [r7, #0]
 80050dc:	f000 faf0 	bl	80056c0 <prvAddCurrentTaskToDelayedList>
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	080088ec 	.word	0x080088ec
 80050ec:	2000020c 	.word	0x2000020c

080050f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <vTaskPlaceOnEventListRestricted+0x1c>
 8005102:	490d      	ldr	r1, [pc, #52]	; (8005138 <vTaskPlaceOnEventListRestricted+0x48>)
 8005104:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 8005108:	f7fb fcbc 	bl	8000a84 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <vTaskPlaceOnEventListRestricted+0x4c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3318      	adds	r3, #24
 8005112:	4619      	mov	r1, r3
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7fe fc72 	bl	80039fe <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295
 8005124:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	68b8      	ldr	r0, [r7, #8]
 800512a:	f000 fac9 	bl	80056c0 <prvAddCurrentTaskToDelayedList>
    }
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	080088ec 	.word	0x080088ec
 800513c:	2000020c 	.word	0x2000020c

08005140 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d104      	bne.n	8005160 <xTaskRemoveFromEventList+0x20>
 8005156:	4922      	ldr	r1, [pc, #136]	; (80051e0 <xTaskRemoveFromEventList+0xa0>)
 8005158:	f44f 6047 	mov.w	r0, #3184	; 0xc70
 800515c:	f7fb fc92 	bl	8000a84 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	3318      	adds	r3, #24
 8005164:	4618      	mov	r0, r3
 8005166:	f7fe fca7 	bl	8003ab8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800516a:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <xTaskRemoveFromEventList+0xa4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11c      	bne.n	80051ac <xTaskRemoveFromEventList+0x6c>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	3304      	adds	r3, #4
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fc9e 	bl	8003ab8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	2201      	movs	r2, #1
 8005182:	409a      	lsls	r2, r3
 8005184:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <xTaskRemoveFromEventList+0xa8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4313      	orrs	r3, r2
 800518a:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <xTaskRemoveFromEventList+0xa8>)
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4a14      	ldr	r2, [pc, #80]	; (80051ec <xTaskRemoveFromEventList+0xac>)
 800519c:	441a      	add	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f7fe fc2a 	bl	80039fe <vListInsertEnd>
 80051aa:	e005      	b.n	80051b8 <xTaskRemoveFromEventList+0x78>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	3318      	adds	r3, #24
 80051b0:	4619      	mov	r1, r3
 80051b2:	480f      	ldr	r0, [pc, #60]	; (80051f0 <xTaskRemoveFromEventList+0xb0>)
 80051b4:	f7fe fc23 	bl	80039fe <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <xTaskRemoveFromEventList+0xb4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d905      	bls.n	80051d2 <xTaskRemoveFromEventList+0x92>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <xTaskRemoveFromEventList+0xb8>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e001      	b.n	80051d6 <xTaskRemoveFromEventList+0x96>
    }
    else
    {
        xReturn = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80051d6:	68fb      	ldr	r3, [r7, #12]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	080088ec 	.word	0x080088ec
 80051e4:	20000528 	.word	0x20000528
 80051e8:	20000508 	.word	0x20000508
 80051ec:	20000210 	.word	0x20000210
 80051f0:	200004c0 	.word	0x200004c0
 80051f4:	2000020c 	.word	0x2000020c
 80051f8:	20000514 	.word	0x20000514

080051fc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <vTaskInternalSetTimeOutState+0x24>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <vTaskInternalSetTimeOutState+0x28>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	605a      	str	r2, [r3, #4]
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	20000518 	.word	0x20000518
 8005224:	20000504 	.word	0x20000504

08005228 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <xTaskCheckForTimeOut+0x1a>
 8005238:	4926      	ldr	r1, [pc, #152]	; (80052d4 <xTaskCheckForTimeOut+0xac>)
 800523a:	f640 40eb 	movw	r0, #3307	; 0xceb
 800523e:	f7fb fc21 	bl	8000a84 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <xTaskCheckForTimeOut+0x2a>
 8005248:	4922      	ldr	r1, [pc, #136]	; (80052d4 <xTaskCheckForTimeOut+0xac>)
 800524a:	f640 40ec 	movw	r0, #3308	; 0xcec
 800524e:	f7fb fc19 	bl	8000a84 <vAssertCalled>

    taskENTER_CRITICAL();
 8005252:	f001 f889 	bl	8006368 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005256:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <xTaskCheckForTimeOut+0xb0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d102      	bne.n	8005276 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e026      	b.n	80052c4 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4b18      	ldr	r3, [pc, #96]	; (80052dc <xTaskCheckForTimeOut+0xb4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d00a      	beq.n	8005298 <xTaskCheckForTimeOut+0x70>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	429a      	cmp	r2, r3
 800528a:	d305      	bcc.n	8005298 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800528c:	2301      	movs	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e015      	b.n	80052c4 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d20b      	bcs.n	80052ba <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1ad2      	subs	r2, r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff ffa4 	bl	80051fc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e004      	b.n	80052c4 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80052c4:	f001 f87c 	bl	80063c0 <vPortExitCritical>

    return xReturn;
 80052c8:	697b      	ldr	r3, [r7, #20]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	080088ec 	.word	0x080088ec
 80052d8:	20000504 	.word	0x20000504
 80052dc:	20000518 	.word	0x20000518

080052e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80052e4:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <vTaskMissedYield+0x14>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
}
 80052ea:	bf00      	nop
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000514 	.word	0x20000514

080052f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005300:	f000 f854 	bl	80053ac <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <prvIdleTask+0x2c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d907      	bls.n	800531c <prvIdleTask+0x24>
                {
                    taskYIELD();
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <prvIdleTask+0x30>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 800531c:	f7fb fbfc 	bl	8000b18 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8005320:	e7ee      	b.n	8005300 <prvIdleTask+0x8>
 8005322:	bf00      	nop
 8005324:	20000210 	.word	0x20000210
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005332:	2300      	movs	r3, #0
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	e00c      	b.n	8005352 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4a12      	ldr	r2, [pc, #72]	; (800538c <prvInitialiseTaskLists+0x60>)
 8005344:	4413      	add	r3, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe fb2c 	bl	80039a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3301      	adds	r3, #1
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b1f      	cmp	r3, #31
 8005356:	d9ef      	bls.n	8005338 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005358:	480d      	ldr	r0, [pc, #52]	; (8005390 <prvInitialiseTaskLists+0x64>)
 800535a:	f7fe fb23 	bl	80039a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800535e:	480d      	ldr	r0, [pc, #52]	; (8005394 <prvInitialiseTaskLists+0x68>)
 8005360:	f7fe fb20 	bl	80039a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005364:	480c      	ldr	r0, [pc, #48]	; (8005398 <prvInitialiseTaskLists+0x6c>)
 8005366:	f7fe fb1d 	bl	80039a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800536a:	480c      	ldr	r0, [pc, #48]	; (800539c <prvInitialiseTaskLists+0x70>)
 800536c:	f7fe fb1a 	bl	80039a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005370:	480b      	ldr	r0, [pc, #44]	; (80053a0 <prvInitialiseTaskLists+0x74>)
 8005372:	f7fe fb17 	bl	80039a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <prvInitialiseTaskLists+0x78>)
 8005378:	4a05      	ldr	r2, [pc, #20]	; (8005390 <prvInitialiseTaskLists+0x64>)
 800537a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <prvInitialiseTaskLists+0x7c>)
 800537e:	4a05      	ldr	r2, [pc, #20]	; (8005394 <prvInitialiseTaskLists+0x68>)
 8005380:	601a      	str	r2, [r3, #0]
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000210 	.word	0x20000210
 8005390:	20000490 	.word	0x20000490
 8005394:	200004a4 	.word	0x200004a4
 8005398:	200004c0 	.word	0x200004c0
 800539c:	200004d4 	.word	0x200004d4
 80053a0:	200004ec 	.word	0x200004ec
 80053a4:	200004b8 	.word	0x200004b8
 80053a8:	200004bc 	.word	0x200004bc

080053ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053b2:	e019      	b.n	80053e8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80053b4:	f000 ffd8 	bl	8006368 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <prvCheckTasksWaitingTermination+0x4c>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fe fb77 	bl	8003ab8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80053ca:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <prvCheckTasksWaitingTermination+0x50>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <prvCheckTasksWaitingTermination+0x50>)
 80053d2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <prvCheckTasksWaitingTermination+0x54>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3b01      	subs	r3, #1
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <prvCheckTasksWaitingTermination+0x54>)
 80053dc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80053de:	f000 ffef 	bl	80063c0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f80e 	bl	8005404 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <prvCheckTasksWaitingTermination+0x54>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e1      	bne.n	80053b4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200004d4 	.word	0x200004d4
 80053fc:	20000500 	.word	0x20000500
 8005400:	200004e8 	.word	0x200004e8

08005404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
         * to the task to free any memory allocated at the application level.
         * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
         * for additional information. */
        #if ( configUSE_NEWLIB_REENTRANT == 1 )
            {
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3364      	adds	r3, #100	; 0x64
 8005410:	4618      	mov	r0, r3
 8005412:	f001 fe17 	bl	8007044 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fd84 	bl	8005f28 <vPortFree>
                vPortFree( pxTCB );
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fd81 	bl	8005f28 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <prvResetNextTaskUnblockTime+0x30>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <prvResetNextTaskUnblockTime+0x34>)
 8005440:	f04f 32ff 	mov.w	r2, #4294967295
 8005444:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005446:	e005      	b.n	8005454 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <prvResetNextTaskUnblockTime+0x30>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a04      	ldr	r2, [pc, #16]	; (8005464 <prvResetNextTaskUnblockTime+0x34>)
 8005452:	6013      	str	r3, [r2, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	200004b8 	.word	0x200004b8
 8005464:	20000520 	.word	0x20000520

08005468 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <xTaskGetSchedulerState+0x34>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d102      	bne.n	800547c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005476:	2301      	movs	r3, #1
 8005478:	607b      	str	r3, [r7, #4]
 800547a:	e008      	b.n	800548e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <xTaskGetSchedulerState+0x38>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005484:	2302      	movs	r3, #2
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	e001      	b.n	800548e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800548e:	687b      	ldr	r3, [r7, #4]
    }
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	2000050c 	.word	0x2000050c
 80054a0:	20000528 	.word	0x20000528

080054a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d057      	beq.n	800556a <xTaskPriorityDisinherit+0xc6>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80054ba:	4b2e      	ldr	r3, [pc, #184]	; (8005574 <xTaskPriorityDisinherit+0xd0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d004      	beq.n	80054ce <xTaskPriorityDisinherit+0x2a>
 80054c4:	492c      	ldr	r1, [pc, #176]	; (8005578 <xTaskPriorityDisinherit+0xd4>)
 80054c6:	f241 003d 	movw	r0, #4157	; 0x103d
 80054ca:	f7fb fadb 	bl	8000a84 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <xTaskPriorityDisinherit+0x3c>
 80054d6:	4928      	ldr	r1, [pc, #160]	; (8005578 <xTaskPriorityDisinherit+0xd4>)
 80054d8:	f241 003e 	movw	r0, #4158	; 0x103e
 80054dc:	f7fb fad2 	bl	8000a84 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e4:	1e5a      	subs	r2, r3, #1
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	661a      	str	r2, [r3, #96]	; 0x60

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d039      	beq.n	800556a <xTaskPriorityDisinherit+0xc6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d135      	bne.n	800556a <xTaskPriorityDisinherit+0xc6>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3304      	adds	r3, #4
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fad8 	bl	8003ab8 <uxListRemove>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	2201      	movs	r2, #1
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43da      	mvns	r2, r3
 800551a:	4b18      	ldr	r3, [pc, #96]	; (800557c <xTaskPriorityDisinherit+0xd8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4013      	ands	r3, r2
 8005520:	4a16      	ldr	r2, [pc, #88]	; (800557c <xTaskPriorityDisinherit+0xd8>)
 8005522:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	f1c3 0220 	rsb	r2, r3, #32
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	2201      	movs	r2, #1
 800553e:	409a      	lsls	r2, r3
 8005540:	4b0e      	ldr	r3, [pc, #56]	; (800557c <xTaskPriorityDisinherit+0xd8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	4a0d      	ldr	r2, [pc, #52]	; (800557c <xTaskPriorityDisinherit+0xd8>)
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <xTaskPriorityDisinherit+0xdc>)
 8005558:	441a      	add	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7fe fa4c 	bl	80039fe <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005566:	2301      	movs	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800556a:	68fb      	ldr	r3, [r7, #12]
    }
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	2000020c 	.word	0x2000020c
 8005578:	080088ec 	.word	0x080088ec
 800557c:	20000508 	.word	0x20000508
 8005580:	20000210 	.word	0x20000210

08005584 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <vTaskGenericNotifyGiveFromISR+0x1c>
 8005596:	4943      	ldr	r1, [pc, #268]	; (80056a4 <vTaskGenericNotifyGiveFromISR+0x120>)
 8005598:	f241 30f8 	movw	r0, #5112	; 0x13f8
 800559c:	f7fb fa72 	bl	8000a84 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d004      	beq.n	80055b0 <vTaskGenericNotifyGiveFromISR+0x2c>
 80055a6:	493f      	ldr	r1, [pc, #252]	; (80056a4 <vTaskGenericNotifyGiveFromISR+0x120>)
 80055a8:	f241 30f9 	movw	r0, #5113	; 0x13f9
 80055ac:	f7fb fa6a 	bl	8000a84 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055b0:	f000 ffb4 	bl	800651c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 80055b8:	f3ef 8211 	mrs	r2, BASEPRI
 80055bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80055c0:	b672      	cpsid	i
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	b662      	cpsie	i
 80055d0:	61ba      	str	r2, [r7, #24]
 80055d2:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 80055d4:	69bb      	ldr	r3, [r7, #24]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055d6:	623b      	str	r3, [r7, #32]
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80055d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4413      	add	r3, r2
 80055de:	33c8      	adds	r3, #200	; 0xc8
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	77fb      	strb	r3, [r7, #31]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80055e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4413      	add	r3, r2
 80055ea:	33c8      	adds	r3, #200	; 0xc8
 80055ec:	2202      	movs	r2, #2
 80055ee:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80055f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	3330      	adds	r3, #48	; 0x30
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	3330      	adds	r3, #48	; 0x30
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800560a:	7ffb      	ldrb	r3, [r7, #31]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d13f      	bne.n	8005690 <vTaskGenericNotifyGiveFromISR+0x10c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <vTaskGenericNotifyGiveFromISR+0x9e>
 8005618:	4922      	ldr	r1, [pc, #136]	; (80056a4 <vTaskGenericNotifyGiveFromISR+0x120>)
 800561a:	f241 401f 	movw	r0, #5151	; 0x141f
 800561e:	f7fb fa31 	bl	8000a84 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005622:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <vTaskGenericNotifyGiveFromISR+0x124>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d11c      	bne.n	8005664 <vTaskGenericNotifyGiveFromISR+0xe0>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	3304      	adds	r3, #4
 800562e:	4618      	mov	r0, r3
 8005630:	f7fe fa42 	bl	8003ab8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	2201      	movs	r2, #1
 800563a:	409a      	lsls	r2, r3
 800563c:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <vTaskGenericNotifyGiveFromISR+0x128>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4313      	orrs	r3, r2
 8005642:	4a1a      	ldr	r2, [pc, #104]	; (80056ac <vTaskGenericNotifyGiveFromISR+0x128>)
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <vTaskGenericNotifyGiveFromISR+0x12c>)
 8005654:	441a      	add	r2, r3
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	3304      	adds	r3, #4
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f7fe f9ce 	bl	80039fe <vListInsertEnd>
 8005662:	e005      	b.n	8005670 <vTaskGenericNotifyGiveFromISR+0xec>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	3318      	adds	r3, #24
 8005668:	4619      	mov	r1, r3
 800566a:	4812      	ldr	r0, [pc, #72]	; (80056b4 <vTaskGenericNotifyGiveFromISR+0x130>)
 800566c:	f7fe f9c7 	bl	80039fe <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005674:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <vTaskGenericNotifyGiveFromISR+0x134>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	429a      	cmp	r2, r3
 800567c:	d908      	bls.n	8005690 <vTaskGenericNotifyGiveFromISR+0x10c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <vTaskGenericNotifyGiveFromISR+0x106>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800568a:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <vTaskGenericNotifyGiveFromISR+0x138>)
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f383 8811 	msr	BASEPRI, r3
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 800569a:	bf00      	nop
 800569c:	3728      	adds	r7, #40	; 0x28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	080088ec 	.word	0x080088ec
 80056a8:	20000528 	.word	0x20000528
 80056ac:	20000508 	.word	0x20000508
 80056b0:	20000210 	.word	0x20000210
 80056b4:	200004c0 	.word	0x200004c0
 80056b8:	2000020c 	.word	0x2000020c
 80056bc:	20000514 	.word	0x20000514

080056c0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80056ca:	4b29      	ldr	r3, [pc, #164]	; (8005770 <prvAddCurrentTaskToDelayedList+0xb0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056d0:	4b28      	ldr	r3, [pc, #160]	; (8005774 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3304      	adds	r3, #4
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe f9ee 	bl	8003ab8 <uxListRemove>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10b      	bne.n	80056fa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056e2:	4b24      	ldr	r3, [pc, #144]	; (8005774 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	2201      	movs	r2, #1
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	43da      	mvns	r2, r3
 80056f0:	4b21      	ldr	r3, [pc, #132]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4013      	ands	r3, r2
 80056f6:	4a20      	ldr	r2, [pc, #128]	; (8005778 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056f8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d10a      	bne.n	8005718 <prvAddCurrentTaskToDelayedList+0x58>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005708:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <prvAddCurrentTaskToDelayedList+0xb4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3304      	adds	r3, #4
 800570e:	4619      	mov	r1, r3
 8005710:	481a      	ldr	r0, [pc, #104]	; (800577c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005712:	f7fe f974 	bl	80039fe <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005716:	e026      	b.n	8005766 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005720:	4b14      	ldr	r3, [pc, #80]	; (8005774 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	d209      	bcs.n	8005744 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005730:	4b13      	ldr	r3, [pc, #76]	; (8005780 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3304      	adds	r3, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f7fe f982 	bl	8003a46 <vListInsert>
}
 8005742:	e010      	b.n	8005766 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005744:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <prvAddCurrentTaskToDelayedList+0xb4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f7fe f978 	bl	8003a46 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	429a      	cmp	r2, r3
 800575e:	d202      	bcs.n	8005766 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005760:	4a09      	ldr	r2, [pc, #36]	; (8005788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6013      	str	r3, [r2, #0]
}
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000504 	.word	0x20000504
 8005774:	2000020c 	.word	0x2000020c
 8005778:	20000508 	.word	0x20000508
 800577c:	200004ec 	.word	0x200004ec
 8005780:	200004bc 	.word	0x200004bc
 8005784:	200004b8 	.word	0x200004b8
 8005788:	20000520 	.word	0x20000520

0800578c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005792:	2300      	movs	r3, #0
 8005794:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005796:	f000 fad3 	bl	8005d40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800579a:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <xTimerCreateTimerTask+0x48>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80057a2:	4b0d      	ldr	r3, [pc, #52]	; (80057d8 <xTimerCreateTimerTask+0x4c>)
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	231f      	movs	r3, #31
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	2300      	movs	r3, #0
 80057ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80057b0:	490a      	ldr	r1, [pc, #40]	; (80057dc <xTimerCreateTimerTask+0x50>)
 80057b2:	480b      	ldr	r0, [pc, #44]	; (80057e0 <xTimerCreateTimerTask+0x54>)
 80057b4:	f7fe fecc 	bl	8004550 <xTaskCreate>
 80057b8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <xTimerCreateTimerTask+0x3e>
 80057c0:	4908      	ldr	r1, [pc, #32]	; (80057e4 <xTimerCreateTimerTask+0x58>)
 80057c2:	f240 100d 	movw	r0, #269	; 0x10d
 80057c6:	f7fb f95d 	bl	8000a84 <vAssertCalled>
        return xReturn;
 80057ca:	687b      	ldr	r3, [r7, #4]
    }
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	2000055c 	.word	0x2000055c
 80057d8:	20000560 	.word	0x20000560
 80057dc:	08008928 	.word	0x08008928
 80057e0:	08005911 	.word	0x08005911
 80057e4:	08008930 	.word	0x08008930

080057e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	; 0x28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <xTimerGenericCommand+0x22>
 8005800:	491c      	ldr	r1, [pc, #112]	; (8005874 <xTimerGenericCommand+0x8c>)
 8005802:	f44f 70c1 	mov.w	r0, #386	; 0x182
 8005806:	f7fb f93d 	bl	8000a84 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800580a:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <xTimerGenericCommand+0x90>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d02a      	beq.n	8005868 <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b05      	cmp	r3, #5
 8005822:	dc18      	bgt.n	8005856 <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005824:	f7ff fe20 	bl	8005468 <xTaskGetSchedulerState>
 8005828:	4603      	mov	r3, r0
 800582a:	2b02      	cmp	r3, #2
 800582c:	d109      	bne.n	8005842 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800582e:	4b12      	ldr	r3, [pc, #72]	; (8005878 <xTimerGenericCommand+0x90>)
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	f107 0114 	add.w	r1, r7, #20
 8005836:	2300      	movs	r3, #0
 8005838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583a:	f7fe fa37 	bl	8003cac <xQueueGenericSend>
 800583e:	6278      	str	r0, [r7, #36]	; 0x24
 8005840:	e012      	b.n	8005868 <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <xTimerGenericCommand+0x90>)
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	f107 0114 	add.w	r1, r7, #20
 800584a:	2300      	movs	r3, #0
 800584c:	2200      	movs	r2, #0
 800584e:	f7fe fa2d 	bl	8003cac <xQueueGenericSend>
 8005852:	6278      	str	r0, [r7, #36]	; 0x24
 8005854:	e008      	b.n	8005868 <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005856:	4b08      	ldr	r3, [pc, #32]	; (8005878 <xTimerGenericCommand+0x90>)
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f107 0114 	add.w	r1, r7, #20
 800585e:	2300      	movs	r3, #0
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	f7fe fb27 	bl	8003eb4 <xQueueGenericSendFromISR>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800586a:	4618      	mov	r0, r3
 800586c:	3728      	adds	r7, #40	; 0x28
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	08008930 	.word	0x08008930
 8005878:	2000055c 	.word	0x2000055c

0800587c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af02      	add	r7, sp, #8
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005886:	4b20      	ldr	r3, [pc, #128]	; (8005908 <prvProcessExpiredTimer+0x8c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3304      	adds	r3, #4
 8005894:	4618      	mov	r0, r3
 8005896:	f7fe f90f 	bl	8003ab8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01d      	beq.n	80058e4 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	18d1      	adds	r1, r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f8cf 	bl	8005a58 <prvInsertTimerInActiveList>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01a      	beq.n	80058f6 <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058c0:	2300      	movs	r3, #0
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2300      	movs	r3, #0
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	2100      	movs	r1, #0
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff ff8c 	bl	80057e8 <xTimerGenericCommand>
 80058d0:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10e      	bne.n	80058f6 <prvProcessExpiredTimer+0x7a>
 80058d8:	490c      	ldr	r1, [pc, #48]	; (800590c <prvProcessExpiredTimer+0x90>)
 80058da:	f44f 7005 	mov.w	r0, #532	; 0x214
 80058de:	f7fb f8d1 	bl	8000a84 <vAssertCalled>
 80058e2:	e008      	b.n	80058f6 <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	4798      	blx	r3
    }
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000554 	.word	0x20000554
 800590c:	08008930 	.word	0x08008930

08005910 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005918:	f107 0308 	add.w	r3, r7, #8
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f857 	bl	80059d0 <prvGetNextExpireTime>
 8005922:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4619      	mov	r1, r3
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f803 	bl	8005934 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800592e:	f000 f8d5 	bl	8005adc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005932:	e7f1      	b.n	8005918 <prvTimerTask+0x8>

08005934 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800593e:	f7ff f9c9 	bl	8004cd4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005942:	f107 0308 	add.w	r3, r7, #8
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f866 	bl	8005a18 <prvSampleTimeNow>
 800594c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d130      	bne.n	80059b6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <prvProcessTimerOrBlockTask+0x3c>
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	429a      	cmp	r2, r3
 8005960:	d806      	bhi.n	8005970 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005962:	f7ff f9c5 	bl	8004cf0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ff87 	bl	800587c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800596e:	e024      	b.n	80059ba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d008      	beq.n	8005988 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005976:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <prvProcessTimerOrBlockTask+0x90>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <prvProcessTimerOrBlockTask+0x50>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <prvProcessTimerOrBlockTask+0x52>
 8005984:	2300      	movs	r3, #0
 8005986:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <prvProcessTimerOrBlockTask+0x94>)
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	4619      	mov	r1, r3
 8005996:	f7fe fd4f 	bl	8004438 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800599a:	f7ff f9a9 	bl	8004cf0 <xTaskResumeAll>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <prvProcessTimerOrBlockTask+0x98>)
 80059a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	f3bf 8f6f 	isb	sy
    }
 80059b4:	e001      	b.n	80059ba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80059b6:	f7ff f99b 	bl	8004cf0 <xTaskResumeAll>
    }
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000558 	.word	0x20000558
 80059c8:	2000055c 	.word	0x2000055c
 80059cc:	e000ed04 	.word	0xe000ed04

080059d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059d8:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <prvGetNextExpireTime+0x44>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <prvGetNextExpireTime+0x16>
 80059e2:	2201      	movs	r2, #1
 80059e4:	e000      	b.n	80059e8 <prvGetNextExpireTime+0x18>
 80059e6:	2200      	movs	r2, #0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <prvGetNextExpireTime+0x44>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e001      	b.n	8005a04 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005a04:	68fb      	ldr	r3, [r7, #12]
    }
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	20000554 	.word	0x20000554

08005a18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005a20:	f7ff f9fe 	bl	8004e20 <xTaskGetTickCount>
 8005a24:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005a26:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <prvSampleTimeNow+0x3c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d205      	bcs.n	8005a3c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005a30:	f000 f926 	bl	8005c80 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e002      	b.n	8005a42 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005a42:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <prvSampleTimeNow+0x3c>)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005a48:	68fb      	ldr	r3, [r7, #12]
    }
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000564 	.word	0x20000564

08005a58 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d812      	bhi.n	8005aa4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	1ad2      	subs	r2, r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d302      	bcc.n	8005a92 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	e01b      	b.n	8005aca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <prvInsertTimerInActiveList+0x7c>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	f7fd ffd2 	bl	8003a46 <vListInsert>
 8005aa2:	e012      	b.n	8005aca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d206      	bcs.n	8005aba <prvInsertTimerInActiveList+0x62>
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d302      	bcc.n	8005aba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	e007      	b.n	8005aca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <prvInsertTimerInActiveList+0x80>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f7fd ffbe 	bl	8003a46 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005aca:	697b      	ldr	r3, [r7, #20]
    }
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000558 	.word	0x20000558
 8005ad8:	20000554 	.word	0x20000554

08005adc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08c      	sub	sp, #48	; 0x30
 8005ae0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ae2:	e0b9      	b.n	8005c58 <prvProcessReceivedCommands+0x17c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da13      	bge.n	8005b12 <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	3304      	adds	r3, #4
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <prvProcessReceivedCommands+0x26>
 8005af8:	495f      	ldr	r1, [pc, #380]	; (8005c78 <prvProcessReceivedCommands+0x19c>)
 8005afa:	f240 20fa 	movw	r0, #762	; 0x2fa
 8005afe:	f7fa ffc1 	bl	8000a84 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b08:	6850      	ldr	r0, [r2, #4]
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0c:	6892      	ldr	r2, [r2, #8]
 8005b0e:	4611      	mov	r1, r2
 8005b10:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f2c0 809e 	blt.w	8005c56 <prvProcessReceivedCommands+0x17a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d004      	beq.n	8005b30 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd ffc4 	bl	8003ab8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b30:	1d3b      	adds	r3, r7, #4
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff ff70 	bl	8005a18 <prvSampleTimeNow>
 8005b38:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b09      	cmp	r3, #9
 8005b3e:	f200 808b 	bhi.w	8005c58 <prvProcessReceivedCommands+0x17c>
 8005b42:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <prvProcessReceivedCommands+0x6c>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b71 	.word	0x08005b71
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b71 	.word	0x08005b71
 8005b54:	08005bdb 	.word	0x08005bdb
 8005b58:	08005bef 	.word	0x08005bef
 8005b5c:	08005c2d 	.word	0x08005c2d
 8005b60:	08005b71 	.word	0x08005b71
 8005b64:	08005b71 	.word	0x08005b71
 8005b68:	08005bdb 	.word	0x08005bdb
 8005b6c:	08005bef 	.word	0x08005bef
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	18d1      	adds	r1, r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	6a38      	ldr	r0, [r7, #32]
 8005b90:	f7ff ff62 	bl	8005a58 <prvInsertTimerInActiveList>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d05e      	beq.n	8005c58 <prvProcessReceivedCommands+0x17c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	6a38      	ldr	r0, [r7, #32]
 8005ba0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d053      	beq.n	8005c58 <prvProcessReceivedCommands+0x17c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	441a      	add	r2, r3
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	6a38      	ldr	r0, [r7, #32]
 8005bc2:	f7ff fe11 	bl	80057e8 <xTimerGenericCommand>
 8005bc6:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d144      	bne.n	8005c58 <prvProcessReceivedCommands+0x17c>
 8005bce:	492a      	ldr	r1, [pc, #168]	; (8005c78 <prvProcessReceivedCommands+0x19c>)
 8005bd0:	f240 3036 	movw	r0, #822	; 0x336
 8005bd4:	f7fa ff56 	bl	8000a84 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005bd8:	e03e      	b.n	8005c58 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005bec:	e034      	b.n	8005c58 <prvProcessReceivedCommands+0x17c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bf4:	f043 0301 	orr.w	r3, r3, #1
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <prvProcessReceivedCommands+0x13c>
 8005c0e:	491a      	ldr	r1, [pc, #104]	; (8005c78 <prvProcessReceivedCommands+0x19c>)
 8005c10:	f240 304f 	movw	r0, #847	; 0x34f
 8005c14:	f7fa ff36 	bl	8000a84 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	18d1      	adds	r1, r2, r3
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	6a38      	ldr	r0, [r7, #32]
 8005c26:	f7ff ff17 	bl	8005a58 <prvInsertTimerInActiveList>
                        break;
 8005c2a:	e015      	b.n	8005c58 <prvProcessReceivedCommands+0x17c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 8005c3a:	6a38      	ldr	r0, [r7, #32]
 8005c3c:	f000 f974 	bl	8005f28 <vPortFree>
 8005c40:	e00a      	b.n	8005c58 <prvProcessReceivedCommands+0x17c>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005c54:	e000      	b.n	8005c58 <prvProcessReceivedCommands+0x17c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005c56:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c58:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <prvProcessReceivedCommands+0x1a0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f107 0108 	add.w	r1, r7, #8
 8005c60:	2200      	movs	r2, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe f9d2 	bl	800400c <xQueueReceive>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f47f af3a 	bne.w	8005ae4 <prvProcessReceivedCommands+0x8>
        }
    }
 8005c70:	bf00      	nop
 8005c72:	3728      	adds	r7, #40	; 0x28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	08008930 	.word	0x08008930
 8005c7c:	2000055c 	.word	0x2000055c

08005c80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c86:	e042      	b.n	8005d0e <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c88:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <prvSwitchTimerLists+0xb4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c92:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <prvSwitchTimerLists+0xb4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fd ff09 	bl	8003ab8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d028      	beq.n	8005d0e <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d90e      	bls.n	8005cec <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cda:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <prvSwitchTimerLists+0xb4>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f7fd feae 	bl	8003a46 <vListInsert>
 8005cea:	e010      	b.n	8005d0e <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cec:	2300      	movs	r3, #0
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff fd76 	bl	80057e8 <xTimerGenericCommand>
 8005cfc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <prvSwitchTimerLists+0x8e>
 8005d04:	490c      	ldr	r1, [pc, #48]	; (8005d38 <prvSwitchTimerLists+0xb8>)
 8005d06:	f240 30a9 	movw	r0, #937	; 0x3a9
 8005d0a:	f7fa febb 	bl	8000a84 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d0e:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <prvSwitchTimerLists+0xb4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1b7      	bne.n	8005c88 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005d18:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <prvSwitchTimerLists+0xb4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005d1e:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <prvSwitchTimerLists+0xbc>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a04      	ldr	r2, [pc, #16]	; (8005d34 <prvSwitchTimerLists+0xb4>)
 8005d24:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005d26:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <prvSwitchTimerLists+0xbc>)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	6013      	str	r3, [r2, #0]
    }
 8005d2c:	bf00      	nop
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000554 	.word	0x20000554
 8005d38:	08008930 	.word	0x08008930
 8005d3c:	20000558 	.word	0x20000558

08005d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005d44:	f000 fb10 	bl	8006368 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005d48:	4b12      	ldr	r3, [pc, #72]	; (8005d94 <prvCheckForValidListAndQueue+0x54>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d11d      	bne.n	8005d8c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005d50:	4811      	ldr	r0, [pc, #68]	; (8005d98 <prvCheckForValidListAndQueue+0x58>)
 8005d52:	f7fd fe27 	bl	80039a4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005d56:	4811      	ldr	r0, [pc, #68]	; (8005d9c <prvCheckForValidListAndQueue+0x5c>)
 8005d58:	f7fd fe24 	bl	80039a4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005d5c:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <prvCheckForValidListAndQueue+0x60>)
 8005d5e:	4a0e      	ldr	r2, [pc, #56]	; (8005d98 <prvCheckForValidListAndQueue+0x58>)
 8005d60:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005d62:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <prvCheckForValidListAndQueue+0x64>)
 8005d64:	4a0d      	ldr	r2, [pc, #52]	; (8005d9c <prvCheckForValidListAndQueue+0x5c>)
 8005d66:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2110      	movs	r1, #16
 8005d6c:	200c      	movs	r0, #12
 8005d6e:	f7fd ff31 	bl	8003bd4 <xQueueGenericCreate>
 8005d72:	4602      	mov	r2, r0
 8005d74:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <prvCheckForValidListAndQueue+0x54>)
 8005d76:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <prvCheckForValidListAndQueue+0x54>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d80:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <prvCheckForValidListAndQueue+0x54>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4908      	ldr	r1, [pc, #32]	; (8005da8 <prvCheckForValidListAndQueue+0x68>)
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fb2e 	bl	80043e8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005d8c:	f000 fb18 	bl	80063c0 <vPortExitCritical>
    }
 8005d90:	bf00      	nop
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	2000055c 	.word	0x2000055c
 8005d98:	2000052c 	.word	0x2000052c
 8005d9c:	20000540 	.word	0x20000540
 8005da0:	20000554 	.word	0x20000554
 8005da4:	20000558 	.word	0x20000558
 8005da8:	08008958 	.word	0x08008958

08005dac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8005db8:	f7fe ff8c 	bl	8004cd4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005dbc:	4b53      	ldr	r3, [pc, #332]	; (8005f0c <pvPortMalloc+0x160>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005dc4:	f000 f908 	bl	8005fd8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dc8:	4b51      	ldr	r3, [pc, #324]	; (8005f10 <pvPortMalloc+0x164>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f040 8085 	bne.w	8005ee0 <pvPortMalloc+0x134>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d016      	beq.n	8005e0a <pvPortMalloc+0x5e>
            {
                xWantedSize += xHeapStructSize;
 8005ddc:	2208      	movs	r2, #8
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4413      	add	r3, r2
 8005de2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00d      	beq.n	8005e0a <pvPortMalloc+0x5e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f023 0307 	bic.w	r3, r3, #7
 8005df4:	3308      	adds	r3, #8
 8005df6:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <pvPortMalloc+0x5e>
 8005e02:	4944      	ldr	r1, [pc, #272]	; (8005f14 <pvPortMalloc+0x168>)
 8005e04:	2097      	movs	r0, #151	; 0x97
 8005e06:	f7fa fe3d 	bl	8000a84 <vAssertCalled>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d067      	beq.n	8005ee0 <pvPortMalloc+0x134>
 8005e10:	4b41      	ldr	r3, [pc, #260]	; (8005f18 <pvPortMalloc+0x16c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d862      	bhi.n	8005ee0 <pvPortMalloc+0x134>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005e1a:	4b40      	ldr	r3, [pc, #256]	; (8005f1c <pvPortMalloc+0x170>)
 8005e1c:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8005e1e:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <pvPortMalloc+0x170>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e24:	e004      	b.n	8005e30 <pvPortMalloc+0x84>
                {
                    pxPreviousBlock = pxBlock;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d903      	bls.n	8005e42 <pvPortMalloc+0x96>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f1      	bne.n	8005e26 <pvPortMalloc+0x7a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8005e42:	4b32      	ldr	r3, [pc, #200]	; (8005f0c <pvPortMalloc+0x160>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d049      	beq.n	8005ee0 <pvPortMalloc+0x134>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2208      	movs	r2, #8
 8005e52:	4413      	add	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	1ad2      	subs	r2, r2, r3
 8005e66:	2308      	movs	r3, #8
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d918      	bls.n	8005ea0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4413      	add	r3, r2
 8005e74:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <pvPortMalloc+0xdc>
 8005e80:	4924      	ldr	r1, [pc, #144]	; (8005f14 <pvPortMalloc+0x168>)
 8005e82:	20c5      	movs	r0, #197	; 0xc5
 8005e84:	f7fa fdfe 	bl	8000a84 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e9a:	68b8      	ldr	r0, [r7, #8]
 8005e9c:	f000 f8fe 	bl	800609c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ea0:	4b1d      	ldr	r3, [pc, #116]	; (8005f18 <pvPortMalloc+0x16c>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	4a1b      	ldr	r2, [pc, #108]	; (8005f18 <pvPortMalloc+0x16c>)
 8005eac:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005eae:	4b1a      	ldr	r3, [pc, #104]	; (8005f18 <pvPortMalloc+0x16c>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <pvPortMalloc+0x174>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d203      	bcs.n	8005ec2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005eba:	4b17      	ldr	r3, [pc, #92]	; (8005f18 <pvPortMalloc+0x16c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <pvPortMalloc+0x174>)
 8005ec0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <pvPortMalloc+0x164>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <pvPortMalloc+0x178>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3301      	adds	r3, #1
 8005edc:	4a11      	ldr	r2, [pc, #68]	; (8005f24 <pvPortMalloc+0x178>)
 8005ede:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005ee0:	f7fe ff06 	bl	8004cf0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8005eea:	f7fa fe01 	bl	8000af0 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <pvPortMalloc+0x156>
 8005ef8:	4906      	ldr	r1, [pc, #24]	; (8005f14 <pvPortMalloc+0x168>)
 8005efa:	f44f 7083 	mov.w	r0, #262	; 0x106
 8005efe:	f7fa fdc1 	bl	8000a84 <vAssertCalled>
    return pvReturn;
 8005f02:	68fb      	ldr	r3, [r7, #12]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20020570 	.word	0x20020570
 8005f10:	20020584 	.word	0x20020584
 8005f14:	08008960 	.word	0x08008960
 8005f18:	20020574 	.word	0x20020574
 8005f1c:	20020568 	.word	0x20020568
 8005f20:	20020578 	.word	0x20020578
 8005f24:	2002057c 	.word	0x2002057c

08005f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d041      	beq.n	8005fbe <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	425b      	negs	r3, r3
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4413      	add	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <vPortFree+0xa0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d104      	bne.n	8005f60 <vPortFree+0x38>
 8005f56:	491d      	ldr	r1, [pc, #116]	; (8005fcc <vPortFree+0xa4>)
 8005f58:	f44f 708d 	mov.w	r0, #282	; 0x11a
 8005f5c:	f7fa fd92 	bl	8000a84 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <vPortFree+0x4a>
 8005f68:	4918      	ldr	r1, [pc, #96]	; (8005fcc <vPortFree+0xa4>)
 8005f6a:	f240 101b 	movw	r0, #283	; 0x11b
 8005f6e:	f7fa fd89 	bl	8000a84 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <vPortFree+0xa0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01e      	beq.n	8005fbe <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d11a      	bne.n	8005fbe <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <vPortFree+0xa0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	43db      	mvns	r3, r3
 8005f92:	401a      	ands	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005f98:	f7fe fe9c 	bl	8004cd4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <vPortFree+0xa8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <vPortFree+0xa8>)
 8005fa8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005faa:	68b8      	ldr	r0, [r7, #8]
 8005fac:	f000 f876 	bl	800609c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <vPortFree+0xac>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	4a07      	ldr	r2, [pc, #28]	; (8005fd4 <vPortFree+0xac>)
 8005fb8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005fba:	f7fe fe99 	bl	8004cf0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20020584 	.word	0x20020584
 8005fcc:	08008960 	.word	0x08008960
 8005fd0:	20020574 	.word	0x20020574
 8005fd4:	20020580 	.word	0x20020580

08005fd8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fe2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005fe4:	4b27      	ldr	r3, [pc, #156]	; (8006084 <prvHeapInit+0xac>)
 8005fe6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3307      	adds	r3, #7
 8005ff6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0307 	bic.w	r3, r3, #7
 8005ffe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <prvHeapInit+0xac>)
 8006008:	4413      	add	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006010:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <prvHeapInit+0xb0>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006016:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <prvHeapInit+0xb0>)
 8006018:	2200      	movs	r2, #0
 800601a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	4413      	add	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006024:	2208      	movs	r2, #8
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0307 	bic.w	r3, r3, #7
 8006032:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <prvHeapInit+0xb4>)
 8006038:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800603a:	4b14      	ldr	r3, [pc, #80]	; (800608c <prvHeapInit+0xb4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <prvHeapInit+0xb4>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	1ad2      	subs	r2, r2, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006058:	4b0c      	ldr	r3, [pc, #48]	; (800608c <prvHeapInit+0xb4>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <prvHeapInit+0xb8>)
 8006066:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4a09      	ldr	r2, [pc, #36]	; (8006094 <prvHeapInit+0xbc>)
 800606e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006070:	4b09      	ldr	r3, [pc, #36]	; (8006098 <prvHeapInit+0xc0>)
 8006072:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006076:	601a      	str	r2, [r3, #0]
}
 8006078:	bf00      	nop
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	20000568 	.word	0x20000568
 8006088:	20020568 	.word	0x20020568
 800608c:	20020570 	.word	0x20020570
 8006090:	20020578 	.word	0x20020578
 8006094:	20020574 	.word	0x20020574
 8006098:	20020584 	.word	0x20020584

0800609c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060a4:	4b28      	ldr	r3, [pc, #160]	; (8006148 <prvInsertBlockIntoFreeList+0xac>)
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	e002      	b.n	80060b0 <prvInsertBlockIntoFreeList+0x14>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d8f7      	bhi.n	80060aa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	4413      	add	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d108      	bne.n	80060de <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	441a      	add	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	441a      	add	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d118      	bne.n	8006124 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b15      	ldr	r3, [pc, #84]	; (800614c <prvInsertBlockIntoFreeList+0xb0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d00d      	beq.n	800611a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	441a      	add	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	e008      	b.n	800612c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800611a:	4b0c      	ldr	r3, [pc, #48]	; (800614c <prvInsertBlockIntoFreeList+0xb0>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	e003      	b.n	800612c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d002      	beq.n	800613a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20020568 	.word	0x20020568
 800614c:	20020570 	.word	0x20020570

08006150 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b04      	subs	r3, #4
 8006160:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006168:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3b04      	subs	r3, #4
 800616e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3b04      	subs	r3, #4
 800617e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006180:	4a0c      	ldr	r2, [pc, #48]	; (80061b4 <pxPortInitialiseStack+0x64>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3b14      	subs	r3, #20
 800618a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3b04      	subs	r3, #4
 8006196:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f06f 0202 	mvn.w	r2, #2
 800619e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3b20      	subs	r3, #32
 80061a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	080061b9 	.word	0x080061b9

080061b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80061c2:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <prvTaskExitError+0x44>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d003      	beq.n	80061d4 <prvTaskExitError+0x1c>
 80061cc:	490c      	ldr	r1, [pc, #48]	; (8006200 <prvTaskExitError+0x48>)
 80061ce:	20df      	movs	r0, #223	; 0xdf
 80061d0:	f7fa fc58 	bl	8000a84 <vAssertCalled>
        __asm volatile
 80061d4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80061d8:	b672      	cpsid	i
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	b662      	cpsie	i
 80061e8:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80061ea:	bf00      	nop
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0fc      	beq.n	80061ec <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000010 	.word	0x20000010
 8006200:	08008998 	.word	0x08008998
	...

08006210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006210:	4b07      	ldr	r3, [pc, #28]	; (8006230 <pxCurrentTCBConst2>)
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	6808      	ldr	r0, [r1, #0]
 8006216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621a:	f380 8809 	msr	PSP, r0
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f04f 0000 	mov.w	r0, #0
 8006226:	f380 8811 	msr	BASEPRI, r0
 800622a:	4770      	bx	lr
 800622c:	f3af 8000 	nop.w

08006230 <pxCurrentTCBConst2>:
 8006230:	2000020c 	.word	0x2000020c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop

08006238 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006238:	4808      	ldr	r0, [pc, #32]	; (800625c <prvPortStartFirstTask+0x24>)
 800623a:	6800      	ldr	r0, [r0, #0]
 800623c:	6800      	ldr	r0, [r0, #0]
 800623e:	f380 8808 	msr	MSP, r0
 8006242:	f04f 0000 	mov.w	r0, #0
 8006246:	f380 8814 	msr	CONTROL, r0
 800624a:	b662      	cpsie	i
 800624c:	b661      	cpsie	f
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	df00      	svc	0
 8006258:	bf00      	nop
 800625a:	0000      	.short	0x0000
 800625c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop

08006264 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800626a:	4b38      	ldr	r3, [pc, #224]	; (800634c <xPortStartScheduler+0xe8>)
 800626c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	22ff      	movs	r2, #255	; 0xff
 800627a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	b2da      	uxtb	r2, r3
 800628e:	4b30      	ldr	r3, [pc, #192]	; (8006350 <xPortStartScheduler+0xec>)
 8006290:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006292:	4b30      	ldr	r3, [pc, #192]	; (8006354 <xPortStartScheduler+0xf0>)
 8006294:	2207      	movs	r2, #7
 8006296:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006298:	e009      	b.n	80062ae <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 800629a:	4b2e      	ldr	r3, [pc, #184]	; (8006354 <xPortStartScheduler+0xf0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3b01      	subs	r3, #1
 80062a0:	4a2c      	ldr	r2, [pc, #176]	; (8006354 <xPortStartScheduler+0xf0>)
 80062a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	2b80      	cmp	r3, #128	; 0x80
 80062b8:	d0ef      	beq.n	800629a <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80062ba:	4b26      	ldr	r3, [pc, #152]	; (8006354 <xPortStartScheduler+0xf0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1c3 0307 	rsb	r3, r3, #7
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d004      	beq.n	80062d0 <xPortStartScheduler+0x6c>
 80062c6:	4924      	ldr	r1, [pc, #144]	; (8006358 <xPortStartScheduler+0xf4>)
 80062c8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80062cc:	f7fa fbda 	bl	8000a84 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062d0:	4b20      	ldr	r3, [pc, #128]	; (8006354 <xPortStartScheduler+0xf0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f1c3 0307 	rsb	r3, r3, #7
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d004      	beq.n	80062e6 <xPortStartScheduler+0x82>
 80062dc:	491e      	ldr	r1, [pc, #120]	; (8006358 <xPortStartScheduler+0xf4>)
 80062de:	f240 1053 	movw	r0, #339	; 0x153
 80062e2:	f7fa fbcf 	bl	8000a84 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062e6:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <xPortStartScheduler+0xf0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	4a19      	ldr	r2, [pc, #100]	; (8006354 <xPortStartScheduler+0xf0>)
 80062ee:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062f0:	4b18      	ldr	r3, [pc, #96]	; (8006354 <xPortStartScheduler+0xf0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062f8:	4a16      	ldr	r2, [pc, #88]	; (8006354 <xPortStartScheduler+0xf0>)
 80062fa:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006304:	4b15      	ldr	r3, [pc, #84]	; (800635c <xPortStartScheduler+0xf8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a14      	ldr	r2, [pc, #80]	; (800635c <xPortStartScheduler+0xf8>)
 800630a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800630e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006310:	4b12      	ldr	r3, [pc, #72]	; (800635c <xPortStartScheduler+0xf8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a11      	ldr	r2, [pc, #68]	; (800635c <xPortStartScheduler+0xf8>)
 8006316:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800631a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800631c:	f000 f8ce 	bl	80064bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <xPortStartScheduler+0xfc>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006326:	f000 f8ed 	bl	8006504 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800632a:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <xPortStartScheduler+0x100>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a0d      	ldr	r2, [pc, #52]	; (8006364 <xPortStartScheduler+0x100>)
 8006330:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006334:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006336:	f7ff ff7f 	bl	8006238 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800633a:	f7fe fe35 	bl	8004fa8 <vTaskSwitchContext>
    prvTaskExitError();
 800633e:	f7ff ff3b 	bl	80061b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	e000e400 	.word	0xe000e400
 8006350:	20020588 	.word	0x20020588
 8006354:	2002058c 	.word	0x2002058c
 8006358:	08008998 	.word	0x08008998
 800635c:	e000ed20 	.word	0xe000ed20
 8006360:	20000010 	.word	0x20000010
 8006364:	e000ef34 	.word	0xe000ef34

08006368 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006372:	b672      	cpsid	i
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	b662      	cpsie	i
 8006382:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <vPortEnterCritical+0x4c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <vPortEnterCritical+0x4c>)
 800638c:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800638e:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <vPortEnterCritical+0x4c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d109      	bne.n	80063aa <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006396:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <vPortEnterCritical+0x50>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d004      	beq.n	80063aa <vPortEnterCritical+0x42>
 80063a0:	4906      	ldr	r1, [pc, #24]	; (80063bc <vPortEnterCritical+0x54>)
 80063a2:	f44f 70cc 	mov.w	r0, #408	; 0x198
 80063a6:	f7fa fb6d 	bl	8000a84 <vAssertCalled>
    }
}
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000010 	.word	0x20000010
 80063b8:	e000ed04 	.word	0xe000ed04
 80063bc:	08008998 	.word	0x08008998

080063c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80063c6:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <vPortExitCritical+0x3c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d104      	bne.n	80063d8 <vPortExitCritical+0x18>
 80063ce:	490c      	ldr	r1, [pc, #48]	; (8006400 <vPortExitCritical+0x40>)
 80063d0:	f240 109f 	movw	r0, #415	; 0x19f
 80063d4:	f7fa fb56 	bl	8000a84 <vAssertCalled>
    uxCriticalNesting--;
 80063d8:	4b08      	ldr	r3, [pc, #32]	; (80063fc <vPortExitCritical+0x3c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	4a07      	ldr	r2, [pc, #28]	; (80063fc <vPortExitCritical+0x3c>)
 80063e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80063e2:	4b06      	ldr	r3, [pc, #24]	; (80063fc <vPortExitCritical+0x3c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d104      	bne.n	80063f4 <vPortExitCritical+0x34>
 80063ea:	2300      	movs	r3, #0
 80063ec:	607b      	str	r3, [r7, #4]
        __asm volatile
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000010 	.word	0x20000010
 8006400:	08008998 	.word	0x08008998
	...

08006410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006410:	f3ef 8009 	mrs	r0, PSP
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <pxCurrentTCBConst>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f01e 0f10 	tst.w	lr, #16
 8006420:	bf08      	it	eq
 8006422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6010      	str	r0, [r2, #0]
 800642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006430:	f04f 0040 	mov.w	r0, #64	; 0x40
 8006434:	b672      	cpsid	i
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	b662      	cpsie	i
 8006444:	f7fe fdb0 	bl	8004fa8 <vTaskSwitchContext>
 8006448:	f04f 0000 	mov.w	r0, #0
 800644c:	f380 8811 	msr	BASEPRI, r0
 8006450:	bc09      	pop	{r0, r3}
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	6808      	ldr	r0, [r1, #0]
 8006456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	f01e 0f10 	tst.w	lr, #16
 800645e:	bf08      	it	eq
 8006460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006464:	f380 8809 	msr	PSP, r0
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop

08006470 <pxCurrentTCBConst>:
 8006470:	2000020c 	.word	0x2000020c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop

08006478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
        __asm volatile
 800647e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006482:	b672      	cpsid	i
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	b662      	cpsie	i
 8006492:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006494:	f7fe fcd4 	bl	8004e40 <xTaskIncrementTick>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <SysTick_Handler+0x2e>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800649e:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <SysTick_Handler+0x40>)
 80064a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	2300      	movs	r3, #0
 80064a8:	603b      	str	r3, [r7, #0]
        __asm volatile
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <vPortSetupTimerInterrupt+0x38>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <vPortSetupTimerInterrupt+0x3c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <vPortSetupTimerInterrupt+0x40>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	099b      	lsrs	r3, r3, #6
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <vPortSetupTimerInterrupt+0x44>)
 80064da:	3b01      	subs	r3, #1
 80064dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000e010 	.word	0xe000e010
 80064f4:	e000e018 	.word	0xe000e018
 80064f8:	20000000 	.word	0x20000000
 80064fc:	10624dd3 	.word	0x10624dd3
 8006500:	e000e014 	.word	0xe000e014

08006504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006514 <vPortEnableVFP+0x10>
 8006508:	6801      	ldr	r1, [r0, #0]
 800650a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800650e:	6001      	str	r1, [r0, #0]
 8006510:	4770      	bx	lr
 8006512:	0000      	.short	0x0000
 8006514:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop

0800651c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006522:	f3ef 8305 	mrs	r3, IPSR
 8006526:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b0f      	cmp	r3, #15
 800652c:	d90e      	bls.n	800654c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800652e:	4a10      	ldr	r2, [pc, #64]	; (8006570 <vPortValidateInterruptPriority+0x54>)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4413      	add	r3, r2
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006538:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <vPortValidateInterruptPriority+0x58>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	429a      	cmp	r2, r3
 8006540:	d204      	bcs.n	800654c <vPortValidateInterruptPriority+0x30>
 8006542:	490d      	ldr	r1, [pc, #52]	; (8006578 <vPortValidateInterruptPriority+0x5c>)
 8006544:	f240 20f2 	movw	r0, #754	; 0x2f2
 8006548:	f7fa fa9c 	bl	8000a84 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800654c:	4b0b      	ldr	r3, [pc, #44]	; (800657c <vPortValidateInterruptPriority+0x60>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006554:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <vPortValidateInterruptPriority+0x64>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d904      	bls.n	8006566 <vPortValidateInterruptPriority+0x4a>
 800655c:	4906      	ldr	r1, [pc, #24]	; (8006578 <vPortValidateInterruptPriority+0x5c>)
 800655e:	f240 3002 	movw	r0, #770	; 0x302
 8006562:	f7fa fa8f 	bl	8000a84 <vAssertCalled>
    }
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	e000e3f0 	.word	0xe000e3f0
 8006574:	20020588 	.word	0x20020588
 8006578:	08008998 	.word	0x08008998
 800657c:	e000ed0c 	.word	0xe000ed0c
 8006580:	2002058c 	.word	0x2002058c

08006584 <HAL_ETH_RxCpltCallback>:
};

/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

    ( void ) heth;

    /* Ethernet RX-Complete callback function, elsewhere declared as weak. */
    ulISREvents |= EMAC_IF_RX_EVENT;
 8006590:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <HAL_ETH_RxCpltCallback+0x50>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	4a0e      	ldr	r2, [pc, #56]	; (80065d4 <HAL_ETH_RxCpltCallback+0x50>)
 800659a:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 800659c:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <HAL_ETH_RxCpltCallback+0x54>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d012      	beq.n	80065ca <HAL_ETH_RxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 80065a4:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <HAL_ETH_RxCpltCallback+0x54>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f107 020c 	add.w	r2, r7, #12
 80065ac:	2100      	movs	r1, #0
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe ffe8 	bl	8005584 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <HAL_ETH_RxCpltCallback+0x46>
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <HAL_ETH_RxCpltCallback+0x58>)
 80065bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	f3bf 8f6f 	isb	sy
    }
}
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20020590 	.word	0x20020590
 80065d8:	200205dc 	.word	0x200205dc
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
    ( void ) heth;

    /* This call-back is only useful in case packets are being sent
     * zero-copy.  Once they're sent, the buffers will be released
     * by the function vClearTXBuffers(). */
    ulISREvents |= EMAC_IF_TX_EVENT;
 80065ec:	4b10      	ldr	r3, [pc, #64]	; (8006630 <HAL_ETH_TxCpltCallback+0x50>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f043 0302 	orr.w	r3, r3, #2
 80065f4:	4a0e      	ldr	r2, [pc, #56]	; (8006630 <HAL_ETH_TxCpltCallback+0x50>)
 80065f6:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 80065f8:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <HAL_ETH_TxCpltCallback+0x54>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d012      	beq.n	8006626 <HAL_ETH_TxCpltCallback+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 8006600:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <HAL_ETH_TxCpltCallback+0x54>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f107 020c 	add.w	r2, r7, #12
 8006608:	2100      	movs	r1, #0
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe ffba 	bl	8005584 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <HAL_ETH_TxCpltCallback+0x46>
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <HAL_ETH_TxCpltCallback+0x58>)
 8006618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
    }
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20020590 	.word	0x20020590
 8006634:	200205dc 	.word	0x200205dc
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <ETH_IRQHandler>:
    }
}
/*-----------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &xETH );
 8006640:	4802      	ldr	r0, [pc, #8]	; (800664c <ETH_IRQHandler+0x10>)
 8006642:	f7fd f973 	bl	800392c <HAL_ETH_IRQHandler>
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20020594 	.word	0x20020594

08006650 <__errno>:
 8006650:	4b01      	ldr	r3, [pc, #4]	; (8006658 <__errno+0x8>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000014 	.word	0x20000014

0800665c <__libc_init_array>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	4e0d      	ldr	r6, [pc, #52]	; (8006694 <__libc_init_array+0x38>)
 8006660:	4c0d      	ldr	r4, [pc, #52]	; (8006698 <__libc_init_array+0x3c>)
 8006662:	1ba4      	subs	r4, r4, r6
 8006664:	10a4      	asrs	r4, r4, #2
 8006666:	2500      	movs	r5, #0
 8006668:	42a5      	cmp	r5, r4
 800666a:	d109      	bne.n	8006680 <__libc_init_array+0x24>
 800666c:	4e0b      	ldr	r6, [pc, #44]	; (800669c <__libc_init_array+0x40>)
 800666e:	4c0c      	ldr	r4, [pc, #48]	; (80066a0 <__libc_init_array+0x44>)
 8006670:	f002 f852 	bl	8008718 <_init>
 8006674:	1ba4      	subs	r4, r4, r6
 8006676:	10a4      	asrs	r4, r4, #2
 8006678:	2500      	movs	r5, #0
 800667a:	42a5      	cmp	r5, r4
 800667c:	d105      	bne.n	800668a <__libc_init_array+0x2e>
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006684:	4798      	blx	r3
 8006686:	3501      	adds	r5, #1
 8006688:	e7ee      	b.n	8006668 <__libc_init_array+0xc>
 800668a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800668e:	4798      	blx	r3
 8006690:	3501      	adds	r5, #1
 8006692:	e7f2      	b.n	800667a <__libc_init_array+0x1e>
 8006694:	08008ca8 	.word	0x08008ca8
 8006698:	08008ca8 	.word	0x08008ca8
 800669c:	08008ca8 	.word	0x08008ca8
 80066a0:	08008cac 	.word	0x08008cac

080066a4 <memcpy>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	1e43      	subs	r3, r0, #1
 80066a8:	440a      	add	r2, r1
 80066aa:	4291      	cmp	r1, r2
 80066ac:	d100      	bne.n	80066b0 <memcpy+0xc>
 80066ae:	bd10      	pop	{r4, pc}
 80066b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b8:	e7f7      	b.n	80066aa <memcpy+0x6>

080066ba <memmove>:
 80066ba:	4288      	cmp	r0, r1
 80066bc:	b510      	push	{r4, lr}
 80066be:	eb01 0302 	add.w	r3, r1, r2
 80066c2:	d807      	bhi.n	80066d4 <memmove+0x1a>
 80066c4:	1e42      	subs	r2, r0, #1
 80066c6:	4299      	cmp	r1, r3
 80066c8:	d00a      	beq.n	80066e0 <memmove+0x26>
 80066ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066d2:	e7f8      	b.n	80066c6 <memmove+0xc>
 80066d4:	4283      	cmp	r3, r0
 80066d6:	d9f5      	bls.n	80066c4 <memmove+0xa>
 80066d8:	1881      	adds	r1, r0, r2
 80066da:	1ad2      	subs	r2, r2, r3
 80066dc:	42d3      	cmn	r3, r2
 80066de:	d100      	bne.n	80066e2 <memmove+0x28>
 80066e0:	bd10      	pop	{r4, pc}
 80066e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066ea:	e7f7      	b.n	80066dc <memmove+0x22>

080066ec <memset>:
 80066ec:	4402      	add	r2, r0
 80066ee:	4603      	mov	r3, r0
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d100      	bne.n	80066f6 <memset+0xa>
 80066f4:	4770      	bx	lr
 80066f6:	f803 1b01 	strb.w	r1, [r3], #1
 80066fa:	e7f9      	b.n	80066f0 <memset+0x4>

080066fc <_malloc_r>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	1ccd      	adds	r5, r1, #3
 8006700:	f025 0503 	bic.w	r5, r5, #3
 8006704:	3508      	adds	r5, #8
 8006706:	2d0c      	cmp	r5, #12
 8006708:	bf38      	it	cc
 800670a:	250c      	movcc	r5, #12
 800670c:	2d00      	cmp	r5, #0
 800670e:	4606      	mov	r6, r0
 8006710:	db01      	blt.n	8006716 <_malloc_r+0x1a>
 8006712:	42a9      	cmp	r1, r5
 8006714:	d903      	bls.n	800671e <_malloc_r+0x22>
 8006716:	230c      	movs	r3, #12
 8006718:	6033      	str	r3, [r6, #0]
 800671a:	2000      	movs	r0, #0
 800671c:	bd70      	pop	{r4, r5, r6, pc}
 800671e:	f001 fb33 	bl	8007d88 <__malloc_lock>
 8006722:	4a21      	ldr	r2, [pc, #132]	; (80067a8 <_malloc_r+0xac>)
 8006724:	6814      	ldr	r4, [r2, #0]
 8006726:	4621      	mov	r1, r4
 8006728:	b991      	cbnz	r1, 8006750 <_malloc_r+0x54>
 800672a:	4c20      	ldr	r4, [pc, #128]	; (80067ac <_malloc_r+0xb0>)
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	b91b      	cbnz	r3, 8006738 <_malloc_r+0x3c>
 8006730:	4630      	mov	r0, r6
 8006732:	f000 fce3 	bl	80070fc <_sbrk_r>
 8006736:	6020      	str	r0, [r4, #0]
 8006738:	4629      	mov	r1, r5
 800673a:	4630      	mov	r0, r6
 800673c:	f000 fcde 	bl	80070fc <_sbrk_r>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d124      	bne.n	800678e <_malloc_r+0x92>
 8006744:	230c      	movs	r3, #12
 8006746:	6033      	str	r3, [r6, #0]
 8006748:	4630      	mov	r0, r6
 800674a:	f001 fb1e 	bl	8007d8a <__malloc_unlock>
 800674e:	e7e4      	b.n	800671a <_malloc_r+0x1e>
 8006750:	680b      	ldr	r3, [r1, #0]
 8006752:	1b5b      	subs	r3, r3, r5
 8006754:	d418      	bmi.n	8006788 <_malloc_r+0x8c>
 8006756:	2b0b      	cmp	r3, #11
 8006758:	d90f      	bls.n	800677a <_malloc_r+0x7e>
 800675a:	600b      	str	r3, [r1, #0]
 800675c:	50cd      	str	r5, [r1, r3]
 800675e:	18cc      	adds	r4, r1, r3
 8006760:	4630      	mov	r0, r6
 8006762:	f001 fb12 	bl	8007d8a <__malloc_unlock>
 8006766:	f104 000b 	add.w	r0, r4, #11
 800676a:	1d23      	adds	r3, r4, #4
 800676c:	f020 0007 	bic.w	r0, r0, #7
 8006770:	1ac3      	subs	r3, r0, r3
 8006772:	d0d3      	beq.n	800671c <_malloc_r+0x20>
 8006774:	425a      	negs	r2, r3
 8006776:	50e2      	str	r2, [r4, r3]
 8006778:	e7d0      	b.n	800671c <_malloc_r+0x20>
 800677a:	428c      	cmp	r4, r1
 800677c:	684b      	ldr	r3, [r1, #4]
 800677e:	bf16      	itet	ne
 8006780:	6063      	strne	r3, [r4, #4]
 8006782:	6013      	streq	r3, [r2, #0]
 8006784:	460c      	movne	r4, r1
 8006786:	e7eb      	b.n	8006760 <_malloc_r+0x64>
 8006788:	460c      	mov	r4, r1
 800678a:	6849      	ldr	r1, [r1, #4]
 800678c:	e7cc      	b.n	8006728 <_malloc_r+0x2c>
 800678e:	1cc4      	adds	r4, r0, #3
 8006790:	f024 0403 	bic.w	r4, r4, #3
 8006794:	42a0      	cmp	r0, r4
 8006796:	d005      	beq.n	80067a4 <_malloc_r+0xa8>
 8006798:	1a21      	subs	r1, r4, r0
 800679a:	4630      	mov	r0, r6
 800679c:	f000 fcae 	bl	80070fc <_sbrk_r>
 80067a0:	3001      	adds	r0, #1
 80067a2:	d0cf      	beq.n	8006744 <_malloc_r+0x48>
 80067a4:	6025      	str	r5, [r4, #0]
 80067a6:	e7db      	b.n	8006760 <_malloc_r+0x64>
 80067a8:	200205e0 	.word	0x200205e0
 80067ac:	200205e4 	.word	0x200205e4

080067b0 <__cvt>:
 80067b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b2:	ed2d 8b02 	vpush	{d8}
 80067b6:	eeb0 8b40 	vmov.f64	d8, d0
 80067ba:	b085      	sub	sp, #20
 80067bc:	4617      	mov	r7, r2
 80067be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80067c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80067c2:	ee18 2a90 	vmov	r2, s17
 80067c6:	f025 0520 	bic.w	r5, r5, #32
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	bfb6      	itet	lt
 80067ce:	222d      	movlt	r2, #45	; 0x2d
 80067d0:	2200      	movge	r2, #0
 80067d2:	eeb1 8b40 	vneglt.f64	d8, d0
 80067d6:	2d46      	cmp	r5, #70	; 0x46
 80067d8:	460c      	mov	r4, r1
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	d004      	beq.n	80067e8 <__cvt+0x38>
 80067de:	2d45      	cmp	r5, #69	; 0x45
 80067e0:	d100      	bne.n	80067e4 <__cvt+0x34>
 80067e2:	3401      	adds	r4, #1
 80067e4:	2102      	movs	r1, #2
 80067e6:	e000      	b.n	80067ea <__cvt+0x3a>
 80067e8:	2103      	movs	r1, #3
 80067ea:	ab03      	add	r3, sp, #12
 80067ec:	9301      	str	r3, [sp, #4]
 80067ee:	ab02      	add	r3, sp, #8
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	4622      	mov	r2, r4
 80067f4:	4633      	mov	r3, r6
 80067f6:	eeb0 0b48 	vmov.f64	d0, d8
 80067fa:	f000 fd51 	bl	80072a0 <_dtoa_r>
 80067fe:	2d47      	cmp	r5, #71	; 0x47
 8006800:	d101      	bne.n	8006806 <__cvt+0x56>
 8006802:	07fb      	lsls	r3, r7, #31
 8006804:	d51e      	bpl.n	8006844 <__cvt+0x94>
 8006806:	2d46      	cmp	r5, #70	; 0x46
 8006808:	eb00 0304 	add.w	r3, r0, r4
 800680c:	d10c      	bne.n	8006828 <__cvt+0x78>
 800680e:	7802      	ldrb	r2, [r0, #0]
 8006810:	2a30      	cmp	r2, #48	; 0x30
 8006812:	d107      	bne.n	8006824 <__cvt+0x74>
 8006814:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681c:	bf1c      	itt	ne
 800681e:	f1c4 0401 	rsbne	r4, r4, #1
 8006822:	6034      	strne	r4, [r6, #0]
 8006824:	6832      	ldr	r2, [r6, #0]
 8006826:	4413      	add	r3, r2
 8006828:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006830:	d007      	beq.n	8006842 <__cvt+0x92>
 8006832:	2130      	movs	r1, #48	; 0x30
 8006834:	9a03      	ldr	r2, [sp, #12]
 8006836:	429a      	cmp	r2, r3
 8006838:	d204      	bcs.n	8006844 <__cvt+0x94>
 800683a:	1c54      	adds	r4, r2, #1
 800683c:	9403      	str	r4, [sp, #12]
 800683e:	7011      	strb	r1, [r2, #0]
 8006840:	e7f8      	b.n	8006834 <__cvt+0x84>
 8006842:	9303      	str	r3, [sp, #12]
 8006844:	9b03      	ldr	r3, [sp, #12]
 8006846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006848:	1a1b      	subs	r3, r3, r0
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	b005      	add	sp, #20
 800684e:	ecbd 8b02 	vpop	{d8}
 8006852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006854 <__exponent>:
 8006854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006856:	2900      	cmp	r1, #0
 8006858:	4604      	mov	r4, r0
 800685a:	bfba      	itte	lt
 800685c:	4249      	neglt	r1, r1
 800685e:	232d      	movlt	r3, #45	; 0x2d
 8006860:	232b      	movge	r3, #43	; 0x2b
 8006862:	2909      	cmp	r1, #9
 8006864:	f804 2b02 	strb.w	r2, [r4], #2
 8006868:	7043      	strb	r3, [r0, #1]
 800686a:	dd20      	ble.n	80068ae <__exponent+0x5a>
 800686c:	f10d 0307 	add.w	r3, sp, #7
 8006870:	461f      	mov	r7, r3
 8006872:	260a      	movs	r6, #10
 8006874:	fb91 f5f6 	sdiv	r5, r1, r6
 8006878:	fb06 1115 	mls	r1, r6, r5, r1
 800687c:	3130      	adds	r1, #48	; 0x30
 800687e:	2d09      	cmp	r5, #9
 8006880:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006884:	f103 32ff 	add.w	r2, r3, #4294967295
 8006888:	4629      	mov	r1, r5
 800688a:	dc09      	bgt.n	80068a0 <__exponent+0x4c>
 800688c:	3130      	adds	r1, #48	; 0x30
 800688e:	3b02      	subs	r3, #2
 8006890:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006894:	42bb      	cmp	r3, r7
 8006896:	4622      	mov	r2, r4
 8006898:	d304      	bcc.n	80068a4 <__exponent+0x50>
 800689a:	1a10      	subs	r0, r2, r0
 800689c:	b003      	add	sp, #12
 800689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a0:	4613      	mov	r3, r2
 80068a2:	e7e7      	b.n	8006874 <__exponent+0x20>
 80068a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068a8:	f804 2b01 	strb.w	r2, [r4], #1
 80068ac:	e7f2      	b.n	8006894 <__exponent+0x40>
 80068ae:	2330      	movs	r3, #48	; 0x30
 80068b0:	4419      	add	r1, r3
 80068b2:	7083      	strb	r3, [r0, #2]
 80068b4:	1d02      	adds	r2, r0, #4
 80068b6:	70c1      	strb	r1, [r0, #3]
 80068b8:	e7ef      	b.n	800689a <__exponent+0x46>
 80068ba:	0000      	movs	r0, r0
 80068bc:	0000      	movs	r0, r0
	...

080068c0 <_printf_float>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	b08d      	sub	sp, #52	; 0x34
 80068c6:	460c      	mov	r4, r1
 80068c8:	4616      	mov	r6, r2
 80068ca:	461f      	mov	r7, r3
 80068cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80068d0:	4605      	mov	r5, r0
 80068d2:	f001 fa31 	bl	8007d38 <_localeconv_r>
 80068d6:	f8d0 b000 	ldr.w	fp, [r0]
 80068da:	4658      	mov	r0, fp
 80068dc:	f7f9 fcb0 	bl	8000240 <strlen>
 80068e0:	2300      	movs	r3, #0
 80068e2:	930a      	str	r3, [sp, #40]	; 0x28
 80068e4:	f8d8 3000 	ldr.w	r3, [r8]
 80068e8:	9005      	str	r0, [sp, #20]
 80068ea:	3307      	adds	r3, #7
 80068ec:	f023 0307 	bic.w	r3, r3, #7
 80068f0:	f103 0108 	add.w	r1, r3, #8
 80068f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80068f8:	6822      	ldr	r2, [r4, #0]
 80068fa:	f8c8 1000 	str.w	r1, [r8]
 80068fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006902:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006906:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8006b90 <_printf_float+0x2d0>
 800690a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800690e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006912:	eeb4 6b47 	vcmp.f64	d6, d7
 8006916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691a:	dd24      	ble.n	8006966 <_printf_float+0xa6>
 800691c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006924:	d502      	bpl.n	800692c <_printf_float+0x6c>
 8006926:	232d      	movs	r3, #45	; 0x2d
 8006928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800692c:	499a      	ldr	r1, [pc, #616]	; (8006b98 <_printf_float+0x2d8>)
 800692e:	4b9b      	ldr	r3, [pc, #620]	; (8006b9c <_printf_float+0x2dc>)
 8006930:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006934:	bf8c      	ite	hi
 8006936:	4688      	movhi	r8, r1
 8006938:	4698      	movls	r8, r3
 800693a:	f022 0204 	bic.w	r2, r2, #4
 800693e:	2303      	movs	r3, #3
 8006940:	6123      	str	r3, [r4, #16]
 8006942:	6022      	str	r2, [r4, #0]
 8006944:	f04f 0a00 	mov.w	sl, #0
 8006948:	9700      	str	r7, [sp, #0]
 800694a:	4633      	mov	r3, r6
 800694c:	aa0b      	add	r2, sp, #44	; 0x2c
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f000 f9e1 	bl	8006d18 <_printf_common>
 8006956:	3001      	adds	r0, #1
 8006958:	f040 8089 	bne.w	8006a6e <_printf_float+0x1ae>
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	b00d      	add	sp, #52	; 0x34
 8006962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006966:	eeb4 0b40 	vcmp.f64	d0, d0
 800696a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696e:	d702      	bvc.n	8006976 <_printf_float+0xb6>
 8006970:	498b      	ldr	r1, [pc, #556]	; (8006ba0 <_printf_float+0x2e0>)
 8006972:	4b8c      	ldr	r3, [pc, #560]	; (8006ba4 <_printf_float+0x2e4>)
 8006974:	e7dc      	b.n	8006930 <_printf_float+0x70>
 8006976:	6861      	ldr	r1, [r4, #4]
 8006978:	1c4b      	adds	r3, r1, #1
 800697a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800697e:	ab0a      	add	r3, sp, #40	; 0x28
 8006980:	a809      	add	r0, sp, #36	; 0x24
 8006982:	d13b      	bne.n	80069fc <_printf_float+0x13c>
 8006984:	2106      	movs	r1, #6
 8006986:	6061      	str	r1, [r4, #4]
 8006988:	f04f 0c00 	mov.w	ip, #0
 800698c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006990:	e9cd 0900 	strd	r0, r9, [sp]
 8006994:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006998:	6022      	str	r2, [r4, #0]
 800699a:	6861      	ldr	r1, [r4, #4]
 800699c:	4628      	mov	r0, r5
 800699e:	f7ff ff07 	bl	80067b0 <__cvt>
 80069a2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80069a6:	2b47      	cmp	r3, #71	; 0x47
 80069a8:	4680      	mov	r8, r0
 80069aa:	d109      	bne.n	80069c0 <_printf_float+0x100>
 80069ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ae:	1cd8      	adds	r0, r3, #3
 80069b0:	db02      	blt.n	80069b8 <_printf_float+0xf8>
 80069b2:	6862      	ldr	r2, [r4, #4]
 80069b4:	4293      	cmp	r3, r2
 80069b6:	dd47      	ble.n	8006a48 <_printf_float+0x188>
 80069b8:	f1a9 0902 	sub.w	r9, r9, #2
 80069bc:	fa5f f989 	uxtb.w	r9, r9
 80069c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80069c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c6:	d824      	bhi.n	8006a12 <_printf_float+0x152>
 80069c8:	3901      	subs	r1, #1
 80069ca:	464a      	mov	r2, r9
 80069cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069d0:	9109      	str	r1, [sp, #36]	; 0x24
 80069d2:	f7ff ff3f 	bl	8006854 <__exponent>
 80069d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d8:	1813      	adds	r3, r2, r0
 80069da:	2a01      	cmp	r2, #1
 80069dc:	4682      	mov	sl, r0
 80069de:	6123      	str	r3, [r4, #16]
 80069e0:	dc02      	bgt.n	80069e8 <_printf_float+0x128>
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	07d1      	lsls	r1, r2, #31
 80069e6:	d501      	bpl.n	80069ec <_printf_float+0x12c>
 80069e8:	3301      	adds	r3, #1
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0a9      	beq.n	8006948 <_printf_float+0x88>
 80069f4:	232d      	movs	r3, #45	; 0x2d
 80069f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069fa:	e7a5      	b.n	8006948 <_printf_float+0x88>
 80069fc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8006a00:	f000 8178 	beq.w	8006cf4 <_printf_float+0x434>
 8006a04:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006a08:	d1be      	bne.n	8006988 <_printf_float+0xc8>
 8006a0a:	2900      	cmp	r1, #0
 8006a0c:	d1bc      	bne.n	8006988 <_printf_float+0xc8>
 8006a0e:	2101      	movs	r1, #1
 8006a10:	e7b9      	b.n	8006986 <_printf_float+0xc6>
 8006a12:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006a16:	d119      	bne.n	8006a4c <_printf_float+0x18c>
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	dd0c      	ble.n	8006a38 <_printf_float+0x178>
 8006a1e:	6121      	str	r1, [r4, #16]
 8006a20:	b913      	cbnz	r3, 8006a28 <_printf_float+0x168>
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	07d2      	lsls	r2, r2, #31
 8006a26:	d502      	bpl.n	8006a2e <_printf_float+0x16e>
 8006a28:	3301      	adds	r3, #1
 8006a2a:	440b      	add	r3, r1
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a30:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a32:	f04f 0a00 	mov.w	sl, #0
 8006a36:	e7d9      	b.n	80069ec <_printf_float+0x12c>
 8006a38:	b913      	cbnz	r3, 8006a40 <_printf_float+0x180>
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	07d0      	lsls	r0, r2, #31
 8006a3e:	d501      	bpl.n	8006a44 <_printf_float+0x184>
 8006a40:	3302      	adds	r3, #2
 8006a42:	e7f3      	b.n	8006a2c <_printf_float+0x16c>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e7f1      	b.n	8006a2c <_printf_float+0x16c>
 8006a48:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006a4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a50:	4293      	cmp	r3, r2
 8006a52:	db05      	blt.n	8006a60 <_printf_float+0x1a0>
 8006a54:	6822      	ldr	r2, [r4, #0]
 8006a56:	6123      	str	r3, [r4, #16]
 8006a58:	07d1      	lsls	r1, r2, #31
 8006a5a:	d5e8      	bpl.n	8006a2e <_printf_float+0x16e>
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	e7e5      	b.n	8006a2c <_printf_float+0x16c>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bfd4      	ite	le
 8006a64:	f1c3 0302 	rsble	r3, r3, #2
 8006a68:	2301      	movgt	r3, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	e7de      	b.n	8006a2c <_printf_float+0x16c>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	055a      	lsls	r2, r3, #21
 8006a72:	d407      	bmi.n	8006a84 <_printf_float+0x1c4>
 8006a74:	6923      	ldr	r3, [r4, #16]
 8006a76:	4642      	mov	r2, r8
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d12a      	bne.n	8006ad8 <_printf_float+0x218>
 8006a82:	e76b      	b.n	800695c <_printf_float+0x9c>
 8006a84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a88:	f240 80de 	bls.w	8006c48 <_printf_float+0x388>
 8006a8c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a98:	d133      	bne.n	8006b02 <_printf_float+0x242>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	4a42      	ldr	r2, [pc, #264]	; (8006ba8 <_printf_float+0x2e8>)
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f43f af59 	beq.w	800695c <_printf_float+0x9c>
 8006aaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	db02      	blt.n	8006ab8 <_printf_float+0x1f8>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	07d8      	lsls	r0, r3, #31
 8006ab6:	d50f      	bpl.n	8006ad8 <_printf_float+0x218>
 8006ab8:	9b05      	ldr	r3, [sp, #20]
 8006aba:	465a      	mov	r2, fp
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f43f af4a 	beq.w	800695c <_printf_float+0x9c>
 8006ac8:	f04f 0800 	mov.w	r8, #0
 8006acc:	f104 091a 	add.w	r9, r4, #26
 8006ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	4543      	cmp	r3, r8
 8006ad6:	dc09      	bgt.n	8006aec <_printf_float+0x22c>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	079b      	lsls	r3, r3, #30
 8006adc:	f100 8105 	bmi.w	8006cea <_printf_float+0x42a>
 8006ae0:	68e0      	ldr	r0, [r4, #12]
 8006ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae4:	4298      	cmp	r0, r3
 8006ae6:	bfb8      	it	lt
 8006ae8:	4618      	movlt	r0, r3
 8006aea:	e739      	b.n	8006960 <_printf_float+0xa0>
 8006aec:	2301      	movs	r3, #1
 8006aee:	464a      	mov	r2, r9
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f af30 	beq.w	800695c <_printf_float+0x9c>
 8006afc:	f108 0801 	add.w	r8, r8, #1
 8006b00:	e7e6      	b.n	8006ad0 <_printf_float+0x210>
 8006b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	dc2b      	bgt.n	8006b60 <_printf_float+0x2a0>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4a27      	ldr	r2, [pc, #156]	; (8006ba8 <_printf_float+0x2e8>)
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	f43f af22 	beq.w	800695c <_printf_float+0x9c>
 8006b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1a:	b923      	cbnz	r3, 8006b26 <_printf_float+0x266>
 8006b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b1e:	b913      	cbnz	r3, 8006b26 <_printf_float+0x266>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07d9      	lsls	r1, r3, #31
 8006b24:	d5d8      	bpl.n	8006ad8 <_printf_float+0x218>
 8006b26:	9b05      	ldr	r3, [sp, #20]
 8006b28:	465a      	mov	r2, fp
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	f43f af13 	beq.w	800695c <_printf_float+0x9c>
 8006b36:	f04f 0900 	mov.w	r9, #0
 8006b3a:	f104 0a1a 	add.w	sl, r4, #26
 8006b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b40:	425b      	negs	r3, r3
 8006b42:	454b      	cmp	r3, r9
 8006b44:	dc01      	bgt.n	8006b4a <_printf_float+0x28a>
 8006b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b48:	e795      	b.n	8006a76 <_printf_float+0x1b6>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4652      	mov	r2, sl
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4628      	mov	r0, r5
 8006b52:	47b8      	blx	r7
 8006b54:	3001      	adds	r0, #1
 8006b56:	f43f af01 	beq.w	800695c <_printf_float+0x9c>
 8006b5a:	f109 0901 	add.w	r9, r9, #1
 8006b5e:	e7ee      	b.n	8006b3e <_printf_float+0x27e>
 8006b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b64:	429a      	cmp	r2, r3
 8006b66:	bfa8      	it	ge
 8006b68:	461a      	movge	r2, r3
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	4691      	mov	r9, r2
 8006b6e:	dd07      	ble.n	8006b80 <_printf_float+0x2c0>
 8006b70:	4613      	mov	r3, r2
 8006b72:	4631      	mov	r1, r6
 8006b74:	4642      	mov	r2, r8
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	f43f aeee 	beq.w	800695c <_printf_float+0x9c>
 8006b80:	f104 031a 	add.w	r3, r4, #26
 8006b84:	f04f 0a00 	mov.w	sl, #0
 8006b88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b8c:	9307      	str	r3, [sp, #28]
 8006b8e:	e017      	b.n	8006bc0 <_printf_float+0x300>
 8006b90:	ffffffff 	.word	0xffffffff
 8006b94:	7fefffff 	.word	0x7fefffff
 8006b98:	08008a48 	.word	0x08008a48
 8006b9c:	08008a44 	.word	0x08008a44
 8006ba0:	08008a50 	.word	0x08008a50
 8006ba4:	08008a4c 	.word	0x08008a4c
 8006ba8:	08008a54 	.word	0x08008a54
 8006bac:	2301      	movs	r3, #1
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	f43f aed0 	beq.w	800695c <_printf_float+0x9c>
 8006bbc:	f10a 0a01 	add.w	sl, sl, #1
 8006bc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	eba3 0309 	sub.w	r3, r3, r9
 8006bc8:	4553      	cmp	r3, sl
 8006bca:	dcef      	bgt.n	8006bac <_printf_float+0x2ec>
 8006bcc:	9b06      	ldr	r3, [sp, #24]
 8006bce:	4498      	add	r8, r3
 8006bd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	db15      	blt.n	8006c04 <_printf_float+0x344>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	07da      	lsls	r2, r3, #31
 8006bdc:	d412      	bmi.n	8006c04 <_printf_float+0x344>
 8006bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be0:	9a06      	ldr	r2, [sp, #24]
 8006be2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006be4:	1a9a      	subs	r2, r3, r2
 8006be6:	eba3 0a01 	sub.w	sl, r3, r1
 8006bea:	4592      	cmp	sl, r2
 8006bec:	bfa8      	it	ge
 8006bee:	4692      	movge	sl, r2
 8006bf0:	f1ba 0f00 	cmp.w	sl, #0
 8006bf4:	dc0e      	bgt.n	8006c14 <_printf_float+0x354>
 8006bf6:	f04f 0800 	mov.w	r8, #0
 8006bfa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bfe:	f104 091a 	add.w	r9, r4, #26
 8006c02:	e019      	b.n	8006c38 <_printf_float+0x378>
 8006c04:	9b05      	ldr	r3, [sp, #20]
 8006c06:	465a      	mov	r2, fp
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b8      	blx	r7
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d1e5      	bne.n	8006bde <_printf_float+0x31e>
 8006c12:	e6a3      	b.n	800695c <_printf_float+0x9c>
 8006c14:	4653      	mov	r3, sl
 8006c16:	4642      	mov	r2, r8
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d1e9      	bne.n	8006bf6 <_printf_float+0x336>
 8006c22:	e69b      	b.n	800695c <_printf_float+0x9c>
 8006c24:	2301      	movs	r3, #1
 8006c26:	464a      	mov	r2, r9
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b8      	blx	r7
 8006c2e:	3001      	adds	r0, #1
 8006c30:	f43f ae94 	beq.w	800695c <_printf_float+0x9c>
 8006c34:	f108 0801 	add.w	r8, r8, #1
 8006c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	eba3 030a 	sub.w	r3, r3, sl
 8006c42:	4543      	cmp	r3, r8
 8006c44:	dcee      	bgt.n	8006c24 <_printf_float+0x364>
 8006c46:	e747      	b.n	8006ad8 <_printf_float+0x218>
 8006c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c4a:	2a01      	cmp	r2, #1
 8006c4c:	dc01      	bgt.n	8006c52 <_printf_float+0x392>
 8006c4e:	07db      	lsls	r3, r3, #31
 8006c50:	d539      	bpl.n	8006cc6 <_printf_float+0x406>
 8006c52:	2301      	movs	r3, #1
 8006c54:	4642      	mov	r2, r8
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f43f ae7d 	beq.w	800695c <_printf_float+0x9c>
 8006c62:	9b05      	ldr	r3, [sp, #20]
 8006c64:	465a      	mov	r2, fp
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f108 0801 	add.w	r8, r8, #1
 8006c72:	f43f ae73 	beq.w	800695c <_printf_float+0x9c>
 8006c76:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c84:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c88:	d018      	beq.n	8006cbc <_printf_float+0x3fc>
 8006c8a:	4642      	mov	r2, r8
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	d10e      	bne.n	8006cb4 <_printf_float+0x3f4>
 8006c96:	e661      	b.n	800695c <_printf_float+0x9c>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	464a      	mov	r2, r9
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f43f ae5a 	beq.w	800695c <_printf_float+0x9c>
 8006ca8:	f108 0801 	add.w	r8, r8, #1
 8006cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	4543      	cmp	r3, r8
 8006cb2:	dcf1      	bgt.n	8006c98 <_printf_float+0x3d8>
 8006cb4:	4653      	mov	r3, sl
 8006cb6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cba:	e6dd      	b.n	8006a78 <_printf_float+0x1b8>
 8006cbc:	f04f 0800 	mov.w	r8, #0
 8006cc0:	f104 091a 	add.w	r9, r4, #26
 8006cc4:	e7f2      	b.n	8006cac <_printf_float+0x3ec>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7df      	b.n	8006c8a <_printf_float+0x3ca>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	464a      	mov	r2, r9
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	47b8      	blx	r7
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f43f ae41 	beq.w	800695c <_printf_float+0x9c>
 8006cda:	f108 0801 	add.w	r8, r8, #1
 8006cde:	68e3      	ldr	r3, [r4, #12]
 8006ce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ce2:	1a9b      	subs	r3, r3, r2
 8006ce4:	4543      	cmp	r3, r8
 8006ce6:	dcf0      	bgt.n	8006cca <_printf_float+0x40a>
 8006ce8:	e6fa      	b.n	8006ae0 <_printf_float+0x220>
 8006cea:	f04f 0800 	mov.w	r8, #0
 8006cee:	f104 0919 	add.w	r9, r4, #25
 8006cf2:	e7f4      	b.n	8006cde <_printf_float+0x41e>
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	f43f ae8a 	beq.w	8006a0e <_printf_float+0x14e>
 8006cfa:	f04f 0c00 	mov.w	ip, #0
 8006cfe:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006d02:	e9cd 0900 	strd	r0, r9, [sp]
 8006d06:	6022      	str	r2, [r4, #0]
 8006d08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f7ff fd4f 	bl	80067b0 <__cvt>
 8006d12:	4680      	mov	r8, r0
 8006d14:	e64a      	b.n	80069ac <_printf_float+0xec>
 8006d16:	bf00      	nop

08006d18 <_printf_common>:
 8006d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	4691      	mov	r9, r2
 8006d1e:	461f      	mov	r7, r3
 8006d20:	688a      	ldr	r2, [r1, #8]
 8006d22:	690b      	ldr	r3, [r1, #16]
 8006d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	bfb8      	it	lt
 8006d2c:	4613      	movlt	r3, r2
 8006d2e:	f8c9 3000 	str.w	r3, [r9]
 8006d32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d36:	4606      	mov	r6, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	b112      	cbz	r2, 8006d42 <_printf_common+0x2a>
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f8c9 3000 	str.w	r3, [r9]
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	0699      	lsls	r1, r3, #26
 8006d46:	bf42      	ittt	mi
 8006d48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d4c:	3302      	addmi	r3, #2
 8006d4e:	f8c9 3000 	strmi.w	r3, [r9]
 8006d52:	6825      	ldr	r5, [r4, #0]
 8006d54:	f015 0506 	ands.w	r5, r5, #6
 8006d58:	d107      	bne.n	8006d6a <_printf_common+0x52>
 8006d5a:	f104 0a19 	add.w	sl, r4, #25
 8006d5e:	68e3      	ldr	r3, [r4, #12]
 8006d60:	f8d9 2000 	ldr.w	r2, [r9]
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	42ab      	cmp	r3, r5
 8006d68:	dc28      	bgt.n	8006dbc <_printf_common+0xa4>
 8006d6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	3300      	adds	r3, #0
 8006d72:	bf18      	it	ne
 8006d74:	2301      	movne	r3, #1
 8006d76:	0692      	lsls	r2, r2, #26
 8006d78:	d42d      	bmi.n	8006dd6 <_printf_common+0xbe>
 8006d7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d7e:	4639      	mov	r1, r7
 8006d80:	4630      	mov	r0, r6
 8006d82:	47c0      	blx	r8
 8006d84:	3001      	adds	r0, #1
 8006d86:	d020      	beq.n	8006dca <_printf_common+0xb2>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	68e5      	ldr	r5, [r4, #12]
 8006d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8006d90:	f003 0306 	and.w	r3, r3, #6
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	bf08      	it	eq
 8006d98:	1aad      	subeq	r5, r5, r2
 8006d9a:	68a3      	ldr	r3, [r4, #8]
 8006d9c:	6922      	ldr	r2, [r4, #16]
 8006d9e:	bf0c      	ite	eq
 8006da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006da4:	2500      	movne	r5, #0
 8006da6:	4293      	cmp	r3, r2
 8006da8:	bfc4      	itt	gt
 8006daa:	1a9b      	subgt	r3, r3, r2
 8006dac:	18ed      	addgt	r5, r5, r3
 8006dae:	f04f 0900 	mov.w	r9, #0
 8006db2:	341a      	adds	r4, #26
 8006db4:	454d      	cmp	r5, r9
 8006db6:	d11a      	bne.n	8006dee <_printf_common+0xd6>
 8006db8:	2000      	movs	r0, #0
 8006dba:	e008      	b.n	8006dce <_printf_common+0xb6>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4652      	mov	r2, sl
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	47c0      	blx	r8
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d103      	bne.n	8006dd2 <_printf_common+0xba>
 8006dca:	f04f 30ff 	mov.w	r0, #4294967295
 8006dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd2:	3501      	adds	r5, #1
 8006dd4:	e7c3      	b.n	8006d5e <_printf_common+0x46>
 8006dd6:	18e1      	adds	r1, r4, r3
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	2030      	movs	r0, #48	; 0x30
 8006ddc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006de0:	4422      	add	r2, r4
 8006de2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006de6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dea:	3302      	adds	r3, #2
 8006dec:	e7c5      	b.n	8006d7a <_printf_common+0x62>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4622      	mov	r2, r4
 8006df2:	4639      	mov	r1, r7
 8006df4:	4630      	mov	r0, r6
 8006df6:	47c0      	blx	r8
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d0e6      	beq.n	8006dca <_printf_common+0xb2>
 8006dfc:	f109 0901 	add.w	r9, r9, #1
 8006e00:	e7d8      	b.n	8006db4 <_printf_common+0x9c>
	...

08006e04 <_printf_i>:
 8006e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	7e09      	ldrb	r1, [r1, #24]
 8006e10:	b085      	sub	sp, #20
 8006e12:	296e      	cmp	r1, #110	; 0x6e
 8006e14:	4617      	mov	r7, r2
 8006e16:	4606      	mov	r6, r0
 8006e18:	4698      	mov	r8, r3
 8006e1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e1c:	f000 80b3 	beq.w	8006f86 <_printf_i+0x182>
 8006e20:	d822      	bhi.n	8006e68 <_printf_i+0x64>
 8006e22:	2963      	cmp	r1, #99	; 0x63
 8006e24:	d036      	beq.n	8006e94 <_printf_i+0x90>
 8006e26:	d80a      	bhi.n	8006e3e <_printf_i+0x3a>
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	f000 80b9 	beq.w	8006fa0 <_printf_i+0x19c>
 8006e2e:	2958      	cmp	r1, #88	; 0x58
 8006e30:	f000 8083 	beq.w	8006f3a <_printf_i+0x136>
 8006e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e3c:	e032      	b.n	8006ea4 <_printf_i+0xa0>
 8006e3e:	2964      	cmp	r1, #100	; 0x64
 8006e40:	d001      	beq.n	8006e46 <_printf_i+0x42>
 8006e42:	2969      	cmp	r1, #105	; 0x69
 8006e44:	d1f6      	bne.n	8006e34 <_printf_i+0x30>
 8006e46:	6820      	ldr	r0, [r4, #0]
 8006e48:	6813      	ldr	r3, [r2, #0]
 8006e4a:	0605      	lsls	r5, r0, #24
 8006e4c:	f103 0104 	add.w	r1, r3, #4
 8006e50:	d52a      	bpl.n	8006ea8 <_printf_i+0xa4>
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6011      	str	r1, [r2, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da03      	bge.n	8006e62 <_printf_i+0x5e>
 8006e5a:	222d      	movs	r2, #45	; 0x2d
 8006e5c:	425b      	negs	r3, r3
 8006e5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e62:	486f      	ldr	r0, [pc, #444]	; (8007020 <_printf_i+0x21c>)
 8006e64:	220a      	movs	r2, #10
 8006e66:	e039      	b.n	8006edc <_printf_i+0xd8>
 8006e68:	2973      	cmp	r1, #115	; 0x73
 8006e6a:	f000 809d 	beq.w	8006fa8 <_printf_i+0x1a4>
 8006e6e:	d808      	bhi.n	8006e82 <_printf_i+0x7e>
 8006e70:	296f      	cmp	r1, #111	; 0x6f
 8006e72:	d020      	beq.n	8006eb6 <_printf_i+0xb2>
 8006e74:	2970      	cmp	r1, #112	; 0x70
 8006e76:	d1dd      	bne.n	8006e34 <_printf_i+0x30>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	f043 0320 	orr.w	r3, r3, #32
 8006e7e:	6023      	str	r3, [r4, #0]
 8006e80:	e003      	b.n	8006e8a <_printf_i+0x86>
 8006e82:	2975      	cmp	r1, #117	; 0x75
 8006e84:	d017      	beq.n	8006eb6 <_printf_i+0xb2>
 8006e86:	2978      	cmp	r1, #120	; 0x78
 8006e88:	d1d4      	bne.n	8006e34 <_printf_i+0x30>
 8006e8a:	2378      	movs	r3, #120	; 0x78
 8006e8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e90:	4864      	ldr	r0, [pc, #400]	; (8007024 <_printf_i+0x220>)
 8006e92:	e055      	b.n	8006f40 <_printf_i+0x13c>
 8006e94:	6813      	ldr	r3, [r2, #0]
 8006e96:	1d19      	adds	r1, r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6011      	str	r1, [r2, #0]
 8006e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e08c      	b.n	8006fc2 <_printf_i+0x1be>
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6011      	str	r1, [r2, #0]
 8006eac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eb0:	bf18      	it	ne
 8006eb2:	b21b      	sxthne	r3, r3
 8006eb4:	e7cf      	b.n	8006e56 <_printf_i+0x52>
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	6825      	ldr	r5, [r4, #0]
 8006eba:	1d18      	adds	r0, r3, #4
 8006ebc:	6010      	str	r0, [r2, #0]
 8006ebe:	0628      	lsls	r0, r5, #24
 8006ec0:	d501      	bpl.n	8006ec6 <_printf_i+0xc2>
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	e002      	b.n	8006ecc <_printf_i+0xc8>
 8006ec6:	0668      	lsls	r0, r5, #25
 8006ec8:	d5fb      	bpl.n	8006ec2 <_printf_i+0xbe>
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	4854      	ldr	r0, [pc, #336]	; (8007020 <_printf_i+0x21c>)
 8006ece:	296f      	cmp	r1, #111	; 0x6f
 8006ed0:	bf14      	ite	ne
 8006ed2:	220a      	movne	r2, #10
 8006ed4:	2208      	moveq	r2, #8
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006edc:	6865      	ldr	r5, [r4, #4]
 8006ede:	60a5      	str	r5, [r4, #8]
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	f2c0 8095 	blt.w	8007010 <_printf_i+0x20c>
 8006ee6:	6821      	ldr	r1, [r4, #0]
 8006ee8:	f021 0104 	bic.w	r1, r1, #4
 8006eec:	6021      	str	r1, [r4, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d13d      	bne.n	8006f6e <_printf_i+0x16a>
 8006ef2:	2d00      	cmp	r5, #0
 8006ef4:	f040 808e 	bne.w	8007014 <_printf_i+0x210>
 8006ef8:	4665      	mov	r5, ip
 8006efa:	2a08      	cmp	r2, #8
 8006efc:	d10b      	bne.n	8006f16 <_printf_i+0x112>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	07db      	lsls	r3, r3, #31
 8006f02:	d508      	bpl.n	8006f16 <_printf_i+0x112>
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	6862      	ldr	r2, [r4, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	bfde      	ittt	le
 8006f0c:	2330      	movle	r3, #48	; 0x30
 8006f0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f16:	ebac 0305 	sub.w	r3, ip, r5
 8006f1a:	6123      	str	r3, [r4, #16]
 8006f1c:	f8cd 8000 	str.w	r8, [sp]
 8006f20:	463b      	mov	r3, r7
 8006f22:	aa03      	add	r2, sp, #12
 8006f24:	4621      	mov	r1, r4
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff fef6 	bl	8006d18 <_printf_common>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d14d      	bne.n	8006fcc <_printf_i+0x1c8>
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295
 8006f34:	b005      	add	sp, #20
 8006f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f3a:	4839      	ldr	r0, [pc, #228]	; (8007020 <_printf_i+0x21c>)
 8006f3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f40:	6813      	ldr	r3, [r2, #0]
 8006f42:	6821      	ldr	r1, [r4, #0]
 8006f44:	1d1d      	adds	r5, r3, #4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6015      	str	r5, [r2, #0]
 8006f4a:	060a      	lsls	r2, r1, #24
 8006f4c:	d50b      	bpl.n	8006f66 <_printf_i+0x162>
 8006f4e:	07ca      	lsls	r2, r1, #31
 8006f50:	bf44      	itt	mi
 8006f52:	f041 0120 	orrmi.w	r1, r1, #32
 8006f56:	6021      	strmi	r1, [r4, #0]
 8006f58:	b91b      	cbnz	r3, 8006f62 <_printf_i+0x15e>
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	f022 0220 	bic.w	r2, r2, #32
 8006f60:	6022      	str	r2, [r4, #0]
 8006f62:	2210      	movs	r2, #16
 8006f64:	e7b7      	b.n	8006ed6 <_printf_i+0xd2>
 8006f66:	064d      	lsls	r5, r1, #25
 8006f68:	bf48      	it	mi
 8006f6a:	b29b      	uxthmi	r3, r3
 8006f6c:	e7ef      	b.n	8006f4e <_printf_i+0x14a>
 8006f6e:	4665      	mov	r5, ip
 8006f70:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f74:	fb02 3311 	mls	r3, r2, r1, r3
 8006f78:	5cc3      	ldrb	r3, [r0, r3]
 8006f7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f7e:	460b      	mov	r3, r1
 8006f80:	2900      	cmp	r1, #0
 8006f82:	d1f5      	bne.n	8006f70 <_printf_i+0x16c>
 8006f84:	e7b9      	b.n	8006efa <_printf_i+0xf6>
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	6825      	ldr	r5, [r4, #0]
 8006f8a:	6961      	ldr	r1, [r4, #20]
 8006f8c:	1d18      	adds	r0, r3, #4
 8006f8e:	6010      	str	r0, [r2, #0]
 8006f90:	0628      	lsls	r0, r5, #24
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	d501      	bpl.n	8006f9a <_printf_i+0x196>
 8006f96:	6019      	str	r1, [r3, #0]
 8006f98:	e002      	b.n	8006fa0 <_printf_i+0x19c>
 8006f9a:	066a      	lsls	r2, r5, #25
 8006f9c:	d5fb      	bpl.n	8006f96 <_printf_i+0x192>
 8006f9e:	8019      	strh	r1, [r3, #0]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	4665      	mov	r5, ip
 8006fa6:	e7b9      	b.n	8006f1c <_printf_i+0x118>
 8006fa8:	6813      	ldr	r3, [r2, #0]
 8006faa:	1d19      	adds	r1, r3, #4
 8006fac:	6011      	str	r1, [r2, #0]
 8006fae:	681d      	ldr	r5, [r3, #0]
 8006fb0:	6862      	ldr	r2, [r4, #4]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f7f9 f94b 	bl	8000250 <memchr>
 8006fba:	b108      	cbz	r0, 8006fc0 <_printf_i+0x1bc>
 8006fbc:	1b40      	subs	r0, r0, r5
 8006fbe:	6060      	str	r0, [r4, #4]
 8006fc0:	6863      	ldr	r3, [r4, #4]
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fca:	e7a7      	b.n	8006f1c <_printf_i+0x118>
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	462a      	mov	r2, r5
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	47c0      	blx	r8
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d0aa      	beq.n	8006f30 <_printf_i+0x12c>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	079b      	lsls	r3, r3, #30
 8006fde:	d413      	bmi.n	8007008 <_printf_i+0x204>
 8006fe0:	68e0      	ldr	r0, [r4, #12]
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	4298      	cmp	r0, r3
 8006fe6:	bfb8      	it	lt
 8006fe8:	4618      	movlt	r0, r3
 8006fea:	e7a3      	b.n	8006f34 <_printf_i+0x130>
 8006fec:	2301      	movs	r3, #1
 8006fee:	464a      	mov	r2, r9
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	47c0      	blx	r8
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d09a      	beq.n	8006f30 <_printf_i+0x12c>
 8006ffa:	3501      	adds	r5, #1
 8006ffc:	68e3      	ldr	r3, [r4, #12]
 8006ffe:	9a03      	ldr	r2, [sp, #12]
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	42ab      	cmp	r3, r5
 8007004:	dcf2      	bgt.n	8006fec <_printf_i+0x1e8>
 8007006:	e7eb      	b.n	8006fe0 <_printf_i+0x1dc>
 8007008:	2500      	movs	r5, #0
 800700a:	f104 0919 	add.w	r9, r4, #25
 800700e:	e7f5      	b.n	8006ffc <_printf_i+0x1f8>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1ac      	bne.n	8006f6e <_printf_i+0x16a>
 8007014:	7803      	ldrb	r3, [r0, #0]
 8007016:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800701a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800701e:	e76c      	b.n	8006efa <_printf_i+0xf6>
 8007020:	08008a56 	.word	0x08008a56
 8007024:	08008a67 	.word	0x08008a67

08007028 <cleanup_glue>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	460c      	mov	r4, r1
 800702c:	6809      	ldr	r1, [r1, #0]
 800702e:	4605      	mov	r5, r0
 8007030:	b109      	cbz	r1, 8007036 <cleanup_glue+0xe>
 8007032:	f7ff fff9 	bl	8007028 <cleanup_glue>
 8007036:	4621      	mov	r1, r4
 8007038:	4628      	mov	r0, r5
 800703a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800703e:	f001 b98f 	b.w	8008360 <_free_r>
	...

08007044 <_reclaim_reent>:
 8007044:	4b2c      	ldr	r3, [pc, #176]	; (80070f8 <_reclaim_reent+0xb4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4283      	cmp	r3, r0
 800704a:	b570      	push	{r4, r5, r6, lr}
 800704c:	4604      	mov	r4, r0
 800704e:	d051      	beq.n	80070f4 <_reclaim_reent+0xb0>
 8007050:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007052:	b143      	cbz	r3, 8007066 <_reclaim_reent+0x22>
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d14a      	bne.n	80070f0 <_reclaim_reent+0xac>
 800705a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800705c:	6819      	ldr	r1, [r3, #0]
 800705e:	b111      	cbz	r1, 8007066 <_reclaim_reent+0x22>
 8007060:	4620      	mov	r0, r4
 8007062:	f001 f97d 	bl	8008360 <_free_r>
 8007066:	6961      	ldr	r1, [r4, #20]
 8007068:	b111      	cbz	r1, 8007070 <_reclaim_reent+0x2c>
 800706a:	4620      	mov	r0, r4
 800706c:	f001 f978 	bl	8008360 <_free_r>
 8007070:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007072:	b111      	cbz	r1, 800707a <_reclaim_reent+0x36>
 8007074:	4620      	mov	r0, r4
 8007076:	f001 f973 	bl	8008360 <_free_r>
 800707a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800707c:	b111      	cbz	r1, 8007084 <_reclaim_reent+0x40>
 800707e:	4620      	mov	r0, r4
 8007080:	f001 f96e 	bl	8008360 <_free_r>
 8007084:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007086:	b111      	cbz	r1, 800708e <_reclaim_reent+0x4a>
 8007088:	4620      	mov	r0, r4
 800708a:	f001 f969 	bl	8008360 <_free_r>
 800708e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007090:	b111      	cbz	r1, 8007098 <_reclaim_reent+0x54>
 8007092:	4620      	mov	r0, r4
 8007094:	f001 f964 	bl	8008360 <_free_r>
 8007098:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800709a:	b111      	cbz	r1, 80070a2 <_reclaim_reent+0x5e>
 800709c:	4620      	mov	r0, r4
 800709e:	f001 f95f 	bl	8008360 <_free_r>
 80070a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80070a4:	b111      	cbz	r1, 80070ac <_reclaim_reent+0x68>
 80070a6:	4620      	mov	r0, r4
 80070a8:	f001 f95a 	bl	8008360 <_free_r>
 80070ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ae:	b111      	cbz	r1, 80070b6 <_reclaim_reent+0x72>
 80070b0:	4620      	mov	r0, r4
 80070b2:	f001 f955 	bl	8008360 <_free_r>
 80070b6:	69a3      	ldr	r3, [r4, #24]
 80070b8:	b1e3      	cbz	r3, 80070f4 <_reclaim_reent+0xb0>
 80070ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80070bc:	4620      	mov	r0, r4
 80070be:	4798      	blx	r3
 80070c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80070c2:	b1b9      	cbz	r1, 80070f4 <_reclaim_reent+0xb0>
 80070c4:	4620      	mov	r0, r4
 80070c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070ca:	f7ff bfad 	b.w	8007028 <cleanup_glue>
 80070ce:	5949      	ldr	r1, [r1, r5]
 80070d0:	b941      	cbnz	r1, 80070e4 <_reclaim_reent+0xa0>
 80070d2:	3504      	adds	r5, #4
 80070d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d6:	2d80      	cmp	r5, #128	; 0x80
 80070d8:	68d9      	ldr	r1, [r3, #12]
 80070da:	d1f8      	bne.n	80070ce <_reclaim_reent+0x8a>
 80070dc:	4620      	mov	r0, r4
 80070de:	f001 f93f 	bl	8008360 <_free_r>
 80070e2:	e7ba      	b.n	800705a <_reclaim_reent+0x16>
 80070e4:	680e      	ldr	r6, [r1, #0]
 80070e6:	4620      	mov	r0, r4
 80070e8:	f001 f93a 	bl	8008360 <_free_r>
 80070ec:	4631      	mov	r1, r6
 80070ee:	e7ef      	b.n	80070d0 <_reclaim_reent+0x8c>
 80070f0:	2500      	movs	r5, #0
 80070f2:	e7ef      	b.n	80070d4 <_reclaim_reent+0x90>
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
 80070f6:	bf00      	nop
 80070f8:	20000014 	.word	0x20000014

080070fc <_sbrk_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4c06      	ldr	r4, [pc, #24]	; (8007118 <_sbrk_r+0x1c>)
 8007100:	2300      	movs	r3, #0
 8007102:	4605      	mov	r5, r0
 8007104:	4608      	mov	r0, r1
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	f7f9 ff2c 	bl	8000f64 <_sbrk>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_sbrk_r+0x1a>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	b103      	cbz	r3, 8007116 <_sbrk_r+0x1a>
 8007114:	602b      	str	r3, [r5, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20020760 	.word	0x20020760

0800711c <sniprintf>:
 800711c:	b40c      	push	{r2, r3}
 800711e:	b530      	push	{r4, r5, lr}
 8007120:	4b17      	ldr	r3, [pc, #92]	; (8007180 <sniprintf+0x64>)
 8007122:	1e0c      	subs	r4, r1, #0
 8007124:	b09d      	sub	sp, #116	; 0x74
 8007126:	681d      	ldr	r5, [r3, #0]
 8007128:	da08      	bge.n	800713c <sniprintf+0x20>
 800712a:	238b      	movs	r3, #139	; 0x8b
 800712c:	602b      	str	r3, [r5, #0]
 800712e:	f04f 30ff 	mov.w	r0, #4294967295
 8007132:	b01d      	add	sp, #116	; 0x74
 8007134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007138:	b002      	add	sp, #8
 800713a:	4770      	bx	lr
 800713c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007140:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007144:	bf14      	ite	ne
 8007146:	f104 33ff 	addne.w	r3, r4, #4294967295
 800714a:	4623      	moveq	r3, r4
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	9307      	str	r3, [sp, #28]
 8007150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007154:	9002      	str	r0, [sp, #8]
 8007156:	9006      	str	r0, [sp, #24]
 8007158:	f8ad 3016 	strh.w	r3, [sp, #22]
 800715c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800715e:	ab21      	add	r3, sp, #132	; 0x84
 8007160:	a902      	add	r1, sp, #8
 8007162:	4628      	mov	r0, r5
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	f001 f9a3 	bl	80084b0 <_svfiprintf_r>
 800716a:	1c43      	adds	r3, r0, #1
 800716c:	bfbc      	itt	lt
 800716e:	238b      	movlt	r3, #139	; 0x8b
 8007170:	602b      	strlt	r3, [r5, #0]
 8007172:	2c00      	cmp	r4, #0
 8007174:	d0dd      	beq.n	8007132 <sniprintf+0x16>
 8007176:	9b02      	ldr	r3, [sp, #8]
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	e7d9      	b.n	8007132 <sniprintf+0x16>
 800717e:	bf00      	nop
 8007180:	20000014 	.word	0x20000014

08007184 <quorem>:
 8007184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007188:	6903      	ldr	r3, [r0, #16]
 800718a:	690c      	ldr	r4, [r1, #16]
 800718c:	42a3      	cmp	r3, r4
 800718e:	4680      	mov	r8, r0
 8007190:	f2c0 8082 	blt.w	8007298 <quorem+0x114>
 8007194:	3c01      	subs	r4, #1
 8007196:	f101 0714 	add.w	r7, r1, #20
 800719a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800719e:	f100 0614 	add.w	r6, r0, #20
 80071a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80071a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80071aa:	eb06 030c 	add.w	r3, r6, ip
 80071ae:	3501      	adds	r5, #1
 80071b0:	eb07 090c 	add.w	r9, r7, ip
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	fbb0 f5f5 	udiv	r5, r0, r5
 80071ba:	b395      	cbz	r5, 8007222 <quorem+0x9e>
 80071bc:	f04f 0a00 	mov.w	sl, #0
 80071c0:	4638      	mov	r0, r7
 80071c2:	46b6      	mov	lr, r6
 80071c4:	46d3      	mov	fp, sl
 80071c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80071ca:	b293      	uxth	r3, r2
 80071cc:	fb05 a303 	mla	r3, r5, r3, sl
 80071d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	ebab 0303 	sub.w	r3, fp, r3
 80071da:	0c12      	lsrs	r2, r2, #16
 80071dc:	f8de b000 	ldr.w	fp, [lr]
 80071e0:	fb05 a202 	mla	r2, r5, r2, sl
 80071e4:	fa13 f38b 	uxtah	r3, r3, fp
 80071e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80071ec:	fa1f fb82 	uxth.w	fp, r2
 80071f0:	f8de 2000 	ldr.w	r2, [lr]
 80071f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80071f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007202:	4581      	cmp	r9, r0
 8007204:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007208:	f84e 3b04 	str.w	r3, [lr], #4
 800720c:	d2db      	bcs.n	80071c6 <quorem+0x42>
 800720e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007212:	b933      	cbnz	r3, 8007222 <quorem+0x9e>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	3b04      	subs	r3, #4
 8007218:	429e      	cmp	r6, r3
 800721a:	461a      	mov	r2, r3
 800721c:	d330      	bcc.n	8007280 <quorem+0xfc>
 800721e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007222:	4640      	mov	r0, r8
 8007224:	f000 ffc8 	bl	80081b8 <__mcmp>
 8007228:	2800      	cmp	r0, #0
 800722a:	db25      	blt.n	8007278 <quorem+0xf4>
 800722c:	3501      	adds	r5, #1
 800722e:	4630      	mov	r0, r6
 8007230:	f04f 0c00 	mov.w	ip, #0
 8007234:	f857 2b04 	ldr.w	r2, [r7], #4
 8007238:	f8d0 e000 	ldr.w	lr, [r0]
 800723c:	b293      	uxth	r3, r2
 800723e:	ebac 0303 	sub.w	r3, ip, r3
 8007242:	0c12      	lsrs	r2, r2, #16
 8007244:	fa13 f38e 	uxtah	r3, r3, lr
 8007248:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800724c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007250:	b29b      	uxth	r3, r3
 8007252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007256:	45b9      	cmp	r9, r7
 8007258:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800725c:	f840 3b04 	str.w	r3, [r0], #4
 8007260:	d2e8      	bcs.n	8007234 <quorem+0xb0>
 8007262:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007266:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800726a:	b92a      	cbnz	r2, 8007278 <quorem+0xf4>
 800726c:	3b04      	subs	r3, #4
 800726e:	429e      	cmp	r6, r3
 8007270:	461a      	mov	r2, r3
 8007272:	d30b      	bcc.n	800728c <quorem+0x108>
 8007274:	f8c8 4010 	str.w	r4, [r8, #16]
 8007278:	4628      	mov	r0, r5
 800727a:	b003      	add	sp, #12
 800727c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007280:	6812      	ldr	r2, [r2, #0]
 8007282:	3b04      	subs	r3, #4
 8007284:	2a00      	cmp	r2, #0
 8007286:	d1ca      	bne.n	800721e <quorem+0x9a>
 8007288:	3c01      	subs	r4, #1
 800728a:	e7c5      	b.n	8007218 <quorem+0x94>
 800728c:	6812      	ldr	r2, [r2, #0]
 800728e:	3b04      	subs	r3, #4
 8007290:	2a00      	cmp	r2, #0
 8007292:	d1ef      	bne.n	8007274 <quorem+0xf0>
 8007294:	3c01      	subs	r4, #1
 8007296:	e7ea      	b.n	800726e <quorem+0xea>
 8007298:	2000      	movs	r0, #0
 800729a:	e7ee      	b.n	800727a <quorem+0xf6>
 800729c:	0000      	movs	r0, r0
	...

080072a0 <_dtoa_r>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	ec57 6b10 	vmov	r6, r7, d0
 80072a8:	b095      	sub	sp, #84	; 0x54
 80072aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072ac:	9108      	str	r1, [sp, #32]
 80072ae:	4604      	mov	r4, r0
 80072b0:	920a      	str	r2, [sp, #40]	; 0x28
 80072b2:	9311      	str	r3, [sp, #68]	; 0x44
 80072b4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80072b8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80072bc:	b93d      	cbnz	r5, 80072ce <_dtoa_r+0x2e>
 80072be:	2010      	movs	r0, #16
 80072c0:	f000 fd48 	bl	8007d54 <malloc>
 80072c4:	6260      	str	r0, [r4, #36]	; 0x24
 80072c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072ca:	6005      	str	r5, [r0, #0]
 80072cc:	60c5      	str	r5, [r0, #12]
 80072ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	b151      	cbz	r1, 80072ea <_dtoa_r+0x4a>
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	604a      	str	r2, [r1, #4]
 80072d8:	2301      	movs	r3, #1
 80072da:	4093      	lsls	r3, r2
 80072dc:	608b      	str	r3, [r1, #8]
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fd88 	bl	8007df4 <_Bfree>
 80072e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	1e3b      	subs	r3, r7, #0
 80072ec:	bfb9      	ittee	lt
 80072ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072f2:	9303      	strlt	r3, [sp, #12]
 80072f4:	2300      	movge	r3, #0
 80072f6:	f8c8 3000 	strge.w	r3, [r8]
 80072fa:	9d03      	ldr	r5, [sp, #12]
 80072fc:	4bac      	ldr	r3, [pc, #688]	; (80075b0 <_dtoa_r+0x310>)
 80072fe:	bfbc      	itt	lt
 8007300:	2201      	movlt	r2, #1
 8007302:	f8c8 2000 	strlt.w	r2, [r8]
 8007306:	43ab      	bics	r3, r5
 8007308:	d11b      	bne.n	8007342 <_dtoa_r+0xa2>
 800730a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800730c:	f242 730f 	movw	r3, #9999	; 0x270f
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	9b02      	ldr	r3, [sp, #8]
 8007314:	b923      	cbnz	r3, 8007320 <_dtoa_r+0x80>
 8007316:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800731a:	2d00      	cmp	r5, #0
 800731c:	f000 84dd 	beq.w	8007cda <_dtoa_r+0xa3a>
 8007320:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007322:	b953      	cbnz	r3, 800733a <_dtoa_r+0x9a>
 8007324:	4ba3      	ldr	r3, [pc, #652]	; (80075b4 <_dtoa_r+0x314>)
 8007326:	e020      	b.n	800736a <_dtoa_r+0xca>
 8007328:	4ba3      	ldr	r3, [pc, #652]	; (80075b8 <_dtoa_r+0x318>)
 800732a:	9304      	str	r3, [sp, #16]
 800732c:	3308      	adds	r3, #8
 800732e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	9804      	ldr	r0, [sp, #16]
 8007334:	b015      	add	sp, #84	; 0x54
 8007336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733a:	4b9e      	ldr	r3, [pc, #632]	; (80075b4 <_dtoa_r+0x314>)
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	3303      	adds	r3, #3
 8007340:	e7f5      	b.n	800732e <_dtoa_r+0x8e>
 8007342:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007346:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800734a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800734e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007352:	d10c      	bne.n	800736e <_dtoa_r+0xce>
 8007354:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007356:	2301      	movs	r3, #1
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 84b9 	beq.w	8007cd4 <_dtoa_r+0xa34>
 8007362:	4b96      	ldr	r3, [pc, #600]	; (80075bc <_dtoa_r+0x31c>)
 8007364:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	3b01      	subs	r3, #1
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	e7e1      	b.n	8007332 <_dtoa_r+0x92>
 800736e:	a913      	add	r1, sp, #76	; 0x4c
 8007370:	aa12      	add	r2, sp, #72	; 0x48
 8007372:	ed9d 0b04 	vldr	d0, [sp, #16]
 8007376:	4620      	mov	r0, r4
 8007378:	f000 ff95 	bl	80082a6 <__d2b>
 800737c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8007380:	9001      	str	r0, [sp, #4]
 8007382:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007384:	2e00      	cmp	r6, #0
 8007386:	d046      	beq.n	8007416 <_dtoa_r+0x176>
 8007388:	9805      	ldr	r0, [sp, #20]
 800738a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800738e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007392:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8007396:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800739a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800739e:	2700      	movs	r7, #0
 80073a0:	ee07 aa90 	vmov	s15, sl
 80073a4:	ec43 2b16 	vmov	d6, r2, r3
 80073a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80073ac:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8007598 <_dtoa_r+0x2f8>
 80073b0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80073b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80073b8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80075a0 <_dtoa_r+0x300>
 80073bc:	eea7 6b04 	vfma.f64	d6, d7, d4
 80073c0:	eeb0 7b46 	vmov.f64	d7, d6
 80073c4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80075a8 <_dtoa_r+0x308>
 80073c8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80073cc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80073d0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80073d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d8:	ee16 ba90 	vmov	fp, s13
 80073dc:	d508      	bpl.n	80073f0 <_dtoa_r+0x150>
 80073de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80073e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80073e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ea:	bf18      	it	ne
 80073ec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80073f0:	f1bb 0f16 	cmp.w	fp, #22
 80073f4:	d834      	bhi.n	8007460 <_dtoa_r+0x1c0>
 80073f6:	4b72      	ldr	r3, [pc, #456]	; (80075c0 <_dtoa_r+0x320>)
 80073f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073fc:	ed93 7b00 	vldr	d7, [r3]
 8007400:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007404:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740c:	dd01      	ble.n	8007412 <_dtoa_r+0x172>
 800740e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007412:	2300      	movs	r3, #0
 8007414:	e025      	b.n	8007462 <_dtoa_r+0x1c2>
 8007416:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007418:	eb01 0a03 	add.w	sl, r1, r3
 800741c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8007420:	2b20      	cmp	r3, #32
 8007422:	dd17      	ble.n	8007454 <_dtoa_r+0x1b4>
 8007424:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007428:	9a02      	ldr	r2, [sp, #8]
 800742a:	409d      	lsls	r5, r3
 800742c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
 8007434:	432b      	orrs	r3, r5
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800743e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007442:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007446:	9805      	ldr	r0, [sp, #20]
 8007448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800744c:	2701      	movs	r7, #1
 800744e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8007452:	e7a5      	b.n	80073a0 <_dtoa_r+0x100>
 8007454:	9a02      	ldr	r2, [sp, #8]
 8007456:	f1c3 0320 	rsb	r3, r3, #32
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	e7ea      	b.n	8007436 <_dtoa_r+0x196>
 8007460:	2301      	movs	r3, #1
 8007462:	eba1 0a0a 	sub.w	sl, r1, sl
 8007466:	9310      	str	r3, [sp, #64]	; 0x40
 8007468:	f1ba 0301 	subs.w	r3, sl, #1
 800746c:	9307      	str	r3, [sp, #28]
 800746e:	bf43      	ittte	mi
 8007470:	2300      	movmi	r3, #0
 8007472:	f1ca 0a01 	rsbmi	sl, sl, #1
 8007476:	9307      	strmi	r3, [sp, #28]
 8007478:	f04f 0a00 	movpl.w	sl, #0
 800747c:	f1bb 0f00 	cmp.w	fp, #0
 8007480:	db19      	blt.n	80074b6 <_dtoa_r+0x216>
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007488:	445b      	add	r3, fp
 800748a:	9307      	str	r3, [sp, #28]
 800748c:	f04f 0800 	mov.w	r8, #0
 8007490:	9b08      	ldr	r3, [sp, #32]
 8007492:	2b09      	cmp	r3, #9
 8007494:	d866      	bhi.n	8007564 <_dtoa_r+0x2c4>
 8007496:	2b05      	cmp	r3, #5
 8007498:	bfc4      	itt	gt
 800749a:	3b04      	subgt	r3, #4
 800749c:	9308      	strgt	r3, [sp, #32]
 800749e:	9b08      	ldr	r3, [sp, #32]
 80074a0:	f1a3 0302 	sub.w	r3, r3, #2
 80074a4:	bfcc      	ite	gt
 80074a6:	2500      	movgt	r5, #0
 80074a8:	2501      	movle	r5, #1
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d866      	bhi.n	800757c <_dtoa_r+0x2dc>
 80074ae:	e8df f003 	tbb	[pc, r3]
 80074b2:	5755      	.short	0x5755
 80074b4:	4909      	.short	0x4909
 80074b6:	2300      	movs	r3, #0
 80074b8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80074bc:	f1cb 0800 	rsb	r8, fp, #0
 80074c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c2:	e7e5      	b.n	8007490 <_dtoa_r+0x1f0>
 80074c4:	2301      	movs	r3, #1
 80074c6:	9309      	str	r3, [sp, #36]	; 0x24
 80074c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dd59      	ble.n	8007582 <_dtoa_r+0x2e2>
 80074ce:	9306      	str	r3, [sp, #24]
 80074d0:	4699      	mov	r9, r3
 80074d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074d4:	2200      	movs	r2, #0
 80074d6:	6072      	str	r2, [r6, #4]
 80074d8:	2204      	movs	r2, #4
 80074da:	f102 0014 	add.w	r0, r2, #20
 80074de:	4298      	cmp	r0, r3
 80074e0:	6871      	ldr	r1, [r6, #4]
 80074e2:	d953      	bls.n	800758c <_dtoa_r+0x2ec>
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 fc51 	bl	8007d8c <_Balloc>
 80074ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ec:	6030      	str	r0, [r6, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	f1b9 0f0e 	cmp.w	r9, #14
 80074f6:	f200 80c2 	bhi.w	800767e <_dtoa_r+0x3de>
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	f000 80bf 	beq.w	800767e <_dtoa_r+0x3de>
 8007500:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007504:	f1bb 0f00 	cmp.w	fp, #0
 8007508:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800750c:	f340 80e6 	ble.w	80076dc <_dtoa_r+0x43c>
 8007510:	4a2b      	ldr	r2, [pc, #172]	; (80075c0 <_dtoa_r+0x320>)
 8007512:	f00b 030f 	and.w	r3, fp, #15
 8007516:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800751a:	ed93 7b00 	vldr	d7, [r3]
 800751e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8007522:	06da      	lsls	r2, r3, #27
 8007524:	f140 80d8 	bpl.w	80076d8 <_dtoa_r+0x438>
 8007528:	4a26      	ldr	r2, [pc, #152]	; (80075c4 <_dtoa_r+0x324>)
 800752a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800752e:	ed92 6b08 	vldr	d6, [r2, #32]
 8007532:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007536:	ed8d 6b02 	vstr	d6, [sp, #8]
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	2203      	movs	r2, #3
 8007540:	4920      	ldr	r1, [pc, #128]	; (80075c4 <_dtoa_r+0x324>)
 8007542:	e04a      	b.n	80075da <_dtoa_r+0x33a>
 8007544:	2301      	movs	r3, #1
 8007546:	9309      	str	r3, [sp, #36]	; 0x24
 8007548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754a:	445b      	add	r3, fp
 800754c:	f103 0901 	add.w	r9, r3, #1
 8007550:	9306      	str	r3, [sp, #24]
 8007552:	464b      	mov	r3, r9
 8007554:	2b01      	cmp	r3, #1
 8007556:	bfb8      	it	lt
 8007558:	2301      	movlt	r3, #1
 800755a:	e7ba      	b.n	80074d2 <_dtoa_r+0x232>
 800755c:	2300      	movs	r3, #0
 800755e:	e7b2      	b.n	80074c6 <_dtoa_r+0x226>
 8007560:	2300      	movs	r3, #0
 8007562:	e7f0      	b.n	8007546 <_dtoa_r+0x2a6>
 8007564:	2501      	movs	r5, #1
 8007566:	2300      	movs	r3, #0
 8007568:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800756c:	f04f 33ff 	mov.w	r3, #4294967295
 8007570:	9306      	str	r3, [sp, #24]
 8007572:	4699      	mov	r9, r3
 8007574:	2200      	movs	r2, #0
 8007576:	2312      	movs	r3, #18
 8007578:	920a      	str	r2, [sp, #40]	; 0x28
 800757a:	e7aa      	b.n	80074d2 <_dtoa_r+0x232>
 800757c:	2301      	movs	r3, #1
 800757e:	9309      	str	r3, [sp, #36]	; 0x24
 8007580:	e7f4      	b.n	800756c <_dtoa_r+0x2cc>
 8007582:	2301      	movs	r3, #1
 8007584:	9306      	str	r3, [sp, #24]
 8007586:	4699      	mov	r9, r3
 8007588:	461a      	mov	r2, r3
 800758a:	e7f5      	b.n	8007578 <_dtoa_r+0x2d8>
 800758c:	3101      	adds	r1, #1
 800758e:	6071      	str	r1, [r6, #4]
 8007590:	0052      	lsls	r2, r2, #1
 8007592:	e7a2      	b.n	80074da <_dtoa_r+0x23a>
 8007594:	f3af 8000 	nop.w
 8007598:	636f4361 	.word	0x636f4361
 800759c:	3fd287a7 	.word	0x3fd287a7
 80075a0:	8b60c8b3 	.word	0x8b60c8b3
 80075a4:	3fc68a28 	.word	0x3fc68a28
 80075a8:	509f79fb 	.word	0x509f79fb
 80075ac:	3fd34413 	.word	0x3fd34413
 80075b0:	7ff00000 	.word	0x7ff00000
 80075b4:	08008a81 	.word	0x08008a81
 80075b8:	08008a78 	.word	0x08008a78
 80075bc:	08008a55 	.word	0x08008a55
 80075c0:	08008ab8 	.word	0x08008ab8
 80075c4:	08008a90 	.word	0x08008a90
 80075c8:	07de      	lsls	r6, r3, #31
 80075ca:	d504      	bpl.n	80075d6 <_dtoa_r+0x336>
 80075cc:	ed91 6b00 	vldr	d6, [r1]
 80075d0:	3201      	adds	r2, #1
 80075d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075d6:	105b      	asrs	r3, r3, #1
 80075d8:	3108      	adds	r1, #8
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f4      	bne.n	80075c8 <_dtoa_r+0x328>
 80075de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80075e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80075e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80a7 	beq.w	8007740 <_dtoa_r+0x4a0>
 80075f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80075f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80075fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007602:	f140 809d 	bpl.w	8007740 <_dtoa_r+0x4a0>
 8007606:	f1b9 0f00 	cmp.w	r9, #0
 800760a:	f000 8099 	beq.w	8007740 <_dtoa_r+0x4a0>
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	dd30      	ble.n	8007676 <_dtoa_r+0x3d6>
 8007614:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007618:	ee27 7b06 	vmul.f64	d7, d7, d6
 800761c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007620:	9d06      	ldr	r5, [sp, #24]
 8007622:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007626:	3201      	adds	r2, #1
 8007628:	ed9d 6b02 	vldr	d6, [sp, #8]
 800762c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007630:	ee07 2a90 	vmov	s15, r2
 8007634:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007638:	eea7 5b06 	vfma.f64	d5, d7, d6
 800763c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007640:	9a03      	ldr	r2, [sp, #12]
 8007642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007646:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800764a:	2d00      	cmp	r5, #0
 800764c:	d17b      	bne.n	8007746 <_dtoa_r+0x4a6>
 800764e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007652:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007656:	ec41 0b17 	vmov	d7, r0, r1
 800765a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800765e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007662:	f300 8253 	bgt.w	8007b0c <_dtoa_r+0x86c>
 8007666:	eeb1 7b47 	vneg.f64	d7, d7
 800766a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800766e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007672:	f100 8249 	bmi.w	8007b08 <_dtoa_r+0x868>
 8007676:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800767a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800767e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007680:	2b00      	cmp	r3, #0
 8007682:	f2c0 8119 	blt.w	80078b8 <_dtoa_r+0x618>
 8007686:	f1bb 0f0e 	cmp.w	fp, #14
 800768a:	f300 8115 	bgt.w	80078b8 <_dtoa_r+0x618>
 800768e:	4bc3      	ldr	r3, [pc, #780]	; (800799c <_dtoa_r+0x6fc>)
 8007690:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007694:	ed93 6b00 	vldr	d6, [r3]
 8007698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769a:	2b00      	cmp	r3, #0
 800769c:	f280 80ba 	bge.w	8007814 <_dtoa_r+0x574>
 80076a0:	f1b9 0f00 	cmp.w	r9, #0
 80076a4:	f300 80b6 	bgt.w	8007814 <_dtoa_r+0x574>
 80076a8:	f040 822d 	bne.w	8007b06 <_dtoa_r+0x866>
 80076ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80076b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80076b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c0:	464d      	mov	r5, r9
 80076c2:	464f      	mov	r7, r9
 80076c4:	f280 8204 	bge.w	8007ad0 <_dtoa_r+0x830>
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	9a04      	ldr	r2, [sp, #16]
 80076cc:	1c5e      	adds	r6, r3, #1
 80076ce:	2331      	movs	r3, #49	; 0x31
 80076d0:	7013      	strb	r3, [r2, #0]
 80076d2:	f10b 0b01 	add.w	fp, fp, #1
 80076d6:	e1ff      	b.n	8007ad8 <_dtoa_r+0x838>
 80076d8:	2202      	movs	r2, #2
 80076da:	e731      	b.n	8007540 <_dtoa_r+0x2a0>
 80076dc:	d02e      	beq.n	800773c <_dtoa_r+0x49c>
 80076de:	f1cb 0300 	rsb	r3, fp, #0
 80076e2:	4aae      	ldr	r2, [pc, #696]	; (800799c <_dtoa_r+0x6fc>)
 80076e4:	f003 010f 	and.w	r1, r3, #15
 80076e8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80076ec:	ed92 7b00 	vldr	d7, [r2]
 80076f0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80076f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80076f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80076fc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8007700:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007704:	49a6      	ldr	r1, [pc, #664]	; (80079a0 <_dtoa_r+0x700>)
 8007706:	111b      	asrs	r3, r3, #4
 8007708:	2000      	movs	r0, #0
 800770a:	2202      	movs	r2, #2
 800770c:	b93b      	cbnz	r3, 800771e <_dtoa_r+0x47e>
 800770e:	2800      	cmp	r0, #0
 8007710:	f43f af6b 	beq.w	80075ea <_dtoa_r+0x34a>
 8007714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800771c:	e765      	b.n	80075ea <_dtoa_r+0x34a>
 800771e:	07dd      	lsls	r5, r3, #31
 8007720:	d509      	bpl.n	8007736 <_dtoa_r+0x496>
 8007722:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007726:	ed91 7b00 	vldr	d7, [r1]
 800772a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800772e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007732:	3201      	adds	r2, #1
 8007734:	2001      	movs	r0, #1
 8007736:	105b      	asrs	r3, r3, #1
 8007738:	3108      	adds	r1, #8
 800773a:	e7e7      	b.n	800770c <_dtoa_r+0x46c>
 800773c:	2202      	movs	r2, #2
 800773e:	e754      	b.n	80075ea <_dtoa_r+0x34a>
 8007740:	465b      	mov	r3, fp
 8007742:	464d      	mov	r5, r9
 8007744:	e770      	b.n	8007628 <_dtoa_r+0x388>
 8007746:	4a95      	ldr	r2, [pc, #596]	; (800799c <_dtoa_r+0x6fc>)
 8007748:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800774c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007752:	ec41 0b17 	vmov	d7, r0, r1
 8007756:	b35a      	cbz	r2, 80077b0 <_dtoa_r+0x510>
 8007758:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800775c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007760:	9e04      	ldr	r6, [sp, #16]
 8007762:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007766:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800776a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800776e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007772:	ee14 2a90 	vmov	r2, s9
 8007776:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800777a:	3230      	adds	r2, #48	; 0x30
 800777c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007780:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007788:	f806 2b01 	strb.w	r2, [r6], #1
 800778c:	d43b      	bmi.n	8007806 <_dtoa_r+0x566>
 800778e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007792:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779a:	d472      	bmi.n	8007882 <_dtoa_r+0x5e2>
 800779c:	9a04      	ldr	r2, [sp, #16]
 800779e:	1ab2      	subs	r2, r6, r2
 80077a0:	4295      	cmp	r5, r2
 80077a2:	f77f af68 	ble.w	8007676 <_dtoa_r+0x3d6>
 80077a6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80077aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80077ae:	e7de      	b.n	800776e <_dtoa_r+0x4ce>
 80077b0:	9a04      	ldr	r2, [sp, #16]
 80077b2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80077b6:	1956      	adds	r6, r2, r5
 80077b8:	4611      	mov	r1, r2
 80077ba:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80077be:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80077c2:	ee14 2a90 	vmov	r2, s9
 80077c6:	3230      	adds	r2, #48	; 0x30
 80077c8:	f801 2b01 	strb.w	r2, [r1], #1
 80077cc:	42b1      	cmp	r1, r6
 80077ce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80077d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80077d6:	d11a      	bne.n	800780e <_dtoa_r+0x56e>
 80077d8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80077dc:	ee37 4b05 	vadd.f64	d4, d7, d5
 80077e0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80077e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e8:	dc4b      	bgt.n	8007882 <_dtoa_r+0x5e2>
 80077ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80077f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f6:	f57f af3e 	bpl.w	8007676 <_dtoa_r+0x3d6>
 80077fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80077fe:	2a30      	cmp	r2, #48	; 0x30
 8007800:	f106 31ff 	add.w	r1, r6, #4294967295
 8007804:	d001      	beq.n	800780a <_dtoa_r+0x56a>
 8007806:	469b      	mov	fp, r3
 8007808:	e02a      	b.n	8007860 <_dtoa_r+0x5c0>
 800780a:	460e      	mov	r6, r1
 800780c:	e7f5      	b.n	80077fa <_dtoa_r+0x55a>
 800780e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007812:	e7d4      	b.n	80077be <_dtoa_r+0x51e>
 8007814:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007818:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800781c:	9e04      	ldr	r6, [sp, #16]
 800781e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007822:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007826:	ee15 3a10 	vmov	r3, s10
 800782a:	3330      	adds	r3, #48	; 0x30
 800782c:	f806 3b01 	strb.w	r3, [r6], #1
 8007830:	9b04      	ldr	r3, [sp, #16]
 8007832:	1af3      	subs	r3, r6, r3
 8007834:	4599      	cmp	r9, r3
 8007836:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800783a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800783e:	d133      	bne.n	80078a8 <_dtoa_r+0x608>
 8007840:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007844:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784c:	dc18      	bgt.n	8007880 <_dtoa_r+0x5e0>
 800784e:	eeb4 7b46 	vcmp.f64	d7, d6
 8007852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007856:	d103      	bne.n	8007860 <_dtoa_r+0x5c0>
 8007858:	ee15 3a10 	vmov	r3, s10
 800785c:	07db      	lsls	r3, r3, #31
 800785e:	d40f      	bmi.n	8007880 <_dtoa_r+0x5e0>
 8007860:	9901      	ldr	r1, [sp, #4]
 8007862:	4620      	mov	r0, r4
 8007864:	f000 fac6 	bl	8007df4 <_Bfree>
 8007868:	2300      	movs	r3, #0
 800786a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800786c:	7033      	strb	r3, [r6, #0]
 800786e:	f10b 0301 	add.w	r3, fp, #1
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007876:	2b00      	cmp	r3, #0
 8007878:	f43f ad5b 	beq.w	8007332 <_dtoa_r+0x92>
 800787c:	601e      	str	r6, [r3, #0]
 800787e:	e558      	b.n	8007332 <_dtoa_r+0x92>
 8007880:	465b      	mov	r3, fp
 8007882:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007886:	2939      	cmp	r1, #57	; 0x39
 8007888:	f106 32ff 	add.w	r2, r6, #4294967295
 800788c:	d106      	bne.n	800789c <_dtoa_r+0x5fc>
 800788e:	9904      	ldr	r1, [sp, #16]
 8007890:	4291      	cmp	r1, r2
 8007892:	d107      	bne.n	80078a4 <_dtoa_r+0x604>
 8007894:	2230      	movs	r2, #48	; 0x30
 8007896:	700a      	strb	r2, [r1, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	460a      	mov	r2, r1
 800789c:	7811      	ldrb	r1, [r2, #0]
 800789e:	3101      	adds	r1, #1
 80078a0:	7011      	strb	r1, [r2, #0]
 80078a2:	e7b0      	b.n	8007806 <_dtoa_r+0x566>
 80078a4:	4616      	mov	r6, r2
 80078a6:	e7ec      	b.n	8007882 <_dtoa_r+0x5e2>
 80078a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80078ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b4:	d1b3      	bne.n	800781e <_dtoa_r+0x57e>
 80078b6:	e7d3      	b.n	8007860 <_dtoa_r+0x5c0>
 80078b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	f000 808d 	beq.w	80079da <_dtoa_r+0x73a>
 80078c0:	9a08      	ldr	r2, [sp, #32]
 80078c2:	2a01      	cmp	r2, #1
 80078c4:	dc72      	bgt.n	80079ac <_dtoa_r+0x70c>
 80078c6:	2f00      	cmp	r7, #0
 80078c8:	d06c      	beq.n	80079a4 <_dtoa_r+0x704>
 80078ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078ce:	4645      	mov	r5, r8
 80078d0:	4656      	mov	r6, sl
 80078d2:	9a07      	ldr	r2, [sp, #28]
 80078d4:	2101      	movs	r1, #1
 80078d6:	441a      	add	r2, r3
 80078d8:	4620      	mov	r0, r4
 80078da:	449a      	add	sl, r3
 80078dc:	9207      	str	r2, [sp, #28]
 80078de:	f000 fb29 	bl	8007f34 <__i2b>
 80078e2:	4607      	mov	r7, r0
 80078e4:	2e00      	cmp	r6, #0
 80078e6:	dd0b      	ble.n	8007900 <_dtoa_r+0x660>
 80078e8:	9b07      	ldr	r3, [sp, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dd08      	ble.n	8007900 <_dtoa_r+0x660>
 80078ee:	42b3      	cmp	r3, r6
 80078f0:	9a07      	ldr	r2, [sp, #28]
 80078f2:	bfa8      	it	ge
 80078f4:	4633      	movge	r3, r6
 80078f6:	ebaa 0a03 	sub.w	sl, sl, r3
 80078fa:	1af6      	subs	r6, r6, r3
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	f1b8 0f00 	cmp.w	r8, #0
 8007904:	d01d      	beq.n	8007942 <_dtoa_r+0x6a2>
 8007906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	d06a      	beq.n	80079e2 <_dtoa_r+0x742>
 800790c:	b18d      	cbz	r5, 8007932 <_dtoa_r+0x692>
 800790e:	4639      	mov	r1, r7
 8007910:	462a      	mov	r2, r5
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fbae 	bl	8008074 <__pow5mult>
 8007918:	9a01      	ldr	r2, [sp, #4]
 800791a:	4601      	mov	r1, r0
 800791c:	4607      	mov	r7, r0
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fb11 	bl	8007f46 <__multiply>
 8007924:	9901      	ldr	r1, [sp, #4]
 8007926:	900c      	str	r0, [sp, #48]	; 0x30
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fa63 	bl	8007df4 <_Bfree>
 800792e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	ebb8 0205 	subs.w	r2, r8, r5
 8007936:	d004      	beq.n	8007942 <_dtoa_r+0x6a2>
 8007938:	9901      	ldr	r1, [sp, #4]
 800793a:	4620      	mov	r0, r4
 800793c:	f000 fb9a 	bl	8008074 <__pow5mult>
 8007940:	9001      	str	r0, [sp, #4]
 8007942:	2101      	movs	r1, #1
 8007944:	4620      	mov	r0, r4
 8007946:	f000 faf5 	bl	8007f34 <__i2b>
 800794a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800794c:	4605      	mov	r5, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 81ca 	beq.w	8007ce8 <_dtoa_r+0xa48>
 8007954:	461a      	mov	r2, r3
 8007956:	4601      	mov	r1, r0
 8007958:	4620      	mov	r0, r4
 800795a:	f000 fb8b 	bl	8008074 <__pow5mult>
 800795e:	9b08      	ldr	r3, [sp, #32]
 8007960:	2b01      	cmp	r3, #1
 8007962:	4605      	mov	r5, r0
 8007964:	dc44      	bgt.n	80079f0 <_dtoa_r+0x750>
 8007966:	9b02      	ldr	r3, [sp, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d13c      	bne.n	80079e6 <_dtoa_r+0x746>
 800796c:	9b03      	ldr	r3, [sp, #12]
 800796e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007972:	2b00      	cmp	r3, #0
 8007974:	d137      	bne.n	80079e6 <_dtoa_r+0x746>
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800797c:	0d1b      	lsrs	r3, r3, #20
 800797e:	051b      	lsls	r3, r3, #20
 8007980:	2b00      	cmp	r3, #0
 8007982:	d033      	beq.n	80079ec <_dtoa_r+0x74c>
 8007984:	9b07      	ldr	r3, [sp, #28]
 8007986:	3301      	adds	r3, #1
 8007988:	f10a 0a01 	add.w	sl, sl, #1
 800798c:	9307      	str	r3, [sp, #28]
 800798e:	f04f 0801 	mov.w	r8, #1
 8007992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007994:	bb73      	cbnz	r3, 80079f4 <_dtoa_r+0x754>
 8007996:	2001      	movs	r0, #1
 8007998:	e034      	b.n	8007a04 <_dtoa_r+0x764>
 800799a:	bf00      	nop
 800799c:	08008ab8 	.word	0x08008ab8
 80079a0:	08008a90 	.word	0x08008a90
 80079a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079aa:	e790      	b.n	80078ce <_dtoa_r+0x62e>
 80079ac:	f109 35ff 	add.w	r5, r9, #4294967295
 80079b0:	45a8      	cmp	r8, r5
 80079b2:	bfbf      	itttt	lt
 80079b4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80079b6:	eba5 0808 	sublt.w	r8, r5, r8
 80079ba:	4443      	addlt	r3, r8
 80079bc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80079be:	bfb6      	itet	lt
 80079c0:	46a8      	movlt	r8, r5
 80079c2:	eba8 0505 	subge.w	r5, r8, r5
 80079c6:	2500      	movlt	r5, #0
 80079c8:	f1b9 0f00 	cmp.w	r9, #0
 80079cc:	bfb9      	ittee	lt
 80079ce:	ebaa 0609 	sublt.w	r6, sl, r9
 80079d2:	2300      	movlt	r3, #0
 80079d4:	4656      	movge	r6, sl
 80079d6:	464b      	movge	r3, r9
 80079d8:	e77b      	b.n	80078d2 <_dtoa_r+0x632>
 80079da:	4645      	mov	r5, r8
 80079dc:	4656      	mov	r6, sl
 80079de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80079e0:	e780      	b.n	80078e4 <_dtoa_r+0x644>
 80079e2:	4642      	mov	r2, r8
 80079e4:	e7a8      	b.n	8007938 <_dtoa_r+0x698>
 80079e6:	f04f 0800 	mov.w	r8, #0
 80079ea:	e7d2      	b.n	8007992 <_dtoa_r+0x6f2>
 80079ec:	4698      	mov	r8, r3
 80079ee:	e7d0      	b.n	8007992 <_dtoa_r+0x6f2>
 80079f0:	f04f 0800 	mov.w	r8, #0
 80079f4:	692b      	ldr	r3, [r5, #16]
 80079f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80079fa:	6918      	ldr	r0, [r3, #16]
 80079fc:	f000 fa4c 	bl	8007e98 <__hi0bits>
 8007a00:	f1c0 0020 	rsb	r0, r0, #32
 8007a04:	9b07      	ldr	r3, [sp, #28]
 8007a06:	4418      	add	r0, r3
 8007a08:	f010 001f 	ands.w	r0, r0, #31
 8007a0c:	d047      	beq.n	8007a9e <_dtoa_r+0x7fe>
 8007a0e:	f1c0 0320 	rsb	r3, r0, #32
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	dd3b      	ble.n	8007a8e <_dtoa_r+0x7ee>
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	f1c0 001c 	rsb	r0, r0, #28
 8007a1c:	4482      	add	sl, r0
 8007a1e:	4406      	add	r6, r0
 8007a20:	4403      	add	r3, r0
 8007a22:	9307      	str	r3, [sp, #28]
 8007a24:	f1ba 0f00 	cmp.w	sl, #0
 8007a28:	dd05      	ble.n	8007a36 <_dtoa_r+0x796>
 8007a2a:	4652      	mov	r2, sl
 8007a2c:	9901      	ldr	r1, [sp, #4]
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fb6e 	bl	8008110 <__lshift>
 8007a34:	9001      	str	r0, [sp, #4]
 8007a36:	9b07      	ldr	r3, [sp, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dd05      	ble.n	8007a48 <_dtoa_r+0x7a8>
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 fb65 	bl	8008110 <__lshift>
 8007a46:	4605      	mov	r5, r0
 8007a48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a4a:	b353      	cbz	r3, 8007aa2 <_dtoa_r+0x802>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	9801      	ldr	r0, [sp, #4]
 8007a50:	f000 fbb2 	bl	80081b8 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	da24      	bge.n	8007aa2 <_dtoa_r+0x802>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	220a      	movs	r2, #10
 8007a5c:	9901      	ldr	r1, [sp, #4]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f000 f9df 	bl	8007e22 <__multadd>
 8007a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a66:	9001      	str	r0, [sp, #4]
 8007a68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 8142 	beq.w	8007cf6 <_dtoa_r+0xa56>
 8007a72:	2300      	movs	r3, #0
 8007a74:	4639      	mov	r1, r7
 8007a76:	220a      	movs	r2, #10
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 f9d2 	bl	8007e22 <__multadd>
 8007a7e:	9b06      	ldr	r3, [sp, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	4607      	mov	r7, r0
 8007a84:	dc4b      	bgt.n	8007b1e <_dtoa_r+0x87e>
 8007a86:	9b08      	ldr	r3, [sp, #32]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	dd48      	ble.n	8007b1e <_dtoa_r+0x87e>
 8007a8c:	e011      	b.n	8007ab2 <_dtoa_r+0x812>
 8007a8e:	d0c9      	beq.n	8007a24 <_dtoa_r+0x784>
 8007a90:	9a07      	ldr	r2, [sp, #28]
 8007a92:	331c      	adds	r3, #28
 8007a94:	441a      	add	r2, r3
 8007a96:	449a      	add	sl, r3
 8007a98:	441e      	add	r6, r3
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	e7c1      	b.n	8007a22 <_dtoa_r+0x782>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	e7f6      	b.n	8007a90 <_dtoa_r+0x7f0>
 8007aa2:	f1b9 0f00 	cmp.w	r9, #0
 8007aa6:	dc34      	bgt.n	8007b12 <_dtoa_r+0x872>
 8007aa8:	9b08      	ldr	r3, [sp, #32]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	dd31      	ble.n	8007b12 <_dtoa_r+0x872>
 8007aae:	f8cd 9018 	str.w	r9, [sp, #24]
 8007ab2:	9b06      	ldr	r3, [sp, #24]
 8007ab4:	b963      	cbnz	r3, 8007ad0 <_dtoa_r+0x830>
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	2205      	movs	r2, #5
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 f9b1 	bl	8007e22 <__multadd>
 8007ac0:	4601      	mov	r1, r0
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	9801      	ldr	r0, [sp, #4]
 8007ac6:	f000 fb77 	bl	80081b8 <__mcmp>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	f73f adfc 	bgt.w	80076c8 <_dtoa_r+0x428>
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad2:	9e04      	ldr	r6, [sp, #16]
 8007ad4:	ea6f 0b03 	mvn.w	fp, r3
 8007ad8:	f04f 0900 	mov.w	r9, #0
 8007adc:	4629      	mov	r1, r5
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 f988 	bl	8007df4 <_Bfree>
 8007ae4:	2f00      	cmp	r7, #0
 8007ae6:	f43f aebb 	beq.w	8007860 <_dtoa_r+0x5c0>
 8007aea:	f1b9 0f00 	cmp.w	r9, #0
 8007aee:	d005      	beq.n	8007afc <_dtoa_r+0x85c>
 8007af0:	45b9      	cmp	r9, r7
 8007af2:	d003      	beq.n	8007afc <_dtoa_r+0x85c>
 8007af4:	4649      	mov	r1, r9
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 f97c 	bl	8007df4 <_Bfree>
 8007afc:	4639      	mov	r1, r7
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 f978 	bl	8007df4 <_Bfree>
 8007b04:	e6ac      	b.n	8007860 <_dtoa_r+0x5c0>
 8007b06:	2500      	movs	r5, #0
 8007b08:	462f      	mov	r7, r5
 8007b0a:	e7e1      	b.n	8007ad0 <_dtoa_r+0x830>
 8007b0c:	469b      	mov	fp, r3
 8007b0e:	462f      	mov	r7, r5
 8007b10:	e5da      	b.n	80076c8 <_dtoa_r+0x428>
 8007b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b14:	f8cd 9018 	str.w	r9, [sp, #24]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80f3 	beq.w	8007d04 <_dtoa_r+0xa64>
 8007b1e:	2e00      	cmp	r6, #0
 8007b20:	dd05      	ble.n	8007b2e <_dtoa_r+0x88e>
 8007b22:	4639      	mov	r1, r7
 8007b24:	4632      	mov	r2, r6
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 faf2 	bl	8008110 <__lshift>
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	f1b8 0f00 	cmp.w	r8, #0
 8007b32:	d04c      	beq.n	8007bce <_dtoa_r+0x92e>
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 f928 	bl	8007d8c <_Balloc>
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	3202      	adds	r2, #2
 8007b40:	4606      	mov	r6, r0
 8007b42:	0092      	lsls	r2, r2, #2
 8007b44:	f107 010c 	add.w	r1, r7, #12
 8007b48:	300c      	adds	r0, #12
 8007b4a:	f7fe fdab 	bl	80066a4 <memcpy>
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4631      	mov	r1, r6
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fadc 	bl	8008110 <__lshift>
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	46b9      	mov	r9, r7
 8007b64:	9307      	str	r3, [sp, #28]
 8007b66:	4607      	mov	r7, r0
 8007b68:	4629      	mov	r1, r5
 8007b6a:	9801      	ldr	r0, [sp, #4]
 8007b6c:	f7ff fb0a 	bl	8007184 <quorem>
 8007b70:	4649      	mov	r1, r9
 8007b72:	4606      	mov	r6, r0
 8007b74:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007b78:	9801      	ldr	r0, [sp, #4]
 8007b7a:	f000 fb1d 	bl	80081b8 <__mcmp>
 8007b7e:	463a      	mov	r2, r7
 8007b80:	9002      	str	r0, [sp, #8]
 8007b82:	4629      	mov	r1, r5
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fb31 	bl	80081ec <__mdiff>
 8007b8a:	68c3      	ldr	r3, [r0, #12]
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	bb03      	cbnz	r3, 8007bd2 <_dtoa_r+0x932>
 8007b90:	4601      	mov	r1, r0
 8007b92:	9009      	str	r0, [sp, #36]	; 0x24
 8007b94:	9801      	ldr	r0, [sp, #4]
 8007b96:	f000 fb0f 	bl	80081b8 <__mcmp>
 8007b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba4:	f000 f926 	bl	8007df4 <_Bfree>
 8007ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007baa:	b9a3      	cbnz	r3, 8007bd6 <_dtoa_r+0x936>
 8007bac:	9a08      	ldr	r2, [sp, #32]
 8007bae:	b992      	cbnz	r2, 8007bd6 <_dtoa_r+0x936>
 8007bb0:	9a07      	ldr	r2, [sp, #28]
 8007bb2:	b982      	cbnz	r2, 8007bd6 <_dtoa_r+0x936>
 8007bb4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007bb8:	d029      	beq.n	8007c0e <_dtoa_r+0x96e>
 8007bba:	9b02      	ldr	r3, [sp, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	dd01      	ble.n	8007bc4 <_dtoa_r+0x924>
 8007bc0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8007bc4:	f10a 0601 	add.w	r6, sl, #1
 8007bc8:	f88a 8000 	strb.w	r8, [sl]
 8007bcc:	e786      	b.n	8007adc <_dtoa_r+0x83c>
 8007bce:	4638      	mov	r0, r7
 8007bd0:	e7c2      	b.n	8007b58 <_dtoa_r+0x8b8>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e7e3      	b.n	8007b9e <_dtoa_r+0x8fe>
 8007bd6:	9a02      	ldr	r2, [sp, #8]
 8007bd8:	2a00      	cmp	r2, #0
 8007bda:	db04      	blt.n	8007be6 <_dtoa_r+0x946>
 8007bdc:	d124      	bne.n	8007c28 <_dtoa_r+0x988>
 8007bde:	9a08      	ldr	r2, [sp, #32]
 8007be0:	bb12      	cbnz	r2, 8007c28 <_dtoa_r+0x988>
 8007be2:	9a07      	ldr	r2, [sp, #28]
 8007be4:	bb02      	cbnz	r2, 8007c28 <_dtoa_r+0x988>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	ddec      	ble.n	8007bc4 <_dtoa_r+0x924>
 8007bea:	2201      	movs	r2, #1
 8007bec:	9901      	ldr	r1, [sp, #4]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 fa8e 	bl	8008110 <__lshift>
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	9001      	str	r0, [sp, #4]
 8007bf8:	f000 fade 	bl	80081b8 <__mcmp>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	dc03      	bgt.n	8007c08 <_dtoa_r+0x968>
 8007c00:	d1e0      	bne.n	8007bc4 <_dtoa_r+0x924>
 8007c02:	f018 0f01 	tst.w	r8, #1
 8007c06:	d0dd      	beq.n	8007bc4 <_dtoa_r+0x924>
 8007c08:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c0c:	d1d8      	bne.n	8007bc0 <_dtoa_r+0x920>
 8007c0e:	2339      	movs	r3, #57	; 0x39
 8007c10:	f10a 0601 	add.w	r6, sl, #1
 8007c14:	f88a 3000 	strb.w	r3, [sl]
 8007c18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c1c:	2b39      	cmp	r3, #57	; 0x39
 8007c1e:	f106 32ff 	add.w	r2, r6, #4294967295
 8007c22:	d04c      	beq.n	8007cbe <_dtoa_r+0xa1e>
 8007c24:	3301      	adds	r3, #1
 8007c26:	e051      	b.n	8007ccc <_dtoa_r+0xa2c>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f10a 0601 	add.w	r6, sl, #1
 8007c2e:	dd05      	ble.n	8007c3c <_dtoa_r+0x99c>
 8007c30:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c34:	d0eb      	beq.n	8007c0e <_dtoa_r+0x96e>
 8007c36:	f108 0801 	add.w	r8, r8, #1
 8007c3a:	e7c5      	b.n	8007bc8 <_dtoa_r+0x928>
 8007c3c:	9b04      	ldr	r3, [sp, #16]
 8007c3e:	9a06      	ldr	r2, [sp, #24]
 8007c40:	f806 8c01 	strb.w	r8, [r6, #-1]
 8007c44:	1af3      	subs	r3, r6, r3
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d021      	beq.n	8007c8e <_dtoa_r+0x9ee>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	220a      	movs	r2, #10
 8007c4e:	9901      	ldr	r1, [sp, #4]
 8007c50:	4620      	mov	r0, r4
 8007c52:	f000 f8e6 	bl	8007e22 <__multadd>
 8007c56:	45b9      	cmp	r9, r7
 8007c58:	9001      	str	r0, [sp, #4]
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	f04f 020a 	mov.w	r2, #10
 8007c62:	4649      	mov	r1, r9
 8007c64:	4620      	mov	r0, r4
 8007c66:	d105      	bne.n	8007c74 <_dtoa_r+0x9d4>
 8007c68:	f000 f8db 	bl	8007e22 <__multadd>
 8007c6c:	4681      	mov	r9, r0
 8007c6e:	4607      	mov	r7, r0
 8007c70:	46b2      	mov	sl, r6
 8007c72:	e779      	b.n	8007b68 <_dtoa_r+0x8c8>
 8007c74:	f000 f8d5 	bl	8007e22 <__multadd>
 8007c78:	4639      	mov	r1, r7
 8007c7a:	4681      	mov	r9, r0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	220a      	movs	r2, #10
 8007c80:	4620      	mov	r0, r4
 8007c82:	f000 f8ce 	bl	8007e22 <__multadd>
 8007c86:	4607      	mov	r7, r0
 8007c88:	e7f2      	b.n	8007c70 <_dtoa_r+0x9d0>
 8007c8a:	f04f 0900 	mov.w	r9, #0
 8007c8e:	2201      	movs	r2, #1
 8007c90:	9901      	ldr	r1, [sp, #4]
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 fa3c 	bl	8008110 <__lshift>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	9001      	str	r0, [sp, #4]
 8007c9c:	f000 fa8c 	bl	80081b8 <__mcmp>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	dcb9      	bgt.n	8007c18 <_dtoa_r+0x978>
 8007ca4:	d102      	bne.n	8007cac <_dtoa_r+0xa0c>
 8007ca6:	f018 0f01 	tst.w	r8, #1
 8007caa:	d1b5      	bne.n	8007c18 <_dtoa_r+0x978>
 8007cac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007cb0:	2b30      	cmp	r3, #48	; 0x30
 8007cb2:	f106 32ff 	add.w	r2, r6, #4294967295
 8007cb6:	f47f af11 	bne.w	8007adc <_dtoa_r+0x83c>
 8007cba:	4616      	mov	r6, r2
 8007cbc:	e7f6      	b.n	8007cac <_dtoa_r+0xa0c>
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d105      	bne.n	8007cd0 <_dtoa_r+0xa30>
 8007cc4:	9a04      	ldr	r2, [sp, #16]
 8007cc6:	f10b 0b01 	add.w	fp, fp, #1
 8007cca:	2331      	movs	r3, #49	; 0x31
 8007ccc:	7013      	strb	r3, [r2, #0]
 8007cce:	e705      	b.n	8007adc <_dtoa_r+0x83c>
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	e7a1      	b.n	8007c18 <_dtoa_r+0x978>
 8007cd4:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <_dtoa_r+0xa90>)
 8007cd6:	f7ff bb48 	b.w	800736a <_dtoa_r+0xca>
 8007cda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f47f ab23 	bne.w	8007328 <_dtoa_r+0x88>
 8007ce2:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <_dtoa_r+0xa94>)
 8007ce4:	f7ff bb41 	b.w	800736a <_dtoa_r+0xca>
 8007ce8:	9b08      	ldr	r3, [sp, #32]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	f77f ae3b 	ble.w	8007966 <_dtoa_r+0x6c6>
 8007cf0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007cf4:	e64f      	b.n	8007996 <_dtoa_r+0x6f6>
 8007cf6:	9b06      	ldr	r3, [sp, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dc03      	bgt.n	8007d04 <_dtoa_r+0xa64>
 8007cfc:	9b08      	ldr	r3, [sp, #32]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	f73f aed7 	bgt.w	8007ab2 <_dtoa_r+0x812>
 8007d04:	9e04      	ldr	r6, [sp, #16]
 8007d06:	9801      	ldr	r0, [sp, #4]
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7ff fa3b 	bl	8007184 <quorem>
 8007d0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d12:	f806 8b01 	strb.w	r8, [r6], #1
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	9a06      	ldr	r2, [sp, #24]
 8007d1a:	1af3      	subs	r3, r6, r3
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	ddb4      	ble.n	8007c8a <_dtoa_r+0x9ea>
 8007d20:	2300      	movs	r3, #0
 8007d22:	220a      	movs	r2, #10
 8007d24:	9901      	ldr	r1, [sp, #4]
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 f87b 	bl	8007e22 <__multadd>
 8007d2c:	9001      	str	r0, [sp, #4]
 8007d2e:	e7ea      	b.n	8007d06 <_dtoa_r+0xa66>
 8007d30:	08008a54 	.word	0x08008a54
 8007d34:	08008a78 	.word	0x08008a78

08007d38 <_localeconv_r>:
 8007d38:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <_localeconv_r+0x14>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6a18      	ldr	r0, [r3, #32]
 8007d3e:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <_localeconv_r+0x18>)
 8007d40:	2800      	cmp	r0, #0
 8007d42:	bf08      	it	eq
 8007d44:	4618      	moveq	r0, r3
 8007d46:	30f0      	adds	r0, #240	; 0xf0
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	20000014 	.word	0x20000014
 8007d50:	20000078 	.word	0x20000078

08007d54 <malloc>:
 8007d54:	4b02      	ldr	r3, [pc, #8]	; (8007d60 <malloc+0xc>)
 8007d56:	4601      	mov	r1, r0
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	f7fe bccf 	b.w	80066fc <_malloc_r>
 8007d5e:	bf00      	nop
 8007d60:	20000014 	.word	0x20000014

08007d64 <__ascii_mbtowc>:
 8007d64:	b082      	sub	sp, #8
 8007d66:	b901      	cbnz	r1, 8007d6a <__ascii_mbtowc+0x6>
 8007d68:	a901      	add	r1, sp, #4
 8007d6a:	b142      	cbz	r2, 8007d7e <__ascii_mbtowc+0x1a>
 8007d6c:	b14b      	cbz	r3, 8007d82 <__ascii_mbtowc+0x1e>
 8007d6e:	7813      	ldrb	r3, [r2, #0]
 8007d70:	600b      	str	r3, [r1, #0]
 8007d72:	7812      	ldrb	r2, [r2, #0]
 8007d74:	1c10      	adds	r0, r2, #0
 8007d76:	bf18      	it	ne
 8007d78:	2001      	movne	r0, #1
 8007d7a:	b002      	add	sp, #8
 8007d7c:	4770      	bx	lr
 8007d7e:	4610      	mov	r0, r2
 8007d80:	e7fb      	b.n	8007d7a <__ascii_mbtowc+0x16>
 8007d82:	f06f 0001 	mvn.w	r0, #1
 8007d86:	e7f8      	b.n	8007d7a <__ascii_mbtowc+0x16>

08007d88 <__malloc_lock>:
 8007d88:	4770      	bx	lr

08007d8a <__malloc_unlock>:
 8007d8a:	4770      	bx	lr

08007d8c <_Balloc>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d90:	4604      	mov	r4, r0
 8007d92:	460e      	mov	r6, r1
 8007d94:	b93d      	cbnz	r5, 8007da6 <_Balloc+0x1a>
 8007d96:	2010      	movs	r0, #16
 8007d98:	f7ff ffdc 	bl	8007d54 <malloc>
 8007d9c:	6260      	str	r0, [r4, #36]	; 0x24
 8007d9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007da2:	6005      	str	r5, [r0, #0]
 8007da4:	60c5      	str	r5, [r0, #12]
 8007da6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007da8:	68eb      	ldr	r3, [r5, #12]
 8007daa:	b183      	cbz	r3, 8007dce <_Balloc+0x42>
 8007dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007db4:	b9b8      	cbnz	r0, 8007de6 <_Balloc+0x5a>
 8007db6:	2101      	movs	r1, #1
 8007db8:	fa01 f506 	lsl.w	r5, r1, r6
 8007dbc:	1d6a      	adds	r2, r5, #5
 8007dbe:	0092      	lsls	r2, r2, #2
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 fabf 	bl	8008344 <_calloc_r>
 8007dc6:	b160      	cbz	r0, 8007de2 <_Balloc+0x56>
 8007dc8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007dcc:	e00e      	b.n	8007dec <_Balloc+0x60>
 8007dce:	2221      	movs	r2, #33	; 0x21
 8007dd0:	2104      	movs	r1, #4
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 fab6 	bl	8008344 <_calloc_r>
 8007dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dda:	60e8      	str	r0, [r5, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e4      	bne.n	8007dac <_Balloc+0x20>
 8007de2:	2000      	movs	r0, #0
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	6802      	ldr	r2, [r0, #0]
 8007de8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007dec:	2300      	movs	r3, #0
 8007dee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007df2:	e7f7      	b.n	8007de4 <_Balloc+0x58>

08007df4 <_Bfree>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007df8:	4606      	mov	r6, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	b93c      	cbnz	r4, 8007e0e <_Bfree+0x1a>
 8007dfe:	2010      	movs	r0, #16
 8007e00:	f7ff ffa8 	bl	8007d54 <malloc>
 8007e04:	6270      	str	r0, [r6, #36]	; 0x24
 8007e06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e0a:	6004      	str	r4, [r0, #0]
 8007e0c:	60c4      	str	r4, [r0, #12]
 8007e0e:	b13d      	cbz	r5, 8007e20 <_Bfree+0x2c>
 8007e10:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e12:	686a      	ldr	r2, [r5, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e1a:	6029      	str	r1, [r5, #0]
 8007e1c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007e20:	bd70      	pop	{r4, r5, r6, pc}

08007e22 <__multadd>:
 8007e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e26:	690d      	ldr	r5, [r1, #16]
 8007e28:	461f      	mov	r7, r3
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	f101 0c14 	add.w	ip, r1, #20
 8007e32:	2300      	movs	r3, #0
 8007e34:	f8dc 0000 	ldr.w	r0, [ip]
 8007e38:	b281      	uxth	r1, r0
 8007e3a:	fb02 7101 	mla	r1, r2, r1, r7
 8007e3e:	0c0f      	lsrs	r7, r1, #16
 8007e40:	0c00      	lsrs	r0, r0, #16
 8007e42:	fb02 7000 	mla	r0, r2, r0, r7
 8007e46:	b289      	uxth	r1, r1
 8007e48:	3301      	adds	r3, #1
 8007e4a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007e4e:	429d      	cmp	r5, r3
 8007e50:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007e54:	f84c 1b04 	str.w	r1, [ip], #4
 8007e58:	dcec      	bgt.n	8007e34 <__multadd+0x12>
 8007e5a:	b1d7      	cbz	r7, 8007e92 <__multadd+0x70>
 8007e5c:	68a3      	ldr	r3, [r4, #8]
 8007e5e:	42ab      	cmp	r3, r5
 8007e60:	dc12      	bgt.n	8007e88 <__multadd+0x66>
 8007e62:	6861      	ldr	r1, [r4, #4]
 8007e64:	4630      	mov	r0, r6
 8007e66:	3101      	adds	r1, #1
 8007e68:	f7ff ff90 	bl	8007d8c <_Balloc>
 8007e6c:	6922      	ldr	r2, [r4, #16]
 8007e6e:	3202      	adds	r2, #2
 8007e70:	f104 010c 	add.w	r1, r4, #12
 8007e74:	4680      	mov	r8, r0
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	300c      	adds	r0, #12
 8007e7a:	f7fe fc13 	bl	80066a4 <memcpy>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7ff ffb7 	bl	8007df4 <_Bfree>
 8007e86:	4644      	mov	r4, r8
 8007e88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	615f      	str	r7, [r3, #20]
 8007e90:	6125      	str	r5, [r4, #16]
 8007e92:	4620      	mov	r0, r4
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007e98 <__hi0bits>:
 8007e98:	0c02      	lsrs	r2, r0, #16
 8007e9a:	0412      	lsls	r2, r2, #16
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	b9b2      	cbnz	r2, 8007ece <__hi0bits+0x36>
 8007ea0:	0403      	lsls	r3, r0, #16
 8007ea2:	2010      	movs	r0, #16
 8007ea4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ea8:	bf04      	itt	eq
 8007eaa:	021b      	lsleq	r3, r3, #8
 8007eac:	3008      	addeq	r0, #8
 8007eae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007eb2:	bf04      	itt	eq
 8007eb4:	011b      	lsleq	r3, r3, #4
 8007eb6:	3004      	addeq	r0, #4
 8007eb8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ebc:	bf04      	itt	eq
 8007ebe:	009b      	lsleq	r3, r3, #2
 8007ec0:	3002      	addeq	r0, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	db06      	blt.n	8007ed4 <__hi0bits+0x3c>
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	d503      	bpl.n	8007ed2 <__hi0bits+0x3a>
 8007eca:	3001      	adds	r0, #1
 8007ecc:	4770      	bx	lr
 8007ece:	2000      	movs	r0, #0
 8007ed0:	e7e8      	b.n	8007ea4 <__hi0bits+0xc>
 8007ed2:	2020      	movs	r0, #32
 8007ed4:	4770      	bx	lr

08007ed6 <__lo0bits>:
 8007ed6:	6803      	ldr	r3, [r0, #0]
 8007ed8:	f013 0207 	ands.w	r2, r3, #7
 8007edc:	4601      	mov	r1, r0
 8007ede:	d00b      	beq.n	8007ef8 <__lo0bits+0x22>
 8007ee0:	07da      	lsls	r2, r3, #31
 8007ee2:	d423      	bmi.n	8007f2c <__lo0bits+0x56>
 8007ee4:	0798      	lsls	r0, r3, #30
 8007ee6:	bf49      	itett	mi
 8007ee8:	085b      	lsrmi	r3, r3, #1
 8007eea:	089b      	lsrpl	r3, r3, #2
 8007eec:	2001      	movmi	r0, #1
 8007eee:	600b      	strmi	r3, [r1, #0]
 8007ef0:	bf5c      	itt	pl
 8007ef2:	600b      	strpl	r3, [r1, #0]
 8007ef4:	2002      	movpl	r0, #2
 8007ef6:	4770      	bx	lr
 8007ef8:	b298      	uxth	r0, r3
 8007efa:	b9a8      	cbnz	r0, 8007f28 <__lo0bits+0x52>
 8007efc:	0c1b      	lsrs	r3, r3, #16
 8007efe:	2010      	movs	r0, #16
 8007f00:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007f04:	bf04      	itt	eq
 8007f06:	0a1b      	lsreq	r3, r3, #8
 8007f08:	3008      	addeq	r0, #8
 8007f0a:	071a      	lsls	r2, r3, #28
 8007f0c:	bf04      	itt	eq
 8007f0e:	091b      	lsreq	r3, r3, #4
 8007f10:	3004      	addeq	r0, #4
 8007f12:	079a      	lsls	r2, r3, #30
 8007f14:	bf04      	itt	eq
 8007f16:	089b      	lsreq	r3, r3, #2
 8007f18:	3002      	addeq	r0, #2
 8007f1a:	07da      	lsls	r2, r3, #31
 8007f1c:	d402      	bmi.n	8007f24 <__lo0bits+0x4e>
 8007f1e:	085b      	lsrs	r3, r3, #1
 8007f20:	d006      	beq.n	8007f30 <__lo0bits+0x5a>
 8007f22:	3001      	adds	r0, #1
 8007f24:	600b      	str	r3, [r1, #0]
 8007f26:	4770      	bx	lr
 8007f28:	4610      	mov	r0, r2
 8007f2a:	e7e9      	b.n	8007f00 <__lo0bits+0x2a>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	4770      	bx	lr
 8007f30:	2020      	movs	r0, #32
 8007f32:	4770      	bx	lr

08007f34 <__i2b>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	460c      	mov	r4, r1
 8007f38:	2101      	movs	r1, #1
 8007f3a:	f7ff ff27 	bl	8007d8c <_Balloc>
 8007f3e:	2201      	movs	r2, #1
 8007f40:	6144      	str	r4, [r0, #20]
 8007f42:	6102      	str	r2, [r0, #16]
 8007f44:	bd10      	pop	{r4, pc}

08007f46 <__multiply>:
 8007f46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	4614      	mov	r4, r2
 8007f4c:	690a      	ldr	r2, [r1, #16]
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	bfb8      	it	lt
 8007f54:	460b      	movlt	r3, r1
 8007f56:	4688      	mov	r8, r1
 8007f58:	bfbc      	itt	lt
 8007f5a:	46a0      	movlt	r8, r4
 8007f5c:	461c      	movlt	r4, r3
 8007f5e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f62:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f6a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f6e:	eb07 0609 	add.w	r6, r7, r9
 8007f72:	42b3      	cmp	r3, r6
 8007f74:	bfb8      	it	lt
 8007f76:	3101      	addlt	r1, #1
 8007f78:	f7ff ff08 	bl	8007d8c <_Balloc>
 8007f7c:	f100 0514 	add.w	r5, r0, #20
 8007f80:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007f84:	462b      	mov	r3, r5
 8007f86:	2200      	movs	r2, #0
 8007f88:	4573      	cmp	r3, lr
 8007f8a:	d316      	bcc.n	8007fba <__multiply+0x74>
 8007f8c:	f104 0214 	add.w	r2, r4, #20
 8007f90:	f108 0114 	add.w	r1, r8, #20
 8007f94:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007f98:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	9b00      	ldr	r3, [sp, #0]
 8007fa0:	9201      	str	r2, [sp, #4]
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d80c      	bhi.n	8007fc0 <__multiply+0x7a>
 8007fa6:	2e00      	cmp	r6, #0
 8007fa8:	dd03      	ble.n	8007fb2 <__multiply+0x6c>
 8007faa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d05d      	beq.n	800806e <__multiply+0x128>
 8007fb2:	6106      	str	r6, [r0, #16]
 8007fb4:	b003      	add	sp, #12
 8007fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fba:	f843 2b04 	str.w	r2, [r3], #4
 8007fbe:	e7e3      	b.n	8007f88 <__multiply+0x42>
 8007fc0:	f8b2 b000 	ldrh.w	fp, [r2]
 8007fc4:	f1bb 0f00 	cmp.w	fp, #0
 8007fc8:	d023      	beq.n	8008012 <__multiply+0xcc>
 8007fca:	4689      	mov	r9, r1
 8007fcc:	46ac      	mov	ip, r5
 8007fce:	f04f 0800 	mov.w	r8, #0
 8007fd2:	f859 4b04 	ldr.w	r4, [r9], #4
 8007fd6:	f8dc a000 	ldr.w	sl, [ip]
 8007fda:	b2a3      	uxth	r3, r4
 8007fdc:	fa1f fa8a 	uxth.w	sl, sl
 8007fe0:	fb0b a303 	mla	r3, fp, r3, sl
 8007fe4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007fe8:	f8dc 4000 	ldr.w	r4, [ip]
 8007fec:	4443      	add	r3, r8
 8007fee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007ff2:	fb0b 840a 	mla	r4, fp, sl, r8
 8007ff6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007ffa:	46e2      	mov	sl, ip
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008002:	454f      	cmp	r7, r9
 8008004:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008008:	f84a 3b04 	str.w	r3, [sl], #4
 800800c:	d82b      	bhi.n	8008066 <__multiply+0x120>
 800800e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008012:	9b01      	ldr	r3, [sp, #4]
 8008014:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008018:	3204      	adds	r2, #4
 800801a:	f1ba 0f00 	cmp.w	sl, #0
 800801e:	d020      	beq.n	8008062 <__multiply+0x11c>
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	4689      	mov	r9, r1
 8008024:	46a8      	mov	r8, r5
 8008026:	f04f 0b00 	mov.w	fp, #0
 800802a:	f8b9 c000 	ldrh.w	ip, [r9]
 800802e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008032:	fb0a 440c 	mla	r4, sl, ip, r4
 8008036:	445c      	add	r4, fp
 8008038:	46c4      	mov	ip, r8
 800803a:	b29b      	uxth	r3, r3
 800803c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008040:	f84c 3b04 	str.w	r3, [ip], #4
 8008044:	f859 3b04 	ldr.w	r3, [r9], #4
 8008048:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800804c:	0c1b      	lsrs	r3, r3, #16
 800804e:	fb0a b303 	mla	r3, sl, r3, fp
 8008052:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008056:	454f      	cmp	r7, r9
 8008058:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800805c:	d805      	bhi.n	800806a <__multiply+0x124>
 800805e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008062:	3504      	adds	r5, #4
 8008064:	e79b      	b.n	8007f9e <__multiply+0x58>
 8008066:	46d4      	mov	ip, sl
 8008068:	e7b3      	b.n	8007fd2 <__multiply+0x8c>
 800806a:	46e0      	mov	r8, ip
 800806c:	e7dd      	b.n	800802a <__multiply+0xe4>
 800806e:	3e01      	subs	r6, #1
 8008070:	e799      	b.n	8007fa6 <__multiply+0x60>
	...

08008074 <__pow5mult>:
 8008074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008078:	4615      	mov	r5, r2
 800807a:	f012 0203 	ands.w	r2, r2, #3
 800807e:	4606      	mov	r6, r0
 8008080:	460f      	mov	r7, r1
 8008082:	d007      	beq.n	8008094 <__pow5mult+0x20>
 8008084:	3a01      	subs	r2, #1
 8008086:	4c21      	ldr	r4, [pc, #132]	; (800810c <__pow5mult+0x98>)
 8008088:	2300      	movs	r3, #0
 800808a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800808e:	f7ff fec8 	bl	8007e22 <__multadd>
 8008092:	4607      	mov	r7, r0
 8008094:	10ad      	asrs	r5, r5, #2
 8008096:	d035      	beq.n	8008104 <__pow5mult+0x90>
 8008098:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800809a:	b93c      	cbnz	r4, 80080ac <__pow5mult+0x38>
 800809c:	2010      	movs	r0, #16
 800809e:	f7ff fe59 	bl	8007d54 <malloc>
 80080a2:	6270      	str	r0, [r6, #36]	; 0x24
 80080a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080a8:	6004      	str	r4, [r0, #0]
 80080aa:	60c4      	str	r4, [r0, #12]
 80080ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080b4:	b94c      	cbnz	r4, 80080ca <__pow5mult+0x56>
 80080b6:	f240 2171 	movw	r1, #625	; 0x271
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7ff ff3a 	bl	8007f34 <__i2b>
 80080c0:	2300      	movs	r3, #0
 80080c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80080c6:	4604      	mov	r4, r0
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	f04f 0800 	mov.w	r8, #0
 80080ce:	07eb      	lsls	r3, r5, #31
 80080d0:	d50a      	bpl.n	80080e8 <__pow5mult+0x74>
 80080d2:	4639      	mov	r1, r7
 80080d4:	4622      	mov	r2, r4
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ff35 	bl	8007f46 <__multiply>
 80080dc:	4639      	mov	r1, r7
 80080de:	4681      	mov	r9, r0
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7ff fe87 	bl	8007df4 <_Bfree>
 80080e6:	464f      	mov	r7, r9
 80080e8:	106d      	asrs	r5, r5, #1
 80080ea:	d00b      	beq.n	8008104 <__pow5mult+0x90>
 80080ec:	6820      	ldr	r0, [r4, #0]
 80080ee:	b938      	cbnz	r0, 8008100 <__pow5mult+0x8c>
 80080f0:	4622      	mov	r2, r4
 80080f2:	4621      	mov	r1, r4
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff ff26 	bl	8007f46 <__multiply>
 80080fa:	6020      	str	r0, [r4, #0]
 80080fc:	f8c0 8000 	str.w	r8, [r0]
 8008100:	4604      	mov	r4, r0
 8008102:	e7e4      	b.n	80080ce <__pow5mult+0x5a>
 8008104:	4638      	mov	r0, r7
 8008106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800810a:	bf00      	nop
 800810c:	08008b80 	.word	0x08008b80

08008110 <__lshift>:
 8008110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	460c      	mov	r4, r1
 8008116:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	6849      	ldr	r1, [r1, #4]
 800811e:	eb0a 0903 	add.w	r9, sl, r3
 8008122:	68a3      	ldr	r3, [r4, #8]
 8008124:	4607      	mov	r7, r0
 8008126:	4616      	mov	r6, r2
 8008128:	f109 0501 	add.w	r5, r9, #1
 800812c:	42ab      	cmp	r3, r5
 800812e:	db32      	blt.n	8008196 <__lshift+0x86>
 8008130:	4638      	mov	r0, r7
 8008132:	f7ff fe2b 	bl	8007d8c <_Balloc>
 8008136:	2300      	movs	r3, #0
 8008138:	4680      	mov	r8, r0
 800813a:	f100 0114 	add.w	r1, r0, #20
 800813e:	461a      	mov	r2, r3
 8008140:	4553      	cmp	r3, sl
 8008142:	db2b      	blt.n	800819c <__lshift+0x8c>
 8008144:	6920      	ldr	r0, [r4, #16]
 8008146:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800814a:	f104 0314 	add.w	r3, r4, #20
 800814e:	f016 021f 	ands.w	r2, r6, #31
 8008152:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008156:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800815a:	d025      	beq.n	80081a8 <__lshift+0x98>
 800815c:	f1c2 0e20 	rsb	lr, r2, #32
 8008160:	2000      	movs	r0, #0
 8008162:	681e      	ldr	r6, [r3, #0]
 8008164:	468a      	mov	sl, r1
 8008166:	4096      	lsls	r6, r2
 8008168:	4330      	orrs	r0, r6
 800816a:	f84a 0b04 	str.w	r0, [sl], #4
 800816e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008172:	459c      	cmp	ip, r3
 8008174:	fa20 f00e 	lsr.w	r0, r0, lr
 8008178:	d814      	bhi.n	80081a4 <__lshift+0x94>
 800817a:	6048      	str	r0, [r1, #4]
 800817c:	b108      	cbz	r0, 8008182 <__lshift+0x72>
 800817e:	f109 0502 	add.w	r5, r9, #2
 8008182:	3d01      	subs	r5, #1
 8008184:	4638      	mov	r0, r7
 8008186:	f8c8 5010 	str.w	r5, [r8, #16]
 800818a:	4621      	mov	r1, r4
 800818c:	f7ff fe32 	bl	8007df4 <_Bfree>
 8008190:	4640      	mov	r0, r8
 8008192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008196:	3101      	adds	r1, #1
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	e7c7      	b.n	800812c <__lshift+0x1c>
 800819c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80081a0:	3301      	adds	r3, #1
 80081a2:	e7cd      	b.n	8008140 <__lshift+0x30>
 80081a4:	4651      	mov	r1, sl
 80081a6:	e7dc      	b.n	8008162 <__lshift+0x52>
 80081a8:	3904      	subs	r1, #4
 80081aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80081b2:	459c      	cmp	ip, r3
 80081b4:	d8f9      	bhi.n	80081aa <__lshift+0x9a>
 80081b6:	e7e4      	b.n	8008182 <__lshift+0x72>

080081b8 <__mcmp>:
 80081b8:	6903      	ldr	r3, [r0, #16]
 80081ba:	690a      	ldr	r2, [r1, #16]
 80081bc:	1a9b      	subs	r3, r3, r2
 80081be:	b530      	push	{r4, r5, lr}
 80081c0:	d10c      	bne.n	80081dc <__mcmp+0x24>
 80081c2:	0092      	lsls	r2, r2, #2
 80081c4:	3014      	adds	r0, #20
 80081c6:	3114      	adds	r1, #20
 80081c8:	1884      	adds	r4, r0, r2
 80081ca:	4411      	add	r1, r2
 80081cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081d4:	4295      	cmp	r5, r2
 80081d6:	d003      	beq.n	80081e0 <__mcmp+0x28>
 80081d8:	d305      	bcc.n	80081e6 <__mcmp+0x2e>
 80081da:	2301      	movs	r3, #1
 80081dc:	4618      	mov	r0, r3
 80081de:	bd30      	pop	{r4, r5, pc}
 80081e0:	42a0      	cmp	r0, r4
 80081e2:	d3f3      	bcc.n	80081cc <__mcmp+0x14>
 80081e4:	e7fa      	b.n	80081dc <__mcmp+0x24>
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	e7f7      	b.n	80081dc <__mcmp+0x24>

080081ec <__mdiff>:
 80081ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	460d      	mov	r5, r1
 80081f2:	4607      	mov	r7, r0
 80081f4:	4611      	mov	r1, r2
 80081f6:	4628      	mov	r0, r5
 80081f8:	4614      	mov	r4, r2
 80081fa:	f7ff ffdd 	bl	80081b8 <__mcmp>
 80081fe:	1e06      	subs	r6, r0, #0
 8008200:	d108      	bne.n	8008214 <__mdiff+0x28>
 8008202:	4631      	mov	r1, r6
 8008204:	4638      	mov	r0, r7
 8008206:	f7ff fdc1 	bl	8007d8c <_Balloc>
 800820a:	2301      	movs	r3, #1
 800820c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008214:	bfa4      	itt	ge
 8008216:	4623      	movge	r3, r4
 8008218:	462c      	movge	r4, r5
 800821a:	4638      	mov	r0, r7
 800821c:	6861      	ldr	r1, [r4, #4]
 800821e:	bfa6      	itte	ge
 8008220:	461d      	movge	r5, r3
 8008222:	2600      	movge	r6, #0
 8008224:	2601      	movlt	r6, #1
 8008226:	f7ff fdb1 	bl	8007d8c <_Balloc>
 800822a:	692b      	ldr	r3, [r5, #16]
 800822c:	60c6      	str	r6, [r0, #12]
 800822e:	6926      	ldr	r6, [r4, #16]
 8008230:	f105 0914 	add.w	r9, r5, #20
 8008234:	f104 0214 	add.w	r2, r4, #20
 8008238:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800823c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008240:	f100 0514 	add.w	r5, r0, #20
 8008244:	f04f 0e00 	mov.w	lr, #0
 8008248:	f852 ab04 	ldr.w	sl, [r2], #4
 800824c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008250:	fa1e f18a 	uxtah	r1, lr, sl
 8008254:	b2a3      	uxth	r3, r4
 8008256:	1ac9      	subs	r1, r1, r3
 8008258:	0c23      	lsrs	r3, r4, #16
 800825a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800825e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008262:	b289      	uxth	r1, r1
 8008264:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008268:	45c8      	cmp	r8, r9
 800826a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800826e:	4694      	mov	ip, r2
 8008270:	f845 3b04 	str.w	r3, [r5], #4
 8008274:	d8e8      	bhi.n	8008248 <__mdiff+0x5c>
 8008276:	45bc      	cmp	ip, r7
 8008278:	d304      	bcc.n	8008284 <__mdiff+0x98>
 800827a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800827e:	b183      	cbz	r3, 80082a2 <__mdiff+0xb6>
 8008280:	6106      	str	r6, [r0, #16]
 8008282:	e7c5      	b.n	8008210 <__mdiff+0x24>
 8008284:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008288:	fa1e f381 	uxtah	r3, lr, r1
 800828c:	141a      	asrs	r2, r3, #16
 800828e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008292:	b29b      	uxth	r3, r3
 8008294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008298:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800829c:	f845 3b04 	str.w	r3, [r5], #4
 80082a0:	e7e9      	b.n	8008276 <__mdiff+0x8a>
 80082a2:	3e01      	subs	r6, #1
 80082a4:	e7e9      	b.n	800827a <__mdiff+0x8e>

080082a6 <__d2b>:
 80082a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082aa:	460e      	mov	r6, r1
 80082ac:	2101      	movs	r1, #1
 80082ae:	ec59 8b10 	vmov	r8, r9, d0
 80082b2:	4615      	mov	r5, r2
 80082b4:	f7ff fd6a 	bl	8007d8c <_Balloc>
 80082b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80082bc:	4607      	mov	r7, r0
 80082be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082c2:	bb34      	cbnz	r4, 8008312 <__d2b+0x6c>
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	f1b8 0300 	subs.w	r3, r8, #0
 80082ca:	d027      	beq.n	800831c <__d2b+0x76>
 80082cc:	a802      	add	r0, sp, #8
 80082ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 80082d2:	f7ff fe00 	bl	8007ed6 <__lo0bits>
 80082d6:	9900      	ldr	r1, [sp, #0]
 80082d8:	b1f0      	cbz	r0, 8008318 <__d2b+0x72>
 80082da:	9a01      	ldr	r2, [sp, #4]
 80082dc:	f1c0 0320 	rsb	r3, r0, #32
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	430b      	orrs	r3, r1
 80082e6:	40c2      	lsrs	r2, r0
 80082e8:	617b      	str	r3, [r7, #20]
 80082ea:	9201      	str	r2, [sp, #4]
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bf14      	ite	ne
 80082f4:	2102      	movne	r1, #2
 80082f6:	2101      	moveq	r1, #1
 80082f8:	6139      	str	r1, [r7, #16]
 80082fa:	b1c4      	cbz	r4, 800832e <__d2b+0x88>
 80082fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008300:	4404      	add	r4, r0
 8008302:	6034      	str	r4, [r6, #0]
 8008304:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008308:	6028      	str	r0, [r5, #0]
 800830a:	4638      	mov	r0, r7
 800830c:	b003      	add	sp, #12
 800830e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008316:	e7d5      	b.n	80082c4 <__d2b+0x1e>
 8008318:	6179      	str	r1, [r7, #20]
 800831a:	e7e7      	b.n	80082ec <__d2b+0x46>
 800831c:	a801      	add	r0, sp, #4
 800831e:	f7ff fdda 	bl	8007ed6 <__lo0bits>
 8008322:	9b01      	ldr	r3, [sp, #4]
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	2101      	movs	r1, #1
 8008328:	6139      	str	r1, [r7, #16]
 800832a:	3020      	adds	r0, #32
 800832c:	e7e5      	b.n	80082fa <__d2b+0x54>
 800832e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008332:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008336:	6030      	str	r0, [r6, #0]
 8008338:	6918      	ldr	r0, [r3, #16]
 800833a:	f7ff fdad 	bl	8007e98 <__hi0bits>
 800833e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008342:	e7e1      	b.n	8008308 <__d2b+0x62>

08008344 <_calloc_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	fb02 f401 	mul.w	r4, r2, r1
 800834a:	4621      	mov	r1, r4
 800834c:	f7fe f9d6 	bl	80066fc <_malloc_r>
 8008350:	4605      	mov	r5, r0
 8008352:	b118      	cbz	r0, 800835c <_calloc_r+0x18>
 8008354:	4622      	mov	r2, r4
 8008356:	2100      	movs	r1, #0
 8008358:	f7fe f9c8 	bl	80066ec <memset>
 800835c:	4628      	mov	r0, r5
 800835e:	bd38      	pop	{r3, r4, r5, pc}

08008360 <_free_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4605      	mov	r5, r0
 8008364:	2900      	cmp	r1, #0
 8008366:	d045      	beq.n	80083f4 <_free_r+0x94>
 8008368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836c:	1f0c      	subs	r4, r1, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	bfb8      	it	lt
 8008372:	18e4      	addlt	r4, r4, r3
 8008374:	f7ff fd08 	bl	8007d88 <__malloc_lock>
 8008378:	4a1f      	ldr	r2, [pc, #124]	; (80083f8 <_free_r+0x98>)
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	4610      	mov	r0, r2
 800837e:	b933      	cbnz	r3, 800838e <_free_r+0x2e>
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	6014      	str	r4, [r2, #0]
 8008384:	4628      	mov	r0, r5
 8008386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800838a:	f7ff bcfe 	b.w	8007d8a <__malloc_unlock>
 800838e:	42a3      	cmp	r3, r4
 8008390:	d90c      	bls.n	80083ac <_free_r+0x4c>
 8008392:	6821      	ldr	r1, [r4, #0]
 8008394:	1862      	adds	r2, r4, r1
 8008396:	4293      	cmp	r3, r2
 8008398:	bf04      	itt	eq
 800839a:	681a      	ldreq	r2, [r3, #0]
 800839c:	685b      	ldreq	r3, [r3, #4]
 800839e:	6063      	str	r3, [r4, #4]
 80083a0:	bf04      	itt	eq
 80083a2:	1852      	addeq	r2, r2, r1
 80083a4:	6022      	streq	r2, [r4, #0]
 80083a6:	6004      	str	r4, [r0, #0]
 80083a8:	e7ec      	b.n	8008384 <_free_r+0x24>
 80083aa:	4613      	mov	r3, r2
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	b10a      	cbz	r2, 80083b4 <_free_r+0x54>
 80083b0:	42a2      	cmp	r2, r4
 80083b2:	d9fa      	bls.n	80083aa <_free_r+0x4a>
 80083b4:	6819      	ldr	r1, [r3, #0]
 80083b6:	1858      	adds	r0, r3, r1
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d10b      	bne.n	80083d4 <_free_r+0x74>
 80083bc:	6820      	ldr	r0, [r4, #0]
 80083be:	4401      	add	r1, r0
 80083c0:	1858      	adds	r0, r3, r1
 80083c2:	4282      	cmp	r2, r0
 80083c4:	6019      	str	r1, [r3, #0]
 80083c6:	d1dd      	bne.n	8008384 <_free_r+0x24>
 80083c8:	6810      	ldr	r0, [r2, #0]
 80083ca:	6852      	ldr	r2, [r2, #4]
 80083cc:	605a      	str	r2, [r3, #4]
 80083ce:	4401      	add	r1, r0
 80083d0:	6019      	str	r1, [r3, #0]
 80083d2:	e7d7      	b.n	8008384 <_free_r+0x24>
 80083d4:	d902      	bls.n	80083dc <_free_r+0x7c>
 80083d6:	230c      	movs	r3, #12
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	e7d3      	b.n	8008384 <_free_r+0x24>
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	1821      	adds	r1, r4, r0
 80083e0:	428a      	cmp	r2, r1
 80083e2:	bf04      	itt	eq
 80083e4:	6811      	ldreq	r1, [r2, #0]
 80083e6:	6852      	ldreq	r2, [r2, #4]
 80083e8:	6062      	str	r2, [r4, #4]
 80083ea:	bf04      	itt	eq
 80083ec:	1809      	addeq	r1, r1, r0
 80083ee:	6021      	streq	r1, [r4, #0]
 80083f0:	605c      	str	r4, [r3, #4]
 80083f2:	e7c7      	b.n	8008384 <_free_r+0x24>
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	bf00      	nop
 80083f8:	200205e0 	.word	0x200205e0

080083fc <__ssputs_r>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	688e      	ldr	r6, [r1, #8]
 8008402:	429e      	cmp	r6, r3
 8008404:	4682      	mov	sl, r0
 8008406:	460c      	mov	r4, r1
 8008408:	4690      	mov	r8, r2
 800840a:	4699      	mov	r9, r3
 800840c:	d837      	bhi.n	800847e <__ssputs_r+0x82>
 800840e:	898a      	ldrh	r2, [r1, #12]
 8008410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008414:	d031      	beq.n	800847a <__ssputs_r+0x7e>
 8008416:	6825      	ldr	r5, [r4, #0]
 8008418:	6909      	ldr	r1, [r1, #16]
 800841a:	1a6f      	subs	r7, r5, r1
 800841c:	6965      	ldr	r5, [r4, #20]
 800841e:	2302      	movs	r3, #2
 8008420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008424:	fb95 f5f3 	sdiv	r5, r5, r3
 8008428:	f109 0301 	add.w	r3, r9, #1
 800842c:	443b      	add	r3, r7
 800842e:	429d      	cmp	r5, r3
 8008430:	bf38      	it	cc
 8008432:	461d      	movcc	r5, r3
 8008434:	0553      	lsls	r3, r2, #21
 8008436:	d530      	bpl.n	800849a <__ssputs_r+0x9e>
 8008438:	4629      	mov	r1, r5
 800843a:	f7fe f95f 	bl	80066fc <_malloc_r>
 800843e:	4606      	mov	r6, r0
 8008440:	b950      	cbnz	r0, 8008458 <__ssputs_r+0x5c>
 8008442:	230c      	movs	r3, #12
 8008444:	f8ca 3000 	str.w	r3, [sl]
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	f04f 30ff 	mov.w	r0, #4294967295
 8008454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008458:	463a      	mov	r2, r7
 800845a:	6921      	ldr	r1, [r4, #16]
 800845c:	f7fe f922 	bl	80066a4 <memcpy>
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846a:	81a3      	strh	r3, [r4, #12]
 800846c:	6126      	str	r6, [r4, #16]
 800846e:	6165      	str	r5, [r4, #20]
 8008470:	443e      	add	r6, r7
 8008472:	1bed      	subs	r5, r5, r7
 8008474:	6026      	str	r6, [r4, #0]
 8008476:	60a5      	str	r5, [r4, #8]
 8008478:	464e      	mov	r6, r9
 800847a:	454e      	cmp	r6, r9
 800847c:	d900      	bls.n	8008480 <__ssputs_r+0x84>
 800847e:	464e      	mov	r6, r9
 8008480:	4632      	mov	r2, r6
 8008482:	4641      	mov	r1, r8
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	f7fe f918 	bl	80066ba <memmove>
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	1b9b      	subs	r3, r3, r6
 800848e:	60a3      	str	r3, [r4, #8]
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	441e      	add	r6, r3
 8008494:	6026      	str	r6, [r4, #0]
 8008496:	2000      	movs	r0, #0
 8008498:	e7dc      	b.n	8008454 <__ssputs_r+0x58>
 800849a:	462a      	mov	r2, r5
 800849c:	f000 f90d 	bl	80086ba <_realloc_r>
 80084a0:	4606      	mov	r6, r0
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d1e2      	bne.n	800846c <__ssputs_r+0x70>
 80084a6:	6921      	ldr	r1, [r4, #16]
 80084a8:	4650      	mov	r0, sl
 80084aa:	f7ff ff59 	bl	8008360 <_free_r>
 80084ae:	e7c8      	b.n	8008442 <__ssputs_r+0x46>

080084b0 <_svfiprintf_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	461d      	mov	r5, r3
 80084b6:	898b      	ldrh	r3, [r1, #12]
 80084b8:	061f      	lsls	r7, r3, #24
 80084ba:	b09d      	sub	sp, #116	; 0x74
 80084bc:	4680      	mov	r8, r0
 80084be:	460c      	mov	r4, r1
 80084c0:	4616      	mov	r6, r2
 80084c2:	d50f      	bpl.n	80084e4 <_svfiprintf_r+0x34>
 80084c4:	690b      	ldr	r3, [r1, #16]
 80084c6:	b96b      	cbnz	r3, 80084e4 <_svfiprintf_r+0x34>
 80084c8:	2140      	movs	r1, #64	; 0x40
 80084ca:	f7fe f917 	bl	80066fc <_malloc_r>
 80084ce:	6020      	str	r0, [r4, #0]
 80084d0:	6120      	str	r0, [r4, #16]
 80084d2:	b928      	cbnz	r0, 80084e0 <_svfiprintf_r+0x30>
 80084d4:	230c      	movs	r3, #12
 80084d6:	f8c8 3000 	str.w	r3, [r8]
 80084da:	f04f 30ff 	mov.w	r0, #4294967295
 80084de:	e0c8      	b.n	8008672 <_svfiprintf_r+0x1c2>
 80084e0:	2340      	movs	r3, #64	; 0x40
 80084e2:	6163      	str	r3, [r4, #20]
 80084e4:	2300      	movs	r3, #0
 80084e6:	9309      	str	r3, [sp, #36]	; 0x24
 80084e8:	2320      	movs	r3, #32
 80084ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ee:	2330      	movs	r3, #48	; 0x30
 80084f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084f4:	9503      	str	r5, [sp, #12]
 80084f6:	f04f 0b01 	mov.w	fp, #1
 80084fa:	4637      	mov	r7, r6
 80084fc:	463d      	mov	r5, r7
 80084fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008502:	b10b      	cbz	r3, 8008508 <_svfiprintf_r+0x58>
 8008504:	2b25      	cmp	r3, #37	; 0x25
 8008506:	d13e      	bne.n	8008586 <_svfiprintf_r+0xd6>
 8008508:	ebb7 0a06 	subs.w	sl, r7, r6
 800850c:	d00b      	beq.n	8008526 <_svfiprintf_r+0x76>
 800850e:	4653      	mov	r3, sl
 8008510:	4632      	mov	r2, r6
 8008512:	4621      	mov	r1, r4
 8008514:	4640      	mov	r0, r8
 8008516:	f7ff ff71 	bl	80083fc <__ssputs_r>
 800851a:	3001      	adds	r0, #1
 800851c:	f000 80a4 	beq.w	8008668 <_svfiprintf_r+0x1b8>
 8008520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008522:	4453      	add	r3, sl
 8008524:	9309      	str	r3, [sp, #36]	; 0x24
 8008526:	783b      	ldrb	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 809d 	beq.w	8008668 <_svfiprintf_r+0x1b8>
 800852e:	2300      	movs	r3, #0
 8008530:	f04f 32ff 	mov.w	r2, #4294967295
 8008534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008538:	9304      	str	r3, [sp, #16]
 800853a:	9307      	str	r3, [sp, #28]
 800853c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008540:	931a      	str	r3, [sp, #104]	; 0x68
 8008542:	462f      	mov	r7, r5
 8008544:	2205      	movs	r2, #5
 8008546:	f817 1b01 	ldrb.w	r1, [r7], #1
 800854a:	4850      	ldr	r0, [pc, #320]	; (800868c <_svfiprintf_r+0x1dc>)
 800854c:	f7f7 fe80 	bl	8000250 <memchr>
 8008550:	9b04      	ldr	r3, [sp, #16]
 8008552:	b9d0      	cbnz	r0, 800858a <_svfiprintf_r+0xda>
 8008554:	06d9      	lsls	r1, r3, #27
 8008556:	bf44      	itt	mi
 8008558:	2220      	movmi	r2, #32
 800855a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800855e:	071a      	lsls	r2, r3, #28
 8008560:	bf44      	itt	mi
 8008562:	222b      	movmi	r2, #43	; 0x2b
 8008564:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008568:	782a      	ldrb	r2, [r5, #0]
 800856a:	2a2a      	cmp	r2, #42	; 0x2a
 800856c:	d015      	beq.n	800859a <_svfiprintf_r+0xea>
 800856e:	9a07      	ldr	r2, [sp, #28]
 8008570:	462f      	mov	r7, r5
 8008572:	2000      	movs	r0, #0
 8008574:	250a      	movs	r5, #10
 8008576:	4639      	mov	r1, r7
 8008578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800857c:	3b30      	subs	r3, #48	; 0x30
 800857e:	2b09      	cmp	r3, #9
 8008580:	d94d      	bls.n	800861e <_svfiprintf_r+0x16e>
 8008582:	b1b8      	cbz	r0, 80085b4 <_svfiprintf_r+0x104>
 8008584:	e00f      	b.n	80085a6 <_svfiprintf_r+0xf6>
 8008586:	462f      	mov	r7, r5
 8008588:	e7b8      	b.n	80084fc <_svfiprintf_r+0x4c>
 800858a:	4a40      	ldr	r2, [pc, #256]	; (800868c <_svfiprintf_r+0x1dc>)
 800858c:	1a80      	subs	r0, r0, r2
 800858e:	fa0b f000 	lsl.w	r0, fp, r0
 8008592:	4318      	orrs	r0, r3
 8008594:	9004      	str	r0, [sp, #16]
 8008596:	463d      	mov	r5, r7
 8008598:	e7d3      	b.n	8008542 <_svfiprintf_r+0x92>
 800859a:	9a03      	ldr	r2, [sp, #12]
 800859c:	1d11      	adds	r1, r2, #4
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	9103      	str	r1, [sp, #12]
 80085a2:	2a00      	cmp	r2, #0
 80085a4:	db01      	blt.n	80085aa <_svfiprintf_r+0xfa>
 80085a6:	9207      	str	r2, [sp, #28]
 80085a8:	e004      	b.n	80085b4 <_svfiprintf_r+0x104>
 80085aa:	4252      	negs	r2, r2
 80085ac:	f043 0302 	orr.w	r3, r3, #2
 80085b0:	9207      	str	r2, [sp, #28]
 80085b2:	9304      	str	r3, [sp, #16]
 80085b4:	783b      	ldrb	r3, [r7, #0]
 80085b6:	2b2e      	cmp	r3, #46	; 0x2e
 80085b8:	d10c      	bne.n	80085d4 <_svfiprintf_r+0x124>
 80085ba:	787b      	ldrb	r3, [r7, #1]
 80085bc:	2b2a      	cmp	r3, #42	; 0x2a
 80085be:	d133      	bne.n	8008628 <_svfiprintf_r+0x178>
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	1d1a      	adds	r2, r3, #4
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	9203      	str	r2, [sp, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	bfb8      	it	lt
 80085cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80085d0:	3702      	adds	r7, #2
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	4d2e      	ldr	r5, [pc, #184]	; (8008690 <_svfiprintf_r+0x1e0>)
 80085d6:	7839      	ldrb	r1, [r7, #0]
 80085d8:	2203      	movs	r2, #3
 80085da:	4628      	mov	r0, r5
 80085dc:	f7f7 fe38 	bl	8000250 <memchr>
 80085e0:	b138      	cbz	r0, 80085f2 <_svfiprintf_r+0x142>
 80085e2:	2340      	movs	r3, #64	; 0x40
 80085e4:	1b40      	subs	r0, r0, r5
 80085e6:	fa03 f000 	lsl.w	r0, r3, r0
 80085ea:	9b04      	ldr	r3, [sp, #16]
 80085ec:	4303      	orrs	r3, r0
 80085ee:	3701      	adds	r7, #1
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	7839      	ldrb	r1, [r7, #0]
 80085f4:	4827      	ldr	r0, [pc, #156]	; (8008694 <_svfiprintf_r+0x1e4>)
 80085f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085fa:	2206      	movs	r2, #6
 80085fc:	1c7e      	adds	r6, r7, #1
 80085fe:	f7f7 fe27 	bl	8000250 <memchr>
 8008602:	2800      	cmp	r0, #0
 8008604:	d038      	beq.n	8008678 <_svfiprintf_r+0x1c8>
 8008606:	4b24      	ldr	r3, [pc, #144]	; (8008698 <_svfiprintf_r+0x1e8>)
 8008608:	bb13      	cbnz	r3, 8008650 <_svfiprintf_r+0x1a0>
 800860a:	9b03      	ldr	r3, [sp, #12]
 800860c:	3307      	adds	r3, #7
 800860e:	f023 0307 	bic.w	r3, r3, #7
 8008612:	3308      	adds	r3, #8
 8008614:	9303      	str	r3, [sp, #12]
 8008616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008618:	444b      	add	r3, r9
 800861a:	9309      	str	r3, [sp, #36]	; 0x24
 800861c:	e76d      	b.n	80084fa <_svfiprintf_r+0x4a>
 800861e:	fb05 3202 	mla	r2, r5, r2, r3
 8008622:	2001      	movs	r0, #1
 8008624:	460f      	mov	r7, r1
 8008626:	e7a6      	b.n	8008576 <_svfiprintf_r+0xc6>
 8008628:	2300      	movs	r3, #0
 800862a:	3701      	adds	r7, #1
 800862c:	9305      	str	r3, [sp, #20]
 800862e:	4619      	mov	r1, r3
 8008630:	250a      	movs	r5, #10
 8008632:	4638      	mov	r0, r7
 8008634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008638:	3a30      	subs	r2, #48	; 0x30
 800863a:	2a09      	cmp	r2, #9
 800863c:	d903      	bls.n	8008646 <_svfiprintf_r+0x196>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0c8      	beq.n	80085d4 <_svfiprintf_r+0x124>
 8008642:	9105      	str	r1, [sp, #20]
 8008644:	e7c6      	b.n	80085d4 <_svfiprintf_r+0x124>
 8008646:	fb05 2101 	mla	r1, r5, r1, r2
 800864a:	2301      	movs	r3, #1
 800864c:	4607      	mov	r7, r0
 800864e:	e7f0      	b.n	8008632 <_svfiprintf_r+0x182>
 8008650:	ab03      	add	r3, sp, #12
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4622      	mov	r2, r4
 8008656:	4b11      	ldr	r3, [pc, #68]	; (800869c <_svfiprintf_r+0x1ec>)
 8008658:	a904      	add	r1, sp, #16
 800865a:	4640      	mov	r0, r8
 800865c:	f7fe f930 	bl	80068c0 <_printf_float>
 8008660:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008664:	4681      	mov	r9, r0
 8008666:	d1d6      	bne.n	8008616 <_svfiprintf_r+0x166>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	065b      	lsls	r3, r3, #25
 800866c:	f53f af35 	bmi.w	80084da <_svfiprintf_r+0x2a>
 8008670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008672:	b01d      	add	sp, #116	; 0x74
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	ab03      	add	r3, sp, #12
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	4622      	mov	r2, r4
 800867e:	4b07      	ldr	r3, [pc, #28]	; (800869c <_svfiprintf_r+0x1ec>)
 8008680:	a904      	add	r1, sp, #16
 8008682:	4640      	mov	r0, r8
 8008684:	f7fe fbbe 	bl	8006e04 <_printf_i>
 8008688:	e7ea      	b.n	8008660 <_svfiprintf_r+0x1b0>
 800868a:	bf00      	nop
 800868c:	08008b8c 	.word	0x08008b8c
 8008690:	08008b92 	.word	0x08008b92
 8008694:	08008b96 	.word	0x08008b96
 8008698:	080068c1 	.word	0x080068c1
 800869c:	080083fd 	.word	0x080083fd

080086a0 <__ascii_wctomb>:
 80086a0:	b149      	cbz	r1, 80086b6 <__ascii_wctomb+0x16>
 80086a2:	2aff      	cmp	r2, #255	; 0xff
 80086a4:	bf85      	ittet	hi
 80086a6:	238a      	movhi	r3, #138	; 0x8a
 80086a8:	6003      	strhi	r3, [r0, #0]
 80086aa:	700a      	strbls	r2, [r1, #0]
 80086ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80086b0:	bf98      	it	ls
 80086b2:	2001      	movls	r0, #1
 80086b4:	4770      	bx	lr
 80086b6:	4608      	mov	r0, r1
 80086b8:	4770      	bx	lr

080086ba <_realloc_r>:
 80086ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086bc:	4607      	mov	r7, r0
 80086be:	4614      	mov	r4, r2
 80086c0:	460e      	mov	r6, r1
 80086c2:	b921      	cbnz	r1, 80086ce <_realloc_r+0x14>
 80086c4:	4611      	mov	r1, r2
 80086c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086ca:	f7fe b817 	b.w	80066fc <_malloc_r>
 80086ce:	b922      	cbnz	r2, 80086da <_realloc_r+0x20>
 80086d0:	f7ff fe46 	bl	8008360 <_free_r>
 80086d4:	4625      	mov	r5, r4
 80086d6:	4628      	mov	r0, r5
 80086d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086da:	f000 f814 	bl	8008706 <_malloc_usable_size_r>
 80086de:	42a0      	cmp	r0, r4
 80086e0:	d20f      	bcs.n	8008702 <_realloc_r+0x48>
 80086e2:	4621      	mov	r1, r4
 80086e4:	4638      	mov	r0, r7
 80086e6:	f7fe f809 	bl	80066fc <_malloc_r>
 80086ea:	4605      	mov	r5, r0
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d0f2      	beq.n	80086d6 <_realloc_r+0x1c>
 80086f0:	4631      	mov	r1, r6
 80086f2:	4622      	mov	r2, r4
 80086f4:	f7fd ffd6 	bl	80066a4 <memcpy>
 80086f8:	4631      	mov	r1, r6
 80086fa:	4638      	mov	r0, r7
 80086fc:	f7ff fe30 	bl	8008360 <_free_r>
 8008700:	e7e9      	b.n	80086d6 <_realloc_r+0x1c>
 8008702:	4635      	mov	r5, r6
 8008704:	e7e7      	b.n	80086d6 <_realloc_r+0x1c>

08008706 <_malloc_usable_size_r>:
 8008706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800870a:	1f18      	subs	r0, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	bfbc      	itt	lt
 8008710:	580b      	ldrlt	r3, [r1, r0]
 8008712:	18c0      	addlt	r0, r0, r3
 8008714:	4770      	bx	lr
	...

08008718 <_init>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr

08008724 <_fini>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	bf00      	nop
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr
